from math import sin, cos, pi
import rclpy
from rclpy.node import Node
from rclpy.qos import QoSProfile
from geometry_msgs.msg import Quaternion
from sensor_msgs.msg import JointState
from tf2_ros import TransformBroadcaster, TransformStamped

class StatePublisher(Node):

    def __init__(self):
        rclpy.init()
        super().__init__('state_publisher')

        qos_profile = QoSProfile(depth=10)
        self.joint_pub = self.create_publisher(JointState, 'joint_states', qos_profile)
        self.broadcaster = TransformBroadcaster(self, qos=qos_profile)
        self.nodeName = self.get_name()
        self.get_logger().info("{0} started".format(self.nodeName))

        degree = pi / 180.0
        loop_rate = self.create_rate(20)

        # robot state
        # tilt = 0.
        # tinc = degree
        # swivel = 0.
        # angle = 0.
        # height = 0.
        # hinc = 0.005

        # message declarations
        # transform = TransformStamped()
        # transform.header.frame_id = 'world'
        # transform.child_frame_id = 'base_link'
        joint_state = JointState()
        Hello = list(range(0, 314,2))
        isas = list(range(0, 314*2,1))
        i = 0
        state = 0
        j = 0
        k = len(isas)-1
        List = [[-0.337, 2.681], [-0.333, 2.691], [-0.337, 2.701], [-0.341, 2.711], [-0.336, 2.721], [-0.34, 2.731], [-0.344, 2.741], [-0.347, 2.751], [-0.346, 2.759], [-0.344, 2.771], [-0.348, 2.781], [-0.356, 2.789], [-0.36, 2.799], [-0.363, 2.809], [-0.366, 2.819], [-0.369, 2.829], [-0.383, 2.839], [-0.386, 2.849], [-0.396, 2.857], [-0.399, 2.867], [-0.41, 2.874], [-0.427, 2.884], [-0.43, 2.894], [-0.442, 2.901], [-0.462, 2.911], [-0.475, 2.918], [-0.496, 2.927], [-0.511, 2.934], [-0.527, 2.941], [-0.562, 2.946], [-0.58, 2.953], [-0.61, 2.961], [-0.641, 2.964], [-0.674, 2.971], [-0.709, 2.974], [-0.758, 2.977], [-0.786, 2.981], [-0.84, 2.983], [-0.881, 2.984], [-0.939, 2.985], [-0.998, 2.985], [-1.043, 2.984], [-1.105, 2.982], [-1.151, 2.981], [-1.216, 2.975], [-1.262, 2.973], [-1.323, 2.966], [-1.366, 2.963], [-1.423, 2.956], [-1.464, 2.952], [-1.515, 2.944], [-1.551, 2.937], [-1.597, 2.928], [-1.628, 2.921], [-1.658, 2.914], [-1.697, 2.905], [-1.723, 2.897], [-1.747, 2.89], [-1.779, 2.88], [-1.796, 2.87], [-1.816, 2.863], [-1.835, 2.855], [-1.855, 2.843], [-1.867, 2.833], [-1.883, 2.825], [-1.893, 2.815], [-1.902, 2.805], [-1.91, 2.795], [-1.922, 2.787], [-1.929, 2.777], [-1.936, 2.767], [-1.942, 2.757], [-1.942, 2.745], [-1.947, 2.735], [-1.947, 2.727], [-1.951, 2.717], [-1.951, 2.705], [-1.95, 2.697], [-1.953, 2.687], [-1.948, 2.677], [-1.947, 2.666], [-1.946, 2.658], [-1.94, 2.648], [-1.942, 2.638], [-1.937, 2.628], [-1.932, 2.618], [-1.926, 2.608], [-1.921, 2.598], [-1.915, 2.588], [-1.91, 2.578], [-1.905, 2.568], [-1.899, 2.558], [-1.894, 2.547], [-1.889, 2.537], [-1.881, 2.529], [-1.875, 2.519], [-1.868, 2.511], [-1.862, 2.501], [-1.851, 2.49], [-1.846, 2.48], [-1.838, 2.472], [-1.828, 2.461], [-1.82, 2.453], [-1.813, 2.445], [-1.802, 2.434], [-1.795, 2.425], [-1.785, 2.415], [-1.778, 2.406], [-1.771, 2.398], [-1.759, 2.389], [-1.752, 2.38], [-1.74, 2.371], [-1.733, 2.362], [-1.721, 2.353], [-1.713, 2.346], [-1.703, 2.335], [-1.692, 2.325], [-1.683, 2.318], [-1.672, 2.309], [-1.664, 2.301], [-1.653, 2.292], [-1.645, 2.284], [-1.632, 2.276], [-1.624, 2.269], [-1.613, 2.259], [-1.603, 2.253], [-1.593, 2.243], [-1.583, 2.237], [-1.571, 2.228], [-1.563, 2.221], [-1.551, 2.212], [-1.541, 2.206], [-1.529, 2.197], [-1.52, 2.19], [-1.511, 2.184], [-1.499, 2.175], [-1.488, 2.169], [-1.479, 2.163], [-1.467, 2.153], [-1.456, 2.148], [-1.447, 2.141], [-1.436, 2.135], [-1.427, 2.129], [-1.417, 2.123], [-1.404, 2.114], [-1.393, 2.108], [-1.384, 2.101], [-1.374, 2.095], [-1.365, 2.092], [-1.355, 2.085], [-1.344, 2.079], [-1.332, 2.074], [-1.321, 2.067], [-1.311, 2.061], [-1.303, 2.057], [-1.291, 2.051], [-1.282, 2.047], [-1.27, 2.042], [-1.262, 2.038], [-1.25, 2.031], [-1.242, 2.027], [-1.23, 2.021], [-1.22, 2.018], [-1.212, 2.013], [-1.201, 2.01], [-1.191, 2.006], [-1.181, 2.002], [-1.171, 1.999], [-1.161, 1.995], [-1.151, 1.991], [-1.141, 1.986], [-1.131, 1.982], [-1.123, 1.981], [-1.113, 1.977], [-1.103, 1.972], [-1.093, 1.971], [-1.083, 1.967], [-1.075, 1.965], [-1.066, 1.963], [-1.056, 1.962], [-1.046, 1.957], [-1.038, 1.955], [-1.027, 1.953], [-1.019, 1.951], [-1.008, 1.95], [-1.002, 1.951], [-0.991, 1.948], [-0.983, 1.946], [-0.972, 1.944], [-0.965, 1.944], [-0.955, 1.942], [-0.948, 1.942], [-0.938, 1.943], [-0.93, 1.94], [-0.921, 1.94], [-0.914, 1.94], [-0.904, 1.94], [-0.902, 1.94], [-0.892, 1.94], [-0.885, 1.94], [-0.875, 1.94], [-0.87, 1.943], [-0.86, 1.942], [-0.853, 1.942], [-0.844, 1.945], [-0.837, 1.944], [-0.828, 1.946], [-0.822, 1.949], [-0.812, 1.948], [-0.805, 1.95], [-0.796, 1.952], [-0.79, 1.954], [-0.783, 1.956], [-0.774, 1.957], [-0.768, 1.959], [-0.761, 1.961], [-0.752, 1.966], [-0.746, 1.967], [-0.739, 1.969], [-0.733, 1.973], [-0.723, 1.974], [-0.717, 1.979], [-0.71, 1.983], [-0.703, 1.984], [-0.697, 1.988], [-0.69, 1.992], [-0.683, 1.996], [-0.677, 2.0], [-0.67, 2.004], [-0.663, 2.008], [-0.656, 2.011], [-0.651, 2.015], [-0.645, 2.022], [-0.637, 2.025], [-0.633, 2.029], [-0.626, 2.036], [-0.621, 2.04], [-0.614, 2.046], [-0.609, 2.049], [-0.601, 2.055], [-0.596, 2.062], [-0.591, 2.066], [-0.583, 2.071], [-0.578, 2.077], [-0.573, 2.084], [-0.567, 2.087], [-0.562, 2.093], [-0.556, 2.099], [-0.55, 2.105], [-0.544, 2.111], [-0.541, 2.118], [-0.535, 2.127], [-0.529, 2.133], [-0.526, 2.14], [-0.519, 2.145], [-0.515, 2.152], [-0.508, 2.16], [-0.505, 2.167], [-0.501, 2.173], [-0.496, 2.183], [-0.489, 2.188], [-0.484, 2.194], [-0.479, 2.203], [-0.478, 2.211], [-0.473, 2.22], [-0.468, 2.226], [-0.463, 2.232], [-0.46, 2.242], [-0.455, 2.248], [-0.452, 2.258], [-0.446, 2.264], [-0.443, 2.274], [-0.437, 2.28], [-0.433, 2.289], [-0.429, 2.299], [-0.426, 2.306], [-0.422, 2.316], [-0.418, 2.323], [-0.413, 2.332], [-0.41, 2.34], [-0.408, 2.351], [-0.404, 2.358], [-0.398, 2.367], [-0.397, 2.375], [-0.395, 2.386], [-0.39, 2.393], [-0.387, 2.404], [-0.386, 2.413], [-0.379, 2.421], [-0.377, 2.43], [-0.375, 2.438], [-0.371, 2.449], [-0.372, 2.459], [-0.367, 2.47], [-0.364, 2.478], [-0.361, 2.486], [-0.362, 2.497], [-0.356, 2.507], [-0.356, 2.517], [-0.352, 2.525], [-0.352, 2.535], [-0.348, 2.543], [-0.347, 2.553], [-0.346, 2.564], [-0.345, 2.574], [-0.344, 2.584], [-0.342, 2.594], [-0.341, 2.604], [-0.339, 2.614], [-0.336, 2.624], [-0.334, 2.634], [-0.339, 2.644], [-0.336, 2.654], [-0.332, 2.663], [-0.337, 2.673]]

        O = len(List) - 1
        zz = 0
        try:
            while rclpy.ok():
                rclpy.spin_once(self)

                # update joint_state
                q2 = -0.135
                now = self.get_clock().now()
                joint_state.header.stamp = now.to_msg()
                joint_state.name = ['joint_1', 'joint_2', 'joint_3', 'joint_4','joint_chess']
                # joint_state.position = [Hello[i]/-100. , q2 , Hello[i]/100. , 0., isas[j]/100.]
                # joint_state.position = [0., q2, 0., 0., pi/4.]
                joint_state.position = [List[zz][0], q2, List[zz][1], 0., isas[j]/100.]
                if state == 0:
                    i += 1
                else:
                    i -= 1

                if i == 150:
                    state = 1
                   
                elif i == 0:
                    state = 0
                
                if j == k:
                    j = 0
                else:
                    j += 1
                
                if zz == O:
                    zz = 0
                zz += 1 
                # update transform
                # (moving in a circle with radius=2)
                # transform.header.stamp = now.to_msg()
                # transform.transform.translation.x = 0.
                # transform.transform.translation.y = 0.
                # transform.transform.translation.z = 0.
                # transform.transform.rotation = \
                #     euler_to_quaternion(0., 0., 0.) # roll,pitch,yaw

                # send the joint state and transform
                self.joint_pub.publish(joint_state)
                # self.broadcaster.sendTransform(transform)

                # Create new robot state
                # tilt += tinc
                # if tilt < -0.5 or tilt > 0.0:
                #     tinc *= -1
                # height += hinc
                # if height > 0.2 or height < 0.0:
                #     hinc *= -1
                # swivel += degree
                # angle += degree/4

                # This will adjust as needed per iteration
                loop_rate.sleep()

        except KeyboardInterrupt:
            pass

def euler_to_quaternion(roll, pitch, yaw):
    qx = sin(roll/2) * cos(pitch/2) * cos(yaw/2) - cos(roll/2) * sin(pitch/2) * sin(yaw/2)
    qy = cos(roll/2) * sin(pitch/2) * cos(yaw/2) + sin(roll/2) * cos(pitch/2) * sin(yaw/2)
    qz = cos(roll/2) * cos(pitch/2) * sin(yaw/2) - sin(roll/2) * sin(pitch/2) * cos(yaw/2)
    qw = cos(roll/2) * cos(pitch/2) * cos(yaw/2) + sin(roll/2) * sin(pitch/2) * sin(yaw/2)
    return Quaternion(x=qx, y=qy, z=qz, w=qw)

def main():
    node = StatePublisher()

if __name__ == '__main__':
    main()
