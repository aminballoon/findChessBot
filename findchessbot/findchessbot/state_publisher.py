from math import sin, cos, pi
import rclpy
from rclpy.node import Node
from rclpy.qos import QoSProfile
from geometry_msgs.msg import Quaternion, PoseStamped
from sensor_msgs.msg import JointState
from tf2_ros import TransformBroadcaster, TransformStamped
from nav_msgs.msg import Path

import numpy as np

class StatePublisher(Node):

    def __init__(self):
        rclpy.init()
        super().__init__('state_publisher')

        qos_profile = QoSProfile(depth=10)
        self.joint_pub = self.create_publisher(JointState, 'joint_states', qos_profile)
        self.broadcaster = TransformBroadcaster(self, qos=qos_profile)
        self.nodeName = self.get_name()
        self.get_logger().info("{0} started".format(self.nodeName))

        
        

        degree = pi / 180.0
        loop_rate = self.create_rate(20)

        
        # robot state
        # tilt = 0.
        # tinc = degree
        # swivel = 0.
        # angle = 0.
        # height = 0.
        # hinc = 0.005

        # message declarations
        # transform = TransformStamped()
        # transform.header.frame_id = 'world'
        # transform.child_frame_id = 'base_link'
        joint_state = JointState()
        
        
        Hello = list(range(0, 314,2))
        isas = np.arange(0, pi*2, 0.02)
        i = 0
        state = 0
        j = 0
        k = len(isas)-1
        # List = [[-0.262, 1.152], [-0.262, 1.167], [-0.261, 1.177], [-0.259, 1.19], [-0.259, 1.203], [-0.258, 1.217], [-0.256, 1.226], [-0.255, 1.239], [-0.255, 1.252], [-0.254, 1.265], [-0.252, 1.277], [-0.252, 1.293], [-0.253, 1.307], [-0.251, 1.319], [-0.252, 1.332], [-0.253, 1.349], [-0.251, 1.36], [-0.251, 1.372], [-0.252, 1.388], [-0.251, 1.4], [-0.252, 1.416], [-0.252, 1.432], [-0.253, 1.445], [-0.253, 1.46], [-0.253, 1.475], [-0.254, 1.487], [-0.256, 1.504], [-0.255, 1.518], [-0.256, 1.533], [-0.257, 1.549], [-0.258, 1.561], [-0.258, 1.576], [-0.262, 1.593], [-0.262, 1.608], [-0.262, 1.622], [-0.265, 1.638], [-0.267, 1.654], [-0.267, 1.669], [-0.269, 1.684], [-0.271, 1.7], [-0.273, 1.715], [-0.274, 1.728], [-0.276, 1.743], [-0.279, 1.76], [-0.28, 1.774], [-0.284, 1.791], [-0.285, 1.806], [-0.288, 1.822], [-0.291, 1.838], [-0.294, 1.854], [-0.297, 1.87], [-0.299, 1.883], [-0.302, 1.899], [-0.304, 1.915], [-0.309, 1.932], [-0.311, 1.945], [-0.315, 1.962], [-0.317, 1.977], [-0.322, 1.991], [-0.326, 2.008], [-0.33, 2.022], [-0.334, 2.039], [-0.338, 2.053], [-0.342, 2.069], [-0.348, 2.085], [-0.352, 2.099], [-0.355, 2.115], [-0.362, 2.13], [-0.368, 2.146], [-0.372, 2.159], [-0.378, 2.175], [-0.384, 2.19], [-0.391, 2.205], [-0.397, 2.22], [-0.403, 2.235], [-0.409, 2.25], [-0.419, 2.264], [-0.425, 2.279], [-0.431, 2.294], [-0.441, 2.308], [-0.447, 2.323], [-0.457, 2.337], [-0.468, 2.351], [-0.478, 2.365], [-0.484, 2.379], [-0.495, 2.393], [-0.505, 2.407], [-0.516, 2.42], [-0.528, 2.431], [-0.539, 2.445], [-0.554, 2.46], [-0.567, 2.471], [-0.579, 2.484], [-0.592, 2.495], [-0.61, 2.507], [-0.622, 2.52], [-0.64, 2.531], [-0.654, 2.542], [-0.673, 2.553], [-0.688, 2.563], [-0.709, 2.571], [-0.725, 2.581], [-0.746, 2.592], [-0.768, 2.6], [-0.79, 2.61], [-0.809, 2.616], [-0.832, 2.623], [-0.857, 2.63], [-0.882, 2.637], [-0.907, 2.643], [-0.927, 2.648], [-0.954, 2.654], [-0.981, 2.656], [-1.008, 2.661], [-1.035, 2.662], [-1.063, 2.667], [-1.091, 2.668], [-1.119, 2.668], [-1.147, 2.668], [-1.175, 2.668], [-1.203, 2.667], [-1.231, 2.666], [-1.258, 2.662], [-1.28, 2.66], [-1.306, 2.655], [-1.331, 2.65], [-1.357, 2.647], [-1.381, 2.641], [-1.405, 2.635], [-1.427, 2.629], [-1.45, 2.622], [-1.464, 2.613], [-1.485, 2.605], [-1.505, 2.598], [-1.518, 2.588], [-1.537, 2.58], [-1.552, 2.569], [-1.563, 2.559], [-1.577, 2.548], [-1.587, 2.538], [-1.6, 2.526], [-1.608, 2.516], [-1.62, 2.504], [-1.625, 2.491], [-1.632, 2.48], [-1.639, 2.465], [-1.645, 2.454], [-1.648, 2.441], [-1.651, 2.427], [-1.656, 2.416], [-1.658, 2.403], [-1.66, 2.389], [-1.662, 2.375], [-1.66, 2.359], [-1.659, 2.347], [-1.659, 2.333], [-1.657, 2.317], [-1.655, 2.304], [-1.652, 2.288], [-1.65, 2.275], [-1.645, 2.26], [-1.644, 2.246], [-1.639, 2.231], [-1.634, 2.216], [-1.628, 2.201], [-1.623, 2.186], [-1.617, 2.17], [-1.611, 2.155], [-1.604, 2.142], [-1.598, 2.126], [-1.588, 2.11], [-1.582, 2.094], [-1.575, 2.081], [-1.566, 2.062], [-1.559, 2.048], [-1.549, 2.032], [-1.541, 2.018], [-1.531, 2.001], [-1.524, 1.987], [-1.512, 1.972], [-1.502, 1.954], [-1.494, 1.942], [-1.484, 1.925], [-1.472, 1.909], [-1.461, 1.893], [-1.454, 1.879], [-1.443, 1.863], [-1.431, 1.847], [-1.42, 1.831], [-1.408, 1.816], [-1.397, 1.8], [-1.386, 1.783], [-1.376, 1.771], [-1.364, 1.757], [-1.353, 1.74], [-1.341, 1.724], [-1.329, 1.709], [-1.317, 1.694], [-1.305, 1.678], [-1.293, 1.662], [-1.28, 1.648], [-1.268, 1.632], [-1.255, 1.617], [-1.243, 1.601], [-1.23, 1.586], [-1.22, 1.574], [-1.207, 1.559], [-1.194, 1.544], [-1.181, 1.528], [-1.168, 1.512], [-1.155, 1.496], [-1.145, 1.484], [-1.131, 1.469], [-1.117, 1.454], [-1.106, 1.441], [-1.092, 1.426], [-1.078, 1.41], [-1.067, 1.398], [-1.053, 1.382], [-1.041, 1.37], [-1.03, 1.357], [-1.016, 1.341], [-1.003, 1.329], [-0.991, 1.316], [-0.976, 1.3], [-0.964, 1.287], [-0.952, 1.274], [-0.939, 1.262], [-0.926, 1.249], [-0.913, 1.236], [-0.9, 1.223], [-0.887, 1.21], [-0.877, 1.2], [-0.864, 1.186], [-0.85, 1.174], [-0.839, 1.164], [-0.825, 1.15], [-0.814, 1.14], [-0.8, 1.126], [-0.789, 1.115], [-0.777, 1.106], [-0.765, 1.096], [-0.753, 1.086], [-0.741, 1.075], [-0.729, 1.065], [-0.717, 1.054], [-0.705, 1.043], [-0.692, 1.031], [-0.683, 1.025], [-0.669, 1.014], [-0.659, 1.007], [-0.65, 1.0], [-0.636, 0.988], [-0.626, 0.981], [-0.614, 0.974], [-0.604, 0.966], [-0.593, 0.958], [-0.585, 0.956], [-0.574, 0.948], [-0.562, 0.94], [-0.554, 0.936], [-0.543, 0.928], [-0.533, 0.925], [-0.524, 0.921], [-0.515, 0.918], [-0.507, 0.914], [-0.498, 0.91], [-0.488, 0.905], [-0.478, 0.901], [-0.472, 0.902], [-0.462, 0.897], [-0.455, 0.898], [-0.445, 0.893], [-0.438, 0.893], [-0.43, 0.894], [-0.424, 0.894], [-0.417, 0.894], [-0.409, 0.893], [-0.402, 0.893], [-0.397, 0.898], [-0.389, 0.897], [-0.384, 0.902], [-0.377, 0.901], [-0.372, 0.905], [-0.366, 0.91], [-0.36, 0.914], [-0.355, 0.917], [-0.349, 0.921], [-0.344, 0.925], [-0.341, 0.934], [-0.334, 0.936], [-0.331, 0.945], [-0.326, 0.948], [-0.322, 0.956], [-0.317, 0.963], [-0.312, 0.966], [-0.308, 0.973], [-0.307, 0.986], [-0.302, 0.993], [-0.299, 1.0], [-0.296, 1.007], [-0.293, 1.018], [-0.289, 1.025], [-0.288, 1.037], [-0.284, 1.043], [-0.282, 1.054], [-0.278, 1.064], [-0.276, 1.074], [-0.276, 1.086], [-0.273, 1.096], [-0.271, 1.106], [-0.268, 1.115], [-0.267, 1.13], [-0.266, 1.14], [-0.262, 1.149]]
        List = [[-0.715, 1.752], [-0.711, 1.749], [-0.708, 1.745], [-0.704, 1.741], [-0.701, 1.737], [-0.697, 1.733], [-0.694, 1.729], [-0.69, 1.725], [-0.686, 1.721], [-0.683, 1.717], [-0.679, 1.713], [-0.676, 1.709], [-0.672, 1.705], [-0.669, 1.701], [-0.665, 1.697], [-0.662, 1.693], [-0.658, 1.689], [-0.655, 1.685], [-0.651, 1.681], [-0.647, 1.677], [-0.644, 1.673], [-0.64, 1.669], [-0.637, 1.665], [-0.633, 1.66], [-0.63, 1.656], [-0.626, 1.652], [-0.623, 1.648], [-0.619, 1.644], [-0.616, 1.64], [-0.612, 1.635], [-0.609, 1.631], [-0.605, 1.627], [-0.602, 1.623], [-0.598, 1.618], [-0.594, 1.614], [-0.591, 1.61], [-0.587, 1.606], [-0.584, 1.601], [-0.58, 1.597], [-0.577, 1.592], [-0.573, 1.588], [-0.57, 1.584], [-0.566, 1.579], [-0.563, 1.575], [-0.559, 1.571], [-0.556, 1.566], [-0.552, 1.562], [-0.549, 1.557], [-0.545, 1.553], [-0.541, 1.548], [-0.538, 1.544], [-0.534, 1.539], [-0.531, 1.535], [-0.527, 1.53], [-0.524, 1.526], [-0.52, 1.521], [-0.517, 1.516], [-0.513, 1.512], [-0.51, 1.507], [-0.506, 1.502], [-0.502, 1.498], [-0.499, 1.493], [-0.495, 1.488], [-0.492, 1.484], [-0.488, 1.479], [-0.485, 1.474], [-0.481, 1.469], [-0.478, 1.465], [-0.474, 1.46], [-0.47, 1.455], [-0.467, 1.45], [-0.463, 1.445], [-0.46, 1.441], [-0.456, 1.436], [-0.452, 1.431], [-0.449, 1.426], [-0.445, 1.421], [-0.442, 1.416], [-0.438, 1.411], [-0.434, 1.406], [-0.431, 1.401], [-0.427, 1.396], [-0.424, 1.391], [-0.42, 1.386], [-0.416, 1.381], [-0.413, 1.376], [-0.409, 1.37], [-0.405, 1.365], [-0.402, 1.36], [-0.398, 1.355], [-0.394, 1.35], [-0.391, 1.345], [-0.387, 1.339], [-0.383, 1.334], [-0.38, 1.329], [-0.376, 1.323], [-0.372, 1.318], [-0.369, 1.313], [-0.365, 1.307], [-0.361, 1.302], [-0.358, 1.297], [-0.354, 1.291], [-0.35, 1.286], [-0.346, 1.28], [-0.343, 1.275], [-0.339, 1.269], [-0.335, 1.263], [-0.331, 1.258], [-0.327, 1.252], [-0.324, 1.247], [-0.32, 1.241], [-0.316, 1.235], [-0.312, 1.229], [-0.308, 1.224], [-0.305, 1.218], [-0.301, 1.212], [-0.297, 1.206], [-0.293, 1.2], [-0.289, 1.195], [-0.285, 1.189], [-0.281, 1.183], [-0.278, 1.177], [-0.274, 1.171], [-0.27, 1.165], [-0.266, 1.159], [-0.262, 1.152], [-0.258, 1.146], [-0.254, 1.14], [-0.25, 1.134], [-0.246, 1.128], [-0.242, 1.121], [-0.238, 1.115], [-0.234, 1.109], [-0.23, 1.102], [-0.226, 1.096], [-0.222, 1.089], [-0.218, 1.083], [-0.214, 1.076], [-0.21, 1.07], [-0.205, 1.063], [-0.201, 1.057], [-0.197, 1.05], [-0.193, 1.043], [-0.189, 1.036], [-0.184, 1.03], [-0.18, 1.023], [-0.176, 1.016], [-0.172, 1.009], [-0.167, 1.002], [-0.163, 0.995], [-0.159, 0.988], [-0.159, 0.988], [-0.163, 0.995], [-0.167, 1.002], [-0.172, 1.009], [-0.176, 1.016], [-0.18, 1.023], [-0.184, 1.03], [-0.189, 1.036], [-0.193, 1.043], [-0.197, 1.05], [-0.201, 1.057], [-0.205, 1.063], [-0.21, 1.07], [-0.214, 1.076], [-0.218, 1.083], [-0.222, 1.089], [-0.226, 1.096], [-0.23, 1.102], [-0.234, 1.109], [-0.238, 1.115], [-0.242, 1.121], [-0.246, 1.128], [-0.25, 1.134], [-0.254, 1.14], [-0.258, 1.146], [-0.262, 1.152], [-0.266, 1.159], [-0.27, 1.165], [-0.274, 1.171], [-0.278, 1.177], [-0.281, 1.183], [-0.285, 1.189], [-0.289, 1.195], [-0.293, 1.2], [-0.297, 1.206], [-0.301, 1.212], [-0.305, 1.218], [-0.308, 1.224], [-0.312, 1.229], [-0.316, 1.235], [-0.32, 1.241], [-0.324, 1.247], [-0.327, 1.252], [-0.331, 1.258], [-0.335, 1.263], [-0.339, 1.269], [-0.343, 1.275], [-0.346, 1.28], [-0.35, 1.286], [-0.354, 1.291], [-0.358, 1.297], [-0.361, 1.302], [-0.365, 1.307], [-0.369, 1.313], [-0.372, 1.318], [-0.376, 1.323], [-0.38, 1.329], [-0.383, 1.334], [-0.387, 1.339], [-0.391, 1.345], [-0.394, 1.35], [-0.398, 1.355], [-0.402, 1.36], [-0.405, 1.365], [-0.409, 1.37], [-0.413, 1.376], [-0.416, 1.381], [-0.42, 1.386], [-0.424, 1.391], [-0.427, 1.396], [-0.431, 1.401], [-0.434, 1.406], [-0.438, 1.411], [-0.442, 1.416], [-0.445, 1.421], [-0.449, 1.426], [-0.452, 1.431], [-0.456, 1.436], [-0.46, 1.441], [-0.463, 1.445], [-0.467, 1.45], [-0.47, 1.455], [-0.474, 1.46], [-0.478, 1.465], [-0.481, 1.469], [-0.485, 1.474], [-0.488, 1.479], [-0.492, 1.484], [-0.495, 1.488], [-0.499, 1.493], [-0.502, 1.498], [-0.506, 1.502], [-0.51, 1.507], [-0.513, 1.512], [-0.517, 1.516], [-0.52, 1.521], [-0.524, 1.526], [-0.527, 1.53], [-0.531, 1.535], [-0.534, 1.539], [-0.538, 1.544], [-0.541, 1.548], [-0.545, 1.553], [-0.549, 1.557], [-0.552, 1.562], [-0.556, 1.566], [-0.559, 1.571], [-0.563, 1.575], [-0.566, 1.579], [-0.57, 1.584], [-0.573, 1.588], [-0.577, 1.592], [-0.58, 1.597], [-0.584, 1.601], [-0.587, 1.606], [-0.591, 1.61], [-0.594, 1.614], [-0.598, 1.618], [-0.602, 1.623], [-0.605, 1.627], [-0.609, 1.631], [-0.612, 1.635], [-0.616, 1.64], [-0.619, 1.644], [-0.623, 1.648], [-0.626, 1.652], [-0.63, 1.656], [-0.633, 1.66], [-0.637, 1.665], [-0.64, 1.669], [-0.644, 1.673], [-0.647, 1.677], [-0.651, 1.681], [-0.655, 1.685], [-0.658, 1.689], [-0.662, 1.693], [-0.665, 1.697], [-0.669, 1.701], [-0.672, 1.705], [-0.676, 1.709], [-0.679, 1.713], [-0.683, 1.717], [-0.686, 1.721], [-0.69, 1.725], [-0.694, 1.729], [-0.697, 1.733], [-0.701, 1.737], [-0.704, 1.741], [-0.708, 1.745], [-0.711, 1.749], [-0.715, 1.752]]
        
        

        
        wer = len(List) - 1
        zz = 0

        try:
            while rclpy.ok():
                rclpy.spin_once(self)

                # update joint_state
                q2 = -0.135
                now = self.get_clock().now()
                joint_state.header.stamp = now.to_msg()
                joint_state.name = ['joint_1', 'joint_2', 'joint_3', 'joint_4','joint_chess']
                # joint_state.position = [Hello[i]/-100. , q2 , Hello[i]/100. , 0., isas[j]/100.]
                # joint_state.position = [0., q2, 0., 0., pi/4.]
                joint_state.position = [List[zz][0], q2, List[zz][1], 0., isas[zz]]

                # joint_state.position = [List[zz][0], q2, List[zz][1], 0., 0.]

                if state == 0:
                    i += 1
                else:
                    i -= 1

                if i == 150:
                    state = 1
                   
                elif i == 0:
                    state = 0
                
                if j == k:
                    j = 0
                else:
                    j += 1
                
                if zz == wer:
                    zz = 0
                zz += 1 
                # update transform
                # (moving in a circle with radius=2)
                # transform.header.stamp = now.to_msg()
                # transform.transform.translation.x = 0.
                # transform.transform.translation.y = 0.
                # transform.transform.translation.z = 0.
                # transform.transform.rotation = \
                #     euler_to_quaternion(0., 0., 0.) # roll,pitch,yaw

                # send the joint state and transform
                self.joint_pub.publish(joint_state)
                
                # self.broadcaster.sendTransform(transform)

                # Create new robot state
                # tilt += tinc
                # if tilt < -0.5 or tilt > 0.0:
                #     tinc *= -1
                # height += hinc
                # if height > 0.2 or height < 0.0:
                #     hinc *= -1
                # swivel += degree
                # angle += degree/4

                # This will adjust as needed per iteration
                loop_rate.sleep()

        except KeyboardInterrupt:
            pass

def euler_to_quaternion(roll, pitch, yaw):
    qx = sin(roll/2) * cos(pitch/2) * cos(yaw/2) - cos(roll/2) * sin(pitch/2) * sin(yaw/2)
    qy = cos(roll/2) * sin(pitch/2) * cos(yaw/2) + sin(roll/2) * cos(pitch/2) * sin(yaw/2)
    qz = cos(roll/2) * cos(pitch/2) * sin(yaw/2) - sin(roll/2) * sin(pitch/2) * cos(yaw/2)
    qw = cos(roll/2) * cos(pitch/2) * cos(yaw/2) + sin(roll/2) * sin(pitch/2) * sin(yaw/2)
    return Quaternion(x=qx, y=qy, z=qz, w=qw)

def main():
    node = StatePublisher()

if __name__ == '__main__':
    main()
