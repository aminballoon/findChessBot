from math import sin, cos, pi
import rclpy
from rclpy.node import Node
from rclpy.qos import QoSProfile
from geometry_msgs.msg import Quaternion
from sensor_msgs.msg import JointState
from tf2_ros import TransformBroadcaster, TransformStamped

import numpy as np

class StatePublisher(Node):

    def __init__(self):
        rclpy.init()
        super().__init__('state_publisher')

        qos_profile = QoSProfile(depth=10)
        self.joint_pub = self.create_publisher(JointState, 'joint_states', qos_profile)
        self.broadcaster = TransformBroadcaster(self, qos=qos_profile)
        self.nodeName = self.get_name()
        self.get_logger().info("{0} started".format(self.nodeName))

        degree = pi / 180.0
        loop_rate = self.create_rate(20)

        # robot state
        # tilt = 0.
        # tinc = degree
        # swivel = 0.
        # angle = 0.
        # height = 0.
        # hinc = 0.005

        # message declarations
        # transform = TransformStamped()
        # transform.header.frame_id = 'world'
        # transform.child_frame_id = 'base_link'
        joint_state = JointState()
        Hello = list(range(0, 314,2))
        isas = np.arange(0, pi*2, 0.02)
        i = 0
        state = 0
        j = 0
        k = len(isas)-1
        List = [[-0.868, 2.009], [-0.871, 2.009], [-0.872, 2.012], [-0.875, 2.013], [-0.876, 2.016], [-0.878, 2.016], [-0.88, 2.019], [-0.882, 2.019], [-0.885, 2.019], [-0.886, 2.023], [-0.889, 2.023], [-0.89, 2.026], [-0.892, 2.026], [-0.892, 2.026], [-0.896, 2.029], [-0.899, 2.03], [-0.899, 2.03], [-0.903, 2.033], [-0.905, 2.033], [-0.905, 2.033], [-0.908, 2.033], [-0.909, 2.036], [-0.912, 2.036], [-0.914, 2.036], [-0.914, 2.036], [-0.918, 2.04], [-0.921, 2.04], [-0.921, 2.04], [-0.923, 2.04], [-0.926, 2.04], [-0.928, 2.04], [-0.93, 2.043], [-0.932, 2.043], [-0.935, 2.043], [-0.935, 2.043], [-0.937, 2.043], [-0.94, 2.043], [-0.94, 2.043], [-0.942, 2.043], [-0.945, 2.043], [-0.948, 2.043], [-0.948, 2.043], [-0.95, 2.043], [-0.953, 2.043], [-0.953, 2.043], [-0.955, 2.043], [-0.958, 2.043], [-0.958, 2.043], [-0.959, 2.04], [-0.962, 2.04], [-0.962, 2.04], [-0.964, 2.04], [-0.967, 2.04], [-0.967, 2.04], [-0.968, 2.037], [-0.97, 2.036], [-0.97, 2.036], [-0.973, 2.036], [-0.975, 2.036], [-0.974, 2.033], [-0.976, 2.033], [-0.979, 2.033], [-0.977, 2.03], [-0.98, 2.03], [-0.982, 2.029], [-0.981, 2.026], [-0.983, 2.026], [-0.983, 2.026], [-0.984, 2.023], [-0.987, 2.023], [-0.987, 2.023], [-0.988, 2.019], [-0.988, 2.019], [-0.989, 2.016], [-0.989, 2.016], [-0.99, 2.013], [-0.99, 2.013], [-0.992, 2.012], [-0.991, 2.009], [-0.993, 2.009], [-0.992, 2.006], [-0.994, 2.006], [-0.993, 2.002], [-0.993, 1.999], [-0.993, 1.999], [-0.994, 1.996], [-0.994, 1.996], [-0.995, 1.992], [-0.995, 1.992], [-0.994, 1.989], [-0.994, 1.986], [-0.994, 1.986], [-0.993, 1.982], [-0.995, 1.982], [-0.994, 1.979], [-0.992, 1.976], [-0.994, 1.975], [-0.993, 1.972], [-0.993, 1.972], [-0.994, 1.969], [-0.992, 1.965], [-0.992, 1.965], [-0.991, 1.962], [-0.989, 1.959], [-0.991, 1.959], [-0.99, 1.955], [-0.988, 1.952], [-0.988, 1.952], [-0.987, 1.949], [-0.985, 1.946], [-0.986, 1.942], [-0.986, 1.942], [-0.984, 1.939], [-0.982, 1.936], [-0.982, 1.936], [-0.981, 1.932], [-0.979, 1.929], [-0.979, 1.929], [-0.978, 1.926], [-0.976, 1.923], [-0.975, 1.919], [-0.975, 1.919], [-0.973, 1.916], [-0.971, 1.913], [-0.971, 1.913], [-0.97, 1.909], [-0.968, 1.906], [-0.966, 1.906], [-0.964, 1.903], [-0.963, 1.9], [-0.963, 1.9], [-0.961, 1.897], [-0.959, 1.893], [-0.957, 1.893], [-0.956, 1.89], [-0.954, 1.887], [-0.954, 1.887], [-0.95, 1.884], [-0.949, 1.88], [-0.949, 1.88], [-0.947, 1.877], [-0.943, 1.874], [-0.943, 1.874], [-0.942, 1.871], [-0.938, 1.868], [-0.938, 1.868], [-0.936, 1.864], [-0.934, 1.864], [-0.933, 1.861], [-0.93, 1.861], [-0.929, 1.858], [-0.927, 1.855], [-0.925, 1.855], [-0.924, 1.851], [-0.921, 1.852], [-0.92, 1.848], [-0.918, 1.848], [-0.916, 1.845], [-0.914, 1.845], [-0.912, 1.842], [-0.91, 1.842], [-0.909, 1.839], [-0.907, 1.839], [-0.907, 1.839], [-0.903, 1.836], [-0.903, 1.836], [-0.899, 1.832], [-0.897, 1.833], [-0.895, 1.829], [-0.893, 1.829], [-0.893, 1.829], [-0.89, 1.826], [-0.887, 1.826], [-0.887, 1.826], [-0.884, 1.823], [-0.884, 1.823], [-0.882, 1.823], [-0.879, 1.823], [-0.878, 1.82], [-0.876, 1.82], [-0.874, 1.82], [-0.874, 1.82], [-0.87, 1.816], [-0.868, 1.817], [-0.868, 1.817], [-0.866, 1.817], [-0.863, 1.817], [-0.863, 1.817], [-0.86, 1.813], [-0.858, 1.813], [-0.855, 1.813], [-0.855, 1.813], [-0.853, 1.813], [-0.851, 1.813], [-0.851, 1.813], [-0.849, 1.813], [-0.847, 1.813], [-0.847, 1.813], [-0.845, 1.813], [-0.845, 1.813], [-0.842, 1.813], [-0.84, 1.813], [-0.84, 1.813], [-0.838, 1.813], [-0.836, 1.813], [-0.834, 1.813], [-0.835, 1.817], [-0.833, 1.817], [-0.831, 1.817], [-0.831, 1.817], [-0.829, 1.817], [-0.826, 1.816], [-0.828, 1.82], [-0.826, 1.82], [-0.823, 1.82], [-0.823, 1.82], [-0.821, 1.82], [-0.82, 1.823], [-0.82, 1.823], [-0.818, 1.823], [-0.817, 1.826], [-0.817, 1.826], [-0.815, 1.826], [-0.816, 1.829], [-0.814, 1.829], [-0.812, 1.829], [-0.813, 1.833], [-0.811, 1.832], [-0.812, 1.836], [-0.81, 1.836], [-0.81, 1.836], [-0.809, 1.839], [-0.807, 1.839], [-0.808, 1.842], [-0.806, 1.842], [-0.807, 1.845], [-0.805, 1.845], [-0.806, 1.848], [-0.804, 1.848], [-0.805, 1.852], [-0.803, 1.851], [-0.804, 1.855], [-0.804, 1.855], [-0.804, 1.858], [-0.804, 1.858], [-0.802, 1.861], [-0.804, 1.864], [-0.804, 1.864], [-0.803, 1.868], [-0.803, 1.868], [-0.802, 1.871], [-0.803, 1.874], [-0.803, 1.874], [-0.802, 1.877], [-0.802, 1.877], [-0.803, 1.88], [-0.804, 1.884], [-0.802, 1.884], [-0.803, 1.887], [-0.805, 1.89], [-0.805, 1.89], [-0.803, 1.893], [-0.805, 1.897], [-0.805, 1.897], [-0.806, 1.9], [-0.807, 1.903], [-0.807, 1.903], [-0.808, 1.906], [-0.807, 1.909], [-0.807, 1.909], [-0.808, 1.913], [-0.81, 1.916], [-0.811, 1.919], [-0.811, 1.919], [-0.812, 1.923], [-0.813, 1.926], [-0.813, 1.926], [-0.815, 1.929], [-0.816, 1.932], [-0.816, 1.932], [-0.817, 1.936], [-0.818, 1.939], [-0.819, 1.942], [-0.819, 1.942], [-0.821, 1.945], [-0.824, 1.949], [-0.824, 1.949], [-0.825, 1.952], [-0.827, 1.955], [-0.827, 1.955], [-0.828, 1.959], [-0.831, 1.962], [-0.831, 1.962], [-0.833, 1.965], [-0.834, 1.969], [-0.836, 1.969], [-0.838, 1.972], [-0.839, 1.975], [-0.839, 1.975], [-0.842, 1.979], [-0.842, 1.979], [-0.844, 1.982], [-0.847, 1.986], [-0.847, 1.986], [-0.851, 1.989], [-0.851, 1.989], [-0.852, 1.992], [-0.856, 1.996], [-0.856, 1.996], [-0.86, 1.999], [-0.86, 1.999], [-0.861, 2.002], [-0.863, 2.002], [-0.865, 2.006], [-0.867, 2.006]]
        O = len(List) - 1
        zz = 0
        try:
            while rclpy.ok():
                rclpy.spin_once(self)

                # update joint_state
                q2 = -0.135
                now = self.get_clock().now()
                joint_state.header.stamp = now.to_msg()
                joint_state.name = ['joint_1', 'joint_2', 'joint_3', 'joint_4','joint_chess']
                # joint_state.position = [Hello[i]/-100. , q2 , Hello[i]/100. , 0., isas[j]/100.]
                # joint_state.position = [0., q2, 0., 0., pi/4.]
                joint_state.position = [List[zz][0], q2, List[zz][1], 0., isas[zz]]
                if state == 0:
                    i += 1
                else:
                    i -= 1

                if i == 150:
                    state = 1
                   
                elif i == 0:
                    state = 0
                
                if j == k:
                    j = 0
                else:
                    j += 1
                
                if zz == O:
                    zz = 0
                zz += 1 
                # update transform
                # (moving in a circle with radius=2)
                # transform.header.stamp = now.to_msg()
                # transform.transform.translation.x = 0.
                # transform.transform.translation.y = 0.
                # transform.transform.translation.z = 0.
                # transform.transform.rotation = \
                #     euler_to_quaternion(0., 0., 0.) # roll,pitch,yaw

                # send the joint state and transform
                self.joint_pub.publish(joint_state)
                # self.broadcaster.sendTransform(transform)

                # Create new robot state
                # tilt += tinc
                # if tilt < -0.5 or tilt > 0.0:
                #     tinc *= -1
                # height += hinc
                # if height > 0.2 or height < 0.0:
                #     hinc *= -1
                # swivel += degree
                # angle += degree/4

                # This will adjust as needed per iteration
                loop_rate.sleep()

        except KeyboardInterrupt:
            pass

def euler_to_quaternion(roll, pitch, yaw):
    qx = sin(roll/2) * cos(pitch/2) * cos(yaw/2) - cos(roll/2) * sin(pitch/2) * sin(yaw/2)
    qy = cos(roll/2) * sin(pitch/2) * cos(yaw/2) + sin(roll/2) * cos(pitch/2) * sin(yaw/2)
    qz = cos(roll/2) * cos(pitch/2) * sin(yaw/2) - sin(roll/2) * sin(pitch/2) * cos(yaw/2)
    qw = cos(roll/2) * cos(pitch/2) * cos(yaw/2) + sin(roll/2) * sin(pitch/2) * sin(yaw/2)
    return Quaternion(x=qx, y=qy, z=qz, w=qw)

def main():
    node = StatePublisher()

if __name__ == '__main__':
    main()
