
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ce4  08010e18  08010e18  00020e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012afc  08012afc  00022afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08012b04  08012b04  00022b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08012b0c  08012b0c  00022b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  24000000  08012b14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b24  240001f4  08012d08  000301f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000d18  08012d08  00030d18  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037a4f  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000052f6  00000000  00000000  00067c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001610  00000000  00000000  0006cf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001478  00000000  00000000  0006e578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003de64  00000000  00000000  0006f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000217e9  00000000  00000000  000ad854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d7f5  00000000  00000000  000cf03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0023c832  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006be4  00000000  00000000  0023c888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010dfc 	.word	0x08010dfc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	08010dfc 	.word	0x08010dfc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address){
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21(){
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read(){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f00b fa48 	bl	800bb70 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f00b fad5 	bl	800bc9c <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	749a      	strb	r2, [r3, #18]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	74da      	strb	r2, [r3, #19]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:

HAL_StatusTypeDef AMT21::AMT21_Check_Value(){
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7c9b      	ldrb	r3, [r3, #18]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7cdb      	ldrb	r3, [r3, #19]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
{
	return this->raw_value;
}

int16_t AMT21::getAngPos180()
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
//	uint8_t iii =  (this->raw_value & 0x1FFF);
	return ((((this->raw_value & 0x2000) >> 13) * (-16383)) + (this->raw_value & 0x3FFF) ) * -1;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
//	return this->raw_value;
//	this->value =
//	return iii;
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	ed87 0a01 	vstr	s0, [r7, #4]
 8000838:	edd7 7a01 	vldr	s15, [r7, #4]
 800083c:	eef0 7ae7 	vabs.f32	s15, s15
 8000840:	eeb0 0a67 	vmov.f32	s0, s15
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	ed87 0a01 	vstr	s0, [r7, #4]
 8000858:	edd7 7a01 	vldr	s15, [r7, #4]
 800085c:	fef8 7a67 	vrinta.f32	s15, s15
 8000860:	eeb0 0a67 	vmov.f32	s0, s15
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000888:	619a      	str	r2, [r3, #24]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000890:	61da      	str	r2, [r3, #28]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	4a15      	ldr	r2, [pc, #84]	; (80008ec <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8000896:	621a      	str	r2, [r3, #32]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	22c7      	movs	r2, #199	; 0xc7
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 80008ba:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 80008c0:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 80008c2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80008f4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f000 f832 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	60da      	str	r2, [r3, #12]
}
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	41a00000 	.word	0x41a00000
 80008e8:	469c4000 	.word	0x469c4000
 80008ec:	43480000 	.word	0x43480000
 80008f0:	42700000 	.word	0x42700000
 80008f4:	00000000 	.word	0x00000000

080008f8 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
}
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	4619      	mov	r1, r3
 8000920:	4610      	mov	r0, r2
 8000922:	f009 ff15 	bl	800a750 <HAL_TIM_PWM_Start>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8000930:	b580      	push	{r7, lr}
 8000932:	ed2d 8b02 	vpush	{d8}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	edd3 7a04 	vldr	s15, [r3, #16]
 800094c:	eeb0 0a67 	vmov.f32	s0, s15
 8000950:	f7ff ff6d 	bl	800082e <_ZSt4fabsf>
 8000954:	eeb0 7a40 	vmov.f32	s14, s0
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	edd3 7a05 	vldr	s15, [r3, #20]
 800095e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	bf94      	ite	ls
 8000968:	2301      	movls	r3, #1
 800096a:	2300      	movhi	r3, #0
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e01b      	b.n	80009b2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000980:	eeb0 0a67 	vmov.f32	s0, s15
 8000984:	f7ff ff53 	bl	800082e <_ZSt4fabsf>
 8000988:	eeb0 7a40 	vmov.f32	s14, s0
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099a:	bfac      	ite	ge
 800099c:	2301      	movge	r3, #1
 800099e:	2300      	movlt	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e001      	b.n	80009b2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80009b8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8000c54 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 80009bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c4:	f2c0 80db 	blt.w	8000b7e <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6898      	ldr	r0, [r3, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	2201      	movs	r2, #1
 80009d4:	4619      	mov	r1, r3
 80009d6:	f007 f8e1 	bl	8007b9c <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e2:	3301      	adds	r3, #1
 80009e4:	ee07 3a90 	vmov	s15, r3
 80009e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80009f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009f4:	eddf 6a98 	vldr	s13, [pc, #608]	; 8000c58 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 80009f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 80009fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a04:	eeb0 0a67 	vmov.f32	s0, s15
 8000a08:	f7ff ff21 	bl	800084e <_ZSt5roundf>
 8000a0c:	eef0 7a40 	vmov.f32	s15, s0
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1a:	ee17 2a90 	vmov	r2, s15
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d113      	bne.n	8000a50 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000a32:	085b      	lsrs	r3, r3, #1
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fa5b 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a3a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a48:	ee17 2a90 	vmov	r2, s15
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8000a4e:	e1e0      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d113      	bne.n	8000a80 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a60:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000a62:	085b      	lsrs	r3, r3, #1
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fa43 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a78:	ee17 2a90 	vmov	r2, s15
 8000a7c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a7e:	e1c8      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b08      	cmp	r3, #8
 8000a86:	d113      	bne.n	8000ab0 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a90:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000a92:	085b      	lsrs	r3, r3, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fa2b 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aa8:	ee17 2a90 	vmov	r2, s15
 8000aac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000aae:	e1b0      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b0c      	cmp	r3, #12
 8000ab6:	d113      	bne.n	8000ae0 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000ac2:	085b      	lsrs	r3, r3, #1
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fa13 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000aca:	eeb0 7b40 	vmov.f64	d7, d0
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ad8:	ee17 2a90 	vmov	r2, s15
 8000adc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ade:	e198      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b10      	cmp	r3, #16
 8000ae6:	d113      	bne.n	8000b10 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000af2:	085b      	lsrs	r3, r3, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f9fb 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000afa:	eeb0 7b40 	vmov.f64	d7, d0
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b08:	ee17 2a90 	vmov	r2, s15
 8000b0c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000b0e:	e180      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b14      	cmp	r3, #20
 8000b16:	d113      	bne.n	8000b40 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b20:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f9e3 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b38:	ee17 2a90 	vmov	r2, s15
 8000b3c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b3e:	e168      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2200      	movs	r2, #0
 8000b52:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2200      	movs	r2, #0
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b7c:	e149      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b84:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000c5c <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8000b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b90:	f200 80e5 	bhi.w	8000d5e <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6898      	ldr	r0, [r3, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f006 fffb 	bl	8007b9c <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bae:	3301      	adds	r3, #1
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000bb8:	ed97 0a03 	vldr	s0, [r7, #12]
 8000bbc:	f7ff fe37 	bl	800082e <_ZSt4fabsf>
 8000bc0:	eef0 7a40 	vmov.f32	s15, s0
 8000bc4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000bc8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000c58 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8000bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000bd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	f7ff fe37 	bl	800084e <_ZSt5roundf>
 8000be0:	eef0 7a40 	vmov.f32	s15, s0
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bee:	ee17 2a90 	vmov	r2, s15
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d113      	bne.n	8000c24 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c04:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000c06:	085b      	lsrs	r3, r3, #1
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f971 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c1c:	ee17 2a90 	vmov	r2, s15
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c22:	e0f6      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	d119      	bne.n	8000c60 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c34:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000c36:	085b      	lsrs	r3, r3, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f959 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c3e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c4c:	ee17 2a90 	vmov	r2, s15
 8000c50:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c52:	e0de      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8000c54:	3a83126f 	.word	0x3a83126f
 8000c58:	4d64e1c0 	.word	0x4d64e1c0
 8000c5c:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d113      	bne.n	8000c90 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c70:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000c72:	085b      	lsrs	r3, r3, #1
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f93b 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c7a:	eeb0 7b40 	vmov.f64	d7, d0
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c88:	ee17 2a90 	vmov	r2, s15
 8000c8c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c8e:	e0c0      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b0c      	cmp	r3, #12
 8000c96:	d113      	bne.n	8000cc0 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000ca2:	085b      	lsrs	r3, r3, #1
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f923 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000caa:	eeb0 7b40 	vmov.f64	d7, d0
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cb8:	ee17 2a90 	vmov	r2, s15
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000cbe:	e0a8      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b10      	cmp	r3, #16
 8000cc6:	d113      	bne.n	8000cf0 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f90b 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cda:	eeb0 7b40 	vmov.f64	d7, d0
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ce8:	ee17 2a90 	vmov	r2, s15
 8000cec:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000cee:	e090      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b14      	cmp	r3, #20
 8000cf6:	d113      	bne.n	8000d20 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000d02:	085b      	lsrs	r3, r3, #1
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f8f3 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000d0a:	eeb0 7b40 	vmov.f64	d7, d0
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d18:	ee17 2a90 	vmov	r2, s15
 8000d1c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000d1e:	e078      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2200      	movs	r2, #0
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2200      	movs	r2, #0
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2200      	movs	r2, #0
 8000d46:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000d5c:	e059      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d105      	bne.n	8000d72 <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d70:	e04f      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d105      	bne.n	8000d86 <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2200      	movs	r2, #0
 8000d82:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d84:	e045      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d105      	bne.n	8000d9a <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2200      	movs	r2, #0
 8000d96:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d98:	e03b      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b0c      	cmp	r3, #12
 8000da0:	d105      	bne.n	8000dae <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000dac:	e031      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b10      	cmp	r3, #16
 8000db4:	d105      	bne.n	8000dc2 <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000dc0:	e027      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b14      	cmp	r3, #20
 8000dc8:	d105      	bne.n	8000dd6 <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000dd4:	e01d      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2200      	movs	r2, #0
 8000de8:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2200      	movs	r2, #0
 8000e06:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	ecbd 8b02 	vpop	{d8}
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop

08000e20 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8000e2c:	ed97 0a00 	vldr	s0, [r7]
 8000e30:	f7ff fcfd 	bl	800082e <_ZSt4fabsf>
 8000e34:	eef0 7a40 	vmov.f32	s15, s0
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	ee07 3a90 	vmov	s15, r3
 8000e56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e5a:	eeb0 0b47 	vmov.f64	d0, d7
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ffe5 	bl	8000e46 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e7c:	eeb0 7b40 	vmov.f64	d7, d0
 8000e80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	0000      	movs	r0, r0
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <_ZN7Stepper20StepperOpenLoopSpeedEf>:
void Stepper::StepperOpenLoopSpeed(float _speed) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	ed93 7a07 	vldr	s14, [r3, #28]
 8000eaa:	edd7 7a00 	vldr	s15, [r7]
 8000eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	edd3 7a08 	vldr	s15, [r3, #32]
 8000ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI)));
 8000eca:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8000ee8 <_ZN7Stepper20StepperOpenLoopSpeedEf+0x50>
 8000ece:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 8000ed2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fd28 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	54442eea 	.word	0x54442eea
 8000eec:	401921fb 	.word	0x401921fb

08000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	ee07 3a90 	vmov	s15, r3
 8000efe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f02:	eeb0 0b47 	vmov.f64	d0, d7
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <MX_CRC_Init+0x58>)
 8000f18:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f28:	f248 0205 	movw	r2, #32773	; 0x8005
 8000f2c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f30:	2208      	movs	r2, #8
 8000f32:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f3a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f3e:	2220      	movs	r2, #32
 8000f40:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f50:	f003 fc3c 	bl	80047cc <HAL_CRC_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 8000f5a:	f001 fccd 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2400050c 	.word	0x2400050c
 8000f68:	58024c00 	.word	0x58024c00

08000f6c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_CRC_MspInit+0x3c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d10e      	bne.n	8000f9c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_CRC_MspInit+0x40>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	4a09      	ldr	r2, [pc, #36]	; (8000fac <HAL_CRC_MspInit+0x40>)
 8000f86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <HAL_CRC_MspInit+0x40>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	58024c00 	.word	0x58024c00
 8000fac:	58024400 	.word	0x58024400

08000fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <MX_DMA_Init+0x7c>)
 8000fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	; (800102c <MX_DMA_Init+0x7c>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_DMA_Init+0x7c>)
 8000fc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	200b      	movs	r0, #11
 8000fda:	f003 fbb6 	bl	800474a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fde:	200b      	movs	r0, #11
 8000fe0:	f003 fbcd 	bl	800477e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	200c      	movs	r0, #12
 8000fea:	f003 fbae 	bl	800474a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fee:	200c      	movs	r0, #12
 8000ff0:	f003 fbc5 	bl	800477e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	200d      	movs	r0, #13
 8000ffa:	f003 fba6 	bl	800474a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ffe:	200d      	movs	r0, #13
 8001000:	f003 fbbd 	bl	800477e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	200e      	movs	r0, #14
 800100a:	f003 fb9e 	bl	800474a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800100e:	200e      	movs	r0, #14
 8001010:	f003 fbb5 	bl	800477e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	200f      	movs	r0, #15
 800101a:	f003 fb96 	bl	800474a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800101e:	200f      	movs	r0, #15
 8001020:	f003 fbad 	bl	800477e <HAL_NVIC_EnableIRQ>

}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	58024400 	.word	0x58024400

08001030 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001046:	4b8e      	ldr	r3, [pc, #568]	; (8001280 <MX_GPIO_Init+0x250>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	4a8c      	ldr	r2, [pc, #560]	; (8001280 <MX_GPIO_Init+0x250>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001056:	4b8a      	ldr	r3, [pc, #552]	; (8001280 <MX_GPIO_Init+0x250>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105c:	f003 0310 	and.w	r3, r3, #16
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	4b86      	ldr	r3, [pc, #536]	; (8001280 <MX_GPIO_Init+0x250>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106a:	4a85      	ldr	r2, [pc, #532]	; (8001280 <MX_GPIO_Init+0x250>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001074:	4b82      	ldr	r3, [pc, #520]	; (8001280 <MX_GPIO_Init+0x250>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	4b7f      	ldr	r3, [pc, #508]	; (8001280 <MX_GPIO_Init+0x250>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	4a7d      	ldr	r2, [pc, #500]	; (8001280 <MX_GPIO_Init+0x250>)
 800108a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001092:	4b7b      	ldr	r3, [pc, #492]	; (8001280 <MX_GPIO_Init+0x250>)
 8001094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b77      	ldr	r3, [pc, #476]	; (8001280 <MX_GPIO_Init+0x250>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	4a76      	ldr	r2, [pc, #472]	; (8001280 <MX_GPIO_Init+0x250>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b0:	4b73      	ldr	r3, [pc, #460]	; (8001280 <MX_GPIO_Init+0x250>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b70      	ldr	r3, [pc, #448]	; (8001280 <MX_GPIO_Init+0x250>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	4a6e      	ldr	r2, [pc, #440]	; (8001280 <MX_GPIO_Init+0x250>)
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ce:	4b6c      	ldr	r3, [pc, #432]	; (8001280 <MX_GPIO_Init+0x250>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010dc:	4b68      	ldr	r3, [pc, #416]	; (8001280 <MX_GPIO_Init+0x250>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	4a67      	ldr	r2, [pc, #412]	; (8001280 <MX_GPIO_Init+0x250>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ec:	4b64      	ldr	r3, [pc, #400]	; (8001280 <MX_GPIO_Init+0x250>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010fa:	4b61      	ldr	r3, [pc, #388]	; (8001280 <MX_GPIO_Init+0x250>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	4a5f      	ldr	r2, [pc, #380]	; (8001280 <MX_GPIO_Init+0x250>)
 8001102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110a:	4b5d      	ldr	r3, [pc, #372]	; (8001280 <MX_GPIO_Init+0x250>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001118:	2200      	movs	r2, #0
 800111a:	f644 2121 	movw	r1, #18977	; 0x4a21
 800111e:	4859      	ldr	r0, [pc, #356]	; (8001284 <MX_GPIO_Init+0x254>)
 8001120:	f006 fd3c 	bl	8007b9c <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f24c 0102 	movw	r1, #49154	; 0xc002
 800112a:	4857      	ldr	r0, [pc, #348]	; (8001288 <MX_GPIO_Init+0x258>)
 800112c:	f006 fd36 	bl	8007b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001136:	4855      	ldr	r0, [pc, #340]	; (800128c <MX_GPIO_Init+0x25c>)
 8001138:	f006 fd30 	bl	8007b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001142:	4853      	ldr	r0, [pc, #332]	; (8001290 <MX_GPIO_Init+0x260>)
 8001144:	f006 fd2a 	bl	8007b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114e:	4851      	ldr	r0, [pc, #324]	; (8001294 <MX_GPIO_Init+0x264>)
 8001150:	f006 fd24 	bl	8007b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 8001154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	4849      	ldr	r0, [pc, #292]	; (8001290 <MX_GPIO_Init+0x260>)
 800116c:	f006 fb66 	bl	800783c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001170:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001174:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	483e      	ldr	r0, [pc, #248]	; (8001284 <MX_GPIO_Init+0x254>)
 800118a:	f006 fb57 	bl	800783c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 800118e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001194:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	4838      	ldr	r0, [pc, #224]	; (8001288 <MX_GPIO_Init+0x258>)
 80011a6:	f006 fb49 	bl	800783c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80011aa:	f24c 0302 	movw	r3, #49154	; 0xc002
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	4831      	ldr	r0, [pc, #196]	; (8001288 <MX_GPIO_Init+0x258>)
 80011c4:	f006 fb3a 	bl	800783c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80011c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	482a      	ldr	r0, [pc, #168]	; (800128c <MX_GPIO_Init+0x25c>)
 80011e2:	f006 fb2b 	bl	800783c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80011e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4824      	ldr	r0, [pc, #144]	; (8001290 <MX_GPIO_Init+0x260>)
 8001200:	f006 fb1c 	bl	800783c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	481d      	ldr	r0, [pc, #116]	; (8001294 <MX_GPIO_Init+0x264>)
 800121e:	f006 fb0d 	bl	800783c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001222:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001228:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	4817      	ldr	r0, [pc, #92]	; (8001298 <MX_GPIO_Init+0x268>)
 800123a:	f006 faff 	bl	800783c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 800123e:	23c0      	movs	r3, #192	; 0xc0
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001242:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	480c      	ldr	r0, [pc, #48]	; (8001284 <MX_GPIO_Init+0x254>)
 8001254:	f006 faf2 	bl	800783c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2017      	movs	r0, #23
 800125e:	f003 fa74 	bl	800474a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001262:	2017      	movs	r0, #23
 8001264:	f003 fa8b 	bl	800477e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2028      	movs	r0, #40	; 0x28
 800126e:	f003 fa6c 	bl	800474a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001272:	2028      	movs	r0, #40	; 0x28
 8001274:	f003 fa83 	bl	800477e <HAL_NVIC_EnableIRQ>

}
 8001278:	bf00      	nop
 800127a:	3730      	adds	r7, #48	; 0x30
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	58024400 	.word	0x58024400
 8001284:	58020400 	.word	0x58020400
 8001288:	58021000 	.word	0x58021000
 800128c:	58020c00 	.word	0x58020c00
 8001290:	58020800 	.word	0x58020800
 8001294:	58020000 	.word	0x58020000
 8001298:	58021800 	.word	0x58021800

0800129c <HAL_UARTEx_RxEventCallback>:
#define Rx_BUFFER_SIZE   20
uint8_t Old_Rx_Buffer[Rx_BUFFER_SIZE] = {0};
uint8_t New_Rx_Buffer[Rx_BUFFER_SIZE] = {0};
volatile uint16_t cmdDataSize = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a98      	ldr	r2, [pc, #608]	; (800150c <HAL_UARTEx_RxEventCallback+0x270>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	f040 81f1 	bne.w	8001694 <HAL_UARTEx_RxEventCallback+0x3f8>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 80012b2:	4a97      	ldr	r2, [pc, #604]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80012b4:	4b97      	ldr	r3, [pc, #604]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012be:	682b      	ldr	r3, [r5, #0]
 80012c0:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 80012c2:	2214      	movs	r2, #20
 80012c4:	2100      	movs	r1, #0
 80012c6:	4893      	ldr	r0, [pc, #588]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80012c8:	f00d f95e 	bl	800e588 <memset>
		if(Size - 2 > 0 && Size <= Rx_BUFFER_SIZE){	// Check if there's some data.
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	f240 8167 	bls.w	80015a2 <HAL_UARTEx_RxEventCallback+0x306>
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	2b14      	cmp	r3, #20
 80012d8:	f200 8163 	bhi.w	80015a2 <HAL_UARTEx_RxEventCallback+0x306>
			cmdDataSize = Size - 2;	// Calculate data length.
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	3b02      	subs	r3, #2
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b8d      	ldr	r3, [pc, #564]	; (8001518 <HAL_UARTEx_RxEventCallback+0x27c>)
 80012e4:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)Old_Rx_Buffer, cmdDataSize); // Calculate data only by STM32 Hardware CRC.
 80012e6:	4b8c      	ldr	r3, [pc, #560]	; (8001518 <HAL_UARTEx_RxEventCallback+0x27c>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	4988      	ldr	r1, [pc, #544]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80012f0:	488a      	ldr	r0, [pc, #552]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 80012f2:	f003 facf 	bl	8004894 <HAL_CRC_Calculate>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b89      	ldr	r3, [pc, #548]	; (8001520 <HAL_UARTEx_RxEventCallback+0x284>)
 80012fc:	801a      	strh	r2, [r3, #0]
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8 | Old_Rx_Buffer[cmdDataSize+1]; // Read Expected CRC from Protocol.
 80012fe:	4b86      	ldr	r3, [pc, #536]	; (8001518 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	4b82      	ldr	r3, [pc, #520]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001308:	5c9b      	ldrb	r3, [r3, r2]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b82      	ldr	r3, [pc, #520]	; (8001518 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	3301      	adds	r3, #1
 8001316:	497e      	ldr	r1, [pc, #504]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001318:	5ccb      	ldrb	r3, [r1, r3]
 800131a:	b21b      	sxth	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b21b      	sxth	r3, r3
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b80      	ldr	r3, [pc, #512]	; (8001524 <HAL_UARTEx_RxEventCallback+0x288>)
 8001324:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001326:	4b7e      	ldr	r3, [pc, #504]	; (8001520 <HAL_UARTEx_RxEventCallback+0x284>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b7d      	ldr	r3, [pc, #500]	; (8001524 <HAL_UARTEx_RxEventCallback+0x288>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	b29b      	uxth	r3, r3
 8001332:	429a      	cmp	r2, r3
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 8124 	beq.w	800158a <HAL_UARTEx_RxEventCallback+0x2ee>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	2102      	movs	r1, #2
 8001346:	4878      	ldr	r0, [pc, #480]	; (8001528 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001348:	f006 fc28 	bl	8007b9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001352:	4876      	ldr	r0, [pc, #472]	; (800152c <HAL_UARTEx_RxEventCallback+0x290>)
 8001354:	f006 fc22 	bl	8007b9c <HAL_GPIO_WritePin>
				if(Old_Rx_Buffer[0] == 0x41 && cmdDataSize == 3){	// Joint Jog q1
 8001358:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b41      	cmp	r3, #65	; 0x41
 800135e:	d106      	bne.n	800136e <HAL_UARTEx_RxEventCallback+0xd2>
 8001360:	4b6d      	ldr	r3, [pc, #436]	; (8001518 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	b29b      	uxth	r3, r3
 8001366:	2b03      	cmp	r3, #3
 8001368:	d101      	bne.n	800136e <HAL_UARTEx_RxEventCallback+0xd2>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_UARTEx_RxEventCallback+0xd4>
 800136e:	2300      	movs	r3, #0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d010      	beq.n	8001396 <HAL_UARTEx_RxEventCallback+0xfa>
					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
 8001374:	2201      	movs	r2, #1
 8001376:	4966      	ldr	r1, [pc, #408]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001378:	4864      	ldr	r0, [pc, #400]	; (800150c <HAL_UARTEx_RxEventCallback+0x270>)
 800137a:	f00a fd63 	bl	800be44 <HAL_UART_Transmit_DMA>
					q1_theta = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 800137e:	4b64      	ldr	r3, [pc, #400]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001380:	785b      	ldrb	r3, [r3, #1]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	4b62      	ldr	r3, [pc, #392]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001388:	789b      	ldrb	r3, [r3, #2]
 800138a:	b21b      	sxth	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b21a      	sxth	r2, r3
 8001390:	4b67      	ldr	r3, [pc, #412]	; (8001530 <HAL_UARTEx_RxEventCallback+0x294>)
 8001392:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001394:	e116      	b.n	80015c4 <HAL_UARTEx_RxEventCallback+0x328>
				}
				else if(Old_Rx_Buffer[0] == 0x42 && cmdDataSize == 3){	// Joint Jog q2
 8001396:	4b5e      	ldr	r3, [pc, #376]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b42      	cmp	r3, #66	; 0x42
 800139c:	d106      	bne.n	80013ac <HAL_UARTEx_RxEventCallback+0x110>
 800139e:	4b5e      	ldr	r3, [pc, #376]	; (8001518 <HAL_UARTEx_RxEventCallback+0x27c>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d101      	bne.n	80013ac <HAL_UARTEx_RxEventCallback+0x110>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <HAL_UARTEx_RxEventCallback+0x112>
 80013ac:	2300      	movs	r3, #0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d010      	beq.n	80013d4 <HAL_UARTEx_RxEventCallback+0x138>
					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	4956      	ldr	r1, [pc, #344]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80013b6:	4855      	ldr	r0, [pc, #340]	; (800150c <HAL_UARTEx_RxEventCallback+0x270>)
 80013b8:	f00a fd44 	bl	800be44 <HAL_UART_Transmit_DMA>
					q2_theta = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80013bc:	4b54      	ldr	r3, [pc, #336]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	4b52      	ldr	r3, [pc, #328]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80013c6:	789b      	ldrb	r3, [r3, #2]
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	4b59      	ldr	r3, [pc, #356]	; (8001534 <HAL_UARTEx_RxEventCallback+0x298>)
 80013d0:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80013d2:	e0f7      	b.n	80015c4 <HAL_UARTEx_RxEventCallback+0x328>
				}
				else if(Old_Rx_Buffer[0] == 0x43 && cmdDataSize == 3){	// Joint Jog q3
 80013d4:	4b4e      	ldr	r3, [pc, #312]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b43      	cmp	r3, #67	; 0x43
 80013da:	d106      	bne.n	80013ea <HAL_UARTEx_RxEventCallback+0x14e>
 80013dc:	4b4e      	ldr	r3, [pc, #312]	; (8001518 <HAL_UARTEx_RxEventCallback+0x27c>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d101      	bne.n	80013ea <HAL_UARTEx_RxEventCallback+0x14e>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_UARTEx_RxEventCallback+0x150>
 80013ea:	2300      	movs	r3, #0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d010      	beq.n	8001412 <HAL_UARTEx_RxEventCallback+0x176>
					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
 80013f0:	2201      	movs	r2, #1
 80013f2:	4947      	ldr	r1, [pc, #284]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80013f4:	4845      	ldr	r0, [pc, #276]	; (800150c <HAL_UARTEx_RxEventCallback+0x270>)
 80013f6:	f00a fd25 	bl	800be44 <HAL_UART_Transmit_DMA>
					q3_theta = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80013fa:	4b45      	ldr	r3, [pc, #276]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80013fc:	785b      	ldrb	r3, [r3, #1]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b43      	ldr	r3, [pc, #268]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001404:	789b      	ldrb	r3, [r3, #2]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21a      	sxth	r2, r3
 800140c:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <HAL_UARTEx_RxEventCallback+0x29c>)
 800140e:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001410:	e0d8      	b.n	80015c4 <HAL_UARTEx_RxEventCallback+0x328>
				}
				else if(Old_Rx_Buffer[0] == 0x44 && cmdDataSize == 3){	// Joint Jog q4
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b44      	cmp	r3, #68	; 0x44
 8001418:	d106      	bne.n	8001428 <HAL_UARTEx_RxEventCallback+0x18c>
 800141a:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <HAL_UARTEx_RxEventCallback+0x27c>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d101      	bne.n	8001428 <HAL_UARTEx_RxEventCallback+0x18c>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <HAL_UARTEx_RxEventCallback+0x18e>
 8001428:	2300      	movs	r3, #0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d010      	beq.n	8001450 <HAL_UARTEx_RxEventCallback+0x1b4>
					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
 800142e:	2201      	movs	r2, #1
 8001430:	4937      	ldr	r1, [pc, #220]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001432:	4836      	ldr	r0, [pc, #216]	; (800150c <HAL_UARTEx_RxEventCallback+0x270>)
 8001434:	f00a fd06 	bl	800be44 <HAL_UART_Transmit_DMA>
					q4_theta = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001438:	4b35      	ldr	r3, [pc, #212]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 800143a:	785b      	ldrb	r3, [r3, #1]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b21a      	sxth	r2, r3
 8001440:	4b33      	ldr	r3, [pc, #204]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001442:	789b      	ldrb	r3, [r3, #2]
 8001444:	b21b      	sxth	r3, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b3c      	ldr	r3, [pc, #240]	; (800153c <HAL_UARTEx_RxEventCallback+0x2a0>)
 800144c:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800144e:	e0b9      	b.n	80015c4 <HAL_UARTEx_RxEventCallback+0x328>
				}
				else if(Old_Rx_Buffer[0] == 0x51 && cmdDataSize == 3){	// Linear Jog X
 8001450:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b51      	cmp	r3, #81	; 0x51
 8001456:	d106      	bne.n	8001466 <HAL_UARTEx_RxEventCallback+0x1ca>
 8001458:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_UARTEx_RxEventCallback+0x27c>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	2b03      	cmp	r3, #3
 8001460:	d101      	bne.n	8001466 <HAL_UARTEx_RxEventCallback+0x1ca>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_UARTEx_RxEventCallback+0x1cc>
 8001466:	2300      	movs	r3, #0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d010      	beq.n	800148e <HAL_UARTEx_RxEventCallback+0x1f2>
					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
 800146c:	2201      	movs	r2, #1
 800146e:	4928      	ldr	r1, [pc, #160]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001470:	4826      	ldr	r0, [pc, #152]	; (800150c <HAL_UARTEx_RxEventCallback+0x270>)
 8001472:	f00a fce7 	bl	800be44 <HAL_UART_Transmit_DMA>
					x_theta = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b21a      	sxth	r2, r3
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001480:	789b      	ldrb	r3, [r3, #2]
 8001482:	b21b      	sxth	r3, r3
 8001484:	4313      	orrs	r3, r2
 8001486:	b21a      	sxth	r2, r3
 8001488:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_UARTEx_RxEventCallback+0x2a4>)
 800148a:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800148c:	e09a      	b.n	80015c4 <HAL_UARTEx_RxEventCallback+0x328>
				}
				else if(Old_Rx_Buffer[0] == 0x52 && cmdDataSize == 3){	// Linear Jog Y
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b52      	cmp	r3, #82	; 0x52
 8001494:	d106      	bne.n	80014a4 <HAL_UARTEx_RxEventCallback+0x208>
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	b29b      	uxth	r3, r3
 800149c:	2b03      	cmp	r3, #3
 800149e:	d101      	bne.n	80014a4 <HAL_UARTEx_RxEventCallback+0x208>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_UARTEx_RxEventCallback+0x20a>
 80014a4:	2300      	movs	r3, #0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d010      	beq.n	80014cc <HAL_UARTEx_RxEventCallback+0x230>
					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
 80014aa:	2201      	movs	r2, #1
 80014ac:	4918      	ldr	r1, [pc, #96]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80014ae:	4817      	ldr	r0, [pc, #92]	; (800150c <HAL_UARTEx_RxEventCallback+0x270>)
 80014b0:	f00a fcc8 	bl	800be44 <HAL_UART_Transmit_DMA>
					y_theta = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80014b6:	785b      	ldrb	r3, [r3, #1]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80014be:	789b      	ldrb	r3, [r3, #2]
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_UARTEx_RxEventCallback+0x2a8>)
 80014c8:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80014ca:	e07b      	b.n	80015c4 <HAL_UARTEx_RxEventCallback+0x328>
				}
				else if(Old_Rx_Buffer[0] == 0x53 && cmdDataSize == 3){	// Linear Jog Z
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b53      	cmp	r3, #83	; 0x53
 80014d2:	d106      	bne.n	80014e2 <HAL_UARTEx_RxEventCallback+0x246>
 80014d4:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_UARTEx_RxEventCallback+0x27c>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d101      	bne.n	80014e2 <HAL_UARTEx_RxEventCallback+0x246>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_UARTEx_RxEventCallback+0x248>
 80014e2:	2300      	movs	r3, #0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d031      	beq.n	800154c <HAL_UARTEx_RxEventCallback+0x2b0>
					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
 80014e8:	2201      	movs	r2, #1
 80014ea:	4909      	ldr	r1, [pc, #36]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <HAL_UARTEx_RxEventCallback+0x270>)
 80014ee:	f00a fca9 	bl	800be44 <HAL_UART_Transmit_DMA>
					z_theta = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80014f4:	785b      	ldrb	r3, [r3, #1]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80014fc:	789b      	ldrb	r3, [r3, #2]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21a      	sxth	r2, r3
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8001506:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001508:	e05c      	b.n	80015c4 <HAL_UARTEx_RxEventCallback+0x328>
 800150a:	bf00      	nop
 800150c:	24000a7c 	.word	0x24000a7c
 8001510:	24000224 	.word	0x24000224
 8001514:	24000238 	.word	0x24000238
 8001518:	2400024c 	.word	0x2400024c
 800151c:	2400050c 	.word	0x2400050c
 8001520:	24000220 	.word	0x24000220
 8001524:	24000222 	.word	0x24000222
 8001528:	58021000 	.word	0x58021000
 800152c:	58020400 	.word	0x58020400
 8001530:	24000210 	.word	0x24000210
 8001534:	24000212 	.word	0x24000212
 8001538:	24000214 	.word	0x24000214
 800153c:	24000216 	.word	0x24000216
 8001540:	24000218 	.word	0x24000218
 8001544:	2400021a 	.word	0x2400021a
 8001548:	2400021c 	.word	0x2400021c
				}
				else if(Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3){	// Linear Jog Yaw
 800154c:	4b53      	ldr	r3, [pc, #332]	; (800169c <HAL_UARTEx_RxEventCallback+0x400>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b54      	cmp	r3, #84	; 0x54
 8001552:	d106      	bne.n	8001562 <HAL_UARTEx_RxEventCallback+0x2c6>
 8001554:	4b52      	ldr	r3, [pc, #328]	; (80016a0 <HAL_UARTEx_RxEventCallback+0x404>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	b29b      	uxth	r3, r3
 800155a:	2b03      	cmp	r3, #3
 800155c:	d101      	bne.n	8001562 <HAL_UARTEx_RxEventCallback+0x2c6>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_UARTEx_RxEventCallback+0x2c8>
 8001562:	2300      	movs	r3, #0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d02d      	beq.n	80015c4 <HAL_UARTEx_RxEventCallback+0x328>
					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
 8001568:	2201      	movs	r2, #1
 800156a:	494c      	ldr	r1, [pc, #304]	; (800169c <HAL_UARTEx_RxEventCallback+0x400>)
 800156c:	484d      	ldr	r0, [pc, #308]	; (80016a4 <HAL_UARTEx_RxEventCallback+0x408>)
 800156e:	f00a fc69 	bl	800be44 <HAL_UART_Transmit_DMA>
					yaw_theta = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001572:	4b4a      	ldr	r3, [pc, #296]	; (800169c <HAL_UARTEx_RxEventCallback+0x400>)
 8001574:	785b      	ldrb	r3, [r3, #1]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	4b48      	ldr	r3, [pc, #288]	; (800169c <HAL_UARTEx_RxEventCallback+0x400>)
 800157c:	789b      	ldrb	r3, [r3, #2]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b48      	ldr	r3, [pc, #288]	; (80016a8 <HAL_UARTEx_RxEventCallback+0x40c>)
 8001586:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001588:	e01c      	b.n	80015c4 <HAL_UARTEx_RxEventCallback+0x328>
				}
			}
			else{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	2102      	movs	r1, #2
 800158e:	4847      	ldr	r0, [pc, #284]	; (80016ac <HAL_UARTEx_RxEventCallback+0x410>)
 8001590:	f006 fb04 	bl	8007b9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159a:	4845      	ldr	r0, [pc, #276]	; (80016b0 <HAL_UARTEx_RxEventCallback+0x414>)
 800159c:	f006 fafe 	bl	8007b9c <HAL_GPIO_WritePin>
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80015a0:	e010      	b.n	80015c4 <HAL_UARTEx_RxEventCallback+0x328>
			}
		}
		else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2102      	movs	r1, #2
 80015a6:	4841      	ldr	r0, [pc, #260]	; (80016ac <HAL_UARTEx_RxEventCallback+0x410>)
 80015a8:	f006 faf8 	bl	8007b9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b2:	483f      	ldr	r0, [pc, #252]	; (80016b0 <HAL_UARTEx_RxEventCallback+0x414>)
 80015b4:	f006 faf2 	bl	8007b9c <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)"E\n", 2);
 80015b8:	2202      	movs	r2, #2
 80015ba:	493e      	ldr	r1, [pc, #248]	; (80016b4 <HAL_UARTEx_RxEventCallback+0x418>)
 80015bc:	4839      	ldr	r0, [pc, #228]	; (80016a4 <HAL_UARTEx_RxEventCallback+0x408>)
 80015be:	f00a fc41 	bl	800be44 <HAL_UART_Transmit_DMA>
 80015c2:	e000      	b.n	80015c6 <HAL_UARTEx_RxEventCallback+0x32a>
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80015c4:	bf00      	nop
		}
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 80015c6:	2214      	movs	r2, #20
 80015c8:	493b      	ldr	r1, [pc, #236]	; (80016b8 <HAL_UARTEx_RxEventCallback+0x41c>)
 80015ca:	4836      	ldr	r0, [pc, #216]	; (80016a4 <HAL_UARTEx_RxEventCallback+0x408>)
 80015cc:	f00c fb8d 	bl	800dcea <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80015d0:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a3a      	ldr	r2, [pc, #232]	; (80016c0 <HAL_UARTEx_RxEventCallback+0x424>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d04a      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a39      	ldr	r2, [pc, #228]	; (80016c4 <HAL_UARTEx_RxEventCallback+0x428>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d045      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 80015e4:	4b35      	ldr	r3, [pc, #212]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a37      	ldr	r2, [pc, #220]	; (80016c8 <HAL_UARTEx_RxEventCallback+0x42c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d040      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 80015ee:	4b33      	ldr	r3, [pc, #204]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a36      	ldr	r2, [pc, #216]	; (80016cc <HAL_UARTEx_RxEventCallback+0x430>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d03b      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 80015f8:	4b30      	ldr	r3, [pc, #192]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a34      	ldr	r2, [pc, #208]	; (80016d0 <HAL_UARTEx_RxEventCallback+0x434>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d036      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a33      	ldr	r2, [pc, #204]	; (80016d4 <HAL_UARTEx_RxEventCallback+0x438>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d031      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a31      	ldr	r2, [pc, #196]	; (80016d8 <HAL_UARTEx_RxEventCallback+0x43c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d02c      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 8001616:	4b29      	ldr	r3, [pc, #164]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a30      	ldr	r2, [pc, #192]	; (80016dc <HAL_UARTEx_RxEventCallback+0x440>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d027      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 8001620:	4b26      	ldr	r3, [pc, #152]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a2e      	ldr	r2, [pc, #184]	; (80016e0 <HAL_UARTEx_RxEventCallback+0x444>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d022      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a2d      	ldr	r2, [pc, #180]	; (80016e4 <HAL_UARTEx_RxEventCallback+0x448>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d01d      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a2b      	ldr	r2, [pc, #172]	; (80016e8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d018      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 800163e:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a2a      	ldr	r2, [pc, #168]	; (80016ec <HAL_UARTEx_RxEventCallback+0x450>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d013      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 8001648:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a28      	ldr	r2, [pc, #160]	; (80016f0 <HAL_UARTEx_RxEventCallback+0x454>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d00e      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a27      	ldr	r2, [pc, #156]	; (80016f4 <HAL_UARTEx_RxEventCallback+0x458>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d009      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a25      	ldr	r2, [pc, #148]	; (80016f8 <HAL_UARTEx_RxEventCallback+0x45c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d004      	beq.n	8001670 <HAL_UARTEx_RxEventCallback+0x3d4>
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a24      	ldr	r2, [pc, #144]	; (80016fc <HAL_UARTEx_RxEventCallback+0x460>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d109      	bne.n	8001684 <HAL_UARTEx_RxEventCallback+0x3e8>
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0208 	bic.w	r2, r2, #8
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	bf00      	nop
	}
}
 8001682:	e007      	b.n	8001694 <HAL_UARTEx_RxEventCallback+0x3f8>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001684:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_UARTEx_RxEventCallback+0x420>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0204 	bic.w	r2, r2, #4
 8001692:	601a      	str	r2, [r3, #0]
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bdb0      	pop	{r4, r5, r7, pc}
 800169c:	24000224 	.word	0x24000224
 80016a0:	2400024c 	.word	0x2400024c
 80016a4:	24000a7c 	.word	0x24000a7c
 80016a8:	2400021e 	.word	0x2400021e
 80016ac:	58021000 	.word	0x58021000
 80016b0:	58020400 	.word	0x58020400
 80016b4:	08010e18 	.word	0x08010e18
 80016b8:	24000238 	.word	0x24000238
 80016bc:	24000a04 	.word	0x24000a04
 80016c0:	40020010 	.word	0x40020010
 80016c4:	40020028 	.word	0x40020028
 80016c8:	40020040 	.word	0x40020040
 80016cc:	40020058 	.word	0x40020058
 80016d0:	40020070 	.word	0x40020070
 80016d4:	40020088 	.word	0x40020088
 80016d8:	400200a0 	.word	0x400200a0
 80016dc:	400200b8 	.word	0x400200b8
 80016e0:	40020410 	.word	0x40020410
 80016e4:	40020428 	.word	0x40020428
 80016e8:	40020440 	.word	0x40020440
 80016ec:	40020458 	.word	0x40020458
 80016f0:	40020470 	.word	0x40020470
 80016f4:	40020488 	.word	0x40020488
 80016f8:	400204a0 	.word	0x400204a0
 80016fc:	400204b8 	.word	0x400204b8

08001700 <_ZN11robot_jointC1Ev>:
struct joint_state {
    float q1,q2,q3,q4;
};
typedef struct joint_state joint_config;

struct robot_joint{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	661a      	str	r2, [r3, #96]	; 0x60
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800171e:	665a      	str	r2, [r3, #100]	; 0x64
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	669a      	str	r2, [r3, #104]	; 0x68
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800172e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	671a      	str	r2, [r3, #112]	; 0x70
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	675a      	str	r2, [r3, #116]	; 0x74
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	679a      	str	r2, [r3, #120]	; 0x78
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a06      	ldr	r2, [pc, #24]	; (8001764 <_ZN11robot_jointC1Ev+0x64>)
 800174c:	67da      	str	r2, [r3, #124]	; 0x7c
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <_ZN11robot_jointC1Ev+0x68>)
 8001752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	3c23d70a 	.word	0x3c23d70a
 8001768:	38d1b717 	.word	0x38d1b717

0800176c <_Z12KalmanFilterf11robot_joint>:
////     p21 = P21 + P22*dt + (Q*dt3)/2 - (((Q*dt3)/2 + P22*dt + P21)*(P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
////	 p22 = P22 + Q*dt2 - (((Q*dt3)/2 + P22*dt + P12)*((Q*dt3)/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
//}

fcb_joint KalmanFilter(float theta_k, fcb_joint joint)
{
 800176c:	b084      	sub	sp, #16
 800176e:	b580      	push	{r7, lr}
 8001770:	ed2d 8b08 	vpush	{d8-d11}
 8001774:	b08a      	sub	sp, #40	; 0x28
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	ed87 0a00 	vstr	s0, [r7]
 800177e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	bug1 = joint.Encoder;
	float X1 = joint.X11;
 8001786:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = joint.X21;
 800178c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001790:	623b      	str	r3, [r7, #32]
	float P11 = joint.p11;
 8001792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001796:	61fb      	str	r3, [r7, #28]
	float P12 = joint.p12;
 8001798:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800179c:	61bb      	str	r3, [r7, #24]
	float P21 = joint.p21;
 800179e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017a2:	617b      	str	r3, [r7, #20]
	float P22 = joint.p22;
 80017a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017a8:	613b      	str	r3, [r7, #16]
	float Q = joint.Q;
 80017aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017ae:	60fb      	str	r3, [r7, #12]
	float R = joint.R;
 80017b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80017b4:	60bb      	str	r3, [r7, #8]
	joint.X11 = X1 + (X2*dt) - ((X1 - theta_k + X2*dt)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 80017b6:	4bef      	ldr	r3, [pc, #956]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 80017b8:	ed93 7a00 	vldr	s14, [r3]
 80017bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80017c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80017c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017cc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80017d0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017d4:	edd7 7a00 	vldr	s15, [r7]
 80017d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017dc:	4be5      	ldr	r3, [pc, #916]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 80017de:	edd3 6a00 	vldr	s13, [r3]
 80017e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80017e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80017f2:	4be0      	ldr	r3, [pc, #896]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80017fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001800:	edd7 7a07 	vldr	s15, [r7, #28]
 8001804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001808:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800180c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001810:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001814:	4bd7      	ldr	r3, [pc, #860]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	2004      	movs	r0, #4
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	f001 f884 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001824:	eeb0 7b40 	vmov.f64	d7, d0
 8001828:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800182c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001830:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001834:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001838:	4bce      	ldr	r3, [pc, #824]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 800183a:	ed93 7a00 	vldr	s14, [r3]
 800183e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001846:	edd7 7a06 	vldr	s15, [r7, #24]
 800184a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800184e:	4bc9      	ldr	r3, [pc, #804]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001850:	edd3 7a00 	vldr	s15, [r3]
 8001854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001858:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800185c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001860:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001864:	ed97 7a07 	vldr	s14, [r7, #28]
 8001868:	edd7 7a02 	vldr	s15, [r7, #8]
 800186c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001870:	4bc0      	ldr	r3, [pc, #768]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001872:	edd3 6a00 	vldr	s13, [r3]
 8001876:	edd7 7a05 	vldr	s15, [r7, #20]
 800187a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001882:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001886:	edd7 7a03 	vldr	s15, [r7, #12]
 800188a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800188e:	4bb9      	ldr	r3, [pc, #740]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	2004      	movs	r0, #4
 8001896:	eeb0 0a67 	vmov.f32	s0, s15
 800189a:	f001 f847 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800189e:	eeb0 7b40 	vmov.f64	d7, d0
 80018a2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80018a6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80018aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ae:	ee3a 6b07 	vadd.f64	d6, d10, d7
 80018b2:	4bb0      	ldr	r3, [pc, #704]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 80018b4:	ed93 7a00 	vldr	s14, [r3]
 80018b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80018c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c8:	4baa      	ldr	r3, [pc, #680]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018d6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80018da:	ee89 7b06 	vdiv.f64	d7, d9, d6
 80018de:	ee38 7b47 	vsub.f64	d7, d8, d7
 80018e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018e6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	joint.X21 = X2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(X1 - theta_k + X2*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 80018ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80018ee:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80018f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80018fa:	4b9e      	ldr	r3, [pc, #632]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	2003      	movs	r0, #3
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	f001 f811 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800190a:	eeb0 7b40 	vmov.f64	d7, d0
 800190e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001912:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001916:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800191a:	4b96      	ldr	r3, [pc, #600]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 800191c:	ed93 7a00 	vldr	s14, [r3]
 8001920:	edd7 7a04 	vldr	s15, [r7, #16]
 8001924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001928:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800192c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001930:	edd7 7a05 	vldr	s15, [r7, #20]
 8001934:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001938:	ee36 6b07 	vadd.f64	d6, d6, d7
 800193c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001940:	edd7 7a00 	vldr	s15, [r7]
 8001944:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001948:	4b8a      	ldr	r3, [pc, #552]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 800194a:	edd3 5a00 	vldr	s11, [r3]
 800194e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001952:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800195e:	ee26 9b07 	vmul.f64	d9, d6, d7
 8001962:	ed97 7a07 	vldr	s14, [r7, #28]
 8001966:	edd7 7a02 	vldr	s15, [r7, #8]
 800196a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800196e:	4b81      	ldr	r3, [pc, #516]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001970:	edd3 6a00 	vldr	s13, [r3]
 8001974:	edd7 7a05 	vldr	s15, [r7, #20]
 8001978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001980:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001984:	edd7 7a03 	vldr	s15, [r7, #12]
 8001988:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800198c:	4b79      	ldr	r3, [pc, #484]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	2004      	movs	r0, #4
 8001994:	eeb0 0a67 	vmov.f32	s0, s15
 8001998:	f000 ffc8 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800199c:	eeb0 7b40 	vmov.f64	d7, d0
 80019a0:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80019a4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80019a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019ac:	ee3a 6b07 	vadd.f64	d6, d10, d7
 80019b0:	4b70      	ldr	r3, [pc, #448]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 80019b2:	ed93 7a00 	vldr	s14, [r3]
 80019b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019be:	edd7 7a06 	vldr	s15, [r7, #24]
 80019c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019c6:	4b6b      	ldr	r3, [pc, #428]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80019d8:	ee89 7b06 	vdiv.f64	d7, d9, d6
 80019dc:	ee38 7b47 	vsub.f64	d7, d8, d7
 80019e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019e4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	joint.p11 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 80019e8:	4b62      	ldr	r3, [pc, #392]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 80019ea:	ed93 7a00 	vldr	s14, [r3]
 80019ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80019fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fe:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001a02:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a06:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001a0a:	4b5a      	ldr	r3, [pc, #360]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	2004      	movs	r0, #4
 8001a12:	eeb0 0a67 	vmov.f32	s0, s15
 8001a16:	f000 ff89 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001a1e:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001a22:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001a26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a2a:	ee38 6b07 	vadd.f64	d6, d8, d7
 8001a2e:	4b51      	ldr	r3, [pc, #324]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a30:	ed93 7a00 	vldr	s14, [r3]
 8001a34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a44:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a52:	ee36 8b07 	vadd.f64	d8, d6, d7
 8001a56:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a62:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a64:	edd3 6a00 	vldr	s13, [r3]
 8001a68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a74:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001a78:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a7c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001a80:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	2004      	movs	r0, #4
 8001a88:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8c:	f000 ff4e 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a90:	eeb0 7b40 	vmov.f64	d7, d0
 8001a94:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001a98:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001a9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aa0:	ee39 6b07 	vadd.f64	d6, d9, d7
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001aa6:	ed93 7a00 	vldr	s14, [r3]
 8001aaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ab6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ac8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001acc:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001ad0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001ad4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ad8:	eeb1 8b47 	vneg.f64	d8, d7
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001ade:	ed93 7a00 	vldr	s14, [r3]
 8001ae2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aea:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001af6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001afa:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	2004      	movs	r0, #4
 8001b06:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0a:	f000 ff0f 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b0e:	eeb0 7b40 	vmov.f64	d7, d0
 8001b12:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001b16:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001b1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b1e:	ee39 6b07 	vadd.f64	d6, d9, d7
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b30:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b46:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b4a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001b4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b52:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	joint.p12 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*((Q*pow(dt,3))/2 + P22*dt + P12);
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b58:	ed93 7a00 	vldr	s14, [r3]
 8001b5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b64:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001b70:	e002      	b.n	8001b78 <_Z12KalmanFilterf11robot_joint+0x40c>
 8001b72:	bf00      	nop
 8001b74:	240002d8 	.word	0x240002d8
 8001b78:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b7c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001b80:	4bef      	ldr	r3, [pc, #956]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	2004      	movs	r0, #4
 8001b88:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8c:	f000 fece 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b90:	eeb0 7b40 	vmov.f64	d7, d0
 8001b94:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001b98:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001b9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ba0:	ee38 6b07 	vadd.f64	d6, d8, d7
 8001ba4:	4be6      	ldr	r3, [pc, #920]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001ba6:	ed93 7a00 	vldr	s14, [r3]
 8001baa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bba:	4be1      	ldr	r3, [pc, #900]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bc8:	ee36 8b07 	vadd.f64	d8, d6, d7
 8001bcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd8:	4bd9      	ldr	r3, [pc, #868]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001bda:	edd3 6a00 	vldr	s13, [r3]
 8001bde:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bea:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001bee:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bf2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001bf6:	4bd2      	ldr	r3, [pc, #840]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	2004      	movs	r0, #4
 8001bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001c02:	f000 fe93 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c06:	eeb0 7b40 	vmov.f64	d7, d0
 8001c0a:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001c0e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001c12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c16:	ee39 6b07 	vadd.f64	d6, d9, d7
 8001c1a:	4bc9      	ldr	r3, [pc, #804]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c1c:	ed93 7a00 	vldr	s14, [r3]
 8001c20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c28:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c30:	4bc3      	ldr	r3, [pc, #780]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c3e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001c42:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001c46:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c4e:	eeb1 8b47 	vneg.f64	d8, d7
 8001c52:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c56:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001c5a:	4bb9      	ldr	r3, [pc, #740]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	2003      	movs	r0, #3
 8001c62:	eeb0 0a67 	vmov.f32	s0, s15
 8001c66:	f000 fe61 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c6a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c6e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001c72:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001c76:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001c7a:	4bb1      	ldr	r3, [pc, #708]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c7c:	ed93 7a00 	vldr	s14, [r3]
 8001c80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c8c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001c90:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c9c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001ca0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ca4:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	joint.p21 = P21 + P22*dt + (Q*pow(dt,3))/2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001ca8:	4ba5      	ldr	r3, [pc, #660]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001caa:	ed93 7a00 	vldr	s14, [r3]
 8001cae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbe:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001cc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001cca:	4b9d      	ldr	r3, [pc, #628]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd6:	f000 fe29 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001cda:	eeb0 7b40 	vmov.f64	d7, d0
 8001cde:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001ce2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001ce6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001cea:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001cee:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001cf6:	4b92      	ldr	r3, [pc, #584]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001d02:	f000 fe13 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d06:	eeb0 7b40 	vmov.f64	d7, d0
 8001d0a:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001d0e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001d12:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001d16:	4b8a      	ldr	r3, [pc, #552]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d18:	ed93 7a00 	vldr	s14, [r3]
 8001d1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d28:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001d2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d34:	ee36 9b07 	vadd.f64	d9, d6, d7
 8001d38:	4b81      	ldr	r3, [pc, #516]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d3a:	ed93 7a00 	vldr	s14, [r3]
 8001d3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d46:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001d52:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d56:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001d5a:	4b79      	ldr	r3, [pc, #484]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	2004      	movs	r0, #4
 8001d62:	eeb0 0a67 	vmov.f32	s0, s15
 8001d66:	f000 fde1 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d6a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d6e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001d72:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001d76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d7a:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001d7e:	4b70      	ldr	r3, [pc, #448]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d80:	ed93 7a00 	vldr	s14, [r3]
 8001d84:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d94:	4b6a      	ldr	r3, [pc, #424]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001da2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001da6:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001daa:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dae:	edd7 7a02 	vldr	s15, [r7, #8]
 8001db2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db6:	4b62      	ldr	r3, [pc, #392]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001db8:	edd3 6a00 	vldr	s13, [r3]
 8001dbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc8:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001dcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dd0:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001dd4:	4b5a      	ldr	r3, [pc, #360]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	2004      	movs	r0, #4
 8001ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8001de0:	f000 fda4 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001de4:	eeb0 7b40 	vmov.f64	d7, d0
 8001de8:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001dec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001df0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001df4:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001df8:	4b51      	ldr	r3, [pc, #324]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001dfa:	ed93 7a00 	vldr	s14, [r3]
 8001dfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e06:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e0e:	4b4c      	ldr	r3, [pc, #304]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001e10:	edd3 7a00 	vldr	s15, [r3]
 8001e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e1c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001e20:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001e24:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001e28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e2c:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	joint.p22 = P22 + Q*pow(dt,2) - (((Q*pow(dt,3))/2 + P22*dt + P12)*((Q*pow(dt,3))/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001e30:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e34:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001e38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e3c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001e40:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	2002      	movs	r0, #2
 8001e48:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4c:	f000 fd6e 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e50:	eeb0 7b40 	vmov.f64	d7, d0
 8001e54:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001e58:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001e5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e60:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e70:	f000 fd5c 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e74:	eeb0 7b40 	vmov.f64	d7, d0
 8001e78:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001e7c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001e80:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001e86:	ed93 7a00 	vldr	s14, [r3]
 8001e8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e96:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001e9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ea2:	ee36 9b07 	vadd.f64	d9, d6, d7
 8001ea6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eaa:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eba:	f000 fd37 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ebe:	eeb0 7b40 	vmov.f64	d7, d0
 8001ec2:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001ec6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001eca:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001ed0:	ed93 7a00 	vldr	s14, [r3]
 8001ed4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001edc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ee0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ee4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ee8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001eec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ef0:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001ef4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ef8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001efc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001f02:	edd3 6a00 	vldr	s13, [r3]
 8001f06:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f12:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001f16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f1a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	2004      	movs	r0, #4
 8001f26:	eeb0 0a67 	vmov.f32	s0, s15
 8001f2a:	f000 fcff 	bl	800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001f2e:	eeb0 7b40 	vmov.f64	d7, d0
 8001f32:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001f36:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001f3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f3e:	e001      	b.n	8001f44 <_Z12KalmanFilterf11robot_joint+0x7d8>
 8001f40:	240002d8 	.word	0x240002d8
 8001f44:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <_Z12KalmanFilterf11robot_joint+0x838>)
 8001f4a:	ed93 7a00 	vldr	s14, [r3]
 8001f4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f56:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <_Z12KalmanFilterf11robot_joint+0x838>)
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f6c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f70:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001f74:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001f78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f7c:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	return  joint;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f88:	2284      	movs	r2, #132	; 0x84
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f00c faee 	bl	800e56c <memcpy>
//	 X21 = X2 - (((Q*dt3)/2 + P22*dt + P21)*(X1 - theta_k + X2*dt))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
//	 p11 = -((P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)) - 1)*(P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
//	 p12 = -((P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)) - 1)*((Q*dt3)/2 + P22*dt + P12);
//   p21 = P21 + P22*dt + (Q*dt3)/2 - (((Q*dt3)/2 + P22*dt + P21)*(P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
//	 p22 = P22 + Q*dt2 - (((Q*dt3)/2 + P22*dt + P12)*((Q*dt3)/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
}
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	3728      	adds	r7, #40	; 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	ecbd 8b08 	vpop	{d8-d11}
 8001f9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f9e:	b004      	add	sp, #16
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	240002d8 	.word	0x240002d8

08001fa8 <HAL_TIM_PeriodElapsedCallback>:

    return buff;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001faa:	ed2d 8b02 	vpush	{d8}
 8001fae:	b0c9      	sub	sp, #292	; 0x124
 8001fb0:	af1e      	add	r7, sp, #120	; 0x78
 8001fb2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if (htim == &htim5){	//
	}
	if (htim == &htim12){	//

	}
	if (htim == &htim7) { 	//
 8001fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fba:	4a71      	ldr	r2, [pc, #452]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	f040 825a 	bne.w	8002476 <HAL_TIM_PeriodElapsedCallback+0x4ce>

		encoderJ1.AMT21_Read();
 8001fc2:	4870      	ldr	r0, [pc, #448]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001fc4:	f7fe fb7f 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8001fc8:	486e      	ldr	r0, [pc, #440]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001fca:	f7fe fbab 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b6d      	ldr	r3, [pc, #436]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001fd4:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8001fd6:	4b6c      	ldr	r3, [pc, #432]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_TIM_PeriodElapsedCallback+0x44>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 8001fde:	4869      	ldr	r0, [pc, #420]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001fe0:	f7fe fc04 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001fea:	801a      	strh	r2, [r3, #0]
//			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
//		}



	    float t_2 = t*t;
 8001fec:	4b68      	ldr	r3, [pc, #416]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001fee:	ed93 7a00 	vldr	s14, [r3]
 8001ff2:	4b67      	ldr	r3, [pc, #412]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	    float t_3 = t*t*t;
 8002000:	4b63      	ldr	r3, [pc, #396]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002002:	ed93 7a00 	vldr	s14, [r3]
 8002006:	4b62      	ldr	r3, [pc, #392]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002008:	edd3 7a00 	vldr	s15, [r3]
 800200c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002010:	4b5f      	ldr	r3, [pc, #380]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

	    fcb_joint3.Goal_Position =  C0_q1 + (C2_q1*t_2) - (C3_q1*t_3);
 800201e:	4b5d      	ldr	r3, [pc, #372]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002020:	ed93 7a00 	vldr	s14, [r3]
 8002024:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202c:	4b5a      	ldr	r3, [pc, #360]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002036:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002038:	edd3 6a00 	vldr	s13, [r3]
 800203c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002044:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002048:	4b55      	ldr	r3, [pc, #340]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800204a:	edc3 7a01 	vstr	s15, [r3, #4]

//	    kalman_pos = fcb_joint1.Goal_Position;
	    kalman_pos = (fcb_joint1.Old_p - fcb_joint1.Encoder);
 800204e:	4b4f      	ldr	r3, [pc, #316]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002050:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8002054:	4b4d      	ldr	r3, [pc, #308]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b21b      	sxth	r3, r3
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002066:	4b4f      	ldr	r3, [pc, #316]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002068:	edc3 7a00 	vstr	s15, [r3]

	    kalman_velo_input =  kalman_pos ;
 800206c:	4b4d      	ldr	r3, [pc, #308]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a4d      	ldr	r2, [pc, #308]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002072:	6013      	str	r3, [r2, #0]

	    if (direction_traj == 1){
 8002074:	4b4d      	ldr	r3, [pc, #308]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8096 	beq.w	80021b4 <HAL_TIM_PeriodElapsedCallback+0x20c>
	    	fcb_joint1.Goal_Position = unwrap_pose + (C0_q1 + (C2_q1*t_2) - (C3_q1*t_3)) - 0.8 ;
 8002088:	4b42      	ldr	r3, [pc, #264]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800208a:	ed93 7a00 	vldr	s14, [r3]
 800208e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002096:	4b40      	ldr	r3, [pc, #256]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a0:	4b3e      	ldr	r3, [pc, #248]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80020a2:	edd3 6a00 	vldr	s13, [r3]
 80020a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80020aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020b2:	4b3f      	ldr	r3, [pc, #252]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020c0:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8002178 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 80020c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020cc:	4b2f      	ldr	r3, [pc, #188]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80020ce:	edc3 7a01 	vstr	s15, [r3, #4]
	    	fcb_joint1.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * -2 ;
 80020d2:	4b30      	ldr	r3, [pc, #192]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80020d4:	edd3 7a00 	vldr	s15, [r3]
 80020d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020dc:	ee37 6b07 	vadd.f64	d6, d7, d7
 80020e0:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020ea:	ee26 6b07 	vmul.f64	d6, d6, d7
 80020ee:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020f8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80020fc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002100:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002104:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002108:	ee25 7b07 	vmul.f64	d7, d5, d7
 800210c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002110:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002114:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002118:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800211e:	edc3 7a02 	vstr	s15, [r3, #8]
	    	fcb_joint3.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * -2 ;
 8002122:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800212c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002130:	4b17      	ldr	r3, [pc, #92]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800213a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800213e:	4b17      	ldr	r3, [pc, #92]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002148:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800214c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002150:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002154:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002158:	ee25 7b07 	vmul.f64	d7, d5, d7
 800215c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002160:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002164:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002168:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800216e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002172:	e090      	b.n	8002296 <HAL_TIM_PeriodElapsedCallback+0x2ee>
 8002174:	f3af 8000 	nop.w
 8002178:	9999999a 	.word	0x9999999a
 800217c:	3fe99999 	.word	0x3fe99999
 8002180:	240008b0 	.word	0x240008b0
 8002184:	24000250 	.word	0x24000250
 8002188:	240002b4 	.word	0x240002b4
 800218c:	240002f0 	.word	0x240002f0
 8002190:	240002c0 	.word	0x240002c0
 8002194:	240002c4 	.word	0x240002c4
 8002198:	24000004 	.word	0x24000004
 800219c:	240002c8 	.word	0x240002c8
 80021a0:	240003f8 	.word	0x240003f8
 80021a4:	240002d4 	.word	0x240002d4
 80021a8:	240002e8 	.word	0x240002e8
 80021ac:	240002b8 	.word	0x240002b8
 80021b0:	240002ec 	.word	0x240002ec
	    }
	    else
	    {
	    	fcb_joint1.Goal_Position = unwrap_pose - (C0_q1 + (C2_q1*t_2) - (C3_q1*t_3)) + 0.8;
 80021b4:	4bb8      	ldr	r3, [pc, #736]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80021b6:	ed93 7a00 	vldr	s14, [r3]
 80021ba:	4bb8      	ldr	r3, [pc, #736]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80021bc:	edd3 6a00 	vldr	s13, [r3]
 80021c0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80021c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021c8:	4bb5      	ldr	r3, [pc, #724]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80021d2:	4bb4      	ldr	r3, [pc, #720]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80021d4:	ed93 6a00 	vldr	s12, [r3]
 80021d8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80021dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021ec:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 8002488 <HAL_TIM_PeriodElapsedCallback+0x4e0>
 80021f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021f8:	4bab      	ldr	r3, [pc, #684]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80021fa:	edc3 7a01 	vstr	s15, [r3, #4]
	    	fcb_joint1.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * 2 ;
 80021fe:	4ba7      	ldr	r3, [pc, #668]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002208:	ee37 6b07 	vadd.f64	d6, d7, d7
 800220c:	4ba7      	ldr	r3, [pc, #668]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002216:	ee26 6b07 	vmul.f64	d6, d6, d7
 800221a:	4ba2      	ldr	r3, [pc, #648]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002224:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002228:	ee27 5b05 	vmul.f64	d5, d7, d5
 800222c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002230:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002234:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002238:	ee36 7b47 	vsub.f64	d7, d6, d7
 800223c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002240:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002244:	4b98      	ldr	r3, [pc, #608]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002246:	edc3 7a02 	vstr	s15, [r3, #8]
	    	fcb_joint3.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * 2 ;
 800224a:	4b94      	ldr	r3, [pc, #592]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002254:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002258:	4b94      	ldr	r3, [pc, #592]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002262:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002266:	4b8f      	ldr	r3, [pc, #572]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002270:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002274:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002278:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800227c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002280:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002284:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002288:	ee37 7b07 	vadd.f64	d7, d7, d7
 800228c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002290:	4b87      	ldr	r3, [pc, #540]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002292:	edc3 7a02 	vstr	s15, [r3, #8]


//		fcb_joint1.Goal_Velocity = sin(0.314 * 2 * t) * 2000;
//		fcb_joint3.Goal_Velocity = sin(0.314 * 2 * t) * 4000;

	    chess_board_ang = chessboard_angular_velocity * t;
 8002296:	4b87      	ldr	r3, [pc, #540]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8002298:	ed93 7a00 	vldr	s14, [r3]
 800229c:	4b83      	ldr	r3, [pc, #524]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	4b84      	ldr	r3, [pc, #528]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80022a8:	edc3 7a00 	vstr	s15, [r3]

//		setpointJ1 = Goal_velocity_q1;
//		setpointJ3 = Goal_velocity_q3;


		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 80022ac:	4b7e      	ldr	r3, [pc, #504]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80022ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80022b2:	4b7d      	ldr	r3, [pc, #500]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b21b      	sxth	r3, r3
 80022b8:	ee07 3a90 	vmov	s15, r3
 80022bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c4:	4b78      	ldr	r3, [pc, #480]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80022c6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 80022ca:	4b79      	ldr	r3, [pc, #484]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80022cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80022d0:	4b77      	ldr	r3, [pc, #476]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e2:	4b73      	ldr	r3, [pc, #460]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80022e4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 80022e8:	4b6f      	ldr	r3, [pc, #444]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80022ea:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80022ee:	4b6e      	ldr	r3, [pc, #440]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80022f0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80022f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f8:	4b6b      	ldr	r3, [pc, #428]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80022fa:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 80022fe:	4b6c      	ldr	r3, [pc, #432]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002300:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002304:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002306:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800230a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230e:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002310:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

		fcb_joint1.Kp_p = 0.0 ;
 8002314:	4b64      	ldr	r3, [pc, #400]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	61da      	str	r2, [r3, #28]
		fcb_joint1.Ki_p = 0.0 ;
 800231c:	4b62      	ldr	r3, [pc, #392]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
		fcb_joint1.Kd_p = 0.0 ;
 8002324:	4b60      	ldr	r3, [pc, #384]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint1.Kp_v = 0.0 ;
 800232c:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint1.Ki_v = 0.0 ;
 8002334:	4b5c      	ldr	r3, [pc, #368]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint1.Kd_v = 0.0 ;
 800233c:	4b5a      	ldr	r3, [pc, #360]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	; 0x30

		fcb_joint3.Kp_p = 0.0 ;
 8002344:	4b5a      	ldr	r3, [pc, #360]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	61da      	str	r2, [r3, #28]
		fcb_joint3.Ki_p = 0.0 ;
 800234c:	4b58      	ldr	r3, [pc, #352]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	621a      	str	r2, [r3, #32]
		fcb_joint3.Kd_p = 0.0 ;
 8002354:	4b56      	ldr	r3, [pc, #344]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint3.Kp_v = 0.0 ;
 800235c:	4b54      	ldr	r3, [pc, #336]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint3.Ki_v = 0.0 ;
 8002364:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint3.Kd_v = 0.0 ;
 800236c:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	; 0x30

//		KalmanFilter(float theta_k,float kalman_pos,float kalman_velo,float P11,float P12,float P21,float P22);
//		KalmanFilter(fcb_joint1.Encoder/ 2609.0 , X11, X21, p11, p12, p21, p22, fcb_joint1);

		fcb_joint1 = KalmanFilter(fcb_joint1.Encoder/ 2609.0 ,fcb_joint1);
 8002374:	4b4c      	ldr	r3, [pc, #304]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b21b      	sxth	r3, r3
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002382:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8002490 <HAL_TIM_PeriodElapsedCallback+0x4e8>
 8002386:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800238a:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 800238e:	4e46      	ldr	r6, [pc, #280]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002390:	463d      	mov	r5, r7
 8002392:	4c45      	ldr	r4, [pc, #276]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002394:	4668      	mov	r0, sp
 8002396:	f104 030c 	add.w	r3, r4, #12
 800239a:	2278      	movs	r2, #120	; 0x78
 800239c:	4619      	mov	r1, r3
 800239e:	f00c f8e5 	bl	800e56c <memcpy>
 80023a2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80023a6:	eeb0 0a48 	vmov.f32	s0, s16
 80023aa:	4628      	mov	r0, r5
 80023ac:	f7ff f9de 	bl	800176c <_Z12KalmanFilterf11robot_joint>
 80023b0:	4630      	mov	r0, r6
 80023b2:	463b      	mov	r3, r7
 80023b4:	2284      	movs	r2, #132	; 0x84
 80023b6:	4619      	mov	r1, r3
 80023b8:	f00c f8d8 	bl	800e56c <memcpy>
//											  (fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_Error_p));
//
//		fcb_joint1.Output_Stepper_Frequency = (fcb_joint1.Kp_p * fcb_joint1.Error_p);
//		fcb_joint3.Output_Stepper_Frequency = (fcb_joint3.Kp_p * fcb_joint3.Error_p);

		fcb_joint1.Output_Stepper_Frequency = fcb_joint1.Goal_Position;
 80023bc:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4a39      	ldr	r2, [pc, #228]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80023c2:	6553      	str	r3, [r2, #84]	; 0x54
		fcb_joint3.Output_Stepper_Frequency = fcb_joint3.Goal_Position;
 80023c4:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a39      	ldr	r2, [pc, #228]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80023ca:	6553      	str	r3, [r2, #84]	; 0x54



		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 80023cc:	4b36      	ldr	r3, [pc, #216]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80023ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d0:	4a35      	ldr	r2, [pc, #212]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80023d2:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 80023d4:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80023d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d8:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80023da:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint1.Old_p = fcb_joint1.Encoder;
 80023dc:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80023ec:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 80023f0:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	b21b      	sxth	r3, r3
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002400:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
//		stepperJ1.StepperSetFrequency(300.0f);

//		stepperJ1.StepperSetFrequency(uJ1);
//		stepperJ3.StepperSetFrequency(0.0f);

		stepperJ1.StepperOpenLoopSpeed(fcb_joint1.Goal_Velocity);
 8002404:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002406:	edd3 7a02 	vldr	s15, [r3, #8]
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	482b      	ldr	r0, [pc, #172]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x514>)
 8002410:	f7fe fd42 	bl	8000e98 <_ZN7Stepper20StepperOpenLoopSpeedEf>
		stepperJ3.StepperOpenLoopSpeed(fcb_joint3.Goal_Velocity);
 8002414:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002416:	edd3 7a02 	vldr	s15, [r3, #8]
 800241a:	eeb0 0a67 	vmov.f32	s0, s15
 800241e:	4828      	ldr	r0, [pc, #160]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002420:	f7fe fd3a 	bl	8000e98 <_ZN7Stepper20StepperOpenLoopSpeedEf>

		#endif

		t = t + (sample_time_1000) ;
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 8002426:	ed93 7a00 	vldr	s14, [r3]
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 8002436:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Time)
 800243a:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 800243c:	ed93 7a00 	vldr	s14, [r3]
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244e:	bfac      	ite	ge
 8002450:	2301      	movge	r3, #1
 8002452:	2300      	movlt	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00d      	beq.n	8002476 <HAL_TIM_PeriodElapsedCallback+0x4ce>
		{
			t = 0.0;
 800245a:	4b14      	ldr	r3, [pc, #80]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
			direction_traj ^= 1;
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f083 0301 	eor.w	r3, r3, #1
 800246a:	4a18      	ldr	r2, [pc, #96]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x524>)
 800246c:	6013      	str	r3, [r2, #0]
			unwrap_pose =  fcb_joint1.Goal_Position;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8002474:	6013      	str	r3, [r2, #0]
		}

	}
}
 8002476:	bf00      	nop
 8002478:	37ac      	adds	r7, #172	; 0xac
 800247a:	46bd      	mov	sp, r7
 800247c:	ecbd 8b02 	vpop	{d8}
 8002480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002482:	bf00      	nop
 8002484:	f3af 8000 	nop.w
 8002488:	9999999a 	.word	0x9999999a
 800248c:	3fe99999 	.word	0x3fe99999
 8002490:	00000000 	.word	0x00000000
 8002494:	40a46200 	.word	0x40a46200
 8002498:	240002ec 	.word	0x240002ec
 800249c:	240002c4 	.word	0x240002c4
 80024a0:	24000004 	.word	0x24000004
 80024a4:	240002c8 	.word	0x240002c8
 80024a8:	240002f0 	.word	0x240002f0
 80024ac:	240002c0 	.word	0x240002c0
 80024b0:	240003f8 	.word	0x240003f8
 80024b4:	24000010 	.word	0x24000010
 80024b8:	240002bc 	.word	0x240002bc
 80024bc:	24000264 	.word	0x24000264
 80024c0:	2400028c 	.word	0x2400028c
 80024c4:	2400000c 	.word	0x2400000c
 80024c8:	24000000 	.word	0x24000000
 80024cc:	240002b8 	.word	0x240002b8

080024d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d4:	f001 ffc0 	bl	8004458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024d8:	f000 f96e 	bl	80027b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024dc:	f7fe fda8 	bl	8001030 <MX_GPIO_Init>
  MX_DMA_Init();
 80024e0:	f7fe fd66 	bl	8000fb0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80024e4:	f001 fd0c 	bl	8003f00 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80024e8:	f000 ff10 	bl	800330c <MX_TIM2_Init>
  MX_UART4_Init();
 80024ec:	f001 fc66 	bl	8003dbc <MX_UART4_Init>
  MX_TIM4_Init();
 80024f0:	f000 fffc 	bl	80034ec <MX_TIM4_Init>
  MX_SPI3_Init();
 80024f4:	f000 fb5e 	bl	8002bb4 <MX_SPI3_Init>
  MX_TIM1_Init();
 80024f8:	f000 fe5a 	bl	80031b0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80024fc:	f000 ff7e 	bl	80033fc <MX_TIM3_Init>
  MX_TIM5_Init();
 8002500:	f001 f86c 	bl	80035dc <MX_TIM5_Init>
  MX_TIM15_Init();
 8002504:	f001 f9a6 	bl	8003854 <MX_TIM15_Init>
  MX_CRC_Init();
 8002508:	f7fe fd02 	bl	8000f10 <MX_CRC_Init>
  MX_UART7_Init();
 800250c:	f001 fcaa 	bl	8003e64 <MX_UART7_Init>
  MX_TIM6_Init();
 8002510:	f001 f8b2 	bl	8003678 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002514:	f001 f8e6 	bl	80036e4 <MX_TIM7_Init>
  MX_TIM12_Init();
 8002518:	f001 f91a 	bl	8003750 <MX_TIM12_Init>
  MX_TIM13_Init();
 800251c:	f001 f952 	bl	80037c4 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002520:	f001 f974 	bl	800380c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8002524:	2201      	movs	r2, #1
 8002526:	2101      	movs	r1, #1
 8002528:	4882      	ldr	r0, [pc, #520]	; (8002734 <main+0x264>)
 800252a:	f005 fb37 	bl	8007b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800252e:	2201      	movs	r2, #1
 8002530:	2102      	movs	r1, #2
 8002532:	4881      	ldr	r0, [pc, #516]	; (8002738 <main+0x268>)
 8002534:	f005 fb32 	bl	8007b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002538:	2200      	movs	r2, #0
 800253a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800253e:	487d      	ldr	r0, [pc, #500]	; (8002734 <main+0x264>)
 8002540:	f005 fb2c 	bl	8007b9c <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8002544:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800273c <main+0x26c>
 8002548:	487d      	ldr	r0, [pc, #500]	; (8002740 <main+0x270>)
 800254a:	f7fe f9f1 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(16);
 800254e:	2110      	movs	r1, #16
 8002550:	487b      	ldr	r0, [pc, #492]	; (8002740 <main+0x270>)
 8002552:	f7fe fc89 	bl	8000e68 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(3);
 8002556:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800255a:	4879      	ldr	r0, [pc, #484]	; (8002740 <main+0x270>)
 800255c:	f7fe fc60 	bl	8000e20 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8002560:	4877      	ldr	r0, [pc, #476]	; (8002740 <main+0x270>)
 8002562:	f7fe f9d4 	bl	800090e <_ZN7Stepper13StepperEnableEv>
//	stepperJ2.StepperSetMicrostep(1);
//	stepperJ2.StepperSetRatio(1);
//	stepperJ1.StepperSetFrequency(15842.0f);
	stepperJ3.StepperSetFrequency(0.0f);
 8002566:	ed9f 0a75 	vldr	s0, [pc, #468]	; 800273c <main+0x26c>
 800256a:	4876      	ldr	r0, [pc, #472]	; (8002744 <main+0x274>)
 800256c:	f7fe f9e0 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8);
 8002570:	2108      	movs	r1, #8
 8002572:	4874      	ldr	r0, [pc, #464]	; (8002744 <main+0x274>)
 8002574:	f7fe fc78 	bl	8000e68 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 8002578:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 800257c:	4871      	ldr	r0, [pc, #452]	; (8002744 <main+0x274>)
 800257e:	f7fe fc4f 	bl	8000e20 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8002582:	4870      	ldr	r0, [pc, #448]	; (8002744 <main+0x274>)
 8002584:	f7fe f9c3 	bl	800090e <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
#endif

	HAL_TIM_Base_Start_IT(&htim5);
 8002588:	486f      	ldr	r0, [pc, #444]	; (8002748 <main+0x278>)
 800258a:	f008 f807 	bl	800a59c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 800258e:	486f      	ldr	r0, [pc, #444]	; (800274c <main+0x27c>)
 8002590:	f008 f804 	bl	800a59c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002594:	486e      	ldr	r0, [pc, #440]	; (8002750 <main+0x280>)
 8002596:	f008 f801 	bl	800a59c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim12);
 800259a:	486e      	ldr	r0, [pc, #440]	; (8002754 <main+0x284>)
 800259c:	f007 fffe 	bl	800a59c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 80025a0:	486d      	ldr	r0, [pc, #436]	; (8002758 <main+0x288>)
 80025a2:	f007 fffb 	bl	800a59c <HAL_TIM_Base_Start_IT>

	// Encoder
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 80025a6:	2214      	movs	r2, #20
 80025a8:	496c      	ldr	r1, [pc, #432]	; (800275c <main+0x28c>)
 80025aa:	486d      	ldr	r0, [pc, #436]	; (8002760 <main+0x290>)
 80025ac:	f00b fb9d 	bl	800dcea <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80025b0:	4b6c      	ldr	r3, [pc, #432]	; (8002764 <main+0x294>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a6c      	ldr	r2, [pc, #432]	; (8002768 <main+0x298>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d04a      	beq.n	8002650 <main+0x180>
 80025ba:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <main+0x294>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6b      	ldr	r2, [pc, #428]	; (800276c <main+0x29c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d045      	beq.n	8002650 <main+0x180>
 80025c4:	4b67      	ldr	r3, [pc, #412]	; (8002764 <main+0x294>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a69      	ldr	r2, [pc, #420]	; (8002770 <main+0x2a0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d040      	beq.n	8002650 <main+0x180>
 80025ce:	4b65      	ldr	r3, [pc, #404]	; (8002764 <main+0x294>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a68      	ldr	r2, [pc, #416]	; (8002774 <main+0x2a4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d03b      	beq.n	8002650 <main+0x180>
 80025d8:	4b62      	ldr	r3, [pc, #392]	; (8002764 <main+0x294>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a66      	ldr	r2, [pc, #408]	; (8002778 <main+0x2a8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d036      	beq.n	8002650 <main+0x180>
 80025e2:	4b60      	ldr	r3, [pc, #384]	; (8002764 <main+0x294>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a65      	ldr	r2, [pc, #404]	; (800277c <main+0x2ac>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d031      	beq.n	8002650 <main+0x180>
 80025ec:	4b5d      	ldr	r3, [pc, #372]	; (8002764 <main+0x294>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a63      	ldr	r2, [pc, #396]	; (8002780 <main+0x2b0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d02c      	beq.n	8002650 <main+0x180>
 80025f6:	4b5b      	ldr	r3, [pc, #364]	; (8002764 <main+0x294>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a62      	ldr	r2, [pc, #392]	; (8002784 <main+0x2b4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d027      	beq.n	8002650 <main+0x180>
 8002600:	4b58      	ldr	r3, [pc, #352]	; (8002764 <main+0x294>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a60      	ldr	r2, [pc, #384]	; (8002788 <main+0x2b8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d022      	beq.n	8002650 <main+0x180>
 800260a:	4b56      	ldr	r3, [pc, #344]	; (8002764 <main+0x294>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a5f      	ldr	r2, [pc, #380]	; (800278c <main+0x2bc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d01d      	beq.n	8002650 <main+0x180>
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <main+0x294>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a5d      	ldr	r2, [pc, #372]	; (8002790 <main+0x2c0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d018      	beq.n	8002650 <main+0x180>
 800261e:	4b51      	ldr	r3, [pc, #324]	; (8002764 <main+0x294>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a5c      	ldr	r2, [pc, #368]	; (8002794 <main+0x2c4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d013      	beq.n	8002650 <main+0x180>
 8002628:	4b4e      	ldr	r3, [pc, #312]	; (8002764 <main+0x294>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a5a      	ldr	r2, [pc, #360]	; (8002798 <main+0x2c8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00e      	beq.n	8002650 <main+0x180>
 8002632:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <main+0x294>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a59      	ldr	r2, [pc, #356]	; (800279c <main+0x2cc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d009      	beq.n	8002650 <main+0x180>
 800263c:	4b49      	ldr	r3, [pc, #292]	; (8002764 <main+0x294>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a57      	ldr	r2, [pc, #348]	; (80027a0 <main+0x2d0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d004      	beq.n	8002650 <main+0x180>
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <main+0x294>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a56      	ldr	r2, [pc, #344]	; (80027a4 <main+0x2d4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d108      	bne.n	8002662 <main+0x192>
 8002650:	4b44      	ldr	r3, [pc, #272]	; (8002764 <main+0x294>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b43      	ldr	r3, [pc, #268]	; (8002764 <main+0x294>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0208 	bic.w	r2, r2, #8
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e007      	b.n	8002672 <main+0x1a2>
 8002662:	4b40      	ldr	r3, [pc, #256]	; (8002764 <main+0x294>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <main+0x294>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0204 	bic.w	r2, r2, #4
 8002670:	601a      	str	r2, [r3, #0]
//	stepperJ1.StepperOpenLoopSpeed(1.00f);

	// Backup
	fcb_joint1.Kp_p = 0.0 ;
 8002672:	4b4d      	ldr	r3, [pc, #308]	; (80027a8 <main+0x2d8>)
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
	fcb_joint1.Kp_v = 0.0 ;
 800267a:	4b4b      	ldr	r3, [pc, #300]	; (80027a8 <main+0x2d8>)
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint1.Ki_p = 0.0 ;
 8002682:	4b49      	ldr	r3, [pc, #292]	; (80027a8 <main+0x2d8>)
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	621a      	str	r2, [r3, #32]
	fcb_joint1.Ki_v = 0.0 ;
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <main+0x2d8>)
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint1.Kd_p = 0.0 ;
 8002692:	4b45      	ldr	r3, [pc, #276]	; (80027a8 <main+0x2d8>)
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint1.Kd_p = 0.0 ;
 800269a:	4b43      	ldr	r3, [pc, #268]	; (80027a8 <main+0x2d8>)
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint2.Kp_p = 0.0 ;
 80026a2:	4b42      	ldr	r3, [pc, #264]	; (80027ac <main+0x2dc>)
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	61da      	str	r2, [r3, #28]
	fcb_joint2.Kp_v = 0.0 ;
 80026aa:	4b40      	ldr	r3, [pc, #256]	; (80027ac <main+0x2dc>)
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint2.Ki_p = 0.0 ;
 80026b2:	4b3e      	ldr	r3, [pc, #248]	; (80027ac <main+0x2dc>)
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	621a      	str	r2, [r3, #32]
	fcb_joint2.Ki_v = 0.0 ;
 80026ba:	4b3c      	ldr	r3, [pc, #240]	; (80027ac <main+0x2dc>)
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint2.Kd_p = 0.0 ;
 80026c2:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <main+0x2dc>)
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint2.Kd_p = 0.0 ;
 80026ca:	4b38      	ldr	r3, [pc, #224]	; (80027ac <main+0x2dc>)
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint3.Kp_p = 0.0 ;
 80026d2:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <main+0x2e0>)
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
	fcb_joint3.Kp_v = 0.0 ;
 80026da:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <main+0x2e0>)
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint3.Ki_p = 0.0 ;
 80026e2:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <main+0x2e0>)
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	621a      	str	r2, [r3, #32]
	fcb_joint3.Ki_v = 0.0 ;
 80026ea:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <main+0x2e0>)
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint3.Kd_p = 0.0 ;
 80026f2:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <main+0x2e0>)
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint3.Kd_p = 0.0 ;
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <main+0x2e0>)
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint4.Kp_p = 0.0 ;
 8002702:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <main+0x2e4>)
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
	fcb_joint4.Kp_v = 0.0 ;
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <main+0x2e4>)
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint4.Ki_p = 0.0 ;
 8002712:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <main+0x2e4>)
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	621a      	str	r2, [r3, #32]
	fcb_joint4.Ki_v = 0.0 ;
 800271a:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <main+0x2e4>)
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint4.Kd_p = 0.0 ;
 8002722:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <main+0x2e4>)
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint4.Kd_p = 0.0 ;
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <main+0x2e4>)
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002732:	e7fe      	b.n	8002732 <main+0x262>
 8002734:	58020400 	.word	0x58020400
 8002738:	58021000 	.word	0x58021000
 800273c:	00000000 	.word	0x00000000
 8002740:	24000264 	.word	0x24000264
 8002744:	2400028c 	.word	0x2400028c
 8002748:	24000650 	.word	0x24000650
 800274c:	24000734 	.word	0x24000734
 8002750:	240008b0 	.word	0x240008b0
 8002754:	24000864 	.word	0x24000864
 8002758:	24000818 	.word	0x24000818
 800275c:	24000238 	.word	0x24000238
 8002760:	24000a7c 	.word	0x24000a7c
 8002764:	24000a04 	.word	0x24000a04
 8002768:	40020010 	.word	0x40020010
 800276c:	40020028 	.word	0x40020028
 8002770:	40020040 	.word	0x40020040
 8002774:	40020058 	.word	0x40020058
 8002778:	40020070 	.word	0x40020070
 800277c:	40020088 	.word	0x40020088
 8002780:	400200a0 	.word	0x400200a0
 8002784:	400200b8 	.word	0x400200b8
 8002788:	40020410 	.word	0x40020410
 800278c:	40020428 	.word	0x40020428
 8002790:	40020440 	.word	0x40020440
 8002794:	40020458 	.word	0x40020458
 8002798:	40020470 	.word	0x40020470
 800279c:	40020488 	.word	0x40020488
 80027a0:	400204a0 	.word	0x400204a0
 80027a4:	400204b8 	.word	0x400204b8
 80027a8:	240002f0 	.word	0x240002f0
 80027ac:	24000374 	.word	0x24000374
 80027b0:	240003f8 	.word	0x240003f8
 80027b4:	2400047c 	.word	0x2400047c

080027b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b09c      	sub	sp, #112	; 0x70
 80027bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c2:	224c      	movs	r2, #76	; 0x4c
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f00b fede 	bl	800e588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	2220      	movs	r2, #32
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f00b fed8 	bl	800e588 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80027d8:	2002      	movs	r0, #2
 80027da:	f005 fa13 	bl	8007c04 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80027de:	2300      	movs	r3, #0
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <_Z18SystemClock_Configv+0x10c>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	4a37      	ldr	r2, [pc, #220]	; (80028c4 <_Z18SystemClock_Configv+0x10c>)
 80027e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ec:	6193      	str	r3, [r2, #24]
 80027ee:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <_Z18SystemClock_Configv+0x10c>)
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <_Z18SystemClock_Configv+0x110>)
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	4a32      	ldr	r2, [pc, #200]	; (80028c8 <_Z18SystemClock_Configv+0x110>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <_Z18SystemClock_Configv+0x110>)
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002810:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <_Z18SystemClock_Configv+0x10c>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281c:	bf14      	ite	ne
 800281e:	2301      	movne	r3, #1
 8002820:	2300      	moveq	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d000      	beq.n	800282a <_Z18SystemClock_Configv+0x72>
 8002828:	e7f2      	b.n	8002810 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800282a:	2302      	movs	r3, #2
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800282e:	2301      	movs	r3, #1
 8002830:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002832:	2340      	movs	r3, #64	; 0x40
 8002834:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002836:	2302      	movs	r3, #2
 8002838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800283a:	2300      	movs	r3, #0
 800283c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800283e:	2304      	movs	r3, #4
 8002840:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002842:	233c      	movs	r3, #60	; 0x3c
 8002844:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002846:	2302      	movs	r3, #2
 8002848:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800284a:	2306      	movs	r3, #6
 800284c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800284e:	2302      	movs	r3, #2
 8002850:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002852:	230c      	movs	r3, #12
 8002854:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002856:	2300      	movs	r3, #0
 8002858:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800285e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002862:	4618      	mov	r0, r3
 8002864:	f005 fa08 	bl	8007c78 <HAL_RCC_OscConfig>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	bf14      	ite	ne
 800286e:	2301      	movne	r3, #1
 8002870:	2300      	moveq	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8002878:	f000 f83e 	bl	80028f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800287c:	233f      	movs	r3, #63	; 0x3f
 800287e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002880:	2303      	movs	r3, #3
 8002882:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002888:	2308      	movs	r3, #8
 800288a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800288c:	2340      	movs	r3, #64	; 0x40
 800288e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002890:	2340      	movs	r3, #64	; 0x40
 8002892:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002898:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800289a:	2340      	movs	r3, #64	; 0x40
 800289c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	2104      	movs	r1, #4
 80028a2:	4618      	mov	r0, r3
 80028a4:	f005 fe14 	bl	80084d0 <HAL_RCC_ClockConfig>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	bf14      	ite	ne
 80028ae:	2301      	movne	r3, #1
 80028b0:	2300      	moveq	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 80028b8:	f000 f81e 	bl	80028f8 <Error_Handler>
  }
}
 80028bc:	bf00      	nop
 80028be:	3770      	adds	r7, #112	; 0x70
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	58024800 	.word	0x58024800
 80028c8:	58000400 	.word	0x58000400

080028cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	80fb      	strh	r3, [r7, #6]

}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2101      	movs	r1, #1
 8002900:	4808      	ldr	r0, [pc, #32]	; (8002924 <Error_Handler+0x2c>)
 8002902:	f005 f94b 	bl	8007b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002906:	2200      	movs	r2, #0
 8002908:	2102      	movs	r1, #2
 800290a:	4807      	ldr	r0, [pc, #28]	; (8002928 <Error_Handler+0x30>)
 800290c:	f005 f946 	bl	8007b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002910:	2201      	movs	r2, #1
 8002912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002916:	4803      	ldr	r0, [pc, #12]	; (8002924 <Error_Handler+0x2c>)
 8002918:	f005 f940 	bl	8007b9c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800291c:	b672      	cpsid	i
}
 800291e:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002920:	e7fe      	b.n	8002920 <Error_Handler+0x28>
 8002922:	bf00      	nop
 8002924:	58020400 	.word	0x58020400
 8002928:	58021000 	.word	0x58021000

0800292c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	ed87 0a01 	vstr	s0, [r7, #4]
 8002936:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8002938:	edd7 7a01 	vldr	s15, [r7, #4]
 800293c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	ee06 3a90 	vmov	s13, r3
 8002946:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800294a:	eeb0 1b46 	vmov.f64	d1, d6
 800294e:	eeb0 0b47 	vmov.f64	d0, d7
 8002952:	f00b faad 	bl	800deb0 <pow>
 8002956:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800295a:	eeb0 0b47 	vmov.f64	d0, d7
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af02      	add	r7, sp, #8
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b01      	cmp	r3, #1
 8002972:	f040 80ca 	bne.w	8002b0a <_Z41__static_initialization_and_destruction_0ii+0x1a6>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800297c:	4293      	cmp	r3, r2
 800297e:	f040 80c4 	bne.w	8002b0a <_Z41__static_initialization_and_destruction_0ii+0x1a6>
AMT21 encoderJ1(&huart4, 0xD4);
 8002982:	22d4      	movs	r2, #212	; 0xd4
 8002984:	496b      	ldr	r1, [pc, #428]	; (8002b34 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8002986:	486c      	ldr	r0, [pc, #432]	; (8002b38 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8002988:	f7fd fe7e 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 800298c:	2320      	movs	r3, #32
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8002992:	2200      	movs	r2, #0
 8002994:	496a      	ldr	r1, [pc, #424]	; (8002b40 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002996:	486b      	ldr	r0, [pc, #428]	; (8002b44 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8002998:	f7fd ff6a 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 800299c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	4b69      	ldr	r3, [pc, #420]	; (8002b48 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80029a4:	2204      	movs	r2, #4
 80029a6:	4969      	ldr	r1, [pc, #420]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 80029a8:	4869      	ldr	r0, [pc, #420]	; (8002b50 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 80029aa:	f7fd ff61 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
volatile const float C2_q1 = (3.0*C0_q1) / (Time*Time);
 80029ae:	4b69      	ldr	r3, [pc, #420]	; (8002b54 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029b8:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80029bc:	ee27 5b06 	vmul.f64	d5, d7, d6
 80029c0:	4b65      	ldr	r3, [pc, #404]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80029c2:	ed93 7a00 	vldr	s14, [r3]
 80029c6:	4b64      	ldr	r3, [pc, #400]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80029d4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80029d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029dc:	4b5f      	ldr	r3, [pc, #380]	; (8002b5c <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 80029de:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0*C0_q1) / (Time*Time*Time);
 80029e2:	4b5c      	ldr	r3, [pc, #368]	; (8002b54 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029ec:	ee37 5b07 	vadd.f64	d5, d7, d7
 80029f0:	4b59      	ldr	r3, [pc, #356]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80029f2:	ed93 7a00 	vldr	s14, [r3]
 80029f6:	4b58      	ldr	r3, [pc, #352]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a00:	4b55      	ldr	r3, [pc, #340]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002a0e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002a12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a16:	4b52      	ldr	r3, [pc, #328]	; (8002b60 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002a18:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0*C0_q3) / (Time*Time);
 8002a1c:	4b51      	ldr	r3, [pc, #324]	; (8002b64 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8002a1e:	edd3 7a00 	vldr	s15, [r3]
 8002a22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a26:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002a2a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002a2e:	4b4a      	ldr	r3, [pc, #296]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002a30:	ed93 7a00 	vldr	s14, [r3]
 8002a34:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002a42:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002a46:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8002a4c:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0*C0_q3) / (Time*Time*Time);
 8002a50:	4b44      	ldr	r3, [pc, #272]	; (8002b64 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a5a:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002a5e:	4b3e      	ldr	r3, [pc, #248]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002a60:	ed93 7a00 	vldr	s14, [r3]
 8002a64:	4b3c      	ldr	r3, [pc, #240]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a6e:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002a70:	edd3 7a00 	vldr	s15, [r3]
 8002a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002a7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002a80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a84:	4b39      	ldr	r3, [pc, #228]	; (8002b6c <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8002a86:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt = sample_time_1000;
 8002a8a:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a39      	ldr	r2, [pc, #228]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002a90:	6013      	str	r3, [r2, #0]
volatile const float dt2 = dt*dt;
 8002a92:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002a94:	ed93 7a00 	vldr	s14, [r3]
 8002a98:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8002aa4:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt3 = dt*dt*dt;
 8002aa8:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002aaa:	ed93 7a00 	vldr	s14, [r3]
 8002aae:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab8:	4b2e      	ldr	r3, [pc, #184]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac2:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8002ac4:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt4 = dt*dt*dt*dt;
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002aca:	ed93 7a00 	vldr	s14, [r3]
 8002ace:	4b29      	ldr	r3, [pc, #164]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad8:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002ada:	edd3 7a00 	vldr	s15, [r3]
 8002ade:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae2:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8002aee:	edc3 7a00 	vstr	s15, [r3]
fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;
 8002af2:	4824      	ldr	r0, [pc, #144]	; (8002b84 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8002af4:	f7fe fe04 	bl	8001700 <_ZN11robot_jointC1Ev>
 8002af8:	4823      	ldr	r0, [pc, #140]	; (8002b88 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8002afa:	f7fe fe01 	bl	8001700 <_ZN11robot_jointC1Ev>
 8002afe:	4823      	ldr	r0, [pc, #140]	; (8002b8c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8002b00:	f7fe fdfe 	bl	8001700 <_ZN11robot_jointC1Ev>
 8002b04:	4822      	ldr	r0, [pc, #136]	; (8002b90 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8002b06:	f7fe fdfb 	bl	8001700 <_ZN11robot_jointC1Ev>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10d      	bne.n	8002b2c <_Z41__static_initialization_and_destruction_0ii+0x1c8>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d108      	bne.n	8002b2c <_Z41__static_initialization_and_destruction_0ii+0x1c8>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8002b1a:	480d      	ldr	r0, [pc, #52]	; (8002b50 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8002b1c:	f7fd feec 	bl	80008f8 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8002b20:	4808      	ldr	r0, [pc, #32]	; (8002b44 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8002b22:	f7fd fee9 	bl	80008f8 <_ZN7StepperD1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8002b26:	4804      	ldr	r0, [pc, #16]	; (8002b38 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8002b28:	f7fd fdc2 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	24000bfc 	.word	0x24000bfc
 8002b38:	24000250 	.word	0x24000250
 8002b3c:	58020400 	.word	0x58020400
 8002b40:	2400069c 	.word	0x2400069c
 8002b44:	24000264 	.word	0x24000264
 8002b48:	58021000 	.word	0x58021000
 8002b4c:	24000604 	.word	0x24000604
 8002b50:	2400028c 	.word	0x2400028c
 8002b54:	24000004 	.word	0x24000004
 8002b58:	24000000 	.word	0x24000000
 8002b5c:	240002c4 	.word	0x240002c4
 8002b60:	240002c8 	.word	0x240002c8
 8002b64:	24000008 	.word	0x24000008
 8002b68:	240002cc 	.word	0x240002cc
 8002b6c:	240002d0 	.word	0x240002d0
 8002b70:	2400000c 	.word	0x2400000c
 8002b74:	240002d8 	.word	0x240002d8
 8002b78:	240002dc 	.word	0x240002dc
 8002b7c:	240002e0 	.word	0x240002e0
 8002b80:	240002e4 	.word	0x240002e4
 8002b84:	240002f0 	.word	0x240002f0
 8002b88:	24000374 	.word	0x24000374
 8002b8c:	240003f8 	.word	0x240003f8
 8002b90:	2400047c 	.word	0x2400047c

08002b94 <_GLOBAL__sub_I_TIM_MS>:
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f7ff fee1 	bl	8002964 <_Z41__static_initialization_and_destruction_0ii>
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_GLOBAL__sub_D_TIM_MS>:
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7ff fed9 	bl	8002964 <_Z41__static_initialization_and_destruction_0ii>
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002bb8:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002bba:	4a28      	ldr	r2, [pc, #160]	; (8002c5c <MX_SPI3_Init+0xa8>)
 8002bbc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002bbe:	4b26      	ldr	r3, [pc, #152]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002bc0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002bc4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002bcc:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002bce:	2203      	movs	r2, #3
 8002bd0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bd2:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bd8:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002bde:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002be0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002be4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002be6:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bec:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bf2:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c0a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002c42:	4805      	ldr	r0, [pc, #20]	; (8002c58 <MX_SPI3_Init+0xa4>)
 8002c44:	f007 fb32 	bl	800a2ac <HAL_SPI_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8002c4e:	f7ff fe53 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	24000530 	.word	0x24000530
 8002c5c:	40003c00 	.word	0x40003c00

08002c60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b0b8      	sub	sp, #224	; 0xe0
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c78:	f107 0310 	add.w	r3, r7, #16
 8002c7c:	22bc      	movs	r2, #188	; 0xbc
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f00b fc81 	bl	800e588 <memset>
  if(spiHandle->Instance==SPI3)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <HAL_SPI_MspInit+0xc0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d142      	bne.n	8002d16 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c94:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c9a:	f107 0310 	add.w	r3, r7, #16
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f005 ffa2 	bl	8008be8 <HAL_RCCEx_PeriphCLKConfig>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002caa:	f7ff fe25 	bl	80028f8 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_SPI_MspInit+0xc4>)
 8002cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	; (8002d24 <HAL_SPI_MspInit+0xc4>)
 8002cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cbe:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_SPI_MspInit+0xc4>)
 8002cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_SPI_MspInit+0xc4>)
 8002cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd2:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <HAL_SPI_MspInit+0xc4>)
 8002cd4:	f043 0304 	orr.w	r3, r3, #4
 8002cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_SPI_MspInit+0xc4>)
 8002cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002cea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002cee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d04:	2306      	movs	r3, #6
 8002d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4805      	ldr	r0, [pc, #20]	; (8002d28 <HAL_SPI_MspInit+0xc8>)
 8002d12:	f004 fd93 	bl	800783c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002d16:	bf00      	nop
 8002d18:	37e0      	adds	r7, #224	; 0xe0
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40003c00 	.word	0x40003c00
 8002d24:	58024400 	.word	0x58024400
 8002d28:	58020800 	.word	0x58020800

08002d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_MspInit+0x30>)
 8002d34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d38:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_MspInit+0x30>)
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_MspInit+0x30>)
 8002d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	58024400 	.word	0x58024400

08002d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d64:	e7fe      	b.n	8002d64 <NMI_Handler+0x4>

08002d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d6a:	e7fe      	b.n	8002d6a <HardFault_Handler+0x4>

08002d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d70:	e7fe      	b.n	8002d70 <MemManage_Handler+0x4>

08002d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d76:	e7fe      	b.n	8002d76 <BusFault_Handler+0x4>

08002d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d7c:	e7fe      	b.n	8002d7c <UsageFault_Handler+0x4>

08002d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dac:	f001 fbc6 	bl	800453c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002db0:	f001 fcff 	bl	80047b2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002db4:	bf00      	nop
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8002dbc:	4802      	ldr	r0, [pc, #8]	; (8002dc8 <DMA1_Stream0_IRQHandler+0x10>)
 8002dbe:	f003 fa2b 	bl	8006218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	24000b84 	.word	0x24000b84

08002dcc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002dd0:	4802      	ldr	r0, [pc, #8]	; (8002ddc <DMA1_Stream1_IRQHandler+0x10>)
 8002dd2:	f003 fa21 	bl	8006218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	24000a04 	.word	0x24000a04

08002de0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002de4:	4802      	ldr	r0, [pc, #8]	; (8002df0 <DMA1_Stream2_IRQHandler+0x10>)
 8002de6:	f003 fa17 	bl	8006218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	24000b0c 	.word	0x24000b0c

08002df4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <DMA1_Stream3_IRQHandler+0x10>)
 8002dfa:	f003 fa0d 	bl	8006218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	240008fc 	.word	0x240008fc

08002e08 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <DMA1_Stream4_IRQHandler+0x10>)
 8002e0e:	f003 fa03 	bl	8006218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	24000c8c 	.word	0x24000c8c

08002e1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8002e20:	2040      	movs	r0, #64	; 0x40
 8002e22:	f004 fed4 	bl	8007bce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 8002e26:	2080      	movs	r0, #128	; 0x80
 8002e28:	f004 fed1 	bl	8007bce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <USART3_IRQHandler+0x10>)
 8002e36:	f009 f897 	bl	800bf68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	24000a7c 	.word	0x24000a7c

08002e44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8002e48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e4c:	f004 febf 	bl	8007bce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8002e50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002e54:	f004 febb 	bl	8007bce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8002e58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e5c:	f004 feb7 	bl	8007bce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8002e60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e64:	f004 feb3 	bl	8007bce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002e70:	4802      	ldr	r0, [pc, #8]	; (8002e7c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002e72:	f007 fd7b 	bl	800a96c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	24000864 	.word	0x24000864

08002e80 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002e84:	4802      	ldr	r0, [pc, #8]	; (8002e90 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002e86:	f007 fd71 	bl	800a96c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	240006e8 	.word	0x240006e8

08002e94 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002e98:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002e9a:	f007 fd67 	bl	800a96c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	24000818 	.word	0x24000818

08002ea8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002eac:	4802      	ldr	r0, [pc, #8]	; (8002eb8 <TIM5_IRQHandler+0x10>)
 8002eae:	f007 fd5d 	bl	800a96c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	24000650 	.word	0x24000650

08002ebc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <UART4_IRQHandler+0x10>)
 8002ec2:	f009 f851 	bl	800bf68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	24000bfc 	.word	0x24000bfc

08002ed0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ed4:	4802      	ldr	r0, [pc, #8]	; (8002ee0 <TIM6_DAC_IRQHandler+0x10>)
 8002ed6:	f007 fd49 	bl	800a96c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	24000734 	.word	0x24000734

08002ee4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ee8:	4802      	ldr	r0, [pc, #8]	; (8002ef4 <TIM7_IRQHandler+0x10>)
 8002eea:	f007 fd3f 	bl	800a96c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	240008b0 	.word	0x240008b0

08002ef8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <UART7_IRQHandler+0x10>)
 8002efe:	f009 f833 	bl	800bf68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	24000974 	.word	0x24000974

08002f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
	return 1;
 8002f10:	2301      	movs	r3, #1
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <_kill>:

int _kill(int pid, int sig)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f26:	f00b faf7 	bl	800e518 <__errno>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2216      	movs	r2, #22
 8002f2e:	601a      	str	r2, [r3, #0]
	return -1;
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <_exit>:

void _exit (int status)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f44:	f04f 31ff 	mov.w	r1, #4294967295
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ffe7 	bl	8002f1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f4e:	e7fe      	b.n	8002f4e <_exit+0x12>

08002f50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e00a      	b.n	8002f78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f62:	f3af 8000 	nop.w
 8002f66:	4601      	mov	r1, r0
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	60ba      	str	r2, [r7, #8]
 8002f6e:	b2ca      	uxtb	r2, r1
 8002f70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	3301      	adds	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	dbf0      	blt.n	8002f62 <_read+0x12>
	}

return len;
 8002f80:	687b      	ldr	r3, [r7, #4]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e009      	b.n	8002fb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	60ba      	str	r2, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	3301      	adds	r3, #1
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	dbf1      	blt.n	8002f9c <_write+0x12>
	}
	return len;
 8002fb8:	687b      	ldr	r3, [r7, #4]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <_close>:

int _close(int file)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
	return -1;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fea:	605a      	str	r2, [r3, #4]
	return 0;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <_isatty>:

int _isatty(int file)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
	return 1;
 8003002:	2301      	movs	r3, #1
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
	return 0;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003034:	4a14      	ldr	r2, [pc, #80]	; (8003088 <_sbrk+0x5c>)
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <_sbrk+0x60>)
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <_sbrk+0x64>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <_sbrk+0x64>)
 800304a:	4a12      	ldr	r2, [pc, #72]	; (8003094 <_sbrk+0x68>)
 800304c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <_sbrk+0x64>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	429a      	cmp	r2, r3
 800305a:	d207      	bcs.n	800306c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800305c:	f00b fa5c 	bl	800e518 <__errno>
 8003060:	4603      	mov	r3, r0
 8003062:	220c      	movs	r2, #12
 8003064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
 800306a:	e009      	b.n	8003080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <_sbrk+0x64>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <_sbrk+0x64>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	4a05      	ldr	r2, [pc, #20]	; (8003090 <_sbrk+0x64>)
 800307c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	24001318 	.word	0x24001318
 800308c:	00000400 	.word	0x00000400
 8003090:	24000500 	.word	0x24000500
 8003094:	24000d18 	.word	0x24000d18

08003098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800309c:	4b39      	ldr	r3, [pc, #228]	; (8003184 <SystemInit+0xec>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	4a38      	ldr	r2, [pc, #224]	; (8003184 <SystemInit+0xec>)
 80030a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80030ac:	4b36      	ldr	r3, [pc, #216]	; (8003188 <SystemInit+0xf0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	2b06      	cmp	r3, #6
 80030b6:	d807      	bhi.n	80030c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80030b8:	4b33      	ldr	r3, [pc, #204]	; (8003188 <SystemInit+0xf0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f023 030f 	bic.w	r3, r3, #15
 80030c0:	4a31      	ldr	r2, [pc, #196]	; (8003188 <SystemInit+0xf0>)
 80030c2:	f043 0307 	orr.w	r3, r3, #7
 80030c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80030c8:	4b30      	ldr	r3, [pc, #192]	; (800318c <SystemInit+0xf4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a2f      	ldr	r2, [pc, #188]	; (800318c <SystemInit+0xf4>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030d4:	4b2d      	ldr	r3, [pc, #180]	; (800318c <SystemInit+0xf4>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <SystemInit+0xf4>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	492b      	ldr	r1, [pc, #172]	; (800318c <SystemInit+0xf4>)
 80030e0:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <SystemInit+0xf8>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80030e6:	4b28      	ldr	r3, [pc, #160]	; (8003188 <SystemInit+0xf0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80030f2:	4b25      	ldr	r3, [pc, #148]	; (8003188 <SystemInit+0xf0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 030f 	bic.w	r3, r3, #15
 80030fa:	4a23      	ldr	r2, [pc, #140]	; (8003188 <SystemInit+0xf0>)
 80030fc:	f043 0307 	orr.w	r3, r3, #7
 8003100:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003102:	4b22      	ldr	r3, [pc, #136]	; (800318c <SystemInit+0xf4>)
 8003104:	2200      	movs	r2, #0
 8003106:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003108:	4b20      	ldr	r3, [pc, #128]	; (800318c <SystemInit+0xf4>)
 800310a:	2200      	movs	r2, #0
 800310c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800310e:	4b1f      	ldr	r3, [pc, #124]	; (800318c <SystemInit+0xf4>)
 8003110:	2200      	movs	r2, #0
 8003112:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003114:	4b1d      	ldr	r3, [pc, #116]	; (800318c <SystemInit+0xf4>)
 8003116:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <SystemInit+0xfc>)
 8003118:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800311a:	4b1c      	ldr	r3, [pc, #112]	; (800318c <SystemInit+0xf4>)
 800311c:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <SystemInit+0x100>)
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <SystemInit+0xf4>)
 8003122:	4a1e      	ldr	r2, [pc, #120]	; (800319c <SystemInit+0x104>)
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <SystemInit+0xf4>)
 8003128:	2200      	movs	r2, #0
 800312a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800312c:	4b17      	ldr	r3, [pc, #92]	; (800318c <SystemInit+0xf4>)
 800312e:	4a1b      	ldr	r2, [pc, #108]	; (800319c <SystemInit+0x104>)
 8003130:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003132:	4b16      	ldr	r3, [pc, #88]	; (800318c <SystemInit+0xf4>)
 8003134:	2200      	movs	r2, #0
 8003136:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003138:	4b14      	ldr	r3, [pc, #80]	; (800318c <SystemInit+0xf4>)
 800313a:	4a18      	ldr	r2, [pc, #96]	; (800319c <SystemInit+0x104>)
 800313c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <SystemInit+0xf4>)
 8003140:	2200      	movs	r2, #0
 8003142:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <SystemInit+0xf4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a10      	ldr	r2, [pc, #64]	; (800318c <SystemInit+0xf4>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003150:	4b0e      	ldr	r3, [pc, #56]	; (800318c <SystemInit+0xf4>)
 8003152:	2200      	movs	r2, #0
 8003154:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <SystemInit+0x108>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <SystemInit+0x10c>)
 800315c:	4013      	ands	r3, r2
 800315e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003162:	d202      	bcs.n	800316a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003164:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <SystemInit+0x110>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <SystemInit+0x114>)
 800316c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003170:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003172:	4b04      	ldr	r3, [pc, #16]	; (8003184 <SystemInit+0xec>)
 8003174:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003178:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00
 8003188:	52002000 	.word	0x52002000
 800318c:	58024400 	.word	0x58024400
 8003190:	eaf6ed7f 	.word	0xeaf6ed7f
 8003194:	02020200 	.word	0x02020200
 8003198:	01ff0000 	.word	0x01ff0000
 800319c:	01010280 	.word	0x01010280
 80031a0:	5c001000 	.word	0x5c001000
 80031a4:	ffff0000 	.word	0xffff0000
 80031a8:	51008108 	.word	0x51008108
 80031ac:	52004000 	.word	0x52004000

080031b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b09a      	sub	sp, #104	; 0x68
 80031b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
 80031e0:	615a      	str	r2, [r3, #20]
 80031e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	222c      	movs	r2, #44	; 0x2c
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f00b f9cc 	bl	800e588 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031f0:	4b44      	ldr	r3, [pc, #272]	; (8003304 <MX_TIM1_Init+0x154>)
 80031f2:	4a45      	ldr	r2, [pc, #276]	; (8003308 <MX_TIM1_Init+0x158>)
 80031f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 80031f6:	4b43      	ldr	r3, [pc, #268]	; (8003304 <MX_TIM1_Init+0x154>)
 80031f8:	22c7      	movs	r2, #199	; 0xc7
 80031fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fc:	4b41      	ldr	r3, [pc, #260]	; (8003304 <MX_TIM1_Init+0x154>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8003202:	4b40      	ldr	r3, [pc, #256]	; (8003304 <MX_TIM1_Init+0x154>)
 8003204:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003208:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320a:	4b3e      	ldr	r3, [pc, #248]	; (8003304 <MX_TIM1_Init+0x154>)
 800320c:	2200      	movs	r2, #0
 800320e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003210:	4b3c      	ldr	r3, [pc, #240]	; (8003304 <MX_TIM1_Init+0x154>)
 8003212:	2200      	movs	r2, #0
 8003214:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003216:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <MX_TIM1_Init+0x154>)
 8003218:	2280      	movs	r2, #128	; 0x80
 800321a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800321c:	4839      	ldr	r0, [pc, #228]	; (8003304 <MX_TIM1_Init+0x154>)
 800321e:	f007 f966 	bl	800a4ee <HAL_TIM_Base_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003228:	f7ff fb66 	bl	80028f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800322c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003230:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003232:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003236:	4619      	mov	r1, r3
 8003238:	4832      	ldr	r0, [pc, #200]	; (8003304 <MX_TIM1_Init+0x154>)
 800323a:	f007 fdcb 	bl	800add4 <HAL_TIM_ConfigClockSource>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003244:	f7ff fb58 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003248:	482e      	ldr	r0, [pc, #184]	; (8003304 <MX_TIM1_Init+0x154>)
 800324a:	f007 fa1f 	bl	800a68c <HAL_TIM_PWM_Init>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003254:	f7ff fb50 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003258:	2300      	movs	r3, #0
 800325a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800325c:	2300      	movs	r3, #0
 800325e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003260:	2300      	movs	r3, #0
 8003262:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003264:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003268:	4619      	mov	r1, r3
 800326a:	4826      	ldr	r0, [pc, #152]	; (8003304 <MX_TIM1_Init+0x154>)
 800326c:	f008 fb06 	bl	800b87c <HAL_TIMEx_MasterConfigSynchronization>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003276:	f7ff fb3f 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800327a:	2360      	movs	r3, #96	; 0x60
 800327c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800327e:	f240 1339 	movw	r3, #313	; 0x139
 8003282:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003284:	2300      	movs	r3, #0
 8003286:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003288:	2300      	movs	r3, #0
 800328a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003290:	2300      	movs	r3, #0
 8003292:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003294:	2300      	movs	r3, #0
 8003296:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003298:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800329c:	2204      	movs	r2, #4
 800329e:	4619      	mov	r1, r3
 80032a0:	4818      	ldr	r0, [pc, #96]	; (8003304 <MX_TIM1_Init+0x154>)
 80032a2:	f007 fc83 	bl	800abac <HAL_TIM_PWM_ConfigChannel>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80032ac:	f7ff fb24 	bl	80028f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80032d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032dc:	2300      	movs	r3, #0
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032e0:	1d3b      	adds	r3, r7, #4
 80032e2:	4619      	mov	r1, r3
 80032e4:	4807      	ldr	r0, [pc, #28]	; (8003304 <MX_TIM1_Init+0x154>)
 80032e6:	f008 fb57 	bl	800b998 <HAL_TIMEx_ConfigBreakDeadTime>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80032f0:	f7ff fb02 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032f4:	4803      	ldr	r0, [pc, #12]	; (8003304 <MX_TIM1_Init+0x154>)
 80032f6:	f000 fc85 	bl	8003c04 <HAL_TIM_MspPostInit>

}
 80032fa:	bf00      	nop
 80032fc:	3768      	adds	r7, #104	; 0x68
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	24000780 	.word	0x24000780
 8003308:	40010000 	.word	0x40010000

0800330c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08e      	sub	sp, #56	; 0x38
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003320:	f107 031c 	add.w	r3, r7, #28
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800332c:	463b      	mov	r3, r7
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	60da      	str	r2, [r3, #12]
 8003338:	611a      	str	r2, [r3, #16]
 800333a:	615a      	str	r2, [r3, #20]
 800333c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800333e:	4b2e      	ldr	r3, [pc, #184]	; (80033f8 <MX_TIM2_Init+0xec>)
 8003340:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003344:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8003346:	4b2c      	ldr	r3, [pc, #176]	; (80033f8 <MX_TIM2_Init+0xec>)
 8003348:	22c7      	movs	r2, #199	; 0xc7
 800334a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800334c:	4b2a      	ldr	r3, [pc, #168]	; (80033f8 <MX_TIM2_Init+0xec>)
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8003352:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <MX_TIM2_Init+0xec>)
 8003354:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003358:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800335a:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <MX_TIM2_Init+0xec>)
 800335c:	2200      	movs	r2, #0
 800335e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003360:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <MX_TIM2_Init+0xec>)
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003366:	4824      	ldr	r0, [pc, #144]	; (80033f8 <MX_TIM2_Init+0xec>)
 8003368:	f007 f8c1 	bl	800a4ee <HAL_TIM_Base_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003372:	f7ff fac1 	bl	80028f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800337c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003380:	4619      	mov	r1, r3
 8003382:	481d      	ldr	r0, [pc, #116]	; (80033f8 <MX_TIM2_Init+0xec>)
 8003384:	f007 fd26 	bl	800add4 <HAL_TIM_ConfigClockSource>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800338e:	f7ff fab3 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003392:	4819      	ldr	r0, [pc, #100]	; (80033f8 <MX_TIM2_Init+0xec>)
 8003394:	f007 f97a 	bl	800a68c <HAL_TIM_PWM_Init>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800339e:	f7ff faab 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033aa:	f107 031c 	add.w	r3, r7, #28
 80033ae:	4619      	mov	r1, r3
 80033b0:	4811      	ldr	r0, [pc, #68]	; (80033f8 <MX_TIM2_Init+0xec>)
 80033b2:	f008 fa63 	bl	800b87c <HAL_TIMEx_MasterConfigSynchronization>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80033bc:	f7ff fa9c 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033c0:	2360      	movs	r3, #96	; 0x60
 80033c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80033c4:	f240 1339 	movw	r3, #313	; 0x139
 80033c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033d2:	463b      	mov	r3, r7
 80033d4:	2208      	movs	r2, #8
 80033d6:	4619      	mov	r1, r3
 80033d8:	4807      	ldr	r0, [pc, #28]	; (80033f8 <MX_TIM2_Init+0xec>)
 80033da:	f007 fbe7 	bl	800abac <HAL_TIM_PWM_ConfigChannel>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80033e4:	f7ff fa88 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80033e8:	4803      	ldr	r0, [pc, #12]	; (80033f8 <MX_TIM2_Init+0xec>)
 80033ea:	f000 fc0b 	bl	8003c04 <HAL_TIM_MspPostInit>

}
 80033ee:	bf00      	nop
 80033f0:	3738      	adds	r7, #56	; 0x38
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	240007cc 	.word	0x240007cc

080033fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08e      	sub	sp, #56	; 0x38
 8003400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	609a      	str	r2, [r3, #8]
 800340e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003410:	f107 031c 	add.w	r3, r7, #28
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800341c:	463b      	mov	r3, r7
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	611a      	str	r2, [r3, #16]
 800342a:	615a      	str	r2, [r3, #20]
 800342c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800342e:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <MX_TIM3_Init+0xe8>)
 8003430:	4a2d      	ldr	r2, [pc, #180]	; (80034e8 <MX_TIM3_Init+0xec>)
 8003432:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8003434:	4b2b      	ldr	r3, [pc, #172]	; (80034e4 <MX_TIM3_Init+0xe8>)
 8003436:	22c7      	movs	r2, #199	; 0xc7
 8003438:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800343a:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <MX_TIM3_Init+0xe8>)
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8003440:	4b28      	ldr	r3, [pc, #160]	; (80034e4 <MX_TIM3_Init+0xe8>)
 8003442:	f640 125f 	movw	r2, #2399	; 0x95f
 8003446:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003448:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <MX_TIM3_Init+0xe8>)
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800344e:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <MX_TIM3_Init+0xe8>)
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003454:	4823      	ldr	r0, [pc, #140]	; (80034e4 <MX_TIM3_Init+0xe8>)
 8003456:	f007 f84a 	bl	800a4ee <HAL_TIM_Base_Init>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003460:	f7ff fa4a 	bl	80028f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800346a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800346e:	4619      	mov	r1, r3
 8003470:	481c      	ldr	r0, [pc, #112]	; (80034e4 <MX_TIM3_Init+0xe8>)
 8003472:	f007 fcaf 	bl	800add4 <HAL_TIM_ConfigClockSource>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800347c:	f7ff fa3c 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003480:	4818      	ldr	r0, [pc, #96]	; (80034e4 <MX_TIM3_Init+0xe8>)
 8003482:	f007 f903 	bl	800a68c <HAL_TIM_PWM_Init>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800348c:	f7ff fa34 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003498:	f107 031c 	add.w	r3, r7, #28
 800349c:	4619      	mov	r1, r3
 800349e:	4811      	ldr	r0, [pc, #68]	; (80034e4 <MX_TIM3_Init+0xe8>)
 80034a0:	f008 f9ec 	bl	800b87c <HAL_TIMEx_MasterConfigSynchronization>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80034aa:	f7ff fa25 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034ae:	2360      	movs	r3, #96	; 0x60
 80034b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034be:	463b      	mov	r3, r7
 80034c0:	2200      	movs	r2, #0
 80034c2:	4619      	mov	r1, r3
 80034c4:	4807      	ldr	r0, [pc, #28]	; (80034e4 <MX_TIM3_Init+0xe8>)
 80034c6:	f007 fb71 	bl	800abac <HAL_TIM_PWM_ConfigChannel>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80034d0:	f7ff fa12 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80034d4:	4803      	ldr	r0, [pc, #12]	; (80034e4 <MX_TIM3_Init+0xe8>)
 80034d6:	f000 fb95 	bl	8003c04 <HAL_TIM_MspPostInit>

}
 80034da:	bf00      	nop
 80034dc:	3738      	adds	r7, #56	; 0x38
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	2400069c 	.word	0x2400069c
 80034e8:	40000400 	.word	0x40000400

080034ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08e      	sub	sp, #56	; 0x38
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003500:	f107 031c 	add.w	r3, r7, #28
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800350c:	463b      	mov	r3, r7
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	60da      	str	r2, [r3, #12]
 8003518:	611a      	str	r2, [r3, #16]
 800351a:	615a      	str	r2, [r3, #20]
 800351c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800351e:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <MX_TIM4_Init+0xe8>)
 8003520:	4a2d      	ldr	r2, [pc, #180]	; (80035d8 <MX_TIM4_Init+0xec>)
 8003522:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8003524:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <MX_TIM4_Init+0xe8>)
 8003526:	22c7      	movs	r2, #199	; 0xc7
 8003528:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800352a:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <MX_TIM4_Init+0xe8>)
 800352c:	2200      	movs	r2, #0
 800352e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8003530:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <MX_TIM4_Init+0xe8>)
 8003532:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003536:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003538:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <MX_TIM4_Init+0xe8>)
 800353a:	2200      	movs	r2, #0
 800353c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <MX_TIM4_Init+0xe8>)
 8003540:	2280      	movs	r2, #128	; 0x80
 8003542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003544:	4823      	ldr	r0, [pc, #140]	; (80035d4 <MX_TIM4_Init+0xe8>)
 8003546:	f006 ffd2 	bl	800a4ee <HAL_TIM_Base_Init>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003550:	f7ff f9d2 	bl	80028f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800355a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800355e:	4619      	mov	r1, r3
 8003560:	481c      	ldr	r0, [pc, #112]	; (80035d4 <MX_TIM4_Init+0xe8>)
 8003562:	f007 fc37 	bl	800add4 <HAL_TIM_ConfigClockSource>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800356c:	f7ff f9c4 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003570:	4818      	ldr	r0, [pc, #96]	; (80035d4 <MX_TIM4_Init+0xe8>)
 8003572:	f007 f88b 	bl	800a68c <HAL_TIM_PWM_Init>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800357c:	f7ff f9bc 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003584:	2300      	movs	r3, #0
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003588:	f107 031c 	add.w	r3, r7, #28
 800358c:	4619      	mov	r1, r3
 800358e:	4811      	ldr	r0, [pc, #68]	; (80035d4 <MX_TIM4_Init+0xe8>)
 8003590:	f008 f974 	bl	800b87c <HAL_TIMEx_MasterConfigSynchronization>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800359a:	f7ff f9ad 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800359e:	2360      	movs	r3, #96	; 0x60
 80035a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80035a2:	f240 1339 	movw	r3, #313	; 0x139
 80035a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035ac:	2300      	movs	r3, #0
 80035ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035b0:	463b      	mov	r3, r7
 80035b2:	2208      	movs	r2, #8
 80035b4:	4619      	mov	r1, r3
 80035b6:	4807      	ldr	r0, [pc, #28]	; (80035d4 <MX_TIM4_Init+0xe8>)
 80035b8:	f007 faf8 	bl	800abac <HAL_TIM_PWM_ConfigChannel>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80035c2:	f7ff f999 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80035c6:	4803      	ldr	r0, [pc, #12]	; (80035d4 <MX_TIM4_Init+0xe8>)
 80035c8:	f000 fb1c 	bl	8003c04 <HAL_TIM_MspPostInit>

}
 80035cc:	bf00      	nop
 80035ce:	3738      	adds	r7, #56	; 0x38
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	240005b8 	.word	0x240005b8
 80035d8:	40000800 	.word	0x40000800

080035dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035e2:	f107 0310 	add.w	r3, r7, #16
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80035fa:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <MX_TIM5_Init+0x94>)
 80035fc:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <MX_TIM5_Init+0x98>)
 80035fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8003600:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <MX_TIM5_Init+0x94>)
 8003602:	22c7      	movs	r2, #199	; 0xc7
 8003604:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <MX_TIM5_Init+0x94>)
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 800360c:	4b18      	ldr	r3, [pc, #96]	; (8003670 <MX_TIM5_Init+0x94>)
 800360e:	f642 62df 	movw	r2, #11999	; 0x2edf
 8003612:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003614:	4b16      	ldr	r3, [pc, #88]	; (8003670 <MX_TIM5_Init+0x94>)
 8003616:	2200      	movs	r2, #0
 8003618:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <MX_TIM5_Init+0x94>)
 800361c:	2280      	movs	r2, #128	; 0x80
 800361e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003620:	4813      	ldr	r0, [pc, #76]	; (8003670 <MX_TIM5_Init+0x94>)
 8003622:	f006 ff64 	bl	800a4ee <HAL_TIM_Base_Init>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800362c:	f7ff f964 	bl	80028f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003634:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003636:	f107 0310 	add.w	r3, r7, #16
 800363a:	4619      	mov	r1, r3
 800363c:	480c      	ldr	r0, [pc, #48]	; (8003670 <MX_TIM5_Init+0x94>)
 800363e:	f007 fbc9 	bl	800add4 <HAL_TIM_ConfigClockSource>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003648:	f7ff f956 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800364c:	2300      	movs	r3, #0
 800364e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003654:	1d3b      	adds	r3, r7, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4805      	ldr	r0, [pc, #20]	; (8003670 <MX_TIM5_Init+0x94>)
 800365a:	f008 f90f 	bl	800b87c <HAL_TIMEx_MasterConfigSynchronization>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003664:	f7ff f948 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003668:	bf00      	nop
 800366a:	3720      	adds	r7, #32
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	24000650 	.word	0x24000650
 8003674:	40000c00 	.word	0x40000c00

08003678 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003688:	4b14      	ldr	r3, [pc, #80]	; (80036dc <MX_TIM6_Init+0x64>)
 800368a:	4a15      	ldr	r2, [pc, #84]	; (80036e0 <MX_TIM6_Init+0x68>)
 800368c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 800368e:	4b13      	ldr	r3, [pc, #76]	; (80036dc <MX_TIM6_Init+0x64>)
 8003690:	22c7      	movs	r2, #199	; 0xc7
 8003692:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003694:	4b11      	ldr	r3, [pc, #68]	; (80036dc <MX_TIM6_Init+0x64>)
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <MX_TIM6_Init+0x64>)
 800369c:	f241 726f 	movw	r2, #5999	; 0x176f
 80036a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036a2:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <MX_TIM6_Init+0x64>)
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80036a8:	480c      	ldr	r0, [pc, #48]	; (80036dc <MX_TIM6_Init+0x64>)
 80036aa:	f006 ff20 	bl	800a4ee <HAL_TIM_Base_Init>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80036b4:	f7ff f920 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036b8:	2300      	movs	r3, #0
 80036ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	4619      	mov	r1, r3
 80036c4:	4805      	ldr	r0, [pc, #20]	; (80036dc <MX_TIM6_Init+0x64>)
 80036c6:	f008 f8d9 	bl	800b87c <HAL_TIMEx_MasterConfigSynchronization>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80036d0:	f7ff f912 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	24000734 	.word	0x24000734
 80036e0:	40001000 	.word	0x40001000

080036e4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80036f4:	4b14      	ldr	r3, [pc, #80]	; (8003748 <MX_TIM7_Init+0x64>)
 80036f6:	4a15      	ldr	r2, [pc, #84]	; (800374c <MX_TIM7_Init+0x68>)
 80036f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <MX_TIM7_Init+0x64>)
 80036fc:	22c7      	movs	r2, #199	; 0xc7
 80036fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <MX_TIM7_Init+0x64>)
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <MX_TIM7_Init+0x64>)
 8003708:	f240 42af 	movw	r2, #1199	; 0x4af
 800370c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800370e:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <MX_TIM7_Init+0x64>)
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003714:	480c      	ldr	r0, [pc, #48]	; (8003748 <MX_TIM7_Init+0x64>)
 8003716:	f006 feea 	bl	800a4ee <HAL_TIM_Base_Init>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003720:	f7ff f8ea 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003724:	2300      	movs	r3, #0
 8003726:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800372c:	1d3b      	adds	r3, r7, #4
 800372e:	4619      	mov	r1, r3
 8003730:	4805      	ldr	r0, [pc, #20]	; (8003748 <MX_TIM7_Init+0x64>)
 8003732:	f008 f8a3 	bl	800b87c <HAL_TIMEx_MasterConfigSynchronization>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800373c:	f7ff f8dc 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	240008b0 	.word	0x240008b0
 800374c:	40001400 	.word	0x40001400

08003750 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003756:	463b      	mov	r3, r7
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <MX_TIM12_Init+0x6c>)
 8003764:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <MX_TIM12_Init+0x70>)
 8003766:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <MX_TIM12_Init+0x6c>)
 800376a:	22c7      	movs	r2, #199	; 0xc7
 800376c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <MX_TIM12_Init+0x6c>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <MX_TIM12_Init+0x6c>)
 8003776:	f240 2257 	movw	r2, #599	; 0x257
 800377a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800377c:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <MX_TIM12_Init+0x6c>)
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003782:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <MX_TIM12_Init+0x6c>)
 8003784:	2280      	movs	r2, #128	; 0x80
 8003786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003788:	480c      	ldr	r0, [pc, #48]	; (80037bc <MX_TIM12_Init+0x6c>)
 800378a:	f006 feb0 	bl	800a4ee <HAL_TIM_Base_Init>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8003794:	f7ff f8b0 	bl	80028f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800379c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800379e:	463b      	mov	r3, r7
 80037a0:	4619      	mov	r1, r3
 80037a2:	4806      	ldr	r0, [pc, #24]	; (80037bc <MX_TIM12_Init+0x6c>)
 80037a4:	f007 fb16 	bl	800add4 <HAL_TIM_ConfigClockSource>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80037ae:	f7ff f8a3 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	24000864 	.word	0x24000864
 80037c0:	40001800 	.word	0x40001800

080037c4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80037c8:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <MX_TIM13_Init+0x40>)
 80037ca:	4a0f      	ldr	r2, [pc, #60]	; (8003808 <MX_TIM13_Init+0x44>)
 80037cc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <MX_TIM13_Init+0x40>)
 80037d0:	22c7      	movs	r2, #199	; 0xc7
 80037d2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <MX_TIM13_Init+0x40>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <MX_TIM13_Init+0x40>)
 80037dc:	f240 2257 	movw	r2, #599	; 0x257
 80037e0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037e2:	4b08      	ldr	r3, [pc, #32]	; (8003804 <MX_TIM13_Init+0x40>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <MX_TIM13_Init+0x40>)
 80037ea:	2280      	movs	r2, #128	; 0x80
 80037ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80037ee:	4805      	ldr	r0, [pc, #20]	; (8003804 <MX_TIM13_Init+0x40>)
 80037f0:	f006 fe7d 	bl	800a4ee <HAL_TIM_Base_Init>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80037fa:	f7ff f87d 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	240006e8 	.word	0x240006e8
 8003808:	40001c00 	.word	0x40001c00

0800380c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003810:	4b0e      	ldr	r3, [pc, #56]	; (800384c <MX_TIM14_Init+0x40>)
 8003812:	4a0f      	ldr	r2, [pc, #60]	; (8003850 <MX_TIM14_Init+0x44>)
 8003814:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <MX_TIM14_Init+0x40>)
 8003818:	22c7      	movs	r2, #199	; 0xc7
 800381a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <MX_TIM14_Init+0x40>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <MX_TIM14_Init+0x40>)
 8003824:	f640 125f 	movw	r2, #2399	; 0x95f
 8003828:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <MX_TIM14_Init+0x40>)
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <MX_TIM14_Init+0x40>)
 8003832:	2280      	movs	r2, #128	; 0x80
 8003834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003836:	4805      	ldr	r0, [pc, #20]	; (800384c <MX_TIM14_Init+0x40>)
 8003838:	f006 fe59 	bl	800a4ee <HAL_TIM_Base_Init>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8003842:	f7ff f859 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	24000818 	.word	0x24000818
 8003850:	40002000 	.word	0x40002000

08003854 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b09a      	sub	sp, #104	; 0x68
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800385a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003868:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
 8003884:	615a      	str	r2, [r3, #20]
 8003886:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003888:	1d3b      	adds	r3, r7, #4
 800388a:	222c      	movs	r2, #44	; 0x2c
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f00a fe7a 	bl	800e588 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003894:	4b3f      	ldr	r3, [pc, #252]	; (8003994 <MX_TIM15_Init+0x140>)
 8003896:	4a40      	ldr	r2, [pc, #256]	; (8003998 <MX_TIM15_Init+0x144>)
 8003898:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 800389a:	4b3e      	ldr	r3, [pc, #248]	; (8003994 <MX_TIM15_Init+0x140>)
 800389c:	22ef      	movs	r2, #239	; 0xef
 800389e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a0:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <MX_TIM15_Init+0x140>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80038a6:	4b3b      	ldr	r3, [pc, #236]	; (8003994 <MX_TIM15_Init+0x140>)
 80038a8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80038ac:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ae:	4b39      	ldr	r3, [pc, #228]	; (8003994 <MX_TIM15_Init+0x140>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80038b4:	4b37      	ldr	r3, [pc, #220]	; (8003994 <MX_TIM15_Init+0x140>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038ba:	4b36      	ldr	r3, [pc, #216]	; (8003994 <MX_TIM15_Init+0x140>)
 80038bc:	2280      	movs	r2, #128	; 0x80
 80038be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80038c0:	4834      	ldr	r0, [pc, #208]	; (8003994 <MX_TIM15_Init+0x140>)
 80038c2:	f006 fe14 	bl	800a4ee <HAL_TIM_Base_Init>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80038cc:	f7ff f814 	bl	80028f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038d4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80038d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038da:	4619      	mov	r1, r3
 80038dc:	482d      	ldr	r0, [pc, #180]	; (8003994 <MX_TIM15_Init+0x140>)
 80038de:	f007 fa79 	bl	800add4 <HAL_TIM_ConfigClockSource>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80038e8:	f7ff f806 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80038ec:	4829      	ldr	r0, [pc, #164]	; (8003994 <MX_TIM15_Init+0x140>)
 80038ee:	f006 fecd 	bl	800a68c <HAL_TIM_PWM_Init>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80038f8:	f7fe fffe 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038fc:	2300      	movs	r3, #0
 80038fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003900:	2300      	movs	r3, #0
 8003902:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003904:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003908:	4619      	mov	r1, r3
 800390a:	4822      	ldr	r0, [pc, #136]	; (8003994 <MX_TIM15_Init+0x140>)
 800390c:	f007 ffb6 	bl	800b87c <HAL_TIMEx_MasterConfigSynchronization>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8003916:	f7fe ffef 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800391a:	2360      	movs	r3, #96	; 0x60
 800391c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800391e:	f240 1339 	movw	r3, #313	; 0x139
 8003922:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003924:	2300      	movs	r3, #0
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003928:	2300      	movs	r3, #0
 800392a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800392c:	2300      	movs	r3, #0
 800392e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003930:	2300      	movs	r3, #0
 8003932:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003934:	2300      	movs	r3, #0
 8003936:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003938:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800393c:	2204      	movs	r2, #4
 800393e:	4619      	mov	r1, r3
 8003940:	4814      	ldr	r0, [pc, #80]	; (8003994 <MX_TIM15_Init+0x140>)
 8003942:	f007 f933 	bl	800abac <HAL_TIM_PWM_ConfigChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 800394c:	f7fe ffd4 	bl	80028f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003950:	2300      	movs	r3, #0
 8003952:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003968:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800396e:	2300      	movs	r3, #0
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003972:	1d3b      	adds	r3, r7, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4807      	ldr	r0, [pc, #28]	; (8003994 <MX_TIM15_Init+0x140>)
 8003978:	f008 f80e 	bl	800b998 <HAL_TIMEx_ConfigBreakDeadTime>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8003982:	f7fe ffb9 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003986:	4803      	ldr	r0, [pc, #12]	; (8003994 <MX_TIM15_Init+0x140>)
 8003988:	f000 f93c 	bl	8003c04 <HAL_TIM_MspPostInit>

}
 800398c:	bf00      	nop
 800398e:	3768      	adds	r7, #104	; 0x68
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	24000604 	.word	0x24000604
 8003998:	40014000 	.word	0x40014000

0800399c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08e      	sub	sp, #56	; 0x38
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a8b      	ldr	r2, [pc, #556]	; (8003bd8 <HAL_TIM_Base_MspInit+0x23c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d10f      	bne.n	80039ce <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ae:	4b8b      	ldr	r3, [pc, #556]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 80039b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039b4:	4a89      	ldr	r2, [pc, #548]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80039be:	4b87      	ldr	r3, [pc, #540]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 80039c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
 80039ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80039cc:	e100      	b.n	8003bd0 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d6:	d10f      	bne.n	80039f8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039d8:	4b80      	ldr	r3, [pc, #512]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 80039da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039de:	4a7f      	ldr	r2, [pc, #508]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039e8:	4b7c      	ldr	r3, [pc, #496]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 80039ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	633b      	str	r3, [r7, #48]	; 0x30
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80039f6:	e0eb      	b.n	8003bd0 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM3)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a78      	ldr	r2, [pc, #480]	; (8003be0 <HAL_TIM_Base_MspInit+0x244>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10f      	bne.n	8003a22 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a02:	4b76      	ldr	r3, [pc, #472]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a08:	4a74      	ldr	r2, [pc, #464]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003a0a:	f043 0302 	orr.w	r3, r3, #2
 8003a0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a12:	4b72      	ldr	r3, [pc, #456]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003a20:	e0d6      	b.n	8003bd0 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM4)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a6f      	ldr	r2, [pc, #444]	; (8003be4 <HAL_TIM_Base_MspInit+0x248>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d10f      	bne.n	8003a4c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a2c:	4b6b      	ldr	r3, [pc, #428]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003a2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a32:	4a6a      	ldr	r2, [pc, #424]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a3c:	4b67      	ldr	r3, [pc, #412]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003a3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003a4a:	e0c1      	b.n	8003bd0 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM5)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a65      	ldr	r2, [pc, #404]	; (8003be8 <HAL_TIM_Base_MspInit+0x24c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d117      	bne.n	8003a86 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a56:	4b61      	ldr	r3, [pc, #388]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a5c:	4a5f      	ldr	r2, [pc, #380]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003a5e:	f043 0308 	orr.w	r3, r3, #8
 8003a62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a66:	4b5d      	ldr	r3, [pc, #372]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003a74:	2200      	movs	r2, #0
 8003a76:	2100      	movs	r1, #0
 8003a78:	2032      	movs	r0, #50	; 0x32
 8003a7a:	f000 fe66 	bl	800474a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a7e:	2032      	movs	r0, #50	; 0x32
 8003a80:	f000 fe7d 	bl	800477e <HAL_NVIC_EnableIRQ>
}
 8003a84:	e0a4      	b.n	8003bd0 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM6)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a58      	ldr	r2, [pc, #352]	; (8003bec <HAL_TIM_Base_MspInit+0x250>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d117      	bne.n	8003ac0 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a90:	4b52      	ldr	r3, [pc, #328]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003a92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a96:	4a51      	ldr	r2, [pc, #324]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003a98:	f043 0310 	orr.w	r3, r3, #16
 8003a9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003aa0:	4b4e      	ldr	r3, [pc, #312]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003aa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	623b      	str	r3, [r7, #32]
 8003aac:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	2036      	movs	r0, #54	; 0x36
 8003ab4:	f000 fe49 	bl	800474a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ab8:	2036      	movs	r0, #54	; 0x36
 8003aba:	f000 fe60 	bl	800477e <HAL_NVIC_EnableIRQ>
}
 8003abe:	e087      	b.n	8003bd0 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM7)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a4a      	ldr	r2, [pc, #296]	; (8003bf0 <HAL_TIM_Base_MspInit+0x254>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d117      	bne.n	8003afa <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003aca:	4b44      	ldr	r3, [pc, #272]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ad0:	4a42      	ldr	r2, [pc, #264]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003ad2:	f043 0320 	orr.w	r3, r3, #32
 8003ad6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ada:	4b40      	ldr	r3, [pc, #256]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2100      	movs	r1, #0
 8003aec:	2037      	movs	r0, #55	; 0x37
 8003aee:	f000 fe2c 	bl	800474a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003af2:	2037      	movs	r0, #55	; 0x37
 8003af4:	f000 fe43 	bl	800477e <HAL_NVIC_EnableIRQ>
}
 8003af8:	e06a      	b.n	8003bd0 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM12)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a3d      	ldr	r2, [pc, #244]	; (8003bf4 <HAL_TIM_Base_MspInit+0x258>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d117      	bne.n	8003b34 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003b04:	4b35      	ldr	r3, [pc, #212]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003b06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b0a:	4a34      	ldr	r2, [pc, #208]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b14:	4b31      	ldr	r3, [pc, #196]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003b16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003b22:	2200      	movs	r2, #0
 8003b24:	2100      	movs	r1, #0
 8003b26:	202b      	movs	r0, #43	; 0x2b
 8003b28:	f000 fe0f 	bl	800474a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003b2c:	202b      	movs	r0, #43	; 0x2b
 8003b2e:	f000 fe26 	bl	800477e <HAL_NVIC_EnableIRQ>
}
 8003b32:	e04d      	b.n	8003bd0 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM13)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2f      	ldr	r2, [pc, #188]	; (8003bf8 <HAL_TIM_Base_MspInit+0x25c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d117      	bne.n	8003b6e <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003b3e:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b44:	4a25      	ldr	r2, [pc, #148]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b4e:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2100      	movs	r1, #0
 8003b60:	202c      	movs	r0, #44	; 0x2c
 8003b62:	f000 fdf2 	bl	800474a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003b66:	202c      	movs	r0, #44	; 0x2c
 8003b68:	f000 fe09 	bl	800477e <HAL_NVIC_EnableIRQ>
}
 8003b6c:	e030      	b.n	8003bd0 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM14)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <HAL_TIM_Base_MspInit+0x260>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d117      	bne.n	8003ba8 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003b78:	4b18      	ldr	r3, [pc, #96]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b7e:	4a17      	ldr	r2, [pc, #92]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003b8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2100      	movs	r1, #0
 8003b9a:	202d      	movs	r0, #45	; 0x2d
 8003b9c:	f000 fdd5 	bl	800474a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003ba0:	202d      	movs	r0, #45	; 0x2d
 8003ba2:	f000 fdec 	bl	800477e <HAL_NVIC_EnableIRQ>
}
 8003ba6:	e013      	b.n	8003bd0 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM15)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a14      	ldr	r2, [pc, #80]	; (8003c00 <HAL_TIM_Base_MspInit+0x264>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d10e      	bne.n	8003bd0 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bb8:	4a08      	ldr	r2, [pc, #32]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_TIM_Base_MspInit+0x240>)
 8003bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68fb      	ldr	r3, [r7, #12]
}
 8003bd0:	bf00      	nop
 8003bd2:	3738      	adds	r7, #56	; 0x38
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40010000 	.word	0x40010000
 8003bdc:	58024400 	.word	0x58024400
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800
 8003be8:	40000c00 	.word	0x40000c00
 8003bec:	40001000 	.word	0x40001000
 8003bf0:	40001400 	.word	0x40001400
 8003bf4:	40001800 	.word	0x40001800
 8003bf8:	40001c00 	.word	0x40001c00
 8003bfc:	40002000 	.word	0x40002000
 8003c00:	40014000 	.word	0x40014000

08003c04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08c      	sub	sp, #48	; 0x30
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0c:	f107 031c 	add.w	r3, r7, #28
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a5e      	ldr	r2, [pc, #376]	; (8003d9c <HAL_TIM_MspPostInit+0x198>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d120      	bne.n	8003c68 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c26:	4b5e      	ldr	r3, [pc, #376]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c2c:	4a5c      	ldr	r2, [pc, #368]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003c2e:	f043 0310 	orr.w	r3, r3, #16
 8003c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c36:	4b5a      	ldr	r3, [pc, #360]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8003c44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c52:	2300      	movs	r3, #0
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8003c5a:	f107 031c 	add.w	r3, r7, #28
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4850      	ldr	r0, [pc, #320]	; (8003da4 <HAL_TIM_MspPostInit+0x1a0>)
 8003c62:	f003 fdeb 	bl	800783c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003c66:	e094      	b.n	8003d92 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c70:	d120      	bne.n	8003cb4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c72:	4b4b      	ldr	r3, [pc, #300]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c78:	4a49      	ldr	r2, [pc, #292]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003c7a:	f043 0302 	orr.w	r3, r3, #2
 8003c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c82:	4b47      	ldr	r3, [pc, #284]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8003c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c96:	2302      	movs	r3, #2
 8003c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8003ca6:	f107 031c 	add.w	r3, r7, #28
 8003caa:	4619      	mov	r1, r3
 8003cac:	483e      	ldr	r0, [pc, #248]	; (8003da8 <HAL_TIM_MspPostInit+0x1a4>)
 8003cae:	f003 fdc5 	bl	800783c <HAL_GPIO_Init>
}
 8003cb2:	e06e      	b.n	8003d92 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a3c      	ldr	r2, [pc, #240]	; (8003dac <HAL_TIM_MspPostInit+0x1a8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d11f      	bne.n	8003cfe <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cbe:	4b38      	ldr	r3, [pc, #224]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cc4:	4a36      	ldr	r2, [pc, #216]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cce:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8003cdc:	2340      	movs	r3, #64	; 0x40
 8003cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cec:	2302      	movs	r3, #2
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8003cf0:	f107 031c 	add.w	r3, r7, #28
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	482e      	ldr	r0, [pc, #184]	; (8003db0 <HAL_TIM_MspPostInit+0x1ac>)
 8003cf8:	f003 fda0 	bl	800783c <HAL_GPIO_Init>
}
 8003cfc:	e049      	b.n	8003d92 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a2c      	ldr	r2, [pc, #176]	; (8003db4 <HAL_TIM_MspPostInit+0x1b0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d120      	bne.n	8003d4a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d08:	4b25      	ldr	r3, [pc, #148]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d0e:	4a24      	ldr	r2, [pc, #144]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003d10:	f043 0302 	orr.w	r3, r3, #2
 8003d14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d18:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8003d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d34:	2300      	movs	r3, #0
 8003d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8003d3c:	f107 031c 	add.w	r3, r7, #28
 8003d40:	4619      	mov	r1, r3
 8003d42:	4819      	ldr	r0, [pc, #100]	; (8003da8 <HAL_TIM_MspPostInit+0x1a4>)
 8003d44:	f003 fd7a 	bl	800783c <HAL_GPIO_Init>
}
 8003d48:	e023      	b.n	8003d92 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1a      	ldr	r2, [pc, #104]	; (8003db8 <HAL_TIM_MspPostInit+0x1b4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d11e      	bne.n	8003d92 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d5a:	4a11      	ldr	r2, [pc, #68]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003d5c:	f043 0310 	orr.w	r3, r3, #16
 8003d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_TIM_MspPostInit+0x19c>)
 8003d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8003d72:	2340      	movs	r3, #64	; 0x40
 8003d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d76:	2302      	movs	r3, #2
 8003d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003d82:	2304      	movs	r3, #4
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8003d86:	f107 031c 	add.w	r3, r7, #28
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4805      	ldr	r0, [pc, #20]	; (8003da4 <HAL_TIM_MspPostInit+0x1a0>)
 8003d8e:	f003 fd55 	bl	800783c <HAL_GPIO_Init>
}
 8003d92:	bf00      	nop
 8003d94:	3730      	adds	r7, #48	; 0x30
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40010000 	.word	0x40010000
 8003da0:	58024400 	.word	0x58024400
 8003da4:	58021000 	.word	0x58021000
 8003da8:	58020400 	.word	0x58020400
 8003dac:	40000400 	.word	0x40000400
 8003db0:	58020000 	.word	0x58020000
 8003db4:	40000800 	.word	0x40000800
 8003db8:	40014000 	.word	0x40014000

08003dbc <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003dc0:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003dc2:	4a26      	ldr	r2, [pc, #152]	; (8003e5c <MX_UART4_Init+0xa0>)
 8003dc4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8003dc6:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003dc8:	4a25      	ldr	r2, [pc, #148]	; (8003e60 <MX_UART4_Init+0xa4>)
 8003dca:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003dcc:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003dd2:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003dd8:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003dde:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003de0:	220c      	movs	r2, #12
 8003de2:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003de4:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003df6:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003dfc:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003dfe:	2208      	movs	r2, #8
 8003e00:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003e02:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003e04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003e0a:	4813      	ldr	r0, [pc, #76]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003e0c:	f007 fe60 	bl	800bad0 <HAL_UART_Init>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8003e16:	f7fe fd6f 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003e1a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8003e1e:	480e      	ldr	r0, [pc, #56]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003e20:	f009 fee7 	bl	800dbf2 <HAL_UARTEx_SetTxFifoThreshold>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8003e2a:	f7fe fd65 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003e2e:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8003e32:	4809      	ldr	r0, [pc, #36]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003e34:	f009 ff1b 	bl	800dc6e <HAL_UARTEx_SetRxFifoThreshold>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8003e3e:	f7fe fd5b 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8003e42:	4805      	ldr	r0, [pc, #20]	; (8003e58 <MX_UART4_Init+0x9c>)
 8003e44:	f009 fe61 	bl	800db0a <HAL_UARTEx_EnableFifoMode>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8003e4e:	f7fe fd53 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	24000bfc 	.word	0x24000bfc
 8003e5c:	40004c00 	.word	0x40004c00
 8003e60:	001e8480 	.word	0x001e8480

08003e64 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003e68:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003e6a:	4a24      	ldr	r2, [pc, #144]	; (8003efc <MX_UART7_Init+0x98>)
 8003e6c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8003e6e:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e74:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003e76:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003e82:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003e88:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003e8a:	220c      	movs	r2, #12
 8003e8c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e94:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e9a:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ea0:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003eac:	4812      	ldr	r0, [pc, #72]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003eae:	f007 fe0f 	bl	800bad0 <HAL_UART_Init>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8003eb8:	f7fe fd1e 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003ebc:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8003ec0:	480d      	ldr	r0, [pc, #52]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003ec2:	f009 fe96 	bl	800dbf2 <HAL_UARTEx_SetTxFifoThreshold>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8003ecc:	f7fe fd14 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003ed0:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8003ed4:	4808      	ldr	r0, [pc, #32]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003ed6:	f009 feca 	bl	800dc6e <HAL_UARTEx_SetRxFifoThreshold>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8003ee0:	f7fe fd0a 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8003ee4:	4804      	ldr	r0, [pc, #16]	; (8003ef8 <MX_UART7_Init+0x94>)
 8003ee6:	f009 fe10 	bl	800db0a <HAL_UARTEx_EnableFifoMode>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8003ef0:	f7fe fd02 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	24000974 	.word	0x24000974
 8003efc:	40007800 	.word	0x40007800

08003f00 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003f04:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f06:	4a23      	ldr	r2, [pc, #140]	; (8003f94 <MX_USART3_UART_Init+0x94>)
 8003f08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003f0a:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003f12:	4b1f      	ldr	r3, [pc, #124]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003f18:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003f1e:	4b1c      	ldr	r3, [pc, #112]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003f24:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f26:	220c      	movs	r2, #12
 8003f28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f2a:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f30:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f36:	4b16      	ldr	r3, [pc, #88]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f3c:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f42:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f48:	4811      	ldr	r0, [pc, #68]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f4a:	f007 fdc1 	bl	800bad0 <HAL_UART_Init>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003f54:	f7fe fcd0 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f58:	2100      	movs	r1, #0
 8003f5a:	480d      	ldr	r0, [pc, #52]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f5c:	f009 fe49 	bl	800dbf2 <HAL_UARTEx_SetTxFifoThreshold>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003f66:	f7fe fcc7 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4808      	ldr	r0, [pc, #32]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f6e:	f009 fe7e 	bl	800dc6e <HAL_UARTEx_SetRxFifoThreshold>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003f78:	f7fe fcbe 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003f7c:	4804      	ldr	r0, [pc, #16]	; (8003f90 <MX_USART3_UART_Init+0x90>)
 8003f7e:	f009 fdff 	bl	800db80 <HAL_UARTEx_DisableFifoMode>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003f88:	f7fe fcb6 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003f8c:	bf00      	nop
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	24000a7c 	.word	0x24000a7c
 8003f94:	40004800 	.word	0x40004800

08003f98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b0bc      	sub	sp, #240	; 0xf0
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	60da      	str	r2, [r3, #12]
 8003fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fb0:	f107 0320 	add.w	r3, r7, #32
 8003fb4:	22bc      	movs	r2, #188	; 0xbc
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f00a fae5 	bl	800e588 <memset>
  if(uartHandle->Instance==UART4)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4aa1      	ldr	r2, [pc, #644]	; (8004248 <HAL_UART_MspInit+0x2b0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	f040 80b7 	bne.w	8004138 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fd4:	f107 0320 	add.w	r3, r7, #32
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f004 fe05 	bl	8008be8 <HAL_RCCEx_PeriphCLKConfig>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003fe4:	f7fe fc88 	bl	80028f8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003fe8:	4b98      	ldr	r3, [pc, #608]	; (800424c <HAL_UART_MspInit+0x2b4>)
 8003fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fee:	4a97      	ldr	r2, [pc, #604]	; (800424c <HAL_UART_MspInit+0x2b4>)
 8003ff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ff4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ff8:	4b94      	ldr	r3, [pc, #592]	; (800424c <HAL_UART_MspInit+0x2b4>)
 8003ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004006:	4b91      	ldr	r3, [pc, #580]	; (800424c <HAL_UART_MspInit+0x2b4>)
 8004008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800400c:	4a8f      	ldr	r2, [pc, #572]	; (800424c <HAL_UART_MspInit+0x2b4>)
 800400e:	f043 0308 	orr.w	r3, r3, #8
 8004012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004016:	4b8d      	ldr	r3, [pc, #564]	; (800424c <HAL_UART_MspInit+0x2b4>)
 8004018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004024:	2303      	movs	r3, #3
 8004026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402a:	2302      	movs	r3, #2
 800402c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800403c:	2308      	movs	r3, #8
 800403e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004042:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004046:	4619      	mov	r1, r3
 8004048:	4881      	ldr	r0, [pc, #516]	; (8004250 <HAL_UART_MspInit+0x2b8>)
 800404a:	f003 fbf7 	bl	800783c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 800404e:	4b81      	ldr	r3, [pc, #516]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 8004050:	4a81      	ldr	r2, [pc, #516]	; (8004258 <HAL_UART_MspInit+0x2c0>)
 8004052:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8004054:	4b7f      	ldr	r3, [pc, #508]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 8004056:	223f      	movs	r2, #63	; 0x3f
 8004058:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800405a:	4b7e      	ldr	r3, [pc, #504]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 800405c:	2200      	movs	r2, #0
 800405e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004060:	4b7c      	ldr	r3, [pc, #496]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 8004062:	2200      	movs	r2, #0
 8004064:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004066:	4b7b      	ldr	r3, [pc, #492]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 8004068:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800406c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800406e:	4b79      	ldr	r3, [pc, #484]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 8004070:	2200      	movs	r2, #0
 8004072:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004074:	4b77      	ldr	r3, [pc, #476]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 8004076:	2200      	movs	r2, #0
 8004078:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800407a:	4b76      	ldr	r3, [pc, #472]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 800407c:	2200      	movs	r2, #0
 800407e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004080:	4b74      	ldr	r3, [pc, #464]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 8004082:	2200      	movs	r2, #0
 8004084:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004086:	4b73      	ldr	r3, [pc, #460]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 8004088:	2204      	movs	r2, #4
 800408a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800408c:	4b71      	ldr	r3, [pc, #452]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 800408e:	2203      	movs	r2, #3
 8004090:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004092:	4b70      	ldr	r3, [pc, #448]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 8004094:	2200      	movs	r2, #0
 8004096:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004098:	4b6e      	ldr	r3, [pc, #440]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800409e:	486d      	ldr	r0, [pc, #436]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 80040a0:	f000 fd92 	bl	8004bc8 <HAL_DMA_Init>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80040aa:	f7fe fc25 	bl	80028f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a68      	ldr	r2, [pc, #416]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 80040b2:	67da      	str	r2, [r3, #124]	; 0x7c
 80040b4:	4a67      	ldr	r2, [pc, #412]	; (8004254 <HAL_UART_MspInit+0x2bc>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80040ba:	4b68      	ldr	r3, [pc, #416]	; (800425c <HAL_UART_MspInit+0x2c4>)
 80040bc:	4a68      	ldr	r2, [pc, #416]	; (8004260 <HAL_UART_MspInit+0x2c8>)
 80040be:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80040c0:	4b66      	ldr	r3, [pc, #408]	; (800425c <HAL_UART_MspInit+0x2c4>)
 80040c2:	2240      	movs	r2, #64	; 0x40
 80040c4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040c6:	4b65      	ldr	r3, [pc, #404]	; (800425c <HAL_UART_MspInit+0x2c4>)
 80040c8:	2240      	movs	r2, #64	; 0x40
 80040ca:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040cc:	4b63      	ldr	r3, [pc, #396]	; (800425c <HAL_UART_MspInit+0x2c4>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040d2:	4b62      	ldr	r3, [pc, #392]	; (800425c <HAL_UART_MspInit+0x2c4>)
 80040d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040d8:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040da:	4b60      	ldr	r3, [pc, #384]	; (800425c <HAL_UART_MspInit+0x2c4>)
 80040dc:	2200      	movs	r2, #0
 80040de:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040e0:	4b5e      	ldr	r3, [pc, #376]	; (800425c <HAL_UART_MspInit+0x2c4>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80040e6:	4b5d      	ldr	r3, [pc, #372]	; (800425c <HAL_UART_MspInit+0x2c4>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80040ec:	4b5b      	ldr	r3, [pc, #364]	; (800425c <HAL_UART_MspInit+0x2c4>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80040f2:	4b5a      	ldr	r3, [pc, #360]	; (800425c <HAL_UART_MspInit+0x2c4>)
 80040f4:	2204      	movs	r2, #4
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80040f8:	4b58      	ldr	r3, [pc, #352]	; (800425c <HAL_UART_MspInit+0x2c4>)
 80040fa:	2203      	movs	r2, #3
 80040fc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80040fe:	4b57      	ldr	r3, [pc, #348]	; (800425c <HAL_UART_MspInit+0x2c4>)
 8004100:	2200      	movs	r2, #0
 8004102:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004104:	4b55      	ldr	r3, [pc, #340]	; (800425c <HAL_UART_MspInit+0x2c4>)
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800410a:	4854      	ldr	r0, [pc, #336]	; (800425c <HAL_UART_MspInit+0x2c4>)
 800410c:	f000 fd5c 	bl	8004bc8 <HAL_DMA_Init>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8004116:	f7fe fbef 	bl	80028f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a4f      	ldr	r2, [pc, #316]	; (800425c <HAL_UART_MspInit+0x2c4>)
 800411e:	679a      	str	r2, [r3, #120]	; 0x78
 8004120:	4a4e      	ldr	r2, [pc, #312]	; (800425c <HAL_UART_MspInit+0x2c4>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004126:	2200      	movs	r2, #0
 8004128:	2100      	movs	r1, #0
 800412a:	2034      	movs	r0, #52	; 0x34
 800412c:	f000 fb0d 	bl	800474a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004130:	2034      	movs	r0, #52	; 0x34
 8004132:	f000 fb24 	bl	800477e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004136:	e153      	b.n	80043e0 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a49      	ldr	r2, [pc, #292]	; (8004264 <HAL_UART_MspInit+0x2cc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	f040 8098 	bne.w	8004274 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004144:	2302      	movs	r3, #2
 8004146:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004148:	2300      	movs	r3, #0
 800414a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800414e:	f107 0320 	add.w	r3, r7, #32
 8004152:	4618      	mov	r0, r3
 8004154:	f004 fd48 	bl	8008be8 <HAL_RCCEx_PeriphCLKConfig>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 800415e:	f7fe fbcb 	bl	80028f8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004162:	4b3a      	ldr	r3, [pc, #232]	; (800424c <HAL_UART_MspInit+0x2b4>)
 8004164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004168:	4a38      	ldr	r2, [pc, #224]	; (800424c <HAL_UART_MspInit+0x2b4>)
 800416a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800416e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004172:	4b36      	ldr	r3, [pc, #216]	; (800424c <HAL_UART_MspInit+0x2b4>)
 8004174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004178:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004180:	4b32      	ldr	r3, [pc, #200]	; (800424c <HAL_UART_MspInit+0x2b4>)
 8004182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004186:	4a31      	ldr	r2, [pc, #196]	; (800424c <HAL_UART_MspInit+0x2b4>)
 8004188:	f043 0310 	orr.w	r3, r3, #16
 800418c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004190:	4b2e      	ldr	r3, [pc, #184]	; (800424c <HAL_UART_MspInit+0x2b4>)
 8004192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800419e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80041a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a6:	2302      	movs	r3, #2
 80041a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80041b8:	2307      	movs	r3, #7
 80041ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80041c2:	4619      	mov	r1, r3
 80041c4:	4828      	ldr	r0, [pc, #160]	; (8004268 <HAL_UART_MspInit+0x2d0>)
 80041c6:	f003 fb39 	bl	800783c <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 80041ca:	4b28      	ldr	r3, [pc, #160]	; (800426c <HAL_UART_MspInit+0x2d4>)
 80041cc:	4a28      	ldr	r2, [pc, #160]	; (8004270 <HAL_UART_MspInit+0x2d8>)
 80041ce:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80041d0:	4b26      	ldr	r3, [pc, #152]	; (800426c <HAL_UART_MspInit+0x2d4>)
 80041d2:	2250      	movs	r2, #80	; 0x50
 80041d4:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041d6:	4b25      	ldr	r3, [pc, #148]	; (800426c <HAL_UART_MspInit+0x2d4>)
 80041d8:	2240      	movs	r2, #64	; 0x40
 80041da:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041dc:	4b23      	ldr	r3, [pc, #140]	; (800426c <HAL_UART_MspInit+0x2d4>)
 80041de:	2200      	movs	r2, #0
 80041e0:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041e2:	4b22      	ldr	r3, [pc, #136]	; (800426c <HAL_UART_MspInit+0x2d4>)
 80041e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041e8:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ea:	4b20      	ldr	r3, [pc, #128]	; (800426c <HAL_UART_MspInit+0x2d4>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041f0:	4b1e      	ldr	r3, [pc, #120]	; (800426c <HAL_UART_MspInit+0x2d4>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_UART_MspInit+0x2d4>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80041fc:	4b1b      	ldr	r3, [pc, #108]	; (800426c <HAL_UART_MspInit+0x2d4>)
 80041fe:	2200      	movs	r2, #0
 8004200:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004202:	4b1a      	ldr	r3, [pc, #104]	; (800426c <HAL_UART_MspInit+0x2d4>)
 8004204:	2204      	movs	r2, #4
 8004206:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004208:	4b18      	ldr	r3, [pc, #96]	; (800426c <HAL_UART_MspInit+0x2d4>)
 800420a:	2203      	movs	r2, #3
 800420c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800420e:	4b17      	ldr	r3, [pc, #92]	; (800426c <HAL_UART_MspInit+0x2d4>)
 8004210:	2200      	movs	r2, #0
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004214:	4b15      	ldr	r3, [pc, #84]	; (800426c <HAL_UART_MspInit+0x2d4>)
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800421a:	4814      	ldr	r0, [pc, #80]	; (800426c <HAL_UART_MspInit+0x2d4>)
 800421c:	f000 fcd4 	bl	8004bc8 <HAL_DMA_Init>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_UART_MspInit+0x292>
      Error_Handler();
 8004226:	f7fe fb67 	bl	80028f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a0f      	ldr	r2, [pc, #60]	; (800426c <HAL_UART_MspInit+0x2d4>)
 800422e:	679a      	str	r2, [r3, #120]	; 0x78
 8004230:	4a0e      	ldr	r2, [pc, #56]	; (800426c <HAL_UART_MspInit+0x2d4>)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8004236:	2200      	movs	r2, #0
 8004238:	2100      	movs	r1, #0
 800423a:	2052      	movs	r0, #82	; 0x52
 800423c:	f000 fa85 	bl	800474a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004240:	2052      	movs	r0, #82	; 0x52
 8004242:	f000 fa9c 	bl	800477e <HAL_NVIC_EnableIRQ>
}
 8004246:	e0cb      	b.n	80043e0 <HAL_UART_MspInit+0x448>
 8004248:	40004c00 	.word	0x40004c00
 800424c:	58024400 	.word	0x58024400
 8004250:	58020c00 	.word	0x58020c00
 8004254:	240008fc 	.word	0x240008fc
 8004258:	40020058 	.word	0x40020058
 800425c:	24000c8c 	.word	0x24000c8c
 8004260:	40020070 	.word	0x40020070
 8004264:	40007800 	.word	0x40007800
 8004268:	58021000 	.word	0x58021000
 800426c:	24000b84 	.word	0x24000b84
 8004270:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a5b      	ldr	r2, [pc, #364]	; (80043e8 <HAL_UART_MspInit+0x450>)
 800427a:	4293      	cmp	r3, r2
 800427c:	f040 80b0 	bne.w	80043e0 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004280:	2302      	movs	r3, #2
 8004282:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800428a:	f107 0320 	add.w	r3, r7, #32
 800428e:	4618      	mov	r0, r3
 8004290:	f004 fcaa 	bl	8008be8 <HAL_RCCEx_PeriphCLKConfig>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_UART_MspInit+0x306>
      Error_Handler();
 800429a:	f7fe fb2d 	bl	80028f8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800429e:	4b53      	ldr	r3, [pc, #332]	; (80043ec <HAL_UART_MspInit+0x454>)
 80042a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042a4:	4a51      	ldr	r2, [pc, #324]	; (80043ec <HAL_UART_MspInit+0x454>)
 80042a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042ae:	4b4f      	ldr	r3, [pc, #316]	; (80043ec <HAL_UART_MspInit+0x454>)
 80042b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042bc:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <HAL_UART_MspInit+0x454>)
 80042be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042c2:	4a4a      	ldr	r2, [pc, #296]	; (80043ec <HAL_UART_MspInit+0x454>)
 80042c4:	f043 0308 	orr.w	r3, r3, #8
 80042c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042cc:	4b47      	ldr	r3, [pc, #284]	; (80043ec <HAL_UART_MspInit+0x454>)
 80042ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e2:	2302      	movs	r3, #2
 80042e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80042f4:	2307      	movs	r3, #7
 80042f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80042fe:	4619      	mov	r1, r3
 8004300:	483b      	ldr	r0, [pc, #236]	; (80043f0 <HAL_UART_MspInit+0x458>)
 8004302:	f003 fa9b 	bl	800783c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004306:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_UART_MspInit+0x45c>)
 8004308:	4a3b      	ldr	r2, [pc, #236]	; (80043f8 <HAL_UART_MspInit+0x460>)
 800430a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800430c:	4b39      	ldr	r3, [pc, #228]	; (80043f4 <HAL_UART_MspInit+0x45c>)
 800430e:	222d      	movs	r2, #45	; 0x2d
 8004310:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004312:	4b38      	ldr	r3, [pc, #224]	; (80043f4 <HAL_UART_MspInit+0x45c>)
 8004314:	2200      	movs	r2, #0
 8004316:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004318:	4b36      	ldr	r3, [pc, #216]	; (80043f4 <HAL_UART_MspInit+0x45c>)
 800431a:	2200      	movs	r2, #0
 800431c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800431e:	4b35      	ldr	r3, [pc, #212]	; (80043f4 <HAL_UART_MspInit+0x45c>)
 8004320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004324:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004326:	4b33      	ldr	r3, [pc, #204]	; (80043f4 <HAL_UART_MspInit+0x45c>)
 8004328:	2200      	movs	r2, #0
 800432a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800432c:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <HAL_UART_MspInit+0x45c>)
 800432e:	2200      	movs	r2, #0
 8004330:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004332:	4b30      	ldr	r3, [pc, #192]	; (80043f4 <HAL_UART_MspInit+0x45c>)
 8004334:	2200      	movs	r2, #0
 8004336:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004338:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <HAL_UART_MspInit+0x45c>)
 800433a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800433e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004340:	4b2c      	ldr	r3, [pc, #176]	; (80043f4 <HAL_UART_MspInit+0x45c>)
 8004342:	2200      	movs	r2, #0
 8004344:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004346:	482b      	ldr	r0, [pc, #172]	; (80043f4 <HAL_UART_MspInit+0x45c>)
 8004348:	f000 fc3e 	bl	8004bc8 <HAL_DMA_Init>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_UART_MspInit+0x3be>
      Error_Handler();
 8004352:	f7fe fad1 	bl	80028f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <HAL_UART_MspInit+0x45c>)
 800435a:	67da      	str	r2, [r3, #124]	; 0x7c
 800435c:	4a25      	ldr	r2, [pc, #148]	; (80043f4 <HAL_UART_MspInit+0x45c>)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8004362:	4b26      	ldr	r3, [pc, #152]	; (80043fc <HAL_UART_MspInit+0x464>)
 8004364:	4a26      	ldr	r2, [pc, #152]	; (8004400 <HAL_UART_MspInit+0x468>)
 8004366:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004368:	4b24      	ldr	r3, [pc, #144]	; (80043fc <HAL_UART_MspInit+0x464>)
 800436a:	222e      	movs	r2, #46	; 0x2e
 800436c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800436e:	4b23      	ldr	r3, [pc, #140]	; (80043fc <HAL_UART_MspInit+0x464>)
 8004370:	2240      	movs	r2, #64	; 0x40
 8004372:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004374:	4b21      	ldr	r3, [pc, #132]	; (80043fc <HAL_UART_MspInit+0x464>)
 8004376:	2200      	movs	r2, #0
 8004378:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_UART_MspInit+0x464>)
 800437c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004380:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004382:	4b1e      	ldr	r3, [pc, #120]	; (80043fc <HAL_UART_MspInit+0x464>)
 8004384:	2200      	movs	r2, #0
 8004386:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004388:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <HAL_UART_MspInit+0x464>)
 800438a:	2200      	movs	r2, #0
 800438c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800438e:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_UART_MspInit+0x464>)
 8004390:	2200      	movs	r2, #0
 8004392:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004394:	4b19      	ldr	r3, [pc, #100]	; (80043fc <HAL_UART_MspInit+0x464>)
 8004396:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800439a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800439c:	4b17      	ldr	r3, [pc, #92]	; (80043fc <HAL_UART_MspInit+0x464>)
 800439e:	2204      	movs	r2, #4
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80043a2:	4b16      	ldr	r3, [pc, #88]	; (80043fc <HAL_UART_MspInit+0x464>)
 80043a4:	2203      	movs	r2, #3
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80043a8:	4b14      	ldr	r3, [pc, #80]	; (80043fc <HAL_UART_MspInit+0x464>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80043ae:	4b13      	ldr	r3, [pc, #76]	; (80043fc <HAL_UART_MspInit+0x464>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80043b4:	4811      	ldr	r0, [pc, #68]	; (80043fc <HAL_UART_MspInit+0x464>)
 80043b6:	f000 fc07 	bl	8004bc8 <HAL_DMA_Init>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 80043c0:	f7fe fa9a 	bl	80028f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a0d      	ldr	r2, [pc, #52]	; (80043fc <HAL_UART_MspInit+0x464>)
 80043c8:	679a      	str	r2, [r3, #120]	; 0x78
 80043ca:	4a0c      	ldr	r2, [pc, #48]	; (80043fc <HAL_UART_MspInit+0x464>)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80043d0:	2200      	movs	r2, #0
 80043d2:	2100      	movs	r1, #0
 80043d4:	2027      	movs	r0, #39	; 0x27
 80043d6:	f000 f9b8 	bl	800474a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80043da:	2027      	movs	r0, #39	; 0x27
 80043dc:	f000 f9cf 	bl	800477e <HAL_NVIC_EnableIRQ>
}
 80043e0:	bf00      	nop
 80043e2:	37f0      	adds	r7, #240	; 0xf0
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40004800 	.word	0x40004800
 80043ec:	58024400 	.word	0x58024400
 80043f0:	58020c00 	.word	0x58020c00
 80043f4:	24000a04 	.word	0x24000a04
 80043f8:	40020028 	.word	0x40020028
 80043fc:	24000b0c 	.word	0x24000b0c
 8004400:	40020040 	.word	0x40020040

08004404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack      /* set stack pointer */
 8004404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800443c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004408:	f7fe fe46 	bl	8003098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800440c:	480c      	ldr	r0, [pc, #48]	; (8004440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800440e:	490d      	ldr	r1, [pc, #52]	; (8004444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004410:	4a0d      	ldr	r2, [pc, #52]	; (8004448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004414:	e002      	b.n	800441c <LoopCopyDataInit>

08004416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800441a:	3304      	adds	r3, #4

0800441c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800441c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800441e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004420:	d3f9      	bcc.n	8004416 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004422:	4a0a      	ldr	r2, [pc, #40]	; (800444c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004424:	4c0a      	ldr	r4, [pc, #40]	; (8004450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004428:	e001      	b.n	800442e <LoopFillZerobss>

0800442a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800442a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800442c:	3204      	adds	r2, #4

0800442e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800442e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004430:	d3fb      	bcc.n	800442a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004432:	f00a f877 	bl	800e524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004436:	f7fe f84b 	bl	80024d0 <main>
  bx  lr
 800443a:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 800443c:	24001318 	.word	0x24001318
  ldr r0, =_sdata
 8004440:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004444:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8004448:	08012b14 	.word	0x08012b14
  ldr r2, =_sbss
 800444c:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 8004450:	24000d18 	.word	0x24000d18

08004454 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004454:	e7fe      	b.n	8004454 <ADC3_IRQHandler>
	...

08004458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800445e:	2003      	movs	r0, #3
 8004460:	f000 f968 	bl	8004734 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004464:	f004 f9ea 	bl	800883c <HAL_RCC_GetSysClockFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <HAL_Init+0x68>)
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	4913      	ldr	r1, [pc, #76]	; (80044c4 <HAL_Init+0x6c>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
 8004480:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004482:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <HAL_Init+0x68>)
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	4a0e      	ldr	r2, [pc, #56]	; (80044c4 <HAL_Init+0x6c>)
 800448c:	5cd3      	ldrb	r3, [r2, r3]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	4a0b      	ldr	r2, [pc, #44]	; (80044c8 <HAL_Init+0x70>)
 800449a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800449c:	4a0b      	ldr	r2, [pc, #44]	; (80044cc <HAL_Init+0x74>)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044a2:	2000      	movs	r0, #0
 80044a4:	f000 f814 	bl	80044d0 <HAL_InitTick>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e002      	b.n	80044b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80044b2:	f7fe fc3b 	bl	8002d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	58024400 	.word	0x58024400
 80044c4:	08010e1c 	.word	0x08010e1c
 80044c8:	24000018 	.word	0x24000018
 80044cc:	24000014 	.word	0x24000014

080044d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <HAL_InitTick+0x60>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e021      	b.n	8004528 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80044e4:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HAL_InitTick+0x64>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <HAL_InitTick+0x60>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	4619      	mov	r1, r3
 80044ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f94d 	bl	800479a <HAL_SYSTICK_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e00e      	b.n	8004528 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b0f      	cmp	r3, #15
 800450e:	d80a      	bhi.n	8004526 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004510:	2200      	movs	r2, #0
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	f04f 30ff 	mov.w	r0, #4294967295
 8004518:	f000 f917 	bl	800474a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800451c:	4a06      	ldr	r2, [pc, #24]	; (8004538 <HAL_InitTick+0x68>)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e000      	b.n	8004528 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	24000020 	.word	0x24000020
 8004534:	24000014 	.word	0x24000014
 8004538:	2400001c 	.word	0x2400001c

0800453c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_IncTick+0x20>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_IncTick+0x24>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4413      	add	r3, r2
 800454c:	4a04      	ldr	r2, [pc, #16]	; (8004560 <HAL_IncTick+0x24>)
 800454e:	6013      	str	r3, [r2, #0]
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	24000020 	.word	0x24000020
 8004560:	24000d04 	.word	0x24000d04

08004564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return uwTick;
 8004568:	4b03      	ldr	r3, [pc, #12]	; (8004578 <HAL_GetTick+0x14>)
 800456a:	681b      	ldr	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	24000d04 	.word	0x24000d04

0800457c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <HAL_GetREVID+0x14>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	0c1b      	lsrs	r3, r3, #16
}
 8004586:	4618      	mov	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	5c001000 	.word	0x5c001000

08004594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <__NVIC_SetPriorityGrouping+0x40>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045b0:	4013      	ands	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <__NVIC_SetPriorityGrouping+0x44>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045c2:	4a04      	ldr	r2, [pc, #16]	; (80045d4 <__NVIC_SetPriorityGrouping+0x40>)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	60d3      	str	r3, [r2, #12]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	e000ed00 	.word	0xe000ed00
 80045d8:	05fa0000 	.word	0x05fa0000

080045dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <__NVIC_GetPriorityGrouping+0x18>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	f003 0307 	and.w	r3, r3, #7
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	e000ed00 	.word	0xe000ed00

080045f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004606:	2b00      	cmp	r3, #0
 8004608:	db0b      	blt.n	8004622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	f003 021f 	and.w	r2, r3, #31
 8004610:	4907      	ldr	r1, [pc, #28]	; (8004630 <__NVIC_EnableIRQ+0x38>)
 8004612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	2001      	movs	r0, #1
 800461a:	fa00 f202 	lsl.w	r2, r0, r2
 800461e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	e000e100 	.word	0xe000e100

08004634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	6039      	str	r1, [r7, #0]
 800463e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004644:	2b00      	cmp	r3, #0
 8004646:	db0a      	blt.n	800465e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	b2da      	uxtb	r2, r3
 800464c:	490c      	ldr	r1, [pc, #48]	; (8004680 <__NVIC_SetPriority+0x4c>)
 800464e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004652:	0112      	lsls	r2, r2, #4
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	440b      	add	r3, r1
 8004658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800465c:	e00a      	b.n	8004674 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	4908      	ldr	r1, [pc, #32]	; (8004684 <__NVIC_SetPriority+0x50>)
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	3b04      	subs	r3, #4
 800466c:	0112      	lsls	r2, r2, #4
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	440b      	add	r3, r1
 8004672:	761a      	strb	r2, [r3, #24]
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	e000e100 	.word	0xe000e100
 8004684:	e000ed00 	.word	0xe000ed00

08004688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004688:	b480      	push	{r7}
 800468a:	b089      	sub	sp, #36	; 0x24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f1c3 0307 	rsb	r3, r3, #7
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	bf28      	it	cs
 80046a6:	2304      	movcs	r3, #4
 80046a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3304      	adds	r3, #4
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d902      	bls.n	80046b8 <NVIC_EncodePriority+0x30>
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	3b03      	subs	r3, #3
 80046b6:	e000      	b.n	80046ba <NVIC_EncodePriority+0x32>
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046bc:	f04f 32ff 	mov.w	r2, #4294967295
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43da      	mvns	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	401a      	ands	r2, r3
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046d0:	f04f 31ff 	mov.w	r1, #4294967295
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	fa01 f303 	lsl.w	r3, r1, r3
 80046da:	43d9      	mvns	r1, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e0:	4313      	orrs	r3, r2
         );
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3724      	adds	r7, #36	; 0x24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004700:	d301      	bcc.n	8004706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004702:	2301      	movs	r3, #1
 8004704:	e00f      	b.n	8004726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004706:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <SysTick_Config+0x40>)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3b01      	subs	r3, #1
 800470c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800470e:	210f      	movs	r1, #15
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
 8004714:	f7ff ff8e 	bl	8004634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <SysTick_Config+0x40>)
 800471a:	2200      	movs	r2, #0
 800471c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800471e:	4b04      	ldr	r3, [pc, #16]	; (8004730 <SysTick_Config+0x40>)
 8004720:	2207      	movs	r2, #7
 8004722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	e000e010 	.word	0xe000e010

08004734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff ff29 	bl	8004594 <__NVIC_SetPriorityGrouping>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b086      	sub	sp, #24
 800474e:	af00      	add	r7, sp, #0
 8004750:	4603      	mov	r3, r0
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004758:	f7ff ff40 	bl	80045dc <__NVIC_GetPriorityGrouping>
 800475c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	6978      	ldr	r0, [r7, #20]
 8004764:	f7ff ff90 	bl	8004688 <NVIC_EncodePriority>
 8004768:	4602      	mov	r2, r0
 800476a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800476e:	4611      	mov	r1, r2
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff ff5f 	bl	8004634 <__NVIC_SetPriority>
}
 8004776:	bf00      	nop
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	4603      	mov	r3, r0
 8004786:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004788:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff ff33 	bl	80045f8 <__NVIC_EnableIRQ>
}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff ffa4 	bl	80046f0 <SysTick_Config>
 80047a8:	4603      	mov	r3, r0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80047b6:	f000 f802 	bl	80047be <HAL_SYSTICK_Callback>
}
 80047ba:	bf00      	nop
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80047be:	b480      	push	{r7}
 80047c0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e054      	b.n	8004888 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	7f5b      	ldrb	r3, [r3, #29]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d105      	bne.n	80047f4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc fbbc 	bl	8000f6c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	791b      	ldrb	r3, [r3, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10c      	bne.n	800481c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a22      	ldr	r2, [pc, #136]	; (8004890 <HAL_CRC_Init+0xc4>)
 8004808:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0218 	bic.w	r2, r2, #24
 8004818:	609a      	str	r2, [r3, #8]
 800481a:	e00c      	b.n	8004836 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6899      	ldr	r1, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	461a      	mov	r2, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f948 	bl	8004abc <HAL_CRCEx_Polynomial_Set>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e028      	b.n	8004888 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	795b      	ldrb	r3, [r3, #5]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d105      	bne.n	800484a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f04f 32ff 	mov.w	r2, #4294967295
 8004846:	611a      	str	r2, [r3, #16]
 8004848:	e004      	b.n	8004854 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6912      	ldr	r2, [r2, #16]
 8004852:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	04c11db7 	.word	0x04c11db7

08004894 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80048a0:	2300      	movs	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2202      	movs	r2, #2
 80048a8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d006      	beq.n	80048d0 <HAL_CRC_Calculate+0x3c>
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d829      	bhi.n	800491a <HAL_CRC_Calculate+0x86>
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d019      	beq.n	80048fe <HAL_CRC_Calculate+0x6a>
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d01e      	beq.n	800490c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80048ce:	e024      	b.n	800491a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	e00a      	b.n	80048ec <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	441a      	add	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	3301      	adds	r3, #1
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d3f0      	bcc.n	80048d6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	613b      	str	r3, [r7, #16]
      break;
 80048fc:	e00e      	b.n	800491c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68b9      	ldr	r1, [r7, #8]
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f812 	bl	800492c <CRC_Handle_8>
 8004908:	6138      	str	r0, [r7, #16]
      break;
 800490a:	e007      	b.n	800491c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f899 	bl	8004a48 <CRC_Handle_16>
 8004916:	6138      	str	r0, [r7, #16]
      break;
 8004918:	e000      	b.n	800491c <HAL_CRC_Calculate+0x88>
      break;
 800491a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8004922:	693b      	ldr	r3, [r7, #16]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800492c:	b480      	push	{r7}
 800492e:	b089      	sub	sp, #36	; 0x24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004938:	2300      	movs	r3, #0
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	e023      	b.n	8004986 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	4413      	add	r3, r2
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	3301      	adds	r3, #1
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	440b      	add	r3, r1
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004958:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	3302      	adds	r3, #2
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	440b      	add	r3, r1
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004968:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	3303      	adds	r3, #3
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	440b      	add	r3, r1
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800497c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800497e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	3301      	adds	r3, #1
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	089b      	lsrs	r3, r3, #2
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	429a      	cmp	r2, r3
 800498e:	d3d6      	bcc.n	800493e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d04d      	beq.n	8004a36 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d107      	bne.n	80049b4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	4413      	add	r3, r2
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d116      	bne.n	80049ec <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	4413      	add	r3, r2
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	b21a      	sxth	r2, r3
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	3301      	adds	r3, #1
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	440b      	add	r3, r1
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	b21b      	sxth	r3, r3
 80049da:	4313      	orrs	r3, r2
 80049dc:	b21b      	sxth	r3, r3
 80049de:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	8b7a      	ldrh	r2, [r7, #26]
 80049ea:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d11f      	bne.n	8004a36 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	4413      	add	r3, r2
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	b21a      	sxth	r2, r3
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	3301      	adds	r3, #1
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	440b      	add	r3, r1
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	b21b      	sxth	r3, r3
 8004a12:	4313      	orrs	r3, r2
 8004a14:	b21b      	sxth	r3, r3
 8004a16:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	8b7a      	ldrh	r2, [r7, #26]
 8004a22:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	3302      	adds	r3, #2
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3724      	adds	r7, #36	; 0x24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e013      	b.n	8004a82 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	041a      	lsls	r2, r3, #16
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	3302      	adds	r3, #2
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	440b      	add	r3, r1
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	4619      	mov	r1, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d3e6      	bcc.n	8004a5a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881a      	ldrh	r2, [r3, #0]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004acc:	231f      	movs	r3, #31
 8004ace:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004ad0:	bf00      	nop
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1e5a      	subs	r2, r3, #1
 8004ad6:	613a      	str	r2, [r7, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d009      	beq.n	8004af0 <HAL_CRCEx_Polynomial_Set+0x34>
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_CRCEx_Polynomial_Set+0x16>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b18      	cmp	r3, #24
 8004af4:	d846      	bhi.n	8004b84 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <HAL_CRCEx_Polynomial_Set+0x40>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b8b 	.word	0x08004b8b
 8004b00:	08004b85 	.word	0x08004b85
 8004b04:	08004b85 	.word	0x08004b85
 8004b08:	08004b85 	.word	0x08004b85
 8004b0c:	08004b85 	.word	0x08004b85
 8004b10:	08004b85 	.word	0x08004b85
 8004b14:	08004b85 	.word	0x08004b85
 8004b18:	08004b85 	.word	0x08004b85
 8004b1c:	08004b79 	.word	0x08004b79
 8004b20:	08004b85 	.word	0x08004b85
 8004b24:	08004b85 	.word	0x08004b85
 8004b28:	08004b85 	.word	0x08004b85
 8004b2c:	08004b85 	.word	0x08004b85
 8004b30:	08004b85 	.word	0x08004b85
 8004b34:	08004b85 	.word	0x08004b85
 8004b38:	08004b85 	.word	0x08004b85
 8004b3c:	08004b6d 	.word	0x08004b6d
 8004b40:	08004b85 	.word	0x08004b85
 8004b44:	08004b85 	.word	0x08004b85
 8004b48:	08004b85 	.word	0x08004b85
 8004b4c:	08004b85 	.word	0x08004b85
 8004b50:	08004b85 	.word	0x08004b85
 8004b54:	08004b85 	.word	0x08004b85
 8004b58:	08004b85 	.word	0x08004b85
 8004b5c:	08004b61 	.word	0x08004b61
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	2b06      	cmp	r3, #6
 8004b64:	d913      	bls.n	8004b8e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004b6a:	e010      	b.n	8004b8e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	2b07      	cmp	r3, #7
 8004b70:	d90f      	bls.n	8004b92 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004b76:	e00c      	b.n	8004b92 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b0f      	cmp	r3, #15
 8004b7c:	d90b      	bls.n	8004b96 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004b82:	e008      	b.n	8004b96 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	75fb      	strb	r3, [r7, #23]
      break;
 8004b88:	e006      	b.n	8004b98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e004      	b.n	8004b98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b8e:	bf00      	nop
 8004b90:	e002      	b.n	8004b98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b92:	bf00      	nop
 8004b94:	e000      	b.n	8004b98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b96:	bf00      	nop
  }
  if (status == HAL_OK)
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10d      	bne.n	8004bba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f023 0118 	bic.w	r1, r3, #24
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004bd0:	f7ff fcc8 	bl	8004564 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e316      	b.n	800520e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a66      	ldr	r2, [pc, #408]	; (8004d80 <HAL_DMA_Init+0x1b8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d04a      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a65      	ldr	r2, [pc, #404]	; (8004d84 <HAL_DMA_Init+0x1bc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d045      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a63      	ldr	r2, [pc, #396]	; (8004d88 <HAL_DMA_Init+0x1c0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d040      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a62      	ldr	r2, [pc, #392]	; (8004d8c <HAL_DMA_Init+0x1c4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d03b      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a60      	ldr	r2, [pc, #384]	; (8004d90 <HAL_DMA_Init+0x1c8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d036      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a5f      	ldr	r2, [pc, #380]	; (8004d94 <HAL_DMA_Init+0x1cc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d031      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a5d      	ldr	r2, [pc, #372]	; (8004d98 <HAL_DMA_Init+0x1d0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d02c      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a5c      	ldr	r2, [pc, #368]	; (8004d9c <HAL_DMA_Init+0x1d4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d027      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a5a      	ldr	r2, [pc, #360]	; (8004da0 <HAL_DMA_Init+0x1d8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d022      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a59      	ldr	r2, [pc, #356]	; (8004da4 <HAL_DMA_Init+0x1dc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d01d      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a57      	ldr	r2, [pc, #348]	; (8004da8 <HAL_DMA_Init+0x1e0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d018      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a56      	ldr	r2, [pc, #344]	; (8004dac <HAL_DMA_Init+0x1e4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d013      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a54      	ldr	r2, [pc, #336]	; (8004db0 <HAL_DMA_Init+0x1e8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00e      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a53      	ldr	r2, [pc, #332]	; (8004db4 <HAL_DMA_Init+0x1ec>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d009      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a51      	ldr	r2, [pc, #324]	; (8004db8 <HAL_DMA_Init+0x1f0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d004      	beq.n	8004c80 <HAL_DMA_Init+0xb8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a50      	ldr	r2, [pc, #320]	; (8004dbc <HAL_DMA_Init+0x1f4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d101      	bne.n	8004c84 <HAL_DMA_Init+0xbc>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <HAL_DMA_Init+0xbe>
 8004c84:	2300      	movs	r3, #0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 813b 	beq.w	8004f02 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a37      	ldr	r2, [pc, #220]	; (8004d80 <HAL_DMA_Init+0x1b8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d04a      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a36      	ldr	r2, [pc, #216]	; (8004d84 <HAL_DMA_Init+0x1bc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d045      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a34      	ldr	r2, [pc, #208]	; (8004d88 <HAL_DMA_Init+0x1c0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d040      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a33      	ldr	r2, [pc, #204]	; (8004d8c <HAL_DMA_Init+0x1c4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d03b      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a31      	ldr	r2, [pc, #196]	; (8004d90 <HAL_DMA_Init+0x1c8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d036      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a30      	ldr	r2, [pc, #192]	; (8004d94 <HAL_DMA_Init+0x1cc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d031      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2e      	ldr	r2, [pc, #184]	; (8004d98 <HAL_DMA_Init+0x1d0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d02c      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a2d      	ldr	r2, [pc, #180]	; (8004d9c <HAL_DMA_Init+0x1d4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d027      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2b      	ldr	r2, [pc, #172]	; (8004da0 <HAL_DMA_Init+0x1d8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d022      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2a      	ldr	r2, [pc, #168]	; (8004da4 <HAL_DMA_Init+0x1dc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d01d      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a28      	ldr	r2, [pc, #160]	; (8004da8 <HAL_DMA_Init+0x1e0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d018      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a27      	ldr	r2, [pc, #156]	; (8004dac <HAL_DMA_Init+0x1e4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d013      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a25      	ldr	r2, [pc, #148]	; (8004db0 <HAL_DMA_Init+0x1e8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00e      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a24      	ldr	r2, [pc, #144]	; (8004db4 <HAL_DMA_Init+0x1ec>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a22      	ldr	r2, [pc, #136]	; (8004db8 <HAL_DMA_Init+0x1f0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_DMA_Init+0x174>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a21      	ldr	r2, [pc, #132]	; (8004dbc <HAL_DMA_Init+0x1f4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d108      	bne.n	8004d4e <HAL_DMA_Init+0x186>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e007      	b.n	8004d5e <HAL_DMA_Init+0x196>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0201 	bic.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d5e:	e02f      	b.n	8004dc0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d60:	f7ff fc00 	bl	8004564 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b05      	cmp	r3, #5
 8004d6c:	d928      	bls.n	8004dc0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2203      	movs	r2, #3
 8004d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e246      	b.n	800520e <HAL_DMA_Init+0x646>
 8004d80:	40020010 	.word	0x40020010
 8004d84:	40020028 	.word	0x40020028
 8004d88:	40020040 	.word	0x40020040
 8004d8c:	40020058 	.word	0x40020058
 8004d90:	40020070 	.word	0x40020070
 8004d94:	40020088 	.word	0x40020088
 8004d98:	400200a0 	.word	0x400200a0
 8004d9c:	400200b8 	.word	0x400200b8
 8004da0:	40020410 	.word	0x40020410
 8004da4:	40020428 	.word	0x40020428
 8004da8:	40020440 	.word	0x40020440
 8004dac:	40020458 	.word	0x40020458
 8004db0:	40020470 	.word	0x40020470
 8004db4:	40020488 	.word	0x40020488
 8004db8:	400204a0 	.word	0x400204a0
 8004dbc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1c8      	bne.n	8004d60 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4b83      	ldr	r3, [pc, #524]	; (8004fe8 <HAL_DMA_Init+0x420>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004de6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dfe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d107      	bne.n	8004e24 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004e24:	4b71      	ldr	r3, [pc, #452]	; (8004fec <HAL_DMA_Init+0x424>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	4b71      	ldr	r3, [pc, #452]	; (8004ff0 <HAL_DMA_Init+0x428>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e30:	d328      	bcc.n	8004e84 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b28      	cmp	r3, #40	; 0x28
 8004e38:	d903      	bls.n	8004e42 <HAL_DMA_Init+0x27a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e40:	d917      	bls.n	8004e72 <HAL_DMA_Init+0x2aa>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b3e      	cmp	r3, #62	; 0x3e
 8004e48:	d903      	bls.n	8004e52 <HAL_DMA_Init+0x28a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b42      	cmp	r3, #66	; 0x42
 8004e50:	d90f      	bls.n	8004e72 <HAL_DMA_Init+0x2aa>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b46      	cmp	r3, #70	; 0x46
 8004e58:	d903      	bls.n	8004e62 <HAL_DMA_Init+0x29a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b48      	cmp	r3, #72	; 0x48
 8004e60:	d907      	bls.n	8004e72 <HAL_DMA_Init+0x2aa>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b4e      	cmp	r3, #78	; 0x4e
 8004e68:	d905      	bls.n	8004e76 <HAL_DMA_Init+0x2ae>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b52      	cmp	r3, #82	; 0x52
 8004e70:	d801      	bhi.n	8004e76 <HAL_DMA_Init+0x2ae>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <HAL_DMA_Init+0x2b0>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e82:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f023 0307 	bic.w	r3, r3, #7
 8004e9a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d117      	bne.n	8004ede <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00e      	beq.n	8004ede <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f002 fb31 	bl	8007528 <DMA_CheckFifoParam>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2240      	movs	r2, #64	; 0x40
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e197      	b.n	800520e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f002 fa6c 	bl	80073c4 <DMA_CalcBaseAndBitshift>
 8004eec:	4603      	mov	r3, r0
 8004eee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	223f      	movs	r2, #63	; 0x3f
 8004efa:	409a      	lsls	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	609a      	str	r2, [r3, #8]
 8004f00:	e0cd      	b.n	800509e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a3b      	ldr	r2, [pc, #236]	; (8004ff4 <HAL_DMA_Init+0x42c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d022      	beq.n	8004f52 <HAL_DMA_Init+0x38a>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a39      	ldr	r2, [pc, #228]	; (8004ff8 <HAL_DMA_Init+0x430>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01d      	beq.n	8004f52 <HAL_DMA_Init+0x38a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a38      	ldr	r2, [pc, #224]	; (8004ffc <HAL_DMA_Init+0x434>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d018      	beq.n	8004f52 <HAL_DMA_Init+0x38a>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a36      	ldr	r2, [pc, #216]	; (8005000 <HAL_DMA_Init+0x438>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d013      	beq.n	8004f52 <HAL_DMA_Init+0x38a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a35      	ldr	r2, [pc, #212]	; (8005004 <HAL_DMA_Init+0x43c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00e      	beq.n	8004f52 <HAL_DMA_Init+0x38a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a33      	ldr	r2, [pc, #204]	; (8005008 <HAL_DMA_Init+0x440>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d009      	beq.n	8004f52 <HAL_DMA_Init+0x38a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a32      	ldr	r2, [pc, #200]	; (800500c <HAL_DMA_Init+0x444>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d004      	beq.n	8004f52 <HAL_DMA_Init+0x38a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a30      	ldr	r2, [pc, #192]	; (8005010 <HAL_DMA_Init+0x448>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d101      	bne.n	8004f56 <HAL_DMA_Init+0x38e>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <HAL_DMA_Init+0x390>
 8004f56:	2300      	movs	r3, #0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8097 	beq.w	800508c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a24      	ldr	r2, [pc, #144]	; (8004ff4 <HAL_DMA_Init+0x42c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d021      	beq.n	8004fac <HAL_DMA_Init+0x3e4>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a22      	ldr	r2, [pc, #136]	; (8004ff8 <HAL_DMA_Init+0x430>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01c      	beq.n	8004fac <HAL_DMA_Init+0x3e4>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a21      	ldr	r2, [pc, #132]	; (8004ffc <HAL_DMA_Init+0x434>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d017      	beq.n	8004fac <HAL_DMA_Init+0x3e4>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1f      	ldr	r2, [pc, #124]	; (8005000 <HAL_DMA_Init+0x438>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d012      	beq.n	8004fac <HAL_DMA_Init+0x3e4>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1e      	ldr	r2, [pc, #120]	; (8005004 <HAL_DMA_Init+0x43c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00d      	beq.n	8004fac <HAL_DMA_Init+0x3e4>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1c      	ldr	r2, [pc, #112]	; (8005008 <HAL_DMA_Init+0x440>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d008      	beq.n	8004fac <HAL_DMA_Init+0x3e4>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1b      	ldr	r2, [pc, #108]	; (800500c <HAL_DMA_Init+0x444>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <HAL_DMA_Init+0x3e4>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	; (8005010 <HAL_DMA_Init+0x448>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4b12      	ldr	r3, [pc, #72]	; (8005014 <HAL_DMA_Init+0x44c>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b40      	cmp	r3, #64	; 0x40
 8004fd4:	d020      	beq.n	8005018 <HAL_DMA_Init+0x450>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b80      	cmp	r3, #128	; 0x80
 8004fdc:	d102      	bne.n	8004fe4 <HAL_DMA_Init+0x41c>
 8004fde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fe2:	e01a      	b.n	800501a <HAL_DMA_Init+0x452>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e018      	b.n	800501a <HAL_DMA_Init+0x452>
 8004fe8:	fe10803f 	.word	0xfe10803f
 8004fec:	5c001000 	.word	0x5c001000
 8004ff0:	ffff0000 	.word	0xffff0000
 8004ff4:	58025408 	.word	0x58025408
 8004ff8:	5802541c 	.word	0x5802541c
 8004ffc:	58025430 	.word	0x58025430
 8005000:	58025444 	.word	0x58025444
 8005004:	58025458 	.word	0x58025458
 8005008:	5802546c 	.word	0x5802546c
 800500c:	58025480 	.word	0x58025480
 8005010:	58025494 	.word	0x58025494
 8005014:	fffe000f 	.word	0xfffe000f
 8005018:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	68d2      	ldr	r2, [r2, #12]
 800501e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005020:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005028:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005030:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005038:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005040:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005048:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	4b6e      	ldr	r3, [pc, #440]	; (8005218 <HAL_DMA_Init+0x650>)
 8005060:	4413      	add	r3, r2
 8005062:	4a6e      	ldr	r2, [pc, #440]	; (800521c <HAL_DMA_Init+0x654>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	009a      	lsls	r2, r3, #2
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f002 f9a7 	bl	80073c4 <DMA_CalcBaseAndBitshift>
 8005076:	4603      	mov	r3, r0
 8005078:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	2201      	movs	r2, #1
 8005084:	409a      	lsls	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	605a      	str	r2, [r3, #4]
 800508a:	e008      	b.n	800509e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2240      	movs	r2, #64	; 0x40
 8005090:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2203      	movs	r2, #3
 8005096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e0b7      	b.n	800520e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a5f      	ldr	r2, [pc, #380]	; (8005220 <HAL_DMA_Init+0x658>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d072      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a5d      	ldr	r2, [pc, #372]	; (8005224 <HAL_DMA_Init+0x65c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d06d      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a5c      	ldr	r2, [pc, #368]	; (8005228 <HAL_DMA_Init+0x660>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d068      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a5a      	ldr	r2, [pc, #360]	; (800522c <HAL_DMA_Init+0x664>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d063      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a59      	ldr	r2, [pc, #356]	; (8005230 <HAL_DMA_Init+0x668>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d05e      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a57      	ldr	r2, [pc, #348]	; (8005234 <HAL_DMA_Init+0x66c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d059      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a56      	ldr	r2, [pc, #344]	; (8005238 <HAL_DMA_Init+0x670>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d054      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a54      	ldr	r2, [pc, #336]	; (800523c <HAL_DMA_Init+0x674>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d04f      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a53      	ldr	r2, [pc, #332]	; (8005240 <HAL_DMA_Init+0x678>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d04a      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a51      	ldr	r2, [pc, #324]	; (8005244 <HAL_DMA_Init+0x67c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d045      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a50      	ldr	r2, [pc, #320]	; (8005248 <HAL_DMA_Init+0x680>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d040      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a4e      	ldr	r2, [pc, #312]	; (800524c <HAL_DMA_Init+0x684>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d03b      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a4d      	ldr	r2, [pc, #308]	; (8005250 <HAL_DMA_Init+0x688>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d036      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a4b      	ldr	r2, [pc, #300]	; (8005254 <HAL_DMA_Init+0x68c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d031      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a4a      	ldr	r2, [pc, #296]	; (8005258 <HAL_DMA_Init+0x690>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d02c      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a48      	ldr	r2, [pc, #288]	; (800525c <HAL_DMA_Init+0x694>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d027      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a47      	ldr	r2, [pc, #284]	; (8005260 <HAL_DMA_Init+0x698>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d022      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a45      	ldr	r2, [pc, #276]	; (8005264 <HAL_DMA_Init+0x69c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01d      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a44      	ldr	r2, [pc, #272]	; (8005268 <HAL_DMA_Init+0x6a0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d018      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a42      	ldr	r2, [pc, #264]	; (800526c <HAL_DMA_Init+0x6a4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a41      	ldr	r2, [pc, #260]	; (8005270 <HAL_DMA_Init+0x6a8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00e      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a3f      	ldr	r2, [pc, #252]	; (8005274 <HAL_DMA_Init+0x6ac>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3e      	ldr	r2, [pc, #248]	; (8005278 <HAL_DMA_Init+0x6b0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_DMA_Init+0x5c6>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a3c      	ldr	r2, [pc, #240]	; (800527c <HAL_DMA_Init+0x6b4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d101      	bne.n	8005192 <HAL_DMA_Init+0x5ca>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <HAL_DMA_Init+0x5cc>
 8005192:	2300      	movs	r3, #0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d032      	beq.n	80051fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f002 fa41 	bl	8007620 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d102      	bne.n	80051ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d010      	beq.n	80051ec <HAL_DMA_Init+0x624>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d80c      	bhi.n	80051ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f002 fabe 	bl	8007754 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	e008      	b.n	80051fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	a7fdabf8 	.word	0xa7fdabf8
 800521c:	cccccccd 	.word	0xcccccccd
 8005220:	40020010 	.word	0x40020010
 8005224:	40020028 	.word	0x40020028
 8005228:	40020040 	.word	0x40020040
 800522c:	40020058 	.word	0x40020058
 8005230:	40020070 	.word	0x40020070
 8005234:	40020088 	.word	0x40020088
 8005238:	400200a0 	.word	0x400200a0
 800523c:	400200b8 	.word	0x400200b8
 8005240:	40020410 	.word	0x40020410
 8005244:	40020428 	.word	0x40020428
 8005248:	40020440 	.word	0x40020440
 800524c:	40020458 	.word	0x40020458
 8005250:	40020470 	.word	0x40020470
 8005254:	40020488 	.word	0x40020488
 8005258:	400204a0 	.word	0x400204a0
 800525c:	400204b8 	.word	0x400204b8
 8005260:	58025408 	.word	0x58025408
 8005264:	5802541c 	.word	0x5802541c
 8005268:	58025430 	.word	0x58025430
 800526c:	58025444 	.word	0x58025444
 8005270:	58025458 	.word	0x58025458
 8005274:	5802546c 	.word	0x5802546c
 8005278:	58025480 	.word	0x58025480
 800527c:	58025494 	.word	0x58025494

08005280 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e226      	b.n	80056ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_DMA_Start_IT+0x2a>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e21f      	b.n	80056ea <HAL_DMA_Start_IT+0x46a>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	f040 820a 	bne.w	80056d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a68      	ldr	r2, [pc, #416]	; (8005474 <HAL_DMA_Start_IT+0x1f4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d04a      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a66      	ldr	r2, [pc, #408]	; (8005478 <HAL_DMA_Start_IT+0x1f8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d045      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a65      	ldr	r2, [pc, #404]	; (800547c <HAL_DMA_Start_IT+0x1fc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d040      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a63      	ldr	r2, [pc, #396]	; (8005480 <HAL_DMA_Start_IT+0x200>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d03b      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a62      	ldr	r2, [pc, #392]	; (8005484 <HAL_DMA_Start_IT+0x204>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d036      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a60      	ldr	r2, [pc, #384]	; (8005488 <HAL_DMA_Start_IT+0x208>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d031      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a5f      	ldr	r2, [pc, #380]	; (800548c <HAL_DMA_Start_IT+0x20c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d02c      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a5d      	ldr	r2, [pc, #372]	; (8005490 <HAL_DMA_Start_IT+0x210>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d027      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a5c      	ldr	r2, [pc, #368]	; (8005494 <HAL_DMA_Start_IT+0x214>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d022      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a5a      	ldr	r2, [pc, #360]	; (8005498 <HAL_DMA_Start_IT+0x218>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01d      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a59      	ldr	r2, [pc, #356]	; (800549c <HAL_DMA_Start_IT+0x21c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d018      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a57      	ldr	r2, [pc, #348]	; (80054a0 <HAL_DMA_Start_IT+0x220>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a56      	ldr	r2, [pc, #344]	; (80054a4 <HAL_DMA_Start_IT+0x224>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a54      	ldr	r2, [pc, #336]	; (80054a8 <HAL_DMA_Start_IT+0x228>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a53      	ldr	r2, [pc, #332]	; (80054ac <HAL_DMA_Start_IT+0x22c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a51      	ldr	r2, [pc, #324]	; (80054b0 <HAL_DMA_Start_IT+0x230>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d108      	bne.n	8005380 <HAL_DMA_Start_IT+0x100>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0201 	bic.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e007      	b.n	8005390 <HAL_DMA_Start_IT+0x110>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f001 fe68 	bl	800706c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a34      	ldr	r2, [pc, #208]	; (8005474 <HAL_DMA_Start_IT+0x1f4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d04a      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a33      	ldr	r2, [pc, #204]	; (8005478 <HAL_DMA_Start_IT+0x1f8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d045      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a31      	ldr	r2, [pc, #196]	; (800547c <HAL_DMA_Start_IT+0x1fc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d040      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a30      	ldr	r2, [pc, #192]	; (8005480 <HAL_DMA_Start_IT+0x200>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d03b      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a2e      	ldr	r2, [pc, #184]	; (8005484 <HAL_DMA_Start_IT+0x204>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d036      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a2d      	ldr	r2, [pc, #180]	; (8005488 <HAL_DMA_Start_IT+0x208>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d031      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a2b      	ldr	r2, [pc, #172]	; (800548c <HAL_DMA_Start_IT+0x20c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d02c      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2a      	ldr	r2, [pc, #168]	; (8005490 <HAL_DMA_Start_IT+0x210>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d027      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a28      	ldr	r2, [pc, #160]	; (8005494 <HAL_DMA_Start_IT+0x214>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d022      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a27      	ldr	r2, [pc, #156]	; (8005498 <HAL_DMA_Start_IT+0x218>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d01d      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a25      	ldr	r2, [pc, #148]	; (800549c <HAL_DMA_Start_IT+0x21c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d018      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a24      	ldr	r2, [pc, #144]	; (80054a0 <HAL_DMA_Start_IT+0x220>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d013      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <HAL_DMA_Start_IT+0x224>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00e      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a21      	ldr	r2, [pc, #132]	; (80054a8 <HAL_DMA_Start_IT+0x228>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d009      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <HAL_DMA_Start_IT+0x22c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <HAL_DMA_Start_IT+0x230>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d101      	bne.n	8005440 <HAL_DMA_Start_IT+0x1c0>
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <HAL_DMA_Start_IT+0x1c2>
 8005440:	2300      	movs	r3, #0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d036      	beq.n	80054b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f023 021e 	bic.w	r2, r3, #30
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0216 	orr.w	r2, r2, #22
 8005458:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d03e      	beq.n	80054e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0208 	orr.w	r2, r2, #8
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	e035      	b.n	80054e0 <HAL_DMA_Start_IT+0x260>
 8005474:	40020010 	.word	0x40020010
 8005478:	40020028 	.word	0x40020028
 800547c:	40020040 	.word	0x40020040
 8005480:	40020058 	.word	0x40020058
 8005484:	40020070 	.word	0x40020070
 8005488:	40020088 	.word	0x40020088
 800548c:	400200a0 	.word	0x400200a0
 8005490:	400200b8 	.word	0x400200b8
 8005494:	40020410 	.word	0x40020410
 8005498:	40020428 	.word	0x40020428
 800549c:	40020440 	.word	0x40020440
 80054a0:	40020458 	.word	0x40020458
 80054a4:	40020470 	.word	0x40020470
 80054a8:	40020488 	.word	0x40020488
 80054ac:	400204a0 	.word	0x400204a0
 80054b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f023 020e 	bic.w	r2, r3, #14
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 020a 	orr.w	r2, r2, #10
 80054c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0204 	orr.w	r2, r2, #4
 80054de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a83      	ldr	r2, [pc, #524]	; (80056f4 <HAL_DMA_Start_IT+0x474>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d072      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a82      	ldr	r2, [pc, #520]	; (80056f8 <HAL_DMA_Start_IT+0x478>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d06d      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a80      	ldr	r2, [pc, #512]	; (80056fc <HAL_DMA_Start_IT+0x47c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d068      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a7f      	ldr	r2, [pc, #508]	; (8005700 <HAL_DMA_Start_IT+0x480>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d063      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a7d      	ldr	r2, [pc, #500]	; (8005704 <HAL_DMA_Start_IT+0x484>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d05e      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a7c      	ldr	r2, [pc, #496]	; (8005708 <HAL_DMA_Start_IT+0x488>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d059      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a7a      	ldr	r2, [pc, #488]	; (800570c <HAL_DMA_Start_IT+0x48c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d054      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a79      	ldr	r2, [pc, #484]	; (8005710 <HAL_DMA_Start_IT+0x490>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d04f      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a77      	ldr	r2, [pc, #476]	; (8005714 <HAL_DMA_Start_IT+0x494>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d04a      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a76      	ldr	r2, [pc, #472]	; (8005718 <HAL_DMA_Start_IT+0x498>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d045      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a74      	ldr	r2, [pc, #464]	; (800571c <HAL_DMA_Start_IT+0x49c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d040      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a73      	ldr	r2, [pc, #460]	; (8005720 <HAL_DMA_Start_IT+0x4a0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d03b      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a71      	ldr	r2, [pc, #452]	; (8005724 <HAL_DMA_Start_IT+0x4a4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d036      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a70      	ldr	r2, [pc, #448]	; (8005728 <HAL_DMA_Start_IT+0x4a8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d031      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a6e      	ldr	r2, [pc, #440]	; (800572c <HAL_DMA_Start_IT+0x4ac>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d02c      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a6d      	ldr	r2, [pc, #436]	; (8005730 <HAL_DMA_Start_IT+0x4b0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d027      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a6b      	ldr	r2, [pc, #428]	; (8005734 <HAL_DMA_Start_IT+0x4b4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d022      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a6a      	ldr	r2, [pc, #424]	; (8005738 <HAL_DMA_Start_IT+0x4b8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d01d      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a68      	ldr	r2, [pc, #416]	; (800573c <HAL_DMA_Start_IT+0x4bc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d018      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a67      	ldr	r2, [pc, #412]	; (8005740 <HAL_DMA_Start_IT+0x4c0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d013      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a65      	ldr	r2, [pc, #404]	; (8005744 <HAL_DMA_Start_IT+0x4c4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00e      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a64      	ldr	r2, [pc, #400]	; (8005748 <HAL_DMA_Start_IT+0x4c8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d009      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a62      	ldr	r2, [pc, #392]	; (800574c <HAL_DMA_Start_IT+0x4cc>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d004      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a61      	ldr	r2, [pc, #388]	; (8005750 <HAL_DMA_Start_IT+0x4d0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d101      	bne.n	80055d4 <HAL_DMA_Start_IT+0x354>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <HAL_DMA_Start_IT+0x356>
 80055d4:	2300      	movs	r3, #0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01a      	beq.n	8005610 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800560e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a37      	ldr	r2, [pc, #220]	; (80056f4 <HAL_DMA_Start_IT+0x474>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d04a      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a36      	ldr	r2, [pc, #216]	; (80056f8 <HAL_DMA_Start_IT+0x478>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d045      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a34      	ldr	r2, [pc, #208]	; (80056fc <HAL_DMA_Start_IT+0x47c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d040      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a33      	ldr	r2, [pc, #204]	; (8005700 <HAL_DMA_Start_IT+0x480>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d03b      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a31      	ldr	r2, [pc, #196]	; (8005704 <HAL_DMA_Start_IT+0x484>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d036      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a30      	ldr	r2, [pc, #192]	; (8005708 <HAL_DMA_Start_IT+0x488>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d031      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a2e      	ldr	r2, [pc, #184]	; (800570c <HAL_DMA_Start_IT+0x48c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d02c      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a2d      	ldr	r2, [pc, #180]	; (8005710 <HAL_DMA_Start_IT+0x490>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d027      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a2b      	ldr	r2, [pc, #172]	; (8005714 <HAL_DMA_Start_IT+0x494>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d022      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a2a      	ldr	r2, [pc, #168]	; (8005718 <HAL_DMA_Start_IT+0x498>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d01d      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a28      	ldr	r2, [pc, #160]	; (800571c <HAL_DMA_Start_IT+0x49c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d018      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a27      	ldr	r2, [pc, #156]	; (8005720 <HAL_DMA_Start_IT+0x4a0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d013      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a25      	ldr	r2, [pc, #148]	; (8005724 <HAL_DMA_Start_IT+0x4a4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00e      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a24      	ldr	r2, [pc, #144]	; (8005728 <HAL_DMA_Start_IT+0x4a8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d009      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a22      	ldr	r2, [pc, #136]	; (800572c <HAL_DMA_Start_IT+0x4ac>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a21      	ldr	r2, [pc, #132]	; (8005730 <HAL_DMA_Start_IT+0x4b0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d108      	bne.n	80056c2 <HAL_DMA_Start_IT+0x442>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	e012      	b.n	80056e8 <HAL_DMA_Start_IT+0x468>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0201 	orr.w	r2, r2, #1
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e009      	b.n	80056e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40020010 	.word	0x40020010
 80056f8:	40020028 	.word	0x40020028
 80056fc:	40020040 	.word	0x40020040
 8005700:	40020058 	.word	0x40020058
 8005704:	40020070 	.word	0x40020070
 8005708:	40020088 	.word	0x40020088
 800570c:	400200a0 	.word	0x400200a0
 8005710:	400200b8 	.word	0x400200b8
 8005714:	40020410 	.word	0x40020410
 8005718:	40020428 	.word	0x40020428
 800571c:	40020440 	.word	0x40020440
 8005720:	40020458 	.word	0x40020458
 8005724:	40020470 	.word	0x40020470
 8005728:	40020488 	.word	0x40020488
 800572c:	400204a0 	.word	0x400204a0
 8005730:	400204b8 	.word	0x400204b8
 8005734:	58025408 	.word	0x58025408
 8005738:	5802541c 	.word	0x5802541c
 800573c:	58025430 	.word	0x58025430
 8005740:	58025444 	.word	0x58025444
 8005744:	58025458 	.word	0x58025458
 8005748:	5802546c 	.word	0x5802546c
 800574c:	58025480 	.word	0x58025480
 8005750:	58025494 	.word	0x58025494

08005754 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800575c:	f7fe ff02 	bl	8004564 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e2dc      	b.n	8005d26 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d008      	beq.n	800578a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2280      	movs	r2, #128	; 0x80
 800577c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e2cd      	b.n	8005d26 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a76      	ldr	r2, [pc, #472]	; (8005968 <HAL_DMA_Abort+0x214>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d04a      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a74      	ldr	r2, [pc, #464]	; (800596c <HAL_DMA_Abort+0x218>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d045      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a73      	ldr	r2, [pc, #460]	; (8005970 <HAL_DMA_Abort+0x21c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d040      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a71      	ldr	r2, [pc, #452]	; (8005974 <HAL_DMA_Abort+0x220>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d03b      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a70      	ldr	r2, [pc, #448]	; (8005978 <HAL_DMA_Abort+0x224>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d036      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a6e      	ldr	r2, [pc, #440]	; (800597c <HAL_DMA_Abort+0x228>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d031      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a6d      	ldr	r2, [pc, #436]	; (8005980 <HAL_DMA_Abort+0x22c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d02c      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a6b      	ldr	r2, [pc, #428]	; (8005984 <HAL_DMA_Abort+0x230>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d027      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a6a      	ldr	r2, [pc, #424]	; (8005988 <HAL_DMA_Abort+0x234>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d022      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a68      	ldr	r2, [pc, #416]	; (800598c <HAL_DMA_Abort+0x238>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01d      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a67      	ldr	r2, [pc, #412]	; (8005990 <HAL_DMA_Abort+0x23c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d018      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a65      	ldr	r2, [pc, #404]	; (8005994 <HAL_DMA_Abort+0x240>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a64      	ldr	r2, [pc, #400]	; (8005998 <HAL_DMA_Abort+0x244>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a62      	ldr	r2, [pc, #392]	; (800599c <HAL_DMA_Abort+0x248>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a61      	ldr	r2, [pc, #388]	; (80059a0 <HAL_DMA_Abort+0x24c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a5f      	ldr	r2, [pc, #380]	; (80059a4 <HAL_DMA_Abort+0x250>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <HAL_DMA_Abort+0xda>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <HAL_DMA_Abort+0xdc>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d013      	beq.n	800585c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 021e 	bic.w	r2, r2, #30
 8005842:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695a      	ldr	r2, [r3, #20]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005852:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e00a      	b.n	8005872 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 020e 	bic.w	r2, r2, #14
 800586a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a3c      	ldr	r2, [pc, #240]	; (8005968 <HAL_DMA_Abort+0x214>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d072      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a3a      	ldr	r2, [pc, #232]	; (800596c <HAL_DMA_Abort+0x218>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d06d      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a39      	ldr	r2, [pc, #228]	; (8005970 <HAL_DMA_Abort+0x21c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d068      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a37      	ldr	r2, [pc, #220]	; (8005974 <HAL_DMA_Abort+0x220>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d063      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a36      	ldr	r2, [pc, #216]	; (8005978 <HAL_DMA_Abort+0x224>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d05e      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a34      	ldr	r2, [pc, #208]	; (800597c <HAL_DMA_Abort+0x228>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d059      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a33      	ldr	r2, [pc, #204]	; (8005980 <HAL_DMA_Abort+0x22c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d054      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a31      	ldr	r2, [pc, #196]	; (8005984 <HAL_DMA_Abort+0x230>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d04f      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a30      	ldr	r2, [pc, #192]	; (8005988 <HAL_DMA_Abort+0x234>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d04a      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a2e      	ldr	r2, [pc, #184]	; (800598c <HAL_DMA_Abort+0x238>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d045      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a2d      	ldr	r2, [pc, #180]	; (8005990 <HAL_DMA_Abort+0x23c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d040      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a2b      	ldr	r2, [pc, #172]	; (8005994 <HAL_DMA_Abort+0x240>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d03b      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a2a      	ldr	r2, [pc, #168]	; (8005998 <HAL_DMA_Abort+0x244>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d036      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a28      	ldr	r2, [pc, #160]	; (800599c <HAL_DMA_Abort+0x248>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d031      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a27      	ldr	r2, [pc, #156]	; (80059a0 <HAL_DMA_Abort+0x24c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d02c      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a25      	ldr	r2, [pc, #148]	; (80059a4 <HAL_DMA_Abort+0x250>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d027      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a24      	ldr	r2, [pc, #144]	; (80059a8 <HAL_DMA_Abort+0x254>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d022      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a22      	ldr	r2, [pc, #136]	; (80059ac <HAL_DMA_Abort+0x258>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d01d      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a21      	ldr	r2, [pc, #132]	; (80059b0 <HAL_DMA_Abort+0x25c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d018      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <HAL_DMA_Abort+0x260>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1e      	ldr	r2, [pc, #120]	; (80059b8 <HAL_DMA_Abort+0x264>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <HAL_DMA_Abort+0x268>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <HAL_DMA_Abort+0x26c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <HAL_DMA_Abort+0x270>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d132      	bne.n	80059c8 <HAL_DMA_Abort+0x274>
 8005962:	2301      	movs	r3, #1
 8005964:	e031      	b.n	80059ca <HAL_DMA_Abort+0x276>
 8005966:	bf00      	nop
 8005968:	40020010 	.word	0x40020010
 800596c:	40020028 	.word	0x40020028
 8005970:	40020040 	.word	0x40020040
 8005974:	40020058 	.word	0x40020058
 8005978:	40020070 	.word	0x40020070
 800597c:	40020088 	.word	0x40020088
 8005980:	400200a0 	.word	0x400200a0
 8005984:	400200b8 	.word	0x400200b8
 8005988:	40020410 	.word	0x40020410
 800598c:	40020428 	.word	0x40020428
 8005990:	40020440 	.word	0x40020440
 8005994:	40020458 	.word	0x40020458
 8005998:	40020470 	.word	0x40020470
 800599c:	40020488 	.word	0x40020488
 80059a0:	400204a0 	.word	0x400204a0
 80059a4:	400204b8 	.word	0x400204b8
 80059a8:	58025408 	.word	0x58025408
 80059ac:	5802541c 	.word	0x5802541c
 80059b0:	58025430 	.word	0x58025430
 80059b4:	58025444 	.word	0x58025444
 80059b8:	58025458 	.word	0x58025458
 80059bc:	5802546c 	.word	0x5802546c
 80059c0:	58025480 	.word	0x58025480
 80059c4:	58025494 	.word	0x58025494
 80059c8:	2300      	movs	r3, #0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a6d      	ldr	r2, [pc, #436]	; (8005b98 <HAL_DMA_Abort+0x444>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d04a      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a6b      	ldr	r2, [pc, #428]	; (8005b9c <HAL_DMA_Abort+0x448>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d045      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a6a      	ldr	r2, [pc, #424]	; (8005ba0 <HAL_DMA_Abort+0x44c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d040      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a68      	ldr	r2, [pc, #416]	; (8005ba4 <HAL_DMA_Abort+0x450>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d03b      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a67      	ldr	r2, [pc, #412]	; (8005ba8 <HAL_DMA_Abort+0x454>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d036      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a65      	ldr	r2, [pc, #404]	; (8005bac <HAL_DMA_Abort+0x458>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d031      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a64      	ldr	r2, [pc, #400]	; (8005bb0 <HAL_DMA_Abort+0x45c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d02c      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a62      	ldr	r2, [pc, #392]	; (8005bb4 <HAL_DMA_Abort+0x460>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d027      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a61      	ldr	r2, [pc, #388]	; (8005bb8 <HAL_DMA_Abort+0x464>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d022      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a5f      	ldr	r2, [pc, #380]	; (8005bbc <HAL_DMA_Abort+0x468>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d01d      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a5e      	ldr	r2, [pc, #376]	; (8005bc0 <HAL_DMA_Abort+0x46c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d018      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a5c      	ldr	r2, [pc, #368]	; (8005bc4 <HAL_DMA_Abort+0x470>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a5b      	ldr	r2, [pc, #364]	; (8005bc8 <HAL_DMA_Abort+0x474>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00e      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a59      	ldr	r2, [pc, #356]	; (8005bcc <HAL_DMA_Abort+0x478>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a58      	ldr	r2, [pc, #352]	; (8005bd0 <HAL_DMA_Abort+0x47c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a56      	ldr	r2, [pc, #344]	; (8005bd4 <HAL_DMA_Abort+0x480>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d108      	bne.n	8005a90 <HAL_DMA_Abort+0x33c>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0201 	bic.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e007      	b.n	8005aa0 <HAL_DMA_Abort+0x34c>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005aa0:	e013      	b.n	8005aca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aa2:	f7fe fd5f 	bl	8004564 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b05      	cmp	r3, #5
 8005aae:	d90c      	bls.n	8005aca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2203      	movs	r2, #3
 8005aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e12d      	b.n	8005d26 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e5      	bne.n	8005aa2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2f      	ldr	r2, [pc, #188]	; (8005b98 <HAL_DMA_Abort+0x444>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d04a      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a2d      	ldr	r2, [pc, #180]	; (8005b9c <HAL_DMA_Abort+0x448>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d045      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a2c      	ldr	r2, [pc, #176]	; (8005ba0 <HAL_DMA_Abort+0x44c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d040      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a2a      	ldr	r2, [pc, #168]	; (8005ba4 <HAL_DMA_Abort+0x450>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d03b      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <HAL_DMA_Abort+0x454>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d036      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a27      	ldr	r2, [pc, #156]	; (8005bac <HAL_DMA_Abort+0x458>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d031      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a26      	ldr	r2, [pc, #152]	; (8005bb0 <HAL_DMA_Abort+0x45c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d02c      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a24      	ldr	r2, [pc, #144]	; (8005bb4 <HAL_DMA_Abort+0x460>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d027      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a23      	ldr	r2, [pc, #140]	; (8005bb8 <HAL_DMA_Abort+0x464>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d022      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a21      	ldr	r2, [pc, #132]	; (8005bbc <HAL_DMA_Abort+0x468>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01d      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a20      	ldr	r2, [pc, #128]	; (8005bc0 <HAL_DMA_Abort+0x46c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d018      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1e      	ldr	r2, [pc, #120]	; (8005bc4 <HAL_DMA_Abort+0x470>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1d      	ldr	r2, [pc, #116]	; (8005bc8 <HAL_DMA_Abort+0x474>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1b      	ldr	r2, [pc, #108]	; (8005bcc <HAL_DMA_Abort+0x478>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1a      	ldr	r2, [pc, #104]	; (8005bd0 <HAL_DMA_Abort+0x47c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a18      	ldr	r2, [pc, #96]	; (8005bd4 <HAL_DMA_Abort+0x480>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d101      	bne.n	8005b7a <HAL_DMA_Abort+0x426>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_DMA_Abort+0x428>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d02b      	beq.n	8005bd8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b84:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b8a:	f003 031f 	and.w	r3, r3, #31
 8005b8e:	223f      	movs	r2, #63	; 0x3f
 8005b90:	409a      	lsls	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	609a      	str	r2, [r3, #8]
 8005b96:	e02a      	b.n	8005bee <HAL_DMA_Abort+0x49a>
 8005b98:	40020010 	.word	0x40020010
 8005b9c:	40020028 	.word	0x40020028
 8005ba0:	40020040 	.word	0x40020040
 8005ba4:	40020058 	.word	0x40020058
 8005ba8:	40020070 	.word	0x40020070
 8005bac:	40020088 	.word	0x40020088
 8005bb0:	400200a0 	.word	0x400200a0
 8005bb4:	400200b8 	.word	0x400200b8
 8005bb8:	40020410 	.word	0x40020410
 8005bbc:	40020428 	.word	0x40020428
 8005bc0:	40020440 	.word	0x40020440
 8005bc4:	40020458 	.word	0x40020458
 8005bc8:	40020470 	.word	0x40020470
 8005bcc:	40020488 	.word	0x40020488
 8005bd0:	400204a0 	.word	0x400204a0
 8005bd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be2:	f003 031f 	and.w	r3, r3, #31
 8005be6:	2201      	movs	r2, #1
 8005be8:	409a      	lsls	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a4f      	ldr	r2, [pc, #316]	; (8005d30 <HAL_DMA_Abort+0x5dc>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d072      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a4d      	ldr	r2, [pc, #308]	; (8005d34 <HAL_DMA_Abort+0x5e0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d06d      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a4c      	ldr	r2, [pc, #304]	; (8005d38 <HAL_DMA_Abort+0x5e4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d068      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a4a      	ldr	r2, [pc, #296]	; (8005d3c <HAL_DMA_Abort+0x5e8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d063      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a49      	ldr	r2, [pc, #292]	; (8005d40 <HAL_DMA_Abort+0x5ec>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d05e      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a47      	ldr	r2, [pc, #284]	; (8005d44 <HAL_DMA_Abort+0x5f0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d059      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a46      	ldr	r2, [pc, #280]	; (8005d48 <HAL_DMA_Abort+0x5f4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d054      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a44      	ldr	r2, [pc, #272]	; (8005d4c <HAL_DMA_Abort+0x5f8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d04f      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a43      	ldr	r2, [pc, #268]	; (8005d50 <HAL_DMA_Abort+0x5fc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d04a      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a41      	ldr	r2, [pc, #260]	; (8005d54 <HAL_DMA_Abort+0x600>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d045      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a40      	ldr	r2, [pc, #256]	; (8005d58 <HAL_DMA_Abort+0x604>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d040      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a3e      	ldr	r2, [pc, #248]	; (8005d5c <HAL_DMA_Abort+0x608>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d03b      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a3d      	ldr	r2, [pc, #244]	; (8005d60 <HAL_DMA_Abort+0x60c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d036      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a3b      	ldr	r2, [pc, #236]	; (8005d64 <HAL_DMA_Abort+0x610>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d031      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a3a      	ldr	r2, [pc, #232]	; (8005d68 <HAL_DMA_Abort+0x614>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d02c      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a38      	ldr	r2, [pc, #224]	; (8005d6c <HAL_DMA_Abort+0x618>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d027      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a37      	ldr	r2, [pc, #220]	; (8005d70 <HAL_DMA_Abort+0x61c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d022      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a35      	ldr	r2, [pc, #212]	; (8005d74 <HAL_DMA_Abort+0x620>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d01d      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a34      	ldr	r2, [pc, #208]	; (8005d78 <HAL_DMA_Abort+0x624>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d018      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a32      	ldr	r2, [pc, #200]	; (8005d7c <HAL_DMA_Abort+0x628>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a31      	ldr	r2, [pc, #196]	; (8005d80 <HAL_DMA_Abort+0x62c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00e      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a2f      	ldr	r2, [pc, #188]	; (8005d84 <HAL_DMA_Abort+0x630>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d009      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a2e      	ldr	r2, [pc, #184]	; (8005d88 <HAL_DMA_Abort+0x634>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a2c      	ldr	r2, [pc, #176]	; (8005d8c <HAL_DMA_Abort+0x638>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <HAL_DMA_Abort+0x58e>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <HAL_DMA_Abort+0x590>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d015      	beq.n	8005d14 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005cf0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00c      	beq.n	8005d14 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d08:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d12:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40020010 	.word	0x40020010
 8005d34:	40020028 	.word	0x40020028
 8005d38:	40020040 	.word	0x40020040
 8005d3c:	40020058 	.word	0x40020058
 8005d40:	40020070 	.word	0x40020070
 8005d44:	40020088 	.word	0x40020088
 8005d48:	400200a0 	.word	0x400200a0
 8005d4c:	400200b8 	.word	0x400200b8
 8005d50:	40020410 	.word	0x40020410
 8005d54:	40020428 	.word	0x40020428
 8005d58:	40020440 	.word	0x40020440
 8005d5c:	40020458 	.word	0x40020458
 8005d60:	40020470 	.word	0x40020470
 8005d64:	40020488 	.word	0x40020488
 8005d68:	400204a0 	.word	0x400204a0
 8005d6c:	400204b8 	.word	0x400204b8
 8005d70:	58025408 	.word	0x58025408
 8005d74:	5802541c 	.word	0x5802541c
 8005d78:	58025430 	.word	0x58025430
 8005d7c:	58025444 	.word	0x58025444
 8005d80:	58025458 	.word	0x58025458
 8005d84:	5802546c 	.word	0x5802546c
 8005d88:	58025480 	.word	0x58025480
 8005d8c:	58025494 	.word	0x58025494

08005d90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e205      	b.n	80061ae <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d004      	beq.n	8005db8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2280      	movs	r2, #128	; 0x80
 8005db2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e1fa      	b.n	80061ae <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a8c      	ldr	r2, [pc, #560]	; (8005ff0 <HAL_DMA_Abort_IT+0x260>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d04a      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a8b      	ldr	r2, [pc, #556]	; (8005ff4 <HAL_DMA_Abort_IT+0x264>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d045      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a89      	ldr	r2, [pc, #548]	; (8005ff8 <HAL_DMA_Abort_IT+0x268>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d040      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a88      	ldr	r2, [pc, #544]	; (8005ffc <HAL_DMA_Abort_IT+0x26c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d03b      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a86      	ldr	r2, [pc, #536]	; (8006000 <HAL_DMA_Abort_IT+0x270>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d036      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a85      	ldr	r2, [pc, #532]	; (8006004 <HAL_DMA_Abort_IT+0x274>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d031      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a83      	ldr	r2, [pc, #524]	; (8006008 <HAL_DMA_Abort_IT+0x278>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d02c      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a82      	ldr	r2, [pc, #520]	; (800600c <HAL_DMA_Abort_IT+0x27c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d027      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a80      	ldr	r2, [pc, #512]	; (8006010 <HAL_DMA_Abort_IT+0x280>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d022      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a7f      	ldr	r2, [pc, #508]	; (8006014 <HAL_DMA_Abort_IT+0x284>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d01d      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a7d      	ldr	r2, [pc, #500]	; (8006018 <HAL_DMA_Abort_IT+0x288>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d018      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a7c      	ldr	r2, [pc, #496]	; (800601c <HAL_DMA_Abort_IT+0x28c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d013      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a7a      	ldr	r2, [pc, #488]	; (8006020 <HAL_DMA_Abort_IT+0x290>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00e      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a79      	ldr	r2, [pc, #484]	; (8006024 <HAL_DMA_Abort_IT+0x294>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a77      	ldr	r2, [pc, #476]	; (8006028 <HAL_DMA_Abort_IT+0x298>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a76      	ldr	r2, [pc, #472]	; (800602c <HAL_DMA_Abort_IT+0x29c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d101      	bne.n	8005e5c <HAL_DMA_Abort_IT+0xcc>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <HAL_DMA_Abort_IT+0xce>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d065      	beq.n	8005f2e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2204      	movs	r2, #4
 8005e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a60      	ldr	r2, [pc, #384]	; (8005ff0 <HAL_DMA_Abort_IT+0x260>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d04a      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a5e      	ldr	r2, [pc, #376]	; (8005ff4 <HAL_DMA_Abort_IT+0x264>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d045      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a5d      	ldr	r2, [pc, #372]	; (8005ff8 <HAL_DMA_Abort_IT+0x268>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d040      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a5b      	ldr	r2, [pc, #364]	; (8005ffc <HAL_DMA_Abort_IT+0x26c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d03b      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a5a      	ldr	r2, [pc, #360]	; (8006000 <HAL_DMA_Abort_IT+0x270>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d036      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a58      	ldr	r2, [pc, #352]	; (8006004 <HAL_DMA_Abort_IT+0x274>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d031      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a57      	ldr	r2, [pc, #348]	; (8006008 <HAL_DMA_Abort_IT+0x278>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d02c      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a55      	ldr	r2, [pc, #340]	; (800600c <HAL_DMA_Abort_IT+0x27c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d027      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a54      	ldr	r2, [pc, #336]	; (8006010 <HAL_DMA_Abort_IT+0x280>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d022      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a52      	ldr	r2, [pc, #328]	; (8006014 <HAL_DMA_Abort_IT+0x284>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d01d      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a51      	ldr	r2, [pc, #324]	; (8006018 <HAL_DMA_Abort_IT+0x288>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d018      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a4f      	ldr	r2, [pc, #316]	; (800601c <HAL_DMA_Abort_IT+0x28c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d013      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a4e      	ldr	r2, [pc, #312]	; (8006020 <HAL_DMA_Abort_IT+0x290>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00e      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a4c      	ldr	r2, [pc, #304]	; (8006024 <HAL_DMA_Abort_IT+0x294>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d009      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a4b      	ldr	r2, [pc, #300]	; (8006028 <HAL_DMA_Abort_IT+0x298>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x17a>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a49      	ldr	r2, [pc, #292]	; (800602c <HAL_DMA_Abort_IT+0x29c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d108      	bne.n	8005f1c <HAL_DMA_Abort_IT+0x18c>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0201 	bic.w	r2, r2, #1
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	e147      	b.n	80061ac <HAL_DMA_Abort_IT+0x41c>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	e13e      	b.n	80061ac <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 020e 	bic.w	r2, r2, #14
 8005f3c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a2b      	ldr	r2, [pc, #172]	; (8005ff0 <HAL_DMA_Abort_IT+0x260>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d04a      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a29      	ldr	r2, [pc, #164]	; (8005ff4 <HAL_DMA_Abort_IT+0x264>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d045      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a28      	ldr	r2, [pc, #160]	; (8005ff8 <HAL_DMA_Abort_IT+0x268>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d040      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <HAL_DMA_Abort_IT+0x26c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d03b      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a25      	ldr	r2, [pc, #148]	; (8006000 <HAL_DMA_Abort_IT+0x270>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d036      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a23      	ldr	r2, [pc, #140]	; (8006004 <HAL_DMA_Abort_IT+0x274>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d031      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a22      	ldr	r2, [pc, #136]	; (8006008 <HAL_DMA_Abort_IT+0x278>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d02c      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a20      	ldr	r2, [pc, #128]	; (800600c <HAL_DMA_Abort_IT+0x27c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d027      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1f      	ldr	r2, [pc, #124]	; (8006010 <HAL_DMA_Abort_IT+0x280>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d022      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1d      	ldr	r2, [pc, #116]	; (8006014 <HAL_DMA_Abort_IT+0x284>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d01d      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1c      	ldr	r2, [pc, #112]	; (8006018 <HAL_DMA_Abort_IT+0x288>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d018      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1a      	ldr	r2, [pc, #104]	; (800601c <HAL_DMA_Abort_IT+0x28c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a19      	ldr	r2, [pc, #100]	; (8006020 <HAL_DMA_Abort_IT+0x290>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00e      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a17      	ldr	r2, [pc, #92]	; (8006024 <HAL_DMA_Abort_IT+0x294>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a16      	ldr	r2, [pc, #88]	; (8006028 <HAL_DMA_Abort_IT+0x298>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_DMA_Abort_IT+0x24e>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a14      	ldr	r2, [pc, #80]	; (800602c <HAL_DMA_Abort_IT+0x29c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d128      	bne.n	8006030 <HAL_DMA_Abort_IT+0x2a0>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e027      	b.n	8006040 <HAL_DMA_Abort_IT+0x2b0>
 8005ff0:	40020010 	.word	0x40020010
 8005ff4:	40020028 	.word	0x40020028
 8005ff8:	40020040 	.word	0x40020040
 8005ffc:	40020058 	.word	0x40020058
 8006000:	40020070 	.word	0x40020070
 8006004:	40020088 	.word	0x40020088
 8006008:	400200a0 	.word	0x400200a0
 800600c:	400200b8 	.word	0x400200b8
 8006010:	40020410 	.word	0x40020410
 8006014:	40020428 	.word	0x40020428
 8006018:	40020440 	.word	0x40020440
 800601c:	40020458 	.word	0x40020458
 8006020:	40020470 	.word	0x40020470
 8006024:	40020488 	.word	0x40020488
 8006028:	400204a0 	.word	0x400204a0
 800602c:	400204b8 	.word	0x400204b8
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0201 	bic.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a5c      	ldr	r2, [pc, #368]	; (80061b8 <HAL_DMA_Abort_IT+0x428>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d072      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a5b      	ldr	r2, [pc, #364]	; (80061bc <HAL_DMA_Abort_IT+0x42c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d06d      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a59      	ldr	r2, [pc, #356]	; (80061c0 <HAL_DMA_Abort_IT+0x430>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d068      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a58      	ldr	r2, [pc, #352]	; (80061c4 <HAL_DMA_Abort_IT+0x434>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d063      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a56      	ldr	r2, [pc, #344]	; (80061c8 <HAL_DMA_Abort_IT+0x438>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d05e      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a55      	ldr	r2, [pc, #340]	; (80061cc <HAL_DMA_Abort_IT+0x43c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d059      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a53      	ldr	r2, [pc, #332]	; (80061d0 <HAL_DMA_Abort_IT+0x440>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d054      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a52      	ldr	r2, [pc, #328]	; (80061d4 <HAL_DMA_Abort_IT+0x444>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d04f      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a50      	ldr	r2, [pc, #320]	; (80061d8 <HAL_DMA_Abort_IT+0x448>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d04a      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a4f      	ldr	r2, [pc, #316]	; (80061dc <HAL_DMA_Abort_IT+0x44c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d045      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a4d      	ldr	r2, [pc, #308]	; (80061e0 <HAL_DMA_Abort_IT+0x450>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d040      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a4c      	ldr	r2, [pc, #304]	; (80061e4 <HAL_DMA_Abort_IT+0x454>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d03b      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a4a      	ldr	r2, [pc, #296]	; (80061e8 <HAL_DMA_Abort_IT+0x458>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d036      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a49      	ldr	r2, [pc, #292]	; (80061ec <HAL_DMA_Abort_IT+0x45c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d031      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a47      	ldr	r2, [pc, #284]	; (80061f0 <HAL_DMA_Abort_IT+0x460>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d02c      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a46      	ldr	r2, [pc, #280]	; (80061f4 <HAL_DMA_Abort_IT+0x464>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d027      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a44      	ldr	r2, [pc, #272]	; (80061f8 <HAL_DMA_Abort_IT+0x468>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d022      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a43      	ldr	r2, [pc, #268]	; (80061fc <HAL_DMA_Abort_IT+0x46c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d01d      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a41      	ldr	r2, [pc, #260]	; (8006200 <HAL_DMA_Abort_IT+0x470>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d018      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a40      	ldr	r2, [pc, #256]	; (8006204 <HAL_DMA_Abort_IT+0x474>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d013      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a3e      	ldr	r2, [pc, #248]	; (8006208 <HAL_DMA_Abort_IT+0x478>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00e      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a3d      	ldr	r2, [pc, #244]	; (800620c <HAL_DMA_Abort_IT+0x47c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d009      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a3b      	ldr	r2, [pc, #236]	; (8006210 <HAL_DMA_Abort_IT+0x480>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d004      	beq.n	8006130 <HAL_DMA_Abort_IT+0x3a0>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a3a      	ldr	r2, [pc, #232]	; (8006214 <HAL_DMA_Abort_IT+0x484>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d101      	bne.n	8006134 <HAL_DMA_Abort_IT+0x3a4>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <HAL_DMA_Abort_IT+0x3a6>
 8006134:	2300      	movs	r3, #0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d028      	beq.n	800618c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006148:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2201      	movs	r2, #1
 800615a:	409a      	lsls	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006168:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00c      	beq.n	800618c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006180:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800618a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40020010 	.word	0x40020010
 80061bc:	40020028 	.word	0x40020028
 80061c0:	40020040 	.word	0x40020040
 80061c4:	40020058 	.word	0x40020058
 80061c8:	40020070 	.word	0x40020070
 80061cc:	40020088 	.word	0x40020088
 80061d0:	400200a0 	.word	0x400200a0
 80061d4:	400200b8 	.word	0x400200b8
 80061d8:	40020410 	.word	0x40020410
 80061dc:	40020428 	.word	0x40020428
 80061e0:	40020440 	.word	0x40020440
 80061e4:	40020458 	.word	0x40020458
 80061e8:	40020470 	.word	0x40020470
 80061ec:	40020488 	.word	0x40020488
 80061f0:	400204a0 	.word	0x400204a0
 80061f4:	400204b8 	.word	0x400204b8
 80061f8:	58025408 	.word	0x58025408
 80061fc:	5802541c 	.word	0x5802541c
 8006200:	58025430 	.word	0x58025430
 8006204:	58025444 	.word	0x58025444
 8006208:	58025458 	.word	0x58025458
 800620c:	5802546c 	.word	0x5802546c
 8006210:	58025480 	.word	0x58025480
 8006214:	58025494 	.word	0x58025494

08006218 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08a      	sub	sp, #40	; 0x28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006224:	4b67      	ldr	r3, [pc, #412]	; (80063c4 <HAL_DMA_IRQHandler+0x1ac>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a67      	ldr	r2, [pc, #412]	; (80063c8 <HAL_DMA_IRQHandler+0x1b0>)
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
 800622e:	0a9b      	lsrs	r3, r3, #10
 8006230:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006236:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a5f      	ldr	r2, [pc, #380]	; (80063cc <HAL_DMA_IRQHandler+0x1b4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d04a      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a5d      	ldr	r2, [pc, #372]	; (80063d0 <HAL_DMA_IRQHandler+0x1b8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d045      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a5c      	ldr	r2, [pc, #368]	; (80063d4 <HAL_DMA_IRQHandler+0x1bc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d040      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a5a      	ldr	r2, [pc, #360]	; (80063d8 <HAL_DMA_IRQHandler+0x1c0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d03b      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a59      	ldr	r2, [pc, #356]	; (80063dc <HAL_DMA_IRQHandler+0x1c4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d036      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a57      	ldr	r2, [pc, #348]	; (80063e0 <HAL_DMA_IRQHandler+0x1c8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d031      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a56      	ldr	r2, [pc, #344]	; (80063e4 <HAL_DMA_IRQHandler+0x1cc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d02c      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a54      	ldr	r2, [pc, #336]	; (80063e8 <HAL_DMA_IRQHandler+0x1d0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d027      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a53      	ldr	r2, [pc, #332]	; (80063ec <HAL_DMA_IRQHandler+0x1d4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d022      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a51      	ldr	r2, [pc, #324]	; (80063f0 <HAL_DMA_IRQHandler+0x1d8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d01d      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a50      	ldr	r2, [pc, #320]	; (80063f4 <HAL_DMA_IRQHandler+0x1dc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d018      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a4e      	ldr	r2, [pc, #312]	; (80063f8 <HAL_DMA_IRQHandler+0x1e0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a4d      	ldr	r2, [pc, #308]	; (80063fc <HAL_DMA_IRQHandler+0x1e4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a4b      	ldr	r2, [pc, #300]	; (8006400 <HAL_DMA_IRQHandler+0x1e8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a4a      	ldr	r2, [pc, #296]	; (8006404 <HAL_DMA_IRQHandler+0x1ec>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_DMA_IRQHandler+0xd2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a48      	ldr	r2, [pc, #288]	; (8006408 <HAL_DMA_IRQHandler+0x1f0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d101      	bne.n	80062ee <HAL_DMA_IRQHandler+0xd6>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <HAL_DMA_IRQHandler+0xd8>
 80062ee:	2300      	movs	r3, #0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 842b 	beq.w	8006b4c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	2208      	movs	r2, #8
 8006300:	409a      	lsls	r2, r3
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	4013      	ands	r3, r2
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80a2 	beq.w	8006450 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a2e      	ldr	r2, [pc, #184]	; (80063cc <HAL_DMA_IRQHandler+0x1b4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d04a      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a2d      	ldr	r2, [pc, #180]	; (80063d0 <HAL_DMA_IRQHandler+0x1b8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d045      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a2b      	ldr	r2, [pc, #172]	; (80063d4 <HAL_DMA_IRQHandler+0x1bc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d040      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a2a      	ldr	r2, [pc, #168]	; (80063d8 <HAL_DMA_IRQHandler+0x1c0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d03b      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a28      	ldr	r2, [pc, #160]	; (80063dc <HAL_DMA_IRQHandler+0x1c4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d036      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a27      	ldr	r2, [pc, #156]	; (80063e0 <HAL_DMA_IRQHandler+0x1c8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d031      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a25      	ldr	r2, [pc, #148]	; (80063e4 <HAL_DMA_IRQHandler+0x1cc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d02c      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a24      	ldr	r2, [pc, #144]	; (80063e8 <HAL_DMA_IRQHandler+0x1d0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d027      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a22      	ldr	r2, [pc, #136]	; (80063ec <HAL_DMA_IRQHandler+0x1d4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d022      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a21      	ldr	r2, [pc, #132]	; (80063f0 <HAL_DMA_IRQHandler+0x1d8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d01d      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a1f      	ldr	r2, [pc, #124]	; (80063f4 <HAL_DMA_IRQHandler+0x1dc>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d018      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1e      	ldr	r2, [pc, #120]	; (80063f8 <HAL_DMA_IRQHandler+0x1e0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1c      	ldr	r2, [pc, #112]	; (80063fc <HAL_DMA_IRQHandler+0x1e4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00e      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1b      	ldr	r2, [pc, #108]	; (8006400 <HAL_DMA_IRQHandler+0x1e8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d009      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a19      	ldr	r2, [pc, #100]	; (8006404 <HAL_DMA_IRQHandler+0x1ec>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d004      	beq.n	80063ac <HAL_DMA_IRQHandler+0x194>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a18      	ldr	r2, [pc, #96]	; (8006408 <HAL_DMA_IRQHandler+0x1f0>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d12f      	bne.n	800640c <HAL_DMA_IRQHandler+0x1f4>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bf14      	ite	ne
 80063ba:	2301      	movne	r3, #1
 80063bc:	2300      	moveq	r3, #0
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	e02e      	b.n	8006420 <HAL_DMA_IRQHandler+0x208>
 80063c2:	bf00      	nop
 80063c4:	24000014 	.word	0x24000014
 80063c8:	1b4e81b5 	.word	0x1b4e81b5
 80063cc:	40020010 	.word	0x40020010
 80063d0:	40020028 	.word	0x40020028
 80063d4:	40020040 	.word	0x40020040
 80063d8:	40020058 	.word	0x40020058
 80063dc:	40020070 	.word	0x40020070
 80063e0:	40020088 	.word	0x40020088
 80063e4:	400200a0 	.word	0x400200a0
 80063e8:	400200b8 	.word	0x400200b8
 80063ec:	40020410 	.word	0x40020410
 80063f0:	40020428 	.word	0x40020428
 80063f4:	40020440 	.word	0x40020440
 80063f8:	40020458 	.word	0x40020458
 80063fc:	40020470 	.word	0x40020470
 8006400:	40020488 	.word	0x40020488
 8006404:	400204a0 	.word	0x400204a0
 8006408:	400204b8 	.word	0x400204b8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b00      	cmp	r3, #0
 8006418:	bf14      	ite	ne
 800641a:	2301      	movne	r3, #1
 800641c:	2300      	moveq	r3, #0
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d015      	beq.n	8006450 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0204 	bic.w	r2, r2, #4
 8006432:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006438:	f003 031f 	and.w	r3, r3, #31
 800643c:	2208      	movs	r2, #8
 800643e:	409a      	lsls	r2, r3
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006448:	f043 0201 	orr.w	r2, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	fa22 f303 	lsr.w	r3, r2, r3
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d06e      	beq.n	8006544 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a69      	ldr	r2, [pc, #420]	; (8006610 <HAL_DMA_IRQHandler+0x3f8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d04a      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a67      	ldr	r2, [pc, #412]	; (8006614 <HAL_DMA_IRQHandler+0x3fc>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d045      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a66      	ldr	r2, [pc, #408]	; (8006618 <HAL_DMA_IRQHandler+0x400>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d040      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a64      	ldr	r2, [pc, #400]	; (800661c <HAL_DMA_IRQHandler+0x404>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d03b      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a63      	ldr	r2, [pc, #396]	; (8006620 <HAL_DMA_IRQHandler+0x408>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d036      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a61      	ldr	r2, [pc, #388]	; (8006624 <HAL_DMA_IRQHandler+0x40c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d031      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a60      	ldr	r2, [pc, #384]	; (8006628 <HAL_DMA_IRQHandler+0x410>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d02c      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a5e      	ldr	r2, [pc, #376]	; (800662c <HAL_DMA_IRQHandler+0x414>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d027      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a5d      	ldr	r2, [pc, #372]	; (8006630 <HAL_DMA_IRQHandler+0x418>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d022      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a5b      	ldr	r2, [pc, #364]	; (8006634 <HAL_DMA_IRQHandler+0x41c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d01d      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a5a      	ldr	r2, [pc, #360]	; (8006638 <HAL_DMA_IRQHandler+0x420>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d018      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a58      	ldr	r2, [pc, #352]	; (800663c <HAL_DMA_IRQHandler+0x424>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d013      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a57      	ldr	r2, [pc, #348]	; (8006640 <HAL_DMA_IRQHandler+0x428>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00e      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a55      	ldr	r2, [pc, #340]	; (8006644 <HAL_DMA_IRQHandler+0x42c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d009      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a54      	ldr	r2, [pc, #336]	; (8006648 <HAL_DMA_IRQHandler+0x430>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d004      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ee>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a52      	ldr	r2, [pc, #328]	; (800664c <HAL_DMA_IRQHandler+0x434>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d10a      	bne.n	800651c <HAL_DMA_IRQHandler+0x304>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006510:	2b00      	cmp	r3, #0
 8006512:	bf14      	ite	ne
 8006514:	2301      	movne	r3, #1
 8006516:	2300      	moveq	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	e003      	b.n	8006524 <HAL_DMA_IRQHandler+0x30c>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2300      	movs	r3, #0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00d      	beq.n	8006544 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652c:	f003 031f 	and.w	r3, r3, #31
 8006530:	2201      	movs	r2, #1
 8006532:	409a      	lsls	r2, r3
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653c:	f043 0202 	orr.w	r2, r3, #2
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006548:	f003 031f 	and.w	r3, r3, #31
 800654c:	2204      	movs	r2, #4
 800654e:	409a      	lsls	r2, r3
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	4013      	ands	r3, r2
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 808f 	beq.w	8006678 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a2c      	ldr	r2, [pc, #176]	; (8006610 <HAL_DMA_IRQHandler+0x3f8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d04a      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a2a      	ldr	r2, [pc, #168]	; (8006614 <HAL_DMA_IRQHandler+0x3fc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d045      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a29      	ldr	r2, [pc, #164]	; (8006618 <HAL_DMA_IRQHandler+0x400>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d040      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a27      	ldr	r2, [pc, #156]	; (800661c <HAL_DMA_IRQHandler+0x404>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d03b      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a26      	ldr	r2, [pc, #152]	; (8006620 <HAL_DMA_IRQHandler+0x408>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d036      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a24      	ldr	r2, [pc, #144]	; (8006624 <HAL_DMA_IRQHandler+0x40c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d031      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a23      	ldr	r2, [pc, #140]	; (8006628 <HAL_DMA_IRQHandler+0x410>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d02c      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a21      	ldr	r2, [pc, #132]	; (800662c <HAL_DMA_IRQHandler+0x414>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d027      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a20      	ldr	r2, [pc, #128]	; (8006630 <HAL_DMA_IRQHandler+0x418>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d022      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1e      	ldr	r2, [pc, #120]	; (8006634 <HAL_DMA_IRQHandler+0x41c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d01d      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1d      	ldr	r2, [pc, #116]	; (8006638 <HAL_DMA_IRQHandler+0x420>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d018      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1b      	ldr	r2, [pc, #108]	; (800663c <HAL_DMA_IRQHandler+0x424>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1a      	ldr	r2, [pc, #104]	; (8006640 <HAL_DMA_IRQHandler+0x428>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a18      	ldr	r2, [pc, #96]	; (8006644 <HAL_DMA_IRQHandler+0x42c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d009      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a17      	ldr	r2, [pc, #92]	; (8006648 <HAL_DMA_IRQHandler+0x430>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3e2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a15      	ldr	r2, [pc, #84]	; (800664c <HAL_DMA_IRQHandler+0x434>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d12a      	bne.n	8006650 <HAL_DMA_IRQHandler+0x438>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	bf14      	ite	ne
 8006608:	2301      	movne	r3, #1
 800660a:	2300      	moveq	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	e023      	b.n	8006658 <HAL_DMA_IRQHandler+0x440>
 8006610:	40020010 	.word	0x40020010
 8006614:	40020028 	.word	0x40020028
 8006618:	40020040 	.word	0x40020040
 800661c:	40020058 	.word	0x40020058
 8006620:	40020070 	.word	0x40020070
 8006624:	40020088 	.word	0x40020088
 8006628:	400200a0 	.word	0x400200a0
 800662c:	400200b8 	.word	0x400200b8
 8006630:	40020410 	.word	0x40020410
 8006634:	40020428 	.word	0x40020428
 8006638:	40020440 	.word	0x40020440
 800663c:	40020458 	.word	0x40020458
 8006640:	40020470 	.word	0x40020470
 8006644:	40020488 	.word	0x40020488
 8006648:	400204a0 	.word	0x400204a0
 800664c:	400204b8 	.word	0x400204b8
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2300      	movs	r3, #0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00d      	beq.n	8006678 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006660:	f003 031f 	and.w	r3, r3, #31
 8006664:	2204      	movs	r2, #4
 8006666:	409a      	lsls	r2, r3
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006670:	f043 0204 	orr.w	r2, r3, #4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667c:	f003 031f 	and.w	r3, r3, #31
 8006680:	2210      	movs	r2, #16
 8006682:	409a      	lsls	r2, r3
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	4013      	ands	r3, r2
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80a6 	beq.w	80067da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a85      	ldr	r2, [pc, #532]	; (80068a8 <HAL_DMA_IRQHandler+0x690>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d04a      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a83      	ldr	r2, [pc, #524]	; (80068ac <HAL_DMA_IRQHandler+0x694>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d045      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a82      	ldr	r2, [pc, #520]	; (80068b0 <HAL_DMA_IRQHandler+0x698>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d040      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a80      	ldr	r2, [pc, #512]	; (80068b4 <HAL_DMA_IRQHandler+0x69c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d03b      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a7f      	ldr	r2, [pc, #508]	; (80068b8 <HAL_DMA_IRQHandler+0x6a0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d036      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a7d      	ldr	r2, [pc, #500]	; (80068bc <HAL_DMA_IRQHandler+0x6a4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d031      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a7c      	ldr	r2, [pc, #496]	; (80068c0 <HAL_DMA_IRQHandler+0x6a8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d02c      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a7a      	ldr	r2, [pc, #488]	; (80068c4 <HAL_DMA_IRQHandler+0x6ac>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d027      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a79      	ldr	r2, [pc, #484]	; (80068c8 <HAL_DMA_IRQHandler+0x6b0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d022      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a77      	ldr	r2, [pc, #476]	; (80068cc <HAL_DMA_IRQHandler+0x6b4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d01d      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a76      	ldr	r2, [pc, #472]	; (80068d0 <HAL_DMA_IRQHandler+0x6b8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d018      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a74      	ldr	r2, [pc, #464]	; (80068d4 <HAL_DMA_IRQHandler+0x6bc>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d013      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a73      	ldr	r2, [pc, #460]	; (80068d8 <HAL_DMA_IRQHandler+0x6c0>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00e      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a71      	ldr	r2, [pc, #452]	; (80068dc <HAL_DMA_IRQHandler+0x6c4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d009      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a70      	ldr	r2, [pc, #448]	; (80068e0 <HAL_DMA_IRQHandler+0x6c8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d004      	beq.n	800672e <HAL_DMA_IRQHandler+0x516>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a6e      	ldr	r2, [pc, #440]	; (80068e4 <HAL_DMA_IRQHandler+0x6cc>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d10a      	bne.n	8006744 <HAL_DMA_IRQHandler+0x52c>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0308 	and.w	r3, r3, #8
 8006738:	2b00      	cmp	r3, #0
 800673a:	bf14      	ite	ne
 800673c:	2301      	movne	r3, #1
 800673e:	2300      	moveq	r3, #0
 8006740:	b2db      	uxtb	r3, r3
 8006742:	e009      	b.n	8006758 <HAL_DMA_IRQHandler+0x540>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	2b00      	cmp	r3, #0
 8006750:	bf14      	ite	ne
 8006752:	2301      	movne	r3, #1
 8006754:	2300      	moveq	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d03e      	beq.n	80067da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006760:	f003 031f 	and.w	r3, r3, #31
 8006764:	2210      	movs	r2, #16
 8006766:	409a      	lsls	r2, r3
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d018      	beq.n	80067ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d108      	bne.n	800679a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d024      	beq.n	80067da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
 8006798:	e01f      	b.n	80067da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d01b      	beq.n	80067da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
 80067aa:	e016      	b.n	80067da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d107      	bne.n	80067ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0208 	bic.w	r2, r2, #8
 80067c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067de:	f003 031f 	and.w	r3, r3, #31
 80067e2:	2220      	movs	r2, #32
 80067e4:	409a      	lsls	r2, r3
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 8110 	beq.w	8006a10 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a2c      	ldr	r2, [pc, #176]	; (80068a8 <HAL_DMA_IRQHandler+0x690>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d04a      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a2b      	ldr	r2, [pc, #172]	; (80068ac <HAL_DMA_IRQHandler+0x694>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d045      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a29      	ldr	r2, [pc, #164]	; (80068b0 <HAL_DMA_IRQHandler+0x698>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d040      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a28      	ldr	r2, [pc, #160]	; (80068b4 <HAL_DMA_IRQHandler+0x69c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d03b      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a26      	ldr	r2, [pc, #152]	; (80068b8 <HAL_DMA_IRQHandler+0x6a0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d036      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a25      	ldr	r2, [pc, #148]	; (80068bc <HAL_DMA_IRQHandler+0x6a4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d031      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a23      	ldr	r2, [pc, #140]	; (80068c0 <HAL_DMA_IRQHandler+0x6a8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d02c      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a22      	ldr	r2, [pc, #136]	; (80068c4 <HAL_DMA_IRQHandler+0x6ac>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d027      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a20      	ldr	r2, [pc, #128]	; (80068c8 <HAL_DMA_IRQHandler+0x6b0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d022      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <HAL_DMA_IRQHandler+0x6b4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d01d      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1d      	ldr	r2, [pc, #116]	; (80068d0 <HAL_DMA_IRQHandler+0x6b8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d018      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <HAL_DMA_IRQHandler+0x6bc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1a      	ldr	r2, [pc, #104]	; (80068d8 <HAL_DMA_IRQHandler+0x6c0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00e      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a19      	ldr	r2, [pc, #100]	; (80068dc <HAL_DMA_IRQHandler+0x6c4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d009      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <HAL_DMA_IRQHandler+0x6c8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d004      	beq.n	8006890 <HAL_DMA_IRQHandler+0x678>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a16      	ldr	r2, [pc, #88]	; (80068e4 <HAL_DMA_IRQHandler+0x6cc>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d12b      	bne.n	80068e8 <HAL_DMA_IRQHandler+0x6d0>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0310 	and.w	r3, r3, #16
 800689a:	2b00      	cmp	r3, #0
 800689c:	bf14      	ite	ne
 800689e:	2301      	movne	r3, #1
 80068a0:	2300      	moveq	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	e02a      	b.n	80068fc <HAL_DMA_IRQHandler+0x6e4>
 80068a6:	bf00      	nop
 80068a8:	40020010 	.word	0x40020010
 80068ac:	40020028 	.word	0x40020028
 80068b0:	40020040 	.word	0x40020040
 80068b4:	40020058 	.word	0x40020058
 80068b8:	40020070 	.word	0x40020070
 80068bc:	40020088 	.word	0x40020088
 80068c0:	400200a0 	.word	0x400200a0
 80068c4:	400200b8 	.word	0x400200b8
 80068c8:	40020410 	.word	0x40020410
 80068cc:	40020428 	.word	0x40020428
 80068d0:	40020440 	.word	0x40020440
 80068d4:	40020458 	.word	0x40020458
 80068d8:	40020470 	.word	0x40020470
 80068dc:	40020488 	.word	0x40020488
 80068e0:	400204a0 	.word	0x400204a0
 80068e4:	400204b8 	.word	0x400204b8
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	bf14      	ite	ne
 80068f6:	2301      	movne	r3, #1
 80068f8:	2300      	moveq	r3, #0
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8087 	beq.w	8006a10 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006906:	f003 031f 	and.w	r3, r3, #31
 800690a:	2220      	movs	r2, #32
 800690c:	409a      	lsls	r2, r3
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b04      	cmp	r3, #4
 800691c:	d139      	bne.n	8006992 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0216 	bic.w	r2, r2, #22
 800692c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	695a      	ldr	r2, [r3, #20]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800693c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d103      	bne.n	800694e <HAL_DMA_IRQHandler+0x736>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694a:	2b00      	cmp	r3, #0
 800694c:	d007      	beq.n	800695e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0208 	bic.w	r2, r2, #8
 800695c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006962:	f003 031f 	and.w	r3, r3, #31
 8006966:	223f      	movs	r2, #63	; 0x3f
 8006968:	409a      	lsls	r2, r3
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 834a 	beq.w	800701c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
          }
          return;
 8006990:	e344      	b.n	800701c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d018      	beq.n	80069d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d108      	bne.n	80069c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d02c      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
 80069be:	e027      	b.n	8006a10 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d023      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	4798      	blx	r3
 80069d0:	e01e      	b.n	8006a10 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10f      	bne.n	8006a00 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0210 	bic.w	r2, r2, #16
 80069ee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8306 	beq.w	8007026 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 8088 	beq.w	8006b38 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2204      	movs	r2, #4
 8006a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a7a      	ldr	r2, [pc, #488]	; (8006c20 <HAL_DMA_IRQHandler+0xa08>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d04a      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a79      	ldr	r2, [pc, #484]	; (8006c24 <HAL_DMA_IRQHandler+0xa0c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d045      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a77      	ldr	r2, [pc, #476]	; (8006c28 <HAL_DMA_IRQHandler+0xa10>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d040      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a76      	ldr	r2, [pc, #472]	; (8006c2c <HAL_DMA_IRQHandler+0xa14>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d03b      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a74      	ldr	r2, [pc, #464]	; (8006c30 <HAL_DMA_IRQHandler+0xa18>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d036      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a73      	ldr	r2, [pc, #460]	; (8006c34 <HAL_DMA_IRQHandler+0xa1c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d031      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a71      	ldr	r2, [pc, #452]	; (8006c38 <HAL_DMA_IRQHandler+0xa20>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d02c      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a70      	ldr	r2, [pc, #448]	; (8006c3c <HAL_DMA_IRQHandler+0xa24>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d027      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a6e      	ldr	r2, [pc, #440]	; (8006c40 <HAL_DMA_IRQHandler+0xa28>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d022      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a6d      	ldr	r2, [pc, #436]	; (8006c44 <HAL_DMA_IRQHandler+0xa2c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d01d      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a6b      	ldr	r2, [pc, #428]	; (8006c48 <HAL_DMA_IRQHandler+0xa30>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d018      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a6a      	ldr	r2, [pc, #424]	; (8006c4c <HAL_DMA_IRQHandler+0xa34>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d013      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a68      	ldr	r2, [pc, #416]	; (8006c50 <HAL_DMA_IRQHandler+0xa38>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d00e      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a67      	ldr	r2, [pc, #412]	; (8006c54 <HAL_DMA_IRQHandler+0xa3c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d009      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a65      	ldr	r2, [pc, #404]	; (8006c58 <HAL_DMA_IRQHandler+0xa40>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d004      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x8b8>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a64      	ldr	r2, [pc, #400]	; (8006c5c <HAL_DMA_IRQHandler+0xa44>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d108      	bne.n	8006ae2 <HAL_DMA_IRQHandler+0x8ca>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0201 	bic.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	e007      	b.n	8006af2 <HAL_DMA_IRQHandler+0x8da>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0201 	bic.w	r2, r2, #1
 8006af0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3301      	adds	r3, #1
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d307      	bcc.n	8006b0e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f2      	bne.n	8006af2 <HAL_DMA_IRQHandler+0x8da>
 8006b0c:	e000      	b.n	8006b10 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b0e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d004      	beq.n	8006b28 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2203      	movs	r2, #3
 8006b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006b26:	e003      	b.n	8006b30 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8272 	beq.w	8007026 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
 8006b4a:	e26c      	b.n	8007026 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a43      	ldr	r2, [pc, #268]	; (8006c60 <HAL_DMA_IRQHandler+0xa48>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d022      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x984>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a42      	ldr	r2, [pc, #264]	; (8006c64 <HAL_DMA_IRQHandler+0xa4c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d01d      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x984>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a40      	ldr	r2, [pc, #256]	; (8006c68 <HAL_DMA_IRQHandler+0xa50>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d018      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x984>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a3f      	ldr	r2, [pc, #252]	; (8006c6c <HAL_DMA_IRQHandler+0xa54>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d013      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x984>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a3d      	ldr	r2, [pc, #244]	; (8006c70 <HAL_DMA_IRQHandler+0xa58>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00e      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x984>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a3c      	ldr	r2, [pc, #240]	; (8006c74 <HAL_DMA_IRQHandler+0xa5c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d009      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x984>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a3a      	ldr	r2, [pc, #232]	; (8006c78 <HAL_DMA_IRQHandler+0xa60>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x984>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a39      	ldr	r2, [pc, #228]	; (8006c7c <HAL_DMA_IRQHandler+0xa64>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d101      	bne.n	8006ba0 <HAL_DMA_IRQHandler+0x988>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <HAL_DMA_IRQHandler+0x98a>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 823f 	beq.w	8007026 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	2204      	movs	r2, #4
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 80cd 	beq.w	8006d60 <HAL_DMA_IRQHandler+0xb48>
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80c7 	beq.w	8006d60 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	2204      	movs	r2, #4
 8006bdc:	409a      	lsls	r2, r3
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d049      	beq.n	8006c80 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d109      	bne.n	8006c0a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 8210 	beq.w	8007020 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c08:	e20a      	b.n	8007020 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8206 	beq.w	8007020 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c1c:	e200      	b.n	8007020 <HAL_DMA_IRQHandler+0xe08>
 8006c1e:	bf00      	nop
 8006c20:	40020010 	.word	0x40020010
 8006c24:	40020028 	.word	0x40020028
 8006c28:	40020040 	.word	0x40020040
 8006c2c:	40020058 	.word	0x40020058
 8006c30:	40020070 	.word	0x40020070
 8006c34:	40020088 	.word	0x40020088
 8006c38:	400200a0 	.word	0x400200a0
 8006c3c:	400200b8 	.word	0x400200b8
 8006c40:	40020410 	.word	0x40020410
 8006c44:	40020428 	.word	0x40020428
 8006c48:	40020440 	.word	0x40020440
 8006c4c:	40020458 	.word	0x40020458
 8006c50:	40020470 	.word	0x40020470
 8006c54:	40020488 	.word	0x40020488
 8006c58:	400204a0 	.word	0x400204a0
 8006c5c:	400204b8 	.word	0x400204b8
 8006c60:	58025408 	.word	0x58025408
 8006c64:	5802541c 	.word	0x5802541c
 8006c68:	58025430 	.word	0x58025430
 8006c6c:	58025444 	.word	0x58025444
 8006c70:	58025458 	.word	0x58025458
 8006c74:	5802546c 	.word	0x5802546c
 8006c78:	58025480 	.word	0x58025480
 8006c7c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d160      	bne.n	8006d4c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a8c      	ldr	r2, [pc, #560]	; (8006ec0 <HAL_DMA_IRQHandler+0xca8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d04a      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a8a      	ldr	r2, [pc, #552]	; (8006ec4 <HAL_DMA_IRQHandler+0xcac>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d045      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a89      	ldr	r2, [pc, #548]	; (8006ec8 <HAL_DMA_IRQHandler+0xcb0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d040      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a87      	ldr	r2, [pc, #540]	; (8006ecc <HAL_DMA_IRQHandler+0xcb4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d03b      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a86      	ldr	r2, [pc, #536]	; (8006ed0 <HAL_DMA_IRQHandler+0xcb8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d036      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a84      	ldr	r2, [pc, #528]	; (8006ed4 <HAL_DMA_IRQHandler+0xcbc>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d031      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a83      	ldr	r2, [pc, #524]	; (8006ed8 <HAL_DMA_IRQHandler+0xcc0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d02c      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a81      	ldr	r2, [pc, #516]	; (8006edc <HAL_DMA_IRQHandler+0xcc4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d027      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a80      	ldr	r2, [pc, #512]	; (8006ee0 <HAL_DMA_IRQHandler+0xcc8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d022      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a7e      	ldr	r2, [pc, #504]	; (8006ee4 <HAL_DMA_IRQHandler+0xccc>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d01d      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a7d      	ldr	r2, [pc, #500]	; (8006ee8 <HAL_DMA_IRQHandler+0xcd0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d018      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a7b      	ldr	r2, [pc, #492]	; (8006eec <HAL_DMA_IRQHandler+0xcd4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a7a      	ldr	r2, [pc, #488]	; (8006ef0 <HAL_DMA_IRQHandler+0xcd8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00e      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a78      	ldr	r2, [pc, #480]	; (8006ef4 <HAL_DMA_IRQHandler+0xcdc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a77      	ldr	r2, [pc, #476]	; (8006ef8 <HAL_DMA_IRQHandler+0xce0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb12>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a75      	ldr	r2, [pc, #468]	; (8006efc <HAL_DMA_IRQHandler+0xce4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d108      	bne.n	8006d3c <HAL_DMA_IRQHandler+0xb24>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0208 	bic.w	r2, r2, #8
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	e007      	b.n	8006d4c <HAL_DMA_IRQHandler+0xb34>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0204 	bic.w	r2, r2, #4
 8006d4a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 8165 	beq.w	8007020 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d5e:	e15f      	b.n	8007020 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d64:	f003 031f 	and.w	r3, r3, #31
 8006d68:	2202      	movs	r2, #2
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80c5 	beq.w	8006f00 <HAL_DMA_IRQHandler+0xce8>
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 80bf 	beq.w	8006f00 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d86:	f003 031f 	and.w	r3, r3, #31
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	409a      	lsls	r2, r3
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d018      	beq.n	8006dce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 813a 	beq.w	8007024 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db8:	e134      	b.n	8007024 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8130 	beq.w	8007024 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dcc:	e12a      	b.n	8007024 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d168      	bne.n	8006eaa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a38      	ldr	r2, [pc, #224]	; (8006ec0 <HAL_DMA_IRQHandler+0xca8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d04a      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a37      	ldr	r2, [pc, #220]	; (8006ec4 <HAL_DMA_IRQHandler+0xcac>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d045      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a35      	ldr	r2, [pc, #212]	; (8006ec8 <HAL_DMA_IRQHandler+0xcb0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d040      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a34      	ldr	r2, [pc, #208]	; (8006ecc <HAL_DMA_IRQHandler+0xcb4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d03b      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a32      	ldr	r2, [pc, #200]	; (8006ed0 <HAL_DMA_IRQHandler+0xcb8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d036      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a31      	ldr	r2, [pc, #196]	; (8006ed4 <HAL_DMA_IRQHandler+0xcbc>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d031      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a2f      	ldr	r2, [pc, #188]	; (8006ed8 <HAL_DMA_IRQHandler+0xcc0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d02c      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a2e      	ldr	r2, [pc, #184]	; (8006edc <HAL_DMA_IRQHandler+0xcc4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d027      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a2c      	ldr	r2, [pc, #176]	; (8006ee0 <HAL_DMA_IRQHandler+0xcc8>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d022      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a2b      	ldr	r2, [pc, #172]	; (8006ee4 <HAL_DMA_IRQHandler+0xccc>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d01d      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a29      	ldr	r2, [pc, #164]	; (8006ee8 <HAL_DMA_IRQHandler+0xcd0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d018      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a28      	ldr	r2, [pc, #160]	; (8006eec <HAL_DMA_IRQHandler+0xcd4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d013      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a26      	ldr	r2, [pc, #152]	; (8006ef0 <HAL_DMA_IRQHandler+0xcd8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00e      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a25      	ldr	r2, [pc, #148]	; (8006ef4 <HAL_DMA_IRQHandler+0xcdc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d009      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a23      	ldr	r2, [pc, #140]	; (8006ef8 <HAL_DMA_IRQHandler+0xce0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d004      	beq.n	8006e78 <HAL_DMA_IRQHandler+0xc60>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a22      	ldr	r2, [pc, #136]	; (8006efc <HAL_DMA_IRQHandler+0xce4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d108      	bne.n	8006e8a <HAL_DMA_IRQHandler+0xc72>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 0214 	bic.w	r2, r2, #20
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	e007      	b.n	8006e9a <HAL_DMA_IRQHandler+0xc82>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 020a 	bic.w	r2, r2, #10
 8006e98:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80b8 	beq.w	8007024 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ebc:	e0b2      	b.n	8007024 <HAL_DMA_IRQHandler+0xe0c>
 8006ebe:	bf00      	nop
 8006ec0:	40020010 	.word	0x40020010
 8006ec4:	40020028 	.word	0x40020028
 8006ec8:	40020040 	.word	0x40020040
 8006ecc:	40020058 	.word	0x40020058
 8006ed0:	40020070 	.word	0x40020070
 8006ed4:	40020088 	.word	0x40020088
 8006ed8:	400200a0 	.word	0x400200a0
 8006edc:	400200b8 	.word	0x400200b8
 8006ee0:	40020410 	.word	0x40020410
 8006ee4:	40020428 	.word	0x40020428
 8006ee8:	40020440 	.word	0x40020440
 8006eec:	40020458 	.word	0x40020458
 8006ef0:	40020470 	.word	0x40020470
 8006ef4:	40020488 	.word	0x40020488
 8006ef8:	400204a0 	.word	0x400204a0
 8006efc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f04:	f003 031f 	and.w	r3, r3, #31
 8006f08:	2208      	movs	r2, #8
 8006f0a:	409a      	lsls	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8088 	beq.w	8007026 <HAL_DMA_IRQHandler+0xe0e>
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f003 0308 	and.w	r3, r3, #8
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8082 	beq.w	8007026 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a41      	ldr	r2, [pc, #260]	; (800702c <HAL_DMA_IRQHandler+0xe14>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d04a      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a3f      	ldr	r2, [pc, #252]	; (8007030 <HAL_DMA_IRQHandler+0xe18>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d045      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a3e      	ldr	r2, [pc, #248]	; (8007034 <HAL_DMA_IRQHandler+0xe1c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d040      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a3c      	ldr	r2, [pc, #240]	; (8007038 <HAL_DMA_IRQHandler+0xe20>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d03b      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a3b      	ldr	r2, [pc, #236]	; (800703c <HAL_DMA_IRQHandler+0xe24>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d036      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a39      	ldr	r2, [pc, #228]	; (8007040 <HAL_DMA_IRQHandler+0xe28>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d031      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a38      	ldr	r2, [pc, #224]	; (8007044 <HAL_DMA_IRQHandler+0xe2c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d02c      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a36      	ldr	r2, [pc, #216]	; (8007048 <HAL_DMA_IRQHandler+0xe30>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d027      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a35      	ldr	r2, [pc, #212]	; (800704c <HAL_DMA_IRQHandler+0xe34>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d022      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a33      	ldr	r2, [pc, #204]	; (8007050 <HAL_DMA_IRQHandler+0xe38>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d01d      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a32      	ldr	r2, [pc, #200]	; (8007054 <HAL_DMA_IRQHandler+0xe3c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d018      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a30      	ldr	r2, [pc, #192]	; (8007058 <HAL_DMA_IRQHandler+0xe40>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a2f      	ldr	r2, [pc, #188]	; (800705c <HAL_DMA_IRQHandler+0xe44>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a2d      	ldr	r2, [pc, #180]	; (8007060 <HAL_DMA_IRQHandler+0xe48>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d009      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a2c      	ldr	r2, [pc, #176]	; (8007064 <HAL_DMA_IRQHandler+0xe4c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d004      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xdaa>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a2a      	ldr	r2, [pc, #168]	; (8007068 <HAL_DMA_IRQHandler+0xe50>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d108      	bne.n	8006fd4 <HAL_DMA_IRQHandler+0xdbc>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 021c 	bic.w	r2, r2, #28
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	e007      	b.n	8006fe4 <HAL_DMA_IRQHandler+0xdcc>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 020e 	bic.w	r2, r2, #14
 8006fe2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe8:	f003 031f 	and.w	r3, r3, #31
 8006fec:	2201      	movs	r2, #1
 8006fee:	409a      	lsls	r2, r3
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d009      	beq.n	8007026 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	4798      	blx	r3
 800701a:	e004      	b.n	8007026 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800701c:	bf00      	nop
 800701e:	e002      	b.n	8007026 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007020:	bf00      	nop
 8007022:	e000      	b.n	8007026 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007024:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007026:	3728      	adds	r7, #40	; 0x28
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	40020010 	.word	0x40020010
 8007030:	40020028 	.word	0x40020028
 8007034:	40020040 	.word	0x40020040
 8007038:	40020058 	.word	0x40020058
 800703c:	40020070 	.word	0x40020070
 8007040:	40020088 	.word	0x40020088
 8007044:	400200a0 	.word	0x400200a0
 8007048:	400200b8 	.word	0x400200b8
 800704c:	40020410 	.word	0x40020410
 8007050:	40020428 	.word	0x40020428
 8007054:	40020440 	.word	0x40020440
 8007058:	40020458 	.word	0x40020458
 800705c:	40020470 	.word	0x40020470
 8007060:	40020488 	.word	0x40020488
 8007064:	400204a0 	.word	0x400204a0
 8007068:	400204b8 	.word	0x400204b8

0800706c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007084:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a84      	ldr	r2, [pc, #528]	; (800729c <DMA_SetConfig+0x230>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d072      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a82      	ldr	r2, [pc, #520]	; (80072a0 <DMA_SetConfig+0x234>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d06d      	beq.n	8007176 <DMA_SetConfig+0x10a>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a81      	ldr	r2, [pc, #516]	; (80072a4 <DMA_SetConfig+0x238>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d068      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a7f      	ldr	r2, [pc, #508]	; (80072a8 <DMA_SetConfig+0x23c>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d063      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a7e      	ldr	r2, [pc, #504]	; (80072ac <DMA_SetConfig+0x240>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d05e      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a7c      	ldr	r2, [pc, #496]	; (80072b0 <DMA_SetConfig+0x244>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d059      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a7b      	ldr	r2, [pc, #492]	; (80072b4 <DMA_SetConfig+0x248>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d054      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a79      	ldr	r2, [pc, #484]	; (80072b8 <DMA_SetConfig+0x24c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d04f      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a78      	ldr	r2, [pc, #480]	; (80072bc <DMA_SetConfig+0x250>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d04a      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a76      	ldr	r2, [pc, #472]	; (80072c0 <DMA_SetConfig+0x254>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d045      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a75      	ldr	r2, [pc, #468]	; (80072c4 <DMA_SetConfig+0x258>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d040      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a73      	ldr	r2, [pc, #460]	; (80072c8 <DMA_SetConfig+0x25c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d03b      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a72      	ldr	r2, [pc, #456]	; (80072cc <DMA_SetConfig+0x260>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d036      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a70      	ldr	r2, [pc, #448]	; (80072d0 <DMA_SetConfig+0x264>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d031      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a6f      	ldr	r2, [pc, #444]	; (80072d4 <DMA_SetConfig+0x268>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d02c      	beq.n	8007176 <DMA_SetConfig+0x10a>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a6d      	ldr	r2, [pc, #436]	; (80072d8 <DMA_SetConfig+0x26c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d027      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a6c      	ldr	r2, [pc, #432]	; (80072dc <DMA_SetConfig+0x270>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d022      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a6a      	ldr	r2, [pc, #424]	; (80072e0 <DMA_SetConfig+0x274>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d01d      	beq.n	8007176 <DMA_SetConfig+0x10a>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a69      	ldr	r2, [pc, #420]	; (80072e4 <DMA_SetConfig+0x278>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d018      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a67      	ldr	r2, [pc, #412]	; (80072e8 <DMA_SetConfig+0x27c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <DMA_SetConfig+0x10a>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a66      	ldr	r2, [pc, #408]	; (80072ec <DMA_SetConfig+0x280>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00e      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a64      	ldr	r2, [pc, #400]	; (80072f0 <DMA_SetConfig+0x284>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d009      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a63      	ldr	r2, [pc, #396]	; (80072f4 <DMA_SetConfig+0x288>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d004      	beq.n	8007176 <DMA_SetConfig+0x10a>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a61      	ldr	r2, [pc, #388]	; (80072f8 <DMA_SetConfig+0x28c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d101      	bne.n	800717a <DMA_SetConfig+0x10e>
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <DMA_SetConfig+0x110>
 800717a:	2300      	movs	r3, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00d      	beq.n	800719c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007188:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800719a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a3e      	ldr	r2, [pc, #248]	; (800729c <DMA_SetConfig+0x230>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d04a      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a3d      	ldr	r2, [pc, #244]	; (80072a0 <DMA_SetConfig+0x234>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d045      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a3b      	ldr	r2, [pc, #236]	; (80072a4 <DMA_SetConfig+0x238>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d040      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a3a      	ldr	r2, [pc, #232]	; (80072a8 <DMA_SetConfig+0x23c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d03b      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a38      	ldr	r2, [pc, #224]	; (80072ac <DMA_SetConfig+0x240>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d036      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a37      	ldr	r2, [pc, #220]	; (80072b0 <DMA_SetConfig+0x244>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d031      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a35      	ldr	r2, [pc, #212]	; (80072b4 <DMA_SetConfig+0x248>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d02c      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a34      	ldr	r2, [pc, #208]	; (80072b8 <DMA_SetConfig+0x24c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d027      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a32      	ldr	r2, [pc, #200]	; (80072bc <DMA_SetConfig+0x250>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d022      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a31      	ldr	r2, [pc, #196]	; (80072c0 <DMA_SetConfig+0x254>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d01d      	beq.n	800723c <DMA_SetConfig+0x1d0>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a2f      	ldr	r2, [pc, #188]	; (80072c4 <DMA_SetConfig+0x258>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d018      	beq.n	800723c <DMA_SetConfig+0x1d0>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a2e      	ldr	r2, [pc, #184]	; (80072c8 <DMA_SetConfig+0x25c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d013      	beq.n	800723c <DMA_SetConfig+0x1d0>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a2c      	ldr	r2, [pc, #176]	; (80072cc <DMA_SetConfig+0x260>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d00e      	beq.n	800723c <DMA_SetConfig+0x1d0>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a2b      	ldr	r2, [pc, #172]	; (80072d0 <DMA_SetConfig+0x264>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d009      	beq.n	800723c <DMA_SetConfig+0x1d0>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a29      	ldr	r2, [pc, #164]	; (80072d4 <DMA_SetConfig+0x268>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d004      	beq.n	800723c <DMA_SetConfig+0x1d0>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a28      	ldr	r2, [pc, #160]	; (80072d8 <DMA_SetConfig+0x26c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d101      	bne.n	8007240 <DMA_SetConfig+0x1d4>
 800723c:	2301      	movs	r3, #1
 800723e:	e000      	b.n	8007242 <DMA_SetConfig+0x1d6>
 8007240:	2300      	movs	r3, #0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d05a      	beq.n	80072fc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800724a:	f003 031f 	and.w	r3, r3, #31
 800724e:	223f      	movs	r2, #63	; 0x3f
 8007250:	409a      	lsls	r2, r3
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007264:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b40      	cmp	r3, #64	; 0x40
 8007274:	d108      	bne.n	8007288 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007286:	e087      	b.n	8007398 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	60da      	str	r2, [r3, #12]
}
 8007298:	e07e      	b.n	8007398 <DMA_SetConfig+0x32c>
 800729a:	bf00      	nop
 800729c:	40020010 	.word	0x40020010
 80072a0:	40020028 	.word	0x40020028
 80072a4:	40020040 	.word	0x40020040
 80072a8:	40020058 	.word	0x40020058
 80072ac:	40020070 	.word	0x40020070
 80072b0:	40020088 	.word	0x40020088
 80072b4:	400200a0 	.word	0x400200a0
 80072b8:	400200b8 	.word	0x400200b8
 80072bc:	40020410 	.word	0x40020410
 80072c0:	40020428 	.word	0x40020428
 80072c4:	40020440 	.word	0x40020440
 80072c8:	40020458 	.word	0x40020458
 80072cc:	40020470 	.word	0x40020470
 80072d0:	40020488 	.word	0x40020488
 80072d4:	400204a0 	.word	0x400204a0
 80072d8:	400204b8 	.word	0x400204b8
 80072dc:	58025408 	.word	0x58025408
 80072e0:	5802541c 	.word	0x5802541c
 80072e4:	58025430 	.word	0x58025430
 80072e8:	58025444 	.word	0x58025444
 80072ec:	58025458 	.word	0x58025458
 80072f0:	5802546c 	.word	0x5802546c
 80072f4:	58025480 	.word	0x58025480
 80072f8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a28      	ldr	r2, [pc, #160]	; (80073a4 <DMA_SetConfig+0x338>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d022      	beq.n	800734c <DMA_SetConfig+0x2e0>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a27      	ldr	r2, [pc, #156]	; (80073a8 <DMA_SetConfig+0x33c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d01d      	beq.n	800734c <DMA_SetConfig+0x2e0>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a25      	ldr	r2, [pc, #148]	; (80073ac <DMA_SetConfig+0x340>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d018      	beq.n	800734c <DMA_SetConfig+0x2e0>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a24      	ldr	r2, [pc, #144]	; (80073b0 <DMA_SetConfig+0x344>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d013      	beq.n	800734c <DMA_SetConfig+0x2e0>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a22      	ldr	r2, [pc, #136]	; (80073b4 <DMA_SetConfig+0x348>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d00e      	beq.n	800734c <DMA_SetConfig+0x2e0>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a21      	ldr	r2, [pc, #132]	; (80073b8 <DMA_SetConfig+0x34c>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d009      	beq.n	800734c <DMA_SetConfig+0x2e0>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1f      	ldr	r2, [pc, #124]	; (80073bc <DMA_SetConfig+0x350>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d004      	beq.n	800734c <DMA_SetConfig+0x2e0>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1e      	ldr	r2, [pc, #120]	; (80073c0 <DMA_SetConfig+0x354>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d101      	bne.n	8007350 <DMA_SetConfig+0x2e4>
 800734c:	2301      	movs	r3, #1
 800734e:	e000      	b.n	8007352 <DMA_SetConfig+0x2e6>
 8007350:	2300      	movs	r3, #0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d020      	beq.n	8007398 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	2201      	movs	r2, #1
 8007360:	409a      	lsls	r2, r3
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d108      	bne.n	8007388 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	60da      	str	r2, [r3, #12]
}
 8007386:	e007      	b.n	8007398 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	60da      	str	r2, [r3, #12]
}
 8007398:	bf00      	nop
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	58025408 	.word	0x58025408
 80073a8:	5802541c 	.word	0x5802541c
 80073ac:	58025430 	.word	0x58025430
 80073b0:	58025444 	.word	0x58025444
 80073b4:	58025458 	.word	0x58025458
 80073b8:	5802546c 	.word	0x5802546c
 80073bc:	58025480 	.word	0x58025480
 80073c0:	58025494 	.word	0x58025494

080073c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a42      	ldr	r2, [pc, #264]	; (80074dc <DMA_CalcBaseAndBitshift+0x118>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d04a      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a41      	ldr	r2, [pc, #260]	; (80074e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d045      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a3f      	ldr	r2, [pc, #252]	; (80074e4 <DMA_CalcBaseAndBitshift+0x120>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d040      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a3e      	ldr	r2, [pc, #248]	; (80074e8 <DMA_CalcBaseAndBitshift+0x124>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d03b      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a3c      	ldr	r2, [pc, #240]	; (80074ec <DMA_CalcBaseAndBitshift+0x128>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d036      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a3b      	ldr	r2, [pc, #236]	; (80074f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d031      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a39      	ldr	r2, [pc, #228]	; (80074f4 <DMA_CalcBaseAndBitshift+0x130>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d02c      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a38      	ldr	r2, [pc, #224]	; (80074f8 <DMA_CalcBaseAndBitshift+0x134>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d027      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a36      	ldr	r2, [pc, #216]	; (80074fc <DMA_CalcBaseAndBitshift+0x138>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d022      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a35      	ldr	r2, [pc, #212]	; (8007500 <DMA_CalcBaseAndBitshift+0x13c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d01d      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a33      	ldr	r2, [pc, #204]	; (8007504 <DMA_CalcBaseAndBitshift+0x140>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d018      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a32      	ldr	r2, [pc, #200]	; (8007508 <DMA_CalcBaseAndBitshift+0x144>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d013      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a30      	ldr	r2, [pc, #192]	; (800750c <DMA_CalcBaseAndBitshift+0x148>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00e      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a2f      	ldr	r2, [pc, #188]	; (8007510 <DMA_CalcBaseAndBitshift+0x14c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d009      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a2d      	ldr	r2, [pc, #180]	; (8007514 <DMA_CalcBaseAndBitshift+0x150>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d004      	beq.n	800746c <DMA_CalcBaseAndBitshift+0xa8>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2c      	ldr	r2, [pc, #176]	; (8007518 <DMA_CalcBaseAndBitshift+0x154>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d101      	bne.n	8007470 <DMA_CalcBaseAndBitshift+0xac>
 800746c:	2301      	movs	r3, #1
 800746e:	e000      	b.n	8007472 <DMA_CalcBaseAndBitshift+0xae>
 8007470:	2300      	movs	r3, #0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d024      	beq.n	80074c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	3b10      	subs	r3, #16
 800747e:	4a27      	ldr	r2, [pc, #156]	; (800751c <DMA_CalcBaseAndBitshift+0x158>)
 8007480:	fba2 2303 	umull	r2, r3, r2, r3
 8007484:	091b      	lsrs	r3, r3, #4
 8007486:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f003 0307 	and.w	r3, r3, #7
 800748e:	4a24      	ldr	r2, [pc, #144]	; (8007520 <DMA_CalcBaseAndBitshift+0x15c>)
 8007490:	5cd3      	ldrb	r3, [r2, r3]
 8007492:	461a      	mov	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b03      	cmp	r3, #3
 800749c:	d908      	bls.n	80074b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	4b1f      	ldr	r3, [pc, #124]	; (8007524 <DMA_CalcBaseAndBitshift+0x160>)
 80074a6:	4013      	ands	r3, r2
 80074a8:	1d1a      	adds	r2, r3, #4
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	659a      	str	r2, [r3, #88]	; 0x58
 80074ae:	e00d      	b.n	80074cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	461a      	mov	r2, r3
 80074b6:	4b1b      	ldr	r3, [pc, #108]	; (8007524 <DMA_CalcBaseAndBitshift+0x160>)
 80074b8:	4013      	ands	r3, r2
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	6593      	str	r3, [r2, #88]	; 0x58
 80074be:	e005      	b.n	80074cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	40020010 	.word	0x40020010
 80074e0:	40020028 	.word	0x40020028
 80074e4:	40020040 	.word	0x40020040
 80074e8:	40020058 	.word	0x40020058
 80074ec:	40020070 	.word	0x40020070
 80074f0:	40020088 	.word	0x40020088
 80074f4:	400200a0 	.word	0x400200a0
 80074f8:	400200b8 	.word	0x400200b8
 80074fc:	40020410 	.word	0x40020410
 8007500:	40020428 	.word	0x40020428
 8007504:	40020440 	.word	0x40020440
 8007508:	40020458 	.word	0x40020458
 800750c:	40020470 	.word	0x40020470
 8007510:	40020488 	.word	0x40020488
 8007514:	400204a0 	.word	0x400204a0
 8007518:	400204b8 	.word	0x400204b8
 800751c:	aaaaaaab 	.word	0xaaaaaaab
 8007520:	08010e2c 	.word	0x08010e2c
 8007524:	fffffc00 	.word	0xfffffc00

08007528 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d120      	bne.n	800757e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	2b03      	cmp	r3, #3
 8007542:	d858      	bhi.n	80075f6 <DMA_CheckFifoParam+0xce>
 8007544:	a201      	add	r2, pc, #4	; (adr r2, 800754c <DMA_CheckFifoParam+0x24>)
 8007546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754a:	bf00      	nop
 800754c:	0800755d 	.word	0x0800755d
 8007550:	0800756f 	.word	0x0800756f
 8007554:	0800755d 	.word	0x0800755d
 8007558:	080075f7 	.word	0x080075f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d048      	beq.n	80075fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800756c:	e045      	b.n	80075fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007572:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007576:	d142      	bne.n	80075fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800757c:	e03f      	b.n	80075fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007586:	d123      	bne.n	80075d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758c:	2b03      	cmp	r3, #3
 800758e:	d838      	bhi.n	8007602 <DMA_CheckFifoParam+0xda>
 8007590:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <DMA_CheckFifoParam+0x70>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075af 	.word	0x080075af
 80075a0:	080075a9 	.word	0x080075a9
 80075a4:	080075c1 	.word	0x080075c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]
        break;
 80075ac:	e030      	b.n	8007610 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d025      	beq.n	8007606 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075be:	e022      	b.n	8007606 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075c8:	d11f      	bne.n	800760a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075ce:	e01c      	b.n	800760a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d902      	bls.n	80075de <DMA_CheckFifoParam+0xb6>
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d003      	beq.n	80075e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80075dc:	e018      	b.n	8007610 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	73fb      	strb	r3, [r7, #15]
        break;
 80075e2:	e015      	b.n	8007610 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00e      	beq.n	800760e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	73fb      	strb	r3, [r7, #15]
    break;
 80075f4:	e00b      	b.n	800760e <DMA_CheckFifoParam+0xe6>
        break;
 80075f6:	bf00      	nop
 80075f8:	e00a      	b.n	8007610 <DMA_CheckFifoParam+0xe8>
        break;
 80075fa:	bf00      	nop
 80075fc:	e008      	b.n	8007610 <DMA_CheckFifoParam+0xe8>
        break;
 80075fe:	bf00      	nop
 8007600:	e006      	b.n	8007610 <DMA_CheckFifoParam+0xe8>
        break;
 8007602:	bf00      	nop
 8007604:	e004      	b.n	8007610 <DMA_CheckFifoParam+0xe8>
        break;
 8007606:	bf00      	nop
 8007608:	e002      	b.n	8007610 <DMA_CheckFifoParam+0xe8>
        break;
 800760a:	bf00      	nop
 800760c:	e000      	b.n	8007610 <DMA_CheckFifoParam+0xe8>
    break;
 800760e:	bf00      	nop
    }
  }

  return status;
 8007610:	7bfb      	ldrb	r3, [r7, #15]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop

08007620 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a38      	ldr	r2, [pc, #224]	; (8007714 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d022      	beq.n	800767e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a36      	ldr	r2, [pc, #216]	; (8007718 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d01d      	beq.n	800767e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a35      	ldr	r2, [pc, #212]	; (800771c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d018      	beq.n	800767e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a33      	ldr	r2, [pc, #204]	; (8007720 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d013      	beq.n	800767e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a32      	ldr	r2, [pc, #200]	; (8007724 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d00e      	beq.n	800767e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a30      	ldr	r2, [pc, #192]	; (8007728 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d009      	beq.n	800767e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a2f      	ldr	r2, [pc, #188]	; (800772c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d004      	beq.n	800767e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a2d      	ldr	r2, [pc, #180]	; (8007730 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d101      	bne.n	8007682 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800767e:	2301      	movs	r3, #1
 8007680:	e000      	b.n	8007684 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007682:	2300      	movs	r3, #0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01a      	beq.n	80076be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	3b08      	subs	r3, #8
 8007690:	4a28      	ldr	r2, [pc, #160]	; (8007734 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	091b      	lsrs	r3, r3, #4
 8007698:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4b26      	ldr	r3, [pc, #152]	; (8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	461a      	mov	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a24      	ldr	r2, [pc, #144]	; (800773c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80076ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f003 031f 	and.w	r3, r3, #31
 80076b4:	2201      	movs	r2, #1
 80076b6:	409a      	lsls	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80076bc:	e024      	b.n	8007708 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	3b10      	subs	r3, #16
 80076c6:	4a1e      	ldr	r2, [pc, #120]	; (8007740 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80076c8:	fba2 2303 	umull	r2, r3, r2, r3
 80076cc:	091b      	lsrs	r3, r3, #4
 80076ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d806      	bhi.n	80076e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	4a1b      	ldr	r2, [pc, #108]	; (8007748 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d902      	bls.n	80076e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3308      	adds	r3, #8
 80076e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4b18      	ldr	r3, [pc, #96]	; (800774c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	461a      	mov	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a16      	ldr	r2, [pc, #88]	; (8007750 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80076f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f003 031f 	and.w	r3, r3, #31
 8007700:	2201      	movs	r2, #1
 8007702:	409a      	lsls	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007708:	bf00      	nop
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	58025408 	.word	0x58025408
 8007718:	5802541c 	.word	0x5802541c
 800771c:	58025430 	.word	0x58025430
 8007720:	58025444 	.word	0x58025444
 8007724:	58025458 	.word	0x58025458
 8007728:	5802546c 	.word	0x5802546c
 800772c:	58025480 	.word	0x58025480
 8007730:	58025494 	.word	0x58025494
 8007734:	cccccccd 	.word	0xcccccccd
 8007738:	16009600 	.word	0x16009600
 800773c:	58025880 	.word	0x58025880
 8007740:	aaaaaaab 	.word	0xaaaaaaab
 8007744:	400204b8 	.word	0x400204b8
 8007748:	4002040f 	.word	0x4002040f
 800774c:	10008200 	.word	0x10008200
 8007750:	40020880 	.word	0x40020880

08007754 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	b2db      	uxtb	r3, r3
 8007762:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d04a      	beq.n	8007800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b08      	cmp	r3, #8
 800776e:	d847      	bhi.n	8007800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a25      	ldr	r2, [pc, #148]	; (800780c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d022      	beq.n	80077c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a24      	ldr	r2, [pc, #144]	; (8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d01d      	beq.n	80077c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a22      	ldr	r2, [pc, #136]	; (8007814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d018      	beq.n	80077c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a21      	ldr	r2, [pc, #132]	; (8007818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d013      	beq.n	80077c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a1f      	ldr	r2, [pc, #124]	; (800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d00e      	beq.n	80077c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a1e      	ldr	r2, [pc, #120]	; (8007820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d009      	beq.n	80077c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a1c      	ldr	r2, [pc, #112]	; (8007824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d004      	beq.n	80077c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a1b      	ldr	r2, [pc, #108]	; (8007828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d101      	bne.n	80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80077c0:	2301      	movs	r3, #1
 80077c2:	e000      	b.n	80077c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80077c4:	2300      	movs	r3, #0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00a      	beq.n	80077e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4b17      	ldr	r3, [pc, #92]	; (800782c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	461a      	mov	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a15      	ldr	r2, [pc, #84]	; (8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80077dc:	671a      	str	r2, [r3, #112]	; 0x70
 80077de:	e009      	b.n	80077f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	4b14      	ldr	r3, [pc, #80]	; (8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	461a      	mov	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a11      	ldr	r2, [pc, #68]	; (8007838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80077f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	2201      	movs	r2, #1
 80077fa:	409a      	lsls	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007800:	bf00      	nop
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	58025408 	.word	0x58025408
 8007810:	5802541c 	.word	0x5802541c
 8007814:	58025430 	.word	0x58025430
 8007818:	58025444 	.word	0x58025444
 800781c:	58025458 	.word	0x58025458
 8007820:	5802546c 	.word	0x5802546c
 8007824:	58025480 	.word	0x58025480
 8007828:	58025494 	.word	0x58025494
 800782c:	1600963f 	.word	0x1600963f
 8007830:	58025940 	.word	0x58025940
 8007834:	1000823f 	.word	0x1000823f
 8007838:	40020940 	.word	0x40020940

0800783c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800783c:	b480      	push	{r7}
 800783e:	b089      	sub	sp, #36	; 0x24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007846:	2300      	movs	r3, #0
 8007848:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800784a:	4b89      	ldr	r3, [pc, #548]	; (8007a70 <HAL_GPIO_Init+0x234>)
 800784c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800784e:	e194      	b.n	8007b7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	2101      	movs	r1, #1
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	fa01 f303 	lsl.w	r3, r1, r3
 800785c:	4013      	ands	r3, r2
 800785e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 8186 	beq.w	8007b74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f003 0303 	and.w	r3, r3, #3
 8007870:	2b01      	cmp	r3, #1
 8007872:	d005      	beq.n	8007880 <HAL_GPIO_Init+0x44>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f003 0303 	and.w	r3, r3, #3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d130      	bne.n	80078e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	2203      	movs	r2, #3
 800788c:	fa02 f303 	lsl.w	r3, r2, r3
 8007890:	43db      	mvns	r3, r3
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	4013      	ands	r3, r2
 8007896:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	fa02 f303 	lsl.w	r3, r2, r3
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078b6:	2201      	movs	r2, #1
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	fa02 f303 	lsl.w	r3, r2, r3
 80078be:	43db      	mvns	r3, r3
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	4013      	ands	r3, r2
 80078c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	091b      	lsrs	r3, r3, #4
 80078cc:	f003 0201 	and.w	r2, r3, #1
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	fa02 f303 	lsl.w	r3, r2, r3
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	4313      	orrs	r3, r2
 80078da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f003 0303 	and.w	r3, r3, #3
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d017      	beq.n	800791e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	2203      	movs	r2, #3
 80078fa:	fa02 f303 	lsl.w	r3, r2, r3
 80078fe:	43db      	mvns	r3, r3
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	4013      	ands	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	4313      	orrs	r3, r2
 8007916:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d123      	bne.n	8007972 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	08da      	lsrs	r2, r3, #3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3208      	adds	r2, #8
 8007932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	f003 0307 	and.w	r3, r3, #7
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	220f      	movs	r2, #15
 8007942:	fa02 f303 	lsl.w	r3, r2, r3
 8007946:	43db      	mvns	r3, r3
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	4013      	ands	r3, r2
 800794c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	691a      	ldr	r2, [r3, #16]
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	4313      	orrs	r3, r2
 8007962:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	08da      	lsrs	r2, r3, #3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3208      	adds	r2, #8
 800796c:	69b9      	ldr	r1, [r7, #24]
 800796e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	2203      	movs	r2, #3
 800797e:	fa02 f303 	lsl.w	r3, r2, r3
 8007982:	43db      	mvns	r3, r3
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	4013      	ands	r3, r2
 8007988:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f003 0203 	and.w	r2, r3, #3
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	fa02 f303 	lsl.w	r3, r2, r3
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	4313      	orrs	r3, r2
 800799e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 80e0 	beq.w	8007b74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079b4:	4b2f      	ldr	r3, [pc, #188]	; (8007a74 <HAL_GPIO_Init+0x238>)
 80079b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079ba:	4a2e      	ldr	r2, [pc, #184]	; (8007a74 <HAL_GPIO_Init+0x238>)
 80079bc:	f043 0302 	orr.w	r3, r3, #2
 80079c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80079c4:	4b2b      	ldr	r3, [pc, #172]	; (8007a74 <HAL_GPIO_Init+0x238>)
 80079c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079d2:	4a29      	ldr	r2, [pc, #164]	; (8007a78 <HAL_GPIO_Init+0x23c>)
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	089b      	lsrs	r3, r3, #2
 80079d8:	3302      	adds	r3, #2
 80079da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	f003 0303 	and.w	r3, r3, #3
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	220f      	movs	r2, #15
 80079ea:	fa02 f303 	lsl.w	r3, r2, r3
 80079ee:	43db      	mvns	r3, r3
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	4013      	ands	r3, r2
 80079f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a20      	ldr	r2, [pc, #128]	; (8007a7c <HAL_GPIO_Init+0x240>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d052      	beq.n	8007aa4 <HAL_GPIO_Init+0x268>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a1f      	ldr	r2, [pc, #124]	; (8007a80 <HAL_GPIO_Init+0x244>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d031      	beq.n	8007a6a <HAL_GPIO_Init+0x22e>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a1e      	ldr	r2, [pc, #120]	; (8007a84 <HAL_GPIO_Init+0x248>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d02b      	beq.n	8007a66 <HAL_GPIO_Init+0x22a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a1d      	ldr	r2, [pc, #116]	; (8007a88 <HAL_GPIO_Init+0x24c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d025      	beq.n	8007a62 <HAL_GPIO_Init+0x226>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a1c      	ldr	r2, [pc, #112]	; (8007a8c <HAL_GPIO_Init+0x250>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d01f      	beq.n	8007a5e <HAL_GPIO_Init+0x222>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a1b      	ldr	r2, [pc, #108]	; (8007a90 <HAL_GPIO_Init+0x254>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d019      	beq.n	8007a5a <HAL_GPIO_Init+0x21e>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a1a      	ldr	r2, [pc, #104]	; (8007a94 <HAL_GPIO_Init+0x258>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d013      	beq.n	8007a56 <HAL_GPIO_Init+0x21a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a19      	ldr	r2, [pc, #100]	; (8007a98 <HAL_GPIO_Init+0x25c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00d      	beq.n	8007a52 <HAL_GPIO_Init+0x216>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a18      	ldr	r2, [pc, #96]	; (8007a9c <HAL_GPIO_Init+0x260>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d007      	beq.n	8007a4e <HAL_GPIO_Init+0x212>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a17      	ldr	r2, [pc, #92]	; (8007aa0 <HAL_GPIO_Init+0x264>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d101      	bne.n	8007a4a <HAL_GPIO_Init+0x20e>
 8007a46:	2309      	movs	r3, #9
 8007a48:	e02d      	b.n	8007aa6 <HAL_GPIO_Init+0x26a>
 8007a4a:	230a      	movs	r3, #10
 8007a4c:	e02b      	b.n	8007aa6 <HAL_GPIO_Init+0x26a>
 8007a4e:	2308      	movs	r3, #8
 8007a50:	e029      	b.n	8007aa6 <HAL_GPIO_Init+0x26a>
 8007a52:	2307      	movs	r3, #7
 8007a54:	e027      	b.n	8007aa6 <HAL_GPIO_Init+0x26a>
 8007a56:	2306      	movs	r3, #6
 8007a58:	e025      	b.n	8007aa6 <HAL_GPIO_Init+0x26a>
 8007a5a:	2305      	movs	r3, #5
 8007a5c:	e023      	b.n	8007aa6 <HAL_GPIO_Init+0x26a>
 8007a5e:	2304      	movs	r3, #4
 8007a60:	e021      	b.n	8007aa6 <HAL_GPIO_Init+0x26a>
 8007a62:	2303      	movs	r3, #3
 8007a64:	e01f      	b.n	8007aa6 <HAL_GPIO_Init+0x26a>
 8007a66:	2302      	movs	r3, #2
 8007a68:	e01d      	b.n	8007aa6 <HAL_GPIO_Init+0x26a>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e01b      	b.n	8007aa6 <HAL_GPIO_Init+0x26a>
 8007a6e:	bf00      	nop
 8007a70:	58000080 	.word	0x58000080
 8007a74:	58024400 	.word	0x58024400
 8007a78:	58000400 	.word	0x58000400
 8007a7c:	58020000 	.word	0x58020000
 8007a80:	58020400 	.word	0x58020400
 8007a84:	58020800 	.word	0x58020800
 8007a88:	58020c00 	.word	0x58020c00
 8007a8c:	58021000 	.word	0x58021000
 8007a90:	58021400 	.word	0x58021400
 8007a94:	58021800 	.word	0x58021800
 8007a98:	58021c00 	.word	0x58021c00
 8007a9c:	58022000 	.word	0x58022000
 8007aa0:	58022400 	.word	0x58022400
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	f002 0203 	and.w	r2, r2, #3
 8007aac:	0092      	lsls	r2, r2, #2
 8007aae:	4093      	lsls	r3, r2
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ab6:	4938      	ldr	r1, [pc, #224]	; (8007b98 <HAL_GPIO_Init+0x35c>)
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	089b      	lsrs	r3, r3, #2
 8007abc:	3302      	adds	r3, #2
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	43db      	mvns	r3, r3
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	43db      	mvns	r3, r3
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	4013      	ands	r3, r2
 8007b02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	43db      	mvns	r3, r3
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	4013      	ands	r3, r2
 8007b58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	3301      	adds	r3, #1
 8007b78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	fa22 f303 	lsr.w	r3, r2, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f47f ae63 	bne.w	8007850 <HAL_GPIO_Init+0x14>
  }
}
 8007b8a:	bf00      	nop
 8007b8c:	bf00      	nop
 8007b8e:	3724      	adds	r7, #36	; 0x24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	58000400 	.word	0x58000400

08007b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	807b      	strh	r3, [r7, #2]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007bac:	787b      	ldrb	r3, [r7, #1]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bb2:	887a      	ldrh	r2, [r7, #2]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007bb8:	e003      	b.n	8007bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007bba:	887b      	ldrh	r3, [r7, #2]
 8007bbc:	041a      	lsls	r2, r3, #16
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	619a      	str	r2, [r3, #24]
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007be0:	88fb      	ldrh	r3, [r7, #6]
 8007be2:	4013      	ands	r3, r2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d008      	beq.n	8007bfa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007bf2:	88fb      	ldrh	r3, [r7, #6]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fa fe73 	bl	80028e0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007bfa:	bf00      	nop
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c0c:	4b19      	ldr	r3, [pc, #100]	; (8007c74 <HAL_PWREx_ConfigSupply+0x70>)
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d00a      	beq.n	8007c2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c18:	4b16      	ldr	r3, [pc, #88]	; (8007c74 <HAL_PWREx_ConfigSupply+0x70>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f003 0307 	and.w	r3, r3, #7
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d001      	beq.n	8007c2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e01f      	b.n	8007c6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e01d      	b.n	8007c6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c2e:	4b11      	ldr	r3, [pc, #68]	; (8007c74 <HAL_PWREx_ConfigSupply+0x70>)
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f023 0207 	bic.w	r2, r3, #7
 8007c36:	490f      	ldr	r1, [pc, #60]	; (8007c74 <HAL_PWREx_ConfigSupply+0x70>)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c3e:	f7fc fc91 	bl	8004564 <HAL_GetTick>
 8007c42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c44:	e009      	b.n	8007c5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c46:	f7fc fc8d 	bl	8004564 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c54:	d901      	bls.n	8007c5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e007      	b.n	8007c6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c5a:	4b06      	ldr	r3, [pc, #24]	; (8007c74 <HAL_PWREx_ConfigSupply+0x70>)
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c66:	d1ee      	bne.n	8007c46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	58024800 	.word	0x58024800

08007c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08c      	sub	sp, #48	; 0x30
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d102      	bne.n	8007c8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f000 bc1c 	b.w	80084c4 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 8087 	beq.w	8007da8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c9a:	4b9e      	ldr	r3, [pc, #632]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ca4:	4b9b      	ldr	r3, [pc, #620]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cac:	2b10      	cmp	r3, #16
 8007cae:	d007      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x48>
 8007cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb2:	2b18      	cmp	r3, #24
 8007cb4:	d110      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x60>
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d10b      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cc0:	4b94      	ldr	r3, [pc, #592]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d06c      	beq.n	8007da6 <HAL_RCC_OscConfig+0x12e>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d168      	bne.n	8007da6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e3f5      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce0:	d106      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x78>
 8007ce2:	4b8c      	ldr	r3, [pc, #560]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a8b      	ldr	r2, [pc, #556]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	e02e      	b.n	8007d4e <HAL_RCC_OscConfig+0xd6>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10c      	bne.n	8007d12 <HAL_RCC_OscConfig+0x9a>
 8007cf8:	4b86      	ldr	r3, [pc, #536]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a85      	ldr	r2, [pc, #532]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	4b83      	ldr	r3, [pc, #524]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a82      	ldr	r2, [pc, #520]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	e01d      	b.n	8007d4e <HAL_RCC_OscConfig+0xd6>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d1a:	d10c      	bne.n	8007d36 <HAL_RCC_OscConfig+0xbe>
 8007d1c:	4b7d      	ldr	r3, [pc, #500]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a7c      	ldr	r2, [pc, #496]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007d22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	4b7a      	ldr	r3, [pc, #488]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a79      	ldr	r2, [pc, #484]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	e00b      	b.n	8007d4e <HAL_RCC_OscConfig+0xd6>
 8007d36:	4b77      	ldr	r3, [pc, #476]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a76      	ldr	r2, [pc, #472]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	4b74      	ldr	r3, [pc, #464]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a73      	ldr	r2, [pc, #460]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d013      	beq.n	8007d7e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d56:	f7fc fc05 	bl	8004564 <HAL_GetTick>
 8007d5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d5c:	e008      	b.n	8007d70 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d5e:	f7fc fc01 	bl	8004564 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b64      	cmp	r3, #100	; 0x64
 8007d6a:	d901      	bls.n	8007d70 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e3a9      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d70:	4b68      	ldr	r3, [pc, #416]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0f0      	beq.n	8007d5e <HAL_RCC_OscConfig+0xe6>
 8007d7c:	e014      	b.n	8007da8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7e:	f7fc fbf1 	bl	8004564 <HAL_GetTick>
 8007d82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d84:	e008      	b.n	8007d98 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d86:	f7fc fbed 	bl	8004564 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b64      	cmp	r3, #100	; 0x64
 8007d92:	d901      	bls.n	8007d98 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e395      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d98:	4b5e      	ldr	r3, [pc, #376]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1f0      	bne.n	8007d86 <HAL_RCC_OscConfig+0x10e>
 8007da4:	e000      	b.n	8007da8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 80ca 	beq.w	8007f4a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007db6:	4b57      	ldr	r3, [pc, #348]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dbe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dc0:	4b54      	ldr	r3, [pc, #336]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d007      	beq.n	8007ddc <HAL_RCC_OscConfig+0x164>
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	2b18      	cmp	r3, #24
 8007dd0:	d156      	bne.n	8007e80 <HAL_RCC_OscConfig+0x208>
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	f003 0303 	and.w	r3, r3, #3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d151      	bne.n	8007e80 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ddc:	4b4d      	ldr	r3, [pc, #308]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d005      	beq.n	8007df4 <HAL_RCC_OscConfig+0x17c>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e367      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007df4:	4b47      	ldr	r3, [pc, #284]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f023 0219 	bic.w	r2, r3, #25
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	4944      	ldr	r1, [pc, #272]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e06:	f7fc fbad 	bl	8004564 <HAL_GetTick>
 8007e0a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e0c:	e008      	b.n	8007e20 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e0e:	f7fc fba9 	bl	8004564 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d901      	bls.n	8007e20 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e351      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e20:	4b3c      	ldr	r3, [pc, #240]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0304 	and.w	r3, r3, #4
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0f0      	beq.n	8007e0e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e2c:	f7fc fba6 	bl	800457c <HAL_GetREVID>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d817      	bhi.n	8007e6a <HAL_RCC_OscConfig+0x1f2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	2b40      	cmp	r3, #64	; 0x40
 8007e40:	d108      	bne.n	8007e54 <HAL_RCC_OscConfig+0x1dc>
 8007e42:	4b34      	ldr	r3, [pc, #208]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007e4a:	4a32      	ldr	r2, [pc, #200]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e50:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e52:	e07a      	b.n	8007f4a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e54:	4b2f      	ldr	r3, [pc, #188]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	031b      	lsls	r3, r3, #12
 8007e62:	492c      	ldr	r1, [pc, #176]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e68:	e06f      	b.n	8007f4a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e6a:	4b2a      	ldr	r3, [pc, #168]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	061b      	lsls	r3, r3, #24
 8007e78:	4926      	ldr	r1, [pc, #152]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e7e:	e064      	b.n	8007f4a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d047      	beq.n	8007f18 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e88:	4b22      	ldr	r3, [pc, #136]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f023 0219 	bic.w	r2, r3, #25
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	491f      	ldr	r1, [pc, #124]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e9a:	f7fc fb63 	bl	8004564 <HAL_GetTick>
 8007e9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ea0:	e008      	b.n	8007eb4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ea2:	f7fc fb5f 	bl	8004564 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d901      	bls.n	8007eb4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e307      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eb4:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0f0      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ec0:	f7fc fb5c 	bl	800457c <HAL_GetREVID>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	f241 0203 	movw	r2, #4099	; 0x1003
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d817      	bhi.n	8007efe <HAL_RCC_OscConfig+0x286>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b40      	cmp	r3, #64	; 0x40
 8007ed4:	d108      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x270>
 8007ed6:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007ede:	4a0d      	ldr	r2, [pc, #52]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ee4:	6053      	str	r3, [r2, #4]
 8007ee6:	e030      	b.n	8007f4a <HAL_RCC_OscConfig+0x2d2>
 8007ee8:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	031b      	lsls	r3, r3, #12
 8007ef6:	4907      	ldr	r1, [pc, #28]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	604b      	str	r3, [r1, #4]
 8007efc:	e025      	b.n	8007f4a <HAL_RCC_OscConfig+0x2d2>
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	061b      	lsls	r3, r3, #24
 8007f0c:	4901      	ldr	r1, [pc, #4]	; (8007f14 <HAL_RCC_OscConfig+0x29c>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	604b      	str	r3, [r1, #4]
 8007f12:	e01a      	b.n	8007f4a <HAL_RCC_OscConfig+0x2d2>
 8007f14:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f18:	4b9e      	ldr	r3, [pc, #632]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a9d      	ldr	r2, [pc, #628]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007f1e:	f023 0301 	bic.w	r3, r3, #1
 8007f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f24:	f7fc fb1e 	bl	8004564 <HAL_GetTick>
 8007f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f2a:	e008      	b.n	8007f3e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f2c:	f7fc fb1a 	bl	8004564 <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d901      	bls.n	8007f3e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e2c2      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f3e:	4b95      	ldr	r3, [pc, #596]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0304 	and.w	r3, r3, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1f0      	bne.n	8007f2c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0310 	and.w	r3, r3, #16
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 80a9 	beq.w	80080aa <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f58:	4b8e      	ldr	r3, [pc, #568]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f60:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f62:	4b8c      	ldr	r3, [pc, #560]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f66:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	2b08      	cmp	r3, #8
 8007f6c:	d007      	beq.n	8007f7e <HAL_RCC_OscConfig+0x306>
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	2b18      	cmp	r3, #24
 8007f72:	d13a      	bne.n	8007fea <HAL_RCC_OscConfig+0x372>
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d135      	bne.n	8007fea <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f7e:	4b85      	ldr	r3, [pc, #532]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d005      	beq.n	8007f96 <HAL_RCC_OscConfig+0x31e>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	2b80      	cmp	r3, #128	; 0x80
 8007f90:	d001      	beq.n	8007f96 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e296      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f96:	f7fc faf1 	bl	800457c <HAL_GetREVID>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d817      	bhi.n	8007fd4 <HAL_RCC_OscConfig+0x35c>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	2b20      	cmp	r3, #32
 8007faa:	d108      	bne.n	8007fbe <HAL_RCC_OscConfig+0x346>
 8007fac:	4b79      	ldr	r3, [pc, #484]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007fb4:	4a77      	ldr	r2, [pc, #476]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007fb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fba:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fbc:	e075      	b.n	80080aa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fbe:	4b75      	ldr	r3, [pc, #468]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	069b      	lsls	r3, r3, #26
 8007fcc:	4971      	ldr	r1, [pc, #452]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fd2:	e06a      	b.n	80080aa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fd4:	4b6f      	ldr	r3, [pc, #444]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	061b      	lsls	r3, r3, #24
 8007fe2:	496c      	ldr	r1, [pc, #432]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fe8:	e05f      	b.n	80080aa <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d042      	beq.n	8008078 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007ff2:	4b68      	ldr	r3, [pc, #416]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a67      	ldr	r2, [pc, #412]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8007ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ffe:	f7fc fab1 	bl	8004564 <HAL_GetTick>
 8008002:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008004:	e008      	b.n	8008018 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008006:	f7fc faad 	bl	8004564 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	2b02      	cmp	r3, #2
 8008012:	d901      	bls.n	8008018 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e255      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008018:	4b5e      	ldr	r3, [pc, #376]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008020:	2b00      	cmp	r3, #0
 8008022:	d0f0      	beq.n	8008006 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008024:	f7fc faaa 	bl	800457c <HAL_GetREVID>
 8008028:	4603      	mov	r3, r0
 800802a:	f241 0203 	movw	r2, #4099	; 0x1003
 800802e:	4293      	cmp	r3, r2
 8008030:	d817      	bhi.n	8008062 <HAL_RCC_OscConfig+0x3ea>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	2b20      	cmp	r3, #32
 8008038:	d108      	bne.n	800804c <HAL_RCC_OscConfig+0x3d4>
 800803a:	4b56      	ldr	r3, [pc, #344]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008042:	4a54      	ldr	r2, [pc, #336]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8008044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008048:	6053      	str	r3, [r2, #4]
 800804a:	e02e      	b.n	80080aa <HAL_RCC_OscConfig+0x432>
 800804c:	4b51      	ldr	r3, [pc, #324]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	069b      	lsls	r3, r3, #26
 800805a:	494e      	ldr	r1, [pc, #312]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 800805c:	4313      	orrs	r3, r2
 800805e:	604b      	str	r3, [r1, #4]
 8008060:	e023      	b.n	80080aa <HAL_RCC_OscConfig+0x432>
 8008062:	4b4c      	ldr	r3, [pc, #304]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	061b      	lsls	r3, r3, #24
 8008070:	4948      	ldr	r1, [pc, #288]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8008072:	4313      	orrs	r3, r2
 8008074:	60cb      	str	r3, [r1, #12]
 8008076:	e018      	b.n	80080aa <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008078:	4b46      	ldr	r3, [pc, #280]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a45      	ldr	r2, [pc, #276]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 800807e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008084:	f7fc fa6e 	bl	8004564 <HAL_GetTick>
 8008088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800808a:	e008      	b.n	800809e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800808c:	f7fc fa6a 	bl	8004564 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b02      	cmp	r3, #2
 8008098:	d901      	bls.n	800809e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e212      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800809e:	4b3d      	ldr	r3, [pc, #244]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1f0      	bne.n	800808c <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0308 	and.w	r3, r3, #8
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d036      	beq.n	8008124 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d019      	beq.n	80080f2 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080be:	4b35      	ldr	r3, [pc, #212]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 80080c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080c2:	4a34      	ldr	r2, [pc, #208]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 80080c4:	f043 0301 	orr.w	r3, r3, #1
 80080c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ca:	f7fc fa4b 	bl	8004564 <HAL_GetTick>
 80080ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080d0:	e008      	b.n	80080e4 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080d2:	f7fc fa47 	bl	8004564 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e1ef      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080e4:	4b2b      	ldr	r3, [pc, #172]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 80080e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0f0      	beq.n	80080d2 <HAL_RCC_OscConfig+0x45a>
 80080f0:	e018      	b.n	8008124 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080f2:	4b28      	ldr	r3, [pc, #160]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 80080f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f6:	4a27      	ldr	r2, [pc, #156]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 80080f8:	f023 0301 	bic.w	r3, r3, #1
 80080fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080fe:	f7fc fa31 	bl	8004564 <HAL_GetTick>
 8008102:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008104:	e008      	b.n	8008118 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008106:	f7fc fa2d 	bl	8004564 <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	2b02      	cmp	r3, #2
 8008112:	d901      	bls.n	8008118 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8008114:	2303      	movs	r3, #3
 8008116:	e1d5      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008118:	4b1e      	ldr	r3, [pc, #120]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 800811a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1f0      	bne.n	8008106 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0320 	and.w	r3, r3, #32
 800812c:	2b00      	cmp	r3, #0
 800812e:	d039      	beq.n	80081a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d019      	beq.n	800816c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008138:	4b16      	ldr	r3, [pc, #88]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a15      	ldr	r2, [pc, #84]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 800813e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008142:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008144:	f7fc fa0e 	bl	8004564 <HAL_GetTick>
 8008148:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800814a:	e008      	b.n	800815e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800814c:	f7fc fa0a 	bl	8004564 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	2b02      	cmp	r3, #2
 8008158:	d901      	bls.n	800815e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e1b2      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800815e:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0f0      	beq.n	800814c <HAL_RCC_OscConfig+0x4d4>
 800816a:	e01b      	b.n	80081a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800816c:	4b09      	ldr	r3, [pc, #36]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a08      	ldr	r2, [pc, #32]	; (8008194 <HAL_RCC_OscConfig+0x51c>)
 8008172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008176:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008178:	f7fc f9f4 	bl	8004564 <HAL_GetTick>
 800817c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800817e:	e00b      	b.n	8008198 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008180:	f7fc f9f0 	bl	8004564 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	2b02      	cmp	r3, #2
 800818c:	d904      	bls.n	8008198 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e198      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
 8008192:	bf00      	nop
 8008194:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008198:	4ba3      	ldr	r3, [pc, #652]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1ed      	bne.n	8008180 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0304 	and.w	r3, r3, #4
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 8081 	beq.w	80082b4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081b2:	4b9e      	ldr	r3, [pc, #632]	; (800842c <HAL_RCC_OscConfig+0x7b4>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a9d      	ldr	r2, [pc, #628]	; (800842c <HAL_RCC_OscConfig+0x7b4>)
 80081b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081be:	f7fc f9d1 	bl	8004564 <HAL_GetTick>
 80081c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081c4:	e008      	b.n	80081d8 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80081c6:	f7fc f9cd 	bl	8004564 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	2b64      	cmp	r3, #100	; 0x64
 80081d2:	d901      	bls.n	80081d8 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e175      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081d8:	4b94      	ldr	r3, [pc, #592]	; (800842c <HAL_RCC_OscConfig+0x7b4>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0f0      	beq.n	80081c6 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d106      	bne.n	80081fa <HAL_RCC_OscConfig+0x582>
 80081ec:	4b8e      	ldr	r3, [pc, #568]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80081ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f0:	4a8d      	ldr	r2, [pc, #564]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80081f2:	f043 0301 	orr.w	r3, r3, #1
 80081f6:	6713      	str	r3, [r2, #112]	; 0x70
 80081f8:	e02d      	b.n	8008256 <HAL_RCC_OscConfig+0x5de>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10c      	bne.n	800821c <HAL_RCC_OscConfig+0x5a4>
 8008202:	4b89      	ldr	r3, [pc, #548]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008206:	4a88      	ldr	r2, [pc, #544]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008208:	f023 0301 	bic.w	r3, r3, #1
 800820c:	6713      	str	r3, [r2, #112]	; 0x70
 800820e:	4b86      	ldr	r3, [pc, #536]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008212:	4a85      	ldr	r2, [pc, #532]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008214:	f023 0304 	bic.w	r3, r3, #4
 8008218:	6713      	str	r3, [r2, #112]	; 0x70
 800821a:	e01c      	b.n	8008256 <HAL_RCC_OscConfig+0x5de>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	2b05      	cmp	r3, #5
 8008222:	d10c      	bne.n	800823e <HAL_RCC_OscConfig+0x5c6>
 8008224:	4b80      	ldr	r3, [pc, #512]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008228:	4a7f      	ldr	r2, [pc, #508]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 800822a:	f043 0304 	orr.w	r3, r3, #4
 800822e:	6713      	str	r3, [r2, #112]	; 0x70
 8008230:	4b7d      	ldr	r3, [pc, #500]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008234:	4a7c      	ldr	r2, [pc, #496]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008236:	f043 0301 	orr.w	r3, r3, #1
 800823a:	6713      	str	r3, [r2, #112]	; 0x70
 800823c:	e00b      	b.n	8008256 <HAL_RCC_OscConfig+0x5de>
 800823e:	4b7a      	ldr	r3, [pc, #488]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008242:	4a79      	ldr	r2, [pc, #484]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008244:	f023 0301 	bic.w	r3, r3, #1
 8008248:	6713      	str	r3, [r2, #112]	; 0x70
 800824a:	4b77      	ldr	r3, [pc, #476]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	4a76      	ldr	r2, [pc, #472]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008250:	f023 0304 	bic.w	r3, r3, #4
 8008254:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d015      	beq.n	800828a <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800825e:	f7fc f981 	bl	8004564 <HAL_GetTick>
 8008262:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008264:	e00a      	b.n	800827c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008266:	f7fc f97d 	bl	8004564 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	f241 3288 	movw	r2, #5000	; 0x1388
 8008274:	4293      	cmp	r3, r2
 8008276:	d901      	bls.n	800827c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e123      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800827c:	4b6a      	ldr	r3, [pc, #424]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 800827e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0ee      	beq.n	8008266 <HAL_RCC_OscConfig+0x5ee>
 8008288:	e014      	b.n	80082b4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800828a:	f7fc f96b 	bl	8004564 <HAL_GetTick>
 800828e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008290:	e00a      	b.n	80082a8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008292:	f7fc f967 	bl	8004564 <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d901      	bls.n	80082a8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e10d      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082a8:	4b5f      	ldr	r3, [pc, #380]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80082aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1ee      	bne.n	8008292 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 8102 	beq.w	80084c2 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082be:	4b5a      	ldr	r3, [pc, #360]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082c6:	2b18      	cmp	r3, #24
 80082c8:	f000 80bd 	beq.w	8008446 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	f040 8095 	bne.w	8008400 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082d6:	4b54      	ldr	r3, [pc, #336]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a53      	ldr	r2, [pc, #332]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80082dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e2:	f7fc f93f 	bl	8004564 <HAL_GetTick>
 80082e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082e8:	e008      	b.n	80082fc <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082ea:	f7fc f93b 	bl	8004564 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d901      	bls.n	80082fc <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e0e3      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082fc:	4b4a      	ldr	r3, [pc, #296]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1f0      	bne.n	80082ea <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008308:	4b47      	ldr	r3, [pc, #284]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 800830a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800830c:	4b48      	ldr	r3, [pc, #288]	; (8008430 <HAL_RCC_OscConfig+0x7b8>)
 800830e:	4013      	ands	r3, r2
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008318:	0112      	lsls	r2, r2, #4
 800831a:	430a      	orrs	r2, r1
 800831c:	4942      	ldr	r1, [pc, #264]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 800831e:	4313      	orrs	r3, r2
 8008320:	628b      	str	r3, [r1, #40]	; 0x28
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008326:	3b01      	subs	r3, #1
 8008328:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008330:	3b01      	subs	r3, #1
 8008332:	025b      	lsls	r3, r3, #9
 8008334:	b29b      	uxth	r3, r3
 8008336:	431a      	orrs	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	3b01      	subs	r3, #1
 800833e:	041b      	lsls	r3, r3, #16
 8008340:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834a:	3b01      	subs	r3, #1
 800834c:	061b      	lsls	r3, r3, #24
 800834e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008352:	4935      	ldr	r1, [pc, #212]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008354:	4313      	orrs	r3, r2
 8008356:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008358:	4b33      	ldr	r3, [pc, #204]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	4a32      	ldr	r2, [pc, #200]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 800835e:	f023 0301 	bic.w	r3, r3, #1
 8008362:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008364:	4b30      	ldr	r3, [pc, #192]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008368:	4b32      	ldr	r3, [pc, #200]	; (8008434 <HAL_RCC_OscConfig+0x7bc>)
 800836a:	4013      	ands	r3, r2
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008370:	00d2      	lsls	r2, r2, #3
 8008372:	492d      	ldr	r1, [pc, #180]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008374:	4313      	orrs	r3, r2
 8008376:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008378:	4b2b      	ldr	r3, [pc, #172]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 800837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837c:	f023 020c 	bic.w	r2, r3, #12
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008384:	4928      	ldr	r1, [pc, #160]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008386:	4313      	orrs	r3, r2
 8008388:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800838a:	4b27      	ldr	r3, [pc, #156]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 800838c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838e:	f023 0202 	bic.w	r2, r3, #2
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008396:	4924      	ldr	r1, [pc, #144]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008398:	4313      	orrs	r3, r2
 800839a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800839c:	4b22      	ldr	r3, [pc, #136]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	4a21      	ldr	r2, [pc, #132]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80083a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083a8:	4b1f      	ldr	r3, [pc, #124]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80083aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ac:	4a1e      	ldr	r2, [pc, #120]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80083ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083b4:	4b1c      	ldr	r3, [pc, #112]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	4a1b      	ldr	r2, [pc, #108]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80083ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80083c0:	4b19      	ldr	r3, [pc, #100]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	4a18      	ldr	r2, [pc, #96]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80083c6:	f043 0301 	orr.w	r3, r3, #1
 80083ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083cc:	4b16      	ldr	r3, [pc, #88]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a15      	ldr	r2, [pc, #84]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80083d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d8:	f7fc f8c4 	bl	8004564 <HAL_GetTick>
 80083dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083de:	e008      	b.n	80083f2 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083e0:	f7fc f8c0 	bl	8004564 <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d901      	bls.n	80083f2 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e068      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083f2:	4b0d      	ldr	r3, [pc, #52]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0f0      	beq.n	80083e0 <HAL_RCC_OscConfig+0x768>
 80083fe:	e060      	b.n	80084c2 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008400:	4b09      	ldr	r3, [pc, #36]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a08      	ldr	r2, [pc, #32]	; (8008428 <HAL_RCC_OscConfig+0x7b0>)
 8008406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800840a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800840c:	f7fc f8aa 	bl	8004564 <HAL_GetTick>
 8008410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008412:	e011      	b.n	8008438 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008414:	f7fc f8a6 	bl	8004564 <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	2b02      	cmp	r3, #2
 8008420:	d90a      	bls.n	8008438 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e04e      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
 8008426:	bf00      	nop
 8008428:	58024400 	.word	0x58024400
 800842c:	58024800 	.word	0x58024800
 8008430:	fffffc0c 	.word	0xfffffc0c
 8008434:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008438:	4b24      	ldr	r3, [pc, #144]	; (80084cc <HAL_RCC_OscConfig+0x854>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e7      	bne.n	8008414 <HAL_RCC_OscConfig+0x79c>
 8008444:	e03d      	b.n	80084c2 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008446:	4b21      	ldr	r3, [pc, #132]	; (80084cc <HAL_RCC_OscConfig+0x854>)
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800844c:	4b1f      	ldr	r3, [pc, #124]	; (80084cc <HAL_RCC_OscConfig+0x854>)
 800844e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008450:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	2b01      	cmp	r3, #1
 8008458:	d031      	beq.n	80084be <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f003 0203 	and.w	r2, r3, #3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008464:	429a      	cmp	r2, r3
 8008466:	d12a      	bne.n	80084be <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	091b      	lsrs	r3, r3, #4
 800846c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008474:	429a      	cmp	r2, r3
 8008476:	d122      	bne.n	80084be <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008482:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008484:	429a      	cmp	r2, r3
 8008486:	d11a      	bne.n	80084be <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	0a5b      	lsrs	r3, r3, #9
 800848c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008494:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008496:	429a      	cmp	r2, r3
 8008498:	d111      	bne.n	80084be <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	0c1b      	lsrs	r3, r3, #16
 800849e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d108      	bne.n	80084be <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	0e1b      	lsrs	r3, r3, #24
 80084b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d001      	beq.n	80084c2 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e000      	b.n	80084c4 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3730      	adds	r7, #48	; 0x30
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	58024400 	.word	0x58024400

080084d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e19c      	b.n	800881e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084e4:	4b8a      	ldr	r3, [pc, #552]	; (8008710 <HAL_RCC_ClockConfig+0x240>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 030f 	and.w	r3, r3, #15
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d910      	bls.n	8008514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084f2:	4b87      	ldr	r3, [pc, #540]	; (8008710 <HAL_RCC_ClockConfig+0x240>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f023 020f 	bic.w	r2, r3, #15
 80084fa:	4985      	ldr	r1, [pc, #532]	; (8008710 <HAL_RCC_ClockConfig+0x240>)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	4313      	orrs	r3, r2
 8008500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008502:	4b83      	ldr	r3, [pc, #524]	; (8008710 <HAL_RCC_ClockConfig+0x240>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 030f 	and.w	r3, r3, #15
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	429a      	cmp	r2, r3
 800850e:	d001      	beq.n	8008514 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e184      	b.n	800881e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d010      	beq.n	8008542 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691a      	ldr	r2, [r3, #16]
 8008524:	4b7b      	ldr	r3, [pc, #492]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800852c:	429a      	cmp	r2, r3
 800852e:	d908      	bls.n	8008542 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008530:	4b78      	ldr	r3, [pc, #480]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	4975      	ldr	r1, [pc, #468]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 800853e:	4313      	orrs	r3, r2
 8008540:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0308 	and.w	r3, r3, #8
 800854a:	2b00      	cmp	r3, #0
 800854c:	d010      	beq.n	8008570 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	695a      	ldr	r2, [r3, #20]
 8008552:	4b70      	ldr	r3, [pc, #448]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800855a:	429a      	cmp	r2, r3
 800855c:	d908      	bls.n	8008570 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800855e:	4b6d      	ldr	r3, [pc, #436]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	496a      	ldr	r1, [pc, #424]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 800856c:	4313      	orrs	r3, r2
 800856e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0310 	and.w	r3, r3, #16
 8008578:	2b00      	cmp	r3, #0
 800857a:	d010      	beq.n	800859e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	699a      	ldr	r2, [r3, #24]
 8008580:	4b64      	ldr	r3, [pc, #400]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 8008582:	69db      	ldr	r3, [r3, #28]
 8008584:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008588:	429a      	cmp	r2, r3
 800858a:	d908      	bls.n	800859e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800858c:	4b61      	ldr	r3, [pc, #388]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	495e      	ldr	r1, [pc, #376]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 800859a:	4313      	orrs	r3, r2
 800859c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0320 	and.w	r3, r3, #32
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d010      	beq.n	80085cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	69da      	ldr	r2, [r3, #28]
 80085ae:	4b59      	ldr	r3, [pc, #356]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d908      	bls.n	80085cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80085ba:	4b56      	ldr	r3, [pc, #344]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	4953      	ldr	r1, [pc, #332]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d010      	beq.n	80085fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	4b4d      	ldr	r3, [pc, #308]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	f003 030f 	and.w	r3, r3, #15
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d908      	bls.n	80085fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085e8:	4b4a      	ldr	r3, [pc, #296]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	f023 020f 	bic.w	r2, r3, #15
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	4947      	ldr	r1, [pc, #284]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	d055      	beq.n	80086b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008606:	4b43      	ldr	r3, [pc, #268]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	4940      	ldr	r1, [pc, #256]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 8008614:	4313      	orrs	r3, r2
 8008616:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	2b02      	cmp	r3, #2
 800861e:	d107      	bne.n	8008630 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008620:	4b3c      	ldr	r3, [pc, #240]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d121      	bne.n	8008670 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e0f6      	b.n	800881e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	2b03      	cmp	r3, #3
 8008636:	d107      	bne.n	8008648 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008638:	4b36      	ldr	r3, [pc, #216]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d115      	bne.n	8008670 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e0ea      	b.n	800881e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d107      	bne.n	8008660 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008650:	4b30      	ldr	r3, [pc, #192]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008658:	2b00      	cmp	r3, #0
 800865a:	d109      	bne.n	8008670 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e0de      	b.n	800881e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008660:	4b2c      	ldr	r3, [pc, #176]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e0d6      	b.n	800881e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008670:	4b28      	ldr	r3, [pc, #160]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	f023 0207 	bic.w	r2, r3, #7
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	4925      	ldr	r1, [pc, #148]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 800867e:	4313      	orrs	r3, r2
 8008680:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008682:	f7fb ff6f 	bl	8004564 <HAL_GetTick>
 8008686:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008688:	e00a      	b.n	80086a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800868a:	f7fb ff6b 	bl	8004564 <HAL_GetTick>
 800868e:	4602      	mov	r2, r0
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	f241 3288 	movw	r2, #5000	; 0x1388
 8008698:	4293      	cmp	r3, r2
 800869a:	d901      	bls.n	80086a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e0be      	b.n	800881e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086a0:	4b1c      	ldr	r3, [pc, #112]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	00db      	lsls	r3, r3, #3
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d1eb      	bne.n	800868a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0302 	and.w	r3, r3, #2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d010      	beq.n	80086e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	4b14      	ldr	r3, [pc, #80]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d208      	bcs.n	80086e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086ce:	4b11      	ldr	r3, [pc, #68]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	f023 020f 	bic.w	r2, r3, #15
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	490e      	ldr	r1, [pc, #56]	; (8008714 <HAL_RCC_ClockConfig+0x244>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086e0:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <HAL_RCC_ClockConfig+0x240>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 030f 	and.w	r3, r3, #15
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d214      	bcs.n	8008718 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ee:	4b08      	ldr	r3, [pc, #32]	; (8008710 <HAL_RCC_ClockConfig+0x240>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f023 020f 	bic.w	r2, r3, #15
 80086f6:	4906      	ldr	r1, [pc, #24]	; (8008710 <HAL_RCC_ClockConfig+0x240>)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086fe:	4b04      	ldr	r3, [pc, #16]	; (8008710 <HAL_RCC_ClockConfig+0x240>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 030f 	and.w	r3, r3, #15
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	429a      	cmp	r2, r3
 800870a:	d005      	beq.n	8008718 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e086      	b.n	800881e <HAL_RCC_ClockConfig+0x34e>
 8008710:	52002000 	.word	0x52002000
 8008714:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b00      	cmp	r3, #0
 8008722:	d010      	beq.n	8008746 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	691a      	ldr	r2, [r3, #16]
 8008728:	4b3f      	ldr	r3, [pc, #252]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008730:	429a      	cmp	r2, r3
 8008732:	d208      	bcs.n	8008746 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008734:	4b3c      	ldr	r3, [pc, #240]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	4939      	ldr	r1, [pc, #228]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 8008742:	4313      	orrs	r3, r2
 8008744:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0308 	and.w	r3, r3, #8
 800874e:	2b00      	cmp	r3, #0
 8008750:	d010      	beq.n	8008774 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695a      	ldr	r2, [r3, #20]
 8008756:	4b34      	ldr	r3, [pc, #208]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800875e:	429a      	cmp	r2, r3
 8008760:	d208      	bcs.n	8008774 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008762:	4b31      	ldr	r3, [pc, #196]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 8008764:	69db      	ldr	r3, [r3, #28]
 8008766:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	492e      	ldr	r1, [pc, #184]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 8008770:	4313      	orrs	r3, r2
 8008772:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0310 	and.w	r3, r3, #16
 800877c:	2b00      	cmp	r3, #0
 800877e:	d010      	beq.n	80087a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	699a      	ldr	r2, [r3, #24]
 8008784:	4b28      	ldr	r3, [pc, #160]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800878c:	429a      	cmp	r2, r3
 800878e:	d208      	bcs.n	80087a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008790:	4b25      	ldr	r3, [pc, #148]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	4922      	ldr	r1, [pc, #136]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0320 	and.w	r3, r3, #32
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d010      	beq.n	80087d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69da      	ldr	r2, [r3, #28]
 80087b2:	4b1d      	ldr	r3, [pc, #116]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d208      	bcs.n	80087d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80087be:	4b1a      	ldr	r3, [pc, #104]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	4917      	ldr	r1, [pc, #92]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 80087cc:	4313      	orrs	r3, r2
 80087ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80087d0:	f000 f834 	bl	800883c <HAL_RCC_GetSysClockFreq>
 80087d4:	4602      	mov	r2, r0
 80087d6:	4b14      	ldr	r3, [pc, #80]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	f003 030f 	and.w	r3, r3, #15
 80087e0:	4912      	ldr	r1, [pc, #72]	; (800882c <HAL_RCC_ClockConfig+0x35c>)
 80087e2:	5ccb      	ldrb	r3, [r1, r3]
 80087e4:	f003 031f 	and.w	r3, r3, #31
 80087e8:	fa22 f303 	lsr.w	r3, r2, r3
 80087ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087ee:	4b0e      	ldr	r3, [pc, #56]	; (8008828 <HAL_RCC_ClockConfig+0x358>)
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	f003 030f 	and.w	r3, r3, #15
 80087f6:	4a0d      	ldr	r2, [pc, #52]	; (800882c <HAL_RCC_ClockConfig+0x35c>)
 80087f8:	5cd3      	ldrb	r3, [r2, r3]
 80087fa:	f003 031f 	and.w	r3, r3, #31
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	fa22 f303 	lsr.w	r3, r2, r3
 8008804:	4a0a      	ldr	r2, [pc, #40]	; (8008830 <HAL_RCC_ClockConfig+0x360>)
 8008806:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008808:	4a0a      	ldr	r2, [pc, #40]	; (8008834 <HAL_RCC_ClockConfig+0x364>)
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800880e:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <HAL_RCC_ClockConfig+0x368>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4618      	mov	r0, r3
 8008814:	f7fb fe5c 	bl	80044d0 <HAL_InitTick>
 8008818:	4603      	mov	r3, r0
 800881a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800881c:	7bfb      	ldrb	r3, [r7, #15]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	58024400 	.word	0x58024400
 800882c:	08010e1c 	.word	0x08010e1c
 8008830:	24000018 	.word	0x24000018
 8008834:	24000014 	.word	0x24000014
 8008838:	2400001c 	.word	0x2400001c

0800883c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800883c:	b480      	push	{r7}
 800883e:	b089      	sub	sp, #36	; 0x24
 8008840:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008842:	4bb3      	ldr	r3, [pc, #716]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800884a:	2b18      	cmp	r3, #24
 800884c:	f200 8155 	bhi.w	8008afa <HAL_RCC_GetSysClockFreq+0x2be>
 8008850:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008856:	bf00      	nop
 8008858:	080088bd 	.word	0x080088bd
 800885c:	08008afb 	.word	0x08008afb
 8008860:	08008afb 	.word	0x08008afb
 8008864:	08008afb 	.word	0x08008afb
 8008868:	08008afb 	.word	0x08008afb
 800886c:	08008afb 	.word	0x08008afb
 8008870:	08008afb 	.word	0x08008afb
 8008874:	08008afb 	.word	0x08008afb
 8008878:	080088e3 	.word	0x080088e3
 800887c:	08008afb 	.word	0x08008afb
 8008880:	08008afb 	.word	0x08008afb
 8008884:	08008afb 	.word	0x08008afb
 8008888:	08008afb 	.word	0x08008afb
 800888c:	08008afb 	.word	0x08008afb
 8008890:	08008afb 	.word	0x08008afb
 8008894:	08008afb 	.word	0x08008afb
 8008898:	080088e9 	.word	0x080088e9
 800889c:	08008afb 	.word	0x08008afb
 80088a0:	08008afb 	.word	0x08008afb
 80088a4:	08008afb 	.word	0x08008afb
 80088a8:	08008afb 	.word	0x08008afb
 80088ac:	08008afb 	.word	0x08008afb
 80088b0:	08008afb 	.word	0x08008afb
 80088b4:	08008afb 	.word	0x08008afb
 80088b8:	080088ef 	.word	0x080088ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088bc:	4b94      	ldr	r3, [pc, #592]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0320 	and.w	r3, r3, #32
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d009      	beq.n	80088dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088c8:	4b91      	ldr	r3, [pc, #580]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	08db      	lsrs	r3, r3, #3
 80088ce:	f003 0303 	and.w	r3, r3, #3
 80088d2:	4a90      	ldr	r2, [pc, #576]	; (8008b14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088d4:	fa22 f303 	lsr.w	r3, r2, r3
 80088d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80088da:	e111      	b.n	8008b00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80088dc:	4b8d      	ldr	r3, [pc, #564]	; (8008b14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088de:	61bb      	str	r3, [r7, #24]
    break;
 80088e0:	e10e      	b.n	8008b00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80088e2:	4b8d      	ldr	r3, [pc, #564]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80088e4:	61bb      	str	r3, [r7, #24]
    break;
 80088e6:	e10b      	b.n	8008b00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80088e8:	4b8c      	ldr	r3, [pc, #560]	; (8008b1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80088ea:	61bb      	str	r3, [r7, #24]
    break;
 80088ec:	e108      	b.n	8008b00 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088ee:	4b88      	ldr	r3, [pc, #544]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f2:	f003 0303 	and.w	r3, r3, #3
 80088f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80088f8:	4b85      	ldr	r3, [pc, #532]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fc:	091b      	lsrs	r3, r3, #4
 80088fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008902:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008904:	4b82      	ldr	r3, [pc, #520]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800890e:	4b80      	ldr	r3, [pc, #512]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008912:	08db      	lsrs	r3, r3, #3
 8008914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	fb02 f303 	mul.w	r3, r2, r3
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008926:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 80e1 	beq.w	8008af4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b02      	cmp	r3, #2
 8008936:	f000 8083 	beq.w	8008a40 <HAL_RCC_GetSysClockFreq+0x204>
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b02      	cmp	r3, #2
 800893e:	f200 80a1 	bhi.w	8008a84 <HAL_RCC_GetSysClockFreq+0x248>
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d003      	beq.n	8008950 <HAL_RCC_GetSysClockFreq+0x114>
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d056      	beq.n	80089fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800894e:	e099      	b.n	8008a84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008950:	4b6f      	ldr	r3, [pc, #444]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0320 	and.w	r3, r3, #32
 8008958:	2b00      	cmp	r3, #0
 800895a:	d02d      	beq.n	80089b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800895c:	4b6c      	ldr	r3, [pc, #432]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	08db      	lsrs	r3, r3, #3
 8008962:	f003 0303 	and.w	r3, r3, #3
 8008966:	4a6b      	ldr	r2, [pc, #428]	; (8008b14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008968:	fa22 f303 	lsr.w	r3, r2, r3
 800896c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	ee07 3a90 	vmov	s15, r3
 8008974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	ee07 3a90 	vmov	s15, r3
 800897e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008986:	4b62      	ldr	r3, [pc, #392]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008996:	ed97 6a02 	vldr	s12, [r7, #8]
 800899a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800899e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80089b6:	e087      	b.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008b24 <HAL_RCC_GetSysClockFreq+0x2e8>
 80089c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ca:	4b51      	ldr	r3, [pc, #324]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089da:	ed97 6a02 	vldr	s12, [r7, #8]
 80089de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089fa:	e065      	b.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008b28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0e:	4b40      	ldr	r3, [pc, #256]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a3e:	e043      	b.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008b2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a52:	4b2f      	ldr	r3, [pc, #188]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a82:	e021      	b.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008b28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a96:	4b1e      	ldr	r3, [pc, #120]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aaa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ac6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008ac8:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008acc:	0a5b      	lsrs	r3, r3, #9
 8008ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	ee07 3a90 	vmov	s15, r3
 8008adc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ae0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aec:	ee17 3a90 	vmov	r3, s15
 8008af0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008af2:	e005      	b.n	8008b00 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	61bb      	str	r3, [r7, #24]
    break;
 8008af8:	e002      	b.n	8008b00 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008afa:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008afc:	61bb      	str	r3, [r7, #24]
    break;
 8008afe:	bf00      	nop
  }

  return sysclockfreq;
 8008b00:	69bb      	ldr	r3, [r7, #24]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3724      	adds	r7, #36	; 0x24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	58024400 	.word	0x58024400
 8008b14:	03d09000 	.word	0x03d09000
 8008b18:	003d0900 	.word	0x003d0900
 8008b1c:	02dc6c00 	.word	0x02dc6c00
 8008b20:	46000000 	.word	0x46000000
 8008b24:	4c742400 	.word	0x4c742400
 8008b28:	4a742400 	.word	0x4a742400
 8008b2c:	4c371b00 	.word	0x4c371b00

08008b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b36:	f7ff fe81 	bl	800883c <HAL_RCC_GetSysClockFreq>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	4b10      	ldr	r3, [pc, #64]	; (8008b80 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	0a1b      	lsrs	r3, r3, #8
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	490f      	ldr	r1, [pc, #60]	; (8008b84 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b48:	5ccb      	ldrb	r3, [r1, r3]
 8008b4a:	f003 031f 	and.w	r3, r3, #31
 8008b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b54:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	f003 030f 	and.w	r3, r3, #15
 8008b5c:	4a09      	ldr	r2, [pc, #36]	; (8008b84 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b5e:	5cd3      	ldrb	r3, [r2, r3]
 8008b60:	f003 031f 	and.w	r3, r3, #31
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	fa22 f303 	lsr.w	r3, r2, r3
 8008b6a:	4a07      	ldr	r2, [pc, #28]	; (8008b88 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b6e:	4a07      	ldr	r2, [pc, #28]	; (8008b8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008b74:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b76:	681b      	ldr	r3, [r3, #0]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	58024400 	.word	0x58024400
 8008b84:	08010e1c 	.word	0x08010e1c
 8008b88:	24000018 	.word	0x24000018
 8008b8c:	24000014 	.word	0x24000014

08008b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b94:	f7ff ffcc 	bl	8008b30 <HAL_RCC_GetHCLKFreq>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	4b06      	ldr	r3, [pc, #24]	; (8008bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	091b      	lsrs	r3, r3, #4
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	4904      	ldr	r1, [pc, #16]	; (8008bb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ba6:	5ccb      	ldrb	r3, [r1, r3]
 8008ba8:	f003 031f 	and.w	r3, r3, #31
 8008bac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	58024400 	.word	0x58024400
 8008bb8:	08010e1c 	.word	0x08010e1c

08008bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008bc0:	f7ff ffb6 	bl	8008b30 <HAL_RCC_GetHCLKFreq>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	0a1b      	lsrs	r3, r3, #8
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	4904      	ldr	r1, [pc, #16]	; (8008be4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008bd2:	5ccb      	ldrb	r3, [r1, r3]
 8008bd4:	f003 031f 	and.w	r3, r3, #31
 8008bd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	58024400 	.word	0x58024400
 8008be4:	08010e1c 	.word	0x08010e1c

08008be8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d03f      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c0c:	d02a      	beq.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008c0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c12:	d824      	bhi.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c18:	d018      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c1e:	d81e      	bhi.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c28:	d007      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008c2a:	e018      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c2c:	4bab      	ldr	r3, [pc, #684]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	4aaa      	ldr	r2, [pc, #680]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c38:	e015      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	2102      	movs	r1, #2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f001 f9cf 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008c46:	4603      	mov	r3, r0
 8008c48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c4a:	e00c      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3324      	adds	r3, #36	; 0x24
 8008c50:	2102      	movs	r1, #2
 8008c52:	4618      	mov	r0, r3
 8008c54:	f001 fa78 	bl	800a148 <RCCEx_PLL3_Config>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c5c:	e003      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	75fb      	strb	r3, [r7, #23]
      break;
 8008c62:	e000      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d109      	bne.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008c6c:	4b9b      	ldr	r3, [pc, #620]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c78:	4998      	ldr	r1, [pc, #608]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	650b      	str	r3, [r1, #80]	; 0x50
 8008c7e:	e001      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
 8008c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d03d      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d826      	bhi.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008c98:	a201      	add	r2, pc, #4	; (adr r2, 8008ca0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9e:	bf00      	nop
 8008ca0:	08008cb5 	.word	0x08008cb5
 8008ca4:	08008cc3 	.word	0x08008cc3
 8008ca8:	08008cd5 	.word	0x08008cd5
 8008cac:	08008ced 	.word	0x08008ced
 8008cb0:	08008ced 	.word	0x08008ced
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb4:	4b89      	ldr	r3, [pc, #548]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	4a88      	ldr	r2, [pc, #544]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cc0:	e015      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f001 f98b 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cd2:	e00c      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3324      	adds	r3, #36	; 0x24
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f001 fa34 	bl	800a148 <RCCEx_PLL3_Config>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ce4:	e003      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8008cea:	e000      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d109      	bne.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008cf4:	4b79      	ldr	r3, [pc, #484]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf8:	f023 0207 	bic.w	r2, r3, #7
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d00:	4976      	ldr	r1, [pc, #472]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	650b      	str	r3, [r1, #80]	; 0x50
 8008d06:	e001      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d042      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d20:	d02b      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d26:	d825      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008d28:	2bc0      	cmp	r3, #192	; 0xc0
 8008d2a:	d028      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008d2c:	2bc0      	cmp	r3, #192	; 0xc0
 8008d2e:	d821      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008d30:	2b80      	cmp	r3, #128	; 0x80
 8008d32:	d016      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008d34:	2b80      	cmp	r3, #128	; 0x80
 8008d36:	d81d      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008d3c:	2b40      	cmp	r3, #64	; 0x40
 8008d3e:	d007      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008d40:	e018      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d42:	4b66      	ldr	r3, [pc, #408]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	4a65      	ldr	r2, [pc, #404]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008d4e:	e017      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3304      	adds	r3, #4
 8008d54:	2100      	movs	r1, #0
 8008d56:	4618      	mov	r0, r3
 8008d58:	f001 f944 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008d60:	e00e      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	3324      	adds	r3, #36	; 0x24
 8008d66:	2100      	movs	r1, #0
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f001 f9ed 	bl	800a148 <RCCEx_PLL3_Config>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008d72:	e005      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	75fb      	strb	r3, [r7, #23]
      break;
 8008d78:	e002      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008d7a:	bf00      	nop
 8008d7c:	e000      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d109      	bne.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008d86:	4b55      	ldr	r3, [pc, #340]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d8a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d92:	4952      	ldr	r1, [pc, #328]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	650b      	str	r3, [r1, #80]	; 0x50
 8008d98:	e001      	b.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d049      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008db0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008db4:	d030      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008db6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dba:	d82a      	bhi.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008dbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008dc0:	d02c      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008dc2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008dc6:	d824      	bhi.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dcc:	d018      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dd2:	d81e      	bhi.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d003      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008dd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ddc:	d007      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008dde:	e018      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de0:	4b3e      	ldr	r3, [pc, #248]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	4a3d      	ldr	r2, [pc, #244]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dec:	e017      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3304      	adds	r3, #4
 8008df2:	2100      	movs	r1, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f001 f8f5 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008dfe:	e00e      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3324      	adds	r3, #36	; 0x24
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 f99e 	bl	800a148 <RCCEx_PLL3_Config>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e10:	e005      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	75fb      	strb	r3, [r7, #23]
      break;
 8008e16:	e002      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008e18:	bf00      	nop
 8008e1a:	e000      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008e24:	4b2d      	ldr	r3, [pc, #180]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e32:	492a      	ldr	r1, [pc, #168]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	658b      	str	r3, [r1, #88]	; 0x58
 8008e38:	e001      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d04c      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e54:	d030      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008e56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e5a:	d82a      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008e5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e60:	d02c      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008e62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e66:	d824      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008e68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e6c:	d018      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008e6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e72:	d81e      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d003      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e7c:	d007      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008e7e:	e018      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e80:	4b16      	ldr	r3, [pc, #88]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	4a15      	ldr	r2, [pc, #84]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e8c:	e017      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3304      	adds	r3, #4
 8008e92:	2100      	movs	r1, #0
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 f8a5 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008e9e:	e00e      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3324      	adds	r3, #36	; 0x24
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f001 f94e 	bl	800a148 <RCCEx_PLL3_Config>
 8008eac:	4603      	mov	r3, r0
 8008eae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008eb0:	e005      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8008eb6:	e002      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008eb8:	bf00      	nop
 8008eba:	e000      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10d      	bne.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008ec4:	4b05      	ldr	r3, [pc, #20]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ed2:	4902      	ldr	r1, [pc, #8]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	658b      	str	r3, [r1, #88]	; 0x58
 8008ed8:	e004      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008eda:	bf00      	nop
 8008edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d032      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ef4:	2b30      	cmp	r3, #48	; 0x30
 8008ef6:	d01c      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008ef8:	2b30      	cmp	r3, #48	; 0x30
 8008efa:	d817      	bhi.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	d00c      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008f00:	2b20      	cmp	r3, #32
 8008f02:	d813      	bhi.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d016      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008f08:	2b10      	cmp	r3, #16
 8008f0a:	d10f      	bne.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f0c:	4baf      	ldr	r3, [pc, #700]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f10:	4aae      	ldr	r2, [pc, #696]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008f18:	e00e      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	2102      	movs	r1, #2
 8008f20:	4618      	mov	r0, r3
 8008f22:	f001 f85f 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008f26:	4603      	mov	r3, r0
 8008f28:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008f2a:	e005      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f30:	e002      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008f32:	bf00      	nop
 8008f34:	e000      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d109      	bne.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008f3e:	4ba3      	ldr	r3, [pc, #652]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f4a:	49a0      	ldr	r1, [pc, #640]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008f50:	e001      	b.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
 8008f54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d047      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f6a:	d030      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f70:	d82a      	bhi.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008f72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f76:	d02c      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008f78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f7c:	d824      	bhi.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f82:	d018      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f88:	d81e      	bhi.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f92:	d007      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008f94:	e018      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f96:	4b8d      	ldr	r3, [pc, #564]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9a:	4a8c      	ldr	r2, [pc, #560]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008fa2:	e017      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	2100      	movs	r1, #0
 8008faa:	4618      	mov	r0, r3
 8008fac:	f001 f81a 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008fb4:	e00e      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	3324      	adds	r3, #36	; 0x24
 8008fba:	2100      	movs	r1, #0
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f001 f8c3 	bl	800a148 <RCCEx_PLL3_Config>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008fc6:	e005      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	75fb      	strb	r3, [r7, #23]
      break;
 8008fcc:	e002      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008fce:	bf00      	nop
 8008fd0:	e000      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d109      	bne.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008fda:	4b7c      	ldr	r3, [pc, #496]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fde:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fe6:	4979      	ldr	r1, [pc, #484]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	650b      	str	r3, [r1, #80]	; 0x50
 8008fec:	e001      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d049      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009006:	d02e      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800900c:	d828      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800900e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009012:	d02a      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8009014:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009018:	d822      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800901a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800901e:	d026      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8009020:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009024:	d81c      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800902a:	d010      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800902c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009030:	d816      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01d      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800903a:	d111      	bne.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3304      	adds	r3, #4
 8009040:	2101      	movs	r1, #1
 8009042:	4618      	mov	r0, r3
 8009044:	f000 ffce 	bl	8009fe4 <RCCEx_PLL2_Config>
 8009048:	4603      	mov	r3, r0
 800904a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800904c:	e012      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3324      	adds	r3, #36	; 0x24
 8009052:	2101      	movs	r1, #1
 8009054:	4618      	mov	r0, r3
 8009056:	f001 f877 	bl	800a148 <RCCEx_PLL3_Config>
 800905a:	4603      	mov	r3, r0
 800905c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800905e:	e009      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	75fb      	strb	r3, [r7, #23]
      break;
 8009064:	e006      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009066:	bf00      	nop
 8009068:	e004      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800906a:	bf00      	nop
 800906c:	e002      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800906e:	bf00      	nop
 8009070:	e000      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009074:	7dfb      	ldrb	r3, [r7, #23]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d109      	bne.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800907a:	4b54      	ldr	r3, [pc, #336]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800907c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800907e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009086:	4951      	ldr	r1, [pc, #324]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009088:	4313      	orrs	r3, r2
 800908a:	650b      	str	r3, [r1, #80]	; 0x50
 800908c:	e001      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800908e:	7dfb      	ldrb	r3, [r7, #23]
 8009090:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d04b      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090a8:	d02e      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80090aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090ae:	d828      	bhi.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80090b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090b4:	d02a      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80090b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ba:	d822      	bhi.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80090bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090c0:	d026      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80090c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090c6:	d81c      	bhi.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80090c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090cc:	d010      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80090ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090d2:	d816      	bhi.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d01d      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80090d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090dc:	d111      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3304      	adds	r3, #4
 80090e2:	2101      	movs	r1, #1
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 ff7d 	bl	8009fe4 <RCCEx_PLL2_Config>
 80090ea:	4603      	mov	r3, r0
 80090ec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80090ee:	e012      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3324      	adds	r3, #36	; 0x24
 80090f4:	2101      	movs	r1, #1
 80090f6:	4618      	mov	r0, r3
 80090f8:	f001 f826 	bl	800a148 <RCCEx_PLL3_Config>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009100:	e009      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	75fb      	strb	r3, [r7, #23]
      break;
 8009106:	e006      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009108:	bf00      	nop
 800910a:	e004      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800910c:	bf00      	nop
 800910e:	e002      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009110:	bf00      	nop
 8009112:	e000      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10a      	bne.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800911c:	4b2b      	ldr	r3, [pc, #172]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800911e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009120:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800912a:	4928      	ldr	r1, [pc, #160]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800912c:	4313      	orrs	r3, r2
 800912e:	658b      	str	r3, [r1, #88]	; 0x58
 8009130:	e001      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009132:	7dfb      	ldrb	r3, [r7, #23]
 8009134:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d02f      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800914a:	d00e      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800914c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009150:	d814      	bhi.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d015      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800915a:	d10f      	bne.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800915c:	4b1b      	ldr	r3, [pc, #108]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009160:	4a1a      	ldr	r2, [pc, #104]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009166:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009168:	e00c      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	3304      	adds	r3, #4
 800916e:	2101      	movs	r1, #1
 8009170:	4618      	mov	r0, r3
 8009172:	f000 ff37 	bl	8009fe4 <RCCEx_PLL2_Config>
 8009176:	4603      	mov	r3, r0
 8009178:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800917a:	e003      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	75fb      	strb	r3, [r7, #23]
      break;
 8009180:	e000      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009184:	7dfb      	ldrb	r3, [r7, #23]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d109      	bne.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800918a:	4b10      	ldr	r3, [pc, #64]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800918c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800918e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009196:	490d      	ldr	r1, [pc, #52]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009198:	4313      	orrs	r3, r2
 800919a:	650b      	str	r3, [r1, #80]	; 0x50
 800919c:	e001      	b.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800919e:	7dfb      	ldrb	r3, [r7, #23]
 80091a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d033      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d81c      	bhi.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80091b6:	a201      	add	r2, pc, #4	; (adr r2, 80091bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80091b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091bc:	080091f7 	.word	0x080091f7
 80091c0:	080091d1 	.word	0x080091d1
 80091c4:	080091df 	.word	0x080091df
 80091c8:	080091f7 	.word	0x080091f7
 80091cc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091d0:	4bb8      	ldr	r3, [pc, #736]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	4ab7      	ldr	r2, [pc, #732]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80091dc:	e00c      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3304      	adds	r3, #4
 80091e2:	2102      	movs	r1, #2
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 fefd 	bl	8009fe4 <RCCEx_PLL2_Config>
 80091ea:	4603      	mov	r3, r0
 80091ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80091ee:	e003      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	75fb      	strb	r3, [r7, #23]
      break;
 80091f4:	e000      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80091f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091fe:	4bad      	ldr	r3, [pc, #692]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009202:	f023 0203 	bic.w	r2, r3, #3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920a:	49aa      	ldr	r1, [pc, #680]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800920c:	4313      	orrs	r3, r2
 800920e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009210:	e001      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 8086 	beq.w	8009330 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009224:	4ba4      	ldr	r3, [pc, #656]	; (80094b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4aa3      	ldr	r2, [pc, #652]	; (80094b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800922a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800922e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009230:	f7fb f998 	bl	8004564 <HAL_GetTick>
 8009234:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009236:	e009      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009238:	f7fb f994 	bl	8004564 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	2b64      	cmp	r3, #100	; 0x64
 8009244:	d902      	bls.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	75fb      	strb	r3, [r7, #23]
        break;
 800924a:	e005      	b.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800924c:	4b9a      	ldr	r3, [pc, #616]	; (80094b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009254:	2b00      	cmp	r3, #0
 8009256:	d0ef      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009258:	7dfb      	ldrb	r3, [r7, #23]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d166      	bne.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800925e:	4b95      	ldr	r3, [pc, #596]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009260:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009268:	4053      	eors	r3, r2
 800926a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800926e:	2b00      	cmp	r3, #0
 8009270:	d013      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009272:	4b90      	ldr	r3, [pc, #576]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800927a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800927c:	4b8d      	ldr	r3, [pc, #564]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800927e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009280:	4a8c      	ldr	r2, [pc, #560]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009286:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009288:	4b8a      	ldr	r3, [pc, #552]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800928a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928c:	4a89      	ldr	r2, [pc, #548]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800928e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009292:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009294:	4a87      	ldr	r2, [pc, #540]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092a4:	d115      	bne.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092a6:	f7fb f95d 	bl	8004564 <HAL_GetTick>
 80092aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092ac:	e00b      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ae:	f7fb f959 	bl	8004564 <HAL_GetTick>
 80092b2:	4602      	mov	r2, r0
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092bc:	4293      	cmp	r3, r2
 80092be:	d902      	bls.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	75fb      	strb	r3, [r7, #23]
            break;
 80092c4:	e005      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092c6:	4b7b      	ldr	r3, [pc, #492]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ca:	f003 0302 	and.w	r3, r3, #2
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d0ed      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d126      	bne.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092e6:	d10d      	bne.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80092e8:	4b72      	ldr	r3, [pc, #456]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092f6:	0919      	lsrs	r1, r3, #4
 80092f8:	4b70      	ldr	r3, [pc, #448]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80092fa:	400b      	ands	r3, r1
 80092fc:	496d      	ldr	r1, [pc, #436]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	610b      	str	r3, [r1, #16]
 8009302:	e005      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009304:	4b6b      	ldr	r3, [pc, #428]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	4a6a      	ldr	r2, [pc, #424]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800930a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800930e:	6113      	str	r3, [r2, #16]
 8009310:	4b68      	ldr	r3, [pc, #416]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009312:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800931a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800931e:	4965      	ldr	r1, [pc, #404]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009320:	4313      	orrs	r3, r2
 8009322:	670b      	str	r3, [r1, #112]	; 0x70
 8009324:	e004      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009326:	7dfb      	ldrb	r3, [r7, #23]
 8009328:	75bb      	strb	r3, [r7, #22]
 800932a:	e001      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d07e      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009340:	2b28      	cmp	r3, #40	; 0x28
 8009342:	d867      	bhi.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009344:	a201      	add	r2, pc, #4	; (adr r2, 800934c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934a:	bf00      	nop
 800934c:	0800941b 	.word	0x0800941b
 8009350:	08009415 	.word	0x08009415
 8009354:	08009415 	.word	0x08009415
 8009358:	08009415 	.word	0x08009415
 800935c:	08009415 	.word	0x08009415
 8009360:	08009415 	.word	0x08009415
 8009364:	08009415 	.word	0x08009415
 8009368:	08009415 	.word	0x08009415
 800936c:	080093f1 	.word	0x080093f1
 8009370:	08009415 	.word	0x08009415
 8009374:	08009415 	.word	0x08009415
 8009378:	08009415 	.word	0x08009415
 800937c:	08009415 	.word	0x08009415
 8009380:	08009415 	.word	0x08009415
 8009384:	08009415 	.word	0x08009415
 8009388:	08009415 	.word	0x08009415
 800938c:	08009403 	.word	0x08009403
 8009390:	08009415 	.word	0x08009415
 8009394:	08009415 	.word	0x08009415
 8009398:	08009415 	.word	0x08009415
 800939c:	08009415 	.word	0x08009415
 80093a0:	08009415 	.word	0x08009415
 80093a4:	08009415 	.word	0x08009415
 80093a8:	08009415 	.word	0x08009415
 80093ac:	0800941b 	.word	0x0800941b
 80093b0:	08009415 	.word	0x08009415
 80093b4:	08009415 	.word	0x08009415
 80093b8:	08009415 	.word	0x08009415
 80093bc:	08009415 	.word	0x08009415
 80093c0:	08009415 	.word	0x08009415
 80093c4:	08009415 	.word	0x08009415
 80093c8:	08009415 	.word	0x08009415
 80093cc:	0800941b 	.word	0x0800941b
 80093d0:	08009415 	.word	0x08009415
 80093d4:	08009415 	.word	0x08009415
 80093d8:	08009415 	.word	0x08009415
 80093dc:	08009415 	.word	0x08009415
 80093e0:	08009415 	.word	0x08009415
 80093e4:	08009415 	.word	0x08009415
 80093e8:	08009415 	.word	0x08009415
 80093ec:	0800941b 	.word	0x0800941b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	3304      	adds	r3, #4
 80093f4:	2101      	movs	r1, #1
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 fdf4 	bl	8009fe4 <RCCEx_PLL2_Config>
 80093fc:	4603      	mov	r3, r0
 80093fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009400:	e00c      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3324      	adds	r3, #36	; 0x24
 8009406:	2101      	movs	r1, #1
 8009408:	4618      	mov	r0, r3
 800940a:	f000 fe9d 	bl	800a148 <RCCEx_PLL3_Config>
 800940e:	4603      	mov	r3, r0
 8009410:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009412:	e003      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	75fb      	strb	r3, [r7, #23]
      break;
 8009418:	e000      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800941a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d109      	bne.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009422:	4b24      	ldr	r3, [pc, #144]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009426:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800942e:	4921      	ldr	r1, [pc, #132]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009430:	4313      	orrs	r3, r2
 8009432:	654b      	str	r3, [r1, #84]	; 0x54
 8009434:	e001      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d03e      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800944a:	2b05      	cmp	r3, #5
 800944c:	d820      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800944e:	a201      	add	r2, pc, #4	; (adr r2, 8009454 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	08009497 	.word	0x08009497
 8009458:	0800946d 	.word	0x0800946d
 800945c:	0800947f 	.word	0x0800947f
 8009460:	08009497 	.word	0x08009497
 8009464:	08009497 	.word	0x08009497
 8009468:	08009497 	.word	0x08009497
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	3304      	adds	r3, #4
 8009470:	2101      	movs	r1, #1
 8009472:	4618      	mov	r0, r3
 8009474:	f000 fdb6 	bl	8009fe4 <RCCEx_PLL2_Config>
 8009478:	4603      	mov	r3, r0
 800947a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800947c:	e00c      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	3324      	adds	r3, #36	; 0x24
 8009482:	2101      	movs	r1, #1
 8009484:	4618      	mov	r0, r3
 8009486:	f000 fe5f 	bl	800a148 <RCCEx_PLL3_Config>
 800948a:	4603      	mov	r3, r0
 800948c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800948e:	e003      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	75fb      	strb	r3, [r7, #23]
      break;
 8009494:	e000      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d110      	bne.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800949e:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80094a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094a2:	f023 0207 	bic.w	r2, r3, #7
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094aa:	4902      	ldr	r1, [pc, #8]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	654b      	str	r3, [r1, #84]	; 0x54
 80094b0:	e008      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80094b2:	bf00      	nop
 80094b4:	58024400 	.word	0x58024400
 80094b8:	58024800 	.word	0x58024800
 80094bc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0304 	and.w	r3, r3, #4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d039      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094d6:	2b05      	cmp	r3, #5
 80094d8:	d820      	bhi.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80094da:	a201      	add	r2, pc, #4	; (adr r2, 80094e0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80094dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e0:	08009523 	.word	0x08009523
 80094e4:	080094f9 	.word	0x080094f9
 80094e8:	0800950b 	.word	0x0800950b
 80094ec:	08009523 	.word	0x08009523
 80094f0:	08009523 	.word	0x08009523
 80094f4:	08009523 	.word	0x08009523
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3304      	adds	r3, #4
 80094fc:	2101      	movs	r1, #1
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 fd70 	bl	8009fe4 <RCCEx_PLL2_Config>
 8009504:	4603      	mov	r3, r0
 8009506:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009508:	e00c      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	3324      	adds	r3, #36	; 0x24
 800950e:	2101      	movs	r1, #1
 8009510:	4618      	mov	r0, r3
 8009512:	f000 fe19 	bl	800a148 <RCCEx_PLL3_Config>
 8009516:	4603      	mov	r3, r0
 8009518:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800951a:	e003      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	75fb      	strb	r3, [r7, #23]
      break;
 8009520:	e000      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8009522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009524:	7dfb      	ldrb	r3, [r7, #23]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10a      	bne.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800952a:	4bb7      	ldr	r3, [pc, #732]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800952c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800952e:	f023 0207 	bic.w	r2, r3, #7
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009538:	49b3      	ldr	r1, [pc, #716]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800953a:	4313      	orrs	r3, r2
 800953c:	658b      	str	r3, [r1, #88]	; 0x58
 800953e:	e001      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009540:	7dfb      	ldrb	r3, [r7, #23]
 8009542:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 0320 	and.w	r3, r3, #32
 800954c:	2b00      	cmp	r3, #0
 800954e:	d04b      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009556:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800955a:	d02e      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800955c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009560:	d828      	bhi.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009566:	d02a      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800956c:	d822      	bhi.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800956e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009572:	d026      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009574:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009578:	d81c      	bhi.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800957a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800957e:	d010      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009584:	d816      	bhi.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009586:	2b00      	cmp	r3, #0
 8009588:	d01d      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800958a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800958e:	d111      	bne.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	3304      	adds	r3, #4
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f000 fd24 	bl	8009fe4 <RCCEx_PLL2_Config>
 800959c:	4603      	mov	r3, r0
 800959e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80095a0:	e012      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	3324      	adds	r3, #36	; 0x24
 80095a6:	2102      	movs	r1, #2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 fdcd 	bl	800a148 <RCCEx_PLL3_Config>
 80095ae:	4603      	mov	r3, r0
 80095b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80095b2:	e009      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	75fb      	strb	r3, [r7, #23]
      break;
 80095b8:	e006      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80095ba:	bf00      	nop
 80095bc:	e004      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80095be:	bf00      	nop
 80095c0:	e002      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80095c2:	bf00      	nop
 80095c4:	e000      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80095c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10a      	bne.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095ce:	4b8e      	ldr	r3, [pc, #568]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80095d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095dc:	498a      	ldr	r1, [pc, #552]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80095de:	4313      	orrs	r3, r2
 80095e0:	654b      	str	r3, [r1, #84]	; 0x54
 80095e2:	e001      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d04b      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095fe:	d02e      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8009600:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009604:	d828      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800960a:	d02a      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800960c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009610:	d822      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009612:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009616:	d026      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009618:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800961c:	d81c      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800961e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009622:	d010      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009628:	d816      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800962a:	2b00      	cmp	r3, #0
 800962c:	d01d      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800962e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009632:	d111      	bne.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3304      	adds	r3, #4
 8009638:	2100      	movs	r1, #0
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fcd2 	bl	8009fe4 <RCCEx_PLL2_Config>
 8009640:	4603      	mov	r3, r0
 8009642:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009644:	e012      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3324      	adds	r3, #36	; 0x24
 800964a:	2102      	movs	r1, #2
 800964c:	4618      	mov	r0, r3
 800964e:	f000 fd7b 	bl	800a148 <RCCEx_PLL3_Config>
 8009652:	4603      	mov	r3, r0
 8009654:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009656:	e009      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	75fb      	strb	r3, [r7, #23]
      break;
 800965c:	e006      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800965e:	bf00      	nop
 8009660:	e004      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009662:	bf00      	nop
 8009664:	e002      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009666:	bf00      	nop
 8009668:	e000      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800966a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800966c:	7dfb      	ldrb	r3, [r7, #23]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10a      	bne.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009672:	4b65      	ldr	r3, [pc, #404]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009676:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009680:	4961      	ldr	r1, [pc, #388]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009682:	4313      	orrs	r3, r2
 8009684:	658b      	str	r3, [r1, #88]	; 0x58
 8009686:	e001      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009688:	7dfb      	ldrb	r3, [r7, #23]
 800968a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009694:	2b00      	cmp	r3, #0
 8009696:	d04b      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800969e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096a2:	d02e      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80096a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096a8:	d828      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80096aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096ae:	d02a      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80096b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096b4:	d822      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80096b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80096ba:	d026      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80096bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80096c0:	d81c      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80096c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096c6:	d010      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80096c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096cc:	d816      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d01d      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80096d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d6:	d111      	bne.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	3304      	adds	r3, #4
 80096dc:	2100      	movs	r1, #0
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 fc80 	bl	8009fe4 <RCCEx_PLL2_Config>
 80096e4:	4603      	mov	r3, r0
 80096e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096e8:	e012      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	3324      	adds	r3, #36	; 0x24
 80096ee:	2102      	movs	r1, #2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 fd29 	bl	800a148 <RCCEx_PLL3_Config>
 80096f6:	4603      	mov	r3, r0
 80096f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096fa:	e009      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009700:	e006      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009702:	bf00      	nop
 8009704:	e004      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009706:	bf00      	nop
 8009708:	e002      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800970a:	bf00      	nop
 800970c:	e000      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800970e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10a      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009716:	4b3c      	ldr	r3, [pc, #240]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800971a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009724:	4938      	ldr	r1, [pc, #224]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009726:	4313      	orrs	r3, r2
 8009728:	658b      	str	r3, [r1, #88]	; 0x58
 800972a:	e001      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0308 	and.w	r3, r3, #8
 8009738:	2b00      	cmp	r3, #0
 800973a:	d01a      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009746:	d10a      	bne.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	3324      	adds	r3, #36	; 0x24
 800974c:	2102      	movs	r1, #2
 800974e:	4618      	mov	r0, r3
 8009750:	f000 fcfa 	bl	800a148 <RCCEx_PLL3_Config>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800975e:	4b2a      	ldr	r3, [pc, #168]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009762:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800976c:	4926      	ldr	r1, [pc, #152]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800976e:	4313      	orrs	r3, r2
 8009770:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0310 	and.w	r3, r3, #16
 800977a:	2b00      	cmp	r3, #0
 800977c:	d01a      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009788:	d10a      	bne.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3324      	adds	r3, #36	; 0x24
 800978e:	2102      	movs	r1, #2
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fcd9 	bl	800a148 <RCCEx_PLL3_Config>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097a0:	4b19      	ldr	r3, [pc, #100]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80097a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097ae:	4916      	ldr	r1, [pc, #88]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d036      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097ca:	d01f      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80097cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097d0:	d817      	bhi.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d003      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80097d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097da:	d009      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80097dc:	e011      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	3304      	adds	r3, #4
 80097e2:	2100      	movs	r1, #0
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 fbfd 	bl	8009fe4 <RCCEx_PLL2_Config>
 80097ea:	4603      	mov	r3, r0
 80097ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80097ee:	e00e      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	3324      	adds	r3, #36	; 0x24
 80097f4:	2102      	movs	r1, #2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fca6 	bl	800a148 <RCCEx_PLL3_Config>
 80097fc:	4603      	mov	r3, r0
 80097fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009800:	e005      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	75fb      	strb	r3, [r7, #23]
      break;
 8009806:	e002      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009808:	58024400 	.word	0x58024400
      break;
 800980c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800980e:	7dfb      	ldrb	r3, [r7, #23]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10a      	bne.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009814:	4b93      	ldr	r3, [pc, #588]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009822:	4990      	ldr	r1, [pc, #576]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009824:	4313      	orrs	r3, r2
 8009826:	658b      	str	r3, [r1, #88]	; 0x58
 8009828:	e001      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800982a:	7dfb      	ldrb	r3, [r7, #23]
 800982c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d033      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009840:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009844:	d01c      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009846:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800984a:	d816      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800984c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009850:	d003      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009856:	d007      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009858:	e00f      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800985a:	4b82      	ldr	r3, [pc, #520]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800985c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985e:	4a81      	ldr	r2, [pc, #516]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009866:	e00c      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3324      	adds	r3, #36	; 0x24
 800986c:	2101      	movs	r1, #1
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fc6a 	bl	800a148 <RCCEx_PLL3_Config>
 8009874:	4603      	mov	r3, r0
 8009876:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009878:	e003      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	75fb      	strb	r3, [r7, #23]
      break;
 800987e:	e000      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10a      	bne.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009888:	4b76      	ldr	r3, [pc, #472]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800988a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800988c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009896:	4973      	ldr	r1, [pc, #460]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009898:	4313      	orrs	r3, r2
 800989a:	654b      	str	r3, [r1, #84]	; 0x54
 800989c:	e001      	b.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989e:	7dfb      	ldrb	r3, [r7, #23]
 80098a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d029      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80098b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ba:	d007      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80098bc:	e00f      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098be:	4b69      	ldr	r3, [pc, #420]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c2:	4a68      	ldr	r2, [pc, #416]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80098ca:	e00b      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	3304      	adds	r3, #4
 80098d0:	2102      	movs	r1, #2
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 fb86 	bl	8009fe4 <RCCEx_PLL2_Config>
 80098d8:	4603      	mov	r3, r0
 80098da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80098dc:	e002      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	75fb      	strb	r3, [r7, #23]
      break;
 80098e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d109      	bne.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80098ea:	4b5e      	ldr	r3, [pc, #376]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f6:	495b      	ldr	r1, [pc, #364]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098fc:	e001      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	3324      	adds	r3, #36	; 0x24
 8009912:	2102      	movs	r1, #2
 8009914:	4618      	mov	r0, r3
 8009916:	f000 fc17 	bl	800a148 <RCCEx_PLL3_Config>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d030      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009938:	d017      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800993a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800993e:	d811      	bhi.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009944:	d013      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800994a:	d80b      	bhi.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800994c:	2b00      	cmp	r3, #0
 800994e:	d010      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009954:	d106      	bne.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009956:	4b43      	ldr	r3, [pc, #268]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995a:	4a42      	ldr	r2, [pc, #264]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800995c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009960:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009962:	e007      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	75fb      	strb	r3, [r7, #23]
      break;
 8009968:	e004      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800996a:	bf00      	nop
 800996c:	e002      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800996e:	bf00      	nop
 8009970:	e000      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009974:	7dfb      	ldrb	r3, [r7, #23]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d109      	bne.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800997a:	4b3a      	ldr	r3, [pc, #232]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800997c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009986:	4937      	ldr	r1, [pc, #220]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009988:	4313      	orrs	r3, r2
 800998a:	654b      	str	r3, [r1, #84]	; 0x54
 800998c:	e001      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d008      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800999e:	4b31      	ldr	r3, [pc, #196]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099aa:	492e      	ldr	r1, [pc, #184]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099ac:	4313      	orrs	r3, r2
 80099ae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d009      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80099bc:	4b29      	ldr	r3, [pc, #164]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80099ca:	4926      	ldr	r1, [pc, #152]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099cc:	4313      	orrs	r3, r2
 80099ce:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d008      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80099dc:	4b21      	ldr	r3, [pc, #132]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099e8:	491e      	ldr	r1, [pc, #120]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00d      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80099fa:	4b1a      	ldr	r3, [pc, #104]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	4a19      	ldr	r2, [pc, #100]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a04:	6113      	str	r3, [r2, #16]
 8009a06:	4b17      	ldr	r3, [pc, #92]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a08:	691a      	ldr	r2, [r3, #16]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009a10:	4914      	ldr	r1, [pc, #80]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a12:	4313      	orrs	r3, r2
 8009a14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	da08      	bge.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a1e:	4b11      	ldr	r3, [pc, #68]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a2a:	490e      	ldr	r1, [pc, #56]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d009      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a3c:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a4a:	4906      	ldr	r1, [pc, #24]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009a50:	7dbb      	ldrb	r3, [r7, #22]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	e000      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	58024400 	.word	0x58024400

08009a68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a6c:	f7ff f860 	bl	8008b30 <HAL_RCC_GetHCLKFreq>
 8009a70:	4602      	mov	r2, r0
 8009a72:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	091b      	lsrs	r3, r3, #4
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	4904      	ldr	r1, [pc, #16]	; (8009a90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a7e:	5ccb      	ldrb	r3, [r1, r3]
 8009a80:	f003 031f 	and.w	r3, r3, #31
 8009a84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	58024400 	.word	0x58024400
 8009a90:	08010e1c 	.word	0x08010e1c

08009a94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b089      	sub	sp, #36	; 0x24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a9c:	4ba1      	ldr	r3, [pc, #644]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa0:	f003 0303 	and.w	r3, r3, #3
 8009aa4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009aa6:	4b9f      	ldr	r3, [pc, #636]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aaa:	0b1b      	lsrs	r3, r3, #12
 8009aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ab0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009ab2:	4b9c      	ldr	r3, [pc, #624]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab6:	091b      	lsrs	r3, r3, #4
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009abe:	4b99      	ldr	r3, [pc, #612]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac2:	08db      	lsrs	r3, r3, #3
 8009ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	fb02 f303 	mul.w	r3, r2, r3
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 8111 	beq.w	8009d04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	f000 8083 	beq.w	8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	f200 80a1 	bhi.w	8009c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d003      	beq.n	8009b00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d056      	beq.n	8009bac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009afe:	e099      	b.n	8009c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b00:	4b88      	ldr	r3, [pc, #544]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0320 	and.w	r3, r3, #32
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d02d      	beq.n	8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b0c:	4b85      	ldr	r3, [pc, #532]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	08db      	lsrs	r3, r3, #3
 8009b12:	f003 0303 	and.w	r3, r3, #3
 8009b16:	4a84      	ldr	r2, [pc, #528]	; (8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009b18:	fa22 f303 	lsr.w	r3, r2, r3
 8009b1c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	ee07 3a90 	vmov	s15, r3
 8009b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b36:	4b7b      	ldr	r3, [pc, #492]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b3e:	ee07 3a90 	vmov	s15, r3
 8009b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b66:	e087      	b.n	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	ee07 3a90 	vmov	s15, r3
 8009b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b7a:	4b6a      	ldr	r3, [pc, #424]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b82:	ee07 3a90 	vmov	s15, r3
 8009b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009baa:	e065      	b.n	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	ee07 3a90 	vmov	s15, r3
 8009bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bbe:	4b59      	ldr	r3, [pc, #356]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bee:	e043      	b.n	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	ee07 3a90 	vmov	s15, r3
 8009bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c02:	4b48      	ldr	r3, [pc, #288]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c32:	e021      	b.n	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	ee07 3a90 	vmov	s15, r3
 8009c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c46:	4b37      	ldr	r3, [pc, #220]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4e:	ee07 3a90 	vmov	s15, r3
 8009c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009c78:	4b2a      	ldr	r3, [pc, #168]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7c:	0a5b      	lsrs	r3, r3, #9
 8009c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c9e:	ee17 2a90 	vmov	r2, s15
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009ca6:	4b1f      	ldr	r3, [pc, #124]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009caa:	0c1b      	lsrs	r3, r3, #16
 8009cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb0:	ee07 3a90 	vmov	s15, r3
 8009cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ccc:	ee17 2a90 	vmov	r2, s15
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009cd4:	4b13      	ldr	r3, [pc, #76]	; (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd8:	0e1b      	lsrs	r3, r3, #24
 8009cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cfa:	ee17 2a90 	vmov	r2, s15
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d02:	e008      	b.n	8009d16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	609a      	str	r2, [r3, #8]
}
 8009d16:	bf00      	nop
 8009d18:	3724      	adds	r7, #36	; 0x24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	58024400 	.word	0x58024400
 8009d28:	03d09000 	.word	0x03d09000
 8009d2c:	46000000 	.word	0x46000000
 8009d30:	4c742400 	.word	0x4c742400
 8009d34:	4a742400 	.word	0x4a742400
 8009d38:	4c371b00 	.word	0x4c371b00

08009d3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b089      	sub	sp, #36	; 0x24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d44:	4ba1      	ldr	r3, [pc, #644]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d48:	f003 0303 	and.w	r3, r3, #3
 8009d4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009d4e:	4b9f      	ldr	r3, [pc, #636]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d52:	0d1b      	lsrs	r3, r3, #20
 8009d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d5a:	4b9c      	ldr	r3, [pc, #624]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5e:	0a1b      	lsrs	r3, r3, #8
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009d66:	4b99      	ldr	r3, [pc, #612]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6a:	08db      	lsrs	r3, r3, #3
 8009d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	fb02 f303 	mul.w	r3, r2, r3
 8009d76:	ee07 3a90 	vmov	s15, r3
 8009d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 8111 	beq.w	8009fac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	f000 8083 	beq.w	8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	f200 80a1 	bhi.w	8009edc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d003      	beq.n	8009da8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d056      	beq.n	8009e54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009da6:	e099      	b.n	8009edc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009da8:	4b88      	ldr	r3, [pc, #544]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 0320 	and.w	r3, r3, #32
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d02d      	beq.n	8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009db4:	4b85      	ldr	r3, [pc, #532]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	08db      	lsrs	r3, r3, #3
 8009dba:	f003 0303 	and.w	r3, r3, #3
 8009dbe:	4a84      	ldr	r2, [pc, #528]	; (8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	ee07 3a90 	vmov	s15, r3
 8009dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dde:	4b7b      	ldr	r3, [pc, #492]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de6:	ee07 3a90 	vmov	s15, r3
 8009dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009df2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e0e:	e087      	b.n	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e22:	4b6a      	ldr	r3, [pc, #424]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e2a:	ee07 3a90 	vmov	s15, r3
 8009e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e52:	e065      	b.n	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e66:	4b59      	ldr	r3, [pc, #356]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6e:	ee07 3a90 	vmov	s15, r3
 8009e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e96:	e043      	b.n	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eaa:	4b48      	ldr	r3, [pc, #288]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ebe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009eda:	e021      	b.n	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	ee07 3a90 	vmov	s15, r3
 8009ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eee:	4b37      	ldr	r3, [pc, #220]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef6:	ee07 3a90 	vmov	s15, r3
 8009efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009f20:	4b2a      	ldr	r3, [pc, #168]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f24:	0a5b      	lsrs	r3, r3, #9
 8009f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f46:	ee17 2a90 	vmov	r2, s15
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009f4e:	4b1f      	ldr	r3, [pc, #124]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f52:	0c1b      	lsrs	r3, r3, #16
 8009f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f58:	ee07 3a90 	vmov	s15, r3
 8009f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f74:	ee17 2a90 	vmov	r2, s15
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009f7c:	4b13      	ldr	r3, [pc, #76]	; (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f80:	0e1b      	lsrs	r3, r3, #24
 8009f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f86:	ee07 3a90 	vmov	s15, r3
 8009f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f96:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fa2:	ee17 2a90 	vmov	r2, s15
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009faa:	e008      	b.n	8009fbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	609a      	str	r2, [r3, #8]
}
 8009fbe:	bf00      	nop
 8009fc0:	3724      	adds	r7, #36	; 0x24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	58024400 	.word	0x58024400
 8009fd0:	03d09000 	.word	0x03d09000
 8009fd4:	46000000 	.word	0x46000000
 8009fd8:	4c742400 	.word	0x4c742400
 8009fdc:	4a742400 	.word	0x4a742400
 8009fe0:	4c371b00 	.word	0x4c371b00

08009fe4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ff2:	4b53      	ldr	r3, [pc, #332]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff6:	f003 0303 	and.w	r3, r3, #3
 8009ffa:	2b03      	cmp	r3, #3
 8009ffc:	d101      	bne.n	800a002 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e099      	b.n	800a136 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a002:	4b4f      	ldr	r3, [pc, #316]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a4e      	ldr	r2, [pc, #312]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a008:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a00c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a00e:	f7fa faa9 	bl	8004564 <HAL_GetTick>
 800a012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a014:	e008      	b.n	800a028 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a016:	f7fa faa5 	bl	8004564 <HAL_GetTick>
 800a01a:	4602      	mov	r2, r0
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	1ad3      	subs	r3, r2, r3
 800a020:	2b02      	cmp	r3, #2
 800a022:	d901      	bls.n	800a028 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a024:	2303      	movs	r3, #3
 800a026:	e086      	b.n	800a136 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a028:	4b45      	ldr	r3, [pc, #276]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1f0      	bne.n	800a016 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a034:	4b42      	ldr	r3, [pc, #264]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a038:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	031b      	lsls	r3, r3, #12
 800a042:	493f      	ldr	r1, [pc, #252]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a044:	4313      	orrs	r3, r2
 800a046:	628b      	str	r3, [r1, #40]	; 0x28
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	3b01      	subs	r3, #1
 800a058:	025b      	lsls	r3, r3, #9
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	431a      	orrs	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	3b01      	subs	r3, #1
 800a064:	041b      	lsls	r3, r3, #16
 800a066:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a06a:	431a      	orrs	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	3b01      	subs	r3, #1
 800a072:	061b      	lsls	r3, r3, #24
 800a074:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a078:	4931      	ldr	r1, [pc, #196]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a07e:	4b30      	ldr	r3, [pc, #192]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	492d      	ldr	r1, [pc, #180]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a090:	4b2b      	ldr	r3, [pc, #172]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a094:	f023 0220 	bic.w	r2, r3, #32
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	4928      	ldr	r1, [pc, #160]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a0a2:	4b27      	ldr	r3, [pc, #156]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a6:	4a26      	ldr	r2, [pc, #152]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0a8:	f023 0310 	bic.w	r3, r3, #16
 800a0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a0ae:	4b24      	ldr	r3, [pc, #144]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0b2:	4b24      	ldr	r3, [pc, #144]	; (800a144 <RCCEx_PLL2_Config+0x160>)
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	69d2      	ldr	r2, [r2, #28]
 800a0ba:	00d2      	lsls	r2, r2, #3
 800a0bc:	4920      	ldr	r1, [pc, #128]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a0c2:	4b1f      	ldr	r3, [pc, #124]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c6:	4a1e      	ldr	r2, [pc, #120]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0c8:	f043 0310 	orr.w	r3, r3, #16
 800a0cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d106      	bne.n	800a0e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0d4:	4b1a      	ldr	r3, [pc, #104]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	4a19      	ldr	r2, [pc, #100]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0e0:	e00f      	b.n	800a102 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d106      	bne.n	800a0f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0e8:	4b15      	ldr	r3, [pc, #84]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	4a14      	ldr	r2, [pc, #80]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0f4:	e005      	b.n	800a102 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0f6:	4b12      	ldr	r3, [pc, #72]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fa:	4a11      	ldr	r2, [pc, #68]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a100:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a102:	4b0f      	ldr	r3, [pc, #60]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a0e      	ldr	r2, [pc, #56]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a10c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a10e:	f7fa fa29 	bl	8004564 <HAL_GetTick>
 800a112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a114:	e008      	b.n	800a128 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a116:	f7fa fa25 	bl	8004564 <HAL_GetTick>
 800a11a:	4602      	mov	r2, r0
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	1ad3      	subs	r3, r2, r3
 800a120:	2b02      	cmp	r3, #2
 800a122:	d901      	bls.n	800a128 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	e006      	b.n	800a136 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a128:	4b05      	ldr	r3, [pc, #20]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d0f0      	beq.n	800a116 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a134:	7bfb      	ldrb	r3, [r7, #15]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	58024400 	.word	0x58024400
 800a144:	ffff0007 	.word	0xffff0007

0800a148 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a156:	4b53      	ldr	r3, [pc, #332]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d101      	bne.n	800a166 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e099      	b.n	800a29a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a166:	4b4f      	ldr	r3, [pc, #316]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a4e      	ldr	r2, [pc, #312]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a16c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a172:	f7fa f9f7 	bl	8004564 <HAL_GetTick>
 800a176:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a178:	e008      	b.n	800a18c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a17a:	f7fa f9f3 	bl	8004564 <HAL_GetTick>
 800a17e:	4602      	mov	r2, r0
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	2b02      	cmp	r3, #2
 800a186:	d901      	bls.n	800a18c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	e086      	b.n	800a29a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a18c:	4b45      	ldr	r3, [pc, #276]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1f0      	bne.n	800a17a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a198:	4b42      	ldr	r3, [pc, #264]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	051b      	lsls	r3, r3, #20
 800a1a6:	493f      	ldr	r1, [pc, #252]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	628b      	str	r3, [r1, #40]	; 0x28
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	025b      	lsls	r3, r3, #9
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	431a      	orrs	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	041b      	lsls	r3, r3, #16
 800a1ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	061b      	lsls	r3, r3, #24
 800a1d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1dc:	4931      	ldr	r1, [pc, #196]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1e2:	4b30      	ldr	r3, [pc, #192]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	695b      	ldr	r3, [r3, #20]
 800a1ee:	492d      	ldr	r1, [pc, #180]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1f4:	4b2b      	ldr	r3, [pc, #172]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	4928      	ldr	r1, [pc, #160]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a202:	4313      	orrs	r3, r2
 800a204:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a206:	4b27      	ldr	r3, [pc, #156]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20a:	4a26      	ldr	r2, [pc, #152]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a20c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a212:	4b24      	ldr	r3, [pc, #144]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a216:	4b24      	ldr	r3, [pc, #144]	; (800a2a8 <RCCEx_PLL3_Config+0x160>)
 800a218:	4013      	ands	r3, r2
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	69d2      	ldr	r2, [r2, #28]
 800a21e:	00d2      	lsls	r2, r2, #3
 800a220:	4920      	ldr	r1, [pc, #128]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a222:	4313      	orrs	r3, r2
 800a224:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a226:	4b1f      	ldr	r3, [pc, #124]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22a:	4a1e      	ldr	r2, [pc, #120]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a22c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a230:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d106      	bne.n	800a246 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a238:	4b1a      	ldr	r3, [pc, #104]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23c:	4a19      	ldr	r2, [pc, #100]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a23e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a242:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a244:	e00f      	b.n	800a266 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d106      	bne.n	800a25a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a24c:	4b15      	ldr	r3, [pc, #84]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a250:	4a14      	ldr	r2, [pc, #80]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a252:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a256:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a258:	e005      	b.n	800a266 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a25a:	4b12      	ldr	r3, [pc, #72]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25e:	4a11      	ldr	r2, [pc, #68]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a264:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a266:	4b0f      	ldr	r3, [pc, #60]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a0e      	ldr	r2, [pc, #56]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a26c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a272:	f7fa f977 	bl	8004564 <HAL_GetTick>
 800a276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a278:	e008      	b.n	800a28c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a27a:	f7fa f973 	bl	8004564 <HAL_GetTick>
 800a27e:	4602      	mov	r2, r0
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	2b02      	cmp	r3, #2
 800a286:	d901      	bls.n	800a28c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a288:	2303      	movs	r3, #3
 800a28a:	e006      	b.n	800a29a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a28c:	4b05      	ldr	r3, [pc, #20]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d0f0      	beq.n	800a27a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a298:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	58024400 	.word	0x58024400
 800a2a8:	ffff0007 	.word	0xffff0007

0800a2ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e0f1      	b.n	800a4a2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a78      	ldr	r2, [pc, #480]	; (800a4ac <HAL_SPI_Init+0x200>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d00f      	beq.n	800a2ee <HAL_SPI_Init+0x42>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a77      	ldr	r2, [pc, #476]	; (800a4b0 <HAL_SPI_Init+0x204>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d00a      	beq.n	800a2ee <HAL_SPI_Init+0x42>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a75      	ldr	r2, [pc, #468]	; (800a4b4 <HAL_SPI_Init+0x208>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d005      	beq.n	800a2ee <HAL_SPI_Init+0x42>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	2b0f      	cmp	r3, #15
 800a2e8:	d901      	bls.n	800a2ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e0d9      	b.n	800a4a2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f8e2 	bl	800a4b8 <SPI_GetPacketSize>
 800a2f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a6c      	ldr	r2, [pc, #432]	; (800a4ac <HAL_SPI_Init+0x200>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d00c      	beq.n	800a31a <HAL_SPI_Init+0x6e>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a6a      	ldr	r2, [pc, #424]	; (800a4b0 <HAL_SPI_Init+0x204>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d007      	beq.n	800a31a <HAL_SPI_Init+0x6e>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a69      	ldr	r2, [pc, #420]	; (800a4b4 <HAL_SPI_Init+0x208>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d002      	beq.n	800a31a <HAL_SPI_Init+0x6e>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b08      	cmp	r3, #8
 800a318:	d811      	bhi.n	800a33e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a31e:	4a63      	ldr	r2, [pc, #396]	; (800a4ac <HAL_SPI_Init+0x200>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d009      	beq.n	800a338 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a61      	ldr	r2, [pc, #388]	; (800a4b0 <HAL_SPI_Init+0x204>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d004      	beq.n	800a338 <HAL_SPI_Init+0x8c>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a60      	ldr	r2, [pc, #384]	; (800a4b4 <HAL_SPI_Init+0x208>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d104      	bne.n	800a342 <HAL_SPI_Init+0x96>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2b10      	cmp	r3, #16
 800a33c:	d901      	bls.n	800a342 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e0af      	b.n	800a4a2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d106      	bne.n	800a35c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7f8 fc82 	bl	8002c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2202      	movs	r2, #2
 800a360:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f022 0201 	bic.w	r2, r2, #1
 800a372:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a37e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a388:	d119      	bne.n	800a3be <HAL_SPI_Init+0x112>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a392:	d103      	bne.n	800a39c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d008      	beq.n	800a3ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10c      	bne.n	800a3be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a3a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3ac:	d107      	bne.n	800a3be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a3bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	69da      	ldr	r2, [r3, #28]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d0:	ea42 0103 	orr.w	r1, r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	68da      	ldr	r2, [r3, #12]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	431a      	orrs	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ee:	431a      	orrs	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	431a      	orrs	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	695b      	ldr	r3, [r3, #20]
 800a400:	431a      	orrs	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	431a      	orrs	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	431a      	orrs	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a412:	431a      	orrs	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	431a      	orrs	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a41e:	ea42 0103 	orr.w	r1, r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	430a      	orrs	r2, r1
 800a42c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d113      	bne.n	800a45e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a448:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a45c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f022 0201 	bic.w	r2, r2, #1
 800a46c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00a      	beq.n	800a490 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	430a      	orrs	r2, r1
 800a48e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	40013000 	.word	0x40013000
 800a4b0:	40003800 	.word	0x40003800
 800a4b4:	40003c00 	.word	0x40003c00

0800a4b8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c4:	095b      	lsrs	r3, r3, #5
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	3307      	adds	r3, #7
 800a4d6:	08db      	lsrs	r3, r3, #3
 800a4d8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	fb02 f303 	mul.w	r3, r2, r3
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d101      	bne.n	800a500 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e049      	b.n	800a594 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a506:	b2db      	uxtb	r3, r3
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d106      	bne.n	800a51a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7f9 fa41 	bl	800399c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2202      	movs	r2, #2
 800a51e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	3304      	adds	r3, #4
 800a52a:	4619      	mov	r1, r3
 800a52c:	4610      	mov	r0, r2
 800a52e:	f000 fd71 	bl	800b014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2201      	movs	r2, #1
 800a546:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d001      	beq.n	800a5b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e054      	b.n	800a65e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68da      	ldr	r2, [r3, #12]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f042 0201 	orr.w	r2, r2, #1
 800a5ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a26      	ldr	r2, [pc, #152]	; (800a66c <HAL_TIM_Base_Start_IT+0xd0>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d022      	beq.n	800a61c <HAL_TIM_Base_Start_IT+0x80>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5de:	d01d      	beq.n	800a61c <HAL_TIM_Base_Start_IT+0x80>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a22      	ldr	r2, [pc, #136]	; (800a670 <HAL_TIM_Base_Start_IT+0xd4>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d018      	beq.n	800a61c <HAL_TIM_Base_Start_IT+0x80>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a21      	ldr	r2, [pc, #132]	; (800a674 <HAL_TIM_Base_Start_IT+0xd8>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d013      	beq.n	800a61c <HAL_TIM_Base_Start_IT+0x80>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a1f      	ldr	r2, [pc, #124]	; (800a678 <HAL_TIM_Base_Start_IT+0xdc>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d00e      	beq.n	800a61c <HAL_TIM_Base_Start_IT+0x80>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a1e      	ldr	r2, [pc, #120]	; (800a67c <HAL_TIM_Base_Start_IT+0xe0>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d009      	beq.n	800a61c <HAL_TIM_Base_Start_IT+0x80>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a1c      	ldr	r2, [pc, #112]	; (800a680 <HAL_TIM_Base_Start_IT+0xe4>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d004      	beq.n	800a61c <HAL_TIM_Base_Start_IT+0x80>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a1b      	ldr	r2, [pc, #108]	; (800a684 <HAL_TIM_Base_Start_IT+0xe8>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d115      	bne.n	800a648 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	689a      	ldr	r2, [r3, #8]
 800a622:	4b19      	ldr	r3, [pc, #100]	; (800a688 <HAL_TIM_Base_Start_IT+0xec>)
 800a624:	4013      	ands	r3, r2
 800a626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2b06      	cmp	r3, #6
 800a62c:	d015      	beq.n	800a65a <HAL_TIM_Base_Start_IT+0xbe>
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a634:	d011      	beq.n	800a65a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f042 0201 	orr.w	r2, r2, #1
 800a644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a646:	e008      	b.n	800a65a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f042 0201 	orr.w	r2, r2, #1
 800a656:	601a      	str	r2, [r3, #0]
 800a658:	e000      	b.n	800a65c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a65a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	40010000 	.word	0x40010000
 800a670:	40000400 	.word	0x40000400
 800a674:	40000800 	.word	0x40000800
 800a678:	40000c00 	.word	0x40000c00
 800a67c:	40010400 	.word	0x40010400
 800a680:	40001800 	.word	0x40001800
 800a684:	40014000 	.word	0x40014000
 800a688:	00010007 	.word	0x00010007

0800a68c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d101      	bne.n	800a69e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	e049      	b.n	800a732 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d106      	bne.n	800a6b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f841 	bl	800a73a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	3304      	adds	r3, #4
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	4610      	mov	r0, r2
 800a6cc:	f000 fca2 	bl	800b014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a73a:	b480      	push	{r7}
 800a73c:	b083      	sub	sp, #12
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a742:	bf00      	nop
 800a744:	370c      	adds	r7, #12
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
	...

0800a750 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d109      	bne.n	800a774 <HAL_TIM_PWM_Start+0x24>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a766:	b2db      	uxtb	r3, r3
 800a768:	2b01      	cmp	r3, #1
 800a76a:	bf14      	ite	ne
 800a76c:	2301      	movne	r3, #1
 800a76e:	2300      	moveq	r3, #0
 800a770:	b2db      	uxtb	r3, r3
 800a772:	e03c      	b.n	800a7ee <HAL_TIM_PWM_Start+0x9e>
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	2b04      	cmp	r3, #4
 800a778:	d109      	bne.n	800a78e <HAL_TIM_PWM_Start+0x3e>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b01      	cmp	r3, #1
 800a784:	bf14      	ite	ne
 800a786:	2301      	movne	r3, #1
 800a788:	2300      	moveq	r3, #0
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	e02f      	b.n	800a7ee <HAL_TIM_PWM_Start+0x9e>
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	2b08      	cmp	r3, #8
 800a792:	d109      	bne.n	800a7a8 <HAL_TIM_PWM_Start+0x58>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	bf14      	ite	ne
 800a7a0:	2301      	movne	r3, #1
 800a7a2:	2300      	moveq	r3, #0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	e022      	b.n	800a7ee <HAL_TIM_PWM_Start+0x9e>
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2b0c      	cmp	r3, #12
 800a7ac:	d109      	bne.n	800a7c2 <HAL_TIM_PWM_Start+0x72>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	bf14      	ite	ne
 800a7ba:	2301      	movne	r3, #1
 800a7bc:	2300      	moveq	r3, #0
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	e015      	b.n	800a7ee <HAL_TIM_PWM_Start+0x9e>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2b10      	cmp	r3, #16
 800a7c6:	d109      	bne.n	800a7dc <HAL_TIM_PWM_Start+0x8c>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	bf14      	ite	ne
 800a7d4:	2301      	movne	r3, #1
 800a7d6:	2300      	moveq	r3, #0
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	e008      	b.n	800a7ee <HAL_TIM_PWM_Start+0x9e>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	bf14      	ite	ne
 800a7e8:	2301      	movne	r3, #1
 800a7ea:	2300      	moveq	r3, #0
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e0a1      	b.n	800a93a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d104      	bne.n	800a806 <HAL_TIM_PWM_Start+0xb6>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2202      	movs	r2, #2
 800a800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a804:	e023      	b.n	800a84e <HAL_TIM_PWM_Start+0xfe>
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d104      	bne.n	800a816 <HAL_TIM_PWM_Start+0xc6>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2202      	movs	r2, #2
 800a810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a814:	e01b      	b.n	800a84e <HAL_TIM_PWM_Start+0xfe>
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	2b08      	cmp	r3, #8
 800a81a:	d104      	bne.n	800a826 <HAL_TIM_PWM_Start+0xd6>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2202      	movs	r2, #2
 800a820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a824:	e013      	b.n	800a84e <HAL_TIM_PWM_Start+0xfe>
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2b0c      	cmp	r3, #12
 800a82a:	d104      	bne.n	800a836 <HAL_TIM_PWM_Start+0xe6>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2202      	movs	r2, #2
 800a830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a834:	e00b      	b.n	800a84e <HAL_TIM_PWM_Start+0xfe>
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	2b10      	cmp	r3, #16
 800a83a:	d104      	bne.n	800a846 <HAL_TIM_PWM_Start+0xf6>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2202      	movs	r2, #2
 800a840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a844:	e003      	b.n	800a84e <HAL_TIM_PWM_Start+0xfe>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2202      	movs	r2, #2
 800a84a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2201      	movs	r2, #1
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	4618      	mov	r0, r3
 800a858:	f000 ffea 	bl	800b830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a38      	ldr	r2, [pc, #224]	; (800a944 <HAL_TIM_PWM_Start+0x1f4>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d013      	beq.n	800a88e <HAL_TIM_PWM_Start+0x13e>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a37      	ldr	r2, [pc, #220]	; (800a948 <HAL_TIM_PWM_Start+0x1f8>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d00e      	beq.n	800a88e <HAL_TIM_PWM_Start+0x13e>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a35      	ldr	r2, [pc, #212]	; (800a94c <HAL_TIM_PWM_Start+0x1fc>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d009      	beq.n	800a88e <HAL_TIM_PWM_Start+0x13e>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a34      	ldr	r2, [pc, #208]	; (800a950 <HAL_TIM_PWM_Start+0x200>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d004      	beq.n	800a88e <HAL_TIM_PWM_Start+0x13e>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a32      	ldr	r2, [pc, #200]	; (800a954 <HAL_TIM_PWM_Start+0x204>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d101      	bne.n	800a892 <HAL_TIM_PWM_Start+0x142>
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <HAL_TIM_PWM_Start+0x144>
 800a892:	2300      	movs	r3, #0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d007      	beq.n	800a8a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a8a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a25      	ldr	r2, [pc, #148]	; (800a944 <HAL_TIM_PWM_Start+0x1f4>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d022      	beq.n	800a8f8 <HAL_TIM_PWM_Start+0x1a8>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ba:	d01d      	beq.n	800a8f8 <HAL_TIM_PWM_Start+0x1a8>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a25      	ldr	r2, [pc, #148]	; (800a958 <HAL_TIM_PWM_Start+0x208>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d018      	beq.n	800a8f8 <HAL_TIM_PWM_Start+0x1a8>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a24      	ldr	r2, [pc, #144]	; (800a95c <HAL_TIM_PWM_Start+0x20c>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d013      	beq.n	800a8f8 <HAL_TIM_PWM_Start+0x1a8>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a22      	ldr	r2, [pc, #136]	; (800a960 <HAL_TIM_PWM_Start+0x210>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d00e      	beq.n	800a8f8 <HAL_TIM_PWM_Start+0x1a8>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a1a      	ldr	r2, [pc, #104]	; (800a948 <HAL_TIM_PWM_Start+0x1f8>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d009      	beq.n	800a8f8 <HAL_TIM_PWM_Start+0x1a8>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a1e      	ldr	r2, [pc, #120]	; (800a964 <HAL_TIM_PWM_Start+0x214>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d004      	beq.n	800a8f8 <HAL_TIM_PWM_Start+0x1a8>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a16      	ldr	r2, [pc, #88]	; (800a94c <HAL_TIM_PWM_Start+0x1fc>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d115      	bne.n	800a924 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	689a      	ldr	r2, [r3, #8]
 800a8fe:	4b1a      	ldr	r3, [pc, #104]	; (800a968 <HAL_TIM_PWM_Start+0x218>)
 800a900:	4013      	ands	r3, r2
 800a902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b06      	cmp	r3, #6
 800a908:	d015      	beq.n	800a936 <HAL_TIM_PWM_Start+0x1e6>
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a910:	d011      	beq.n	800a936 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f042 0201 	orr.w	r2, r2, #1
 800a920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a922:	e008      	b.n	800a936 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f042 0201 	orr.w	r2, r2, #1
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	e000      	b.n	800a938 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	40010000 	.word	0x40010000
 800a948:	40010400 	.word	0x40010400
 800a94c:	40014000 	.word	0x40014000
 800a950:	40014400 	.word	0x40014400
 800a954:	40014800 	.word	0x40014800
 800a958:	40000400 	.word	0x40000400
 800a95c:	40000800 	.word	0x40000800
 800a960:	40000c00 	.word	0x40000c00
 800a964:	40001800 	.word	0x40001800
 800a968:	00010007 	.word	0x00010007

0800a96c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d122      	bne.n	800a9c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	f003 0302 	and.w	r3, r3, #2
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d11b      	bne.n	800a9c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f06f 0202 	mvn.w	r2, #2
 800a998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2201      	movs	r2, #1
 800a99e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	f003 0303 	and.w	r3, r3, #3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fb12 	bl	800afd8 <HAL_TIM_IC_CaptureCallback>
 800a9b4:	e005      	b.n	800a9c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fb04 	bl	800afc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fb15 	bl	800afec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	f003 0304 	and.w	r3, r3, #4
 800a9d2:	2b04      	cmp	r3, #4
 800a9d4:	d122      	bne.n	800aa1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f003 0304 	and.w	r3, r3, #4
 800a9e0:	2b04      	cmp	r3, #4
 800a9e2:	d11b      	bne.n	800aa1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f06f 0204 	mvn.w	r2, #4
 800a9ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fae8 	bl	800afd8 <HAL_TIM_IC_CaptureCallback>
 800aa08:	e005      	b.n	800aa16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fada 	bl	800afc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 faeb 	bl	800afec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	f003 0308 	and.w	r3, r3, #8
 800aa26:	2b08      	cmp	r3, #8
 800aa28:	d122      	bne.n	800aa70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f003 0308 	and.w	r3, r3, #8
 800aa34:	2b08      	cmp	r3, #8
 800aa36:	d11b      	bne.n	800aa70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f06f 0208 	mvn.w	r2, #8
 800aa40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2204      	movs	r2, #4
 800aa46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	69db      	ldr	r3, [r3, #28]
 800aa4e:	f003 0303 	and.w	r3, r3, #3
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d003      	beq.n	800aa5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fabe 	bl	800afd8 <HAL_TIM_IC_CaptureCallback>
 800aa5c:	e005      	b.n	800aa6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fab0 	bl	800afc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fac1 	bl	800afec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	f003 0310 	and.w	r3, r3, #16
 800aa7a:	2b10      	cmp	r3, #16
 800aa7c:	d122      	bne.n	800aac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	f003 0310 	and.w	r3, r3, #16
 800aa88:	2b10      	cmp	r3, #16
 800aa8a:	d11b      	bne.n	800aac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f06f 0210 	mvn.w	r2, #16
 800aa94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2208      	movs	r2, #8
 800aa9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	69db      	ldr	r3, [r3, #28]
 800aaa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d003      	beq.n	800aab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fa94 	bl	800afd8 <HAL_TIM_IC_CaptureCallback>
 800aab0:	e005      	b.n	800aabe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fa86 	bl	800afc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fa97 	bl	800afec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d10e      	bne.n	800aaf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d107      	bne.n	800aaf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f06f 0201 	mvn.w	r2, #1
 800aae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f7f7 fa5c 	bl	8001fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aafa:	2b80      	cmp	r3, #128	; 0x80
 800aafc:	d10e      	bne.n	800ab1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab08:	2b80      	cmp	r3, #128	; 0x80
 800ab0a:	d107      	bne.n	800ab1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 ffc6 	bl	800baa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab2a:	d10e      	bne.n	800ab4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab36:	2b80      	cmp	r3, #128	; 0x80
 800ab38:	d107      	bne.n	800ab4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ab42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 ffb9 	bl	800babc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab54:	2b40      	cmp	r3, #64	; 0x40
 800ab56:	d10e      	bne.n	800ab76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab62:	2b40      	cmp	r3, #64	; 0x40
 800ab64:	d107      	bne.n	800ab76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fa45 	bl	800b000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	f003 0320 	and.w	r3, r3, #32
 800ab80:	2b20      	cmp	r3, #32
 800ab82:	d10e      	bne.n	800aba2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	f003 0320 	and.w	r3, r3, #32
 800ab8e:	2b20      	cmp	r3, #32
 800ab90:	d107      	bne.n	800aba2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f06f 0220 	mvn.w	r2, #32
 800ab9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 ff79 	bl	800ba94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aba2:	bf00      	nop
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
	...

0800abac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d101      	bne.n	800abca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800abc6:	2302      	movs	r3, #2
 800abc8:	e0ff      	b.n	800adca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2201      	movs	r2, #1
 800abce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b14      	cmp	r3, #20
 800abd6:	f200 80f0 	bhi.w	800adba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800abda:	a201      	add	r2, pc, #4	; (adr r2, 800abe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800abdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe0:	0800ac35 	.word	0x0800ac35
 800abe4:	0800adbb 	.word	0x0800adbb
 800abe8:	0800adbb 	.word	0x0800adbb
 800abec:	0800adbb 	.word	0x0800adbb
 800abf0:	0800ac75 	.word	0x0800ac75
 800abf4:	0800adbb 	.word	0x0800adbb
 800abf8:	0800adbb 	.word	0x0800adbb
 800abfc:	0800adbb 	.word	0x0800adbb
 800ac00:	0800acb7 	.word	0x0800acb7
 800ac04:	0800adbb 	.word	0x0800adbb
 800ac08:	0800adbb 	.word	0x0800adbb
 800ac0c:	0800adbb 	.word	0x0800adbb
 800ac10:	0800acf7 	.word	0x0800acf7
 800ac14:	0800adbb 	.word	0x0800adbb
 800ac18:	0800adbb 	.word	0x0800adbb
 800ac1c:	0800adbb 	.word	0x0800adbb
 800ac20:	0800ad39 	.word	0x0800ad39
 800ac24:	0800adbb 	.word	0x0800adbb
 800ac28:	0800adbb 	.word	0x0800adbb
 800ac2c:	0800adbb 	.word	0x0800adbb
 800ac30:	0800ad79 	.word	0x0800ad79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68b9      	ldr	r1, [r7, #8]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fa84 	bl	800b148 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	699a      	ldr	r2, [r3, #24]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f042 0208 	orr.w	r2, r2, #8
 800ac4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	699a      	ldr	r2, [r3, #24]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f022 0204 	bic.w	r2, r2, #4
 800ac5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6999      	ldr	r1, [r3, #24]
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	691a      	ldr	r2, [r3, #16]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	619a      	str	r2, [r3, #24]
      break;
 800ac72:	e0a5      	b.n	800adc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	68b9      	ldr	r1, [r7, #8]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 faf4 	bl	800b268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	699a      	ldr	r2, [r3, #24]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	699a      	ldr	r2, [r3, #24]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6999      	ldr	r1, [r3, #24]
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	021a      	lsls	r2, r3, #8
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	430a      	orrs	r2, r1
 800acb2:	619a      	str	r2, [r3, #24]
      break;
 800acb4:	e084      	b.n	800adc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	68b9      	ldr	r1, [r7, #8]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 fb5d 	bl	800b37c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	69da      	ldr	r2, [r3, #28]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f042 0208 	orr.w	r2, r2, #8
 800acd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	69da      	ldr	r2, [r3, #28]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f022 0204 	bic.w	r2, r2, #4
 800ace0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	69d9      	ldr	r1, [r3, #28]
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	691a      	ldr	r2, [r3, #16]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	430a      	orrs	r2, r1
 800acf2:	61da      	str	r2, [r3, #28]
      break;
 800acf4:	e064      	b.n	800adc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 fbc5 	bl	800b48c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	69da      	ldr	r2, [r3, #28]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	69da      	ldr	r2, [r3, #28]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	69d9      	ldr	r1, [r3, #28]
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	021a      	lsls	r2, r3, #8
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	430a      	orrs	r2, r1
 800ad34:	61da      	str	r2, [r3, #28]
      break;
 800ad36:	e043      	b.n	800adc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68b9      	ldr	r1, [r7, #8]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 fc0e 	bl	800b560 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f042 0208 	orr.w	r2, r2, #8
 800ad52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f022 0204 	bic.w	r2, r2, #4
 800ad62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	691a      	ldr	r2, [r3, #16]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	430a      	orrs	r2, r1
 800ad74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ad76:	e023      	b.n	800adc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68b9      	ldr	r1, [r7, #8]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 fc52 	bl	800b628 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ada2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	021a      	lsls	r2, r3, #8
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	430a      	orrs	r2, r1
 800adb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800adb8:	e002      	b.n	800adc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	75fb      	strb	r3, [r7, #23]
      break;
 800adbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800adc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop

0800add4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d101      	bne.n	800adf0 <HAL_TIM_ConfigClockSource+0x1c>
 800adec:	2302      	movs	r3, #2
 800adee:	e0dc      	b.n	800afaa <HAL_TIM_ConfigClockSource+0x1d6>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2202      	movs	r2, #2
 800adfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	4b6a      	ldr	r3, [pc, #424]	; (800afb4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a64      	ldr	r2, [pc, #400]	; (800afb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	f000 80a9 	beq.w	800af7e <HAL_TIM_ConfigClockSource+0x1aa>
 800ae2c:	4a62      	ldr	r2, [pc, #392]	; (800afb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	f200 80ae 	bhi.w	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae34:	4a61      	ldr	r2, [pc, #388]	; (800afbc <HAL_TIM_ConfigClockSource+0x1e8>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	f000 80a1 	beq.w	800af7e <HAL_TIM_ConfigClockSource+0x1aa>
 800ae3c:	4a5f      	ldr	r2, [pc, #380]	; (800afbc <HAL_TIM_ConfigClockSource+0x1e8>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	f200 80a6 	bhi.w	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae44:	4a5e      	ldr	r2, [pc, #376]	; (800afc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	f000 8099 	beq.w	800af7e <HAL_TIM_ConfigClockSource+0x1aa>
 800ae4c:	4a5c      	ldr	r2, [pc, #368]	; (800afc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	f200 809e 	bhi.w	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ae58:	f000 8091 	beq.w	800af7e <HAL_TIM_ConfigClockSource+0x1aa>
 800ae5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ae60:	f200 8096 	bhi.w	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae68:	f000 8089 	beq.w	800af7e <HAL_TIM_ConfigClockSource+0x1aa>
 800ae6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae70:	f200 808e 	bhi.w	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae78:	d03e      	beq.n	800aef8 <HAL_TIM_ConfigClockSource+0x124>
 800ae7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae7e:	f200 8087 	bhi.w	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae86:	f000 8086 	beq.w	800af96 <HAL_TIM_ConfigClockSource+0x1c2>
 800ae8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae8e:	d87f      	bhi.n	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae90:	2b70      	cmp	r3, #112	; 0x70
 800ae92:	d01a      	beq.n	800aeca <HAL_TIM_ConfigClockSource+0xf6>
 800ae94:	2b70      	cmp	r3, #112	; 0x70
 800ae96:	d87b      	bhi.n	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae98:	2b60      	cmp	r3, #96	; 0x60
 800ae9a:	d050      	beq.n	800af3e <HAL_TIM_ConfigClockSource+0x16a>
 800ae9c:	2b60      	cmp	r3, #96	; 0x60
 800ae9e:	d877      	bhi.n	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
 800aea0:	2b50      	cmp	r3, #80	; 0x50
 800aea2:	d03c      	beq.n	800af1e <HAL_TIM_ConfigClockSource+0x14a>
 800aea4:	2b50      	cmp	r3, #80	; 0x50
 800aea6:	d873      	bhi.n	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
 800aea8:	2b40      	cmp	r3, #64	; 0x40
 800aeaa:	d058      	beq.n	800af5e <HAL_TIM_ConfigClockSource+0x18a>
 800aeac:	2b40      	cmp	r3, #64	; 0x40
 800aeae:	d86f      	bhi.n	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
 800aeb0:	2b30      	cmp	r3, #48	; 0x30
 800aeb2:	d064      	beq.n	800af7e <HAL_TIM_ConfigClockSource+0x1aa>
 800aeb4:	2b30      	cmp	r3, #48	; 0x30
 800aeb6:	d86b      	bhi.n	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
 800aeb8:	2b20      	cmp	r3, #32
 800aeba:	d060      	beq.n	800af7e <HAL_TIM_ConfigClockSource+0x1aa>
 800aebc:	2b20      	cmp	r3, #32
 800aebe:	d867      	bhi.n	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d05c      	beq.n	800af7e <HAL_TIM_ConfigClockSource+0x1aa>
 800aec4:	2b10      	cmp	r3, #16
 800aec6:	d05a      	beq.n	800af7e <HAL_TIM_ConfigClockSource+0x1aa>
 800aec8:	e062      	b.n	800af90 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6818      	ldr	r0, [r3, #0]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	6899      	ldr	r1, [r3, #8]
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	f000 fc89 	bl	800b7f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aeec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	609a      	str	r2, [r3, #8]
      break;
 800aef6:	e04f      	b.n	800af98 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6818      	ldr	r0, [r3, #0]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	6899      	ldr	r1, [r3, #8]
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	f000 fc72 	bl	800b7f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689a      	ldr	r2, [r3, #8]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af1a:	609a      	str	r2, [r3, #8]
      break;
 800af1c:	e03c      	b.n	800af98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6818      	ldr	r0, [r3, #0]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	6859      	ldr	r1, [r3, #4]
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	461a      	mov	r2, r3
 800af2c:	f000 fbe2 	bl	800b6f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2150      	movs	r1, #80	; 0x50
 800af36:	4618      	mov	r0, r3
 800af38:	f000 fc3c 	bl	800b7b4 <TIM_ITRx_SetConfig>
      break;
 800af3c:	e02c      	b.n	800af98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6818      	ldr	r0, [r3, #0]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	6859      	ldr	r1, [r3, #4]
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	461a      	mov	r2, r3
 800af4c:	f000 fc01 	bl	800b752 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2160      	movs	r1, #96	; 0x60
 800af56:	4618      	mov	r0, r3
 800af58:	f000 fc2c 	bl	800b7b4 <TIM_ITRx_SetConfig>
      break;
 800af5c:	e01c      	b.n	800af98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	6859      	ldr	r1, [r3, #4]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	461a      	mov	r2, r3
 800af6c:	f000 fbc2 	bl	800b6f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2140      	movs	r1, #64	; 0x40
 800af76:	4618      	mov	r0, r3
 800af78:	f000 fc1c 	bl	800b7b4 <TIM_ITRx_SetConfig>
      break;
 800af7c:	e00c      	b.n	800af98 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4619      	mov	r1, r3
 800af88:	4610      	mov	r0, r2
 800af8a:	f000 fc13 	bl	800b7b4 <TIM_ITRx_SetConfig>
      break;
 800af8e:	e003      	b.n	800af98 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	73fb      	strb	r3, [r7, #15]
      break;
 800af94:	e000      	b.n	800af98 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800af96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	ffceff88 	.word	0xffceff88
 800afb8:	00100040 	.word	0x00100040
 800afbc:	00100030 	.word	0x00100030
 800afc0:	00100020 	.word	0x00100020

0800afc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a40      	ldr	r2, [pc, #256]	; (800b128 <TIM_Base_SetConfig+0x114>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d013      	beq.n	800b054 <TIM_Base_SetConfig+0x40>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b032:	d00f      	beq.n	800b054 <TIM_Base_SetConfig+0x40>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a3d      	ldr	r2, [pc, #244]	; (800b12c <TIM_Base_SetConfig+0x118>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d00b      	beq.n	800b054 <TIM_Base_SetConfig+0x40>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a3c      	ldr	r2, [pc, #240]	; (800b130 <TIM_Base_SetConfig+0x11c>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d007      	beq.n	800b054 <TIM_Base_SetConfig+0x40>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a3b      	ldr	r2, [pc, #236]	; (800b134 <TIM_Base_SetConfig+0x120>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d003      	beq.n	800b054 <TIM_Base_SetConfig+0x40>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a3a      	ldr	r2, [pc, #232]	; (800b138 <TIM_Base_SetConfig+0x124>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d108      	bne.n	800b066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b05a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	4313      	orrs	r3, r2
 800b064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a2f      	ldr	r2, [pc, #188]	; (800b128 <TIM_Base_SetConfig+0x114>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d01f      	beq.n	800b0ae <TIM_Base_SetConfig+0x9a>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b074:	d01b      	beq.n	800b0ae <TIM_Base_SetConfig+0x9a>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a2c      	ldr	r2, [pc, #176]	; (800b12c <TIM_Base_SetConfig+0x118>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d017      	beq.n	800b0ae <TIM_Base_SetConfig+0x9a>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a2b      	ldr	r2, [pc, #172]	; (800b130 <TIM_Base_SetConfig+0x11c>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d013      	beq.n	800b0ae <TIM_Base_SetConfig+0x9a>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a2a      	ldr	r2, [pc, #168]	; (800b134 <TIM_Base_SetConfig+0x120>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d00f      	beq.n	800b0ae <TIM_Base_SetConfig+0x9a>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a29      	ldr	r2, [pc, #164]	; (800b138 <TIM_Base_SetConfig+0x124>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d00b      	beq.n	800b0ae <TIM_Base_SetConfig+0x9a>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a28      	ldr	r2, [pc, #160]	; (800b13c <TIM_Base_SetConfig+0x128>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d007      	beq.n	800b0ae <TIM_Base_SetConfig+0x9a>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a27      	ldr	r2, [pc, #156]	; (800b140 <TIM_Base_SetConfig+0x12c>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d003      	beq.n	800b0ae <TIM_Base_SetConfig+0x9a>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a26      	ldr	r2, [pc, #152]	; (800b144 <TIM_Base_SetConfig+0x130>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d108      	bne.n	800b0c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	695b      	ldr	r3, [r3, #20]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	689a      	ldr	r2, [r3, #8]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a10      	ldr	r2, [pc, #64]	; (800b128 <TIM_Base_SetConfig+0x114>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d00f      	beq.n	800b10c <TIM_Base_SetConfig+0xf8>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a12      	ldr	r2, [pc, #72]	; (800b138 <TIM_Base_SetConfig+0x124>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d00b      	beq.n	800b10c <TIM_Base_SetConfig+0xf8>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a11      	ldr	r2, [pc, #68]	; (800b13c <TIM_Base_SetConfig+0x128>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d007      	beq.n	800b10c <TIM_Base_SetConfig+0xf8>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a10      	ldr	r2, [pc, #64]	; (800b140 <TIM_Base_SetConfig+0x12c>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d003      	beq.n	800b10c <TIM_Base_SetConfig+0xf8>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a0f      	ldr	r2, [pc, #60]	; (800b144 <TIM_Base_SetConfig+0x130>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d103      	bne.n	800b114 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	691a      	ldr	r2, [r3, #16]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	615a      	str	r2, [r3, #20]
}
 800b11a:	bf00      	nop
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	40010000 	.word	0x40010000
 800b12c:	40000400 	.word	0x40000400
 800b130:	40000800 	.word	0x40000800
 800b134:	40000c00 	.word	0x40000c00
 800b138:	40010400 	.word	0x40010400
 800b13c:	40014000 	.word	0x40014000
 800b140:	40014400 	.word	0x40014400
 800b144:	40014800 	.word	0x40014800

0800b148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b148:	b480      	push	{r7}
 800b14a:	b087      	sub	sp, #28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	f023 0201 	bic.w	r2, r3, #1
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	699b      	ldr	r3, [r3, #24]
 800b16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	4b37      	ldr	r3, [pc, #220]	; (800b250 <TIM_OC1_SetConfig+0x108>)
 800b174:	4013      	ands	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f023 0303 	bic.w	r3, r3, #3
 800b17e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	4313      	orrs	r3, r2
 800b188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f023 0302 	bic.w	r3, r3, #2
 800b190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	697a      	ldr	r2, [r7, #20]
 800b198:	4313      	orrs	r3, r2
 800b19a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a2d      	ldr	r2, [pc, #180]	; (800b254 <TIM_OC1_SetConfig+0x10c>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d00f      	beq.n	800b1c4 <TIM_OC1_SetConfig+0x7c>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a2c      	ldr	r2, [pc, #176]	; (800b258 <TIM_OC1_SetConfig+0x110>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d00b      	beq.n	800b1c4 <TIM_OC1_SetConfig+0x7c>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a2b      	ldr	r2, [pc, #172]	; (800b25c <TIM_OC1_SetConfig+0x114>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d007      	beq.n	800b1c4 <TIM_OC1_SetConfig+0x7c>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a2a      	ldr	r2, [pc, #168]	; (800b260 <TIM_OC1_SetConfig+0x118>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d003      	beq.n	800b1c4 <TIM_OC1_SetConfig+0x7c>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a29      	ldr	r2, [pc, #164]	; (800b264 <TIM_OC1_SetConfig+0x11c>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d10c      	bne.n	800b1de <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	f023 0308 	bic.w	r3, r3, #8
 800b1ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	697a      	ldr	r2, [r7, #20]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f023 0304 	bic.w	r3, r3, #4
 800b1dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a1c      	ldr	r2, [pc, #112]	; (800b254 <TIM_OC1_SetConfig+0x10c>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d00f      	beq.n	800b206 <TIM_OC1_SetConfig+0xbe>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4a1b      	ldr	r2, [pc, #108]	; (800b258 <TIM_OC1_SetConfig+0x110>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d00b      	beq.n	800b206 <TIM_OC1_SetConfig+0xbe>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4a1a      	ldr	r2, [pc, #104]	; (800b25c <TIM_OC1_SetConfig+0x114>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d007      	beq.n	800b206 <TIM_OC1_SetConfig+0xbe>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a19      	ldr	r2, [pc, #100]	; (800b260 <TIM_OC1_SetConfig+0x118>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d003      	beq.n	800b206 <TIM_OC1_SetConfig+0xbe>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a18      	ldr	r2, [pc, #96]	; (800b264 <TIM_OC1_SetConfig+0x11c>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d111      	bne.n	800b22a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b20c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	699b      	ldr	r3, [r3, #24]
 800b224:	693a      	ldr	r2, [r7, #16]
 800b226:	4313      	orrs	r3, r2
 800b228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	697a      	ldr	r2, [r7, #20]
 800b242:	621a      	str	r2, [r3, #32]
}
 800b244:	bf00      	nop
 800b246:	371c      	adds	r7, #28
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	fffeff8f 	.word	0xfffeff8f
 800b254:	40010000 	.word	0x40010000
 800b258:	40010400 	.word	0x40010400
 800b25c:	40014000 	.word	0x40014000
 800b260:	40014400 	.word	0x40014400
 800b264:	40014800 	.word	0x40014800

0800b268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b268:	b480      	push	{r7}
 800b26a:	b087      	sub	sp, #28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a1b      	ldr	r3, [r3, #32]
 800b276:	f023 0210 	bic.w	r2, r3, #16
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	699b      	ldr	r3, [r3, #24]
 800b28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	4b34      	ldr	r3, [pc, #208]	; (800b364 <TIM_OC2_SetConfig+0xfc>)
 800b294:	4013      	ands	r3, r2
 800b296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b29e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	021b      	lsls	r3, r3, #8
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	f023 0320 	bic.w	r3, r3, #32
 800b2b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	011b      	lsls	r3, r3, #4
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a29      	ldr	r2, [pc, #164]	; (800b368 <TIM_OC2_SetConfig+0x100>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d003      	beq.n	800b2d0 <TIM_OC2_SetConfig+0x68>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a28      	ldr	r2, [pc, #160]	; (800b36c <TIM_OC2_SetConfig+0x104>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d10d      	bne.n	800b2ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	011b      	lsls	r3, r3, #4
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a1e      	ldr	r2, [pc, #120]	; (800b368 <TIM_OC2_SetConfig+0x100>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d00f      	beq.n	800b314 <TIM_OC2_SetConfig+0xac>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a1d      	ldr	r2, [pc, #116]	; (800b36c <TIM_OC2_SetConfig+0x104>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d00b      	beq.n	800b314 <TIM_OC2_SetConfig+0xac>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a1c      	ldr	r2, [pc, #112]	; (800b370 <TIM_OC2_SetConfig+0x108>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d007      	beq.n	800b314 <TIM_OC2_SetConfig+0xac>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a1b      	ldr	r2, [pc, #108]	; (800b374 <TIM_OC2_SetConfig+0x10c>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d003      	beq.n	800b314 <TIM_OC2_SetConfig+0xac>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a1a      	ldr	r2, [pc, #104]	; (800b378 <TIM_OC2_SetConfig+0x110>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d113      	bne.n	800b33c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b31a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	695b      	ldr	r3, [r3, #20]
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	693a      	ldr	r2, [r7, #16]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	4313      	orrs	r3, r2
 800b33a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	697a      	ldr	r2, [r7, #20]
 800b354:	621a      	str	r2, [r3, #32]
}
 800b356:	bf00      	nop
 800b358:	371c      	adds	r7, #28
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	feff8fff 	.word	0xfeff8fff
 800b368:	40010000 	.word	0x40010000
 800b36c:	40010400 	.word	0x40010400
 800b370:	40014000 	.word	0x40014000
 800b374:	40014400 	.word	0x40014400
 800b378:	40014800 	.word	0x40014800

0800b37c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a1b      	ldr	r3, [r3, #32]
 800b38a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a1b      	ldr	r3, [r3, #32]
 800b396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	69db      	ldr	r3, [r3, #28]
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	4b33      	ldr	r3, [pc, #204]	; (800b474 <TIM_OC3_SetConfig+0xf8>)
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f023 0303 	bic.w	r3, r3, #3
 800b3b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	021b      	lsls	r3, r3, #8
 800b3cc:	697a      	ldr	r2, [r7, #20]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a28      	ldr	r2, [pc, #160]	; (800b478 <TIM_OC3_SetConfig+0xfc>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d003      	beq.n	800b3e2 <TIM_OC3_SetConfig+0x66>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a27      	ldr	r2, [pc, #156]	; (800b47c <TIM_OC3_SetConfig+0x100>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d10d      	bne.n	800b3fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	021b      	lsls	r3, r3, #8
 800b3f0:	697a      	ldr	r2, [r7, #20]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a1d      	ldr	r2, [pc, #116]	; (800b478 <TIM_OC3_SetConfig+0xfc>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d00f      	beq.n	800b426 <TIM_OC3_SetConfig+0xaa>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a1c      	ldr	r2, [pc, #112]	; (800b47c <TIM_OC3_SetConfig+0x100>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d00b      	beq.n	800b426 <TIM_OC3_SetConfig+0xaa>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a1b      	ldr	r2, [pc, #108]	; (800b480 <TIM_OC3_SetConfig+0x104>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d007      	beq.n	800b426 <TIM_OC3_SetConfig+0xaa>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a1a      	ldr	r2, [pc, #104]	; (800b484 <TIM_OC3_SetConfig+0x108>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d003      	beq.n	800b426 <TIM_OC3_SetConfig+0xaa>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a19      	ldr	r2, [pc, #100]	; (800b488 <TIM_OC3_SetConfig+0x10c>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d113      	bne.n	800b44e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b42c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	695b      	ldr	r3, [r3, #20]
 800b43a:	011b      	lsls	r3, r3, #4
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	4313      	orrs	r3, r2
 800b440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	011b      	lsls	r3, r3, #4
 800b448:	693a      	ldr	r2, [r7, #16]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	697a      	ldr	r2, [r7, #20]
 800b466:	621a      	str	r2, [r3, #32]
}
 800b468:	bf00      	nop
 800b46a:	371c      	adds	r7, #28
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr
 800b474:	fffeff8f 	.word	0xfffeff8f
 800b478:	40010000 	.word	0x40010000
 800b47c:	40010400 	.word	0x40010400
 800b480:	40014000 	.word	0x40014000
 800b484:	40014400 	.word	0x40014400
 800b488:	40014800 	.word	0x40014800

0800b48c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b087      	sub	sp, #28
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a1b      	ldr	r3, [r3, #32]
 800b49a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	69db      	ldr	r3, [r3, #28]
 800b4b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	4b24      	ldr	r3, [pc, #144]	; (800b548 <TIM_OC4_SetConfig+0xbc>)
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	021b      	lsls	r3, r3, #8
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b4d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	031b      	lsls	r3, r3, #12
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a19      	ldr	r2, [pc, #100]	; (800b54c <TIM_OC4_SetConfig+0xc0>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d00f      	beq.n	800b50c <TIM_OC4_SetConfig+0x80>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a18      	ldr	r2, [pc, #96]	; (800b550 <TIM_OC4_SetConfig+0xc4>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d00b      	beq.n	800b50c <TIM_OC4_SetConfig+0x80>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a17      	ldr	r2, [pc, #92]	; (800b554 <TIM_OC4_SetConfig+0xc8>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d007      	beq.n	800b50c <TIM_OC4_SetConfig+0x80>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4a16      	ldr	r2, [pc, #88]	; (800b558 <TIM_OC4_SetConfig+0xcc>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d003      	beq.n	800b50c <TIM_OC4_SetConfig+0x80>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4a15      	ldr	r2, [pc, #84]	; (800b55c <TIM_OC4_SetConfig+0xd0>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d109      	bne.n	800b520 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	019b      	lsls	r3, r3, #6
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	685a      	ldr	r2, [r3, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	621a      	str	r2, [r3, #32]
}
 800b53a:	bf00      	nop
 800b53c:	371c      	adds	r7, #28
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	feff8fff 	.word	0xfeff8fff
 800b54c:	40010000 	.word	0x40010000
 800b550:	40010400 	.word	0x40010400
 800b554:	40014000 	.word	0x40014000
 800b558:	40014400 	.word	0x40014400
 800b55c:	40014800 	.word	0x40014800

0800b560 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	4b21      	ldr	r3, [pc, #132]	; (800b610 <TIM_OC5_SetConfig+0xb0>)
 800b58c:	4013      	ands	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	4313      	orrs	r3, r2
 800b598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b5a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	041b      	lsls	r3, r3, #16
 800b5a8:	693a      	ldr	r2, [r7, #16]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a18      	ldr	r2, [pc, #96]	; (800b614 <TIM_OC5_SetConfig+0xb4>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d00f      	beq.n	800b5d6 <TIM_OC5_SetConfig+0x76>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4a17      	ldr	r2, [pc, #92]	; (800b618 <TIM_OC5_SetConfig+0xb8>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d00b      	beq.n	800b5d6 <TIM_OC5_SetConfig+0x76>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a16      	ldr	r2, [pc, #88]	; (800b61c <TIM_OC5_SetConfig+0xbc>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d007      	beq.n	800b5d6 <TIM_OC5_SetConfig+0x76>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a15      	ldr	r2, [pc, #84]	; (800b620 <TIM_OC5_SetConfig+0xc0>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d003      	beq.n	800b5d6 <TIM_OC5_SetConfig+0x76>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a14      	ldr	r2, [pc, #80]	; (800b624 <TIM_OC5_SetConfig+0xc4>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d109      	bne.n	800b5ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	021b      	lsls	r3, r3, #8
 800b5e4:	697a      	ldr	r2, [r7, #20]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	697a      	ldr	r2, [r7, #20]
 800b5ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	693a      	ldr	r2, [r7, #16]
 800b602:	621a      	str	r2, [r3, #32]
}
 800b604:	bf00      	nop
 800b606:	371c      	adds	r7, #28
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	fffeff8f 	.word	0xfffeff8f
 800b614:	40010000 	.word	0x40010000
 800b618:	40010400 	.word	0x40010400
 800b61c:	40014000 	.word	0x40014000
 800b620:	40014400 	.word	0x40014400
 800b624:	40014800 	.word	0x40014800

0800b628 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b628:	b480      	push	{r7}
 800b62a:	b087      	sub	sp, #28
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a1b      	ldr	r3, [r3, #32]
 800b642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	4b22      	ldr	r3, [pc, #136]	; (800b6dc <TIM_OC6_SetConfig+0xb4>)
 800b654:	4013      	ands	r3, r2
 800b656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	021b      	lsls	r3, r3, #8
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	4313      	orrs	r3, r2
 800b662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b66a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	051b      	lsls	r3, r3, #20
 800b672:	693a      	ldr	r2, [r7, #16]
 800b674:	4313      	orrs	r3, r2
 800b676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a19      	ldr	r2, [pc, #100]	; (800b6e0 <TIM_OC6_SetConfig+0xb8>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d00f      	beq.n	800b6a0 <TIM_OC6_SetConfig+0x78>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a18      	ldr	r2, [pc, #96]	; (800b6e4 <TIM_OC6_SetConfig+0xbc>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d00b      	beq.n	800b6a0 <TIM_OC6_SetConfig+0x78>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a17      	ldr	r2, [pc, #92]	; (800b6e8 <TIM_OC6_SetConfig+0xc0>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d007      	beq.n	800b6a0 <TIM_OC6_SetConfig+0x78>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a16      	ldr	r2, [pc, #88]	; (800b6ec <TIM_OC6_SetConfig+0xc4>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d003      	beq.n	800b6a0 <TIM_OC6_SetConfig+0x78>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a15      	ldr	r2, [pc, #84]	; (800b6f0 <TIM_OC6_SetConfig+0xc8>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d109      	bne.n	800b6b4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	695b      	ldr	r3, [r3, #20]
 800b6ac:	029b      	lsls	r3, r3, #10
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	697a      	ldr	r2, [r7, #20]
 800b6b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	685a      	ldr	r2, [r3, #4]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	693a      	ldr	r2, [r7, #16]
 800b6cc:	621a      	str	r2, [r3, #32]
}
 800b6ce:	bf00      	nop
 800b6d0:	371c      	adds	r7, #28
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	feff8fff 	.word	0xfeff8fff
 800b6e0:	40010000 	.word	0x40010000
 800b6e4:	40010400 	.word	0x40010400
 800b6e8:	40014000 	.word	0x40014000
 800b6ec:	40014400 	.word	0x40014400
 800b6f0:	40014800 	.word	0x40014800

0800b6f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6a1b      	ldr	r3, [r3, #32]
 800b704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6a1b      	ldr	r3, [r3, #32]
 800b70a:	f023 0201 	bic.w	r2, r3, #1
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	699b      	ldr	r3, [r3, #24]
 800b716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b71e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	011b      	lsls	r3, r3, #4
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	4313      	orrs	r3, r2
 800b728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	f023 030a 	bic.w	r3, r3, #10
 800b730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	4313      	orrs	r3, r2
 800b738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	693a      	ldr	r2, [r7, #16]
 800b73e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	621a      	str	r2, [r3, #32]
}
 800b746:	bf00      	nop
 800b748:	371c      	adds	r7, #28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b752:	b480      	push	{r7}
 800b754:	b087      	sub	sp, #28
 800b756:	af00      	add	r7, sp, #0
 800b758:	60f8      	str	r0, [r7, #12]
 800b75a:	60b9      	str	r1, [r7, #8]
 800b75c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	f023 0210 	bic.w	r2, r3, #16
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	699b      	ldr	r3, [r3, #24]
 800b76e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6a1b      	ldr	r3, [r3, #32]
 800b774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b77c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	031b      	lsls	r3, r3, #12
 800b782:	697a      	ldr	r2, [r7, #20]
 800b784:	4313      	orrs	r3, r2
 800b786:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b78e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	011b      	lsls	r3, r3, #4
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	4313      	orrs	r3, r2
 800b798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	697a      	ldr	r2, [r7, #20]
 800b79e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	693a      	ldr	r2, [r7, #16]
 800b7a4:	621a      	str	r2, [r3, #32]
}
 800b7a6:	bf00      	nop
 800b7a8:	371c      	adds	r7, #28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
	...

0800b7b4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	4b09      	ldr	r3, [pc, #36]	; (800b7ec <TIM_ITRx_SetConfig+0x38>)
 800b7c8:	4013      	ands	r3, r2
 800b7ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	f043 0307 	orr.w	r3, r3, #7
 800b7d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	609a      	str	r2, [r3, #8]
}
 800b7de:	bf00      	nop
 800b7e0:	3714      	adds	r7, #20
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	ffcfff8f 	.word	0xffcfff8f

0800b7f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b087      	sub	sp, #28
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
 800b7fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b80a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	021a      	lsls	r2, r3, #8
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	431a      	orrs	r2, r3
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	4313      	orrs	r3, r2
 800b818:	697a      	ldr	r2, [r7, #20]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	697a      	ldr	r2, [r7, #20]
 800b822:	609a      	str	r2, [r3, #8]
}
 800b824:	bf00      	nop
 800b826:	371c      	adds	r7, #28
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b830:	b480      	push	{r7}
 800b832:	b087      	sub	sp, #28
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	f003 031f 	and.w	r3, r3, #31
 800b842:	2201      	movs	r2, #1
 800b844:	fa02 f303 	lsl.w	r3, r2, r3
 800b848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6a1a      	ldr	r2, [r3, #32]
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	43db      	mvns	r3, r3
 800b852:	401a      	ands	r2, r3
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6a1a      	ldr	r2, [r3, #32]
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	f003 031f 	and.w	r3, r3, #31
 800b862:	6879      	ldr	r1, [r7, #4]
 800b864:	fa01 f303 	lsl.w	r3, r1, r3
 800b868:	431a      	orrs	r2, r3
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	621a      	str	r2, [r3, #32]
}
 800b86e:	bf00      	nop
 800b870:	371c      	adds	r7, #28
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
	...

0800b87c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d101      	bne.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b890:	2302      	movs	r3, #2
 800b892:	e06d      	b.n	800b970 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2202      	movs	r2, #2
 800b8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a30      	ldr	r2, [pc, #192]	; (800b97c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d004      	beq.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a2f      	ldr	r2, [pc, #188]	; (800b980 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d108      	bne.n	800b8da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b8ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a20      	ldr	r2, [pc, #128]	; (800b97c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d022      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b906:	d01d      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a1d      	ldr	r2, [pc, #116]	; (800b984 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d018      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a1c      	ldr	r2, [pc, #112]	; (800b988 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d013      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a1a      	ldr	r2, [pc, #104]	; (800b98c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d00e      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a15      	ldr	r2, [pc, #84]	; (800b980 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d009      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a16      	ldr	r2, [pc, #88]	; (800b990 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d004      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a15      	ldr	r2, [pc, #84]	; (800b994 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d10c      	bne.n	800b95e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b94a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	68ba      	ldr	r2, [r7, #8]
 800b952:	4313      	orrs	r3, r2
 800b954:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68ba      	ldr	r2, [r7, #8]
 800b95c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	40010000 	.word	0x40010000
 800b980:	40010400 	.word	0x40010400
 800b984:	40000400 	.word	0x40000400
 800b988:	40000800 	.word	0x40000800
 800b98c:	40000c00 	.word	0x40000c00
 800b990:	40001800 	.word	0x40001800
 800b994:	40014000 	.word	0x40014000

0800b998 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d101      	bne.n	800b9b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b9b0:	2302      	movs	r3, #2
 800b9b2:	e065      	b.n	800ba80 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	695b      	ldr	r3, [r3, #20]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	699b      	ldr	r3, [r3, #24]
 800ba28:	041b      	lsls	r3, r3, #16
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a16      	ldr	r2, [pc, #88]	; (800ba8c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d004      	beq.n	800ba42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a14      	ldr	r2, [pc, #80]	; (800ba90 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d115      	bne.n	800ba6e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4c:	051b      	lsls	r3, r3, #20
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	69db      	ldr	r3, [r3, #28]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	40010000 	.word	0x40010000
 800ba90:	40010400 	.word	0x40010400

0800ba94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bab0:	bf00      	nop
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bac4:	bf00      	nop
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d101      	bne.n	800bae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	e042      	b.n	800bb68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d106      	bne.n	800bafa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7f8 fa4f 	bl	8003f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2224      	movs	r2, #36	; 0x24
 800bafe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f022 0201 	bic.w	r2, r2, #1
 800bb10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fdee 	bl	800c6f4 <UART_SetConfig>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d101      	bne.n	800bb22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e022      	b.n	800bb68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d002      	beq.n	800bb30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f001 fb42 	bl	800d1b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	685a      	ldr	r2, [r3, #4]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	689a      	ldr	r2, [r3, #8]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f042 0201 	orr.w	r2, r2, #1
 800bb5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f001 fbc9 	bl	800d2f8 <UART_CheckIdleState>
 800bb66:	4603      	mov	r3, r0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b08a      	sub	sp, #40	; 0x28
 800bb74:	af02      	add	r7, sp, #8
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	603b      	str	r3, [r7, #0]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb86:	2b20      	cmp	r3, #32
 800bb88:	f040 8083 	bne.w	800bc92 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d002      	beq.n	800bb98 <HAL_UART_Transmit+0x28>
 800bb92:	88fb      	ldrh	r3, [r7, #6]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e07b      	b.n	800bc94 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d101      	bne.n	800bbaa <HAL_UART_Transmit+0x3a>
 800bba6:	2302      	movs	r3, #2
 800bba8:	e074      	b.n	800bc94 <HAL_UART_Transmit+0x124>
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2201      	movs	r2, #1
 800bbae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2221      	movs	r2, #33	; 0x21
 800bbbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bbc2:	f7f8 fccf 	bl	8004564 <HAL_GetTick>
 800bbc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	88fa      	ldrh	r2, [r7, #6]
 800bbcc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	88fa      	ldrh	r2, [r7, #6]
 800bbd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbe0:	d108      	bne.n	800bbf4 <HAL_UART_Transmit+0x84>
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d104      	bne.n	800bbf4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bbea:	2300      	movs	r3, #0
 800bbec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	61bb      	str	r3, [r7, #24]
 800bbf2:	e003      	b.n	800bbfc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bc04:	e02c      	b.n	800bc60 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2180      	movs	r1, #128	; 0x80
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f001 fbbc 	bl	800d38e <UART_WaitOnFlagUntilTimeout>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d001      	beq.n	800bc20 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e039      	b.n	800bc94 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10b      	bne.n	800bc3e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	3302      	adds	r3, #2
 800bc3a:	61bb      	str	r3, [r7, #24]
 800bc3c:	e007      	b.n	800bc4e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	781a      	ldrb	r2, [r3, #0]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	3b01      	subs	r3, #1
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1cc      	bne.n	800bc06 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2200      	movs	r2, #0
 800bc74:	2140      	movs	r1, #64	; 0x40
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f001 fb89 	bl	800d38e <UART_WaitOnFlagUntilTimeout>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d001      	beq.n	800bc86 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bc82:	2303      	movs	r3, #3
 800bc84:	e006      	b.n	800bc94 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2220      	movs	r2, #32
 800bc8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	e000      	b.n	800bc94 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bc92:	2302      	movs	r3, #2
  }
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3720      	adds	r7, #32
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b08a      	sub	sp, #40	; 0x28
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	603b      	str	r3, [r7, #0]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcb2:	2b20      	cmp	r3, #32
 800bcb4:	f040 80c0 	bne.w	800be38 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d002      	beq.n	800bcc4 <HAL_UART_Receive+0x28>
 800bcbe:	88fb      	ldrh	r3, [r7, #6]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d101      	bne.n	800bcc8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e0b8      	b.n	800be3a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d101      	bne.n	800bcd6 <HAL_UART_Receive+0x3a>
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	e0b1      	b.n	800be3a <HAL_UART_Receive+0x19e>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2222      	movs	r2, #34	; 0x22
 800bcea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bcf4:	f7f8 fc36 	bl	8004564 <HAL_GetTick>
 800bcf8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	88fa      	ldrh	r2, [r7, #6]
 800bcfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	88fa      	ldrh	r2, [r7, #6]
 800bd06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd12:	d10e      	bne.n	800bd32 <HAL_UART_Receive+0x96>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d105      	bne.n	800bd28 <HAL_UART_Receive+0x8c>
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bd22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd26:	e02d      	b.n	800bd84 <HAL_UART_Receive+0xe8>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	22ff      	movs	r2, #255	; 0xff
 800bd2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd30:	e028      	b.n	800bd84 <HAL_UART_Receive+0xe8>
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10d      	bne.n	800bd56 <HAL_UART_Receive+0xba>
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	691b      	ldr	r3, [r3, #16]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d104      	bne.n	800bd4c <HAL_UART_Receive+0xb0>
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	22ff      	movs	r2, #255	; 0xff
 800bd46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd4a:	e01b      	b.n	800bd84 <HAL_UART_Receive+0xe8>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	227f      	movs	r2, #127	; 0x7f
 800bd50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd54:	e016      	b.n	800bd84 <HAL_UART_Receive+0xe8>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd5e:	d10d      	bne.n	800bd7c <HAL_UART_Receive+0xe0>
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d104      	bne.n	800bd72 <HAL_UART_Receive+0xd6>
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	227f      	movs	r2, #127	; 0x7f
 800bd6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd70:	e008      	b.n	800bd84 <HAL_UART_Receive+0xe8>
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	223f      	movs	r2, #63	; 0x3f
 800bd76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd7a:	e003      	b.n	800bd84 <HAL_UART_Receive+0xe8>
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd8a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd94:	d108      	bne.n	800bda8 <HAL_UART_Receive+0x10c>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d104      	bne.n	800bda8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	61bb      	str	r3, [r7, #24]
 800bda6:	e003      	b.n	800bdb0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bdac:	2300      	movs	r3, #0
 800bdae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800bdb8:	e032      	b.n	800be20 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	2120      	movs	r1, #32
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f001 fae2 	bl	800d38e <UART_WaitOnFlagUntilTimeout>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d001      	beq.n	800bdd4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800bdd0:	2303      	movs	r3, #3
 800bdd2:	e032      	b.n	800be3a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10c      	bne.n	800bdf4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde0:	b29a      	uxth	r2, r3
 800bde2:	8a7b      	ldrh	r3, [r7, #18]
 800bde4:	4013      	ands	r3, r2
 800bde6:	b29a      	uxth	r2, r3
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	3302      	adds	r3, #2
 800bdf0:	61bb      	str	r3, [r7, #24]
 800bdf2:	e00c      	b.n	800be0e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfa:	b2da      	uxtb	r2, r3
 800bdfc:	8a7b      	ldrh	r3, [r7, #18]
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	4013      	ands	r3, r2
 800be02:	b2da      	uxtb	r2, r3
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	3301      	adds	r3, #1
 800be0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be14:	b29b      	uxth	r3, r3
 800be16:	3b01      	subs	r3, #1
 800be18:	b29a      	uxth	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be26:	b29b      	uxth	r3, r3
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1c6      	bne.n	800bdba <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2220      	movs	r2, #32
 800be30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800be34:	2300      	movs	r3, #0
 800be36:	e000      	b.n	800be3a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800be38:	2302      	movs	r3, #2
  }
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3720      	adds	r7, #32
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
	...

0800be44 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b08a      	sub	sp, #40	; 0x28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	4613      	mov	r3, r2
 800be50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be58:	2b20      	cmp	r3, #32
 800be5a:	d17a      	bne.n	800bf52 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <HAL_UART_Transmit_DMA+0x24>
 800be62:	88fb      	ldrh	r3, [r7, #6]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e073      	b.n	800bf54 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be72:	2b01      	cmp	r3, #1
 800be74:	d101      	bne.n	800be7a <HAL_UART_Transmit_DMA+0x36>
 800be76:	2302      	movs	r3, #2
 800be78:	e06c      	b.n	800bf54 <HAL_UART_Transmit_DMA+0x110>
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	88fa      	ldrh	r2, [r7, #6]
 800be8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	88fa      	ldrh	r2, [r7, #6]
 800be94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2221      	movs	r2, #33	; 0x21
 800bea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beac:	2b00      	cmp	r3, #0
 800beae:	d02c      	beq.n	800bf0a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beb4:	4a29      	ldr	r2, [pc, #164]	; (800bf5c <HAL_UART_Transmit_DMA+0x118>)
 800beb6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bebc:	4a28      	ldr	r2, [pc, #160]	; (800bf60 <HAL_UART_Transmit_DMA+0x11c>)
 800bebe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bec4:	4a27      	ldr	r2, [pc, #156]	; (800bf64 <HAL_UART_Transmit_DMA+0x120>)
 800bec6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800becc:	2200      	movs	r2, #0
 800bece:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bed8:	4619      	mov	r1, r3
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	3328      	adds	r3, #40	; 0x28
 800bee0:	461a      	mov	r2, r3
 800bee2:	88fb      	ldrh	r3, [r7, #6]
 800bee4:	f7f9 f9cc 	bl	8005280 <HAL_DMA_Start_IT>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00d      	beq.n	800bf0a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2210      	movs	r2, #16
 800bef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2200      	movs	r2, #0
 800befa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2220      	movs	r2, #32
 800bf02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e024      	b.n	800bf54 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2240      	movs	r2, #64	; 0x40
 800bf10:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	3308      	adds	r3, #8
 800bf20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	e853 3f00 	ldrex	r3, [r3]
 800bf28:	613b      	str	r3, [r7, #16]
   return(result);
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf30:	627b      	str	r3, [r7, #36]	; 0x24
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	3308      	adds	r3, #8
 800bf38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf3a:	623a      	str	r2, [r7, #32]
 800bf3c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf3e:	69f9      	ldr	r1, [r7, #28]
 800bf40:	6a3a      	ldr	r2, [r7, #32]
 800bf42:	e841 2300 	strex	r3, r2, [r1]
 800bf46:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d1e5      	bne.n	800bf1a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e000      	b.n	800bf54 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800bf52:	2302      	movs	r3, #2
  }
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3728      	adds	r7, #40	; 0x28
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	0800d7c1 	.word	0x0800d7c1
 800bf60:	0800d857 	.word	0x0800d857
 800bf64:	0800d9cd 	.word	0x0800d9cd

0800bf68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b0ba      	sub	sp, #232	; 0xe8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	69db      	ldr	r3, [r3, #28]
 800bf76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bf8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bf92:	f640 030f 	movw	r3, #2063	; 0x80f
 800bf96:	4013      	ands	r3, r2
 800bf98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bf9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d11b      	bne.n	800bfdc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bfa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfa8:	f003 0320 	and.w	r3, r3, #32
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d015      	beq.n	800bfdc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bfb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfb4:	f003 0320 	and.w	r3, r3, #32
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d105      	bne.n	800bfc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bfbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d009      	beq.n	800bfdc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f000 835a 	beq.w	800c686 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	4798      	blx	r3
      }
      return;
 800bfda:	e354      	b.n	800c686 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bfdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f000 811f 	beq.w	800c224 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bfe6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bfea:	4b8b      	ldr	r3, [pc, #556]	; (800c218 <HAL_UART_IRQHandler+0x2b0>)
 800bfec:	4013      	ands	r3, r2
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d106      	bne.n	800c000 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bff2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bff6:	4b89      	ldr	r3, [pc, #548]	; (800c21c <HAL_UART_IRQHandler+0x2b4>)
 800bff8:	4013      	ands	r3, r2
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 8112 	beq.w	800c224 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c004:	f003 0301 	and.w	r3, r3, #1
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d011      	beq.n	800c030 <HAL_UART_IRQHandler+0xc8>
 800c00c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00b      	beq.n	800c030 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2201      	movs	r2, #1
 800c01e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c026:	f043 0201 	orr.w	r2, r3, #1
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c034:	f003 0302 	and.w	r3, r3, #2
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d011      	beq.n	800c060 <HAL_UART_IRQHandler+0xf8>
 800c03c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c040:	f003 0301 	and.w	r3, r3, #1
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00b      	beq.n	800c060 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2202      	movs	r2, #2
 800c04e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c056:	f043 0204 	orr.w	r2, r3, #4
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c064:	f003 0304 	and.w	r3, r3, #4
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d011      	beq.n	800c090 <HAL_UART_IRQHandler+0x128>
 800c06c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00b      	beq.n	800c090 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2204      	movs	r2, #4
 800c07e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c086:	f043 0202 	orr.w	r2, r3, #2
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c094:	f003 0308 	and.w	r3, r3, #8
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d017      	beq.n	800c0cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c09c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0a0:	f003 0320 	and.w	r3, r3, #32
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d105      	bne.n	800c0b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c0a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c0ac:	4b5a      	ldr	r3, [pc, #360]	; (800c218 <HAL_UART_IRQHandler+0x2b0>)
 800c0ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d00b      	beq.n	800c0cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2208      	movs	r2, #8
 800c0ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0c2:	f043 0208 	orr.w	r2, r3, #8
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c0cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d012      	beq.n	800c0fe <HAL_UART_IRQHandler+0x196>
 800c0d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00c      	beq.n	800c0fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0f4:	f043 0220 	orr.w	r2, r3, #32
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c104:	2b00      	cmp	r3, #0
 800c106:	f000 82c0 	beq.w	800c68a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c10e:	f003 0320 	and.w	r3, r3, #32
 800c112:	2b00      	cmp	r3, #0
 800c114:	d013      	beq.n	800c13e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c11a:	f003 0320 	and.w	r3, r3, #32
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d105      	bne.n	800c12e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d007      	beq.n	800c13e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c152:	2b40      	cmp	r3, #64	; 0x40
 800c154:	d005      	beq.n	800c162 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c15a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d04f      	beq.n	800c202 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f001 fac6 	bl	800d6f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c172:	2b40      	cmp	r3, #64	; 0x40
 800c174:	d141      	bne.n	800c1fa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3308      	adds	r3, #8
 800c17c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c184:	e853 3f00 	ldrex	r3, [r3]
 800c188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c18c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	3308      	adds	r3, #8
 800c19e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c1a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c1a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c1ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c1b2:	e841 2300 	strex	r3, r2, [r1]
 800c1b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c1ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1d9      	bne.n	800c176 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d013      	beq.n	800c1f2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ce:	4a14      	ldr	r2, [pc, #80]	; (800c220 <HAL_UART_IRQHandler+0x2b8>)
 800c1d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7f9 fdda 	bl	8005d90 <HAL_DMA_Abort_IT>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d017      	beq.n	800c212 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c1ec:	4610      	mov	r0, r2
 800c1ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1f0:	e00f      	b.n	800c212 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fa74 	bl	800c6e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1f8:	e00b      	b.n	800c212 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fa70 	bl	800c6e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c200:	e007      	b.n	800c212 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fa6c 	bl	800c6e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c210:	e23b      	b.n	800c68a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c212:	bf00      	nop
    return;
 800c214:	e239      	b.n	800c68a <HAL_UART_IRQHandler+0x722>
 800c216:	bf00      	nop
 800c218:	10000001 	.word	0x10000001
 800c21c:	04000120 	.word	0x04000120
 800c220:	0800da4d 	.word	0x0800da4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c228:	2b01      	cmp	r3, #1
 800c22a:	f040 81ce 	bne.w	800c5ca <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c232:	f003 0310 	and.w	r3, r3, #16
 800c236:	2b00      	cmp	r3, #0
 800c238:	f000 81c7 	beq.w	800c5ca <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c23c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c240:	f003 0310 	and.w	r3, r3, #16
 800c244:	2b00      	cmp	r3, #0
 800c246:	f000 81c0 	beq.w	800c5ca <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2210      	movs	r2, #16
 800c250:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c25c:	2b40      	cmp	r3, #64	; 0x40
 800c25e:	f040 813b 	bne.w	800c4d8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a8b      	ldr	r2, [pc, #556]	; (800c498 <HAL_UART_IRQHandler+0x530>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d059      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a89      	ldr	r2, [pc, #548]	; (800c49c <HAL_UART_IRQHandler+0x534>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d053      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a87      	ldr	r2, [pc, #540]	; (800c4a0 <HAL_UART_IRQHandler+0x538>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d04d      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a85      	ldr	r2, [pc, #532]	; (800c4a4 <HAL_UART_IRQHandler+0x53c>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d047      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a83      	ldr	r2, [pc, #524]	; (800c4a8 <HAL_UART_IRQHandler+0x540>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d041      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a81      	ldr	r2, [pc, #516]	; (800c4ac <HAL_UART_IRQHandler+0x544>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d03b      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a7f      	ldr	r2, [pc, #508]	; (800c4b0 <HAL_UART_IRQHandler+0x548>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d035      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a7d      	ldr	r2, [pc, #500]	; (800c4b4 <HAL_UART_IRQHandler+0x54c>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d02f      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a7b      	ldr	r2, [pc, #492]	; (800c4b8 <HAL_UART_IRQHandler+0x550>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d029      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a79      	ldr	r2, [pc, #484]	; (800c4bc <HAL_UART_IRQHandler+0x554>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d023      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a77      	ldr	r2, [pc, #476]	; (800c4c0 <HAL_UART_IRQHandler+0x558>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d01d      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a75      	ldr	r2, [pc, #468]	; (800c4c4 <HAL_UART_IRQHandler+0x55c>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d017      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a73      	ldr	r2, [pc, #460]	; (800c4c8 <HAL_UART_IRQHandler+0x560>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d011      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a71      	ldr	r2, [pc, #452]	; (800c4cc <HAL_UART_IRQHandler+0x564>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d00b      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a6f      	ldr	r2, [pc, #444]	; (800c4d0 <HAL_UART_IRQHandler+0x568>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d005      	beq.n	800c322 <HAL_UART_IRQHandler+0x3ba>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a6d      	ldr	r2, [pc, #436]	; (800c4d4 <HAL_UART_IRQHandler+0x56c>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d105      	bne.n	800c32e <HAL_UART_IRQHandler+0x3c6>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	e004      	b.n	800c338 <HAL_UART_IRQHandler+0x3d0>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	b29b      	uxth	r3, r3
 800c338:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c33c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c340:	2b00      	cmp	r3, #0
 800c342:	f000 81a4 	beq.w	800c68e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c34c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c350:	429a      	cmp	r2, r3
 800c352:	f080 819c 	bcs.w	800c68e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c35c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c364:	69db      	ldr	r3, [r3, #28]
 800c366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c36a:	f000 8086 	beq.w	800c47a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c37a:	e853 3f00 	ldrex	r3, [r3]
 800c37e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c382:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c38a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	461a      	mov	r2, r3
 800c394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c398:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c39c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c3a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c3a8:	e841 2300 	strex	r3, r2, [r1]
 800c3ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c3b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1da      	bne.n	800c36e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	3308      	adds	r3, #8
 800c3be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3c2:	e853 3f00 	ldrex	r3, [r3]
 800c3c6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c3c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3ca:	f023 0301 	bic.w	r3, r3, #1
 800c3ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3308      	adds	r3, #8
 800c3d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c3dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c3e0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c3e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c3e8:	e841 2300 	strex	r3, r2, [r1]
 800c3ec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c3ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d1e1      	bne.n	800c3b8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	3308      	adds	r3, #8
 800c3fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3fe:	e853 3f00 	ldrex	r3, [r3]
 800c402:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c40a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3308      	adds	r3, #8
 800c414:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c418:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c41a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c41e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c420:	e841 2300 	strex	r3, r2, [r1]
 800c424:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c426:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1e3      	bne.n	800c3f4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2220      	movs	r2, #32
 800c430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c442:	e853 3f00 	ldrex	r3, [r3]
 800c446:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c44a:	f023 0310 	bic.w	r3, r3, #16
 800c44e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	461a      	mov	r2, r3
 800c458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c45c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c45e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c460:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c464:	e841 2300 	strex	r3, r2, [r1]
 800c468:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1e4      	bne.n	800c43a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c474:	4618      	mov	r0, r3
 800c476:	f7f9 f96d 	bl	8005754 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c486:	b29b      	uxth	r3, r3
 800c488:	1ad3      	subs	r3, r2, r3
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	4619      	mov	r1, r3
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f7f4 ff04 	bl	800129c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c494:	e0fb      	b.n	800c68e <HAL_UART_IRQHandler+0x726>
 800c496:	bf00      	nop
 800c498:	40020010 	.word	0x40020010
 800c49c:	40020028 	.word	0x40020028
 800c4a0:	40020040 	.word	0x40020040
 800c4a4:	40020058 	.word	0x40020058
 800c4a8:	40020070 	.word	0x40020070
 800c4ac:	40020088 	.word	0x40020088
 800c4b0:	400200a0 	.word	0x400200a0
 800c4b4:	400200b8 	.word	0x400200b8
 800c4b8:	40020410 	.word	0x40020410
 800c4bc:	40020428 	.word	0x40020428
 800c4c0:	40020440 	.word	0x40020440
 800c4c4:	40020458 	.word	0x40020458
 800c4c8:	40020470 	.word	0x40020470
 800c4cc:	40020488 	.word	0x40020488
 800c4d0:	400204a0 	.word	0x400204a0
 800c4d4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f000 80cc 	beq.w	800c692 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c4fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f000 80c7 	beq.w	800c692 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50c:	e853 3f00 	ldrex	r3, [r3]
 800c510:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	461a      	mov	r2, r3
 800c522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c526:	647b      	str	r3, [r7, #68]	; 0x44
 800c528:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c52c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c52e:	e841 2300 	strex	r3, r2, [r1]
 800c532:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1e4      	bne.n	800c504 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	3308      	adds	r3, #8
 800c540:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c544:	e853 3f00 	ldrex	r3, [r3]
 800c548:	623b      	str	r3, [r7, #32]
   return(result);
 800c54a:	6a3a      	ldr	r2, [r7, #32]
 800c54c:	4b54      	ldr	r3, [pc, #336]	; (800c6a0 <HAL_UART_IRQHandler+0x738>)
 800c54e:	4013      	ands	r3, r2
 800c550:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	3308      	adds	r3, #8
 800c55a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c55e:	633a      	str	r2, [r7, #48]	; 0x30
 800c560:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c566:	e841 2300 	strex	r3, r2, [r1]
 800c56a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1e3      	bne.n	800c53a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2220      	movs	r2, #32
 800c576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	e853 3f00 	ldrex	r3, [r3]
 800c592:	60fb      	str	r3, [r7, #12]
   return(result);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f023 0310 	bic.w	r3, r3, #16
 800c59a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c5a8:	61fb      	str	r3, [r7, #28]
 800c5aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ac:	69b9      	ldr	r1, [r7, #24]
 800c5ae:	69fa      	ldr	r2, [r7, #28]
 800c5b0:	e841 2300 	strex	r3, r2, [r1]
 800c5b4:	617b      	str	r3, [r7, #20]
   return(result);
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1e4      	bne.n	800c586 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c5bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7f4 fe6a 	bl	800129c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5c8:	e063      	b.n	800c692 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00e      	beq.n	800c5f4 <HAL_UART_IRQHandler+0x68c>
 800c5d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d008      	beq.n	800c5f4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c5ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f001 fa6e 	bl	800dace <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5f2:	e051      	b.n	800c698 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d014      	beq.n	800c62a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d105      	bne.n	800c618 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c60c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c614:	2b00      	cmp	r3, #0
 800c616:	d008      	beq.n	800c62a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d03a      	beq.n	800c696 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	4798      	blx	r3
    }
    return;
 800c628:	e035      	b.n	800c696 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c62a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c632:	2b00      	cmp	r3, #0
 800c634:	d009      	beq.n	800c64a <HAL_UART_IRQHandler+0x6e2>
 800c636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d003      	beq.n	800c64a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f001 fa18 	bl	800da78 <UART_EndTransmit_IT>
    return;
 800c648:	e026      	b.n	800c698 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c64e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c652:	2b00      	cmp	r3, #0
 800c654:	d009      	beq.n	800c66a <HAL_UART_IRQHandler+0x702>
 800c656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c65a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f001 fa47 	bl	800daf6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c668:	e016      	b.n	800c698 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c66e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c672:	2b00      	cmp	r3, #0
 800c674:	d010      	beq.n	800c698 <HAL_UART_IRQHandler+0x730>
 800c676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	da0c      	bge.n	800c698 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f001 fa2f 	bl	800dae2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c684:	e008      	b.n	800c698 <HAL_UART_IRQHandler+0x730>
      return;
 800c686:	bf00      	nop
 800c688:	e006      	b.n	800c698 <HAL_UART_IRQHandler+0x730>
    return;
 800c68a:	bf00      	nop
 800c68c:	e004      	b.n	800c698 <HAL_UART_IRQHandler+0x730>
      return;
 800c68e:	bf00      	nop
 800c690:	e002      	b.n	800c698 <HAL_UART_IRQHandler+0x730>
      return;
 800c692:	bf00      	nop
 800c694:	e000      	b.n	800c698 <HAL_UART_IRQHandler+0x730>
    return;
 800c696:	bf00      	nop
  }
}
 800c698:	37e8      	adds	r7, #232	; 0xe8
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	effffffe 	.word	0xeffffffe

0800c6a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c6ac:	bf00      	nop
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c6e8:	bf00      	nop
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6f4:	b5b0      	push	{r4, r5, r7, lr}
 800c6f6:	b08e      	sub	sp, #56	; 0x38
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	689a      	ldr	r2, [r3, #8]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	431a      	orrs	r2, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	695b      	ldr	r3, [r3, #20]
 800c710:	431a      	orrs	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	4313      	orrs	r3, r2
 800c718:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	4bbf      	ldr	r3, [pc, #764]	; (800ca20 <UART_SetConfig+0x32c>)
 800c722:	4013      	ands	r3, r2
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	6812      	ldr	r2, [r2, #0]
 800c728:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c72a:	430b      	orrs	r3, r1
 800c72c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	68da      	ldr	r2, [r3, #12]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	430a      	orrs	r2, r1
 800c742:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4ab5      	ldr	r2, [pc, #724]	; (800ca24 <UART_SetConfig+0x330>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d004      	beq.n	800c75e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6a1b      	ldr	r3, [r3, #32]
 800c758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c75a:	4313      	orrs	r3, r2
 800c75c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	689a      	ldr	r2, [r3, #8]
 800c764:	4bb0      	ldr	r3, [pc, #704]	; (800ca28 <UART_SetConfig+0x334>)
 800c766:	4013      	ands	r3, r2
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	6812      	ldr	r2, [r2, #0]
 800c76c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c76e:	430b      	orrs	r3, r1
 800c770:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c778:	f023 010f 	bic.w	r1, r3, #15
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	430a      	orrs	r2, r1
 800c786:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4aa7      	ldr	r2, [pc, #668]	; (800ca2c <UART_SetConfig+0x338>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d176      	bne.n	800c880 <UART_SetConfig+0x18c>
 800c792:	4ba7      	ldr	r3, [pc, #668]	; (800ca30 <UART_SetConfig+0x33c>)
 800c794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c79a:	2b28      	cmp	r3, #40	; 0x28
 800c79c:	d86c      	bhi.n	800c878 <UART_SetConfig+0x184>
 800c79e:	a201      	add	r2, pc, #4	; (adr r2, 800c7a4 <UART_SetConfig+0xb0>)
 800c7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a4:	0800c849 	.word	0x0800c849
 800c7a8:	0800c879 	.word	0x0800c879
 800c7ac:	0800c879 	.word	0x0800c879
 800c7b0:	0800c879 	.word	0x0800c879
 800c7b4:	0800c879 	.word	0x0800c879
 800c7b8:	0800c879 	.word	0x0800c879
 800c7bc:	0800c879 	.word	0x0800c879
 800c7c0:	0800c879 	.word	0x0800c879
 800c7c4:	0800c851 	.word	0x0800c851
 800c7c8:	0800c879 	.word	0x0800c879
 800c7cc:	0800c879 	.word	0x0800c879
 800c7d0:	0800c879 	.word	0x0800c879
 800c7d4:	0800c879 	.word	0x0800c879
 800c7d8:	0800c879 	.word	0x0800c879
 800c7dc:	0800c879 	.word	0x0800c879
 800c7e0:	0800c879 	.word	0x0800c879
 800c7e4:	0800c859 	.word	0x0800c859
 800c7e8:	0800c879 	.word	0x0800c879
 800c7ec:	0800c879 	.word	0x0800c879
 800c7f0:	0800c879 	.word	0x0800c879
 800c7f4:	0800c879 	.word	0x0800c879
 800c7f8:	0800c879 	.word	0x0800c879
 800c7fc:	0800c879 	.word	0x0800c879
 800c800:	0800c879 	.word	0x0800c879
 800c804:	0800c861 	.word	0x0800c861
 800c808:	0800c879 	.word	0x0800c879
 800c80c:	0800c879 	.word	0x0800c879
 800c810:	0800c879 	.word	0x0800c879
 800c814:	0800c879 	.word	0x0800c879
 800c818:	0800c879 	.word	0x0800c879
 800c81c:	0800c879 	.word	0x0800c879
 800c820:	0800c879 	.word	0x0800c879
 800c824:	0800c869 	.word	0x0800c869
 800c828:	0800c879 	.word	0x0800c879
 800c82c:	0800c879 	.word	0x0800c879
 800c830:	0800c879 	.word	0x0800c879
 800c834:	0800c879 	.word	0x0800c879
 800c838:	0800c879 	.word	0x0800c879
 800c83c:	0800c879 	.word	0x0800c879
 800c840:	0800c879 	.word	0x0800c879
 800c844:	0800c871 	.word	0x0800c871
 800c848:	2301      	movs	r3, #1
 800c84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c84e:	e222      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c850:	2304      	movs	r3, #4
 800c852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c856:	e21e      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c858:	2308      	movs	r3, #8
 800c85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c85e:	e21a      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c860:	2310      	movs	r3, #16
 800c862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c866:	e216      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c868:	2320      	movs	r3, #32
 800c86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c86e:	e212      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c870:	2340      	movs	r3, #64	; 0x40
 800c872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c876:	e20e      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c878:	2380      	movs	r3, #128	; 0x80
 800c87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c87e:	e20a      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a6b      	ldr	r2, [pc, #428]	; (800ca34 <UART_SetConfig+0x340>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d130      	bne.n	800c8ec <UART_SetConfig+0x1f8>
 800c88a:	4b69      	ldr	r3, [pc, #420]	; (800ca30 <UART_SetConfig+0x33c>)
 800c88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c88e:	f003 0307 	and.w	r3, r3, #7
 800c892:	2b05      	cmp	r3, #5
 800c894:	d826      	bhi.n	800c8e4 <UART_SetConfig+0x1f0>
 800c896:	a201      	add	r2, pc, #4	; (adr r2, 800c89c <UART_SetConfig+0x1a8>)
 800c898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89c:	0800c8b5 	.word	0x0800c8b5
 800c8a0:	0800c8bd 	.word	0x0800c8bd
 800c8a4:	0800c8c5 	.word	0x0800c8c5
 800c8a8:	0800c8cd 	.word	0x0800c8cd
 800c8ac:	0800c8d5 	.word	0x0800c8d5
 800c8b0:	0800c8dd 	.word	0x0800c8dd
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ba:	e1ec      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c8bc:	2304      	movs	r3, #4
 800c8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8c2:	e1e8      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c8c4:	2308      	movs	r3, #8
 800c8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ca:	e1e4      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c8cc:	2310      	movs	r3, #16
 800c8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8d2:	e1e0      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c8d4:	2320      	movs	r3, #32
 800c8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8da:	e1dc      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c8dc:	2340      	movs	r3, #64	; 0x40
 800c8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8e2:	e1d8      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c8e4:	2380      	movs	r3, #128	; 0x80
 800c8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ea:	e1d4      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a51      	ldr	r2, [pc, #324]	; (800ca38 <UART_SetConfig+0x344>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d130      	bne.n	800c958 <UART_SetConfig+0x264>
 800c8f6:	4b4e      	ldr	r3, [pc, #312]	; (800ca30 <UART_SetConfig+0x33c>)
 800c8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8fa:	f003 0307 	and.w	r3, r3, #7
 800c8fe:	2b05      	cmp	r3, #5
 800c900:	d826      	bhi.n	800c950 <UART_SetConfig+0x25c>
 800c902:	a201      	add	r2, pc, #4	; (adr r2, 800c908 <UART_SetConfig+0x214>)
 800c904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c908:	0800c921 	.word	0x0800c921
 800c90c:	0800c929 	.word	0x0800c929
 800c910:	0800c931 	.word	0x0800c931
 800c914:	0800c939 	.word	0x0800c939
 800c918:	0800c941 	.word	0x0800c941
 800c91c:	0800c949 	.word	0x0800c949
 800c920:	2300      	movs	r3, #0
 800c922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c926:	e1b6      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c928:	2304      	movs	r3, #4
 800c92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c92e:	e1b2      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c930:	2308      	movs	r3, #8
 800c932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c936:	e1ae      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c938:	2310      	movs	r3, #16
 800c93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c93e:	e1aa      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c940:	2320      	movs	r3, #32
 800c942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c946:	e1a6      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c948:	2340      	movs	r3, #64	; 0x40
 800c94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c94e:	e1a2      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c950:	2380      	movs	r3, #128	; 0x80
 800c952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c956:	e19e      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a37      	ldr	r2, [pc, #220]	; (800ca3c <UART_SetConfig+0x348>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d130      	bne.n	800c9c4 <UART_SetConfig+0x2d0>
 800c962:	4b33      	ldr	r3, [pc, #204]	; (800ca30 <UART_SetConfig+0x33c>)
 800c964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c966:	f003 0307 	and.w	r3, r3, #7
 800c96a:	2b05      	cmp	r3, #5
 800c96c:	d826      	bhi.n	800c9bc <UART_SetConfig+0x2c8>
 800c96e:	a201      	add	r2, pc, #4	; (adr r2, 800c974 <UART_SetConfig+0x280>)
 800c970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c974:	0800c98d 	.word	0x0800c98d
 800c978:	0800c995 	.word	0x0800c995
 800c97c:	0800c99d 	.word	0x0800c99d
 800c980:	0800c9a5 	.word	0x0800c9a5
 800c984:	0800c9ad 	.word	0x0800c9ad
 800c988:	0800c9b5 	.word	0x0800c9b5
 800c98c:	2300      	movs	r3, #0
 800c98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c992:	e180      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c994:	2304      	movs	r3, #4
 800c996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99a:	e17c      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c99c:	2308      	movs	r3, #8
 800c99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a2:	e178      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c9a4:	2310      	movs	r3, #16
 800c9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9aa:	e174      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c9ac:	2320      	movs	r3, #32
 800c9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9b2:	e170      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c9b4:	2340      	movs	r3, #64	; 0x40
 800c9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ba:	e16c      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c9bc:	2380      	movs	r3, #128	; 0x80
 800c9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9c2:	e168      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a1d      	ldr	r2, [pc, #116]	; (800ca40 <UART_SetConfig+0x34c>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d142      	bne.n	800ca54 <UART_SetConfig+0x360>
 800c9ce:	4b18      	ldr	r3, [pc, #96]	; (800ca30 <UART_SetConfig+0x33c>)
 800c9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9d2:	f003 0307 	and.w	r3, r3, #7
 800c9d6:	2b05      	cmp	r3, #5
 800c9d8:	d838      	bhi.n	800ca4c <UART_SetConfig+0x358>
 800c9da:	a201      	add	r2, pc, #4	; (adr r2, 800c9e0 <UART_SetConfig+0x2ec>)
 800c9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e0:	0800c9f9 	.word	0x0800c9f9
 800c9e4:	0800ca01 	.word	0x0800ca01
 800c9e8:	0800ca09 	.word	0x0800ca09
 800c9ec:	0800ca11 	.word	0x0800ca11
 800c9f0:	0800ca19 	.word	0x0800ca19
 800c9f4:	0800ca45 	.word	0x0800ca45
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9fe:	e14a      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800ca00:	2304      	movs	r3, #4
 800ca02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca06:	e146      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800ca08:	2308      	movs	r3, #8
 800ca0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca0e:	e142      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800ca10:	2310      	movs	r3, #16
 800ca12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca16:	e13e      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800ca18:	2320      	movs	r3, #32
 800ca1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca1e:	e13a      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800ca20:	cfff69f3 	.word	0xcfff69f3
 800ca24:	58000c00 	.word	0x58000c00
 800ca28:	11fff4ff 	.word	0x11fff4ff
 800ca2c:	40011000 	.word	0x40011000
 800ca30:	58024400 	.word	0x58024400
 800ca34:	40004400 	.word	0x40004400
 800ca38:	40004800 	.word	0x40004800
 800ca3c:	40004c00 	.word	0x40004c00
 800ca40:	40005000 	.word	0x40005000
 800ca44:	2340      	movs	r3, #64	; 0x40
 800ca46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca4a:	e124      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800ca4c:	2380      	movs	r3, #128	; 0x80
 800ca4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca52:	e120      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4acc      	ldr	r2, [pc, #816]	; (800cd8c <UART_SetConfig+0x698>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d176      	bne.n	800cb4c <UART_SetConfig+0x458>
 800ca5e:	4bcc      	ldr	r3, [pc, #816]	; (800cd90 <UART_SetConfig+0x69c>)
 800ca60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca66:	2b28      	cmp	r3, #40	; 0x28
 800ca68:	d86c      	bhi.n	800cb44 <UART_SetConfig+0x450>
 800ca6a:	a201      	add	r2, pc, #4	; (adr r2, 800ca70 <UART_SetConfig+0x37c>)
 800ca6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca70:	0800cb15 	.word	0x0800cb15
 800ca74:	0800cb45 	.word	0x0800cb45
 800ca78:	0800cb45 	.word	0x0800cb45
 800ca7c:	0800cb45 	.word	0x0800cb45
 800ca80:	0800cb45 	.word	0x0800cb45
 800ca84:	0800cb45 	.word	0x0800cb45
 800ca88:	0800cb45 	.word	0x0800cb45
 800ca8c:	0800cb45 	.word	0x0800cb45
 800ca90:	0800cb1d 	.word	0x0800cb1d
 800ca94:	0800cb45 	.word	0x0800cb45
 800ca98:	0800cb45 	.word	0x0800cb45
 800ca9c:	0800cb45 	.word	0x0800cb45
 800caa0:	0800cb45 	.word	0x0800cb45
 800caa4:	0800cb45 	.word	0x0800cb45
 800caa8:	0800cb45 	.word	0x0800cb45
 800caac:	0800cb45 	.word	0x0800cb45
 800cab0:	0800cb25 	.word	0x0800cb25
 800cab4:	0800cb45 	.word	0x0800cb45
 800cab8:	0800cb45 	.word	0x0800cb45
 800cabc:	0800cb45 	.word	0x0800cb45
 800cac0:	0800cb45 	.word	0x0800cb45
 800cac4:	0800cb45 	.word	0x0800cb45
 800cac8:	0800cb45 	.word	0x0800cb45
 800cacc:	0800cb45 	.word	0x0800cb45
 800cad0:	0800cb2d 	.word	0x0800cb2d
 800cad4:	0800cb45 	.word	0x0800cb45
 800cad8:	0800cb45 	.word	0x0800cb45
 800cadc:	0800cb45 	.word	0x0800cb45
 800cae0:	0800cb45 	.word	0x0800cb45
 800cae4:	0800cb45 	.word	0x0800cb45
 800cae8:	0800cb45 	.word	0x0800cb45
 800caec:	0800cb45 	.word	0x0800cb45
 800caf0:	0800cb35 	.word	0x0800cb35
 800caf4:	0800cb45 	.word	0x0800cb45
 800caf8:	0800cb45 	.word	0x0800cb45
 800cafc:	0800cb45 	.word	0x0800cb45
 800cb00:	0800cb45 	.word	0x0800cb45
 800cb04:	0800cb45 	.word	0x0800cb45
 800cb08:	0800cb45 	.word	0x0800cb45
 800cb0c:	0800cb45 	.word	0x0800cb45
 800cb10:	0800cb3d 	.word	0x0800cb3d
 800cb14:	2301      	movs	r3, #1
 800cb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb1a:	e0bc      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cb1c:	2304      	movs	r3, #4
 800cb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb22:	e0b8      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cb24:	2308      	movs	r3, #8
 800cb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb2a:	e0b4      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cb2c:	2310      	movs	r3, #16
 800cb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb32:	e0b0      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cb34:	2320      	movs	r3, #32
 800cb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb3a:	e0ac      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cb3c:	2340      	movs	r3, #64	; 0x40
 800cb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb42:	e0a8      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cb44:	2380      	movs	r3, #128	; 0x80
 800cb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb4a:	e0a4      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a90      	ldr	r2, [pc, #576]	; (800cd94 <UART_SetConfig+0x6a0>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d130      	bne.n	800cbb8 <UART_SetConfig+0x4c4>
 800cb56:	4b8e      	ldr	r3, [pc, #568]	; (800cd90 <UART_SetConfig+0x69c>)
 800cb58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb5a:	f003 0307 	and.w	r3, r3, #7
 800cb5e:	2b05      	cmp	r3, #5
 800cb60:	d826      	bhi.n	800cbb0 <UART_SetConfig+0x4bc>
 800cb62:	a201      	add	r2, pc, #4	; (adr r2, 800cb68 <UART_SetConfig+0x474>)
 800cb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb68:	0800cb81 	.word	0x0800cb81
 800cb6c:	0800cb89 	.word	0x0800cb89
 800cb70:	0800cb91 	.word	0x0800cb91
 800cb74:	0800cb99 	.word	0x0800cb99
 800cb78:	0800cba1 	.word	0x0800cba1
 800cb7c:	0800cba9 	.word	0x0800cba9
 800cb80:	2300      	movs	r3, #0
 800cb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb86:	e086      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cb88:	2304      	movs	r3, #4
 800cb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb8e:	e082      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cb90:	2308      	movs	r3, #8
 800cb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb96:	e07e      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cb98:	2310      	movs	r3, #16
 800cb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb9e:	e07a      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cba0:	2320      	movs	r3, #32
 800cba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cba6:	e076      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cba8:	2340      	movs	r3, #64	; 0x40
 800cbaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbae:	e072      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cbb0:	2380      	movs	r3, #128	; 0x80
 800cbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbb6:	e06e      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a76      	ldr	r2, [pc, #472]	; (800cd98 <UART_SetConfig+0x6a4>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d130      	bne.n	800cc24 <UART_SetConfig+0x530>
 800cbc2:	4b73      	ldr	r3, [pc, #460]	; (800cd90 <UART_SetConfig+0x69c>)
 800cbc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbc6:	f003 0307 	and.w	r3, r3, #7
 800cbca:	2b05      	cmp	r3, #5
 800cbcc:	d826      	bhi.n	800cc1c <UART_SetConfig+0x528>
 800cbce:	a201      	add	r2, pc, #4	; (adr r2, 800cbd4 <UART_SetConfig+0x4e0>)
 800cbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd4:	0800cbed 	.word	0x0800cbed
 800cbd8:	0800cbf5 	.word	0x0800cbf5
 800cbdc:	0800cbfd 	.word	0x0800cbfd
 800cbe0:	0800cc05 	.word	0x0800cc05
 800cbe4:	0800cc0d 	.word	0x0800cc0d
 800cbe8:	0800cc15 	.word	0x0800cc15
 800cbec:	2300      	movs	r3, #0
 800cbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbf2:	e050      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cbf4:	2304      	movs	r3, #4
 800cbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbfa:	e04c      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cbfc:	2308      	movs	r3, #8
 800cbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc02:	e048      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cc04:	2310      	movs	r3, #16
 800cc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc0a:	e044      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cc0c:	2320      	movs	r3, #32
 800cc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc12:	e040      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cc14:	2340      	movs	r3, #64	; 0x40
 800cc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc1a:	e03c      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cc1c:	2380      	movs	r3, #128	; 0x80
 800cc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc22:	e038      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a5c      	ldr	r2, [pc, #368]	; (800cd9c <UART_SetConfig+0x6a8>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d130      	bne.n	800cc90 <UART_SetConfig+0x59c>
 800cc2e:	4b58      	ldr	r3, [pc, #352]	; (800cd90 <UART_SetConfig+0x69c>)
 800cc30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc32:	f003 0307 	and.w	r3, r3, #7
 800cc36:	2b05      	cmp	r3, #5
 800cc38:	d826      	bhi.n	800cc88 <UART_SetConfig+0x594>
 800cc3a:	a201      	add	r2, pc, #4	; (adr r2, 800cc40 <UART_SetConfig+0x54c>)
 800cc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc40:	0800cc59 	.word	0x0800cc59
 800cc44:	0800cc61 	.word	0x0800cc61
 800cc48:	0800cc69 	.word	0x0800cc69
 800cc4c:	0800cc71 	.word	0x0800cc71
 800cc50:	0800cc79 	.word	0x0800cc79
 800cc54:	0800cc81 	.word	0x0800cc81
 800cc58:	2302      	movs	r3, #2
 800cc5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc5e:	e01a      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cc60:	2304      	movs	r3, #4
 800cc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc66:	e016      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cc68:	2308      	movs	r3, #8
 800cc6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc6e:	e012      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cc70:	2310      	movs	r3, #16
 800cc72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc76:	e00e      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cc78:	2320      	movs	r3, #32
 800cc7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc7e:	e00a      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cc80:	2340      	movs	r3, #64	; 0x40
 800cc82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc86:	e006      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cc88:	2380      	movs	r3, #128	; 0x80
 800cc8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc8e:	e002      	b.n	800cc96 <UART_SetConfig+0x5a2>
 800cc90:	2380      	movs	r3, #128	; 0x80
 800cc92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a40      	ldr	r2, [pc, #256]	; (800cd9c <UART_SetConfig+0x6a8>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	f040 80ef 	bne.w	800ce80 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cca2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cca6:	2b20      	cmp	r3, #32
 800cca8:	dc46      	bgt.n	800cd38 <UART_SetConfig+0x644>
 800ccaa:	2b02      	cmp	r3, #2
 800ccac:	f2c0 8081 	blt.w	800cdb2 <UART_SetConfig+0x6be>
 800ccb0:	3b02      	subs	r3, #2
 800ccb2:	2b1e      	cmp	r3, #30
 800ccb4:	d87d      	bhi.n	800cdb2 <UART_SetConfig+0x6be>
 800ccb6:	a201      	add	r2, pc, #4	; (adr r2, 800ccbc <UART_SetConfig+0x5c8>)
 800ccb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccbc:	0800cd3f 	.word	0x0800cd3f
 800ccc0:	0800cdb3 	.word	0x0800cdb3
 800ccc4:	0800cd47 	.word	0x0800cd47
 800ccc8:	0800cdb3 	.word	0x0800cdb3
 800cccc:	0800cdb3 	.word	0x0800cdb3
 800ccd0:	0800cdb3 	.word	0x0800cdb3
 800ccd4:	0800cd57 	.word	0x0800cd57
 800ccd8:	0800cdb3 	.word	0x0800cdb3
 800ccdc:	0800cdb3 	.word	0x0800cdb3
 800cce0:	0800cdb3 	.word	0x0800cdb3
 800cce4:	0800cdb3 	.word	0x0800cdb3
 800cce8:	0800cdb3 	.word	0x0800cdb3
 800ccec:	0800cdb3 	.word	0x0800cdb3
 800ccf0:	0800cdb3 	.word	0x0800cdb3
 800ccf4:	0800cd67 	.word	0x0800cd67
 800ccf8:	0800cdb3 	.word	0x0800cdb3
 800ccfc:	0800cdb3 	.word	0x0800cdb3
 800cd00:	0800cdb3 	.word	0x0800cdb3
 800cd04:	0800cdb3 	.word	0x0800cdb3
 800cd08:	0800cdb3 	.word	0x0800cdb3
 800cd0c:	0800cdb3 	.word	0x0800cdb3
 800cd10:	0800cdb3 	.word	0x0800cdb3
 800cd14:	0800cdb3 	.word	0x0800cdb3
 800cd18:	0800cdb3 	.word	0x0800cdb3
 800cd1c:	0800cdb3 	.word	0x0800cdb3
 800cd20:	0800cdb3 	.word	0x0800cdb3
 800cd24:	0800cdb3 	.word	0x0800cdb3
 800cd28:	0800cdb3 	.word	0x0800cdb3
 800cd2c:	0800cdb3 	.word	0x0800cdb3
 800cd30:	0800cdb3 	.word	0x0800cdb3
 800cd34:	0800cda5 	.word	0x0800cda5
 800cd38:	2b40      	cmp	r3, #64	; 0x40
 800cd3a:	d036      	beq.n	800cdaa <UART_SetConfig+0x6b6>
 800cd3c:	e039      	b.n	800cdb2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cd3e:	f7fc fe93 	bl	8009a68 <HAL_RCCEx_GetD3PCLK1Freq>
 800cd42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cd44:	e03b      	b.n	800cdbe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd46:	f107 0314 	add.w	r3, r7, #20
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fc fea2 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd54:	e033      	b.n	800cdbe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd56:	f107 0308 	add.w	r3, r7, #8
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fc ffee 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd64:	e02b      	b.n	800cdbe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd66:	4b0a      	ldr	r3, [pc, #40]	; (800cd90 <UART_SetConfig+0x69c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 0320 	and.w	r3, r3, #32
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d009      	beq.n	800cd86 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd72:	4b07      	ldr	r3, [pc, #28]	; (800cd90 <UART_SetConfig+0x69c>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	08db      	lsrs	r3, r3, #3
 800cd78:	f003 0303 	and.w	r3, r3, #3
 800cd7c:	4a08      	ldr	r2, [pc, #32]	; (800cda0 <UART_SetConfig+0x6ac>)
 800cd7e:	fa22 f303 	lsr.w	r3, r2, r3
 800cd82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd84:	e01b      	b.n	800cdbe <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800cd86:	4b06      	ldr	r3, [pc, #24]	; (800cda0 <UART_SetConfig+0x6ac>)
 800cd88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd8a:	e018      	b.n	800cdbe <UART_SetConfig+0x6ca>
 800cd8c:	40011400 	.word	0x40011400
 800cd90:	58024400 	.word	0x58024400
 800cd94:	40007800 	.word	0x40007800
 800cd98:	40007c00 	.word	0x40007c00
 800cd9c:	58000c00 	.word	0x58000c00
 800cda0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cda4:	4bc4      	ldr	r3, [pc, #784]	; (800d0b8 <UART_SetConfig+0x9c4>)
 800cda6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cda8:	e009      	b.n	800cdbe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cdb0:	e005      	b.n	800cdbe <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cdbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f000 81da 	beq.w	800d17a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdca:	4abc      	ldr	r2, [pc, #752]	; (800d0bc <UART_SetConfig+0x9c8>)
 800cdcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdd8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685a      	ldr	r2, [r3, #4]
 800cdde:	4613      	mov	r3, r2
 800cde0:	005b      	lsls	r3, r3, #1
 800cde2:	4413      	add	r3, r2
 800cde4:	6a3a      	ldr	r2, [r7, #32]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d305      	bcc.n	800cdf6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cdf0:	6a3a      	ldr	r2, [r7, #32]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d903      	bls.n	800cdfe <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cdfc:	e1bd      	b.n	800d17a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce00:	4618      	mov	r0, r3
 800ce02:	f04f 0100 	mov.w	r1, #0
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0a:	4aac      	ldr	r2, [pc, #688]	; (800d0bc <UART_SetConfig+0x9c8>)
 800ce0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce10:	b29a      	uxth	r2, r3
 800ce12:	f04f 0300 	mov.w	r3, #0
 800ce16:	f7f3 fabb 	bl	8000390 <__aeabi_uldivmod>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	4610      	mov	r0, r2
 800ce20:	4619      	mov	r1, r3
 800ce22:	f04f 0200 	mov.w	r2, #0
 800ce26:	f04f 0300 	mov.w	r3, #0
 800ce2a:	020b      	lsls	r3, r1, #8
 800ce2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ce30:	0202      	lsls	r2, r0, #8
 800ce32:	6879      	ldr	r1, [r7, #4]
 800ce34:	6849      	ldr	r1, [r1, #4]
 800ce36:	0849      	lsrs	r1, r1, #1
 800ce38:	4608      	mov	r0, r1
 800ce3a:	f04f 0100 	mov.w	r1, #0
 800ce3e:	1814      	adds	r4, r2, r0
 800ce40:	eb43 0501 	adc.w	r5, r3, r1
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	f04f 0300 	mov.w	r3, #0
 800ce4e:	4620      	mov	r0, r4
 800ce50:	4629      	mov	r1, r5
 800ce52:	f7f3 fa9d 	bl	8000390 <__aeabi_uldivmod>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ce5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce64:	d308      	bcc.n	800ce78 <UART_SetConfig+0x784>
 800ce66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce6c:	d204      	bcs.n	800ce78 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce74:	60da      	str	r2, [r3, #12]
 800ce76:	e180      	b.n	800d17a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ce7e:	e17c      	b.n	800d17a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	69db      	ldr	r3, [r3, #28]
 800ce84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce88:	f040 80be 	bne.w	800d008 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800ce8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce90:	2b20      	cmp	r3, #32
 800ce92:	dc49      	bgt.n	800cf28 <UART_SetConfig+0x834>
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	db7c      	blt.n	800cf92 <UART_SetConfig+0x89e>
 800ce98:	2b20      	cmp	r3, #32
 800ce9a:	d87a      	bhi.n	800cf92 <UART_SetConfig+0x89e>
 800ce9c:	a201      	add	r2, pc, #4	; (adr r2, 800cea4 <UART_SetConfig+0x7b0>)
 800ce9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea2:	bf00      	nop
 800cea4:	0800cf2f 	.word	0x0800cf2f
 800cea8:	0800cf37 	.word	0x0800cf37
 800ceac:	0800cf93 	.word	0x0800cf93
 800ceb0:	0800cf93 	.word	0x0800cf93
 800ceb4:	0800cf3f 	.word	0x0800cf3f
 800ceb8:	0800cf93 	.word	0x0800cf93
 800cebc:	0800cf93 	.word	0x0800cf93
 800cec0:	0800cf93 	.word	0x0800cf93
 800cec4:	0800cf4f 	.word	0x0800cf4f
 800cec8:	0800cf93 	.word	0x0800cf93
 800cecc:	0800cf93 	.word	0x0800cf93
 800ced0:	0800cf93 	.word	0x0800cf93
 800ced4:	0800cf93 	.word	0x0800cf93
 800ced8:	0800cf93 	.word	0x0800cf93
 800cedc:	0800cf93 	.word	0x0800cf93
 800cee0:	0800cf93 	.word	0x0800cf93
 800cee4:	0800cf5f 	.word	0x0800cf5f
 800cee8:	0800cf93 	.word	0x0800cf93
 800ceec:	0800cf93 	.word	0x0800cf93
 800cef0:	0800cf93 	.word	0x0800cf93
 800cef4:	0800cf93 	.word	0x0800cf93
 800cef8:	0800cf93 	.word	0x0800cf93
 800cefc:	0800cf93 	.word	0x0800cf93
 800cf00:	0800cf93 	.word	0x0800cf93
 800cf04:	0800cf93 	.word	0x0800cf93
 800cf08:	0800cf93 	.word	0x0800cf93
 800cf0c:	0800cf93 	.word	0x0800cf93
 800cf10:	0800cf93 	.word	0x0800cf93
 800cf14:	0800cf93 	.word	0x0800cf93
 800cf18:	0800cf93 	.word	0x0800cf93
 800cf1c:	0800cf93 	.word	0x0800cf93
 800cf20:	0800cf93 	.word	0x0800cf93
 800cf24:	0800cf85 	.word	0x0800cf85
 800cf28:	2b40      	cmp	r3, #64	; 0x40
 800cf2a:	d02e      	beq.n	800cf8a <UART_SetConfig+0x896>
 800cf2c:	e031      	b.n	800cf92 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf2e:	f7fb fe2f 	bl	8008b90 <HAL_RCC_GetPCLK1Freq>
 800cf32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cf34:	e033      	b.n	800cf9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf36:	f7fb fe41 	bl	8008bbc <HAL_RCC_GetPCLK2Freq>
 800cf3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cf3c:	e02f      	b.n	800cf9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf3e:	f107 0314 	add.w	r3, r7, #20
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fc fda6 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf4c:	e027      	b.n	800cf9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf4e:	f107 0308 	add.w	r3, r7, #8
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7fc fef2 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf5c:	e01f      	b.n	800cf9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf5e:	4b58      	ldr	r3, [pc, #352]	; (800d0c0 <UART_SetConfig+0x9cc>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f003 0320 	and.w	r3, r3, #32
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d009      	beq.n	800cf7e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf6a:	4b55      	ldr	r3, [pc, #340]	; (800d0c0 <UART_SetConfig+0x9cc>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	08db      	lsrs	r3, r3, #3
 800cf70:	f003 0303 	and.w	r3, r3, #3
 800cf74:	4a53      	ldr	r2, [pc, #332]	; (800d0c4 <UART_SetConfig+0x9d0>)
 800cf76:	fa22 f303 	lsr.w	r3, r2, r3
 800cf7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf7c:	e00f      	b.n	800cf9e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800cf7e:	4b51      	ldr	r3, [pc, #324]	; (800d0c4 <UART_SetConfig+0x9d0>)
 800cf80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf82:	e00c      	b.n	800cf9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf84:	4b4c      	ldr	r3, [pc, #304]	; (800d0b8 <UART_SetConfig+0x9c4>)
 800cf86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf88:	e009      	b.n	800cf9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf90:	e005      	b.n	800cf9e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800cf92:	2300      	movs	r3, #0
 800cf94:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cf96:	2301      	movs	r3, #1
 800cf98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cf9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	f000 80ea 	beq.w	800d17a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfaa:	4a44      	ldr	r2, [pc, #272]	; (800d0bc <UART_SetConfig+0x9c8>)
 800cfac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfb8:	005a      	lsls	r2, r3, #1
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	085b      	lsrs	r3, r3, #1
 800cfc0:	441a      	add	r2, r3
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfce:	2b0f      	cmp	r3, #15
 800cfd0:	d916      	bls.n	800d000 <UART_SetConfig+0x90c>
 800cfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfd8:	d212      	bcs.n	800d000 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	f023 030f 	bic.w	r3, r3, #15
 800cfe2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe6:	085b      	lsrs	r3, r3, #1
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	f003 0307 	and.w	r3, r3, #7
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cff2:	4313      	orrs	r3, r2
 800cff4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cffc:	60da      	str	r2, [r3, #12]
 800cffe:	e0bc      	b.n	800d17a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d006:	e0b8      	b.n	800d17a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d008:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d00c:	2b20      	cmp	r3, #32
 800d00e:	dc4b      	bgt.n	800d0a8 <UART_SetConfig+0x9b4>
 800d010:	2b00      	cmp	r3, #0
 800d012:	f2c0 8087 	blt.w	800d124 <UART_SetConfig+0xa30>
 800d016:	2b20      	cmp	r3, #32
 800d018:	f200 8084 	bhi.w	800d124 <UART_SetConfig+0xa30>
 800d01c:	a201      	add	r2, pc, #4	; (adr r2, 800d024 <UART_SetConfig+0x930>)
 800d01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d022:	bf00      	nop
 800d024:	0800d0af 	.word	0x0800d0af
 800d028:	0800d0c9 	.word	0x0800d0c9
 800d02c:	0800d125 	.word	0x0800d125
 800d030:	0800d125 	.word	0x0800d125
 800d034:	0800d0d1 	.word	0x0800d0d1
 800d038:	0800d125 	.word	0x0800d125
 800d03c:	0800d125 	.word	0x0800d125
 800d040:	0800d125 	.word	0x0800d125
 800d044:	0800d0e1 	.word	0x0800d0e1
 800d048:	0800d125 	.word	0x0800d125
 800d04c:	0800d125 	.word	0x0800d125
 800d050:	0800d125 	.word	0x0800d125
 800d054:	0800d125 	.word	0x0800d125
 800d058:	0800d125 	.word	0x0800d125
 800d05c:	0800d125 	.word	0x0800d125
 800d060:	0800d125 	.word	0x0800d125
 800d064:	0800d0f1 	.word	0x0800d0f1
 800d068:	0800d125 	.word	0x0800d125
 800d06c:	0800d125 	.word	0x0800d125
 800d070:	0800d125 	.word	0x0800d125
 800d074:	0800d125 	.word	0x0800d125
 800d078:	0800d125 	.word	0x0800d125
 800d07c:	0800d125 	.word	0x0800d125
 800d080:	0800d125 	.word	0x0800d125
 800d084:	0800d125 	.word	0x0800d125
 800d088:	0800d125 	.word	0x0800d125
 800d08c:	0800d125 	.word	0x0800d125
 800d090:	0800d125 	.word	0x0800d125
 800d094:	0800d125 	.word	0x0800d125
 800d098:	0800d125 	.word	0x0800d125
 800d09c:	0800d125 	.word	0x0800d125
 800d0a0:	0800d125 	.word	0x0800d125
 800d0a4:	0800d117 	.word	0x0800d117
 800d0a8:	2b40      	cmp	r3, #64	; 0x40
 800d0aa:	d037      	beq.n	800d11c <UART_SetConfig+0xa28>
 800d0ac:	e03a      	b.n	800d124 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0ae:	f7fb fd6f 	bl	8008b90 <HAL_RCC_GetPCLK1Freq>
 800d0b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d0b4:	e03c      	b.n	800d130 <UART_SetConfig+0xa3c>
 800d0b6:	bf00      	nop
 800d0b8:	003d0900 	.word	0x003d0900
 800d0bc:	08010e34 	.word	0x08010e34
 800d0c0:	58024400 	.word	0x58024400
 800d0c4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0c8:	f7fb fd78 	bl	8008bbc <HAL_RCC_GetPCLK2Freq>
 800d0cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d0ce:	e02f      	b.n	800d130 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0d0:	f107 0314 	add.w	r3, r7, #20
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7fc fcdd 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0de:	e027      	b.n	800d130 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0e0:	f107 0308 	add.w	r3, r7, #8
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7fc fe29 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0ee:	e01f      	b.n	800d130 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0f0:	4b2c      	ldr	r3, [pc, #176]	; (800d1a4 <UART_SetConfig+0xab0>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f003 0320 	and.w	r3, r3, #32
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d009      	beq.n	800d110 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0fc:	4b29      	ldr	r3, [pc, #164]	; (800d1a4 <UART_SetConfig+0xab0>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	08db      	lsrs	r3, r3, #3
 800d102:	f003 0303 	and.w	r3, r3, #3
 800d106:	4a28      	ldr	r2, [pc, #160]	; (800d1a8 <UART_SetConfig+0xab4>)
 800d108:	fa22 f303 	lsr.w	r3, r2, r3
 800d10c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d10e:	e00f      	b.n	800d130 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d110:	4b25      	ldr	r3, [pc, #148]	; (800d1a8 <UART_SetConfig+0xab4>)
 800d112:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d114:	e00c      	b.n	800d130 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d116:	4b25      	ldr	r3, [pc, #148]	; (800d1ac <UART_SetConfig+0xab8>)
 800d118:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d11a:	e009      	b.n	800d130 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d11c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d120:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d122:	e005      	b.n	800d130 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d124:	2300      	movs	r3, #0
 800d126:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d12e:	bf00      	nop
    }

    if (pclk != 0U)
 800d130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d132:	2b00      	cmp	r3, #0
 800d134:	d021      	beq.n	800d17a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13a:	4a1d      	ldr	r2, [pc, #116]	; (800d1b0 <UART_SetConfig+0xabc>)
 800d13c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d140:	461a      	mov	r2, r3
 800d142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d144:	fbb3 f2f2 	udiv	r2, r3, r2
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	085b      	lsrs	r3, r3, #1
 800d14e:	441a      	add	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	fbb2 f3f3 	udiv	r3, r2, r3
 800d158:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15c:	2b0f      	cmp	r3, #15
 800d15e:	d909      	bls.n	800d174 <UART_SetConfig+0xa80>
 800d160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d166:	d205      	bcs.n	800d174 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	60da      	str	r2, [r3, #12]
 800d172:	e002      	b.n	800d17a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d174:	2301      	movs	r3, #1
 800d176:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2201      	movs	r2, #1
 800d17e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2201      	movs	r2, #1
 800d186:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d196:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3738      	adds	r7, #56	; 0x38
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bdb0      	pop	{r4, r5, r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	58024400 	.word	0x58024400
 800d1a8:	03d09000 	.word	0x03d09000
 800d1ac:	003d0900 	.word	0x003d0900
 800d1b0:	08010e34 	.word	0x08010e34

0800d1b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c0:	f003 0301 	and.w	r3, r3, #1
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00a      	beq.n	800d1de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	430a      	orrs	r2, r1
 800d1dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e2:	f003 0302 	and.w	r3, r3, #2
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d00a      	beq.n	800d200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	430a      	orrs	r2, r1
 800d1fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d204:	f003 0304 	and.w	r3, r3, #4
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00a      	beq.n	800d222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	430a      	orrs	r2, r1
 800d220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d226:	f003 0308 	and.w	r3, r3, #8
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00a      	beq.n	800d244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	430a      	orrs	r2, r1
 800d242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d248:	f003 0310 	and.w	r3, r3, #16
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00a      	beq.n	800d266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	430a      	orrs	r2, r1
 800d264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d26a:	f003 0320 	and.w	r3, r3, #32
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00a      	beq.n	800d288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	430a      	orrs	r2, r1
 800d286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d290:	2b00      	cmp	r3, #0
 800d292:	d01a      	beq.n	800d2ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	430a      	orrs	r2, r1
 800d2a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2b2:	d10a      	bne.n	800d2ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	430a      	orrs	r2, r1
 800d2c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00a      	beq.n	800d2ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	430a      	orrs	r2, r1
 800d2ea:	605a      	str	r2, [r3, #4]
  }
}
 800d2ec:	bf00      	nop
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b086      	sub	sp, #24
 800d2fc:	af02      	add	r7, sp, #8
 800d2fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d308:	f7f7 f92c 	bl	8004564 <HAL_GetTick>
 800d30c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f003 0308 	and.w	r3, r3, #8
 800d318:	2b08      	cmp	r3, #8
 800d31a:	d10e      	bne.n	800d33a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d31c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2200      	movs	r2, #0
 800d326:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 f82f 	bl	800d38e <UART_WaitOnFlagUntilTimeout>
 800d330:	4603      	mov	r3, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d001      	beq.n	800d33a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d336:	2303      	movs	r3, #3
 800d338:	e025      	b.n	800d386 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f003 0304 	and.w	r3, r3, #4
 800d344:	2b04      	cmp	r3, #4
 800d346:	d10e      	bne.n	800d366 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2200      	movs	r2, #0
 800d352:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 f819 	bl	800d38e <UART_WaitOnFlagUntilTimeout>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d001      	beq.n	800d366 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d362:	2303      	movs	r3, #3
 800d364:	e00f      	b.n	800d386 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2220      	movs	r2, #32
 800d36a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2220      	movs	r2, #32
 800d372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d384:	2300      	movs	r3, #0
}
 800d386:	4618      	mov	r0, r3
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d38e:	b580      	push	{r7, lr}
 800d390:	b09c      	sub	sp, #112	; 0x70
 800d392:	af00      	add	r7, sp, #0
 800d394:	60f8      	str	r0, [r7, #12]
 800d396:	60b9      	str	r1, [r7, #8]
 800d398:	603b      	str	r3, [r7, #0]
 800d39a:	4613      	mov	r3, r2
 800d39c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d39e:	e0a9      	b.n	800d4f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a6:	f000 80a5 	beq.w	800d4f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3aa:	f7f7 f8db 	bl	8004564 <HAL_GetTick>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	1ad3      	subs	r3, r2, r3
 800d3b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d302      	bcc.n	800d3c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800d3ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d140      	bne.n	800d442 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3c8:	e853 3f00 	ldrex	r3, [r3]
 800d3cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d3d4:	667b      	str	r3, [r7, #100]	; 0x64
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	461a      	mov	r2, r3
 800d3dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d3e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d3e6:	e841 2300 	strex	r3, r2, [r1]
 800d3ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d1e6      	bne.n	800d3c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	3308      	adds	r3, #8
 800d3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3fc:	e853 3f00 	ldrex	r3, [r3]
 800d400:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d404:	f023 0301 	bic.w	r3, r3, #1
 800d408:	663b      	str	r3, [r7, #96]	; 0x60
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	3308      	adds	r3, #8
 800d410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d412:	64ba      	str	r2, [r7, #72]	; 0x48
 800d414:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d41a:	e841 2300 	strex	r3, r2, [r1]
 800d41e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1e5      	bne.n	800d3f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2220      	movs	r2, #32
 800d42a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2220      	movs	r2, #32
 800d432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2200      	movs	r2, #0
 800d43a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d43e:	2303      	movs	r3, #3
 800d440:	e069      	b.n	800d516 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f003 0304 	and.w	r3, r3, #4
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d051      	beq.n	800d4f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	69db      	ldr	r3, [r3, #28]
 800d456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d45a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d45e:	d149      	bne.n	800d4f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d468:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d472:	e853 3f00 	ldrex	r3, [r3]
 800d476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d47e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	461a      	mov	r2, r3
 800d486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d488:	637b      	str	r3, [r7, #52]	; 0x34
 800d48a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d48e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d490:	e841 2300 	strex	r3, r2, [r1]
 800d494:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1e6      	bne.n	800d46a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	3308      	adds	r3, #8
 800d4a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	e853 3f00 	ldrex	r3, [r3]
 800d4aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	f023 0301 	bic.w	r3, r3, #1
 800d4b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	3308      	adds	r3, #8
 800d4ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d4bc:	623a      	str	r2, [r7, #32]
 800d4be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c0:	69f9      	ldr	r1, [r7, #28]
 800d4c2:	6a3a      	ldr	r2, [r7, #32]
 800d4c4:	e841 2300 	strex	r3, r2, [r1]
 800d4c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d1e5      	bne.n	800d49c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2220      	movs	r2, #32
 800d4d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2220      	movs	r2, #32
 800d4dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2220      	movs	r2, #32
 800d4e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d4f0:	2303      	movs	r3, #3
 800d4f2:	e010      	b.n	800d516 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	69da      	ldr	r2, [r3, #28]
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	4013      	ands	r3, r2
 800d4fe:	68ba      	ldr	r2, [r7, #8]
 800d500:	429a      	cmp	r2, r3
 800d502:	bf0c      	ite	eq
 800d504:	2301      	moveq	r3, #1
 800d506:	2300      	movne	r3, #0
 800d508:	b2db      	uxtb	r3, r3
 800d50a:	461a      	mov	r2, r3
 800d50c:	79fb      	ldrb	r3, [r7, #7]
 800d50e:	429a      	cmp	r2, r3
 800d510:	f43f af46 	beq.w	800d3a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3770      	adds	r7, #112	; 0x70
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
	...

0800d520 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b096      	sub	sp, #88	; 0x58
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	4613      	mov	r3, r2
 800d52c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	68ba      	ldr	r2, [r7, #8]
 800d532:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	88fa      	ldrh	r2, [r7, #6]
 800d538:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2200      	movs	r2, #0
 800d540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2222      	movs	r2, #34	; 0x22
 800d548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d550:	2b00      	cmp	r3, #0
 800d552:	d02c      	beq.n	800d5ae <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d558:	4a42      	ldr	r2, [pc, #264]	; (800d664 <UART_Start_Receive_DMA+0x144>)
 800d55a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d560:	4a41      	ldr	r2, [pc, #260]	; (800d668 <UART_Start_Receive_DMA+0x148>)
 800d562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d568:	4a40      	ldr	r2, [pc, #256]	; (800d66c <UART_Start_Receive_DMA+0x14c>)
 800d56a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d570:	2200      	movs	r2, #0
 800d572:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	3324      	adds	r3, #36	; 0x24
 800d57e:	4619      	mov	r1, r3
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d584:	461a      	mov	r2, r3
 800d586:	88fb      	ldrh	r3, [r7, #6]
 800d588:	f7f7 fe7a 	bl	8005280 <HAL_DMA_Start_IT>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d00d      	beq.n	800d5ae <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2210      	movs	r2, #16
 800d596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2200      	movs	r2, #0
 800d59e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2220      	movs	r2, #32
 800d5a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e055      	b.n	800d65a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	691b      	ldr	r3, [r3, #16]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d018      	beq.n	800d5f0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c6:	e853 3f00 	ldrex	r3, [r3]
 800d5ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d5d2:	657b      	str	r3, [r7, #84]	; 0x54
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	461a      	mov	r2, r3
 800d5da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5de:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5e4:	e841 2300 	strex	r3, r2, [r1]
 800d5e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1e6      	bne.n	800d5be <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	3308      	adds	r3, #8
 800d5f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fa:	e853 3f00 	ldrex	r3, [r3]
 800d5fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d602:	f043 0301 	orr.w	r3, r3, #1
 800d606:	653b      	str	r3, [r7, #80]	; 0x50
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	3308      	adds	r3, #8
 800d60e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d610:	637a      	str	r2, [r7, #52]	; 0x34
 800d612:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d618:	e841 2300 	strex	r3, r2, [r1]
 800d61c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d620:	2b00      	cmp	r3, #0
 800d622:	d1e5      	bne.n	800d5f0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	3308      	adds	r3, #8
 800d62a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	e853 3f00 	ldrex	r3, [r3]
 800d632:	613b      	str	r3, [r7, #16]
   return(result);
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d63a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	3308      	adds	r3, #8
 800d642:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d644:	623a      	str	r2, [r7, #32]
 800d646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d648:	69f9      	ldr	r1, [r7, #28]
 800d64a:	6a3a      	ldr	r2, [r7, #32]
 800d64c:	e841 2300 	strex	r3, r2, [r1]
 800d650:	61bb      	str	r3, [r7, #24]
   return(result);
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1e5      	bne.n	800d624 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3758      	adds	r7, #88	; 0x58
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	0800d873 	.word	0x0800d873
 800d668:	0800d995 	.word	0x0800d995
 800d66c:	0800d9cd 	.word	0x0800d9cd

0800d670 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d670:	b480      	push	{r7}
 800d672:	b08f      	sub	sp, #60	; 0x3c
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d67e:	6a3b      	ldr	r3, [r7, #32]
 800d680:	e853 3f00 	ldrex	r3, [r3]
 800d684:	61fb      	str	r3, [r7, #28]
   return(result);
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d68c:	637b      	str	r3, [r7, #52]	; 0x34
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	461a      	mov	r2, r3
 800d694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d696:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d698:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d69a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d69c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d69e:	e841 2300 	strex	r3, r2, [r1]
 800d6a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1e6      	bne.n	800d678 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	3308      	adds	r3, #8
 800d6b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	e853 3f00 	ldrex	r3, [r3]
 800d6b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d6c0:	633b      	str	r3, [r7, #48]	; 0x30
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	3308      	adds	r3, #8
 800d6c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ca:	61ba      	str	r2, [r7, #24]
 800d6cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ce:	6979      	ldr	r1, [r7, #20]
 800d6d0:	69ba      	ldr	r2, [r7, #24]
 800d6d2:	e841 2300 	strex	r3, r2, [r1]
 800d6d6:	613b      	str	r3, [r7, #16]
   return(result);
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d1e5      	bne.n	800d6aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2220      	movs	r2, #32
 800d6e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d6e6:	bf00      	nop
 800d6e8:	373c      	adds	r7, #60	; 0x3c
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
	...

0800d6f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b095      	sub	sp, #84	; 0x54
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d704:	e853 3f00 	ldrex	r3, [r3]
 800d708:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d710:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	461a      	mov	r2, r3
 800d718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d71a:	643b      	str	r3, [r7, #64]	; 0x40
 800d71c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d71e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d720:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d722:	e841 2300 	strex	r3, r2, [r1]
 800d726:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1e6      	bne.n	800d6fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3308      	adds	r3, #8
 800d734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d736:	6a3b      	ldr	r3, [r7, #32]
 800d738:	e853 3f00 	ldrex	r3, [r3]
 800d73c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d73e:	69fa      	ldr	r2, [r7, #28]
 800d740:	4b1e      	ldr	r3, [pc, #120]	; (800d7bc <UART_EndRxTransfer+0xc8>)
 800d742:	4013      	ands	r3, r2
 800d744:	64bb      	str	r3, [r7, #72]	; 0x48
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3308      	adds	r3, #8
 800d74c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d74e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d750:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d756:	e841 2300 	strex	r3, r2, [r1]
 800d75a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1e5      	bne.n	800d72e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d766:	2b01      	cmp	r3, #1
 800d768:	d118      	bne.n	800d79c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	e853 3f00 	ldrex	r3, [r3]
 800d776:	60bb      	str	r3, [r7, #8]
   return(result);
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	f023 0310 	bic.w	r3, r3, #16
 800d77e:	647b      	str	r3, [r7, #68]	; 0x44
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	461a      	mov	r2, r3
 800d786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d788:	61bb      	str	r3, [r7, #24]
 800d78a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78c:	6979      	ldr	r1, [r7, #20]
 800d78e:	69ba      	ldr	r2, [r7, #24]
 800d790:	e841 2300 	strex	r3, r2, [r1]
 800d794:	613b      	str	r3, [r7, #16]
   return(result);
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1e6      	bne.n	800d76a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2220      	movs	r2, #32
 800d7a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d7b0:	bf00      	nop
 800d7b2:	3754      	adds	r7, #84	; 0x54
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	effffffe 	.word	0xeffffffe

0800d7c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b090      	sub	sp, #64	; 0x40
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	69db      	ldr	r3, [r3, #28]
 800d7d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7d6:	d037      	beq.n	800d848 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	3308      	adds	r3, #8
 800d7e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	e853 3f00 	ldrex	r3, [r3]
 800d7ee:	623b      	str	r3, [r7, #32]
   return(result);
 800d7f0:	6a3b      	ldr	r3, [r7, #32]
 800d7f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3308      	adds	r3, #8
 800d7fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d800:	633a      	str	r2, [r7, #48]	; 0x30
 800d802:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d808:	e841 2300 	strex	r3, r2, [r1]
 800d80c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1e5      	bne.n	800d7e0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	e853 3f00 	ldrex	r3, [r3]
 800d820:	60fb      	str	r3, [r7, #12]
   return(result);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d828:	637b      	str	r3, [r7, #52]	; 0x34
 800d82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	461a      	mov	r2, r3
 800d830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d832:	61fb      	str	r3, [r7, #28]
 800d834:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d836:	69b9      	ldr	r1, [r7, #24]
 800d838:	69fa      	ldr	r2, [r7, #28]
 800d83a:	e841 2300 	strex	r3, r2, [r1]
 800d83e:	617b      	str	r3, [r7, #20]
   return(result);
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d1e6      	bne.n	800d814 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d846:	e002      	b.n	800d84e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d848:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d84a:	f7fe ff2b 	bl	800c6a4 <HAL_UART_TxCpltCallback>
}
 800d84e:	bf00      	nop
 800d850:	3740      	adds	r7, #64	; 0x40
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d856:	b580      	push	{r7, lr}
 800d858:	b084      	sub	sp, #16
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d862:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f7fe ff27 	bl	800c6b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d86a:	bf00      	nop
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b09c      	sub	sp, #112	; 0x70
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	69db      	ldr	r3, [r3, #28]
 800d884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d888:	d071      	beq.n	800d96e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d88a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d88c:	2200      	movs	r2, #0
 800d88e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d89a:	e853 3f00 	ldrex	r3, [r3]
 800d89e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d8a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d8b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8b8:	e841 2300 	strex	r3, r2, [r1]
 800d8bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1e6      	bne.n	800d892 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3308      	adds	r3, #8
 800d8ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ce:	e853 3f00 	ldrex	r3, [r3]
 800d8d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8d6:	f023 0301 	bic.w	r3, r3, #1
 800d8da:	667b      	str	r3, [r7, #100]	; 0x64
 800d8dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3308      	adds	r3, #8
 800d8e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d8e4:	647a      	str	r2, [r7, #68]	; 0x44
 800d8e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d8ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8ec:	e841 2300 	strex	r3, r2, [r1]
 800d8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1e5      	bne.n	800d8c4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	3308      	adds	r3, #8
 800d8fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d902:	e853 3f00 	ldrex	r3, [r3]
 800d906:	623b      	str	r3, [r7, #32]
   return(result);
 800d908:	6a3b      	ldr	r3, [r7, #32]
 800d90a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d90e:	663b      	str	r3, [r7, #96]	; 0x60
 800d910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	3308      	adds	r3, #8
 800d916:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d918:	633a      	str	r2, [r7, #48]	; 0x30
 800d91a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d91e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d920:	e841 2300 	strex	r3, r2, [r1]
 800d924:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1e5      	bne.n	800d8f8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d92c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d92e:	2220      	movs	r2, #32
 800d930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d118      	bne.n	800d96e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d93c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	e853 3f00 	ldrex	r3, [r3]
 800d948:	60fb      	str	r3, [r7, #12]
   return(result);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f023 0310 	bic.w	r3, r3, #16
 800d950:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	461a      	mov	r2, r3
 800d958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d95a:	61fb      	str	r3, [r7, #28]
 800d95c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d95e:	69b9      	ldr	r1, [r7, #24]
 800d960:	69fa      	ldr	r2, [r7, #28]
 800d962:	e841 2300 	strex	r3, r2, [r1]
 800d966:	617b      	str	r3, [r7, #20]
   return(result);
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d1e6      	bne.n	800d93c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d96e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d972:	2b01      	cmp	r3, #1
 800d974:	d107      	bne.n	800d986 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d978:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d97c:	4619      	mov	r1, r3
 800d97e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d980:	f7f3 fc8c 	bl	800129c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d984:	e002      	b.n	800d98c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d986:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d988:	f7f4 ffa0 	bl	80028cc <HAL_UART_RxCpltCallback>
}
 800d98c:	bf00      	nop
 800d98e:	3770      	adds	r7, #112	; 0x70
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d109      	bne.n	800d9be <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d9b0:	085b      	lsrs	r3, r3, #1
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	f7f3 fc70 	bl	800129c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9bc:	e002      	b.n	800d9c4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f7fe fe84 	bl	800c6cc <HAL_UART_RxHalfCpltCallback>
}
 800d9c4:	bf00      	nop
 800d9c6:	3710      	adds	r7, #16
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b086      	sub	sp, #24
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	689b      	ldr	r3, [r3, #8]
 800d9f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9f4:	2b80      	cmp	r3, #128	; 0x80
 800d9f6:	d109      	bne.n	800da0c <UART_DMAError+0x40>
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	2b21      	cmp	r3, #33	; 0x21
 800d9fc:	d106      	bne.n	800da0c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	2200      	movs	r2, #0
 800da02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800da06:	6978      	ldr	r0, [r7, #20]
 800da08:	f7ff fe32 	bl	800d670 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da16:	2b40      	cmp	r3, #64	; 0x40
 800da18:	d109      	bne.n	800da2e <UART_DMAError+0x62>
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2b22      	cmp	r3, #34	; 0x22
 800da1e:	d106      	bne.n	800da2e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	2200      	movs	r2, #0
 800da24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800da28:	6978      	ldr	r0, [r7, #20]
 800da2a:	f7ff fe63 	bl	800d6f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da34:	f043 0210 	orr.w	r2, r3, #16
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da3e:	6978      	ldr	r0, [r7, #20]
 800da40:	f7fe fe4e 	bl	800c6e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da44:	bf00      	nop
 800da46:	3718      	adds	r7, #24
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2200      	movs	r2, #0
 800da5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2200      	movs	r2, #0
 800da66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f7fe fe38 	bl	800c6e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da70:	bf00      	nop
 800da72:	3710      	adds	r7, #16
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b088      	sub	sp, #32
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	e853 3f00 	ldrex	r3, [r3]
 800da8c:	60bb      	str	r3, [r7, #8]
   return(result);
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da94:	61fb      	str	r3, [r7, #28]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	461a      	mov	r2, r3
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	61bb      	str	r3, [r7, #24]
 800daa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa2:	6979      	ldr	r1, [r7, #20]
 800daa4:	69ba      	ldr	r2, [r7, #24]
 800daa6:	e841 2300 	strex	r3, r2, [r1]
 800daaa:	613b      	str	r3, [r7, #16]
   return(result);
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d1e6      	bne.n	800da80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2220      	movs	r2, #32
 800dab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f7fe fdef 	bl	800c6a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dac6:	bf00      	nop
 800dac8:	3720      	adds	r7, #32
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dace:	b480      	push	{r7}
 800dad0:	b083      	sub	sp, #12
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dad6:	bf00      	nop
 800dad8:	370c      	adds	r7, #12
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr

0800dae2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dae2:	b480      	push	{r7}
 800dae4:	b083      	sub	sp, #12
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800daea:	bf00      	nop
 800daec:	370c      	adds	r7, #12
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b083      	sub	sp, #12
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dafe:	bf00      	nop
 800db00:	370c      	adds	r7, #12
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr

0800db0a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b084      	sub	sp, #16
 800db0e:	af00      	add	r7, sp, #0
 800db10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d101      	bne.n	800db20 <HAL_UARTEx_EnableFifoMode+0x16>
 800db1c:	2302      	movs	r3, #2
 800db1e:	e02b      	b.n	800db78 <HAL_UARTEx_EnableFifoMode+0x6e>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2201      	movs	r2, #1
 800db24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2224      	movs	r2, #36	; 0x24
 800db2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f022 0201 	bic.w	r2, r2, #1
 800db46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800db56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	68fa      	ldr	r2, [r7, #12]
 800db5e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 f91f 	bl	800dda4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2220      	movs	r2, #32
 800db6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2200      	movs	r2, #0
 800db72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db76:	2300      	movs	r3, #0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3710      	adds	r7, #16
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db80:	b480      	push	{r7}
 800db82:	b085      	sub	sp, #20
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d101      	bne.n	800db96 <HAL_UARTEx_DisableFifoMode+0x16>
 800db92:	2302      	movs	r3, #2
 800db94:	e027      	b.n	800dbe6 <HAL_UARTEx_DisableFifoMode+0x66>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2201      	movs	r2, #1
 800db9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2224      	movs	r2, #36	; 0x24
 800dba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f022 0201 	bic.w	r2, r2, #1
 800dbbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dbc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	68fa      	ldr	r2, [r7, #12]
 800dbd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2220      	movs	r2, #32
 800dbd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dbe4:	2300      	movs	r3, #0
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3714      	adds	r7, #20
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr

0800dbf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b084      	sub	sp, #16
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
 800dbfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d101      	bne.n	800dc0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dc06:	2302      	movs	r3, #2
 800dc08:	e02d      	b.n	800dc66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2224      	movs	r2, #36	; 0x24
 800dc16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f022 0201 	bic.w	r2, r2, #1
 800dc30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	683a      	ldr	r2, [r7, #0]
 800dc42:	430a      	orrs	r2, r1
 800dc44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 f8ac 	bl	800dda4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2220      	movs	r2, #32
 800dc58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b084      	sub	sp, #16
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
 800dc76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d101      	bne.n	800dc86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc82:	2302      	movs	r3, #2
 800dc84:	e02d      	b.n	800dce2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2224      	movs	r2, #36	; 0x24
 800dc92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	681a      	ldr	r2, [r3, #0]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f022 0201 	bic.w	r2, r2, #1
 800dcac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	683a      	ldr	r2, [r7, #0]
 800dcbe:	430a      	orrs	r2, r1
 800dcc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 f86e 	bl	800dda4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2220      	movs	r2, #32
 800dcd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dce0:	2300      	movs	r3, #0
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3710      	adds	r7, #16
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b08c      	sub	sp, #48	; 0x30
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	60f8      	str	r0, [r7, #12]
 800dcf2:	60b9      	str	r1, [r7, #8]
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcfe:	2b20      	cmp	r3, #32
 800dd00:	d14a      	bne.n	800dd98 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800dd08:	88fb      	ldrh	r3, [r7, #6]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d101      	bne.n	800dd12 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	e043      	b.n	800dd9a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d101      	bne.n	800dd20 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	e03c      	b.n	800dd9a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2201      	movs	r2, #1
 800dd24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800dd2e:	88fb      	ldrh	r3, [r7, #6]
 800dd30:	461a      	mov	r2, r3
 800dd32:	68b9      	ldr	r1, [r7, #8]
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f7ff fbf3 	bl	800d520 <UART_Start_Receive_DMA>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800dd40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d124      	bne.n	800dd92 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d11d      	bne.n	800dd8c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2210      	movs	r2, #16
 800dd56:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	e853 3f00 	ldrex	r3, [r3]
 800dd64:	617b      	str	r3, [r7, #20]
   return(result);
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	f043 0310 	orr.w	r3, r3, #16
 800dd6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	461a      	mov	r2, r3
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd76:	627b      	str	r3, [r7, #36]	; 0x24
 800dd78:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd7a:	6a39      	ldr	r1, [r7, #32]
 800dd7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd7e:	e841 2300 	strex	r3, r2, [r1]
 800dd82:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d1e6      	bne.n	800dd58 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800dd8a:	e002      	b.n	800dd92 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800dd92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd96:	e000      	b.n	800dd9a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800dd98:	2302      	movs	r3, #2
  }
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3730      	adds	r7, #48	; 0x30
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
	...

0800dda4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d108      	bne.n	800ddc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ddc4:	e031      	b.n	800de2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ddc6:	2310      	movs	r3, #16
 800ddc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ddca:	2310      	movs	r3, #16
 800ddcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	689b      	ldr	r3, [r3, #8]
 800ddd4:	0e5b      	lsrs	r3, r3, #25
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	f003 0307 	and.w	r3, r3, #7
 800dddc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	689b      	ldr	r3, [r3, #8]
 800dde4:	0f5b      	lsrs	r3, r3, #29
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	f003 0307 	and.w	r3, r3, #7
 800ddec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ddee:	7bbb      	ldrb	r3, [r7, #14]
 800ddf0:	7b3a      	ldrb	r2, [r7, #12]
 800ddf2:	4911      	ldr	r1, [pc, #68]	; (800de38 <UARTEx_SetNbDataToProcess+0x94>)
 800ddf4:	5c8a      	ldrb	r2, [r1, r2]
 800ddf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ddfa:	7b3a      	ldrb	r2, [r7, #12]
 800ddfc:	490f      	ldr	r1, [pc, #60]	; (800de3c <UARTEx_SetNbDataToProcess+0x98>)
 800ddfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de00:	fb93 f3f2 	sdiv	r3, r3, r2
 800de04:	b29a      	uxth	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de0c:	7bfb      	ldrb	r3, [r7, #15]
 800de0e:	7b7a      	ldrb	r2, [r7, #13]
 800de10:	4909      	ldr	r1, [pc, #36]	; (800de38 <UARTEx_SetNbDataToProcess+0x94>)
 800de12:	5c8a      	ldrb	r2, [r1, r2]
 800de14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de18:	7b7a      	ldrb	r2, [r7, #13]
 800de1a:	4908      	ldr	r1, [pc, #32]	; (800de3c <UARTEx_SetNbDataToProcess+0x98>)
 800de1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800de22:	b29a      	uxth	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800de2a:	bf00      	nop
 800de2c:	3714      	adds	r7, #20
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop
 800de38:	08010e4c 	.word	0x08010e4c
 800de3c:	08010e54 	.word	0x08010e54

0800de40 <checkint>:
 800de40:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800de44:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800de48:	429a      	cmp	r2, r3
 800de4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de4c:	dd2b      	ble.n	800dea6 <checkint+0x66>
 800de4e:	f240 4333 	movw	r3, #1075	; 0x433
 800de52:	429a      	cmp	r2, r3
 800de54:	dc25      	bgt.n	800dea2 <checkint+0x62>
 800de56:	1a9b      	subs	r3, r3, r2
 800de58:	f1a3 0620 	sub.w	r6, r3, #32
 800de5c:	f04f 32ff 	mov.w	r2, #4294967295
 800de60:	fa02 f606 	lsl.w	r6, r2, r6
 800de64:	fa02 f403 	lsl.w	r4, r2, r3
 800de68:	f1c3 0520 	rsb	r5, r3, #32
 800de6c:	4334      	orrs	r4, r6
 800de6e:	fa22 f505 	lsr.w	r5, r2, r5
 800de72:	432c      	orrs	r4, r5
 800de74:	409a      	lsls	r2, r3
 800de76:	ea20 0602 	bic.w	r6, r0, r2
 800de7a:	ea21 0704 	bic.w	r7, r1, r4
 800de7e:	ea56 0207 	orrs.w	r2, r6, r7
 800de82:	f1a3 0420 	sub.w	r4, r3, #32
 800de86:	f1c3 0220 	rsb	r2, r3, #32
 800de8a:	d10c      	bne.n	800dea6 <checkint+0x66>
 800de8c:	40d8      	lsrs	r0, r3
 800de8e:	fa01 f302 	lsl.w	r3, r1, r2
 800de92:	4318      	orrs	r0, r3
 800de94:	40e1      	lsrs	r1, r4
 800de96:	4308      	orrs	r0, r1
 800de98:	f000 0301 	and.w	r3, r0, #1
 800de9c:	f1c3 0002 	rsb	r0, r3, #2
 800dea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dea2:	2002      	movs	r0, #2
 800dea4:	e7fc      	b.n	800dea0 <checkint+0x60>
 800dea6:	2000      	movs	r0, #0
 800dea8:	e7fa      	b.n	800dea0 <checkint+0x60>
 800deaa:	0000      	movs	r0, r0
 800deac:	0000      	movs	r0, r0
	...

0800deb0 <pow>:
 800deb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb4:	ed2d 8b0a 	vpush	{d8-d12}
 800deb8:	b09b      	sub	sp, #108	; 0x6c
 800deba:	ed8d 0b02 	vstr	d0, [sp, #8]
 800debe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dec2:	ed8d 1b00 	vstr	d1, [sp]
 800dec6:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800deca:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dece:	f109 30ff 	add.w	r0, r9, #4294967295
 800ded2:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800ded6:	4288      	cmp	r0, r1
 800ded8:	46cc      	mov	ip, r9
 800deda:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800dede:	d806      	bhi.n	800deee <pow+0x3e>
 800dee0:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800dee4:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800dee8:	297f      	cmp	r1, #127	; 0x7f
 800deea:	f240 81ab 	bls.w	800e244 <pow+0x394>
 800deee:	19b1      	adds	r1, r6, r6
 800def0:	9104      	str	r1, [sp, #16]
 800def2:	eb47 0107 	adc.w	r1, r7, r7
 800def6:	9105      	str	r1, [sp, #20]
 800def8:	9904      	ldr	r1, [sp, #16]
 800defa:	f111 31ff 	adds.w	r1, r1, #4294967295
 800defe:	460a      	mov	r2, r1
 800df00:	9905      	ldr	r1, [sp, #20]
 800df02:	f141 31ff 	adc.w	r1, r1, #4294967295
 800df06:	460b      	mov	r3, r1
 800df08:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800df0c:	f06f 0001 	mvn.w	r0, #1
 800df10:	4299      	cmp	r1, r3
 800df12:	bf08      	it	eq
 800df14:	4290      	cmpeq	r0, r2
 800df16:	d260      	bcs.n	800dfda <pow+0x12a>
 800df18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df1c:	4313      	orrs	r3, r2
 800df1e:	d11a      	bne.n	800df56 <pow+0xa6>
 800df20:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800df24:	1923      	adds	r3, r4, r4
 800df26:	930c      	str	r3, [sp, #48]	; 0x30
 800df28:	eb42 0302 	adc.w	r3, r2, r2
 800df2c:	930d      	str	r3, [sp, #52]	; 0x34
 800df2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800df32:	4bcf      	ldr	r3, [pc, #828]	; (800e270 <pow+0x3c0>)
 800df34:	2200      	movs	r2, #0
 800df36:	428b      	cmp	r3, r1
 800df38:	bf08      	it	eq
 800df3a:	4282      	cmpeq	r2, r0
 800df3c:	f080 8265 	bcs.w	800e40a <pow+0x55a>
 800df40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df44:	ed9d 6b00 	vldr	d6, [sp]
 800df48:	ee37 0b06 	vadd.f64	d0, d7, d6
 800df4c:	b01b      	add	sp, #108	; 0x6c
 800df4e:	ecbd 8b0a 	vpop	{d8-d12}
 800df52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df56:	49c7      	ldr	r1, [pc, #796]	; (800e274 <pow+0x3c4>)
 800df58:	2000      	movs	r0, #0
 800df5a:	428d      	cmp	r5, r1
 800df5c:	bf08      	it	eq
 800df5e:	4284      	cmpeq	r4, r0
 800df60:	d10b      	bne.n	800df7a <pow+0xca>
 800df62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800df66:	19b3      	adds	r3, r6, r6
 800df68:	930e      	str	r3, [sp, #56]	; 0x38
 800df6a:	eb42 0302 	adc.w	r3, r2, r2
 800df6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800df70:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800df74:	4bbe      	ldr	r3, [pc, #760]	; (800e270 <pow+0x3c0>)
 800df76:	2200      	movs	r2, #0
 800df78:	e7dd      	b.n	800df36 <pow+0x86>
 800df7a:	1921      	adds	r1, r4, r4
 800df7c:	9106      	str	r1, [sp, #24]
 800df7e:	eb45 0105 	adc.w	r1, r5, r5
 800df82:	9107      	str	r1, [sp, #28]
 800df84:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800df88:	49bb      	ldr	r1, [pc, #748]	; (800e278 <pow+0x3c8>)
 800df8a:	2000      	movs	r0, #0
 800df8c:	42a1      	cmp	r1, r4
 800df8e:	bf08      	it	eq
 800df90:	4298      	cmpeq	r0, r3
 800df92:	d3d5      	bcc.n	800df40 <pow+0x90>
 800df94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800df98:	428c      	cmp	r4, r1
 800df9a:	bf08      	it	eq
 800df9c:	4283      	cmpeq	r3, r0
 800df9e:	d1cf      	bne.n	800df40 <pow+0x90>
 800dfa0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800dfa4:	49b5      	ldr	r1, [pc, #724]	; (800e27c <pow+0x3cc>)
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	428c      	cmp	r4, r1
 800dfaa:	bf08      	it	eq
 800dfac:	4283      	cmpeq	r3, r0
 800dfae:	f000 822c 	beq.w	800e40a <pow+0x55a>
 800dfb2:	49b3      	ldr	r1, [pc, #716]	; (800e280 <pow+0x3d0>)
 800dfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfb8:	42a1      	cmp	r1, r4
 800dfba:	bf08      	it	eq
 800dfbc:	4298      	cmpeq	r0, r3
 800dfbe:	ea6f 0307 	mvn.w	r3, r7
 800dfc2:	bf34      	ite	cc
 800dfc4:	2201      	movcc	r2, #1
 800dfc6:	2200      	movcs	r2, #0
 800dfc8:	0fdb      	lsrs	r3, r3, #31
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	f040 821a 	bne.w	800e404 <pow+0x554>
 800dfd0:	ed9d 7b00 	vldr	d7, [sp]
 800dfd4:	ee27 0b07 	vmul.f64	d0, d7, d7
 800dfd8:	e7b8      	b.n	800df4c <pow+0x9c>
 800dfda:	1923      	adds	r3, r4, r4
 800dfdc:	9308      	str	r3, [sp, #32]
 800dfde:	eb45 0305 	adc.w	r3, r5, r5
 800dfe2:	9309      	str	r3, [sp, #36]	; 0x24
 800dfe4:	9b08      	ldr	r3, [sp, #32]
 800dfe6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800dfea:	9310      	str	r3, [sp, #64]	; 0x40
 800dfec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfee:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dff2:	9311      	str	r3, [sp, #68]	; 0x44
 800dff4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dff8:	4299      	cmp	r1, r3
 800dffa:	bf08      	it	eq
 800dffc:	4290      	cmpeq	r0, r2
 800dffe:	d22d      	bcs.n	800e05c <pow+0x1ac>
 800e000:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e004:	2c00      	cmp	r4, #0
 800e006:	f175 0300 	sbcs.w	r3, r5, #0
 800e00a:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e00e:	da16      	bge.n	800e03e <pow+0x18e>
 800e010:	4630      	mov	r0, r6
 800e012:	4639      	mov	r1, r7
 800e014:	f7ff ff14 	bl	800de40 <checkint>
 800e018:	2801      	cmp	r0, #1
 800e01a:	d110      	bne.n	800e03e <pow+0x18e>
 800e01c:	eeb1 0b40 	vneg.f64	d0, d0
 800e020:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800e024:	4323      	orrs	r3, r4
 800e026:	d10c      	bne.n	800e042 <pow+0x192>
 800e028:	2e00      	cmp	r6, #0
 800e02a:	f177 0300 	sbcs.w	r3, r7, #0
 800e02e:	da8d      	bge.n	800df4c <pow+0x9c>
 800e030:	b01b      	add	sp, #108	; 0x6c
 800e032:	ecbd 8b0a 	vpop	{d8-d12}
 800e036:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03a:	f000 ba29 	b.w	800e490 <__math_divzero>
 800e03e:	2000      	movs	r0, #0
 800e040:	e7ee      	b.n	800e020 <pow+0x170>
 800e042:	2e00      	cmp	r6, #0
 800e044:	f177 0300 	sbcs.w	r3, r7, #0
 800e048:	da80      	bge.n	800df4c <pow+0x9c>
 800e04a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e04e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e052:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800e056:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800e05a:	e777      	b.n	800df4c <pow+0x9c>
 800e05c:	2c00      	cmp	r4, #0
 800e05e:	f175 0300 	sbcs.w	r3, r5, #0
 800e062:	da35      	bge.n	800e0d0 <pow+0x220>
 800e064:	4630      	mov	r0, r6
 800e066:	4639      	mov	r1, r7
 800e068:	f7ff feea 	bl	800de40 <checkint>
 800e06c:	b940      	cbnz	r0, 800e080 <pow+0x1d0>
 800e06e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e072:	b01b      	add	sp, #108	; 0x6c
 800e074:	ecbd 8b0a 	vpop	{d8-d12}
 800e078:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e07c:	f000 ba20 	b.w	800e4c0 <__math_invalid>
 800e080:	2801      	cmp	r0, #1
 800e082:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e086:	bf14      	ite	ne
 800e088:	2000      	movne	r0, #0
 800e08a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e08e:	461d      	mov	r5, r3
 800e090:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800e094:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800e098:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800e09c:	2a7f      	cmp	r2, #127	; 0x7f
 800e09e:	d933      	bls.n	800e108 <pow+0x258>
 800e0a0:	4974      	ldr	r1, [pc, #464]	; (800e274 <pow+0x3c4>)
 800e0a2:	2000      	movs	r0, #0
 800e0a4:	428d      	cmp	r5, r1
 800e0a6:	bf08      	it	eq
 800e0a8:	4284      	cmpeq	r4, r0
 800e0aa:	f000 81ae 	beq.w	800e40a <pow+0x55a>
 800e0ae:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d80e      	bhi.n	800e0d4 <pow+0x224>
 800e0b6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e0ba:	ed9d 7b00 	vldr	d7, [sp]
 800e0be:	42a9      	cmp	r1, r5
 800e0c0:	bf08      	it	eq
 800e0c2:	42a0      	cmpeq	r0, r4
 800e0c4:	bf34      	ite	cc
 800e0c6:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800e0ca:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800e0ce:	e73d      	b.n	800df4c <pow+0x9c>
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	e7df      	b.n	800e094 <pow+0x1e4>
 800e0d4:	42a9      	cmp	r1, r5
 800e0d6:	bf08      	it	eq
 800e0d8:	42a0      	cmpeq	r0, r4
 800e0da:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e0de:	bf2c      	ite	cs
 800e0e0:	2301      	movcs	r3, #1
 800e0e2:	2300      	movcc	r3, #0
 800e0e4:	4590      	cmp	r8, r2
 800e0e6:	bf8c      	ite	hi
 800e0e8:	f04f 0800 	movhi.w	r8, #0
 800e0ec:	f04f 0801 	movls.w	r8, #1
 800e0f0:	4543      	cmp	r3, r8
 800e0f2:	f04f 0000 	mov.w	r0, #0
 800e0f6:	f000 80af 	beq.w	800e258 <pow+0x3a8>
 800e0fa:	b01b      	add	sp, #108	; 0x6c
 800e0fc:	ecbd 8b0a 	vpop	{d8-d12}
 800e100:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e104:	f000 b9bc 	b.w	800e480 <__math_oflow>
 800e108:	f1bc 0f00 	cmp.w	ip, #0
 800e10c:	d10e      	bne.n	800e12c <pow+0x27c>
 800e10e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e268 <pow+0x3b8>
 800e112:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e116:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e11a:	ec57 6b17 	vmov	r6, r7, d7
 800e11e:	4b59      	ldr	r3, [pc, #356]	; (800e284 <pow+0x3d4>)
 800e120:	2100      	movs	r1, #0
 800e122:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e126:	1874      	adds	r4, r6, r1
 800e128:	eb42 0503 	adc.w	r5, r2, r3
 800e12c:	2300      	movs	r3, #0
 800e12e:	18e3      	adds	r3, r4, r3
 800e130:	4b55      	ldr	r3, [pc, #340]	; (800e288 <pow+0x3d8>)
 800e132:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e136:	eb45 0303 	adc.w	r3, r5, r3
 800e13a:	1519      	asrs	r1, r3, #20
 800e13c:	ee03 1a10 	vmov	s6, r1
 800e140:	0d1e      	lsrs	r6, r3, #20
 800e142:	2100      	movs	r1, #0
 800e144:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e148:	0536      	lsls	r6, r6, #20
 800e14a:	1a63      	subs	r3, r4, r1
 800e14c:	9312      	str	r3, [sp, #72]	; 0x48
 800e14e:	eb65 0306 	sbc.w	r3, r5, r6
 800e152:	9313      	str	r3, [sp, #76]	; 0x4c
 800e154:	4b4d      	ldr	r3, [pc, #308]	; (800e28c <pow+0x3dc>)
 800e156:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800e15a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e15e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800e162:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e166:	ed93 7b00 	vldr	d7, [r3]
 800e16a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800e16e:	ed93 4b02 	vldr	d4, [r3, #8]
 800e172:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800e176:	eea3 5b07 	vfma.f64	d5, d3, d7
 800e17a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800e17e:	ee36 9b05 	vadd.f64	d9, d6, d5
 800e182:	ee35 5b49 	vsub.f64	d5, d5, d9
 800e186:	eea3 7b04 	vfma.f64	d7, d3, d4
 800e18a:	ed93 4b04 	vldr	d4, [r3, #16]
 800e18e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e192:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e196:	ee26 4b04 	vmul.f64	d4, d6, d4
 800e19a:	ed93 3b08 	vldr	d3, [r3, #32]
 800e19e:	ee26 0b04 	vmul.f64	d0, d6, d4
 800e1a2:	eeb0 8b40 	vmov.f64	d8, d0
 800e1a6:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800e1aa:	ed93 4b06 	vldr	d4, [r3, #24]
 800e1ae:	ee26 ab00 	vmul.f64	d10, d6, d0
 800e1b2:	ee39 1b00 	vadd.f64	d1, d9, d0
 800e1b6:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800e1ba:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e1be:	ee39 9b41 	vsub.f64	d9, d9, d1
 800e1c2:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800e1c6:	ee37 8b08 	vadd.f64	d8, d7, d8
 800e1ca:	ee39 9b00 	vadd.f64	d9, d9, d0
 800e1ce:	eea6 3b02 	vfma.f64	d3, d6, d2
 800e1d2:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e1d6:	ee38 9b09 	vadd.f64	d9, d8, d9
 800e1da:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800e1de:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800e1e2:	ed9d 6b00 	vldr	d6, [sp]
 800e1e6:	eea0 3b02 	vfma.f64	d3, d0, d2
 800e1ea:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e1ee:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800e1f2:	ee31 7b09 	vadd.f64	d7, d1, d9
 800e1f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e1fa:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e1fe:	eeb0 3b46 	vmov.f64	d3, d6
 800e202:	ee31 1b47 	vsub.f64	d1, d1, d7
 800e206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e20a:	ee31 9b09 	vadd.f64	d9, d1, d9
 800e20e:	ed9d 6b00 	vldr	d6, [sp]
 800e212:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800e216:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800e21a:	193c      	adds	r4, r7, r4
 800e21c:	2c3e      	cmp	r4, #62	; 0x3e
 800e21e:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800e222:	eea6 3b09 	vfma.f64	d3, d6, d9
 800e226:	d934      	bls.n	800e292 <pow+0x3e2>
 800e228:	428c      	cmp	r4, r1
 800e22a:	da0d      	bge.n	800e248 <pow+0x398>
 800e22c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e230:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e234:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e238:	2800      	cmp	r0, #0
 800e23a:	f43f ae87 	beq.w	800df4c <pow+0x9c>
 800e23e:	eeb1 0b40 	vneg.f64	d0, d0
 800e242:	e683      	b.n	800df4c <pow+0x9c>
 800e244:	2000      	movs	r0, #0
 800e246:	e771      	b.n	800e12c <pow+0x27c>
 800e248:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800e24c:	d920      	bls.n	800e290 <pow+0x3e0>
 800e24e:	2a00      	cmp	r2, #0
 800e250:	f173 0300 	sbcs.w	r3, r3, #0
 800e254:	f6bf af51 	bge.w	800e0fa <pow+0x24a>
 800e258:	b01b      	add	sp, #108	; 0x6c
 800e25a:	ecbd 8b0a 	vpop	{d8-d12}
 800e25e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e262:	f000 b905 	b.w	800e470 <__math_uflow>
 800e266:	bf00      	nop
 800e268:	00000000 	.word	0x00000000
 800e26c:	43300000 	.word	0x43300000
 800e270:	fff00000 	.word	0xfff00000
 800e274:	3ff00000 	.word	0x3ff00000
 800e278:	ffe00000 	.word	0xffe00000
 800e27c:	7fe00000 	.word	0x7fe00000
 800e280:	7fdfffff 	.word	0x7fdfffff
 800e284:	fcc00000 	.word	0xfcc00000
 800e288:	c0196aab 	.word	0xc0196aab
 800e28c:	08010e60 	.word	0x08010e60
 800e290:	460f      	mov	r7, r1
 800e292:	4e65      	ldr	r6, [pc, #404]	; (800e428 <pow+0x578>)
 800e294:	ed9d 4b02 	vldr	d4, [sp, #8]
 800e298:	ed96 6b02 	vldr	d6, [r6, #8]
 800e29c:	ed96 7b00 	vldr	d7, [r6]
 800e2a0:	eeb0 5b46 	vmov.f64	d5, d6
 800e2a4:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e2a8:	ed8d 5b00 	vstr	d5, [sp]
 800e2ac:	ee35 6b46 	vsub.f64	d6, d5, d6
 800e2b0:	eeb0 5b44 	vmov.f64	d5, d4
 800e2b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2b8:	ed96 7b04 	vldr	d7, [r6, #16]
 800e2bc:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800e2c0:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e2c4:	eeb0 7b45 	vmov.f64	d7, d5
 800e2c8:	ed96 5b06 	vldr	d5, [r6, #24]
 800e2cc:	1849      	adds	r1, r1, r1
 800e2ce:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800e2d2:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800e2d6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e2da:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800e2de:	ee33 3b07 	vadd.f64	d3, d3, d7
 800e2e2:	ee23 6b03 	vmul.f64	d6, d3, d3
 800e2e6:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800e2ea:	ed96 5b08 	vldr	d5, [r6, #32]
 800e2ee:	ee33 7b07 	vadd.f64	d7, d3, d7
 800e2f2:	1814      	adds	r4, r2, r0
 800e2f4:	0365      	lsls	r5, r4, #13
 800e2f6:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800e2fa:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e2fe:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e302:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800e306:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e30a:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800e30e:	2000      	movs	r0, #0
 800e310:	eb10 0a04 	adds.w	sl, r0, r4
 800e314:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e318:	eb45 0b0c 	adc.w	fp, r5, ip
 800e31c:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e320:	2f00      	cmp	r7, #0
 800e322:	d16a      	bne.n	800e3fa <pow+0x54a>
 800e324:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800e328:	4639      	mov	r1, r7
 800e32a:	ea50 0301 	orrs.w	r3, r0, r1
 800e32e:	f04f 0300 	mov.w	r3, #0
 800e332:	d115      	bne.n	800e360 <pow+0x4b0>
 800e334:	eb1a 0303 	adds.w	r3, sl, r3
 800e338:	ee0b 3a10 	vmov	s22, r3
 800e33c:	4b3b      	ldr	r3, [pc, #236]	; (800e42c <pow+0x57c>)
 800e33e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800e410 <pow+0x560>
 800e342:	eb4b 0303 	adc.w	r3, fp, r3
 800e346:	ee0b 3a90 	vmov	s23, r3
 800e34a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800e34e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800e352:	b01b      	add	sp, #108	; 0x6c
 800e354:	ecbd 8b0a 	vpop	{d8-d12}
 800e358:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e35c:	f000 b8c8 	b.w	800e4f0 <__math_check_oflow>
 800e360:	eb1a 0303 	adds.w	r3, sl, r3
 800e364:	930a      	str	r3, [sp, #40]	; 0x28
 800e366:	4b32      	ldr	r3, [pc, #200]	; (800e430 <pow+0x580>)
 800e368:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e36c:	eb4b 0303 	adc.w	r3, fp, r3
 800e370:	930b      	str	r3, [sp, #44]	; 0x2c
 800e372:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e376:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e37a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e37e:	eeb0 3bc7 	vabs.f64	d3, d7
 800e382:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e38a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800e418 <pow+0x568>
 800e38e:	d52b      	bpl.n	800e3e8 <pow+0x538>
 800e390:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e394:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e3a0:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e3a4:	bf48      	it	mi
 800e3a6:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e3aa:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e3ae:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e3b2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e3b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e3ba:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e3be:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e3c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ca:	d105      	bne.n	800e3d8 <pow+0x528>
 800e3cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3ce:	463a      	mov	r2, r7
 800e3d0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e3d4:	ec43 2b17 	vmov	d7, r2, r3
 800e3d8:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800e3dc:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800e3e0:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e3e4:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800e3e8:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e3ec:	b01b      	add	sp, #108	; 0x6c
 800e3ee:	ecbd 8b0a 	vpop	{d8-d12}
 800e3f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f6:	f000 b872 	b.w	800e4de <__math_check_uflow>
 800e3fa:	ec4b ab10 	vmov	d0, sl, fp
 800e3fe:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e402:	e5a3      	b.n	800df4c <pow+0x9c>
 800e404:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800e420 <pow+0x570>
 800e408:	e5a0      	b.n	800df4c <pow+0x9c>
 800e40a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e40e:	e59d      	b.n	800df4c <pow+0x9c>
 800e410:	00000000 	.word	0x00000000
 800e414:	7f000000 	.word	0x7f000000
 800e418:	00000000 	.word	0x00000000
 800e41c:	00100000 	.word	0x00100000
	...
 800e428:	08011ea8 	.word	0x08011ea8
 800e42c:	c0f00000 	.word	0xc0f00000
 800e430:	3fe00000 	.word	0x3fe00000

0800e434 <with_errno>:
 800e434:	b513      	push	{r0, r1, r4, lr}
 800e436:	4604      	mov	r4, r0
 800e438:	ed8d 0b00 	vstr	d0, [sp]
 800e43c:	f000 f86c 	bl	800e518 <__errno>
 800e440:	ed9d 0b00 	vldr	d0, [sp]
 800e444:	6004      	str	r4, [r0, #0]
 800e446:	b002      	add	sp, #8
 800e448:	bd10      	pop	{r4, pc}

0800e44a <xflow>:
 800e44a:	b082      	sub	sp, #8
 800e44c:	b158      	cbz	r0, 800e466 <xflow+0x1c>
 800e44e:	eeb1 7b40 	vneg.f64	d7, d0
 800e452:	ed8d 7b00 	vstr	d7, [sp]
 800e456:	ed9d 7b00 	vldr	d7, [sp]
 800e45a:	2022      	movs	r0, #34	; 0x22
 800e45c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e460:	b002      	add	sp, #8
 800e462:	f7ff bfe7 	b.w	800e434 <with_errno>
 800e466:	eeb0 7b40 	vmov.f64	d7, d0
 800e46a:	e7f2      	b.n	800e452 <xflow+0x8>
 800e46c:	0000      	movs	r0, r0
	...

0800e470 <__math_uflow>:
 800e470:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e478 <__math_uflow+0x8>
 800e474:	f7ff bfe9 	b.w	800e44a <xflow>
 800e478:	00000000 	.word	0x00000000
 800e47c:	10000000 	.word	0x10000000

0800e480 <__math_oflow>:
 800e480:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e488 <__math_oflow+0x8>
 800e484:	f7ff bfe1 	b.w	800e44a <xflow>
 800e488:	00000000 	.word	0x00000000
 800e48c:	70000000 	.word	0x70000000

0800e490 <__math_divzero>:
 800e490:	b082      	sub	sp, #8
 800e492:	2800      	cmp	r0, #0
 800e494:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e498:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800e49c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800e4a0:	ed8d 7b00 	vstr	d7, [sp]
 800e4a4:	ed9d 0b00 	vldr	d0, [sp]
 800e4a8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800e4b8 <__math_divzero+0x28>
 800e4ac:	2022      	movs	r0, #34	; 0x22
 800e4ae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e4b2:	b002      	add	sp, #8
 800e4b4:	f7ff bfbe 	b.w	800e434 <with_errno>
	...

0800e4c0 <__math_invalid>:
 800e4c0:	eeb0 7b40 	vmov.f64	d7, d0
 800e4c4:	eeb4 7b47 	vcmp.f64	d7, d7
 800e4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4cc:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e4d0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e4d4:	d602      	bvs.n	800e4dc <__math_invalid+0x1c>
 800e4d6:	2021      	movs	r0, #33	; 0x21
 800e4d8:	f7ff bfac 	b.w	800e434 <with_errno>
 800e4dc:	4770      	bx	lr

0800e4de <__math_check_uflow>:
 800e4de:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e6:	d102      	bne.n	800e4ee <__math_check_uflow+0x10>
 800e4e8:	2022      	movs	r0, #34	; 0x22
 800e4ea:	f7ff bfa3 	b.w	800e434 <with_errno>
 800e4ee:	4770      	bx	lr

0800e4f0 <__math_check_oflow>:
 800e4f0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800e510 <__math_check_oflow+0x20>
 800e4f4:	eeb0 7bc0 	vabs.f64	d7, d0
 800e4f8:	eeb4 7b46 	vcmp.f64	d7, d6
 800e4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e500:	dd02      	ble.n	800e508 <__math_check_oflow+0x18>
 800e502:	2022      	movs	r0, #34	; 0x22
 800e504:	f7ff bf96 	b.w	800e434 <with_errno>
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	f3af 8000 	nop.w
 800e510:	ffffffff 	.word	0xffffffff
 800e514:	7fefffff 	.word	0x7fefffff

0800e518 <__errno>:
 800e518:	4b01      	ldr	r3, [pc, #4]	; (800e520 <__errno+0x8>)
 800e51a:	6818      	ldr	r0, [r3, #0]
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop
 800e520:	24000024 	.word	0x24000024

0800e524 <__libc_init_array>:
 800e524:	b570      	push	{r4, r5, r6, lr}
 800e526:	4d0d      	ldr	r5, [pc, #52]	; (800e55c <__libc_init_array+0x38>)
 800e528:	4c0d      	ldr	r4, [pc, #52]	; (800e560 <__libc_init_array+0x3c>)
 800e52a:	1b64      	subs	r4, r4, r5
 800e52c:	10a4      	asrs	r4, r4, #2
 800e52e:	2600      	movs	r6, #0
 800e530:	42a6      	cmp	r6, r4
 800e532:	d109      	bne.n	800e548 <__libc_init_array+0x24>
 800e534:	4d0b      	ldr	r5, [pc, #44]	; (800e564 <__libc_init_array+0x40>)
 800e536:	4c0c      	ldr	r4, [pc, #48]	; (800e568 <__libc_init_array+0x44>)
 800e538:	f002 fc60 	bl	8010dfc <_init>
 800e53c:	1b64      	subs	r4, r4, r5
 800e53e:	10a4      	asrs	r4, r4, #2
 800e540:	2600      	movs	r6, #0
 800e542:	42a6      	cmp	r6, r4
 800e544:	d105      	bne.n	800e552 <__libc_init_array+0x2e>
 800e546:	bd70      	pop	{r4, r5, r6, pc}
 800e548:	f855 3b04 	ldr.w	r3, [r5], #4
 800e54c:	4798      	blx	r3
 800e54e:	3601      	adds	r6, #1
 800e550:	e7ee      	b.n	800e530 <__libc_init_array+0xc>
 800e552:	f855 3b04 	ldr.w	r3, [r5], #4
 800e556:	4798      	blx	r3
 800e558:	3601      	adds	r6, #1
 800e55a:	e7f2      	b.n	800e542 <__libc_init_array+0x1e>
 800e55c:	08012b04 	.word	0x08012b04
 800e560:	08012b04 	.word	0x08012b04
 800e564:	08012b04 	.word	0x08012b04
 800e568:	08012b0c 	.word	0x08012b0c

0800e56c <memcpy>:
 800e56c:	440a      	add	r2, r1
 800e56e:	4291      	cmp	r1, r2
 800e570:	f100 33ff 	add.w	r3, r0, #4294967295
 800e574:	d100      	bne.n	800e578 <memcpy+0xc>
 800e576:	4770      	bx	lr
 800e578:	b510      	push	{r4, lr}
 800e57a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e582:	4291      	cmp	r1, r2
 800e584:	d1f9      	bne.n	800e57a <memcpy+0xe>
 800e586:	bd10      	pop	{r4, pc}

0800e588 <memset>:
 800e588:	4402      	add	r2, r0
 800e58a:	4603      	mov	r3, r0
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d100      	bne.n	800e592 <memset+0xa>
 800e590:	4770      	bx	lr
 800e592:	f803 1b01 	strb.w	r1, [r3], #1
 800e596:	e7f9      	b.n	800e58c <memset+0x4>

0800e598 <__cvt>:
 800e598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e59a:	ed2d 8b02 	vpush	{d8}
 800e59e:	eeb0 8b40 	vmov.f64	d8, d0
 800e5a2:	b085      	sub	sp, #20
 800e5a4:	4617      	mov	r7, r2
 800e5a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e5a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e5aa:	ee18 2a90 	vmov	r2, s17
 800e5ae:	f025 0520 	bic.w	r5, r5, #32
 800e5b2:	2a00      	cmp	r2, #0
 800e5b4:	bfb6      	itet	lt
 800e5b6:	222d      	movlt	r2, #45	; 0x2d
 800e5b8:	2200      	movge	r2, #0
 800e5ba:	eeb1 8b40 	vneglt.f64	d8, d0
 800e5be:	2d46      	cmp	r5, #70	; 0x46
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	701a      	strb	r2, [r3, #0]
 800e5c4:	d004      	beq.n	800e5d0 <__cvt+0x38>
 800e5c6:	2d45      	cmp	r5, #69	; 0x45
 800e5c8:	d100      	bne.n	800e5cc <__cvt+0x34>
 800e5ca:	3401      	adds	r4, #1
 800e5cc:	2102      	movs	r1, #2
 800e5ce:	e000      	b.n	800e5d2 <__cvt+0x3a>
 800e5d0:	2103      	movs	r1, #3
 800e5d2:	ab03      	add	r3, sp, #12
 800e5d4:	9301      	str	r3, [sp, #4]
 800e5d6:	ab02      	add	r3, sp, #8
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	4622      	mov	r2, r4
 800e5dc:	4633      	mov	r3, r6
 800e5de:	eeb0 0b48 	vmov.f64	d0, d8
 800e5e2:	f000 fca9 	bl	800ef38 <_dtoa_r>
 800e5e6:	2d47      	cmp	r5, #71	; 0x47
 800e5e8:	d109      	bne.n	800e5fe <__cvt+0x66>
 800e5ea:	07fb      	lsls	r3, r7, #31
 800e5ec:	d407      	bmi.n	800e5fe <__cvt+0x66>
 800e5ee:	9b03      	ldr	r3, [sp, #12]
 800e5f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5f2:	1a1b      	subs	r3, r3, r0
 800e5f4:	6013      	str	r3, [r2, #0]
 800e5f6:	b005      	add	sp, #20
 800e5f8:	ecbd 8b02 	vpop	{d8}
 800e5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5fe:	2d46      	cmp	r5, #70	; 0x46
 800e600:	eb00 0204 	add.w	r2, r0, r4
 800e604:	d10c      	bne.n	800e620 <__cvt+0x88>
 800e606:	7803      	ldrb	r3, [r0, #0]
 800e608:	2b30      	cmp	r3, #48	; 0x30
 800e60a:	d107      	bne.n	800e61c <__cvt+0x84>
 800e60c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e614:	bf1c      	itt	ne
 800e616:	f1c4 0401 	rsbne	r4, r4, #1
 800e61a:	6034      	strne	r4, [r6, #0]
 800e61c:	6833      	ldr	r3, [r6, #0]
 800e61e:	441a      	add	r2, r3
 800e620:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e628:	bf08      	it	eq
 800e62a:	9203      	streq	r2, [sp, #12]
 800e62c:	2130      	movs	r1, #48	; 0x30
 800e62e:	9b03      	ldr	r3, [sp, #12]
 800e630:	4293      	cmp	r3, r2
 800e632:	d2dc      	bcs.n	800e5ee <__cvt+0x56>
 800e634:	1c5c      	adds	r4, r3, #1
 800e636:	9403      	str	r4, [sp, #12]
 800e638:	7019      	strb	r1, [r3, #0]
 800e63a:	e7f8      	b.n	800e62e <__cvt+0x96>

0800e63c <__exponent>:
 800e63c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e63e:	4603      	mov	r3, r0
 800e640:	2900      	cmp	r1, #0
 800e642:	bfb8      	it	lt
 800e644:	4249      	neglt	r1, r1
 800e646:	f803 2b02 	strb.w	r2, [r3], #2
 800e64a:	bfb4      	ite	lt
 800e64c:	222d      	movlt	r2, #45	; 0x2d
 800e64e:	222b      	movge	r2, #43	; 0x2b
 800e650:	2909      	cmp	r1, #9
 800e652:	7042      	strb	r2, [r0, #1]
 800e654:	dd2a      	ble.n	800e6ac <__exponent+0x70>
 800e656:	f10d 0407 	add.w	r4, sp, #7
 800e65a:	46a4      	mov	ip, r4
 800e65c:	270a      	movs	r7, #10
 800e65e:	46a6      	mov	lr, r4
 800e660:	460a      	mov	r2, r1
 800e662:	fb91 f6f7 	sdiv	r6, r1, r7
 800e666:	fb07 1516 	mls	r5, r7, r6, r1
 800e66a:	3530      	adds	r5, #48	; 0x30
 800e66c:	2a63      	cmp	r2, #99	; 0x63
 800e66e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e672:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e676:	4631      	mov	r1, r6
 800e678:	dcf1      	bgt.n	800e65e <__exponent+0x22>
 800e67a:	3130      	adds	r1, #48	; 0x30
 800e67c:	f1ae 0502 	sub.w	r5, lr, #2
 800e680:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e684:	1c44      	adds	r4, r0, #1
 800e686:	4629      	mov	r1, r5
 800e688:	4561      	cmp	r1, ip
 800e68a:	d30a      	bcc.n	800e6a2 <__exponent+0x66>
 800e68c:	f10d 0209 	add.w	r2, sp, #9
 800e690:	eba2 020e 	sub.w	r2, r2, lr
 800e694:	4565      	cmp	r5, ip
 800e696:	bf88      	it	hi
 800e698:	2200      	movhi	r2, #0
 800e69a:	4413      	add	r3, r2
 800e69c:	1a18      	subs	r0, r3, r0
 800e69e:	b003      	add	sp, #12
 800e6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e6aa:	e7ed      	b.n	800e688 <__exponent+0x4c>
 800e6ac:	2330      	movs	r3, #48	; 0x30
 800e6ae:	3130      	adds	r1, #48	; 0x30
 800e6b0:	7083      	strb	r3, [r0, #2]
 800e6b2:	70c1      	strb	r1, [r0, #3]
 800e6b4:	1d03      	adds	r3, r0, #4
 800e6b6:	e7f1      	b.n	800e69c <__exponent+0x60>

0800e6b8 <_printf_float>:
 800e6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6bc:	b08b      	sub	sp, #44	; 0x2c
 800e6be:	460c      	mov	r4, r1
 800e6c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e6c4:	4616      	mov	r6, r2
 800e6c6:	461f      	mov	r7, r3
 800e6c8:	4605      	mov	r5, r0
 800e6ca:	f001 f9b7 	bl	800fa3c <_localeconv_r>
 800e6ce:	f8d0 b000 	ldr.w	fp, [r0]
 800e6d2:	4658      	mov	r0, fp
 800e6d4:	f7f1 fe04 	bl	80002e0 <strlen>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	9308      	str	r3, [sp, #32]
 800e6dc:	f8d8 3000 	ldr.w	r3, [r8]
 800e6e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e6e4:	6822      	ldr	r2, [r4, #0]
 800e6e6:	3307      	adds	r3, #7
 800e6e8:	f023 0307 	bic.w	r3, r3, #7
 800e6ec:	f103 0108 	add.w	r1, r3, #8
 800e6f0:	f8c8 1000 	str.w	r1, [r8]
 800e6f4:	4682      	mov	sl, r0
 800e6f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e6fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e6fe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800e960 <_printf_float+0x2a8>
 800e702:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e706:	eeb0 6bc0 	vabs.f64	d6, d0
 800e70a:	eeb4 6b47 	vcmp.f64	d6, d7
 800e70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e712:	dd24      	ble.n	800e75e <_printf_float+0xa6>
 800e714:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e71c:	d502      	bpl.n	800e724 <_printf_float+0x6c>
 800e71e:	232d      	movs	r3, #45	; 0x2d
 800e720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e724:	4b90      	ldr	r3, [pc, #576]	; (800e968 <_printf_float+0x2b0>)
 800e726:	4891      	ldr	r0, [pc, #580]	; (800e96c <_printf_float+0x2b4>)
 800e728:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e72c:	bf94      	ite	ls
 800e72e:	4698      	movls	r8, r3
 800e730:	4680      	movhi	r8, r0
 800e732:	2303      	movs	r3, #3
 800e734:	6123      	str	r3, [r4, #16]
 800e736:	f022 0204 	bic.w	r2, r2, #4
 800e73a:	2300      	movs	r3, #0
 800e73c:	6022      	str	r2, [r4, #0]
 800e73e:	9304      	str	r3, [sp, #16]
 800e740:	9700      	str	r7, [sp, #0]
 800e742:	4633      	mov	r3, r6
 800e744:	aa09      	add	r2, sp, #36	; 0x24
 800e746:	4621      	mov	r1, r4
 800e748:	4628      	mov	r0, r5
 800e74a:	f000 f9d3 	bl	800eaf4 <_printf_common>
 800e74e:	3001      	adds	r0, #1
 800e750:	f040 808a 	bne.w	800e868 <_printf_float+0x1b0>
 800e754:	f04f 30ff 	mov.w	r0, #4294967295
 800e758:	b00b      	add	sp, #44	; 0x2c
 800e75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e75e:	eeb4 0b40 	vcmp.f64	d0, d0
 800e762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e766:	d709      	bvc.n	800e77c <_printf_float+0xc4>
 800e768:	ee10 3a90 	vmov	r3, s1
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	bfbc      	itt	lt
 800e770:	232d      	movlt	r3, #45	; 0x2d
 800e772:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e776:	487e      	ldr	r0, [pc, #504]	; (800e970 <_printf_float+0x2b8>)
 800e778:	4b7e      	ldr	r3, [pc, #504]	; (800e974 <_printf_float+0x2bc>)
 800e77a:	e7d5      	b.n	800e728 <_printf_float+0x70>
 800e77c:	6863      	ldr	r3, [r4, #4]
 800e77e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e782:	9104      	str	r1, [sp, #16]
 800e784:	1c59      	adds	r1, r3, #1
 800e786:	d13c      	bne.n	800e802 <_printf_float+0x14a>
 800e788:	2306      	movs	r3, #6
 800e78a:	6063      	str	r3, [r4, #4]
 800e78c:	2300      	movs	r3, #0
 800e78e:	9303      	str	r3, [sp, #12]
 800e790:	ab08      	add	r3, sp, #32
 800e792:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e796:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e79a:	ab07      	add	r3, sp, #28
 800e79c:	6861      	ldr	r1, [r4, #4]
 800e79e:	9300      	str	r3, [sp, #0]
 800e7a0:	6022      	str	r2, [r4, #0]
 800e7a2:	f10d 031b 	add.w	r3, sp, #27
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	f7ff fef6 	bl	800e598 <__cvt>
 800e7ac:	9b04      	ldr	r3, [sp, #16]
 800e7ae:	9907      	ldr	r1, [sp, #28]
 800e7b0:	2b47      	cmp	r3, #71	; 0x47
 800e7b2:	4680      	mov	r8, r0
 800e7b4:	d108      	bne.n	800e7c8 <_printf_float+0x110>
 800e7b6:	1cc8      	adds	r0, r1, #3
 800e7b8:	db02      	blt.n	800e7c0 <_printf_float+0x108>
 800e7ba:	6863      	ldr	r3, [r4, #4]
 800e7bc:	4299      	cmp	r1, r3
 800e7be:	dd41      	ble.n	800e844 <_printf_float+0x18c>
 800e7c0:	f1a9 0902 	sub.w	r9, r9, #2
 800e7c4:	fa5f f989 	uxtb.w	r9, r9
 800e7c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e7cc:	d820      	bhi.n	800e810 <_printf_float+0x158>
 800e7ce:	3901      	subs	r1, #1
 800e7d0:	464a      	mov	r2, r9
 800e7d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e7d6:	9107      	str	r1, [sp, #28]
 800e7d8:	f7ff ff30 	bl	800e63c <__exponent>
 800e7dc:	9a08      	ldr	r2, [sp, #32]
 800e7de:	9004      	str	r0, [sp, #16]
 800e7e0:	1813      	adds	r3, r2, r0
 800e7e2:	2a01      	cmp	r2, #1
 800e7e4:	6123      	str	r3, [r4, #16]
 800e7e6:	dc02      	bgt.n	800e7ee <_printf_float+0x136>
 800e7e8:	6822      	ldr	r2, [r4, #0]
 800e7ea:	07d2      	lsls	r2, r2, #31
 800e7ec:	d501      	bpl.n	800e7f2 <_printf_float+0x13a>
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	6123      	str	r3, [r4, #16]
 800e7f2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d0a2      	beq.n	800e740 <_printf_float+0x88>
 800e7fa:	232d      	movs	r3, #45	; 0x2d
 800e7fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e800:	e79e      	b.n	800e740 <_printf_float+0x88>
 800e802:	9904      	ldr	r1, [sp, #16]
 800e804:	2947      	cmp	r1, #71	; 0x47
 800e806:	d1c1      	bne.n	800e78c <_printf_float+0xd4>
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d1bf      	bne.n	800e78c <_printf_float+0xd4>
 800e80c:	2301      	movs	r3, #1
 800e80e:	e7bc      	b.n	800e78a <_printf_float+0xd2>
 800e810:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e814:	d118      	bne.n	800e848 <_printf_float+0x190>
 800e816:	2900      	cmp	r1, #0
 800e818:	6863      	ldr	r3, [r4, #4]
 800e81a:	dd0b      	ble.n	800e834 <_printf_float+0x17c>
 800e81c:	6121      	str	r1, [r4, #16]
 800e81e:	b913      	cbnz	r3, 800e826 <_printf_float+0x16e>
 800e820:	6822      	ldr	r2, [r4, #0]
 800e822:	07d0      	lsls	r0, r2, #31
 800e824:	d502      	bpl.n	800e82c <_printf_float+0x174>
 800e826:	3301      	adds	r3, #1
 800e828:	440b      	add	r3, r1
 800e82a:	6123      	str	r3, [r4, #16]
 800e82c:	2300      	movs	r3, #0
 800e82e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e830:	9304      	str	r3, [sp, #16]
 800e832:	e7de      	b.n	800e7f2 <_printf_float+0x13a>
 800e834:	b913      	cbnz	r3, 800e83c <_printf_float+0x184>
 800e836:	6822      	ldr	r2, [r4, #0]
 800e838:	07d2      	lsls	r2, r2, #31
 800e83a:	d501      	bpl.n	800e840 <_printf_float+0x188>
 800e83c:	3302      	adds	r3, #2
 800e83e:	e7f4      	b.n	800e82a <_printf_float+0x172>
 800e840:	2301      	movs	r3, #1
 800e842:	e7f2      	b.n	800e82a <_printf_float+0x172>
 800e844:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e848:	9b08      	ldr	r3, [sp, #32]
 800e84a:	4299      	cmp	r1, r3
 800e84c:	db05      	blt.n	800e85a <_printf_float+0x1a2>
 800e84e:	6823      	ldr	r3, [r4, #0]
 800e850:	6121      	str	r1, [r4, #16]
 800e852:	07d8      	lsls	r0, r3, #31
 800e854:	d5ea      	bpl.n	800e82c <_printf_float+0x174>
 800e856:	1c4b      	adds	r3, r1, #1
 800e858:	e7e7      	b.n	800e82a <_printf_float+0x172>
 800e85a:	2900      	cmp	r1, #0
 800e85c:	bfd4      	ite	le
 800e85e:	f1c1 0202 	rsble	r2, r1, #2
 800e862:	2201      	movgt	r2, #1
 800e864:	4413      	add	r3, r2
 800e866:	e7e0      	b.n	800e82a <_printf_float+0x172>
 800e868:	6823      	ldr	r3, [r4, #0]
 800e86a:	055a      	lsls	r2, r3, #21
 800e86c:	d407      	bmi.n	800e87e <_printf_float+0x1c6>
 800e86e:	6923      	ldr	r3, [r4, #16]
 800e870:	4642      	mov	r2, r8
 800e872:	4631      	mov	r1, r6
 800e874:	4628      	mov	r0, r5
 800e876:	47b8      	blx	r7
 800e878:	3001      	adds	r0, #1
 800e87a:	d12a      	bne.n	800e8d2 <_printf_float+0x21a>
 800e87c:	e76a      	b.n	800e754 <_printf_float+0x9c>
 800e87e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e882:	f240 80e2 	bls.w	800ea4a <_printf_float+0x392>
 800e886:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e88a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e892:	d133      	bne.n	800e8fc <_printf_float+0x244>
 800e894:	4a38      	ldr	r2, [pc, #224]	; (800e978 <_printf_float+0x2c0>)
 800e896:	2301      	movs	r3, #1
 800e898:	4631      	mov	r1, r6
 800e89a:	4628      	mov	r0, r5
 800e89c:	47b8      	blx	r7
 800e89e:	3001      	adds	r0, #1
 800e8a0:	f43f af58 	beq.w	800e754 <_printf_float+0x9c>
 800e8a4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	db02      	blt.n	800e8b2 <_printf_float+0x1fa>
 800e8ac:	6823      	ldr	r3, [r4, #0]
 800e8ae:	07d8      	lsls	r0, r3, #31
 800e8b0:	d50f      	bpl.n	800e8d2 <_printf_float+0x21a>
 800e8b2:	4653      	mov	r3, sl
 800e8b4:	465a      	mov	r2, fp
 800e8b6:	4631      	mov	r1, r6
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	47b8      	blx	r7
 800e8bc:	3001      	adds	r0, #1
 800e8be:	f43f af49 	beq.w	800e754 <_printf_float+0x9c>
 800e8c2:	f04f 0800 	mov.w	r8, #0
 800e8c6:	f104 091a 	add.w	r9, r4, #26
 800e8ca:	9b08      	ldr	r3, [sp, #32]
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	4543      	cmp	r3, r8
 800e8d0:	dc09      	bgt.n	800e8e6 <_printf_float+0x22e>
 800e8d2:	6823      	ldr	r3, [r4, #0]
 800e8d4:	079b      	lsls	r3, r3, #30
 800e8d6:	f100 8108 	bmi.w	800eaea <_printf_float+0x432>
 800e8da:	68e0      	ldr	r0, [r4, #12]
 800e8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8de:	4298      	cmp	r0, r3
 800e8e0:	bfb8      	it	lt
 800e8e2:	4618      	movlt	r0, r3
 800e8e4:	e738      	b.n	800e758 <_printf_float+0xa0>
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	464a      	mov	r2, r9
 800e8ea:	4631      	mov	r1, r6
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	47b8      	blx	r7
 800e8f0:	3001      	adds	r0, #1
 800e8f2:	f43f af2f 	beq.w	800e754 <_printf_float+0x9c>
 800e8f6:	f108 0801 	add.w	r8, r8, #1
 800e8fa:	e7e6      	b.n	800e8ca <_printf_float+0x212>
 800e8fc:	9b07      	ldr	r3, [sp, #28]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	dc3c      	bgt.n	800e97c <_printf_float+0x2c4>
 800e902:	4a1d      	ldr	r2, [pc, #116]	; (800e978 <_printf_float+0x2c0>)
 800e904:	2301      	movs	r3, #1
 800e906:	4631      	mov	r1, r6
 800e908:	4628      	mov	r0, r5
 800e90a:	47b8      	blx	r7
 800e90c:	3001      	adds	r0, #1
 800e90e:	f43f af21 	beq.w	800e754 <_printf_float+0x9c>
 800e912:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e916:	4313      	orrs	r3, r2
 800e918:	d102      	bne.n	800e920 <_printf_float+0x268>
 800e91a:	6823      	ldr	r3, [r4, #0]
 800e91c:	07d9      	lsls	r1, r3, #31
 800e91e:	d5d8      	bpl.n	800e8d2 <_printf_float+0x21a>
 800e920:	4653      	mov	r3, sl
 800e922:	465a      	mov	r2, fp
 800e924:	4631      	mov	r1, r6
 800e926:	4628      	mov	r0, r5
 800e928:	47b8      	blx	r7
 800e92a:	3001      	adds	r0, #1
 800e92c:	f43f af12 	beq.w	800e754 <_printf_float+0x9c>
 800e930:	f04f 0900 	mov.w	r9, #0
 800e934:	f104 0a1a 	add.w	sl, r4, #26
 800e938:	9b07      	ldr	r3, [sp, #28]
 800e93a:	425b      	negs	r3, r3
 800e93c:	454b      	cmp	r3, r9
 800e93e:	dc01      	bgt.n	800e944 <_printf_float+0x28c>
 800e940:	9b08      	ldr	r3, [sp, #32]
 800e942:	e795      	b.n	800e870 <_printf_float+0x1b8>
 800e944:	2301      	movs	r3, #1
 800e946:	4652      	mov	r2, sl
 800e948:	4631      	mov	r1, r6
 800e94a:	4628      	mov	r0, r5
 800e94c:	47b8      	blx	r7
 800e94e:	3001      	adds	r0, #1
 800e950:	f43f af00 	beq.w	800e754 <_printf_float+0x9c>
 800e954:	f109 0901 	add.w	r9, r9, #1
 800e958:	e7ee      	b.n	800e938 <_printf_float+0x280>
 800e95a:	bf00      	nop
 800e95c:	f3af 8000 	nop.w
 800e960:	ffffffff 	.word	0xffffffff
 800e964:	7fefffff 	.word	0x7fefffff
 800e968:	0801271c 	.word	0x0801271c
 800e96c:	08012720 	.word	0x08012720
 800e970:	08012728 	.word	0x08012728
 800e974:	08012724 	.word	0x08012724
 800e978:	0801272c 	.word	0x0801272c
 800e97c:	9a08      	ldr	r2, [sp, #32]
 800e97e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e980:	429a      	cmp	r2, r3
 800e982:	bfa8      	it	ge
 800e984:	461a      	movge	r2, r3
 800e986:	2a00      	cmp	r2, #0
 800e988:	4691      	mov	r9, r2
 800e98a:	dc38      	bgt.n	800e9fe <_printf_float+0x346>
 800e98c:	2300      	movs	r3, #0
 800e98e:	9305      	str	r3, [sp, #20]
 800e990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e994:	f104 021a 	add.w	r2, r4, #26
 800e998:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e99a:	9905      	ldr	r1, [sp, #20]
 800e99c:	9304      	str	r3, [sp, #16]
 800e99e:	eba3 0309 	sub.w	r3, r3, r9
 800e9a2:	428b      	cmp	r3, r1
 800e9a4:	dc33      	bgt.n	800ea0e <_printf_float+0x356>
 800e9a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	db3c      	blt.n	800ea28 <_printf_float+0x370>
 800e9ae:	6823      	ldr	r3, [r4, #0]
 800e9b0:	07da      	lsls	r2, r3, #31
 800e9b2:	d439      	bmi.n	800ea28 <_printf_float+0x370>
 800e9b4:	9a08      	ldr	r2, [sp, #32]
 800e9b6:	9b04      	ldr	r3, [sp, #16]
 800e9b8:	9907      	ldr	r1, [sp, #28]
 800e9ba:	1ad3      	subs	r3, r2, r3
 800e9bc:	eba2 0901 	sub.w	r9, r2, r1
 800e9c0:	4599      	cmp	r9, r3
 800e9c2:	bfa8      	it	ge
 800e9c4:	4699      	movge	r9, r3
 800e9c6:	f1b9 0f00 	cmp.w	r9, #0
 800e9ca:	dc35      	bgt.n	800ea38 <_printf_float+0x380>
 800e9cc:	f04f 0800 	mov.w	r8, #0
 800e9d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9d4:	f104 0a1a 	add.w	sl, r4, #26
 800e9d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e9dc:	1a9b      	subs	r3, r3, r2
 800e9de:	eba3 0309 	sub.w	r3, r3, r9
 800e9e2:	4543      	cmp	r3, r8
 800e9e4:	f77f af75 	ble.w	800e8d2 <_printf_float+0x21a>
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	4652      	mov	r2, sl
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	47b8      	blx	r7
 800e9f2:	3001      	adds	r0, #1
 800e9f4:	f43f aeae 	beq.w	800e754 <_printf_float+0x9c>
 800e9f8:	f108 0801 	add.w	r8, r8, #1
 800e9fc:	e7ec      	b.n	800e9d8 <_printf_float+0x320>
 800e9fe:	4613      	mov	r3, r2
 800ea00:	4631      	mov	r1, r6
 800ea02:	4642      	mov	r2, r8
 800ea04:	4628      	mov	r0, r5
 800ea06:	47b8      	blx	r7
 800ea08:	3001      	adds	r0, #1
 800ea0a:	d1bf      	bne.n	800e98c <_printf_float+0x2d4>
 800ea0c:	e6a2      	b.n	800e754 <_printf_float+0x9c>
 800ea0e:	2301      	movs	r3, #1
 800ea10:	4631      	mov	r1, r6
 800ea12:	4628      	mov	r0, r5
 800ea14:	9204      	str	r2, [sp, #16]
 800ea16:	47b8      	blx	r7
 800ea18:	3001      	adds	r0, #1
 800ea1a:	f43f ae9b 	beq.w	800e754 <_printf_float+0x9c>
 800ea1e:	9b05      	ldr	r3, [sp, #20]
 800ea20:	9a04      	ldr	r2, [sp, #16]
 800ea22:	3301      	adds	r3, #1
 800ea24:	9305      	str	r3, [sp, #20]
 800ea26:	e7b7      	b.n	800e998 <_printf_float+0x2e0>
 800ea28:	4653      	mov	r3, sl
 800ea2a:	465a      	mov	r2, fp
 800ea2c:	4631      	mov	r1, r6
 800ea2e:	4628      	mov	r0, r5
 800ea30:	47b8      	blx	r7
 800ea32:	3001      	adds	r0, #1
 800ea34:	d1be      	bne.n	800e9b4 <_printf_float+0x2fc>
 800ea36:	e68d      	b.n	800e754 <_printf_float+0x9c>
 800ea38:	9a04      	ldr	r2, [sp, #16]
 800ea3a:	464b      	mov	r3, r9
 800ea3c:	4442      	add	r2, r8
 800ea3e:	4631      	mov	r1, r6
 800ea40:	4628      	mov	r0, r5
 800ea42:	47b8      	blx	r7
 800ea44:	3001      	adds	r0, #1
 800ea46:	d1c1      	bne.n	800e9cc <_printf_float+0x314>
 800ea48:	e684      	b.n	800e754 <_printf_float+0x9c>
 800ea4a:	9a08      	ldr	r2, [sp, #32]
 800ea4c:	2a01      	cmp	r2, #1
 800ea4e:	dc01      	bgt.n	800ea54 <_printf_float+0x39c>
 800ea50:	07db      	lsls	r3, r3, #31
 800ea52:	d537      	bpl.n	800eac4 <_printf_float+0x40c>
 800ea54:	2301      	movs	r3, #1
 800ea56:	4642      	mov	r2, r8
 800ea58:	4631      	mov	r1, r6
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	47b8      	blx	r7
 800ea5e:	3001      	adds	r0, #1
 800ea60:	f43f ae78 	beq.w	800e754 <_printf_float+0x9c>
 800ea64:	4653      	mov	r3, sl
 800ea66:	465a      	mov	r2, fp
 800ea68:	4631      	mov	r1, r6
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	47b8      	blx	r7
 800ea6e:	3001      	adds	r0, #1
 800ea70:	f43f ae70 	beq.w	800e754 <_printf_float+0x9c>
 800ea74:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ea78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea80:	d01b      	beq.n	800eaba <_printf_float+0x402>
 800ea82:	9b08      	ldr	r3, [sp, #32]
 800ea84:	f108 0201 	add.w	r2, r8, #1
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	4631      	mov	r1, r6
 800ea8c:	4628      	mov	r0, r5
 800ea8e:	47b8      	blx	r7
 800ea90:	3001      	adds	r0, #1
 800ea92:	d10e      	bne.n	800eab2 <_printf_float+0x3fa>
 800ea94:	e65e      	b.n	800e754 <_printf_float+0x9c>
 800ea96:	2301      	movs	r3, #1
 800ea98:	464a      	mov	r2, r9
 800ea9a:	4631      	mov	r1, r6
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	47b8      	blx	r7
 800eaa0:	3001      	adds	r0, #1
 800eaa2:	f43f ae57 	beq.w	800e754 <_printf_float+0x9c>
 800eaa6:	f108 0801 	add.w	r8, r8, #1
 800eaaa:	9b08      	ldr	r3, [sp, #32]
 800eaac:	3b01      	subs	r3, #1
 800eaae:	4543      	cmp	r3, r8
 800eab0:	dcf1      	bgt.n	800ea96 <_printf_float+0x3de>
 800eab2:	9b04      	ldr	r3, [sp, #16]
 800eab4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eab8:	e6db      	b.n	800e872 <_printf_float+0x1ba>
 800eaba:	f04f 0800 	mov.w	r8, #0
 800eabe:	f104 091a 	add.w	r9, r4, #26
 800eac2:	e7f2      	b.n	800eaaa <_printf_float+0x3f2>
 800eac4:	2301      	movs	r3, #1
 800eac6:	4642      	mov	r2, r8
 800eac8:	e7df      	b.n	800ea8a <_printf_float+0x3d2>
 800eaca:	2301      	movs	r3, #1
 800eacc:	464a      	mov	r2, r9
 800eace:	4631      	mov	r1, r6
 800ead0:	4628      	mov	r0, r5
 800ead2:	47b8      	blx	r7
 800ead4:	3001      	adds	r0, #1
 800ead6:	f43f ae3d 	beq.w	800e754 <_printf_float+0x9c>
 800eada:	f108 0801 	add.w	r8, r8, #1
 800eade:	68e3      	ldr	r3, [r4, #12]
 800eae0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eae2:	1a5b      	subs	r3, r3, r1
 800eae4:	4543      	cmp	r3, r8
 800eae6:	dcf0      	bgt.n	800eaca <_printf_float+0x412>
 800eae8:	e6f7      	b.n	800e8da <_printf_float+0x222>
 800eaea:	f04f 0800 	mov.w	r8, #0
 800eaee:	f104 0919 	add.w	r9, r4, #25
 800eaf2:	e7f4      	b.n	800eade <_printf_float+0x426>

0800eaf4 <_printf_common>:
 800eaf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaf8:	4616      	mov	r6, r2
 800eafa:	4699      	mov	r9, r3
 800eafc:	688a      	ldr	r2, [r1, #8]
 800eafe:	690b      	ldr	r3, [r1, #16]
 800eb00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb04:	4293      	cmp	r3, r2
 800eb06:	bfb8      	it	lt
 800eb08:	4613      	movlt	r3, r2
 800eb0a:	6033      	str	r3, [r6, #0]
 800eb0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb10:	4607      	mov	r7, r0
 800eb12:	460c      	mov	r4, r1
 800eb14:	b10a      	cbz	r2, 800eb1a <_printf_common+0x26>
 800eb16:	3301      	adds	r3, #1
 800eb18:	6033      	str	r3, [r6, #0]
 800eb1a:	6823      	ldr	r3, [r4, #0]
 800eb1c:	0699      	lsls	r1, r3, #26
 800eb1e:	bf42      	ittt	mi
 800eb20:	6833      	ldrmi	r3, [r6, #0]
 800eb22:	3302      	addmi	r3, #2
 800eb24:	6033      	strmi	r3, [r6, #0]
 800eb26:	6825      	ldr	r5, [r4, #0]
 800eb28:	f015 0506 	ands.w	r5, r5, #6
 800eb2c:	d106      	bne.n	800eb3c <_printf_common+0x48>
 800eb2e:	f104 0a19 	add.w	sl, r4, #25
 800eb32:	68e3      	ldr	r3, [r4, #12]
 800eb34:	6832      	ldr	r2, [r6, #0]
 800eb36:	1a9b      	subs	r3, r3, r2
 800eb38:	42ab      	cmp	r3, r5
 800eb3a:	dc26      	bgt.n	800eb8a <_printf_common+0x96>
 800eb3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eb40:	1e13      	subs	r3, r2, #0
 800eb42:	6822      	ldr	r2, [r4, #0]
 800eb44:	bf18      	it	ne
 800eb46:	2301      	movne	r3, #1
 800eb48:	0692      	lsls	r2, r2, #26
 800eb4a:	d42b      	bmi.n	800eba4 <_printf_common+0xb0>
 800eb4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb50:	4649      	mov	r1, r9
 800eb52:	4638      	mov	r0, r7
 800eb54:	47c0      	blx	r8
 800eb56:	3001      	adds	r0, #1
 800eb58:	d01e      	beq.n	800eb98 <_printf_common+0xa4>
 800eb5a:	6823      	ldr	r3, [r4, #0]
 800eb5c:	68e5      	ldr	r5, [r4, #12]
 800eb5e:	6832      	ldr	r2, [r6, #0]
 800eb60:	f003 0306 	and.w	r3, r3, #6
 800eb64:	2b04      	cmp	r3, #4
 800eb66:	bf08      	it	eq
 800eb68:	1aad      	subeq	r5, r5, r2
 800eb6a:	68a3      	ldr	r3, [r4, #8]
 800eb6c:	6922      	ldr	r2, [r4, #16]
 800eb6e:	bf0c      	ite	eq
 800eb70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb74:	2500      	movne	r5, #0
 800eb76:	4293      	cmp	r3, r2
 800eb78:	bfc4      	itt	gt
 800eb7a:	1a9b      	subgt	r3, r3, r2
 800eb7c:	18ed      	addgt	r5, r5, r3
 800eb7e:	2600      	movs	r6, #0
 800eb80:	341a      	adds	r4, #26
 800eb82:	42b5      	cmp	r5, r6
 800eb84:	d11a      	bne.n	800ebbc <_printf_common+0xc8>
 800eb86:	2000      	movs	r0, #0
 800eb88:	e008      	b.n	800eb9c <_printf_common+0xa8>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	4652      	mov	r2, sl
 800eb8e:	4649      	mov	r1, r9
 800eb90:	4638      	mov	r0, r7
 800eb92:	47c0      	blx	r8
 800eb94:	3001      	adds	r0, #1
 800eb96:	d103      	bne.n	800eba0 <_printf_common+0xac>
 800eb98:	f04f 30ff 	mov.w	r0, #4294967295
 800eb9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eba0:	3501      	adds	r5, #1
 800eba2:	e7c6      	b.n	800eb32 <_printf_common+0x3e>
 800eba4:	18e1      	adds	r1, r4, r3
 800eba6:	1c5a      	adds	r2, r3, #1
 800eba8:	2030      	movs	r0, #48	; 0x30
 800ebaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ebae:	4422      	add	r2, r4
 800ebb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebb8:	3302      	adds	r3, #2
 800ebba:	e7c7      	b.n	800eb4c <_printf_common+0x58>
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	4622      	mov	r2, r4
 800ebc0:	4649      	mov	r1, r9
 800ebc2:	4638      	mov	r0, r7
 800ebc4:	47c0      	blx	r8
 800ebc6:	3001      	adds	r0, #1
 800ebc8:	d0e6      	beq.n	800eb98 <_printf_common+0xa4>
 800ebca:	3601      	adds	r6, #1
 800ebcc:	e7d9      	b.n	800eb82 <_printf_common+0x8e>
	...

0800ebd0 <_printf_i>:
 800ebd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd4:	460c      	mov	r4, r1
 800ebd6:	4691      	mov	r9, r2
 800ebd8:	7e27      	ldrb	r7, [r4, #24]
 800ebda:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ebdc:	2f78      	cmp	r7, #120	; 0x78
 800ebde:	4680      	mov	r8, r0
 800ebe0:	469a      	mov	sl, r3
 800ebe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebe6:	d807      	bhi.n	800ebf8 <_printf_i+0x28>
 800ebe8:	2f62      	cmp	r7, #98	; 0x62
 800ebea:	d80a      	bhi.n	800ec02 <_printf_i+0x32>
 800ebec:	2f00      	cmp	r7, #0
 800ebee:	f000 80d8 	beq.w	800eda2 <_printf_i+0x1d2>
 800ebf2:	2f58      	cmp	r7, #88	; 0x58
 800ebf4:	f000 80a3 	beq.w	800ed3e <_printf_i+0x16e>
 800ebf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ebfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec00:	e03a      	b.n	800ec78 <_printf_i+0xa8>
 800ec02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec06:	2b15      	cmp	r3, #21
 800ec08:	d8f6      	bhi.n	800ebf8 <_printf_i+0x28>
 800ec0a:	a001      	add	r0, pc, #4	; (adr r0, 800ec10 <_printf_i+0x40>)
 800ec0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ec10:	0800ec69 	.word	0x0800ec69
 800ec14:	0800ec7d 	.word	0x0800ec7d
 800ec18:	0800ebf9 	.word	0x0800ebf9
 800ec1c:	0800ebf9 	.word	0x0800ebf9
 800ec20:	0800ebf9 	.word	0x0800ebf9
 800ec24:	0800ebf9 	.word	0x0800ebf9
 800ec28:	0800ec7d 	.word	0x0800ec7d
 800ec2c:	0800ebf9 	.word	0x0800ebf9
 800ec30:	0800ebf9 	.word	0x0800ebf9
 800ec34:	0800ebf9 	.word	0x0800ebf9
 800ec38:	0800ebf9 	.word	0x0800ebf9
 800ec3c:	0800ed89 	.word	0x0800ed89
 800ec40:	0800ecad 	.word	0x0800ecad
 800ec44:	0800ed6b 	.word	0x0800ed6b
 800ec48:	0800ebf9 	.word	0x0800ebf9
 800ec4c:	0800ebf9 	.word	0x0800ebf9
 800ec50:	0800edab 	.word	0x0800edab
 800ec54:	0800ebf9 	.word	0x0800ebf9
 800ec58:	0800ecad 	.word	0x0800ecad
 800ec5c:	0800ebf9 	.word	0x0800ebf9
 800ec60:	0800ebf9 	.word	0x0800ebf9
 800ec64:	0800ed73 	.word	0x0800ed73
 800ec68:	680b      	ldr	r3, [r1, #0]
 800ec6a:	1d1a      	adds	r2, r3, #4
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	600a      	str	r2, [r1, #0]
 800ec70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ec74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e0a3      	b.n	800edc4 <_printf_i+0x1f4>
 800ec7c:	6825      	ldr	r5, [r4, #0]
 800ec7e:	6808      	ldr	r0, [r1, #0]
 800ec80:	062e      	lsls	r6, r5, #24
 800ec82:	f100 0304 	add.w	r3, r0, #4
 800ec86:	d50a      	bpl.n	800ec9e <_printf_i+0xce>
 800ec88:	6805      	ldr	r5, [r0, #0]
 800ec8a:	600b      	str	r3, [r1, #0]
 800ec8c:	2d00      	cmp	r5, #0
 800ec8e:	da03      	bge.n	800ec98 <_printf_i+0xc8>
 800ec90:	232d      	movs	r3, #45	; 0x2d
 800ec92:	426d      	negs	r5, r5
 800ec94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec98:	485e      	ldr	r0, [pc, #376]	; (800ee14 <_printf_i+0x244>)
 800ec9a:	230a      	movs	r3, #10
 800ec9c:	e019      	b.n	800ecd2 <_printf_i+0x102>
 800ec9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800eca2:	6805      	ldr	r5, [r0, #0]
 800eca4:	600b      	str	r3, [r1, #0]
 800eca6:	bf18      	it	ne
 800eca8:	b22d      	sxthne	r5, r5
 800ecaa:	e7ef      	b.n	800ec8c <_printf_i+0xbc>
 800ecac:	680b      	ldr	r3, [r1, #0]
 800ecae:	6825      	ldr	r5, [r4, #0]
 800ecb0:	1d18      	adds	r0, r3, #4
 800ecb2:	6008      	str	r0, [r1, #0]
 800ecb4:	0628      	lsls	r0, r5, #24
 800ecb6:	d501      	bpl.n	800ecbc <_printf_i+0xec>
 800ecb8:	681d      	ldr	r5, [r3, #0]
 800ecba:	e002      	b.n	800ecc2 <_printf_i+0xf2>
 800ecbc:	0669      	lsls	r1, r5, #25
 800ecbe:	d5fb      	bpl.n	800ecb8 <_printf_i+0xe8>
 800ecc0:	881d      	ldrh	r5, [r3, #0]
 800ecc2:	4854      	ldr	r0, [pc, #336]	; (800ee14 <_printf_i+0x244>)
 800ecc4:	2f6f      	cmp	r7, #111	; 0x6f
 800ecc6:	bf0c      	ite	eq
 800ecc8:	2308      	moveq	r3, #8
 800ecca:	230a      	movne	r3, #10
 800eccc:	2100      	movs	r1, #0
 800ecce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ecd2:	6866      	ldr	r6, [r4, #4]
 800ecd4:	60a6      	str	r6, [r4, #8]
 800ecd6:	2e00      	cmp	r6, #0
 800ecd8:	bfa2      	ittt	ge
 800ecda:	6821      	ldrge	r1, [r4, #0]
 800ecdc:	f021 0104 	bicge.w	r1, r1, #4
 800ece0:	6021      	strge	r1, [r4, #0]
 800ece2:	b90d      	cbnz	r5, 800ece8 <_printf_i+0x118>
 800ece4:	2e00      	cmp	r6, #0
 800ece6:	d04d      	beq.n	800ed84 <_printf_i+0x1b4>
 800ece8:	4616      	mov	r6, r2
 800ecea:	fbb5 f1f3 	udiv	r1, r5, r3
 800ecee:	fb03 5711 	mls	r7, r3, r1, r5
 800ecf2:	5dc7      	ldrb	r7, [r0, r7]
 800ecf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ecf8:	462f      	mov	r7, r5
 800ecfa:	42bb      	cmp	r3, r7
 800ecfc:	460d      	mov	r5, r1
 800ecfe:	d9f4      	bls.n	800ecea <_printf_i+0x11a>
 800ed00:	2b08      	cmp	r3, #8
 800ed02:	d10b      	bne.n	800ed1c <_printf_i+0x14c>
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	07df      	lsls	r7, r3, #31
 800ed08:	d508      	bpl.n	800ed1c <_printf_i+0x14c>
 800ed0a:	6923      	ldr	r3, [r4, #16]
 800ed0c:	6861      	ldr	r1, [r4, #4]
 800ed0e:	4299      	cmp	r1, r3
 800ed10:	bfde      	ittt	le
 800ed12:	2330      	movle	r3, #48	; 0x30
 800ed14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed1c:	1b92      	subs	r2, r2, r6
 800ed1e:	6122      	str	r2, [r4, #16]
 800ed20:	f8cd a000 	str.w	sl, [sp]
 800ed24:	464b      	mov	r3, r9
 800ed26:	aa03      	add	r2, sp, #12
 800ed28:	4621      	mov	r1, r4
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	f7ff fee2 	bl	800eaf4 <_printf_common>
 800ed30:	3001      	adds	r0, #1
 800ed32:	d14c      	bne.n	800edce <_printf_i+0x1fe>
 800ed34:	f04f 30ff 	mov.w	r0, #4294967295
 800ed38:	b004      	add	sp, #16
 800ed3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed3e:	4835      	ldr	r0, [pc, #212]	; (800ee14 <_printf_i+0x244>)
 800ed40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ed44:	6823      	ldr	r3, [r4, #0]
 800ed46:	680e      	ldr	r6, [r1, #0]
 800ed48:	061f      	lsls	r7, r3, #24
 800ed4a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ed4e:	600e      	str	r6, [r1, #0]
 800ed50:	d514      	bpl.n	800ed7c <_printf_i+0x1ac>
 800ed52:	07d9      	lsls	r1, r3, #31
 800ed54:	bf44      	itt	mi
 800ed56:	f043 0320 	orrmi.w	r3, r3, #32
 800ed5a:	6023      	strmi	r3, [r4, #0]
 800ed5c:	b91d      	cbnz	r5, 800ed66 <_printf_i+0x196>
 800ed5e:	6823      	ldr	r3, [r4, #0]
 800ed60:	f023 0320 	bic.w	r3, r3, #32
 800ed64:	6023      	str	r3, [r4, #0]
 800ed66:	2310      	movs	r3, #16
 800ed68:	e7b0      	b.n	800eccc <_printf_i+0xfc>
 800ed6a:	6823      	ldr	r3, [r4, #0]
 800ed6c:	f043 0320 	orr.w	r3, r3, #32
 800ed70:	6023      	str	r3, [r4, #0]
 800ed72:	2378      	movs	r3, #120	; 0x78
 800ed74:	4828      	ldr	r0, [pc, #160]	; (800ee18 <_printf_i+0x248>)
 800ed76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ed7a:	e7e3      	b.n	800ed44 <_printf_i+0x174>
 800ed7c:	065e      	lsls	r6, r3, #25
 800ed7e:	bf48      	it	mi
 800ed80:	b2ad      	uxthmi	r5, r5
 800ed82:	e7e6      	b.n	800ed52 <_printf_i+0x182>
 800ed84:	4616      	mov	r6, r2
 800ed86:	e7bb      	b.n	800ed00 <_printf_i+0x130>
 800ed88:	680b      	ldr	r3, [r1, #0]
 800ed8a:	6826      	ldr	r6, [r4, #0]
 800ed8c:	6960      	ldr	r0, [r4, #20]
 800ed8e:	1d1d      	adds	r5, r3, #4
 800ed90:	600d      	str	r5, [r1, #0]
 800ed92:	0635      	lsls	r5, r6, #24
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	d501      	bpl.n	800ed9c <_printf_i+0x1cc>
 800ed98:	6018      	str	r0, [r3, #0]
 800ed9a:	e002      	b.n	800eda2 <_printf_i+0x1d2>
 800ed9c:	0671      	lsls	r1, r6, #25
 800ed9e:	d5fb      	bpl.n	800ed98 <_printf_i+0x1c8>
 800eda0:	8018      	strh	r0, [r3, #0]
 800eda2:	2300      	movs	r3, #0
 800eda4:	6123      	str	r3, [r4, #16]
 800eda6:	4616      	mov	r6, r2
 800eda8:	e7ba      	b.n	800ed20 <_printf_i+0x150>
 800edaa:	680b      	ldr	r3, [r1, #0]
 800edac:	1d1a      	adds	r2, r3, #4
 800edae:	600a      	str	r2, [r1, #0]
 800edb0:	681e      	ldr	r6, [r3, #0]
 800edb2:	6862      	ldr	r2, [r4, #4]
 800edb4:	2100      	movs	r1, #0
 800edb6:	4630      	mov	r0, r6
 800edb8:	f7f1 fa9a 	bl	80002f0 <memchr>
 800edbc:	b108      	cbz	r0, 800edc2 <_printf_i+0x1f2>
 800edbe:	1b80      	subs	r0, r0, r6
 800edc0:	6060      	str	r0, [r4, #4]
 800edc2:	6863      	ldr	r3, [r4, #4]
 800edc4:	6123      	str	r3, [r4, #16]
 800edc6:	2300      	movs	r3, #0
 800edc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edcc:	e7a8      	b.n	800ed20 <_printf_i+0x150>
 800edce:	6923      	ldr	r3, [r4, #16]
 800edd0:	4632      	mov	r2, r6
 800edd2:	4649      	mov	r1, r9
 800edd4:	4640      	mov	r0, r8
 800edd6:	47d0      	blx	sl
 800edd8:	3001      	adds	r0, #1
 800edda:	d0ab      	beq.n	800ed34 <_printf_i+0x164>
 800eddc:	6823      	ldr	r3, [r4, #0]
 800edde:	079b      	lsls	r3, r3, #30
 800ede0:	d413      	bmi.n	800ee0a <_printf_i+0x23a>
 800ede2:	68e0      	ldr	r0, [r4, #12]
 800ede4:	9b03      	ldr	r3, [sp, #12]
 800ede6:	4298      	cmp	r0, r3
 800ede8:	bfb8      	it	lt
 800edea:	4618      	movlt	r0, r3
 800edec:	e7a4      	b.n	800ed38 <_printf_i+0x168>
 800edee:	2301      	movs	r3, #1
 800edf0:	4632      	mov	r2, r6
 800edf2:	4649      	mov	r1, r9
 800edf4:	4640      	mov	r0, r8
 800edf6:	47d0      	blx	sl
 800edf8:	3001      	adds	r0, #1
 800edfa:	d09b      	beq.n	800ed34 <_printf_i+0x164>
 800edfc:	3501      	adds	r5, #1
 800edfe:	68e3      	ldr	r3, [r4, #12]
 800ee00:	9903      	ldr	r1, [sp, #12]
 800ee02:	1a5b      	subs	r3, r3, r1
 800ee04:	42ab      	cmp	r3, r5
 800ee06:	dcf2      	bgt.n	800edee <_printf_i+0x21e>
 800ee08:	e7eb      	b.n	800ede2 <_printf_i+0x212>
 800ee0a:	2500      	movs	r5, #0
 800ee0c:	f104 0619 	add.w	r6, r4, #25
 800ee10:	e7f5      	b.n	800edfe <_printf_i+0x22e>
 800ee12:	bf00      	nop
 800ee14:	0801272e 	.word	0x0801272e
 800ee18:	0801273f 	.word	0x0801273f

0800ee1c <quorem>:
 800ee1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee20:	6903      	ldr	r3, [r0, #16]
 800ee22:	690c      	ldr	r4, [r1, #16]
 800ee24:	42a3      	cmp	r3, r4
 800ee26:	4607      	mov	r7, r0
 800ee28:	f2c0 8081 	blt.w	800ef2e <quorem+0x112>
 800ee2c:	3c01      	subs	r4, #1
 800ee2e:	f101 0814 	add.w	r8, r1, #20
 800ee32:	f100 0514 	add.w	r5, r0, #20
 800ee36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee3a:	9301      	str	r3, [sp, #4]
 800ee3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee44:	3301      	adds	r3, #1
 800ee46:	429a      	cmp	r2, r3
 800ee48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ee4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ee50:	fbb2 f6f3 	udiv	r6, r2, r3
 800ee54:	d331      	bcc.n	800eeba <quorem+0x9e>
 800ee56:	f04f 0e00 	mov.w	lr, #0
 800ee5a:	4640      	mov	r0, r8
 800ee5c:	46ac      	mov	ip, r5
 800ee5e:	46f2      	mov	sl, lr
 800ee60:	f850 2b04 	ldr.w	r2, [r0], #4
 800ee64:	b293      	uxth	r3, r2
 800ee66:	fb06 e303 	mla	r3, r6, r3, lr
 800ee6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ee6e:	b29b      	uxth	r3, r3
 800ee70:	ebaa 0303 	sub.w	r3, sl, r3
 800ee74:	0c12      	lsrs	r2, r2, #16
 800ee76:	f8dc a000 	ldr.w	sl, [ip]
 800ee7a:	fb06 e202 	mla	r2, r6, r2, lr
 800ee7e:	fa13 f38a 	uxtah	r3, r3, sl
 800ee82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ee86:	fa1f fa82 	uxth.w	sl, r2
 800ee8a:	f8dc 2000 	ldr.w	r2, [ip]
 800ee8e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ee92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee9c:	4581      	cmp	r9, r0
 800ee9e:	f84c 3b04 	str.w	r3, [ip], #4
 800eea2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eea6:	d2db      	bcs.n	800ee60 <quorem+0x44>
 800eea8:	f855 300b 	ldr.w	r3, [r5, fp]
 800eeac:	b92b      	cbnz	r3, 800eeba <quorem+0x9e>
 800eeae:	9b01      	ldr	r3, [sp, #4]
 800eeb0:	3b04      	subs	r3, #4
 800eeb2:	429d      	cmp	r5, r3
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	d32e      	bcc.n	800ef16 <quorem+0xfa>
 800eeb8:	613c      	str	r4, [r7, #16]
 800eeba:	4638      	mov	r0, r7
 800eebc:	f001 f848 	bl	800ff50 <__mcmp>
 800eec0:	2800      	cmp	r0, #0
 800eec2:	db24      	blt.n	800ef0e <quorem+0xf2>
 800eec4:	3601      	adds	r6, #1
 800eec6:	4628      	mov	r0, r5
 800eec8:	f04f 0c00 	mov.w	ip, #0
 800eecc:	f858 2b04 	ldr.w	r2, [r8], #4
 800eed0:	f8d0 e000 	ldr.w	lr, [r0]
 800eed4:	b293      	uxth	r3, r2
 800eed6:	ebac 0303 	sub.w	r3, ip, r3
 800eeda:	0c12      	lsrs	r2, r2, #16
 800eedc:	fa13 f38e 	uxtah	r3, r3, lr
 800eee0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eee4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eeee:	45c1      	cmp	r9, r8
 800eef0:	f840 3b04 	str.w	r3, [r0], #4
 800eef4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eef8:	d2e8      	bcs.n	800eecc <quorem+0xb0>
 800eefa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eefe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef02:	b922      	cbnz	r2, 800ef0e <quorem+0xf2>
 800ef04:	3b04      	subs	r3, #4
 800ef06:	429d      	cmp	r5, r3
 800ef08:	461a      	mov	r2, r3
 800ef0a:	d30a      	bcc.n	800ef22 <quorem+0x106>
 800ef0c:	613c      	str	r4, [r7, #16]
 800ef0e:	4630      	mov	r0, r6
 800ef10:	b003      	add	sp, #12
 800ef12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef16:	6812      	ldr	r2, [r2, #0]
 800ef18:	3b04      	subs	r3, #4
 800ef1a:	2a00      	cmp	r2, #0
 800ef1c:	d1cc      	bne.n	800eeb8 <quorem+0x9c>
 800ef1e:	3c01      	subs	r4, #1
 800ef20:	e7c7      	b.n	800eeb2 <quorem+0x96>
 800ef22:	6812      	ldr	r2, [r2, #0]
 800ef24:	3b04      	subs	r3, #4
 800ef26:	2a00      	cmp	r2, #0
 800ef28:	d1f0      	bne.n	800ef0c <quorem+0xf0>
 800ef2a:	3c01      	subs	r4, #1
 800ef2c:	e7eb      	b.n	800ef06 <quorem+0xea>
 800ef2e:	2000      	movs	r0, #0
 800ef30:	e7ee      	b.n	800ef10 <quorem+0xf4>
 800ef32:	0000      	movs	r0, r0
 800ef34:	0000      	movs	r0, r0
	...

0800ef38 <_dtoa_r>:
 800ef38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef3c:	ec59 8b10 	vmov	r8, r9, d0
 800ef40:	b095      	sub	sp, #84	; 0x54
 800ef42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ef44:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800ef46:	9107      	str	r1, [sp, #28]
 800ef48:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ef4c:	4606      	mov	r6, r0
 800ef4e:	9209      	str	r2, [sp, #36]	; 0x24
 800ef50:	9310      	str	r3, [sp, #64]	; 0x40
 800ef52:	b975      	cbnz	r5, 800ef72 <_dtoa_r+0x3a>
 800ef54:	2010      	movs	r0, #16
 800ef56:	f000 fd75 	bl	800fa44 <malloc>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	6270      	str	r0, [r6, #36]	; 0x24
 800ef5e:	b920      	cbnz	r0, 800ef6a <_dtoa_r+0x32>
 800ef60:	4bab      	ldr	r3, [pc, #684]	; (800f210 <_dtoa_r+0x2d8>)
 800ef62:	21ea      	movs	r1, #234	; 0xea
 800ef64:	48ab      	ldr	r0, [pc, #684]	; (800f214 <_dtoa_r+0x2dc>)
 800ef66:	f001 f9bd 	bl	80102e4 <__assert_func>
 800ef6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ef6e:	6005      	str	r5, [r0, #0]
 800ef70:	60c5      	str	r5, [r0, #12]
 800ef72:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ef74:	6819      	ldr	r1, [r3, #0]
 800ef76:	b151      	cbz	r1, 800ef8e <_dtoa_r+0x56>
 800ef78:	685a      	ldr	r2, [r3, #4]
 800ef7a:	604a      	str	r2, [r1, #4]
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	4093      	lsls	r3, r2
 800ef80:	608b      	str	r3, [r1, #8]
 800ef82:	4630      	mov	r0, r6
 800ef84:	f000 fda6 	bl	800fad4 <_Bfree>
 800ef88:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	601a      	str	r2, [r3, #0]
 800ef8e:	f1b9 0300 	subs.w	r3, r9, #0
 800ef92:	bfbb      	ittet	lt
 800ef94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ef98:	9303      	strlt	r3, [sp, #12]
 800ef9a:	2300      	movge	r3, #0
 800ef9c:	2201      	movlt	r2, #1
 800ef9e:	bfac      	ite	ge
 800efa0:	6023      	strge	r3, [r4, #0]
 800efa2:	6022      	strlt	r2, [r4, #0]
 800efa4:	4b9c      	ldr	r3, [pc, #624]	; (800f218 <_dtoa_r+0x2e0>)
 800efa6:	9c03      	ldr	r4, [sp, #12]
 800efa8:	43a3      	bics	r3, r4
 800efaa:	d11a      	bne.n	800efe2 <_dtoa_r+0xaa>
 800efac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800efae:	f242 730f 	movw	r3, #9999	; 0x270f
 800efb2:	6013      	str	r3, [r2, #0]
 800efb4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800efb8:	ea53 0308 	orrs.w	r3, r3, r8
 800efbc:	f000 8512 	beq.w	800f9e4 <_dtoa_r+0xaac>
 800efc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800efc2:	b953      	cbnz	r3, 800efda <_dtoa_r+0xa2>
 800efc4:	4b95      	ldr	r3, [pc, #596]	; (800f21c <_dtoa_r+0x2e4>)
 800efc6:	e01f      	b.n	800f008 <_dtoa_r+0xd0>
 800efc8:	4b95      	ldr	r3, [pc, #596]	; (800f220 <_dtoa_r+0x2e8>)
 800efca:	9300      	str	r3, [sp, #0]
 800efcc:	3308      	adds	r3, #8
 800efce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800efd0:	6013      	str	r3, [r2, #0]
 800efd2:	9800      	ldr	r0, [sp, #0]
 800efd4:	b015      	add	sp, #84	; 0x54
 800efd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efda:	4b90      	ldr	r3, [pc, #576]	; (800f21c <_dtoa_r+0x2e4>)
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	3303      	adds	r3, #3
 800efe0:	e7f5      	b.n	800efce <_dtoa_r+0x96>
 800efe2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800efe6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800efea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800eff2:	d10b      	bne.n	800f00c <_dtoa_r+0xd4>
 800eff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eff6:	2301      	movs	r3, #1
 800eff8:	6013      	str	r3, [r2, #0]
 800effa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800effc:	2b00      	cmp	r3, #0
 800effe:	f000 84ee 	beq.w	800f9de <_dtoa_r+0xaa6>
 800f002:	4888      	ldr	r0, [pc, #544]	; (800f224 <_dtoa_r+0x2ec>)
 800f004:	6018      	str	r0, [r3, #0]
 800f006:	1e43      	subs	r3, r0, #1
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	e7e2      	b.n	800efd2 <_dtoa_r+0x9a>
 800f00c:	a913      	add	r1, sp, #76	; 0x4c
 800f00e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f012:	aa12      	add	r2, sp, #72	; 0x48
 800f014:	4630      	mov	r0, r6
 800f016:	f001 f83f 	bl	8010098 <__d2b>
 800f01a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f01e:	4605      	mov	r5, r0
 800f020:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f022:	2900      	cmp	r1, #0
 800f024:	d047      	beq.n	800f0b6 <_dtoa_r+0x17e>
 800f026:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f028:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f02c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f030:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f034:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f038:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f03c:	2400      	movs	r4, #0
 800f03e:	ec43 2b16 	vmov	d6, r2, r3
 800f042:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f046:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800f1f8 <_dtoa_r+0x2c0>
 800f04a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f04e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800f200 <_dtoa_r+0x2c8>
 800f052:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f056:	eeb0 7b46 	vmov.f64	d7, d6
 800f05a:	ee06 1a90 	vmov	s13, r1
 800f05e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800f062:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800f208 <_dtoa_r+0x2d0>
 800f066:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f06a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f06e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f076:	ee16 ba90 	vmov	fp, s13
 800f07a:	9411      	str	r4, [sp, #68]	; 0x44
 800f07c:	d508      	bpl.n	800f090 <_dtoa_r+0x158>
 800f07e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f082:	eeb4 6b47 	vcmp.f64	d6, d7
 800f086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f08a:	bf18      	it	ne
 800f08c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f090:	f1bb 0f16 	cmp.w	fp, #22
 800f094:	d832      	bhi.n	800f0fc <_dtoa_r+0x1c4>
 800f096:	4b64      	ldr	r3, [pc, #400]	; (800f228 <_dtoa_r+0x2f0>)
 800f098:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f09c:	ed93 7b00 	vldr	d7, [r3]
 800f0a0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f0a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ac:	d501      	bpl.n	800f0b2 <_dtoa_r+0x17a>
 800f0ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	e023      	b.n	800f0fe <_dtoa_r+0x1c6>
 800f0b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f0b8:	4401      	add	r1, r0
 800f0ba:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f0be:	2b20      	cmp	r3, #32
 800f0c0:	bfc3      	ittte	gt
 800f0c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f0c6:	fa04 f303 	lslgt.w	r3, r4, r3
 800f0ca:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f0ce:	f1c3 0320 	rsble	r3, r3, #32
 800f0d2:	bfc6      	itte	gt
 800f0d4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f0d8:	ea43 0308 	orrgt.w	r3, r3, r8
 800f0dc:	fa08 f303 	lslle.w	r3, r8, r3
 800f0e0:	ee07 3a90 	vmov	s15, r3
 800f0e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f0e8:	3901      	subs	r1, #1
 800f0ea:	ed8d 7b00 	vstr	d7, [sp]
 800f0ee:	9c01      	ldr	r4, [sp, #4]
 800f0f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0f4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f0f8:	2401      	movs	r4, #1
 800f0fa:	e7a0      	b.n	800f03e <_dtoa_r+0x106>
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800f100:	1a43      	subs	r3, r0, r1
 800f102:	1e5a      	subs	r2, r3, #1
 800f104:	bf45      	ittet	mi
 800f106:	f1c3 0301 	rsbmi	r3, r3, #1
 800f10a:	9305      	strmi	r3, [sp, #20]
 800f10c:	2300      	movpl	r3, #0
 800f10e:	2300      	movmi	r3, #0
 800f110:	9206      	str	r2, [sp, #24]
 800f112:	bf54      	ite	pl
 800f114:	9305      	strpl	r3, [sp, #20]
 800f116:	9306      	strmi	r3, [sp, #24]
 800f118:	f1bb 0f00 	cmp.w	fp, #0
 800f11c:	db18      	blt.n	800f150 <_dtoa_r+0x218>
 800f11e:	9b06      	ldr	r3, [sp, #24]
 800f120:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800f124:	445b      	add	r3, fp
 800f126:	9306      	str	r3, [sp, #24]
 800f128:	2300      	movs	r3, #0
 800f12a:	9a07      	ldr	r2, [sp, #28]
 800f12c:	2a09      	cmp	r2, #9
 800f12e:	d849      	bhi.n	800f1c4 <_dtoa_r+0x28c>
 800f130:	2a05      	cmp	r2, #5
 800f132:	bfc4      	itt	gt
 800f134:	3a04      	subgt	r2, #4
 800f136:	9207      	strgt	r2, [sp, #28]
 800f138:	9a07      	ldr	r2, [sp, #28]
 800f13a:	f1a2 0202 	sub.w	r2, r2, #2
 800f13e:	bfcc      	ite	gt
 800f140:	2400      	movgt	r4, #0
 800f142:	2401      	movle	r4, #1
 800f144:	2a03      	cmp	r2, #3
 800f146:	d848      	bhi.n	800f1da <_dtoa_r+0x2a2>
 800f148:	e8df f002 	tbb	[pc, r2]
 800f14c:	3a2c2e0b 	.word	0x3a2c2e0b
 800f150:	9b05      	ldr	r3, [sp, #20]
 800f152:	2200      	movs	r2, #0
 800f154:	eba3 030b 	sub.w	r3, r3, fp
 800f158:	9305      	str	r3, [sp, #20]
 800f15a:	920e      	str	r2, [sp, #56]	; 0x38
 800f15c:	f1cb 0300 	rsb	r3, fp, #0
 800f160:	e7e3      	b.n	800f12a <_dtoa_r+0x1f2>
 800f162:	2200      	movs	r2, #0
 800f164:	9208      	str	r2, [sp, #32]
 800f166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f168:	2a00      	cmp	r2, #0
 800f16a:	dc39      	bgt.n	800f1e0 <_dtoa_r+0x2a8>
 800f16c:	f04f 0a01 	mov.w	sl, #1
 800f170:	46d1      	mov	r9, sl
 800f172:	4652      	mov	r2, sl
 800f174:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f178:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f17a:	2100      	movs	r1, #0
 800f17c:	6079      	str	r1, [r7, #4]
 800f17e:	2004      	movs	r0, #4
 800f180:	f100 0c14 	add.w	ip, r0, #20
 800f184:	4594      	cmp	ip, r2
 800f186:	6879      	ldr	r1, [r7, #4]
 800f188:	d92f      	bls.n	800f1ea <_dtoa_r+0x2b2>
 800f18a:	4630      	mov	r0, r6
 800f18c:	930c      	str	r3, [sp, #48]	; 0x30
 800f18e:	f000 fc61 	bl	800fa54 <_Balloc>
 800f192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f194:	9000      	str	r0, [sp, #0]
 800f196:	4602      	mov	r2, r0
 800f198:	2800      	cmp	r0, #0
 800f19a:	d149      	bne.n	800f230 <_dtoa_r+0x2f8>
 800f19c:	4b23      	ldr	r3, [pc, #140]	; (800f22c <_dtoa_r+0x2f4>)
 800f19e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f1a2:	e6df      	b.n	800ef64 <_dtoa_r+0x2c>
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	e7dd      	b.n	800f164 <_dtoa_r+0x22c>
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	9208      	str	r2, [sp, #32]
 800f1ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1ae:	eb0b 0a02 	add.w	sl, fp, r2
 800f1b2:	f10a 0901 	add.w	r9, sl, #1
 800f1b6:	464a      	mov	r2, r9
 800f1b8:	2a01      	cmp	r2, #1
 800f1ba:	bfb8      	it	lt
 800f1bc:	2201      	movlt	r2, #1
 800f1be:	e7db      	b.n	800f178 <_dtoa_r+0x240>
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	e7f2      	b.n	800f1aa <_dtoa_r+0x272>
 800f1c4:	2401      	movs	r4, #1
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f1cc:	f04f 3aff 	mov.w	sl, #4294967295
 800f1d0:	2100      	movs	r1, #0
 800f1d2:	46d1      	mov	r9, sl
 800f1d4:	2212      	movs	r2, #18
 800f1d6:	9109      	str	r1, [sp, #36]	; 0x24
 800f1d8:	e7ce      	b.n	800f178 <_dtoa_r+0x240>
 800f1da:	2201      	movs	r2, #1
 800f1dc:	9208      	str	r2, [sp, #32]
 800f1de:	e7f5      	b.n	800f1cc <_dtoa_r+0x294>
 800f1e0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f1e4:	46d1      	mov	r9, sl
 800f1e6:	4652      	mov	r2, sl
 800f1e8:	e7c6      	b.n	800f178 <_dtoa_r+0x240>
 800f1ea:	3101      	adds	r1, #1
 800f1ec:	6079      	str	r1, [r7, #4]
 800f1ee:	0040      	lsls	r0, r0, #1
 800f1f0:	e7c6      	b.n	800f180 <_dtoa_r+0x248>
 800f1f2:	bf00      	nop
 800f1f4:	f3af 8000 	nop.w
 800f1f8:	636f4361 	.word	0x636f4361
 800f1fc:	3fd287a7 	.word	0x3fd287a7
 800f200:	8b60c8b3 	.word	0x8b60c8b3
 800f204:	3fc68a28 	.word	0x3fc68a28
 800f208:	509f79fb 	.word	0x509f79fb
 800f20c:	3fd34413 	.word	0x3fd34413
 800f210:	0801275d 	.word	0x0801275d
 800f214:	08012774 	.word	0x08012774
 800f218:	7ff00000 	.word	0x7ff00000
 800f21c:	08012759 	.word	0x08012759
 800f220:	08012750 	.word	0x08012750
 800f224:	0801272d 	.word	0x0801272d
 800f228:	08012870 	.word	0x08012870
 800f22c:	080127d3 	.word	0x080127d3
 800f230:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f232:	9900      	ldr	r1, [sp, #0]
 800f234:	6011      	str	r1, [r2, #0]
 800f236:	f1b9 0f0e 	cmp.w	r9, #14
 800f23a:	d872      	bhi.n	800f322 <_dtoa_r+0x3ea>
 800f23c:	2c00      	cmp	r4, #0
 800f23e:	d070      	beq.n	800f322 <_dtoa_r+0x3ea>
 800f240:	f1bb 0f00 	cmp.w	fp, #0
 800f244:	f340 80a6 	ble.w	800f394 <_dtoa_r+0x45c>
 800f248:	49ca      	ldr	r1, [pc, #808]	; (800f574 <_dtoa_r+0x63c>)
 800f24a:	f00b 020f 	and.w	r2, fp, #15
 800f24e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f252:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f256:	ed92 7b00 	vldr	d7, [r2]
 800f25a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f25e:	f000 808d 	beq.w	800f37c <_dtoa_r+0x444>
 800f262:	4ac5      	ldr	r2, [pc, #788]	; (800f578 <_dtoa_r+0x640>)
 800f264:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f268:	ed92 6b08 	vldr	d6, [r2, #32]
 800f26c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800f270:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f274:	f001 010f 	and.w	r1, r1, #15
 800f278:	2203      	movs	r2, #3
 800f27a:	48bf      	ldr	r0, [pc, #764]	; (800f578 <_dtoa_r+0x640>)
 800f27c:	2900      	cmp	r1, #0
 800f27e:	d17f      	bne.n	800f380 <_dtoa_r+0x448>
 800f280:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f284:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f288:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f28c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f28e:	2900      	cmp	r1, #0
 800f290:	f000 80b2 	beq.w	800f3f8 <_dtoa_r+0x4c0>
 800f294:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f298:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f29c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2a4:	f140 80a8 	bpl.w	800f3f8 <_dtoa_r+0x4c0>
 800f2a8:	f1b9 0f00 	cmp.w	r9, #0
 800f2ac:	f000 80a4 	beq.w	800f3f8 <_dtoa_r+0x4c0>
 800f2b0:	f1ba 0f00 	cmp.w	sl, #0
 800f2b4:	dd31      	ble.n	800f31a <_dtoa_r+0x3e2>
 800f2b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f2ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f2be:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f2c2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f2c6:	3201      	adds	r2, #1
 800f2c8:	4650      	mov	r0, sl
 800f2ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f2ce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f2d2:	ee07 2a90 	vmov	s15, r2
 800f2d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f2da:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f2de:	ed8d 5b02 	vstr	d5, [sp, #8]
 800f2e2:	9c03      	ldr	r4, [sp, #12]
 800f2e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f2e8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	f040 8086 	bne.w	800f3fe <_dtoa_r+0x4c6>
 800f2f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f2f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f2fa:	ec42 1b17 	vmov	d7, r1, r2
 800f2fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f306:	f300 8272 	bgt.w	800f7ee <_dtoa_r+0x8b6>
 800f30a:	eeb1 7b47 	vneg.f64	d7, d7
 800f30e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f316:	f100 8267 	bmi.w	800f7e8 <_dtoa_r+0x8b0>
 800f31a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800f31e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800f322:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f324:	2a00      	cmp	r2, #0
 800f326:	f2c0 8129 	blt.w	800f57c <_dtoa_r+0x644>
 800f32a:	f1bb 0f0e 	cmp.w	fp, #14
 800f32e:	f300 8125 	bgt.w	800f57c <_dtoa_r+0x644>
 800f332:	4b90      	ldr	r3, [pc, #576]	; (800f574 <_dtoa_r+0x63c>)
 800f334:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f338:	ed93 6b00 	vldr	d6, [r3]
 800f33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f33e:	2b00      	cmp	r3, #0
 800f340:	f280 80c3 	bge.w	800f4ca <_dtoa_r+0x592>
 800f344:	f1b9 0f00 	cmp.w	r9, #0
 800f348:	f300 80bf 	bgt.w	800f4ca <_dtoa_r+0x592>
 800f34c:	f040 824c 	bne.w	800f7e8 <_dtoa_r+0x8b0>
 800f350:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f354:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f358:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f35c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f364:	464c      	mov	r4, r9
 800f366:	464f      	mov	r7, r9
 800f368:	f280 8222 	bge.w	800f7b0 <_dtoa_r+0x878>
 800f36c:	f8dd 8000 	ldr.w	r8, [sp]
 800f370:	2331      	movs	r3, #49	; 0x31
 800f372:	f808 3b01 	strb.w	r3, [r8], #1
 800f376:	f10b 0b01 	add.w	fp, fp, #1
 800f37a:	e21e      	b.n	800f7ba <_dtoa_r+0x882>
 800f37c:	2202      	movs	r2, #2
 800f37e:	e77c      	b.n	800f27a <_dtoa_r+0x342>
 800f380:	07cc      	lsls	r4, r1, #31
 800f382:	d504      	bpl.n	800f38e <_dtoa_r+0x456>
 800f384:	ed90 6b00 	vldr	d6, [r0]
 800f388:	3201      	adds	r2, #1
 800f38a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f38e:	1049      	asrs	r1, r1, #1
 800f390:	3008      	adds	r0, #8
 800f392:	e773      	b.n	800f27c <_dtoa_r+0x344>
 800f394:	d02e      	beq.n	800f3f4 <_dtoa_r+0x4bc>
 800f396:	f1cb 0100 	rsb	r1, fp, #0
 800f39a:	4a76      	ldr	r2, [pc, #472]	; (800f574 <_dtoa_r+0x63c>)
 800f39c:	f001 000f 	and.w	r0, r1, #15
 800f3a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f3a4:	ed92 7b00 	vldr	d7, [r2]
 800f3a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f3ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f3b0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f3b4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800f3b8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f3bc:	486e      	ldr	r0, [pc, #440]	; (800f578 <_dtoa_r+0x640>)
 800f3be:	1109      	asrs	r1, r1, #4
 800f3c0:	2400      	movs	r4, #0
 800f3c2:	2202      	movs	r2, #2
 800f3c4:	b939      	cbnz	r1, 800f3d6 <_dtoa_r+0x49e>
 800f3c6:	2c00      	cmp	r4, #0
 800f3c8:	f43f af60 	beq.w	800f28c <_dtoa_r+0x354>
 800f3cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f3d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3d4:	e75a      	b.n	800f28c <_dtoa_r+0x354>
 800f3d6:	07cf      	lsls	r7, r1, #31
 800f3d8:	d509      	bpl.n	800f3ee <_dtoa_r+0x4b6>
 800f3da:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800f3de:	ed90 7b00 	vldr	d7, [r0]
 800f3e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f3e6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f3ea:	3201      	adds	r2, #1
 800f3ec:	2401      	movs	r4, #1
 800f3ee:	1049      	asrs	r1, r1, #1
 800f3f0:	3008      	adds	r0, #8
 800f3f2:	e7e7      	b.n	800f3c4 <_dtoa_r+0x48c>
 800f3f4:	2202      	movs	r2, #2
 800f3f6:	e749      	b.n	800f28c <_dtoa_r+0x354>
 800f3f8:	465f      	mov	r7, fp
 800f3fa:	4648      	mov	r0, r9
 800f3fc:	e765      	b.n	800f2ca <_dtoa_r+0x392>
 800f3fe:	ec42 1b17 	vmov	d7, r1, r2
 800f402:	4a5c      	ldr	r2, [pc, #368]	; (800f574 <_dtoa_r+0x63c>)
 800f404:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f408:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f40c:	9a00      	ldr	r2, [sp, #0]
 800f40e:	1814      	adds	r4, r2, r0
 800f410:	9a08      	ldr	r2, [sp, #32]
 800f412:	b352      	cbz	r2, 800f46a <_dtoa_r+0x532>
 800f414:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f418:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f41c:	f8dd 8000 	ldr.w	r8, [sp]
 800f420:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f424:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f428:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f42c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f430:	ee14 2a90 	vmov	r2, s9
 800f434:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f438:	3230      	adds	r2, #48	; 0x30
 800f43a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f43e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f446:	f808 2b01 	strb.w	r2, [r8], #1
 800f44a:	d439      	bmi.n	800f4c0 <_dtoa_r+0x588>
 800f44c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f450:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f458:	d472      	bmi.n	800f540 <_dtoa_r+0x608>
 800f45a:	45a0      	cmp	r8, r4
 800f45c:	f43f af5d 	beq.w	800f31a <_dtoa_r+0x3e2>
 800f460:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f464:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f468:	e7e0      	b.n	800f42c <_dtoa_r+0x4f4>
 800f46a:	f8dd 8000 	ldr.w	r8, [sp]
 800f46e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f472:	4621      	mov	r1, r4
 800f474:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f478:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f47c:	ee14 2a90 	vmov	r2, s9
 800f480:	3230      	adds	r2, #48	; 0x30
 800f482:	f808 2b01 	strb.w	r2, [r8], #1
 800f486:	45a0      	cmp	r8, r4
 800f488:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f48c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f490:	d118      	bne.n	800f4c4 <_dtoa_r+0x58c>
 800f492:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f496:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f49a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4a2:	dc4d      	bgt.n	800f540 <_dtoa_r+0x608>
 800f4a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f4a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b0:	f57f af33 	bpl.w	800f31a <_dtoa_r+0x3e2>
 800f4b4:	4688      	mov	r8, r1
 800f4b6:	3901      	subs	r1, #1
 800f4b8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f4bc:	2b30      	cmp	r3, #48	; 0x30
 800f4be:	d0f9      	beq.n	800f4b4 <_dtoa_r+0x57c>
 800f4c0:	46bb      	mov	fp, r7
 800f4c2:	e02a      	b.n	800f51a <_dtoa_r+0x5e2>
 800f4c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f4c8:	e7d6      	b.n	800f478 <_dtoa_r+0x540>
 800f4ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4ce:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f4d2:	f8dd 8000 	ldr.w	r8, [sp]
 800f4d6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f4da:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f4de:	ee15 3a10 	vmov	r3, s10
 800f4e2:	3330      	adds	r3, #48	; 0x30
 800f4e4:	f808 3b01 	strb.w	r3, [r8], #1
 800f4e8:	9b00      	ldr	r3, [sp, #0]
 800f4ea:	eba8 0303 	sub.w	r3, r8, r3
 800f4ee:	4599      	cmp	r9, r3
 800f4f0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f4f4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f4f8:	d133      	bne.n	800f562 <_dtoa_r+0x62a>
 800f4fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f4fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f506:	dc1a      	bgt.n	800f53e <_dtoa_r+0x606>
 800f508:	eeb4 7b46 	vcmp.f64	d7, d6
 800f50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f510:	d103      	bne.n	800f51a <_dtoa_r+0x5e2>
 800f512:	ee15 3a10 	vmov	r3, s10
 800f516:	07d9      	lsls	r1, r3, #31
 800f518:	d411      	bmi.n	800f53e <_dtoa_r+0x606>
 800f51a:	4629      	mov	r1, r5
 800f51c:	4630      	mov	r0, r6
 800f51e:	f000 fad9 	bl	800fad4 <_Bfree>
 800f522:	2300      	movs	r3, #0
 800f524:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f526:	f888 3000 	strb.w	r3, [r8]
 800f52a:	f10b 0301 	add.w	r3, fp, #1
 800f52e:	6013      	str	r3, [r2, #0]
 800f530:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f532:	2b00      	cmp	r3, #0
 800f534:	f43f ad4d 	beq.w	800efd2 <_dtoa_r+0x9a>
 800f538:	f8c3 8000 	str.w	r8, [r3]
 800f53c:	e549      	b.n	800efd2 <_dtoa_r+0x9a>
 800f53e:	465f      	mov	r7, fp
 800f540:	4643      	mov	r3, r8
 800f542:	4698      	mov	r8, r3
 800f544:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f548:	2a39      	cmp	r2, #57	; 0x39
 800f54a:	d106      	bne.n	800f55a <_dtoa_r+0x622>
 800f54c:	9a00      	ldr	r2, [sp, #0]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d1f7      	bne.n	800f542 <_dtoa_r+0x60a>
 800f552:	9900      	ldr	r1, [sp, #0]
 800f554:	2230      	movs	r2, #48	; 0x30
 800f556:	3701      	adds	r7, #1
 800f558:	700a      	strb	r2, [r1, #0]
 800f55a:	781a      	ldrb	r2, [r3, #0]
 800f55c:	3201      	adds	r2, #1
 800f55e:	701a      	strb	r2, [r3, #0]
 800f560:	e7ae      	b.n	800f4c0 <_dtoa_r+0x588>
 800f562:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f566:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f56e:	d1b2      	bne.n	800f4d6 <_dtoa_r+0x59e>
 800f570:	e7d3      	b.n	800f51a <_dtoa_r+0x5e2>
 800f572:	bf00      	nop
 800f574:	08012870 	.word	0x08012870
 800f578:	08012848 	.word	0x08012848
 800f57c:	9908      	ldr	r1, [sp, #32]
 800f57e:	2900      	cmp	r1, #0
 800f580:	f000 80d1 	beq.w	800f726 <_dtoa_r+0x7ee>
 800f584:	9907      	ldr	r1, [sp, #28]
 800f586:	2901      	cmp	r1, #1
 800f588:	f300 80b4 	bgt.w	800f6f4 <_dtoa_r+0x7bc>
 800f58c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f58e:	2900      	cmp	r1, #0
 800f590:	f000 80ac 	beq.w	800f6ec <_dtoa_r+0x7b4>
 800f594:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f598:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f59c:	461c      	mov	r4, r3
 800f59e:	930a      	str	r3, [sp, #40]	; 0x28
 800f5a0:	9b05      	ldr	r3, [sp, #20]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	9305      	str	r3, [sp, #20]
 800f5a6:	9b06      	ldr	r3, [sp, #24]
 800f5a8:	2101      	movs	r1, #1
 800f5aa:	4413      	add	r3, r2
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	9306      	str	r3, [sp, #24]
 800f5b0:	f000 fb4c 	bl	800fc4c <__i2b>
 800f5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5b6:	4607      	mov	r7, r0
 800f5b8:	f1b8 0f00 	cmp.w	r8, #0
 800f5bc:	dd0d      	ble.n	800f5da <_dtoa_r+0x6a2>
 800f5be:	9a06      	ldr	r2, [sp, #24]
 800f5c0:	2a00      	cmp	r2, #0
 800f5c2:	dd0a      	ble.n	800f5da <_dtoa_r+0x6a2>
 800f5c4:	4542      	cmp	r2, r8
 800f5c6:	9905      	ldr	r1, [sp, #20]
 800f5c8:	bfa8      	it	ge
 800f5ca:	4642      	movge	r2, r8
 800f5cc:	1a89      	subs	r1, r1, r2
 800f5ce:	9105      	str	r1, [sp, #20]
 800f5d0:	9906      	ldr	r1, [sp, #24]
 800f5d2:	eba8 0802 	sub.w	r8, r8, r2
 800f5d6:	1a8a      	subs	r2, r1, r2
 800f5d8:	9206      	str	r2, [sp, #24]
 800f5da:	b303      	cbz	r3, 800f61e <_dtoa_r+0x6e6>
 800f5dc:	9a08      	ldr	r2, [sp, #32]
 800f5de:	2a00      	cmp	r2, #0
 800f5e0:	f000 80a6 	beq.w	800f730 <_dtoa_r+0x7f8>
 800f5e4:	2c00      	cmp	r4, #0
 800f5e6:	dd13      	ble.n	800f610 <_dtoa_r+0x6d8>
 800f5e8:	4639      	mov	r1, r7
 800f5ea:	4622      	mov	r2, r4
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	930c      	str	r3, [sp, #48]	; 0x30
 800f5f0:	f000 fbe8 	bl	800fdc4 <__pow5mult>
 800f5f4:	462a      	mov	r2, r5
 800f5f6:	4601      	mov	r1, r0
 800f5f8:	4607      	mov	r7, r0
 800f5fa:	4630      	mov	r0, r6
 800f5fc:	f000 fb3c 	bl	800fc78 <__multiply>
 800f600:	4629      	mov	r1, r5
 800f602:	900a      	str	r0, [sp, #40]	; 0x28
 800f604:	4630      	mov	r0, r6
 800f606:	f000 fa65 	bl	800fad4 <_Bfree>
 800f60a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f60c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f60e:	4615      	mov	r5, r2
 800f610:	1b1a      	subs	r2, r3, r4
 800f612:	d004      	beq.n	800f61e <_dtoa_r+0x6e6>
 800f614:	4629      	mov	r1, r5
 800f616:	4630      	mov	r0, r6
 800f618:	f000 fbd4 	bl	800fdc4 <__pow5mult>
 800f61c:	4605      	mov	r5, r0
 800f61e:	2101      	movs	r1, #1
 800f620:	4630      	mov	r0, r6
 800f622:	f000 fb13 	bl	800fc4c <__i2b>
 800f626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f628:	2b00      	cmp	r3, #0
 800f62a:	4604      	mov	r4, r0
 800f62c:	f340 8082 	ble.w	800f734 <_dtoa_r+0x7fc>
 800f630:	461a      	mov	r2, r3
 800f632:	4601      	mov	r1, r0
 800f634:	4630      	mov	r0, r6
 800f636:	f000 fbc5 	bl	800fdc4 <__pow5mult>
 800f63a:	9b07      	ldr	r3, [sp, #28]
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	4604      	mov	r4, r0
 800f640:	dd7b      	ble.n	800f73a <_dtoa_r+0x802>
 800f642:	2300      	movs	r3, #0
 800f644:	930a      	str	r3, [sp, #40]	; 0x28
 800f646:	6922      	ldr	r2, [r4, #16]
 800f648:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f64c:	6910      	ldr	r0, [r2, #16]
 800f64e:	f000 faad 	bl	800fbac <__hi0bits>
 800f652:	f1c0 0020 	rsb	r0, r0, #32
 800f656:	9b06      	ldr	r3, [sp, #24]
 800f658:	4418      	add	r0, r3
 800f65a:	f010 001f 	ands.w	r0, r0, #31
 800f65e:	f000 808d 	beq.w	800f77c <_dtoa_r+0x844>
 800f662:	f1c0 0220 	rsb	r2, r0, #32
 800f666:	2a04      	cmp	r2, #4
 800f668:	f340 8086 	ble.w	800f778 <_dtoa_r+0x840>
 800f66c:	f1c0 001c 	rsb	r0, r0, #28
 800f670:	9b05      	ldr	r3, [sp, #20]
 800f672:	4403      	add	r3, r0
 800f674:	9305      	str	r3, [sp, #20]
 800f676:	9b06      	ldr	r3, [sp, #24]
 800f678:	4403      	add	r3, r0
 800f67a:	4480      	add	r8, r0
 800f67c:	9306      	str	r3, [sp, #24]
 800f67e:	9b05      	ldr	r3, [sp, #20]
 800f680:	2b00      	cmp	r3, #0
 800f682:	dd05      	ble.n	800f690 <_dtoa_r+0x758>
 800f684:	4629      	mov	r1, r5
 800f686:	461a      	mov	r2, r3
 800f688:	4630      	mov	r0, r6
 800f68a:	f000 fbf5 	bl	800fe78 <__lshift>
 800f68e:	4605      	mov	r5, r0
 800f690:	9b06      	ldr	r3, [sp, #24]
 800f692:	2b00      	cmp	r3, #0
 800f694:	dd05      	ble.n	800f6a2 <_dtoa_r+0x76a>
 800f696:	4621      	mov	r1, r4
 800f698:	461a      	mov	r2, r3
 800f69a:	4630      	mov	r0, r6
 800f69c:	f000 fbec 	bl	800fe78 <__lshift>
 800f6a0:	4604      	mov	r4, r0
 800f6a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d06b      	beq.n	800f780 <_dtoa_r+0x848>
 800f6a8:	4621      	mov	r1, r4
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	f000 fc50 	bl	800ff50 <__mcmp>
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	da65      	bge.n	800f780 <_dtoa_r+0x848>
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	4629      	mov	r1, r5
 800f6b8:	220a      	movs	r2, #10
 800f6ba:	4630      	mov	r0, r6
 800f6bc:	f000 fa2c 	bl	800fb18 <__multadd>
 800f6c0:	9b08      	ldr	r3, [sp, #32]
 800f6c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	f000 8192 	beq.w	800f9f2 <_dtoa_r+0xaba>
 800f6ce:	4639      	mov	r1, r7
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	220a      	movs	r2, #10
 800f6d4:	4630      	mov	r0, r6
 800f6d6:	f000 fa1f 	bl	800fb18 <__multadd>
 800f6da:	f1ba 0f00 	cmp.w	sl, #0
 800f6de:	4607      	mov	r7, r0
 800f6e0:	f300 808e 	bgt.w	800f800 <_dtoa_r+0x8c8>
 800f6e4:	9b07      	ldr	r3, [sp, #28]
 800f6e6:	2b02      	cmp	r3, #2
 800f6e8:	dc51      	bgt.n	800f78e <_dtoa_r+0x856>
 800f6ea:	e089      	b.n	800f800 <_dtoa_r+0x8c8>
 800f6ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f6ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f6f2:	e751      	b.n	800f598 <_dtoa_r+0x660>
 800f6f4:	f109 34ff 	add.w	r4, r9, #4294967295
 800f6f8:	42a3      	cmp	r3, r4
 800f6fa:	bfbf      	itttt	lt
 800f6fc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800f6fe:	1ae3      	sublt	r3, r4, r3
 800f700:	18d2      	addlt	r2, r2, r3
 800f702:	4613      	movlt	r3, r2
 800f704:	bfb7      	itett	lt
 800f706:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f708:	1b1c      	subge	r4, r3, r4
 800f70a:	4623      	movlt	r3, r4
 800f70c:	2400      	movlt	r4, #0
 800f70e:	f1b9 0f00 	cmp.w	r9, #0
 800f712:	bfb5      	itete	lt
 800f714:	9a05      	ldrlt	r2, [sp, #20]
 800f716:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800f71a:	eba2 0809 	sublt.w	r8, r2, r9
 800f71e:	464a      	movge	r2, r9
 800f720:	bfb8      	it	lt
 800f722:	2200      	movlt	r2, #0
 800f724:	e73b      	b.n	800f59e <_dtoa_r+0x666>
 800f726:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f72a:	9f08      	ldr	r7, [sp, #32]
 800f72c:	461c      	mov	r4, r3
 800f72e:	e743      	b.n	800f5b8 <_dtoa_r+0x680>
 800f730:	461a      	mov	r2, r3
 800f732:	e76f      	b.n	800f614 <_dtoa_r+0x6dc>
 800f734:	9b07      	ldr	r3, [sp, #28]
 800f736:	2b01      	cmp	r3, #1
 800f738:	dc18      	bgt.n	800f76c <_dtoa_r+0x834>
 800f73a:	9b02      	ldr	r3, [sp, #8]
 800f73c:	b9b3      	cbnz	r3, 800f76c <_dtoa_r+0x834>
 800f73e:	9b03      	ldr	r3, [sp, #12]
 800f740:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f744:	b9a2      	cbnz	r2, 800f770 <_dtoa_r+0x838>
 800f746:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f74a:	0d12      	lsrs	r2, r2, #20
 800f74c:	0512      	lsls	r2, r2, #20
 800f74e:	b18a      	cbz	r2, 800f774 <_dtoa_r+0x83c>
 800f750:	9b05      	ldr	r3, [sp, #20]
 800f752:	3301      	adds	r3, #1
 800f754:	9305      	str	r3, [sp, #20]
 800f756:	9b06      	ldr	r3, [sp, #24]
 800f758:	3301      	adds	r3, #1
 800f75a:	9306      	str	r3, [sp, #24]
 800f75c:	2301      	movs	r3, #1
 800f75e:	930a      	str	r3, [sp, #40]	; 0x28
 800f760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f762:	2b00      	cmp	r3, #0
 800f764:	f47f af6f 	bne.w	800f646 <_dtoa_r+0x70e>
 800f768:	2001      	movs	r0, #1
 800f76a:	e774      	b.n	800f656 <_dtoa_r+0x71e>
 800f76c:	2300      	movs	r3, #0
 800f76e:	e7f6      	b.n	800f75e <_dtoa_r+0x826>
 800f770:	9b02      	ldr	r3, [sp, #8]
 800f772:	e7f4      	b.n	800f75e <_dtoa_r+0x826>
 800f774:	920a      	str	r2, [sp, #40]	; 0x28
 800f776:	e7f3      	b.n	800f760 <_dtoa_r+0x828>
 800f778:	d081      	beq.n	800f67e <_dtoa_r+0x746>
 800f77a:	4610      	mov	r0, r2
 800f77c:	301c      	adds	r0, #28
 800f77e:	e777      	b.n	800f670 <_dtoa_r+0x738>
 800f780:	f1b9 0f00 	cmp.w	r9, #0
 800f784:	dc37      	bgt.n	800f7f6 <_dtoa_r+0x8be>
 800f786:	9b07      	ldr	r3, [sp, #28]
 800f788:	2b02      	cmp	r3, #2
 800f78a:	dd34      	ble.n	800f7f6 <_dtoa_r+0x8be>
 800f78c:	46ca      	mov	sl, r9
 800f78e:	f1ba 0f00 	cmp.w	sl, #0
 800f792:	d10d      	bne.n	800f7b0 <_dtoa_r+0x878>
 800f794:	4621      	mov	r1, r4
 800f796:	4653      	mov	r3, sl
 800f798:	2205      	movs	r2, #5
 800f79a:	4630      	mov	r0, r6
 800f79c:	f000 f9bc 	bl	800fb18 <__multadd>
 800f7a0:	4601      	mov	r1, r0
 800f7a2:	4604      	mov	r4, r0
 800f7a4:	4628      	mov	r0, r5
 800f7a6:	f000 fbd3 	bl	800ff50 <__mcmp>
 800f7aa:	2800      	cmp	r0, #0
 800f7ac:	f73f adde 	bgt.w	800f36c <_dtoa_r+0x434>
 800f7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7b2:	f8dd 8000 	ldr.w	r8, [sp]
 800f7b6:	ea6f 0b03 	mvn.w	fp, r3
 800f7ba:	f04f 0900 	mov.w	r9, #0
 800f7be:	4621      	mov	r1, r4
 800f7c0:	4630      	mov	r0, r6
 800f7c2:	f000 f987 	bl	800fad4 <_Bfree>
 800f7c6:	2f00      	cmp	r7, #0
 800f7c8:	f43f aea7 	beq.w	800f51a <_dtoa_r+0x5e2>
 800f7cc:	f1b9 0f00 	cmp.w	r9, #0
 800f7d0:	d005      	beq.n	800f7de <_dtoa_r+0x8a6>
 800f7d2:	45b9      	cmp	r9, r7
 800f7d4:	d003      	beq.n	800f7de <_dtoa_r+0x8a6>
 800f7d6:	4649      	mov	r1, r9
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f000 f97b 	bl	800fad4 <_Bfree>
 800f7de:	4639      	mov	r1, r7
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	f000 f977 	bl	800fad4 <_Bfree>
 800f7e6:	e698      	b.n	800f51a <_dtoa_r+0x5e2>
 800f7e8:	2400      	movs	r4, #0
 800f7ea:	4627      	mov	r7, r4
 800f7ec:	e7e0      	b.n	800f7b0 <_dtoa_r+0x878>
 800f7ee:	46bb      	mov	fp, r7
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	4607      	mov	r7, r0
 800f7f4:	e5ba      	b.n	800f36c <_dtoa_r+0x434>
 800f7f6:	9b08      	ldr	r3, [sp, #32]
 800f7f8:	46ca      	mov	sl, r9
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f000 8100 	beq.w	800fa00 <_dtoa_r+0xac8>
 800f800:	f1b8 0f00 	cmp.w	r8, #0
 800f804:	dd05      	ble.n	800f812 <_dtoa_r+0x8da>
 800f806:	4639      	mov	r1, r7
 800f808:	4642      	mov	r2, r8
 800f80a:	4630      	mov	r0, r6
 800f80c:	f000 fb34 	bl	800fe78 <__lshift>
 800f810:	4607      	mov	r7, r0
 800f812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f814:	2b00      	cmp	r3, #0
 800f816:	d05d      	beq.n	800f8d4 <_dtoa_r+0x99c>
 800f818:	6879      	ldr	r1, [r7, #4]
 800f81a:	4630      	mov	r0, r6
 800f81c:	f000 f91a 	bl	800fa54 <_Balloc>
 800f820:	4680      	mov	r8, r0
 800f822:	b928      	cbnz	r0, 800f830 <_dtoa_r+0x8f8>
 800f824:	4b82      	ldr	r3, [pc, #520]	; (800fa30 <_dtoa_r+0xaf8>)
 800f826:	4602      	mov	r2, r0
 800f828:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f82c:	f7ff bb9a 	b.w	800ef64 <_dtoa_r+0x2c>
 800f830:	693a      	ldr	r2, [r7, #16]
 800f832:	3202      	adds	r2, #2
 800f834:	0092      	lsls	r2, r2, #2
 800f836:	f107 010c 	add.w	r1, r7, #12
 800f83a:	300c      	adds	r0, #12
 800f83c:	f7fe fe96 	bl	800e56c <memcpy>
 800f840:	2201      	movs	r2, #1
 800f842:	4641      	mov	r1, r8
 800f844:	4630      	mov	r0, r6
 800f846:	f000 fb17 	bl	800fe78 <__lshift>
 800f84a:	9b00      	ldr	r3, [sp, #0]
 800f84c:	3301      	adds	r3, #1
 800f84e:	9305      	str	r3, [sp, #20]
 800f850:	9b00      	ldr	r3, [sp, #0]
 800f852:	4453      	add	r3, sl
 800f854:	9309      	str	r3, [sp, #36]	; 0x24
 800f856:	9b02      	ldr	r3, [sp, #8]
 800f858:	f003 0301 	and.w	r3, r3, #1
 800f85c:	46b9      	mov	r9, r7
 800f85e:	9308      	str	r3, [sp, #32]
 800f860:	4607      	mov	r7, r0
 800f862:	9b05      	ldr	r3, [sp, #20]
 800f864:	4621      	mov	r1, r4
 800f866:	3b01      	subs	r3, #1
 800f868:	4628      	mov	r0, r5
 800f86a:	9302      	str	r3, [sp, #8]
 800f86c:	f7ff fad6 	bl	800ee1c <quorem>
 800f870:	4603      	mov	r3, r0
 800f872:	3330      	adds	r3, #48	; 0x30
 800f874:	9006      	str	r0, [sp, #24]
 800f876:	4649      	mov	r1, r9
 800f878:	4628      	mov	r0, r5
 800f87a:	930a      	str	r3, [sp, #40]	; 0x28
 800f87c:	f000 fb68 	bl	800ff50 <__mcmp>
 800f880:	463a      	mov	r2, r7
 800f882:	4682      	mov	sl, r0
 800f884:	4621      	mov	r1, r4
 800f886:	4630      	mov	r0, r6
 800f888:	f000 fb7e 	bl	800ff88 <__mdiff>
 800f88c:	68c2      	ldr	r2, [r0, #12]
 800f88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f890:	4680      	mov	r8, r0
 800f892:	bb0a      	cbnz	r2, 800f8d8 <_dtoa_r+0x9a0>
 800f894:	4601      	mov	r1, r0
 800f896:	4628      	mov	r0, r5
 800f898:	f000 fb5a 	bl	800ff50 <__mcmp>
 800f89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f89e:	4602      	mov	r2, r0
 800f8a0:	4641      	mov	r1, r8
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	920e      	str	r2, [sp, #56]	; 0x38
 800f8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800f8a8:	f000 f914 	bl	800fad4 <_Bfree>
 800f8ac:	9b07      	ldr	r3, [sp, #28]
 800f8ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f8b4:	ea43 0102 	orr.w	r1, r3, r2
 800f8b8:	9b08      	ldr	r3, [sp, #32]
 800f8ba:	430b      	orrs	r3, r1
 800f8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8be:	d10d      	bne.n	800f8dc <_dtoa_r+0x9a4>
 800f8c0:	2b39      	cmp	r3, #57	; 0x39
 800f8c2:	d029      	beq.n	800f918 <_dtoa_r+0x9e0>
 800f8c4:	f1ba 0f00 	cmp.w	sl, #0
 800f8c8:	dd01      	ble.n	800f8ce <_dtoa_r+0x996>
 800f8ca:	9b06      	ldr	r3, [sp, #24]
 800f8cc:	3331      	adds	r3, #49	; 0x31
 800f8ce:	9a02      	ldr	r2, [sp, #8]
 800f8d0:	7013      	strb	r3, [r2, #0]
 800f8d2:	e774      	b.n	800f7be <_dtoa_r+0x886>
 800f8d4:	4638      	mov	r0, r7
 800f8d6:	e7b8      	b.n	800f84a <_dtoa_r+0x912>
 800f8d8:	2201      	movs	r2, #1
 800f8da:	e7e1      	b.n	800f8a0 <_dtoa_r+0x968>
 800f8dc:	f1ba 0f00 	cmp.w	sl, #0
 800f8e0:	db06      	blt.n	800f8f0 <_dtoa_r+0x9b8>
 800f8e2:	9907      	ldr	r1, [sp, #28]
 800f8e4:	ea41 0a0a 	orr.w	sl, r1, sl
 800f8e8:	9908      	ldr	r1, [sp, #32]
 800f8ea:	ea5a 0101 	orrs.w	r1, sl, r1
 800f8ee:	d120      	bne.n	800f932 <_dtoa_r+0x9fa>
 800f8f0:	2a00      	cmp	r2, #0
 800f8f2:	ddec      	ble.n	800f8ce <_dtoa_r+0x996>
 800f8f4:	4629      	mov	r1, r5
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	4630      	mov	r0, r6
 800f8fa:	9305      	str	r3, [sp, #20]
 800f8fc:	f000 fabc 	bl	800fe78 <__lshift>
 800f900:	4621      	mov	r1, r4
 800f902:	4605      	mov	r5, r0
 800f904:	f000 fb24 	bl	800ff50 <__mcmp>
 800f908:	2800      	cmp	r0, #0
 800f90a:	9b05      	ldr	r3, [sp, #20]
 800f90c:	dc02      	bgt.n	800f914 <_dtoa_r+0x9dc>
 800f90e:	d1de      	bne.n	800f8ce <_dtoa_r+0x996>
 800f910:	07da      	lsls	r2, r3, #31
 800f912:	d5dc      	bpl.n	800f8ce <_dtoa_r+0x996>
 800f914:	2b39      	cmp	r3, #57	; 0x39
 800f916:	d1d8      	bne.n	800f8ca <_dtoa_r+0x992>
 800f918:	9a02      	ldr	r2, [sp, #8]
 800f91a:	2339      	movs	r3, #57	; 0x39
 800f91c:	7013      	strb	r3, [r2, #0]
 800f91e:	4643      	mov	r3, r8
 800f920:	4698      	mov	r8, r3
 800f922:	3b01      	subs	r3, #1
 800f924:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f928:	2a39      	cmp	r2, #57	; 0x39
 800f92a:	d051      	beq.n	800f9d0 <_dtoa_r+0xa98>
 800f92c:	3201      	adds	r2, #1
 800f92e:	701a      	strb	r2, [r3, #0]
 800f930:	e745      	b.n	800f7be <_dtoa_r+0x886>
 800f932:	2a00      	cmp	r2, #0
 800f934:	dd03      	ble.n	800f93e <_dtoa_r+0xa06>
 800f936:	2b39      	cmp	r3, #57	; 0x39
 800f938:	d0ee      	beq.n	800f918 <_dtoa_r+0x9e0>
 800f93a:	3301      	adds	r3, #1
 800f93c:	e7c7      	b.n	800f8ce <_dtoa_r+0x996>
 800f93e:	9a05      	ldr	r2, [sp, #20]
 800f940:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f942:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f946:	428a      	cmp	r2, r1
 800f948:	d02b      	beq.n	800f9a2 <_dtoa_r+0xa6a>
 800f94a:	4629      	mov	r1, r5
 800f94c:	2300      	movs	r3, #0
 800f94e:	220a      	movs	r2, #10
 800f950:	4630      	mov	r0, r6
 800f952:	f000 f8e1 	bl	800fb18 <__multadd>
 800f956:	45b9      	cmp	r9, r7
 800f958:	4605      	mov	r5, r0
 800f95a:	f04f 0300 	mov.w	r3, #0
 800f95e:	f04f 020a 	mov.w	r2, #10
 800f962:	4649      	mov	r1, r9
 800f964:	4630      	mov	r0, r6
 800f966:	d107      	bne.n	800f978 <_dtoa_r+0xa40>
 800f968:	f000 f8d6 	bl	800fb18 <__multadd>
 800f96c:	4681      	mov	r9, r0
 800f96e:	4607      	mov	r7, r0
 800f970:	9b05      	ldr	r3, [sp, #20]
 800f972:	3301      	adds	r3, #1
 800f974:	9305      	str	r3, [sp, #20]
 800f976:	e774      	b.n	800f862 <_dtoa_r+0x92a>
 800f978:	f000 f8ce 	bl	800fb18 <__multadd>
 800f97c:	4639      	mov	r1, r7
 800f97e:	4681      	mov	r9, r0
 800f980:	2300      	movs	r3, #0
 800f982:	220a      	movs	r2, #10
 800f984:	4630      	mov	r0, r6
 800f986:	f000 f8c7 	bl	800fb18 <__multadd>
 800f98a:	4607      	mov	r7, r0
 800f98c:	e7f0      	b.n	800f970 <_dtoa_r+0xa38>
 800f98e:	f1ba 0f00 	cmp.w	sl, #0
 800f992:	9a00      	ldr	r2, [sp, #0]
 800f994:	bfcc      	ite	gt
 800f996:	46d0      	movgt	r8, sl
 800f998:	f04f 0801 	movle.w	r8, #1
 800f99c:	4490      	add	r8, r2
 800f99e:	f04f 0900 	mov.w	r9, #0
 800f9a2:	4629      	mov	r1, r5
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	9302      	str	r3, [sp, #8]
 800f9aa:	f000 fa65 	bl	800fe78 <__lshift>
 800f9ae:	4621      	mov	r1, r4
 800f9b0:	4605      	mov	r5, r0
 800f9b2:	f000 facd 	bl	800ff50 <__mcmp>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	dcb1      	bgt.n	800f91e <_dtoa_r+0x9e6>
 800f9ba:	d102      	bne.n	800f9c2 <_dtoa_r+0xa8a>
 800f9bc:	9b02      	ldr	r3, [sp, #8]
 800f9be:	07db      	lsls	r3, r3, #31
 800f9c0:	d4ad      	bmi.n	800f91e <_dtoa_r+0x9e6>
 800f9c2:	4643      	mov	r3, r8
 800f9c4:	4698      	mov	r8, r3
 800f9c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f9ca:	2a30      	cmp	r2, #48	; 0x30
 800f9cc:	d0fa      	beq.n	800f9c4 <_dtoa_r+0xa8c>
 800f9ce:	e6f6      	b.n	800f7be <_dtoa_r+0x886>
 800f9d0:	9a00      	ldr	r2, [sp, #0]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d1a4      	bne.n	800f920 <_dtoa_r+0x9e8>
 800f9d6:	f10b 0b01 	add.w	fp, fp, #1
 800f9da:	2331      	movs	r3, #49	; 0x31
 800f9dc:	e778      	b.n	800f8d0 <_dtoa_r+0x998>
 800f9de:	4b15      	ldr	r3, [pc, #84]	; (800fa34 <_dtoa_r+0xafc>)
 800f9e0:	f7ff bb12 	b.w	800f008 <_dtoa_r+0xd0>
 800f9e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	f47f aaee 	bne.w	800efc8 <_dtoa_r+0x90>
 800f9ec:	4b12      	ldr	r3, [pc, #72]	; (800fa38 <_dtoa_r+0xb00>)
 800f9ee:	f7ff bb0b 	b.w	800f008 <_dtoa_r+0xd0>
 800f9f2:	f1ba 0f00 	cmp.w	sl, #0
 800f9f6:	dc03      	bgt.n	800fa00 <_dtoa_r+0xac8>
 800f9f8:	9b07      	ldr	r3, [sp, #28]
 800f9fa:	2b02      	cmp	r3, #2
 800f9fc:	f73f aec7 	bgt.w	800f78e <_dtoa_r+0x856>
 800fa00:	f8dd 8000 	ldr.w	r8, [sp]
 800fa04:	4621      	mov	r1, r4
 800fa06:	4628      	mov	r0, r5
 800fa08:	f7ff fa08 	bl	800ee1c <quorem>
 800fa0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fa10:	f808 3b01 	strb.w	r3, [r8], #1
 800fa14:	9a00      	ldr	r2, [sp, #0]
 800fa16:	eba8 0202 	sub.w	r2, r8, r2
 800fa1a:	4592      	cmp	sl, r2
 800fa1c:	ddb7      	ble.n	800f98e <_dtoa_r+0xa56>
 800fa1e:	4629      	mov	r1, r5
 800fa20:	2300      	movs	r3, #0
 800fa22:	220a      	movs	r2, #10
 800fa24:	4630      	mov	r0, r6
 800fa26:	f000 f877 	bl	800fb18 <__multadd>
 800fa2a:	4605      	mov	r5, r0
 800fa2c:	e7ea      	b.n	800fa04 <_dtoa_r+0xacc>
 800fa2e:	bf00      	nop
 800fa30:	080127d3 	.word	0x080127d3
 800fa34:	0801272c 	.word	0x0801272c
 800fa38:	08012750 	.word	0x08012750

0800fa3c <_localeconv_r>:
 800fa3c:	4800      	ldr	r0, [pc, #0]	; (800fa40 <_localeconv_r+0x4>)
 800fa3e:	4770      	bx	lr
 800fa40:	24000178 	.word	0x24000178

0800fa44 <malloc>:
 800fa44:	4b02      	ldr	r3, [pc, #8]	; (800fa50 <malloc+0xc>)
 800fa46:	4601      	mov	r1, r0
 800fa48:	6818      	ldr	r0, [r3, #0]
 800fa4a:	f000 bbe1 	b.w	8010210 <_malloc_r>
 800fa4e:	bf00      	nop
 800fa50:	24000024 	.word	0x24000024

0800fa54 <_Balloc>:
 800fa54:	b570      	push	{r4, r5, r6, lr}
 800fa56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fa58:	4604      	mov	r4, r0
 800fa5a:	460d      	mov	r5, r1
 800fa5c:	b976      	cbnz	r6, 800fa7c <_Balloc+0x28>
 800fa5e:	2010      	movs	r0, #16
 800fa60:	f7ff fff0 	bl	800fa44 <malloc>
 800fa64:	4602      	mov	r2, r0
 800fa66:	6260      	str	r0, [r4, #36]	; 0x24
 800fa68:	b920      	cbnz	r0, 800fa74 <_Balloc+0x20>
 800fa6a:	4b18      	ldr	r3, [pc, #96]	; (800facc <_Balloc+0x78>)
 800fa6c:	4818      	ldr	r0, [pc, #96]	; (800fad0 <_Balloc+0x7c>)
 800fa6e:	2166      	movs	r1, #102	; 0x66
 800fa70:	f000 fc38 	bl	80102e4 <__assert_func>
 800fa74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa78:	6006      	str	r6, [r0, #0]
 800fa7a:	60c6      	str	r6, [r0, #12]
 800fa7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fa7e:	68f3      	ldr	r3, [r6, #12]
 800fa80:	b183      	cbz	r3, 800faa4 <_Balloc+0x50>
 800fa82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa84:	68db      	ldr	r3, [r3, #12]
 800fa86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fa8a:	b9b8      	cbnz	r0, 800fabc <_Balloc+0x68>
 800fa8c:	2101      	movs	r1, #1
 800fa8e:	fa01 f605 	lsl.w	r6, r1, r5
 800fa92:	1d72      	adds	r2, r6, #5
 800fa94:	0092      	lsls	r2, r2, #2
 800fa96:	4620      	mov	r0, r4
 800fa98:	f000 fb5a 	bl	8010150 <_calloc_r>
 800fa9c:	b160      	cbz	r0, 800fab8 <_Balloc+0x64>
 800fa9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800faa2:	e00e      	b.n	800fac2 <_Balloc+0x6e>
 800faa4:	2221      	movs	r2, #33	; 0x21
 800faa6:	2104      	movs	r1, #4
 800faa8:	4620      	mov	r0, r4
 800faaa:	f000 fb51 	bl	8010150 <_calloc_r>
 800faae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fab0:	60f0      	str	r0, [r6, #12]
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d1e4      	bne.n	800fa82 <_Balloc+0x2e>
 800fab8:	2000      	movs	r0, #0
 800faba:	bd70      	pop	{r4, r5, r6, pc}
 800fabc:	6802      	ldr	r2, [r0, #0]
 800fabe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fac2:	2300      	movs	r3, #0
 800fac4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fac8:	e7f7      	b.n	800faba <_Balloc+0x66>
 800faca:	bf00      	nop
 800facc:	0801275d 	.word	0x0801275d
 800fad0:	080127e4 	.word	0x080127e4

0800fad4 <_Bfree>:
 800fad4:	b570      	push	{r4, r5, r6, lr}
 800fad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fad8:	4605      	mov	r5, r0
 800fada:	460c      	mov	r4, r1
 800fadc:	b976      	cbnz	r6, 800fafc <_Bfree+0x28>
 800fade:	2010      	movs	r0, #16
 800fae0:	f7ff ffb0 	bl	800fa44 <malloc>
 800fae4:	4602      	mov	r2, r0
 800fae6:	6268      	str	r0, [r5, #36]	; 0x24
 800fae8:	b920      	cbnz	r0, 800faf4 <_Bfree+0x20>
 800faea:	4b09      	ldr	r3, [pc, #36]	; (800fb10 <_Bfree+0x3c>)
 800faec:	4809      	ldr	r0, [pc, #36]	; (800fb14 <_Bfree+0x40>)
 800faee:	218a      	movs	r1, #138	; 0x8a
 800faf0:	f000 fbf8 	bl	80102e4 <__assert_func>
 800faf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800faf8:	6006      	str	r6, [r0, #0]
 800fafa:	60c6      	str	r6, [r0, #12]
 800fafc:	b13c      	cbz	r4, 800fb0e <_Bfree+0x3a>
 800fafe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fb00:	6862      	ldr	r2, [r4, #4]
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb08:	6021      	str	r1, [r4, #0]
 800fb0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb0e:	bd70      	pop	{r4, r5, r6, pc}
 800fb10:	0801275d 	.word	0x0801275d
 800fb14:	080127e4 	.word	0x080127e4

0800fb18 <__multadd>:
 800fb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb1c:	690e      	ldr	r6, [r1, #16]
 800fb1e:	4607      	mov	r7, r0
 800fb20:	4698      	mov	r8, r3
 800fb22:	460c      	mov	r4, r1
 800fb24:	f101 0014 	add.w	r0, r1, #20
 800fb28:	2300      	movs	r3, #0
 800fb2a:	6805      	ldr	r5, [r0, #0]
 800fb2c:	b2a9      	uxth	r1, r5
 800fb2e:	fb02 8101 	mla	r1, r2, r1, r8
 800fb32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fb36:	0c2d      	lsrs	r5, r5, #16
 800fb38:	fb02 c505 	mla	r5, r2, r5, ip
 800fb3c:	b289      	uxth	r1, r1
 800fb3e:	3301      	adds	r3, #1
 800fb40:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fb44:	429e      	cmp	r6, r3
 800fb46:	f840 1b04 	str.w	r1, [r0], #4
 800fb4a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fb4e:	dcec      	bgt.n	800fb2a <__multadd+0x12>
 800fb50:	f1b8 0f00 	cmp.w	r8, #0
 800fb54:	d022      	beq.n	800fb9c <__multadd+0x84>
 800fb56:	68a3      	ldr	r3, [r4, #8]
 800fb58:	42b3      	cmp	r3, r6
 800fb5a:	dc19      	bgt.n	800fb90 <__multadd+0x78>
 800fb5c:	6861      	ldr	r1, [r4, #4]
 800fb5e:	4638      	mov	r0, r7
 800fb60:	3101      	adds	r1, #1
 800fb62:	f7ff ff77 	bl	800fa54 <_Balloc>
 800fb66:	4605      	mov	r5, r0
 800fb68:	b928      	cbnz	r0, 800fb76 <__multadd+0x5e>
 800fb6a:	4602      	mov	r2, r0
 800fb6c:	4b0d      	ldr	r3, [pc, #52]	; (800fba4 <__multadd+0x8c>)
 800fb6e:	480e      	ldr	r0, [pc, #56]	; (800fba8 <__multadd+0x90>)
 800fb70:	21b5      	movs	r1, #181	; 0xb5
 800fb72:	f000 fbb7 	bl	80102e4 <__assert_func>
 800fb76:	6922      	ldr	r2, [r4, #16]
 800fb78:	3202      	adds	r2, #2
 800fb7a:	f104 010c 	add.w	r1, r4, #12
 800fb7e:	0092      	lsls	r2, r2, #2
 800fb80:	300c      	adds	r0, #12
 800fb82:	f7fe fcf3 	bl	800e56c <memcpy>
 800fb86:	4621      	mov	r1, r4
 800fb88:	4638      	mov	r0, r7
 800fb8a:	f7ff ffa3 	bl	800fad4 <_Bfree>
 800fb8e:	462c      	mov	r4, r5
 800fb90:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fb94:	3601      	adds	r6, #1
 800fb96:	f8c3 8014 	str.w	r8, [r3, #20]
 800fb9a:	6126      	str	r6, [r4, #16]
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fba2:	bf00      	nop
 800fba4:	080127d3 	.word	0x080127d3
 800fba8:	080127e4 	.word	0x080127e4

0800fbac <__hi0bits>:
 800fbac:	0c03      	lsrs	r3, r0, #16
 800fbae:	041b      	lsls	r3, r3, #16
 800fbb0:	b9d3      	cbnz	r3, 800fbe8 <__hi0bits+0x3c>
 800fbb2:	0400      	lsls	r0, r0, #16
 800fbb4:	2310      	movs	r3, #16
 800fbb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fbba:	bf04      	itt	eq
 800fbbc:	0200      	lsleq	r0, r0, #8
 800fbbe:	3308      	addeq	r3, #8
 800fbc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fbc4:	bf04      	itt	eq
 800fbc6:	0100      	lsleq	r0, r0, #4
 800fbc8:	3304      	addeq	r3, #4
 800fbca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fbce:	bf04      	itt	eq
 800fbd0:	0080      	lsleq	r0, r0, #2
 800fbd2:	3302      	addeq	r3, #2
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	db05      	blt.n	800fbe4 <__hi0bits+0x38>
 800fbd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fbdc:	f103 0301 	add.w	r3, r3, #1
 800fbe0:	bf08      	it	eq
 800fbe2:	2320      	moveq	r3, #32
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	4770      	bx	lr
 800fbe8:	2300      	movs	r3, #0
 800fbea:	e7e4      	b.n	800fbb6 <__hi0bits+0xa>

0800fbec <__lo0bits>:
 800fbec:	6803      	ldr	r3, [r0, #0]
 800fbee:	f013 0207 	ands.w	r2, r3, #7
 800fbf2:	4601      	mov	r1, r0
 800fbf4:	d00b      	beq.n	800fc0e <__lo0bits+0x22>
 800fbf6:	07da      	lsls	r2, r3, #31
 800fbf8:	d424      	bmi.n	800fc44 <__lo0bits+0x58>
 800fbfa:	0798      	lsls	r0, r3, #30
 800fbfc:	bf49      	itett	mi
 800fbfe:	085b      	lsrmi	r3, r3, #1
 800fc00:	089b      	lsrpl	r3, r3, #2
 800fc02:	2001      	movmi	r0, #1
 800fc04:	600b      	strmi	r3, [r1, #0]
 800fc06:	bf5c      	itt	pl
 800fc08:	600b      	strpl	r3, [r1, #0]
 800fc0a:	2002      	movpl	r0, #2
 800fc0c:	4770      	bx	lr
 800fc0e:	b298      	uxth	r0, r3
 800fc10:	b9b0      	cbnz	r0, 800fc40 <__lo0bits+0x54>
 800fc12:	0c1b      	lsrs	r3, r3, #16
 800fc14:	2010      	movs	r0, #16
 800fc16:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fc1a:	bf04      	itt	eq
 800fc1c:	0a1b      	lsreq	r3, r3, #8
 800fc1e:	3008      	addeq	r0, #8
 800fc20:	071a      	lsls	r2, r3, #28
 800fc22:	bf04      	itt	eq
 800fc24:	091b      	lsreq	r3, r3, #4
 800fc26:	3004      	addeq	r0, #4
 800fc28:	079a      	lsls	r2, r3, #30
 800fc2a:	bf04      	itt	eq
 800fc2c:	089b      	lsreq	r3, r3, #2
 800fc2e:	3002      	addeq	r0, #2
 800fc30:	07da      	lsls	r2, r3, #31
 800fc32:	d403      	bmi.n	800fc3c <__lo0bits+0x50>
 800fc34:	085b      	lsrs	r3, r3, #1
 800fc36:	f100 0001 	add.w	r0, r0, #1
 800fc3a:	d005      	beq.n	800fc48 <__lo0bits+0x5c>
 800fc3c:	600b      	str	r3, [r1, #0]
 800fc3e:	4770      	bx	lr
 800fc40:	4610      	mov	r0, r2
 800fc42:	e7e8      	b.n	800fc16 <__lo0bits+0x2a>
 800fc44:	2000      	movs	r0, #0
 800fc46:	4770      	bx	lr
 800fc48:	2020      	movs	r0, #32
 800fc4a:	4770      	bx	lr

0800fc4c <__i2b>:
 800fc4c:	b510      	push	{r4, lr}
 800fc4e:	460c      	mov	r4, r1
 800fc50:	2101      	movs	r1, #1
 800fc52:	f7ff feff 	bl	800fa54 <_Balloc>
 800fc56:	4602      	mov	r2, r0
 800fc58:	b928      	cbnz	r0, 800fc66 <__i2b+0x1a>
 800fc5a:	4b05      	ldr	r3, [pc, #20]	; (800fc70 <__i2b+0x24>)
 800fc5c:	4805      	ldr	r0, [pc, #20]	; (800fc74 <__i2b+0x28>)
 800fc5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fc62:	f000 fb3f 	bl	80102e4 <__assert_func>
 800fc66:	2301      	movs	r3, #1
 800fc68:	6144      	str	r4, [r0, #20]
 800fc6a:	6103      	str	r3, [r0, #16]
 800fc6c:	bd10      	pop	{r4, pc}
 800fc6e:	bf00      	nop
 800fc70:	080127d3 	.word	0x080127d3
 800fc74:	080127e4 	.word	0x080127e4

0800fc78 <__multiply>:
 800fc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc7c:	4614      	mov	r4, r2
 800fc7e:	690a      	ldr	r2, [r1, #16]
 800fc80:	6923      	ldr	r3, [r4, #16]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	bfb8      	it	lt
 800fc86:	460b      	movlt	r3, r1
 800fc88:	460d      	mov	r5, r1
 800fc8a:	bfbc      	itt	lt
 800fc8c:	4625      	movlt	r5, r4
 800fc8e:	461c      	movlt	r4, r3
 800fc90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fc94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fc98:	68ab      	ldr	r3, [r5, #8]
 800fc9a:	6869      	ldr	r1, [r5, #4]
 800fc9c:	eb0a 0709 	add.w	r7, sl, r9
 800fca0:	42bb      	cmp	r3, r7
 800fca2:	b085      	sub	sp, #20
 800fca4:	bfb8      	it	lt
 800fca6:	3101      	addlt	r1, #1
 800fca8:	f7ff fed4 	bl	800fa54 <_Balloc>
 800fcac:	b930      	cbnz	r0, 800fcbc <__multiply+0x44>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	4b42      	ldr	r3, [pc, #264]	; (800fdbc <__multiply+0x144>)
 800fcb2:	4843      	ldr	r0, [pc, #268]	; (800fdc0 <__multiply+0x148>)
 800fcb4:	f240 115d 	movw	r1, #349	; 0x15d
 800fcb8:	f000 fb14 	bl	80102e4 <__assert_func>
 800fcbc:	f100 0614 	add.w	r6, r0, #20
 800fcc0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fcc4:	4633      	mov	r3, r6
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	4543      	cmp	r3, r8
 800fcca:	d31e      	bcc.n	800fd0a <__multiply+0x92>
 800fccc:	f105 0c14 	add.w	ip, r5, #20
 800fcd0:	f104 0314 	add.w	r3, r4, #20
 800fcd4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fcd8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fcdc:	9202      	str	r2, [sp, #8]
 800fcde:	ebac 0205 	sub.w	r2, ip, r5
 800fce2:	3a15      	subs	r2, #21
 800fce4:	f022 0203 	bic.w	r2, r2, #3
 800fce8:	3204      	adds	r2, #4
 800fcea:	f105 0115 	add.w	r1, r5, #21
 800fcee:	458c      	cmp	ip, r1
 800fcf0:	bf38      	it	cc
 800fcf2:	2204      	movcc	r2, #4
 800fcf4:	9201      	str	r2, [sp, #4]
 800fcf6:	9a02      	ldr	r2, [sp, #8]
 800fcf8:	9303      	str	r3, [sp, #12]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d808      	bhi.n	800fd10 <__multiply+0x98>
 800fcfe:	2f00      	cmp	r7, #0
 800fd00:	dc55      	bgt.n	800fdae <__multiply+0x136>
 800fd02:	6107      	str	r7, [r0, #16]
 800fd04:	b005      	add	sp, #20
 800fd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd0a:	f843 2b04 	str.w	r2, [r3], #4
 800fd0e:	e7db      	b.n	800fcc8 <__multiply+0x50>
 800fd10:	f8b3 a000 	ldrh.w	sl, [r3]
 800fd14:	f1ba 0f00 	cmp.w	sl, #0
 800fd18:	d020      	beq.n	800fd5c <__multiply+0xe4>
 800fd1a:	f105 0e14 	add.w	lr, r5, #20
 800fd1e:	46b1      	mov	r9, r6
 800fd20:	2200      	movs	r2, #0
 800fd22:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fd26:	f8d9 b000 	ldr.w	fp, [r9]
 800fd2a:	b2a1      	uxth	r1, r4
 800fd2c:	fa1f fb8b 	uxth.w	fp, fp
 800fd30:	fb0a b101 	mla	r1, sl, r1, fp
 800fd34:	4411      	add	r1, r2
 800fd36:	f8d9 2000 	ldr.w	r2, [r9]
 800fd3a:	0c24      	lsrs	r4, r4, #16
 800fd3c:	0c12      	lsrs	r2, r2, #16
 800fd3e:	fb0a 2404 	mla	r4, sl, r4, r2
 800fd42:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fd46:	b289      	uxth	r1, r1
 800fd48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fd4c:	45f4      	cmp	ip, lr
 800fd4e:	f849 1b04 	str.w	r1, [r9], #4
 800fd52:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fd56:	d8e4      	bhi.n	800fd22 <__multiply+0xaa>
 800fd58:	9901      	ldr	r1, [sp, #4]
 800fd5a:	5072      	str	r2, [r6, r1]
 800fd5c:	9a03      	ldr	r2, [sp, #12]
 800fd5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fd62:	3304      	adds	r3, #4
 800fd64:	f1b9 0f00 	cmp.w	r9, #0
 800fd68:	d01f      	beq.n	800fdaa <__multiply+0x132>
 800fd6a:	6834      	ldr	r4, [r6, #0]
 800fd6c:	f105 0114 	add.w	r1, r5, #20
 800fd70:	46b6      	mov	lr, r6
 800fd72:	f04f 0a00 	mov.w	sl, #0
 800fd76:	880a      	ldrh	r2, [r1, #0]
 800fd78:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fd7c:	fb09 b202 	mla	r2, r9, r2, fp
 800fd80:	4492      	add	sl, r2
 800fd82:	b2a4      	uxth	r4, r4
 800fd84:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fd88:	f84e 4b04 	str.w	r4, [lr], #4
 800fd8c:	f851 4b04 	ldr.w	r4, [r1], #4
 800fd90:	f8be 2000 	ldrh.w	r2, [lr]
 800fd94:	0c24      	lsrs	r4, r4, #16
 800fd96:	fb09 2404 	mla	r4, r9, r4, r2
 800fd9a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fd9e:	458c      	cmp	ip, r1
 800fda0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fda4:	d8e7      	bhi.n	800fd76 <__multiply+0xfe>
 800fda6:	9a01      	ldr	r2, [sp, #4]
 800fda8:	50b4      	str	r4, [r6, r2]
 800fdaa:	3604      	adds	r6, #4
 800fdac:	e7a3      	b.n	800fcf6 <__multiply+0x7e>
 800fdae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d1a5      	bne.n	800fd02 <__multiply+0x8a>
 800fdb6:	3f01      	subs	r7, #1
 800fdb8:	e7a1      	b.n	800fcfe <__multiply+0x86>
 800fdba:	bf00      	nop
 800fdbc:	080127d3 	.word	0x080127d3
 800fdc0:	080127e4 	.word	0x080127e4

0800fdc4 <__pow5mult>:
 800fdc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdc8:	4615      	mov	r5, r2
 800fdca:	f012 0203 	ands.w	r2, r2, #3
 800fdce:	4606      	mov	r6, r0
 800fdd0:	460f      	mov	r7, r1
 800fdd2:	d007      	beq.n	800fde4 <__pow5mult+0x20>
 800fdd4:	4c25      	ldr	r4, [pc, #148]	; (800fe6c <__pow5mult+0xa8>)
 800fdd6:	3a01      	subs	r2, #1
 800fdd8:	2300      	movs	r3, #0
 800fdda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fdde:	f7ff fe9b 	bl	800fb18 <__multadd>
 800fde2:	4607      	mov	r7, r0
 800fde4:	10ad      	asrs	r5, r5, #2
 800fde6:	d03d      	beq.n	800fe64 <__pow5mult+0xa0>
 800fde8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fdea:	b97c      	cbnz	r4, 800fe0c <__pow5mult+0x48>
 800fdec:	2010      	movs	r0, #16
 800fdee:	f7ff fe29 	bl	800fa44 <malloc>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	6270      	str	r0, [r6, #36]	; 0x24
 800fdf6:	b928      	cbnz	r0, 800fe04 <__pow5mult+0x40>
 800fdf8:	4b1d      	ldr	r3, [pc, #116]	; (800fe70 <__pow5mult+0xac>)
 800fdfa:	481e      	ldr	r0, [pc, #120]	; (800fe74 <__pow5mult+0xb0>)
 800fdfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fe00:	f000 fa70 	bl	80102e4 <__assert_func>
 800fe04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fe08:	6004      	str	r4, [r0, #0]
 800fe0a:	60c4      	str	r4, [r0, #12]
 800fe0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fe10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fe14:	b94c      	cbnz	r4, 800fe2a <__pow5mult+0x66>
 800fe16:	f240 2171 	movw	r1, #625	; 0x271
 800fe1a:	4630      	mov	r0, r6
 800fe1c:	f7ff ff16 	bl	800fc4c <__i2b>
 800fe20:	2300      	movs	r3, #0
 800fe22:	f8c8 0008 	str.w	r0, [r8, #8]
 800fe26:	4604      	mov	r4, r0
 800fe28:	6003      	str	r3, [r0, #0]
 800fe2a:	f04f 0900 	mov.w	r9, #0
 800fe2e:	07eb      	lsls	r3, r5, #31
 800fe30:	d50a      	bpl.n	800fe48 <__pow5mult+0x84>
 800fe32:	4639      	mov	r1, r7
 800fe34:	4622      	mov	r2, r4
 800fe36:	4630      	mov	r0, r6
 800fe38:	f7ff ff1e 	bl	800fc78 <__multiply>
 800fe3c:	4639      	mov	r1, r7
 800fe3e:	4680      	mov	r8, r0
 800fe40:	4630      	mov	r0, r6
 800fe42:	f7ff fe47 	bl	800fad4 <_Bfree>
 800fe46:	4647      	mov	r7, r8
 800fe48:	106d      	asrs	r5, r5, #1
 800fe4a:	d00b      	beq.n	800fe64 <__pow5mult+0xa0>
 800fe4c:	6820      	ldr	r0, [r4, #0]
 800fe4e:	b938      	cbnz	r0, 800fe60 <__pow5mult+0x9c>
 800fe50:	4622      	mov	r2, r4
 800fe52:	4621      	mov	r1, r4
 800fe54:	4630      	mov	r0, r6
 800fe56:	f7ff ff0f 	bl	800fc78 <__multiply>
 800fe5a:	6020      	str	r0, [r4, #0]
 800fe5c:	f8c0 9000 	str.w	r9, [r0]
 800fe60:	4604      	mov	r4, r0
 800fe62:	e7e4      	b.n	800fe2e <__pow5mult+0x6a>
 800fe64:	4638      	mov	r0, r7
 800fe66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe6a:	bf00      	nop
 800fe6c:	08012938 	.word	0x08012938
 800fe70:	0801275d 	.word	0x0801275d
 800fe74:	080127e4 	.word	0x080127e4

0800fe78 <__lshift>:
 800fe78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe7c:	460c      	mov	r4, r1
 800fe7e:	6849      	ldr	r1, [r1, #4]
 800fe80:	6923      	ldr	r3, [r4, #16]
 800fe82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fe86:	68a3      	ldr	r3, [r4, #8]
 800fe88:	4607      	mov	r7, r0
 800fe8a:	4691      	mov	r9, r2
 800fe8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fe90:	f108 0601 	add.w	r6, r8, #1
 800fe94:	42b3      	cmp	r3, r6
 800fe96:	db0b      	blt.n	800feb0 <__lshift+0x38>
 800fe98:	4638      	mov	r0, r7
 800fe9a:	f7ff fddb 	bl	800fa54 <_Balloc>
 800fe9e:	4605      	mov	r5, r0
 800fea0:	b948      	cbnz	r0, 800feb6 <__lshift+0x3e>
 800fea2:	4602      	mov	r2, r0
 800fea4:	4b28      	ldr	r3, [pc, #160]	; (800ff48 <__lshift+0xd0>)
 800fea6:	4829      	ldr	r0, [pc, #164]	; (800ff4c <__lshift+0xd4>)
 800fea8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800feac:	f000 fa1a 	bl	80102e4 <__assert_func>
 800feb0:	3101      	adds	r1, #1
 800feb2:	005b      	lsls	r3, r3, #1
 800feb4:	e7ee      	b.n	800fe94 <__lshift+0x1c>
 800feb6:	2300      	movs	r3, #0
 800feb8:	f100 0114 	add.w	r1, r0, #20
 800febc:	f100 0210 	add.w	r2, r0, #16
 800fec0:	4618      	mov	r0, r3
 800fec2:	4553      	cmp	r3, sl
 800fec4:	db33      	blt.n	800ff2e <__lshift+0xb6>
 800fec6:	6920      	ldr	r0, [r4, #16]
 800fec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fecc:	f104 0314 	add.w	r3, r4, #20
 800fed0:	f019 091f 	ands.w	r9, r9, #31
 800fed4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fed8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fedc:	d02b      	beq.n	800ff36 <__lshift+0xbe>
 800fede:	f1c9 0e20 	rsb	lr, r9, #32
 800fee2:	468a      	mov	sl, r1
 800fee4:	2200      	movs	r2, #0
 800fee6:	6818      	ldr	r0, [r3, #0]
 800fee8:	fa00 f009 	lsl.w	r0, r0, r9
 800feec:	4302      	orrs	r2, r0
 800feee:	f84a 2b04 	str.w	r2, [sl], #4
 800fef2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fef6:	459c      	cmp	ip, r3
 800fef8:	fa22 f20e 	lsr.w	r2, r2, lr
 800fefc:	d8f3      	bhi.n	800fee6 <__lshift+0x6e>
 800fefe:	ebac 0304 	sub.w	r3, ip, r4
 800ff02:	3b15      	subs	r3, #21
 800ff04:	f023 0303 	bic.w	r3, r3, #3
 800ff08:	3304      	adds	r3, #4
 800ff0a:	f104 0015 	add.w	r0, r4, #21
 800ff0e:	4584      	cmp	ip, r0
 800ff10:	bf38      	it	cc
 800ff12:	2304      	movcc	r3, #4
 800ff14:	50ca      	str	r2, [r1, r3]
 800ff16:	b10a      	cbz	r2, 800ff1c <__lshift+0xa4>
 800ff18:	f108 0602 	add.w	r6, r8, #2
 800ff1c:	3e01      	subs	r6, #1
 800ff1e:	4638      	mov	r0, r7
 800ff20:	612e      	str	r6, [r5, #16]
 800ff22:	4621      	mov	r1, r4
 800ff24:	f7ff fdd6 	bl	800fad4 <_Bfree>
 800ff28:	4628      	mov	r0, r5
 800ff2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ff32:	3301      	adds	r3, #1
 800ff34:	e7c5      	b.n	800fec2 <__lshift+0x4a>
 800ff36:	3904      	subs	r1, #4
 800ff38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ff40:	459c      	cmp	ip, r3
 800ff42:	d8f9      	bhi.n	800ff38 <__lshift+0xc0>
 800ff44:	e7ea      	b.n	800ff1c <__lshift+0xa4>
 800ff46:	bf00      	nop
 800ff48:	080127d3 	.word	0x080127d3
 800ff4c:	080127e4 	.word	0x080127e4

0800ff50 <__mcmp>:
 800ff50:	b530      	push	{r4, r5, lr}
 800ff52:	6902      	ldr	r2, [r0, #16]
 800ff54:	690c      	ldr	r4, [r1, #16]
 800ff56:	1b12      	subs	r2, r2, r4
 800ff58:	d10e      	bne.n	800ff78 <__mcmp+0x28>
 800ff5a:	f100 0314 	add.w	r3, r0, #20
 800ff5e:	3114      	adds	r1, #20
 800ff60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ff64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ff68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ff6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ff70:	42a5      	cmp	r5, r4
 800ff72:	d003      	beq.n	800ff7c <__mcmp+0x2c>
 800ff74:	d305      	bcc.n	800ff82 <__mcmp+0x32>
 800ff76:	2201      	movs	r2, #1
 800ff78:	4610      	mov	r0, r2
 800ff7a:	bd30      	pop	{r4, r5, pc}
 800ff7c:	4283      	cmp	r3, r0
 800ff7e:	d3f3      	bcc.n	800ff68 <__mcmp+0x18>
 800ff80:	e7fa      	b.n	800ff78 <__mcmp+0x28>
 800ff82:	f04f 32ff 	mov.w	r2, #4294967295
 800ff86:	e7f7      	b.n	800ff78 <__mcmp+0x28>

0800ff88 <__mdiff>:
 800ff88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff8c:	460c      	mov	r4, r1
 800ff8e:	4606      	mov	r6, r0
 800ff90:	4611      	mov	r1, r2
 800ff92:	4620      	mov	r0, r4
 800ff94:	4617      	mov	r7, r2
 800ff96:	f7ff ffdb 	bl	800ff50 <__mcmp>
 800ff9a:	1e05      	subs	r5, r0, #0
 800ff9c:	d110      	bne.n	800ffc0 <__mdiff+0x38>
 800ff9e:	4629      	mov	r1, r5
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	f7ff fd57 	bl	800fa54 <_Balloc>
 800ffa6:	b930      	cbnz	r0, 800ffb6 <__mdiff+0x2e>
 800ffa8:	4b39      	ldr	r3, [pc, #228]	; (8010090 <__mdiff+0x108>)
 800ffaa:	4602      	mov	r2, r0
 800ffac:	f240 2132 	movw	r1, #562	; 0x232
 800ffb0:	4838      	ldr	r0, [pc, #224]	; (8010094 <__mdiff+0x10c>)
 800ffb2:	f000 f997 	bl	80102e4 <__assert_func>
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ffbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc0:	bfa4      	itt	ge
 800ffc2:	463b      	movge	r3, r7
 800ffc4:	4627      	movge	r7, r4
 800ffc6:	4630      	mov	r0, r6
 800ffc8:	6879      	ldr	r1, [r7, #4]
 800ffca:	bfa6      	itte	ge
 800ffcc:	461c      	movge	r4, r3
 800ffce:	2500      	movge	r5, #0
 800ffd0:	2501      	movlt	r5, #1
 800ffd2:	f7ff fd3f 	bl	800fa54 <_Balloc>
 800ffd6:	b920      	cbnz	r0, 800ffe2 <__mdiff+0x5a>
 800ffd8:	4b2d      	ldr	r3, [pc, #180]	; (8010090 <__mdiff+0x108>)
 800ffda:	4602      	mov	r2, r0
 800ffdc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ffe0:	e7e6      	b.n	800ffb0 <__mdiff+0x28>
 800ffe2:	693e      	ldr	r6, [r7, #16]
 800ffe4:	60c5      	str	r5, [r0, #12]
 800ffe6:	6925      	ldr	r5, [r4, #16]
 800ffe8:	f107 0114 	add.w	r1, r7, #20
 800ffec:	f104 0914 	add.w	r9, r4, #20
 800fff0:	f100 0e14 	add.w	lr, r0, #20
 800fff4:	f107 0210 	add.w	r2, r7, #16
 800fff8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fffc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010000:	46f2      	mov	sl, lr
 8010002:	2700      	movs	r7, #0
 8010004:	f859 3b04 	ldr.w	r3, [r9], #4
 8010008:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801000c:	fa1f f883 	uxth.w	r8, r3
 8010010:	fa17 f78b 	uxtah	r7, r7, fp
 8010014:	0c1b      	lsrs	r3, r3, #16
 8010016:	eba7 0808 	sub.w	r8, r7, r8
 801001a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801001e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010022:	fa1f f888 	uxth.w	r8, r8
 8010026:	141f      	asrs	r7, r3, #16
 8010028:	454d      	cmp	r5, r9
 801002a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801002e:	f84a 3b04 	str.w	r3, [sl], #4
 8010032:	d8e7      	bhi.n	8010004 <__mdiff+0x7c>
 8010034:	1b2b      	subs	r3, r5, r4
 8010036:	3b15      	subs	r3, #21
 8010038:	f023 0303 	bic.w	r3, r3, #3
 801003c:	3304      	adds	r3, #4
 801003e:	3415      	adds	r4, #21
 8010040:	42a5      	cmp	r5, r4
 8010042:	bf38      	it	cc
 8010044:	2304      	movcc	r3, #4
 8010046:	4419      	add	r1, r3
 8010048:	4473      	add	r3, lr
 801004a:	469e      	mov	lr, r3
 801004c:	460d      	mov	r5, r1
 801004e:	4565      	cmp	r5, ip
 8010050:	d30e      	bcc.n	8010070 <__mdiff+0xe8>
 8010052:	f10c 0203 	add.w	r2, ip, #3
 8010056:	1a52      	subs	r2, r2, r1
 8010058:	f022 0203 	bic.w	r2, r2, #3
 801005c:	3903      	subs	r1, #3
 801005e:	458c      	cmp	ip, r1
 8010060:	bf38      	it	cc
 8010062:	2200      	movcc	r2, #0
 8010064:	441a      	add	r2, r3
 8010066:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801006a:	b17b      	cbz	r3, 801008c <__mdiff+0x104>
 801006c:	6106      	str	r6, [r0, #16]
 801006e:	e7a5      	b.n	800ffbc <__mdiff+0x34>
 8010070:	f855 8b04 	ldr.w	r8, [r5], #4
 8010074:	fa17 f488 	uxtah	r4, r7, r8
 8010078:	1422      	asrs	r2, r4, #16
 801007a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801007e:	b2a4      	uxth	r4, r4
 8010080:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010084:	f84e 4b04 	str.w	r4, [lr], #4
 8010088:	1417      	asrs	r7, r2, #16
 801008a:	e7e0      	b.n	801004e <__mdiff+0xc6>
 801008c:	3e01      	subs	r6, #1
 801008e:	e7ea      	b.n	8010066 <__mdiff+0xde>
 8010090:	080127d3 	.word	0x080127d3
 8010094:	080127e4 	.word	0x080127e4

08010098 <__d2b>:
 8010098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801009c:	4689      	mov	r9, r1
 801009e:	2101      	movs	r1, #1
 80100a0:	ec57 6b10 	vmov	r6, r7, d0
 80100a4:	4690      	mov	r8, r2
 80100a6:	f7ff fcd5 	bl	800fa54 <_Balloc>
 80100aa:	4604      	mov	r4, r0
 80100ac:	b930      	cbnz	r0, 80100bc <__d2b+0x24>
 80100ae:	4602      	mov	r2, r0
 80100b0:	4b25      	ldr	r3, [pc, #148]	; (8010148 <__d2b+0xb0>)
 80100b2:	4826      	ldr	r0, [pc, #152]	; (801014c <__d2b+0xb4>)
 80100b4:	f240 310a 	movw	r1, #778	; 0x30a
 80100b8:	f000 f914 	bl	80102e4 <__assert_func>
 80100bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80100c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80100c4:	bb35      	cbnz	r5, 8010114 <__d2b+0x7c>
 80100c6:	2e00      	cmp	r6, #0
 80100c8:	9301      	str	r3, [sp, #4]
 80100ca:	d028      	beq.n	801011e <__d2b+0x86>
 80100cc:	4668      	mov	r0, sp
 80100ce:	9600      	str	r6, [sp, #0]
 80100d0:	f7ff fd8c 	bl	800fbec <__lo0bits>
 80100d4:	9900      	ldr	r1, [sp, #0]
 80100d6:	b300      	cbz	r0, 801011a <__d2b+0x82>
 80100d8:	9a01      	ldr	r2, [sp, #4]
 80100da:	f1c0 0320 	rsb	r3, r0, #32
 80100de:	fa02 f303 	lsl.w	r3, r2, r3
 80100e2:	430b      	orrs	r3, r1
 80100e4:	40c2      	lsrs	r2, r0
 80100e6:	6163      	str	r3, [r4, #20]
 80100e8:	9201      	str	r2, [sp, #4]
 80100ea:	9b01      	ldr	r3, [sp, #4]
 80100ec:	61a3      	str	r3, [r4, #24]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	bf14      	ite	ne
 80100f2:	2202      	movne	r2, #2
 80100f4:	2201      	moveq	r2, #1
 80100f6:	6122      	str	r2, [r4, #16]
 80100f8:	b1d5      	cbz	r5, 8010130 <__d2b+0x98>
 80100fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80100fe:	4405      	add	r5, r0
 8010100:	f8c9 5000 	str.w	r5, [r9]
 8010104:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010108:	f8c8 0000 	str.w	r0, [r8]
 801010c:	4620      	mov	r0, r4
 801010e:	b003      	add	sp, #12
 8010110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010118:	e7d5      	b.n	80100c6 <__d2b+0x2e>
 801011a:	6161      	str	r1, [r4, #20]
 801011c:	e7e5      	b.n	80100ea <__d2b+0x52>
 801011e:	a801      	add	r0, sp, #4
 8010120:	f7ff fd64 	bl	800fbec <__lo0bits>
 8010124:	9b01      	ldr	r3, [sp, #4]
 8010126:	6163      	str	r3, [r4, #20]
 8010128:	2201      	movs	r2, #1
 801012a:	6122      	str	r2, [r4, #16]
 801012c:	3020      	adds	r0, #32
 801012e:	e7e3      	b.n	80100f8 <__d2b+0x60>
 8010130:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010134:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010138:	f8c9 0000 	str.w	r0, [r9]
 801013c:	6918      	ldr	r0, [r3, #16]
 801013e:	f7ff fd35 	bl	800fbac <__hi0bits>
 8010142:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010146:	e7df      	b.n	8010108 <__d2b+0x70>
 8010148:	080127d3 	.word	0x080127d3
 801014c:	080127e4 	.word	0x080127e4

08010150 <_calloc_r>:
 8010150:	b513      	push	{r0, r1, r4, lr}
 8010152:	434a      	muls	r2, r1
 8010154:	4611      	mov	r1, r2
 8010156:	9201      	str	r2, [sp, #4]
 8010158:	f000 f85a 	bl	8010210 <_malloc_r>
 801015c:	4604      	mov	r4, r0
 801015e:	b118      	cbz	r0, 8010168 <_calloc_r+0x18>
 8010160:	9a01      	ldr	r2, [sp, #4]
 8010162:	2100      	movs	r1, #0
 8010164:	f7fe fa10 	bl	800e588 <memset>
 8010168:	4620      	mov	r0, r4
 801016a:	b002      	add	sp, #8
 801016c:	bd10      	pop	{r4, pc}
	...

08010170 <_free_r>:
 8010170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010172:	2900      	cmp	r1, #0
 8010174:	d048      	beq.n	8010208 <_free_r+0x98>
 8010176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801017a:	9001      	str	r0, [sp, #4]
 801017c:	2b00      	cmp	r3, #0
 801017e:	f1a1 0404 	sub.w	r4, r1, #4
 8010182:	bfb8      	it	lt
 8010184:	18e4      	addlt	r4, r4, r3
 8010186:	f000 f8ef 	bl	8010368 <__malloc_lock>
 801018a:	4a20      	ldr	r2, [pc, #128]	; (801020c <_free_r+0x9c>)
 801018c:	9801      	ldr	r0, [sp, #4]
 801018e:	6813      	ldr	r3, [r2, #0]
 8010190:	4615      	mov	r5, r2
 8010192:	b933      	cbnz	r3, 80101a2 <_free_r+0x32>
 8010194:	6063      	str	r3, [r4, #4]
 8010196:	6014      	str	r4, [r2, #0]
 8010198:	b003      	add	sp, #12
 801019a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801019e:	f000 b8e9 	b.w	8010374 <__malloc_unlock>
 80101a2:	42a3      	cmp	r3, r4
 80101a4:	d90b      	bls.n	80101be <_free_r+0x4e>
 80101a6:	6821      	ldr	r1, [r4, #0]
 80101a8:	1862      	adds	r2, r4, r1
 80101aa:	4293      	cmp	r3, r2
 80101ac:	bf04      	itt	eq
 80101ae:	681a      	ldreq	r2, [r3, #0]
 80101b0:	685b      	ldreq	r3, [r3, #4]
 80101b2:	6063      	str	r3, [r4, #4]
 80101b4:	bf04      	itt	eq
 80101b6:	1852      	addeq	r2, r2, r1
 80101b8:	6022      	streq	r2, [r4, #0]
 80101ba:	602c      	str	r4, [r5, #0]
 80101bc:	e7ec      	b.n	8010198 <_free_r+0x28>
 80101be:	461a      	mov	r2, r3
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	b10b      	cbz	r3, 80101c8 <_free_r+0x58>
 80101c4:	42a3      	cmp	r3, r4
 80101c6:	d9fa      	bls.n	80101be <_free_r+0x4e>
 80101c8:	6811      	ldr	r1, [r2, #0]
 80101ca:	1855      	adds	r5, r2, r1
 80101cc:	42a5      	cmp	r5, r4
 80101ce:	d10b      	bne.n	80101e8 <_free_r+0x78>
 80101d0:	6824      	ldr	r4, [r4, #0]
 80101d2:	4421      	add	r1, r4
 80101d4:	1854      	adds	r4, r2, r1
 80101d6:	42a3      	cmp	r3, r4
 80101d8:	6011      	str	r1, [r2, #0]
 80101da:	d1dd      	bne.n	8010198 <_free_r+0x28>
 80101dc:	681c      	ldr	r4, [r3, #0]
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	6053      	str	r3, [r2, #4]
 80101e2:	4421      	add	r1, r4
 80101e4:	6011      	str	r1, [r2, #0]
 80101e6:	e7d7      	b.n	8010198 <_free_r+0x28>
 80101e8:	d902      	bls.n	80101f0 <_free_r+0x80>
 80101ea:	230c      	movs	r3, #12
 80101ec:	6003      	str	r3, [r0, #0]
 80101ee:	e7d3      	b.n	8010198 <_free_r+0x28>
 80101f0:	6825      	ldr	r5, [r4, #0]
 80101f2:	1961      	adds	r1, r4, r5
 80101f4:	428b      	cmp	r3, r1
 80101f6:	bf04      	itt	eq
 80101f8:	6819      	ldreq	r1, [r3, #0]
 80101fa:	685b      	ldreq	r3, [r3, #4]
 80101fc:	6063      	str	r3, [r4, #4]
 80101fe:	bf04      	itt	eq
 8010200:	1949      	addeq	r1, r1, r5
 8010202:	6021      	streq	r1, [r4, #0]
 8010204:	6054      	str	r4, [r2, #4]
 8010206:	e7c7      	b.n	8010198 <_free_r+0x28>
 8010208:	b003      	add	sp, #12
 801020a:	bd30      	pop	{r4, r5, pc}
 801020c:	24000504 	.word	0x24000504

08010210 <_malloc_r>:
 8010210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010212:	1ccd      	adds	r5, r1, #3
 8010214:	f025 0503 	bic.w	r5, r5, #3
 8010218:	3508      	adds	r5, #8
 801021a:	2d0c      	cmp	r5, #12
 801021c:	bf38      	it	cc
 801021e:	250c      	movcc	r5, #12
 8010220:	2d00      	cmp	r5, #0
 8010222:	4606      	mov	r6, r0
 8010224:	db01      	blt.n	801022a <_malloc_r+0x1a>
 8010226:	42a9      	cmp	r1, r5
 8010228:	d903      	bls.n	8010232 <_malloc_r+0x22>
 801022a:	230c      	movs	r3, #12
 801022c:	6033      	str	r3, [r6, #0]
 801022e:	2000      	movs	r0, #0
 8010230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010232:	f000 f899 	bl	8010368 <__malloc_lock>
 8010236:	4921      	ldr	r1, [pc, #132]	; (80102bc <_malloc_r+0xac>)
 8010238:	680a      	ldr	r2, [r1, #0]
 801023a:	4614      	mov	r4, r2
 801023c:	b99c      	cbnz	r4, 8010266 <_malloc_r+0x56>
 801023e:	4f20      	ldr	r7, [pc, #128]	; (80102c0 <_malloc_r+0xb0>)
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	b923      	cbnz	r3, 801024e <_malloc_r+0x3e>
 8010244:	4621      	mov	r1, r4
 8010246:	4630      	mov	r0, r6
 8010248:	f000 f83c 	bl	80102c4 <_sbrk_r>
 801024c:	6038      	str	r0, [r7, #0]
 801024e:	4629      	mov	r1, r5
 8010250:	4630      	mov	r0, r6
 8010252:	f000 f837 	bl	80102c4 <_sbrk_r>
 8010256:	1c43      	adds	r3, r0, #1
 8010258:	d123      	bne.n	80102a2 <_malloc_r+0x92>
 801025a:	230c      	movs	r3, #12
 801025c:	6033      	str	r3, [r6, #0]
 801025e:	4630      	mov	r0, r6
 8010260:	f000 f888 	bl	8010374 <__malloc_unlock>
 8010264:	e7e3      	b.n	801022e <_malloc_r+0x1e>
 8010266:	6823      	ldr	r3, [r4, #0]
 8010268:	1b5b      	subs	r3, r3, r5
 801026a:	d417      	bmi.n	801029c <_malloc_r+0x8c>
 801026c:	2b0b      	cmp	r3, #11
 801026e:	d903      	bls.n	8010278 <_malloc_r+0x68>
 8010270:	6023      	str	r3, [r4, #0]
 8010272:	441c      	add	r4, r3
 8010274:	6025      	str	r5, [r4, #0]
 8010276:	e004      	b.n	8010282 <_malloc_r+0x72>
 8010278:	6863      	ldr	r3, [r4, #4]
 801027a:	42a2      	cmp	r2, r4
 801027c:	bf0c      	ite	eq
 801027e:	600b      	streq	r3, [r1, #0]
 8010280:	6053      	strne	r3, [r2, #4]
 8010282:	4630      	mov	r0, r6
 8010284:	f000 f876 	bl	8010374 <__malloc_unlock>
 8010288:	f104 000b 	add.w	r0, r4, #11
 801028c:	1d23      	adds	r3, r4, #4
 801028e:	f020 0007 	bic.w	r0, r0, #7
 8010292:	1ac2      	subs	r2, r0, r3
 8010294:	d0cc      	beq.n	8010230 <_malloc_r+0x20>
 8010296:	1a1b      	subs	r3, r3, r0
 8010298:	50a3      	str	r3, [r4, r2]
 801029a:	e7c9      	b.n	8010230 <_malloc_r+0x20>
 801029c:	4622      	mov	r2, r4
 801029e:	6864      	ldr	r4, [r4, #4]
 80102a0:	e7cc      	b.n	801023c <_malloc_r+0x2c>
 80102a2:	1cc4      	adds	r4, r0, #3
 80102a4:	f024 0403 	bic.w	r4, r4, #3
 80102a8:	42a0      	cmp	r0, r4
 80102aa:	d0e3      	beq.n	8010274 <_malloc_r+0x64>
 80102ac:	1a21      	subs	r1, r4, r0
 80102ae:	4630      	mov	r0, r6
 80102b0:	f000 f808 	bl	80102c4 <_sbrk_r>
 80102b4:	3001      	adds	r0, #1
 80102b6:	d1dd      	bne.n	8010274 <_malloc_r+0x64>
 80102b8:	e7cf      	b.n	801025a <_malloc_r+0x4a>
 80102ba:	bf00      	nop
 80102bc:	24000504 	.word	0x24000504
 80102c0:	24000508 	.word	0x24000508

080102c4 <_sbrk_r>:
 80102c4:	b538      	push	{r3, r4, r5, lr}
 80102c6:	4d06      	ldr	r5, [pc, #24]	; (80102e0 <_sbrk_r+0x1c>)
 80102c8:	2300      	movs	r3, #0
 80102ca:	4604      	mov	r4, r0
 80102cc:	4608      	mov	r0, r1
 80102ce:	602b      	str	r3, [r5, #0]
 80102d0:	f7f2 feac 	bl	800302c <_sbrk>
 80102d4:	1c43      	adds	r3, r0, #1
 80102d6:	d102      	bne.n	80102de <_sbrk_r+0x1a>
 80102d8:	682b      	ldr	r3, [r5, #0]
 80102da:	b103      	cbz	r3, 80102de <_sbrk_r+0x1a>
 80102dc:	6023      	str	r3, [r4, #0]
 80102de:	bd38      	pop	{r3, r4, r5, pc}
 80102e0:	24000d08 	.word	0x24000d08

080102e4 <__assert_func>:
 80102e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102e6:	4614      	mov	r4, r2
 80102e8:	461a      	mov	r2, r3
 80102ea:	4b09      	ldr	r3, [pc, #36]	; (8010310 <__assert_func+0x2c>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	4605      	mov	r5, r0
 80102f0:	68d8      	ldr	r0, [r3, #12]
 80102f2:	b14c      	cbz	r4, 8010308 <__assert_func+0x24>
 80102f4:	4b07      	ldr	r3, [pc, #28]	; (8010314 <__assert_func+0x30>)
 80102f6:	9100      	str	r1, [sp, #0]
 80102f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80102fc:	4906      	ldr	r1, [pc, #24]	; (8010318 <__assert_func+0x34>)
 80102fe:	462b      	mov	r3, r5
 8010300:	f000 f80e 	bl	8010320 <fiprintf>
 8010304:	f000 fa64 	bl	80107d0 <abort>
 8010308:	4b04      	ldr	r3, [pc, #16]	; (801031c <__assert_func+0x38>)
 801030a:	461c      	mov	r4, r3
 801030c:	e7f3      	b.n	80102f6 <__assert_func+0x12>
 801030e:	bf00      	nop
 8010310:	24000024 	.word	0x24000024
 8010314:	08012944 	.word	0x08012944
 8010318:	08012951 	.word	0x08012951
 801031c:	0801297f 	.word	0x0801297f

08010320 <fiprintf>:
 8010320:	b40e      	push	{r1, r2, r3}
 8010322:	b503      	push	{r0, r1, lr}
 8010324:	4601      	mov	r1, r0
 8010326:	ab03      	add	r3, sp, #12
 8010328:	4805      	ldr	r0, [pc, #20]	; (8010340 <fiprintf+0x20>)
 801032a:	f853 2b04 	ldr.w	r2, [r3], #4
 801032e:	6800      	ldr	r0, [r0, #0]
 8010330:	9301      	str	r3, [sp, #4]
 8010332:	f000 f84f 	bl	80103d4 <_vfiprintf_r>
 8010336:	b002      	add	sp, #8
 8010338:	f85d eb04 	ldr.w	lr, [sp], #4
 801033c:	b003      	add	sp, #12
 801033e:	4770      	bx	lr
 8010340:	24000024 	.word	0x24000024

08010344 <__ascii_mbtowc>:
 8010344:	b082      	sub	sp, #8
 8010346:	b901      	cbnz	r1, 801034a <__ascii_mbtowc+0x6>
 8010348:	a901      	add	r1, sp, #4
 801034a:	b142      	cbz	r2, 801035e <__ascii_mbtowc+0x1a>
 801034c:	b14b      	cbz	r3, 8010362 <__ascii_mbtowc+0x1e>
 801034e:	7813      	ldrb	r3, [r2, #0]
 8010350:	600b      	str	r3, [r1, #0]
 8010352:	7812      	ldrb	r2, [r2, #0]
 8010354:	1e10      	subs	r0, r2, #0
 8010356:	bf18      	it	ne
 8010358:	2001      	movne	r0, #1
 801035a:	b002      	add	sp, #8
 801035c:	4770      	bx	lr
 801035e:	4610      	mov	r0, r2
 8010360:	e7fb      	b.n	801035a <__ascii_mbtowc+0x16>
 8010362:	f06f 0001 	mvn.w	r0, #1
 8010366:	e7f8      	b.n	801035a <__ascii_mbtowc+0x16>

08010368 <__malloc_lock>:
 8010368:	4801      	ldr	r0, [pc, #4]	; (8010370 <__malloc_lock+0x8>)
 801036a:	f000 bbf1 	b.w	8010b50 <__retarget_lock_acquire_recursive>
 801036e:	bf00      	nop
 8010370:	24000d10 	.word	0x24000d10

08010374 <__malloc_unlock>:
 8010374:	4801      	ldr	r0, [pc, #4]	; (801037c <__malloc_unlock+0x8>)
 8010376:	f000 bbec 	b.w	8010b52 <__retarget_lock_release_recursive>
 801037a:	bf00      	nop
 801037c:	24000d10 	.word	0x24000d10

08010380 <__sfputc_r>:
 8010380:	6893      	ldr	r3, [r2, #8]
 8010382:	3b01      	subs	r3, #1
 8010384:	2b00      	cmp	r3, #0
 8010386:	b410      	push	{r4}
 8010388:	6093      	str	r3, [r2, #8]
 801038a:	da08      	bge.n	801039e <__sfputc_r+0x1e>
 801038c:	6994      	ldr	r4, [r2, #24]
 801038e:	42a3      	cmp	r3, r4
 8010390:	db01      	blt.n	8010396 <__sfputc_r+0x16>
 8010392:	290a      	cmp	r1, #10
 8010394:	d103      	bne.n	801039e <__sfputc_r+0x1e>
 8010396:	f85d 4b04 	ldr.w	r4, [sp], #4
 801039a:	f000 b94b 	b.w	8010634 <__swbuf_r>
 801039e:	6813      	ldr	r3, [r2, #0]
 80103a0:	1c58      	adds	r0, r3, #1
 80103a2:	6010      	str	r0, [r2, #0]
 80103a4:	7019      	strb	r1, [r3, #0]
 80103a6:	4608      	mov	r0, r1
 80103a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103ac:	4770      	bx	lr

080103ae <__sfputs_r>:
 80103ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b0:	4606      	mov	r6, r0
 80103b2:	460f      	mov	r7, r1
 80103b4:	4614      	mov	r4, r2
 80103b6:	18d5      	adds	r5, r2, r3
 80103b8:	42ac      	cmp	r4, r5
 80103ba:	d101      	bne.n	80103c0 <__sfputs_r+0x12>
 80103bc:	2000      	movs	r0, #0
 80103be:	e007      	b.n	80103d0 <__sfputs_r+0x22>
 80103c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103c4:	463a      	mov	r2, r7
 80103c6:	4630      	mov	r0, r6
 80103c8:	f7ff ffda 	bl	8010380 <__sfputc_r>
 80103cc:	1c43      	adds	r3, r0, #1
 80103ce:	d1f3      	bne.n	80103b8 <__sfputs_r+0xa>
 80103d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080103d4 <_vfiprintf_r>:
 80103d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d8:	460d      	mov	r5, r1
 80103da:	b09d      	sub	sp, #116	; 0x74
 80103dc:	4614      	mov	r4, r2
 80103de:	4698      	mov	r8, r3
 80103e0:	4606      	mov	r6, r0
 80103e2:	b118      	cbz	r0, 80103ec <_vfiprintf_r+0x18>
 80103e4:	6983      	ldr	r3, [r0, #24]
 80103e6:	b90b      	cbnz	r3, 80103ec <_vfiprintf_r+0x18>
 80103e8:	f000 fb14 	bl	8010a14 <__sinit>
 80103ec:	4b89      	ldr	r3, [pc, #548]	; (8010614 <_vfiprintf_r+0x240>)
 80103ee:	429d      	cmp	r5, r3
 80103f0:	d11b      	bne.n	801042a <_vfiprintf_r+0x56>
 80103f2:	6875      	ldr	r5, [r6, #4]
 80103f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103f6:	07d9      	lsls	r1, r3, #31
 80103f8:	d405      	bmi.n	8010406 <_vfiprintf_r+0x32>
 80103fa:	89ab      	ldrh	r3, [r5, #12]
 80103fc:	059a      	lsls	r2, r3, #22
 80103fe:	d402      	bmi.n	8010406 <_vfiprintf_r+0x32>
 8010400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010402:	f000 fba5 	bl	8010b50 <__retarget_lock_acquire_recursive>
 8010406:	89ab      	ldrh	r3, [r5, #12]
 8010408:	071b      	lsls	r3, r3, #28
 801040a:	d501      	bpl.n	8010410 <_vfiprintf_r+0x3c>
 801040c:	692b      	ldr	r3, [r5, #16]
 801040e:	b9eb      	cbnz	r3, 801044c <_vfiprintf_r+0x78>
 8010410:	4629      	mov	r1, r5
 8010412:	4630      	mov	r0, r6
 8010414:	f000 f96e 	bl	80106f4 <__swsetup_r>
 8010418:	b1c0      	cbz	r0, 801044c <_vfiprintf_r+0x78>
 801041a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801041c:	07dc      	lsls	r4, r3, #31
 801041e:	d50e      	bpl.n	801043e <_vfiprintf_r+0x6a>
 8010420:	f04f 30ff 	mov.w	r0, #4294967295
 8010424:	b01d      	add	sp, #116	; 0x74
 8010426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801042a:	4b7b      	ldr	r3, [pc, #492]	; (8010618 <_vfiprintf_r+0x244>)
 801042c:	429d      	cmp	r5, r3
 801042e:	d101      	bne.n	8010434 <_vfiprintf_r+0x60>
 8010430:	68b5      	ldr	r5, [r6, #8]
 8010432:	e7df      	b.n	80103f4 <_vfiprintf_r+0x20>
 8010434:	4b79      	ldr	r3, [pc, #484]	; (801061c <_vfiprintf_r+0x248>)
 8010436:	429d      	cmp	r5, r3
 8010438:	bf08      	it	eq
 801043a:	68f5      	ldreq	r5, [r6, #12]
 801043c:	e7da      	b.n	80103f4 <_vfiprintf_r+0x20>
 801043e:	89ab      	ldrh	r3, [r5, #12]
 8010440:	0598      	lsls	r0, r3, #22
 8010442:	d4ed      	bmi.n	8010420 <_vfiprintf_r+0x4c>
 8010444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010446:	f000 fb84 	bl	8010b52 <__retarget_lock_release_recursive>
 801044a:	e7e9      	b.n	8010420 <_vfiprintf_r+0x4c>
 801044c:	2300      	movs	r3, #0
 801044e:	9309      	str	r3, [sp, #36]	; 0x24
 8010450:	2320      	movs	r3, #32
 8010452:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010456:	f8cd 800c 	str.w	r8, [sp, #12]
 801045a:	2330      	movs	r3, #48	; 0x30
 801045c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010620 <_vfiprintf_r+0x24c>
 8010460:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010464:	f04f 0901 	mov.w	r9, #1
 8010468:	4623      	mov	r3, r4
 801046a:	469a      	mov	sl, r3
 801046c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010470:	b10a      	cbz	r2, 8010476 <_vfiprintf_r+0xa2>
 8010472:	2a25      	cmp	r2, #37	; 0x25
 8010474:	d1f9      	bne.n	801046a <_vfiprintf_r+0x96>
 8010476:	ebba 0b04 	subs.w	fp, sl, r4
 801047a:	d00b      	beq.n	8010494 <_vfiprintf_r+0xc0>
 801047c:	465b      	mov	r3, fp
 801047e:	4622      	mov	r2, r4
 8010480:	4629      	mov	r1, r5
 8010482:	4630      	mov	r0, r6
 8010484:	f7ff ff93 	bl	80103ae <__sfputs_r>
 8010488:	3001      	adds	r0, #1
 801048a:	f000 80aa 	beq.w	80105e2 <_vfiprintf_r+0x20e>
 801048e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010490:	445a      	add	r2, fp
 8010492:	9209      	str	r2, [sp, #36]	; 0x24
 8010494:	f89a 3000 	ldrb.w	r3, [sl]
 8010498:	2b00      	cmp	r3, #0
 801049a:	f000 80a2 	beq.w	80105e2 <_vfiprintf_r+0x20e>
 801049e:	2300      	movs	r3, #0
 80104a0:	f04f 32ff 	mov.w	r2, #4294967295
 80104a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104a8:	f10a 0a01 	add.w	sl, sl, #1
 80104ac:	9304      	str	r3, [sp, #16]
 80104ae:	9307      	str	r3, [sp, #28]
 80104b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104b4:	931a      	str	r3, [sp, #104]	; 0x68
 80104b6:	4654      	mov	r4, sl
 80104b8:	2205      	movs	r2, #5
 80104ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104be:	4858      	ldr	r0, [pc, #352]	; (8010620 <_vfiprintf_r+0x24c>)
 80104c0:	f7ef ff16 	bl	80002f0 <memchr>
 80104c4:	9a04      	ldr	r2, [sp, #16]
 80104c6:	b9d8      	cbnz	r0, 8010500 <_vfiprintf_r+0x12c>
 80104c8:	06d1      	lsls	r1, r2, #27
 80104ca:	bf44      	itt	mi
 80104cc:	2320      	movmi	r3, #32
 80104ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104d2:	0713      	lsls	r3, r2, #28
 80104d4:	bf44      	itt	mi
 80104d6:	232b      	movmi	r3, #43	; 0x2b
 80104d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104dc:	f89a 3000 	ldrb.w	r3, [sl]
 80104e0:	2b2a      	cmp	r3, #42	; 0x2a
 80104e2:	d015      	beq.n	8010510 <_vfiprintf_r+0x13c>
 80104e4:	9a07      	ldr	r2, [sp, #28]
 80104e6:	4654      	mov	r4, sl
 80104e8:	2000      	movs	r0, #0
 80104ea:	f04f 0c0a 	mov.w	ip, #10
 80104ee:	4621      	mov	r1, r4
 80104f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104f4:	3b30      	subs	r3, #48	; 0x30
 80104f6:	2b09      	cmp	r3, #9
 80104f8:	d94e      	bls.n	8010598 <_vfiprintf_r+0x1c4>
 80104fa:	b1b0      	cbz	r0, 801052a <_vfiprintf_r+0x156>
 80104fc:	9207      	str	r2, [sp, #28]
 80104fe:	e014      	b.n	801052a <_vfiprintf_r+0x156>
 8010500:	eba0 0308 	sub.w	r3, r0, r8
 8010504:	fa09 f303 	lsl.w	r3, r9, r3
 8010508:	4313      	orrs	r3, r2
 801050a:	9304      	str	r3, [sp, #16]
 801050c:	46a2      	mov	sl, r4
 801050e:	e7d2      	b.n	80104b6 <_vfiprintf_r+0xe2>
 8010510:	9b03      	ldr	r3, [sp, #12]
 8010512:	1d19      	adds	r1, r3, #4
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	9103      	str	r1, [sp, #12]
 8010518:	2b00      	cmp	r3, #0
 801051a:	bfbb      	ittet	lt
 801051c:	425b      	neglt	r3, r3
 801051e:	f042 0202 	orrlt.w	r2, r2, #2
 8010522:	9307      	strge	r3, [sp, #28]
 8010524:	9307      	strlt	r3, [sp, #28]
 8010526:	bfb8      	it	lt
 8010528:	9204      	strlt	r2, [sp, #16]
 801052a:	7823      	ldrb	r3, [r4, #0]
 801052c:	2b2e      	cmp	r3, #46	; 0x2e
 801052e:	d10c      	bne.n	801054a <_vfiprintf_r+0x176>
 8010530:	7863      	ldrb	r3, [r4, #1]
 8010532:	2b2a      	cmp	r3, #42	; 0x2a
 8010534:	d135      	bne.n	80105a2 <_vfiprintf_r+0x1ce>
 8010536:	9b03      	ldr	r3, [sp, #12]
 8010538:	1d1a      	adds	r2, r3, #4
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	9203      	str	r2, [sp, #12]
 801053e:	2b00      	cmp	r3, #0
 8010540:	bfb8      	it	lt
 8010542:	f04f 33ff 	movlt.w	r3, #4294967295
 8010546:	3402      	adds	r4, #2
 8010548:	9305      	str	r3, [sp, #20]
 801054a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010630 <_vfiprintf_r+0x25c>
 801054e:	7821      	ldrb	r1, [r4, #0]
 8010550:	2203      	movs	r2, #3
 8010552:	4650      	mov	r0, sl
 8010554:	f7ef fecc 	bl	80002f0 <memchr>
 8010558:	b140      	cbz	r0, 801056c <_vfiprintf_r+0x198>
 801055a:	2340      	movs	r3, #64	; 0x40
 801055c:	eba0 000a 	sub.w	r0, r0, sl
 8010560:	fa03 f000 	lsl.w	r0, r3, r0
 8010564:	9b04      	ldr	r3, [sp, #16]
 8010566:	4303      	orrs	r3, r0
 8010568:	3401      	adds	r4, #1
 801056a:	9304      	str	r3, [sp, #16]
 801056c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010570:	482c      	ldr	r0, [pc, #176]	; (8010624 <_vfiprintf_r+0x250>)
 8010572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010576:	2206      	movs	r2, #6
 8010578:	f7ef feba 	bl	80002f0 <memchr>
 801057c:	2800      	cmp	r0, #0
 801057e:	d03f      	beq.n	8010600 <_vfiprintf_r+0x22c>
 8010580:	4b29      	ldr	r3, [pc, #164]	; (8010628 <_vfiprintf_r+0x254>)
 8010582:	bb1b      	cbnz	r3, 80105cc <_vfiprintf_r+0x1f8>
 8010584:	9b03      	ldr	r3, [sp, #12]
 8010586:	3307      	adds	r3, #7
 8010588:	f023 0307 	bic.w	r3, r3, #7
 801058c:	3308      	adds	r3, #8
 801058e:	9303      	str	r3, [sp, #12]
 8010590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010592:	443b      	add	r3, r7
 8010594:	9309      	str	r3, [sp, #36]	; 0x24
 8010596:	e767      	b.n	8010468 <_vfiprintf_r+0x94>
 8010598:	fb0c 3202 	mla	r2, ip, r2, r3
 801059c:	460c      	mov	r4, r1
 801059e:	2001      	movs	r0, #1
 80105a0:	e7a5      	b.n	80104ee <_vfiprintf_r+0x11a>
 80105a2:	2300      	movs	r3, #0
 80105a4:	3401      	adds	r4, #1
 80105a6:	9305      	str	r3, [sp, #20]
 80105a8:	4619      	mov	r1, r3
 80105aa:	f04f 0c0a 	mov.w	ip, #10
 80105ae:	4620      	mov	r0, r4
 80105b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105b4:	3a30      	subs	r2, #48	; 0x30
 80105b6:	2a09      	cmp	r2, #9
 80105b8:	d903      	bls.n	80105c2 <_vfiprintf_r+0x1ee>
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d0c5      	beq.n	801054a <_vfiprintf_r+0x176>
 80105be:	9105      	str	r1, [sp, #20]
 80105c0:	e7c3      	b.n	801054a <_vfiprintf_r+0x176>
 80105c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80105c6:	4604      	mov	r4, r0
 80105c8:	2301      	movs	r3, #1
 80105ca:	e7f0      	b.n	80105ae <_vfiprintf_r+0x1da>
 80105cc:	ab03      	add	r3, sp, #12
 80105ce:	9300      	str	r3, [sp, #0]
 80105d0:	462a      	mov	r2, r5
 80105d2:	4b16      	ldr	r3, [pc, #88]	; (801062c <_vfiprintf_r+0x258>)
 80105d4:	a904      	add	r1, sp, #16
 80105d6:	4630      	mov	r0, r6
 80105d8:	f7fe f86e 	bl	800e6b8 <_printf_float>
 80105dc:	4607      	mov	r7, r0
 80105de:	1c78      	adds	r0, r7, #1
 80105e0:	d1d6      	bne.n	8010590 <_vfiprintf_r+0x1bc>
 80105e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105e4:	07d9      	lsls	r1, r3, #31
 80105e6:	d405      	bmi.n	80105f4 <_vfiprintf_r+0x220>
 80105e8:	89ab      	ldrh	r3, [r5, #12]
 80105ea:	059a      	lsls	r2, r3, #22
 80105ec:	d402      	bmi.n	80105f4 <_vfiprintf_r+0x220>
 80105ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105f0:	f000 faaf 	bl	8010b52 <__retarget_lock_release_recursive>
 80105f4:	89ab      	ldrh	r3, [r5, #12]
 80105f6:	065b      	lsls	r3, r3, #25
 80105f8:	f53f af12 	bmi.w	8010420 <_vfiprintf_r+0x4c>
 80105fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105fe:	e711      	b.n	8010424 <_vfiprintf_r+0x50>
 8010600:	ab03      	add	r3, sp, #12
 8010602:	9300      	str	r3, [sp, #0]
 8010604:	462a      	mov	r2, r5
 8010606:	4b09      	ldr	r3, [pc, #36]	; (801062c <_vfiprintf_r+0x258>)
 8010608:	a904      	add	r1, sp, #16
 801060a:	4630      	mov	r0, r6
 801060c:	f7fe fae0 	bl	800ebd0 <_printf_i>
 8010610:	e7e4      	b.n	80105dc <_vfiprintf_r+0x208>
 8010612:	bf00      	nop
 8010614:	08012abc 	.word	0x08012abc
 8010618:	08012adc 	.word	0x08012adc
 801061c:	08012a9c 	.word	0x08012a9c
 8010620:	0801298a 	.word	0x0801298a
 8010624:	08012994 	.word	0x08012994
 8010628:	0800e6b9 	.word	0x0800e6b9
 801062c:	080103af 	.word	0x080103af
 8010630:	08012990 	.word	0x08012990

08010634 <__swbuf_r>:
 8010634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010636:	460e      	mov	r6, r1
 8010638:	4614      	mov	r4, r2
 801063a:	4605      	mov	r5, r0
 801063c:	b118      	cbz	r0, 8010646 <__swbuf_r+0x12>
 801063e:	6983      	ldr	r3, [r0, #24]
 8010640:	b90b      	cbnz	r3, 8010646 <__swbuf_r+0x12>
 8010642:	f000 f9e7 	bl	8010a14 <__sinit>
 8010646:	4b21      	ldr	r3, [pc, #132]	; (80106cc <__swbuf_r+0x98>)
 8010648:	429c      	cmp	r4, r3
 801064a:	d12b      	bne.n	80106a4 <__swbuf_r+0x70>
 801064c:	686c      	ldr	r4, [r5, #4]
 801064e:	69a3      	ldr	r3, [r4, #24]
 8010650:	60a3      	str	r3, [r4, #8]
 8010652:	89a3      	ldrh	r3, [r4, #12]
 8010654:	071a      	lsls	r2, r3, #28
 8010656:	d52f      	bpl.n	80106b8 <__swbuf_r+0x84>
 8010658:	6923      	ldr	r3, [r4, #16]
 801065a:	b36b      	cbz	r3, 80106b8 <__swbuf_r+0x84>
 801065c:	6923      	ldr	r3, [r4, #16]
 801065e:	6820      	ldr	r0, [r4, #0]
 8010660:	1ac0      	subs	r0, r0, r3
 8010662:	6963      	ldr	r3, [r4, #20]
 8010664:	b2f6      	uxtb	r6, r6
 8010666:	4283      	cmp	r3, r0
 8010668:	4637      	mov	r7, r6
 801066a:	dc04      	bgt.n	8010676 <__swbuf_r+0x42>
 801066c:	4621      	mov	r1, r4
 801066e:	4628      	mov	r0, r5
 8010670:	f000 f93c 	bl	80108ec <_fflush_r>
 8010674:	bb30      	cbnz	r0, 80106c4 <__swbuf_r+0x90>
 8010676:	68a3      	ldr	r3, [r4, #8]
 8010678:	3b01      	subs	r3, #1
 801067a:	60a3      	str	r3, [r4, #8]
 801067c:	6823      	ldr	r3, [r4, #0]
 801067e:	1c5a      	adds	r2, r3, #1
 8010680:	6022      	str	r2, [r4, #0]
 8010682:	701e      	strb	r6, [r3, #0]
 8010684:	6963      	ldr	r3, [r4, #20]
 8010686:	3001      	adds	r0, #1
 8010688:	4283      	cmp	r3, r0
 801068a:	d004      	beq.n	8010696 <__swbuf_r+0x62>
 801068c:	89a3      	ldrh	r3, [r4, #12]
 801068e:	07db      	lsls	r3, r3, #31
 8010690:	d506      	bpl.n	80106a0 <__swbuf_r+0x6c>
 8010692:	2e0a      	cmp	r6, #10
 8010694:	d104      	bne.n	80106a0 <__swbuf_r+0x6c>
 8010696:	4621      	mov	r1, r4
 8010698:	4628      	mov	r0, r5
 801069a:	f000 f927 	bl	80108ec <_fflush_r>
 801069e:	b988      	cbnz	r0, 80106c4 <__swbuf_r+0x90>
 80106a0:	4638      	mov	r0, r7
 80106a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106a4:	4b0a      	ldr	r3, [pc, #40]	; (80106d0 <__swbuf_r+0x9c>)
 80106a6:	429c      	cmp	r4, r3
 80106a8:	d101      	bne.n	80106ae <__swbuf_r+0x7a>
 80106aa:	68ac      	ldr	r4, [r5, #8]
 80106ac:	e7cf      	b.n	801064e <__swbuf_r+0x1a>
 80106ae:	4b09      	ldr	r3, [pc, #36]	; (80106d4 <__swbuf_r+0xa0>)
 80106b0:	429c      	cmp	r4, r3
 80106b2:	bf08      	it	eq
 80106b4:	68ec      	ldreq	r4, [r5, #12]
 80106b6:	e7ca      	b.n	801064e <__swbuf_r+0x1a>
 80106b8:	4621      	mov	r1, r4
 80106ba:	4628      	mov	r0, r5
 80106bc:	f000 f81a 	bl	80106f4 <__swsetup_r>
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d0cb      	beq.n	801065c <__swbuf_r+0x28>
 80106c4:	f04f 37ff 	mov.w	r7, #4294967295
 80106c8:	e7ea      	b.n	80106a0 <__swbuf_r+0x6c>
 80106ca:	bf00      	nop
 80106cc:	08012abc 	.word	0x08012abc
 80106d0:	08012adc 	.word	0x08012adc
 80106d4:	08012a9c 	.word	0x08012a9c

080106d8 <__ascii_wctomb>:
 80106d8:	b149      	cbz	r1, 80106ee <__ascii_wctomb+0x16>
 80106da:	2aff      	cmp	r2, #255	; 0xff
 80106dc:	bf85      	ittet	hi
 80106de:	238a      	movhi	r3, #138	; 0x8a
 80106e0:	6003      	strhi	r3, [r0, #0]
 80106e2:	700a      	strbls	r2, [r1, #0]
 80106e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80106e8:	bf98      	it	ls
 80106ea:	2001      	movls	r0, #1
 80106ec:	4770      	bx	lr
 80106ee:	4608      	mov	r0, r1
 80106f0:	4770      	bx	lr
	...

080106f4 <__swsetup_r>:
 80106f4:	4b32      	ldr	r3, [pc, #200]	; (80107c0 <__swsetup_r+0xcc>)
 80106f6:	b570      	push	{r4, r5, r6, lr}
 80106f8:	681d      	ldr	r5, [r3, #0]
 80106fa:	4606      	mov	r6, r0
 80106fc:	460c      	mov	r4, r1
 80106fe:	b125      	cbz	r5, 801070a <__swsetup_r+0x16>
 8010700:	69ab      	ldr	r3, [r5, #24]
 8010702:	b913      	cbnz	r3, 801070a <__swsetup_r+0x16>
 8010704:	4628      	mov	r0, r5
 8010706:	f000 f985 	bl	8010a14 <__sinit>
 801070a:	4b2e      	ldr	r3, [pc, #184]	; (80107c4 <__swsetup_r+0xd0>)
 801070c:	429c      	cmp	r4, r3
 801070e:	d10f      	bne.n	8010730 <__swsetup_r+0x3c>
 8010710:	686c      	ldr	r4, [r5, #4]
 8010712:	89a3      	ldrh	r3, [r4, #12]
 8010714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010718:	0719      	lsls	r1, r3, #28
 801071a:	d42c      	bmi.n	8010776 <__swsetup_r+0x82>
 801071c:	06dd      	lsls	r5, r3, #27
 801071e:	d411      	bmi.n	8010744 <__swsetup_r+0x50>
 8010720:	2309      	movs	r3, #9
 8010722:	6033      	str	r3, [r6, #0]
 8010724:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010728:	81a3      	strh	r3, [r4, #12]
 801072a:	f04f 30ff 	mov.w	r0, #4294967295
 801072e:	e03e      	b.n	80107ae <__swsetup_r+0xba>
 8010730:	4b25      	ldr	r3, [pc, #148]	; (80107c8 <__swsetup_r+0xd4>)
 8010732:	429c      	cmp	r4, r3
 8010734:	d101      	bne.n	801073a <__swsetup_r+0x46>
 8010736:	68ac      	ldr	r4, [r5, #8]
 8010738:	e7eb      	b.n	8010712 <__swsetup_r+0x1e>
 801073a:	4b24      	ldr	r3, [pc, #144]	; (80107cc <__swsetup_r+0xd8>)
 801073c:	429c      	cmp	r4, r3
 801073e:	bf08      	it	eq
 8010740:	68ec      	ldreq	r4, [r5, #12]
 8010742:	e7e6      	b.n	8010712 <__swsetup_r+0x1e>
 8010744:	0758      	lsls	r0, r3, #29
 8010746:	d512      	bpl.n	801076e <__swsetup_r+0x7a>
 8010748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801074a:	b141      	cbz	r1, 801075e <__swsetup_r+0x6a>
 801074c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010750:	4299      	cmp	r1, r3
 8010752:	d002      	beq.n	801075a <__swsetup_r+0x66>
 8010754:	4630      	mov	r0, r6
 8010756:	f7ff fd0b 	bl	8010170 <_free_r>
 801075a:	2300      	movs	r3, #0
 801075c:	6363      	str	r3, [r4, #52]	; 0x34
 801075e:	89a3      	ldrh	r3, [r4, #12]
 8010760:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010764:	81a3      	strh	r3, [r4, #12]
 8010766:	2300      	movs	r3, #0
 8010768:	6063      	str	r3, [r4, #4]
 801076a:	6923      	ldr	r3, [r4, #16]
 801076c:	6023      	str	r3, [r4, #0]
 801076e:	89a3      	ldrh	r3, [r4, #12]
 8010770:	f043 0308 	orr.w	r3, r3, #8
 8010774:	81a3      	strh	r3, [r4, #12]
 8010776:	6923      	ldr	r3, [r4, #16]
 8010778:	b94b      	cbnz	r3, 801078e <__swsetup_r+0x9a>
 801077a:	89a3      	ldrh	r3, [r4, #12]
 801077c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010784:	d003      	beq.n	801078e <__swsetup_r+0x9a>
 8010786:	4621      	mov	r1, r4
 8010788:	4630      	mov	r0, r6
 801078a:	f000 fa07 	bl	8010b9c <__smakebuf_r>
 801078e:	89a0      	ldrh	r0, [r4, #12]
 8010790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010794:	f010 0301 	ands.w	r3, r0, #1
 8010798:	d00a      	beq.n	80107b0 <__swsetup_r+0xbc>
 801079a:	2300      	movs	r3, #0
 801079c:	60a3      	str	r3, [r4, #8]
 801079e:	6963      	ldr	r3, [r4, #20]
 80107a0:	425b      	negs	r3, r3
 80107a2:	61a3      	str	r3, [r4, #24]
 80107a4:	6923      	ldr	r3, [r4, #16]
 80107a6:	b943      	cbnz	r3, 80107ba <__swsetup_r+0xc6>
 80107a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80107ac:	d1ba      	bne.n	8010724 <__swsetup_r+0x30>
 80107ae:	bd70      	pop	{r4, r5, r6, pc}
 80107b0:	0781      	lsls	r1, r0, #30
 80107b2:	bf58      	it	pl
 80107b4:	6963      	ldrpl	r3, [r4, #20]
 80107b6:	60a3      	str	r3, [r4, #8]
 80107b8:	e7f4      	b.n	80107a4 <__swsetup_r+0xb0>
 80107ba:	2000      	movs	r0, #0
 80107bc:	e7f7      	b.n	80107ae <__swsetup_r+0xba>
 80107be:	bf00      	nop
 80107c0:	24000024 	.word	0x24000024
 80107c4:	08012abc 	.word	0x08012abc
 80107c8:	08012adc 	.word	0x08012adc
 80107cc:	08012a9c 	.word	0x08012a9c

080107d0 <abort>:
 80107d0:	b508      	push	{r3, lr}
 80107d2:	2006      	movs	r0, #6
 80107d4:	f000 fa4a 	bl	8010c6c <raise>
 80107d8:	2001      	movs	r0, #1
 80107da:	f7f2 fbaf 	bl	8002f3c <_exit>
	...

080107e0 <__sflush_r>:
 80107e0:	898a      	ldrh	r2, [r1, #12]
 80107e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107e6:	4605      	mov	r5, r0
 80107e8:	0710      	lsls	r0, r2, #28
 80107ea:	460c      	mov	r4, r1
 80107ec:	d458      	bmi.n	80108a0 <__sflush_r+0xc0>
 80107ee:	684b      	ldr	r3, [r1, #4]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	dc05      	bgt.n	8010800 <__sflush_r+0x20>
 80107f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	dc02      	bgt.n	8010800 <__sflush_r+0x20>
 80107fa:	2000      	movs	r0, #0
 80107fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010802:	2e00      	cmp	r6, #0
 8010804:	d0f9      	beq.n	80107fa <__sflush_r+0x1a>
 8010806:	2300      	movs	r3, #0
 8010808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801080c:	682f      	ldr	r7, [r5, #0]
 801080e:	602b      	str	r3, [r5, #0]
 8010810:	d032      	beq.n	8010878 <__sflush_r+0x98>
 8010812:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010814:	89a3      	ldrh	r3, [r4, #12]
 8010816:	075a      	lsls	r2, r3, #29
 8010818:	d505      	bpl.n	8010826 <__sflush_r+0x46>
 801081a:	6863      	ldr	r3, [r4, #4]
 801081c:	1ac0      	subs	r0, r0, r3
 801081e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010820:	b10b      	cbz	r3, 8010826 <__sflush_r+0x46>
 8010822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010824:	1ac0      	subs	r0, r0, r3
 8010826:	2300      	movs	r3, #0
 8010828:	4602      	mov	r2, r0
 801082a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801082c:	6a21      	ldr	r1, [r4, #32]
 801082e:	4628      	mov	r0, r5
 8010830:	47b0      	blx	r6
 8010832:	1c43      	adds	r3, r0, #1
 8010834:	89a3      	ldrh	r3, [r4, #12]
 8010836:	d106      	bne.n	8010846 <__sflush_r+0x66>
 8010838:	6829      	ldr	r1, [r5, #0]
 801083a:	291d      	cmp	r1, #29
 801083c:	d82c      	bhi.n	8010898 <__sflush_r+0xb8>
 801083e:	4a2a      	ldr	r2, [pc, #168]	; (80108e8 <__sflush_r+0x108>)
 8010840:	40ca      	lsrs	r2, r1
 8010842:	07d6      	lsls	r6, r2, #31
 8010844:	d528      	bpl.n	8010898 <__sflush_r+0xb8>
 8010846:	2200      	movs	r2, #0
 8010848:	6062      	str	r2, [r4, #4]
 801084a:	04d9      	lsls	r1, r3, #19
 801084c:	6922      	ldr	r2, [r4, #16]
 801084e:	6022      	str	r2, [r4, #0]
 8010850:	d504      	bpl.n	801085c <__sflush_r+0x7c>
 8010852:	1c42      	adds	r2, r0, #1
 8010854:	d101      	bne.n	801085a <__sflush_r+0x7a>
 8010856:	682b      	ldr	r3, [r5, #0]
 8010858:	b903      	cbnz	r3, 801085c <__sflush_r+0x7c>
 801085a:	6560      	str	r0, [r4, #84]	; 0x54
 801085c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801085e:	602f      	str	r7, [r5, #0]
 8010860:	2900      	cmp	r1, #0
 8010862:	d0ca      	beq.n	80107fa <__sflush_r+0x1a>
 8010864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010868:	4299      	cmp	r1, r3
 801086a:	d002      	beq.n	8010872 <__sflush_r+0x92>
 801086c:	4628      	mov	r0, r5
 801086e:	f7ff fc7f 	bl	8010170 <_free_r>
 8010872:	2000      	movs	r0, #0
 8010874:	6360      	str	r0, [r4, #52]	; 0x34
 8010876:	e7c1      	b.n	80107fc <__sflush_r+0x1c>
 8010878:	6a21      	ldr	r1, [r4, #32]
 801087a:	2301      	movs	r3, #1
 801087c:	4628      	mov	r0, r5
 801087e:	47b0      	blx	r6
 8010880:	1c41      	adds	r1, r0, #1
 8010882:	d1c7      	bne.n	8010814 <__sflush_r+0x34>
 8010884:	682b      	ldr	r3, [r5, #0]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d0c4      	beq.n	8010814 <__sflush_r+0x34>
 801088a:	2b1d      	cmp	r3, #29
 801088c:	d001      	beq.n	8010892 <__sflush_r+0xb2>
 801088e:	2b16      	cmp	r3, #22
 8010890:	d101      	bne.n	8010896 <__sflush_r+0xb6>
 8010892:	602f      	str	r7, [r5, #0]
 8010894:	e7b1      	b.n	80107fa <__sflush_r+0x1a>
 8010896:	89a3      	ldrh	r3, [r4, #12]
 8010898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801089c:	81a3      	strh	r3, [r4, #12]
 801089e:	e7ad      	b.n	80107fc <__sflush_r+0x1c>
 80108a0:	690f      	ldr	r7, [r1, #16]
 80108a2:	2f00      	cmp	r7, #0
 80108a4:	d0a9      	beq.n	80107fa <__sflush_r+0x1a>
 80108a6:	0793      	lsls	r3, r2, #30
 80108a8:	680e      	ldr	r6, [r1, #0]
 80108aa:	bf08      	it	eq
 80108ac:	694b      	ldreq	r3, [r1, #20]
 80108ae:	600f      	str	r7, [r1, #0]
 80108b0:	bf18      	it	ne
 80108b2:	2300      	movne	r3, #0
 80108b4:	eba6 0807 	sub.w	r8, r6, r7
 80108b8:	608b      	str	r3, [r1, #8]
 80108ba:	f1b8 0f00 	cmp.w	r8, #0
 80108be:	dd9c      	ble.n	80107fa <__sflush_r+0x1a>
 80108c0:	6a21      	ldr	r1, [r4, #32]
 80108c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80108c4:	4643      	mov	r3, r8
 80108c6:	463a      	mov	r2, r7
 80108c8:	4628      	mov	r0, r5
 80108ca:	47b0      	blx	r6
 80108cc:	2800      	cmp	r0, #0
 80108ce:	dc06      	bgt.n	80108de <__sflush_r+0xfe>
 80108d0:	89a3      	ldrh	r3, [r4, #12]
 80108d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108d6:	81a3      	strh	r3, [r4, #12]
 80108d8:	f04f 30ff 	mov.w	r0, #4294967295
 80108dc:	e78e      	b.n	80107fc <__sflush_r+0x1c>
 80108de:	4407      	add	r7, r0
 80108e0:	eba8 0800 	sub.w	r8, r8, r0
 80108e4:	e7e9      	b.n	80108ba <__sflush_r+0xda>
 80108e6:	bf00      	nop
 80108e8:	20400001 	.word	0x20400001

080108ec <_fflush_r>:
 80108ec:	b538      	push	{r3, r4, r5, lr}
 80108ee:	690b      	ldr	r3, [r1, #16]
 80108f0:	4605      	mov	r5, r0
 80108f2:	460c      	mov	r4, r1
 80108f4:	b913      	cbnz	r3, 80108fc <_fflush_r+0x10>
 80108f6:	2500      	movs	r5, #0
 80108f8:	4628      	mov	r0, r5
 80108fa:	bd38      	pop	{r3, r4, r5, pc}
 80108fc:	b118      	cbz	r0, 8010906 <_fflush_r+0x1a>
 80108fe:	6983      	ldr	r3, [r0, #24]
 8010900:	b90b      	cbnz	r3, 8010906 <_fflush_r+0x1a>
 8010902:	f000 f887 	bl	8010a14 <__sinit>
 8010906:	4b14      	ldr	r3, [pc, #80]	; (8010958 <_fflush_r+0x6c>)
 8010908:	429c      	cmp	r4, r3
 801090a:	d11b      	bne.n	8010944 <_fflush_r+0x58>
 801090c:	686c      	ldr	r4, [r5, #4]
 801090e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d0ef      	beq.n	80108f6 <_fflush_r+0xa>
 8010916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010918:	07d0      	lsls	r0, r2, #31
 801091a:	d404      	bmi.n	8010926 <_fflush_r+0x3a>
 801091c:	0599      	lsls	r1, r3, #22
 801091e:	d402      	bmi.n	8010926 <_fflush_r+0x3a>
 8010920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010922:	f000 f915 	bl	8010b50 <__retarget_lock_acquire_recursive>
 8010926:	4628      	mov	r0, r5
 8010928:	4621      	mov	r1, r4
 801092a:	f7ff ff59 	bl	80107e0 <__sflush_r>
 801092e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010930:	07da      	lsls	r2, r3, #31
 8010932:	4605      	mov	r5, r0
 8010934:	d4e0      	bmi.n	80108f8 <_fflush_r+0xc>
 8010936:	89a3      	ldrh	r3, [r4, #12]
 8010938:	059b      	lsls	r3, r3, #22
 801093a:	d4dd      	bmi.n	80108f8 <_fflush_r+0xc>
 801093c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801093e:	f000 f908 	bl	8010b52 <__retarget_lock_release_recursive>
 8010942:	e7d9      	b.n	80108f8 <_fflush_r+0xc>
 8010944:	4b05      	ldr	r3, [pc, #20]	; (801095c <_fflush_r+0x70>)
 8010946:	429c      	cmp	r4, r3
 8010948:	d101      	bne.n	801094e <_fflush_r+0x62>
 801094a:	68ac      	ldr	r4, [r5, #8]
 801094c:	e7df      	b.n	801090e <_fflush_r+0x22>
 801094e:	4b04      	ldr	r3, [pc, #16]	; (8010960 <_fflush_r+0x74>)
 8010950:	429c      	cmp	r4, r3
 8010952:	bf08      	it	eq
 8010954:	68ec      	ldreq	r4, [r5, #12]
 8010956:	e7da      	b.n	801090e <_fflush_r+0x22>
 8010958:	08012abc 	.word	0x08012abc
 801095c:	08012adc 	.word	0x08012adc
 8010960:	08012a9c 	.word	0x08012a9c

08010964 <std>:
 8010964:	2300      	movs	r3, #0
 8010966:	b510      	push	{r4, lr}
 8010968:	4604      	mov	r4, r0
 801096a:	e9c0 3300 	strd	r3, r3, [r0]
 801096e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010972:	6083      	str	r3, [r0, #8]
 8010974:	8181      	strh	r1, [r0, #12]
 8010976:	6643      	str	r3, [r0, #100]	; 0x64
 8010978:	81c2      	strh	r2, [r0, #14]
 801097a:	6183      	str	r3, [r0, #24]
 801097c:	4619      	mov	r1, r3
 801097e:	2208      	movs	r2, #8
 8010980:	305c      	adds	r0, #92	; 0x5c
 8010982:	f7fd fe01 	bl	800e588 <memset>
 8010986:	4b05      	ldr	r3, [pc, #20]	; (801099c <std+0x38>)
 8010988:	6263      	str	r3, [r4, #36]	; 0x24
 801098a:	4b05      	ldr	r3, [pc, #20]	; (80109a0 <std+0x3c>)
 801098c:	62a3      	str	r3, [r4, #40]	; 0x28
 801098e:	4b05      	ldr	r3, [pc, #20]	; (80109a4 <std+0x40>)
 8010990:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010992:	4b05      	ldr	r3, [pc, #20]	; (80109a8 <std+0x44>)
 8010994:	6224      	str	r4, [r4, #32]
 8010996:	6323      	str	r3, [r4, #48]	; 0x30
 8010998:	bd10      	pop	{r4, pc}
 801099a:	bf00      	nop
 801099c:	08010ca5 	.word	0x08010ca5
 80109a0:	08010cc7 	.word	0x08010cc7
 80109a4:	08010cff 	.word	0x08010cff
 80109a8:	08010d23 	.word	0x08010d23

080109ac <_cleanup_r>:
 80109ac:	4901      	ldr	r1, [pc, #4]	; (80109b4 <_cleanup_r+0x8>)
 80109ae:	f000 b8af 	b.w	8010b10 <_fwalk_reent>
 80109b2:	bf00      	nop
 80109b4:	080108ed 	.word	0x080108ed

080109b8 <__sfmoreglue>:
 80109b8:	b570      	push	{r4, r5, r6, lr}
 80109ba:	1e4a      	subs	r2, r1, #1
 80109bc:	2568      	movs	r5, #104	; 0x68
 80109be:	4355      	muls	r5, r2
 80109c0:	460e      	mov	r6, r1
 80109c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80109c6:	f7ff fc23 	bl	8010210 <_malloc_r>
 80109ca:	4604      	mov	r4, r0
 80109cc:	b140      	cbz	r0, 80109e0 <__sfmoreglue+0x28>
 80109ce:	2100      	movs	r1, #0
 80109d0:	e9c0 1600 	strd	r1, r6, [r0]
 80109d4:	300c      	adds	r0, #12
 80109d6:	60a0      	str	r0, [r4, #8]
 80109d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80109dc:	f7fd fdd4 	bl	800e588 <memset>
 80109e0:	4620      	mov	r0, r4
 80109e2:	bd70      	pop	{r4, r5, r6, pc}

080109e4 <__sfp_lock_acquire>:
 80109e4:	4801      	ldr	r0, [pc, #4]	; (80109ec <__sfp_lock_acquire+0x8>)
 80109e6:	f000 b8b3 	b.w	8010b50 <__retarget_lock_acquire_recursive>
 80109ea:	bf00      	nop
 80109ec:	24000d14 	.word	0x24000d14

080109f0 <__sfp_lock_release>:
 80109f0:	4801      	ldr	r0, [pc, #4]	; (80109f8 <__sfp_lock_release+0x8>)
 80109f2:	f000 b8ae 	b.w	8010b52 <__retarget_lock_release_recursive>
 80109f6:	bf00      	nop
 80109f8:	24000d14 	.word	0x24000d14

080109fc <__sinit_lock_acquire>:
 80109fc:	4801      	ldr	r0, [pc, #4]	; (8010a04 <__sinit_lock_acquire+0x8>)
 80109fe:	f000 b8a7 	b.w	8010b50 <__retarget_lock_acquire_recursive>
 8010a02:	bf00      	nop
 8010a04:	24000d0f 	.word	0x24000d0f

08010a08 <__sinit_lock_release>:
 8010a08:	4801      	ldr	r0, [pc, #4]	; (8010a10 <__sinit_lock_release+0x8>)
 8010a0a:	f000 b8a2 	b.w	8010b52 <__retarget_lock_release_recursive>
 8010a0e:	bf00      	nop
 8010a10:	24000d0f 	.word	0x24000d0f

08010a14 <__sinit>:
 8010a14:	b510      	push	{r4, lr}
 8010a16:	4604      	mov	r4, r0
 8010a18:	f7ff fff0 	bl	80109fc <__sinit_lock_acquire>
 8010a1c:	69a3      	ldr	r3, [r4, #24]
 8010a1e:	b11b      	cbz	r3, 8010a28 <__sinit+0x14>
 8010a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a24:	f7ff bff0 	b.w	8010a08 <__sinit_lock_release>
 8010a28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010a2c:	6523      	str	r3, [r4, #80]	; 0x50
 8010a2e:	4b13      	ldr	r3, [pc, #76]	; (8010a7c <__sinit+0x68>)
 8010a30:	4a13      	ldr	r2, [pc, #76]	; (8010a80 <__sinit+0x6c>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	62a2      	str	r2, [r4, #40]	; 0x28
 8010a36:	42a3      	cmp	r3, r4
 8010a38:	bf04      	itt	eq
 8010a3a:	2301      	moveq	r3, #1
 8010a3c:	61a3      	streq	r3, [r4, #24]
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f000 f820 	bl	8010a84 <__sfp>
 8010a44:	6060      	str	r0, [r4, #4]
 8010a46:	4620      	mov	r0, r4
 8010a48:	f000 f81c 	bl	8010a84 <__sfp>
 8010a4c:	60a0      	str	r0, [r4, #8]
 8010a4e:	4620      	mov	r0, r4
 8010a50:	f000 f818 	bl	8010a84 <__sfp>
 8010a54:	2200      	movs	r2, #0
 8010a56:	60e0      	str	r0, [r4, #12]
 8010a58:	2104      	movs	r1, #4
 8010a5a:	6860      	ldr	r0, [r4, #4]
 8010a5c:	f7ff ff82 	bl	8010964 <std>
 8010a60:	68a0      	ldr	r0, [r4, #8]
 8010a62:	2201      	movs	r2, #1
 8010a64:	2109      	movs	r1, #9
 8010a66:	f7ff ff7d 	bl	8010964 <std>
 8010a6a:	68e0      	ldr	r0, [r4, #12]
 8010a6c:	2202      	movs	r2, #2
 8010a6e:	2112      	movs	r1, #18
 8010a70:	f7ff ff78 	bl	8010964 <std>
 8010a74:	2301      	movs	r3, #1
 8010a76:	61a3      	str	r3, [r4, #24]
 8010a78:	e7d2      	b.n	8010a20 <__sinit+0xc>
 8010a7a:	bf00      	nop
 8010a7c:	08012718 	.word	0x08012718
 8010a80:	080109ad 	.word	0x080109ad

08010a84 <__sfp>:
 8010a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a86:	4607      	mov	r7, r0
 8010a88:	f7ff ffac 	bl	80109e4 <__sfp_lock_acquire>
 8010a8c:	4b1e      	ldr	r3, [pc, #120]	; (8010b08 <__sfp+0x84>)
 8010a8e:	681e      	ldr	r6, [r3, #0]
 8010a90:	69b3      	ldr	r3, [r6, #24]
 8010a92:	b913      	cbnz	r3, 8010a9a <__sfp+0x16>
 8010a94:	4630      	mov	r0, r6
 8010a96:	f7ff ffbd 	bl	8010a14 <__sinit>
 8010a9a:	3648      	adds	r6, #72	; 0x48
 8010a9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010aa0:	3b01      	subs	r3, #1
 8010aa2:	d503      	bpl.n	8010aac <__sfp+0x28>
 8010aa4:	6833      	ldr	r3, [r6, #0]
 8010aa6:	b30b      	cbz	r3, 8010aec <__sfp+0x68>
 8010aa8:	6836      	ldr	r6, [r6, #0]
 8010aaa:	e7f7      	b.n	8010a9c <__sfp+0x18>
 8010aac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010ab0:	b9d5      	cbnz	r5, 8010ae8 <__sfp+0x64>
 8010ab2:	4b16      	ldr	r3, [pc, #88]	; (8010b0c <__sfp+0x88>)
 8010ab4:	60e3      	str	r3, [r4, #12]
 8010ab6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010aba:	6665      	str	r5, [r4, #100]	; 0x64
 8010abc:	f000 f847 	bl	8010b4e <__retarget_lock_init_recursive>
 8010ac0:	f7ff ff96 	bl	80109f0 <__sfp_lock_release>
 8010ac4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010ac8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010acc:	6025      	str	r5, [r4, #0]
 8010ace:	61a5      	str	r5, [r4, #24]
 8010ad0:	2208      	movs	r2, #8
 8010ad2:	4629      	mov	r1, r5
 8010ad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ad8:	f7fd fd56 	bl	800e588 <memset>
 8010adc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ae8:	3468      	adds	r4, #104	; 0x68
 8010aea:	e7d9      	b.n	8010aa0 <__sfp+0x1c>
 8010aec:	2104      	movs	r1, #4
 8010aee:	4638      	mov	r0, r7
 8010af0:	f7ff ff62 	bl	80109b8 <__sfmoreglue>
 8010af4:	4604      	mov	r4, r0
 8010af6:	6030      	str	r0, [r6, #0]
 8010af8:	2800      	cmp	r0, #0
 8010afa:	d1d5      	bne.n	8010aa8 <__sfp+0x24>
 8010afc:	f7ff ff78 	bl	80109f0 <__sfp_lock_release>
 8010b00:	230c      	movs	r3, #12
 8010b02:	603b      	str	r3, [r7, #0]
 8010b04:	e7ee      	b.n	8010ae4 <__sfp+0x60>
 8010b06:	bf00      	nop
 8010b08:	08012718 	.word	0x08012718
 8010b0c:	ffff0001 	.word	0xffff0001

08010b10 <_fwalk_reent>:
 8010b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b14:	4606      	mov	r6, r0
 8010b16:	4688      	mov	r8, r1
 8010b18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010b1c:	2700      	movs	r7, #0
 8010b1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b22:	f1b9 0901 	subs.w	r9, r9, #1
 8010b26:	d505      	bpl.n	8010b34 <_fwalk_reent+0x24>
 8010b28:	6824      	ldr	r4, [r4, #0]
 8010b2a:	2c00      	cmp	r4, #0
 8010b2c:	d1f7      	bne.n	8010b1e <_fwalk_reent+0xe>
 8010b2e:	4638      	mov	r0, r7
 8010b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b34:	89ab      	ldrh	r3, [r5, #12]
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	d907      	bls.n	8010b4a <_fwalk_reent+0x3a>
 8010b3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b3e:	3301      	adds	r3, #1
 8010b40:	d003      	beq.n	8010b4a <_fwalk_reent+0x3a>
 8010b42:	4629      	mov	r1, r5
 8010b44:	4630      	mov	r0, r6
 8010b46:	47c0      	blx	r8
 8010b48:	4307      	orrs	r7, r0
 8010b4a:	3568      	adds	r5, #104	; 0x68
 8010b4c:	e7e9      	b.n	8010b22 <_fwalk_reent+0x12>

08010b4e <__retarget_lock_init_recursive>:
 8010b4e:	4770      	bx	lr

08010b50 <__retarget_lock_acquire_recursive>:
 8010b50:	4770      	bx	lr

08010b52 <__retarget_lock_release_recursive>:
 8010b52:	4770      	bx	lr

08010b54 <__swhatbuf_r>:
 8010b54:	b570      	push	{r4, r5, r6, lr}
 8010b56:	460e      	mov	r6, r1
 8010b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b5c:	2900      	cmp	r1, #0
 8010b5e:	b096      	sub	sp, #88	; 0x58
 8010b60:	4614      	mov	r4, r2
 8010b62:	461d      	mov	r5, r3
 8010b64:	da07      	bge.n	8010b76 <__swhatbuf_r+0x22>
 8010b66:	2300      	movs	r3, #0
 8010b68:	602b      	str	r3, [r5, #0]
 8010b6a:	89b3      	ldrh	r3, [r6, #12]
 8010b6c:	061a      	lsls	r2, r3, #24
 8010b6e:	d410      	bmi.n	8010b92 <__swhatbuf_r+0x3e>
 8010b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b74:	e00e      	b.n	8010b94 <__swhatbuf_r+0x40>
 8010b76:	466a      	mov	r2, sp
 8010b78:	f000 f8fa 	bl	8010d70 <_fstat_r>
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	dbf2      	blt.n	8010b66 <__swhatbuf_r+0x12>
 8010b80:	9a01      	ldr	r2, [sp, #4]
 8010b82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010b86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010b8a:	425a      	negs	r2, r3
 8010b8c:	415a      	adcs	r2, r3
 8010b8e:	602a      	str	r2, [r5, #0]
 8010b90:	e7ee      	b.n	8010b70 <__swhatbuf_r+0x1c>
 8010b92:	2340      	movs	r3, #64	; 0x40
 8010b94:	2000      	movs	r0, #0
 8010b96:	6023      	str	r3, [r4, #0]
 8010b98:	b016      	add	sp, #88	; 0x58
 8010b9a:	bd70      	pop	{r4, r5, r6, pc}

08010b9c <__smakebuf_r>:
 8010b9c:	898b      	ldrh	r3, [r1, #12]
 8010b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ba0:	079d      	lsls	r5, r3, #30
 8010ba2:	4606      	mov	r6, r0
 8010ba4:	460c      	mov	r4, r1
 8010ba6:	d507      	bpl.n	8010bb8 <__smakebuf_r+0x1c>
 8010ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010bac:	6023      	str	r3, [r4, #0]
 8010bae:	6123      	str	r3, [r4, #16]
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	6163      	str	r3, [r4, #20]
 8010bb4:	b002      	add	sp, #8
 8010bb6:	bd70      	pop	{r4, r5, r6, pc}
 8010bb8:	ab01      	add	r3, sp, #4
 8010bba:	466a      	mov	r2, sp
 8010bbc:	f7ff ffca 	bl	8010b54 <__swhatbuf_r>
 8010bc0:	9900      	ldr	r1, [sp, #0]
 8010bc2:	4605      	mov	r5, r0
 8010bc4:	4630      	mov	r0, r6
 8010bc6:	f7ff fb23 	bl	8010210 <_malloc_r>
 8010bca:	b948      	cbnz	r0, 8010be0 <__smakebuf_r+0x44>
 8010bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bd0:	059a      	lsls	r2, r3, #22
 8010bd2:	d4ef      	bmi.n	8010bb4 <__smakebuf_r+0x18>
 8010bd4:	f023 0303 	bic.w	r3, r3, #3
 8010bd8:	f043 0302 	orr.w	r3, r3, #2
 8010bdc:	81a3      	strh	r3, [r4, #12]
 8010bde:	e7e3      	b.n	8010ba8 <__smakebuf_r+0xc>
 8010be0:	4b0d      	ldr	r3, [pc, #52]	; (8010c18 <__smakebuf_r+0x7c>)
 8010be2:	62b3      	str	r3, [r6, #40]	; 0x28
 8010be4:	89a3      	ldrh	r3, [r4, #12]
 8010be6:	6020      	str	r0, [r4, #0]
 8010be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bec:	81a3      	strh	r3, [r4, #12]
 8010bee:	9b00      	ldr	r3, [sp, #0]
 8010bf0:	6163      	str	r3, [r4, #20]
 8010bf2:	9b01      	ldr	r3, [sp, #4]
 8010bf4:	6120      	str	r0, [r4, #16]
 8010bf6:	b15b      	cbz	r3, 8010c10 <__smakebuf_r+0x74>
 8010bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bfc:	4630      	mov	r0, r6
 8010bfe:	f000 f8c9 	bl	8010d94 <_isatty_r>
 8010c02:	b128      	cbz	r0, 8010c10 <__smakebuf_r+0x74>
 8010c04:	89a3      	ldrh	r3, [r4, #12]
 8010c06:	f023 0303 	bic.w	r3, r3, #3
 8010c0a:	f043 0301 	orr.w	r3, r3, #1
 8010c0e:	81a3      	strh	r3, [r4, #12]
 8010c10:	89a0      	ldrh	r0, [r4, #12]
 8010c12:	4305      	orrs	r5, r0
 8010c14:	81a5      	strh	r5, [r4, #12]
 8010c16:	e7cd      	b.n	8010bb4 <__smakebuf_r+0x18>
 8010c18:	080109ad 	.word	0x080109ad

08010c1c <_raise_r>:
 8010c1c:	291f      	cmp	r1, #31
 8010c1e:	b538      	push	{r3, r4, r5, lr}
 8010c20:	4604      	mov	r4, r0
 8010c22:	460d      	mov	r5, r1
 8010c24:	d904      	bls.n	8010c30 <_raise_r+0x14>
 8010c26:	2316      	movs	r3, #22
 8010c28:	6003      	str	r3, [r0, #0]
 8010c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c2e:	bd38      	pop	{r3, r4, r5, pc}
 8010c30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010c32:	b112      	cbz	r2, 8010c3a <_raise_r+0x1e>
 8010c34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c38:	b94b      	cbnz	r3, 8010c4e <_raise_r+0x32>
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f000 f830 	bl	8010ca0 <_getpid_r>
 8010c40:	462a      	mov	r2, r5
 8010c42:	4601      	mov	r1, r0
 8010c44:	4620      	mov	r0, r4
 8010c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c4a:	f000 b817 	b.w	8010c7c <_kill_r>
 8010c4e:	2b01      	cmp	r3, #1
 8010c50:	d00a      	beq.n	8010c68 <_raise_r+0x4c>
 8010c52:	1c59      	adds	r1, r3, #1
 8010c54:	d103      	bne.n	8010c5e <_raise_r+0x42>
 8010c56:	2316      	movs	r3, #22
 8010c58:	6003      	str	r3, [r0, #0]
 8010c5a:	2001      	movs	r0, #1
 8010c5c:	e7e7      	b.n	8010c2e <_raise_r+0x12>
 8010c5e:	2400      	movs	r4, #0
 8010c60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010c64:	4628      	mov	r0, r5
 8010c66:	4798      	blx	r3
 8010c68:	2000      	movs	r0, #0
 8010c6a:	e7e0      	b.n	8010c2e <_raise_r+0x12>

08010c6c <raise>:
 8010c6c:	4b02      	ldr	r3, [pc, #8]	; (8010c78 <raise+0xc>)
 8010c6e:	4601      	mov	r1, r0
 8010c70:	6818      	ldr	r0, [r3, #0]
 8010c72:	f7ff bfd3 	b.w	8010c1c <_raise_r>
 8010c76:	bf00      	nop
 8010c78:	24000024 	.word	0x24000024

08010c7c <_kill_r>:
 8010c7c:	b538      	push	{r3, r4, r5, lr}
 8010c7e:	4d07      	ldr	r5, [pc, #28]	; (8010c9c <_kill_r+0x20>)
 8010c80:	2300      	movs	r3, #0
 8010c82:	4604      	mov	r4, r0
 8010c84:	4608      	mov	r0, r1
 8010c86:	4611      	mov	r1, r2
 8010c88:	602b      	str	r3, [r5, #0]
 8010c8a:	f7f2 f947 	bl	8002f1c <_kill>
 8010c8e:	1c43      	adds	r3, r0, #1
 8010c90:	d102      	bne.n	8010c98 <_kill_r+0x1c>
 8010c92:	682b      	ldr	r3, [r5, #0]
 8010c94:	b103      	cbz	r3, 8010c98 <_kill_r+0x1c>
 8010c96:	6023      	str	r3, [r4, #0]
 8010c98:	bd38      	pop	{r3, r4, r5, pc}
 8010c9a:	bf00      	nop
 8010c9c:	24000d08 	.word	0x24000d08

08010ca0 <_getpid_r>:
 8010ca0:	f7f2 b934 	b.w	8002f0c <_getpid>

08010ca4 <__sread>:
 8010ca4:	b510      	push	{r4, lr}
 8010ca6:	460c      	mov	r4, r1
 8010ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cac:	f000 f894 	bl	8010dd8 <_read_r>
 8010cb0:	2800      	cmp	r0, #0
 8010cb2:	bfab      	itete	ge
 8010cb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010cb6:	89a3      	ldrhlt	r3, [r4, #12]
 8010cb8:	181b      	addge	r3, r3, r0
 8010cba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010cbe:	bfac      	ite	ge
 8010cc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010cc2:	81a3      	strhlt	r3, [r4, #12]
 8010cc4:	bd10      	pop	{r4, pc}

08010cc6 <__swrite>:
 8010cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cca:	461f      	mov	r7, r3
 8010ccc:	898b      	ldrh	r3, [r1, #12]
 8010cce:	05db      	lsls	r3, r3, #23
 8010cd0:	4605      	mov	r5, r0
 8010cd2:	460c      	mov	r4, r1
 8010cd4:	4616      	mov	r6, r2
 8010cd6:	d505      	bpl.n	8010ce4 <__swrite+0x1e>
 8010cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cdc:	2302      	movs	r3, #2
 8010cde:	2200      	movs	r2, #0
 8010ce0:	f000 f868 	bl	8010db4 <_lseek_r>
 8010ce4:	89a3      	ldrh	r3, [r4, #12]
 8010ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010cee:	81a3      	strh	r3, [r4, #12]
 8010cf0:	4632      	mov	r2, r6
 8010cf2:	463b      	mov	r3, r7
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cfa:	f000 b817 	b.w	8010d2c <_write_r>

08010cfe <__sseek>:
 8010cfe:	b510      	push	{r4, lr}
 8010d00:	460c      	mov	r4, r1
 8010d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d06:	f000 f855 	bl	8010db4 <_lseek_r>
 8010d0a:	1c43      	adds	r3, r0, #1
 8010d0c:	89a3      	ldrh	r3, [r4, #12]
 8010d0e:	bf15      	itete	ne
 8010d10:	6560      	strne	r0, [r4, #84]	; 0x54
 8010d12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010d16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010d1a:	81a3      	strheq	r3, [r4, #12]
 8010d1c:	bf18      	it	ne
 8010d1e:	81a3      	strhne	r3, [r4, #12]
 8010d20:	bd10      	pop	{r4, pc}

08010d22 <__sclose>:
 8010d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d26:	f000 b813 	b.w	8010d50 <_close_r>
	...

08010d2c <_write_r>:
 8010d2c:	b538      	push	{r3, r4, r5, lr}
 8010d2e:	4d07      	ldr	r5, [pc, #28]	; (8010d4c <_write_r+0x20>)
 8010d30:	4604      	mov	r4, r0
 8010d32:	4608      	mov	r0, r1
 8010d34:	4611      	mov	r1, r2
 8010d36:	2200      	movs	r2, #0
 8010d38:	602a      	str	r2, [r5, #0]
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	f7f2 f925 	bl	8002f8a <_write>
 8010d40:	1c43      	adds	r3, r0, #1
 8010d42:	d102      	bne.n	8010d4a <_write_r+0x1e>
 8010d44:	682b      	ldr	r3, [r5, #0]
 8010d46:	b103      	cbz	r3, 8010d4a <_write_r+0x1e>
 8010d48:	6023      	str	r3, [r4, #0]
 8010d4a:	bd38      	pop	{r3, r4, r5, pc}
 8010d4c:	24000d08 	.word	0x24000d08

08010d50 <_close_r>:
 8010d50:	b538      	push	{r3, r4, r5, lr}
 8010d52:	4d06      	ldr	r5, [pc, #24]	; (8010d6c <_close_r+0x1c>)
 8010d54:	2300      	movs	r3, #0
 8010d56:	4604      	mov	r4, r0
 8010d58:	4608      	mov	r0, r1
 8010d5a:	602b      	str	r3, [r5, #0]
 8010d5c:	f7f2 f931 	bl	8002fc2 <_close>
 8010d60:	1c43      	adds	r3, r0, #1
 8010d62:	d102      	bne.n	8010d6a <_close_r+0x1a>
 8010d64:	682b      	ldr	r3, [r5, #0]
 8010d66:	b103      	cbz	r3, 8010d6a <_close_r+0x1a>
 8010d68:	6023      	str	r3, [r4, #0]
 8010d6a:	bd38      	pop	{r3, r4, r5, pc}
 8010d6c:	24000d08 	.word	0x24000d08

08010d70 <_fstat_r>:
 8010d70:	b538      	push	{r3, r4, r5, lr}
 8010d72:	4d07      	ldr	r5, [pc, #28]	; (8010d90 <_fstat_r+0x20>)
 8010d74:	2300      	movs	r3, #0
 8010d76:	4604      	mov	r4, r0
 8010d78:	4608      	mov	r0, r1
 8010d7a:	4611      	mov	r1, r2
 8010d7c:	602b      	str	r3, [r5, #0]
 8010d7e:	f7f2 f92c 	bl	8002fda <_fstat>
 8010d82:	1c43      	adds	r3, r0, #1
 8010d84:	d102      	bne.n	8010d8c <_fstat_r+0x1c>
 8010d86:	682b      	ldr	r3, [r5, #0]
 8010d88:	b103      	cbz	r3, 8010d8c <_fstat_r+0x1c>
 8010d8a:	6023      	str	r3, [r4, #0]
 8010d8c:	bd38      	pop	{r3, r4, r5, pc}
 8010d8e:	bf00      	nop
 8010d90:	24000d08 	.word	0x24000d08

08010d94 <_isatty_r>:
 8010d94:	b538      	push	{r3, r4, r5, lr}
 8010d96:	4d06      	ldr	r5, [pc, #24]	; (8010db0 <_isatty_r+0x1c>)
 8010d98:	2300      	movs	r3, #0
 8010d9a:	4604      	mov	r4, r0
 8010d9c:	4608      	mov	r0, r1
 8010d9e:	602b      	str	r3, [r5, #0]
 8010da0:	f7f2 f92b 	bl	8002ffa <_isatty>
 8010da4:	1c43      	adds	r3, r0, #1
 8010da6:	d102      	bne.n	8010dae <_isatty_r+0x1a>
 8010da8:	682b      	ldr	r3, [r5, #0]
 8010daa:	b103      	cbz	r3, 8010dae <_isatty_r+0x1a>
 8010dac:	6023      	str	r3, [r4, #0]
 8010dae:	bd38      	pop	{r3, r4, r5, pc}
 8010db0:	24000d08 	.word	0x24000d08

08010db4 <_lseek_r>:
 8010db4:	b538      	push	{r3, r4, r5, lr}
 8010db6:	4d07      	ldr	r5, [pc, #28]	; (8010dd4 <_lseek_r+0x20>)
 8010db8:	4604      	mov	r4, r0
 8010dba:	4608      	mov	r0, r1
 8010dbc:	4611      	mov	r1, r2
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	602a      	str	r2, [r5, #0]
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	f7f2 f924 	bl	8003010 <_lseek>
 8010dc8:	1c43      	adds	r3, r0, #1
 8010dca:	d102      	bne.n	8010dd2 <_lseek_r+0x1e>
 8010dcc:	682b      	ldr	r3, [r5, #0]
 8010dce:	b103      	cbz	r3, 8010dd2 <_lseek_r+0x1e>
 8010dd0:	6023      	str	r3, [r4, #0]
 8010dd2:	bd38      	pop	{r3, r4, r5, pc}
 8010dd4:	24000d08 	.word	0x24000d08

08010dd8 <_read_r>:
 8010dd8:	b538      	push	{r3, r4, r5, lr}
 8010dda:	4d07      	ldr	r5, [pc, #28]	; (8010df8 <_read_r+0x20>)
 8010ddc:	4604      	mov	r4, r0
 8010dde:	4608      	mov	r0, r1
 8010de0:	4611      	mov	r1, r2
 8010de2:	2200      	movs	r2, #0
 8010de4:	602a      	str	r2, [r5, #0]
 8010de6:	461a      	mov	r2, r3
 8010de8:	f7f2 f8b2 	bl	8002f50 <_read>
 8010dec:	1c43      	adds	r3, r0, #1
 8010dee:	d102      	bne.n	8010df6 <_read_r+0x1e>
 8010df0:	682b      	ldr	r3, [r5, #0]
 8010df2:	b103      	cbz	r3, 8010df6 <_read_r+0x1e>
 8010df4:	6023      	str	r3, [r4, #0]
 8010df6:	bd38      	pop	{r3, r4, r5, pc}
 8010df8:	24000d08 	.word	0x24000d08

08010dfc <_init>:
 8010dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfe:	bf00      	nop
 8010e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e02:	bc08      	pop	{r3}
 8010e04:	469e      	mov	lr, r3
 8010e06:	4770      	bx	lr

08010e08 <_fini>:
 8010e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e0a:	bf00      	nop
 8010e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e0e:	bc08      	pop	{r3}
 8010e10:	469e      	mov	lr, r3
 8010e12:	4770      	bx	lr
