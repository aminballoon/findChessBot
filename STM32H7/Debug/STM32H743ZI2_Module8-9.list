
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f100  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800f3a0  0800f3a0  0001f3a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f93c  0800f93c  0001f93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f944  0800f944  0001f944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0800f94c  0800f94c  0001f94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000208  24000000  0800f954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000934  24000208  0800fb5c  00020208  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000b3c  0800fb5c  00020b3c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030411  00000000  00000000  00020236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044cf  00000000  00000000  00050647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001558  00000000  00000000  00054b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001420  00000000  00000000  00056070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc28  00000000  00000000  00057490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dbe6  00000000  00000000  000940b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d2e6  00000000  00000000  000b1c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021ef84  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006b00  00000000  00000000  0021efd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f388 	.word	0x0800f388

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	0800f388 	.word	0x0800f388

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96e 	b.w	80009fc <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468c      	mov	ip, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8083 	bne.w	800084e <__udivmoddi4+0x116>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d947      	bls.n	80007de <__udivmoddi4+0xa6>
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	b142      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000754:	f1c2 0020 	rsb	r0, r2, #32
 8000758:	fa24 f000 	lsr.w	r0, r4, r0
 800075c:	4091      	lsls	r1, r2
 800075e:	4097      	lsls	r7, r2
 8000760:	ea40 0c01 	orr.w	ip, r0, r1
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbbc f6f8 	udiv	r6, ip, r8
 8000770:	fa1f fe87 	uxth.w	lr, r7
 8000774:	fb08 c116 	mls	r1, r8, r6, ip
 8000778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077c:	fb06 f10e 	mul.w	r1, r6, lr
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295
 800078a:	f080 8119 	bcs.w	80009c0 <__udivmoddi4+0x288>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8116 	bls.w	80009c0 <__udivmoddi4+0x288>
 8000794:	3e02      	subs	r6, #2
 8000796:	443b      	add	r3, r7
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	193c      	adds	r4, r7, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8105 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	f240 8102 	bls.w	80009c4 <__udivmoddi4+0x28c>
 80007c0:	3802      	subs	r0, #2
 80007c2:	443c      	add	r4, r7
 80007c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	b902      	cbnz	r2, 80007e2 <__udivmoddi4+0xaa>
 80007e0:	deff      	udf	#255	; 0xff
 80007e2:	fab2 f282 	clz	r2, r2
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d150      	bne.n	800088c <__udivmoddi4+0x154>
 80007ea:	1bcb      	subs	r3, r1, r7
 80007ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	2601      	movs	r6, #1
 80007f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007fa:	0c21      	lsrs	r1, r4, #16
 80007fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb08 f30c 	mul.w	r3, r8, ip
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0xe4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0xe2>
 8000814:	428b      	cmp	r3, r1
 8000816:	f200 80e9 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 800081a:	4684      	mov	ip, r0
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1110 	mls	r1, lr, r0, r1
 8000828:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x10c>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x10a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80d9 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e7bf      	b.n	80007ce <__udivmoddi4+0x96>
 800084e:	428b      	cmp	r3, r1
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x12e>
 8000852:	2d00      	cmp	r5, #0
 8000854:	f000 80b1 	beq.w	80009ba <__udivmoddi4+0x282>
 8000858:	2600      	movs	r6, #0
 800085a:	e9c5 0100 	strd	r0, r1, [r5]
 800085e:	4630      	mov	r0, r6
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	fab3 f683 	clz	r6, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d14a      	bne.n	8000904 <__udivmoddi4+0x1cc>
 800086e:	428b      	cmp	r3, r1
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0x140>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 80b8 	bhi.w	80009e8 <__udivmoddi4+0x2b0>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb61 0103 	sbc.w	r1, r1, r3
 800087e:	2001      	movs	r0, #1
 8000880:	468c      	mov	ip, r1
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0a8      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000886:	e9c5 4c00 	strd	r4, ip, [r5]
 800088a:	e7a5      	b.n	80007d8 <__udivmoddi4+0xa0>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f603 	lsr.w	r6, r0, r3
 8000894:	4097      	lsls	r7, r2
 8000896:	fa01 f002 	lsl.w	r0, r1, r2
 800089a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089e:	40d9      	lsrs	r1, r3
 80008a0:	4330      	orrs	r0, r6
 80008a2:	0c03      	lsrs	r3, r0, #16
 80008a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008a8:	fa1f f887 	uxth.w	r8, r7
 80008ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b4:	fb06 f108 	mul.w	r1, r6, r8
 80008b8:	4299      	cmp	r1, r3
 80008ba:	fa04 f402 	lsl.w	r4, r4, r2
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x19c>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008c6:	f080 808d 	bcs.w	80009e4 <__udivmoddi4+0x2ac>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 808a 	bls.w	80009e4 <__udivmoddi4+0x2ac>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b281      	uxth	r1, r0
 80008d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e4:	fb00 f308 	mul.w	r3, r0, r8
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x1c4>
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f2:	d273      	bcs.n	80009dc <__udivmoddi4+0x2a4>
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d971      	bls.n	80009dc <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4439      	add	r1, r7
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000902:	e778      	b.n	80007f6 <__udivmoddi4+0xbe>
 8000904:	f1c6 0c20 	rsb	ip, r6, #32
 8000908:	fa03 f406 	lsl.w	r4, r3, r6
 800090c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000910:	431c      	orrs	r4, r3
 8000912:	fa20 f70c 	lsr.w	r7, r0, ip
 8000916:	fa01 f306 	lsl.w	r3, r1, r6
 800091a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800091e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000922:	431f      	orrs	r7, r3
 8000924:	0c3b      	lsrs	r3, r7, #16
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fa1f f884 	uxth.w	r8, r4
 800092e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000932:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000936:	fb09 fa08 	mul.w	sl, r9, r8
 800093a:	458a      	cmp	sl, r1
 800093c:	fa02 f206 	lsl.w	r2, r2, r6
 8000940:	fa00 f306 	lsl.w	r3, r0, r6
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x220>
 8000946:	1861      	adds	r1, r4, r1
 8000948:	f109 30ff 	add.w	r0, r9, #4294967295
 800094c:	d248      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 800094e:	458a      	cmp	sl, r1
 8000950:	d946      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 8000952:	f1a9 0902 	sub.w	r9, r9, #2
 8000956:	4421      	add	r1, r4
 8000958:	eba1 010a 	sub.w	r1, r1, sl
 800095c:	b2bf      	uxth	r7, r7
 800095e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000962:	fb0e 1110 	mls	r1, lr, r0, r1
 8000966:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800096a:	fb00 f808 	mul.w	r8, r0, r8
 800096e:	45b8      	cmp	r8, r7
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x24a>
 8000972:	19e7      	adds	r7, r4, r7
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d22e      	bcs.n	80009d8 <__udivmoddi4+0x2a0>
 800097a:	45b8      	cmp	r8, r7
 800097c:	d92c      	bls.n	80009d8 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	4427      	add	r7, r4
 8000982:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000986:	eba7 0708 	sub.w	r7, r7, r8
 800098a:	fba0 8902 	umull	r8, r9, r0, r2
 800098e:	454f      	cmp	r7, r9
 8000990:	46c6      	mov	lr, r8
 8000992:	4649      	mov	r1, r9
 8000994:	d31a      	bcc.n	80009cc <__udivmoddi4+0x294>
 8000996:	d017      	beq.n	80009c8 <__udivmoddi4+0x290>
 8000998:	b15d      	cbz	r5, 80009b2 <__udivmoddi4+0x27a>
 800099a:	ebb3 020e 	subs.w	r2, r3, lr
 800099e:	eb67 0701 	sbc.w	r7, r7, r1
 80009a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009a6:	40f2      	lsrs	r2, r6
 80009a8:	ea4c 0202 	orr.w	r2, ip, r2
 80009ac:	40f7      	lsrs	r7, r6
 80009ae:	e9c5 2700 	strd	r2, r7, [r5]
 80009b2:	2600      	movs	r6, #0
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e70b      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fd      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009c8:	4543      	cmp	r3, r8
 80009ca:	d2e5      	bcs.n	8000998 <__udivmoddi4+0x260>
 80009cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d0:	eb69 0104 	sbc.w	r1, r9, r4
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7df      	b.n	8000998 <__udivmoddi4+0x260>
 80009d8:	4608      	mov	r0, r1
 80009da:	e7d2      	b.n	8000982 <__udivmoddi4+0x24a>
 80009dc:	4660      	mov	r0, ip
 80009de:	e78d      	b.n	80008fc <__udivmoddi4+0x1c4>
 80009e0:	4681      	mov	r9, r0
 80009e2:	e7b9      	b.n	8000958 <__udivmoddi4+0x220>
 80009e4:	4666      	mov	r6, ip
 80009e6:	e775      	b.n	80008d4 <__udivmoddi4+0x19c>
 80009e8:	4630      	mov	r0, r6
 80009ea:	e74a      	b.n	8000882 <__udivmoddi4+0x14a>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	4439      	add	r1, r7
 80009f2:	e713      	b.n	800081c <__udivmoddi4+0xe4>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	e724      	b.n	8000844 <__udivmoddi4+0x10c>
 80009fa:	bf00      	nop

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address){
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	601a      	str	r2, [r3, #0]
	this->address = _address;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	729a      	strb	r2, [r3, #10]
}
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_ZN5AMT21D1Ev>:

AMT21::~AMT21(){
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

}
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read(){
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f103 010a 	add.w	r1, r3, #10
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	2201      	movs	r2, #1
 8000a54:	f009 fe9a 	bl	800a78c <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f103 010c 	add.w	r1, r3, #12
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2202      	movs	r2, #2
 8000a66:	f009 ff27 	bl	800a8b8 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	899b      	ldrh	r3, [r3, #12]
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	749a      	strb	r2, [r3, #18]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	899b      	ldrh	r3, [r3, #12]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	0bdb      	lsrs	r3, r3, #15
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	74da      	strb	r2, [r3, #19]
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN5AMT2117AMT21_Check_ValueEv>:

HAL_StatusTypeDef AMT21::AMT21_Check_Value(){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	899b      	ldrh	r3, [r3, #12]
 8000aa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000aac:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	899b      	ldrh	r3, [r3, #12]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	737b      	strb	r3, [r7, #13]
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d820      	bhi.n	8000b14 <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	899b      	ldrh	r3, [r3, #12]
 8000ad6:	109b      	asrs	r3, r3, #2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	899b      	ldrh	r3, [r3, #12]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	105b      	asrs	r3, r3, #1
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b06:	4053      	eors	r3, r2
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000b0c:	7b7b      	ldrb	r3, [r7, #13]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	737b      	strb	r3, [r7, #13]
 8000b12:	e7db      	b.n	8000acc <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7c9b      	ldrb	r3, [r3, #18]
 8000b34:	7bfa      	ldrb	r2, [r7, #15]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10a      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7cdb      	ldrb	r3, [r3, #19]
 8000b3e:	7bba      	ldrb	r2, [r7, #14]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d105      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 8000b44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e003      	b.n	8000b58 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
	}
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN5AMT2112getAngPos180Ev>:
{
	return this->raw_value;
}

int16_t AMT21::getAngPos180()
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
//	uint8_t iii =  (this->raw_value & 0x1FFF);
	return ((((this->raw_value & 0x2000) >> 13) * (-16383)) + (this->raw_value & 0x3FFF) ) * -1;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	135b      	asrs	r3, r3, #13
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	0392      	lsls	r2, r2, #14
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b21b      	sxth	r3, r3
//	return this->raw_value;
//	this->value =
//	return iii;
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb4:	eef0 7ae7 	vabs.f32	s15, s15
 8000bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bd4:	fef8 7a67 	vrinta.f32	s15, s15
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000c00:	619a      	str	r2, [r3, #24]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c08:	61da      	str	r2, [r3, #28]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8000c0e:	621a      	str	r2, [r3, #32]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	22c7      	movs	r2, #199	; 0xc7
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 8000c32:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000c38:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8000c3a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000c6c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f000 f832 	bl	8000ca8 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	60da      	str	r2, [r3, #12]
}
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	41a00000 	.word	0x41a00000
 8000c60:	469c4000 	.word	0x469c4000
 8000c64:	43480000 	.word	0x43480000
 8000c68:	42700000 	.word	0x42700000
 8000c6c:	00000000 	.word	0x00000000

08000c70 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
}
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	4619      	mov	r1, r3
 8000c98:	4610      	mov	r0, r2
 8000c9a:	f008 fb67 	bl	800936c <HAL_TIM_PWM_Start>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	ed2d 8b02 	vpush	{d8}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc8:	f7ff ff6d 	bl	8000ba6 <_ZSt4fabsf>
 8000ccc:	eeb0 7a40 	vmov.f32	s14, s0
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cde:	bf94      	ite	ls
 8000ce0:	2301      	movls	r3, #1
 8000ce2:	2300      	movhi	r3, #0
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	e021      	b.n	8000d36 <_ZN7Stepper19StepperSetFrequencyEf+0x8e>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfc:	f7ff ff53 	bl	8000ba6 <_ZSt4fabsf>
 8000d00:	eeb0 7a40 	vmov.f32	s14, s0
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d12:	bfac      	ite	ge
 8000d14:	2301      	movge	r3, #1
 8000d16:	2300      	movlt	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d009      	beq.n	8000d32 <_ZN7Stepper19StepperSetFrequencyEf+0x8a>
		f = this->maxFrequency - 500.0f;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d24:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8000fec <_ZN7Stepper19StepperSetFrequencyEf+0x344>
 8000d28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d2c:	edc7 7a03 	vstr	s15, [r7, #12]
 8000d30:	e001      	b.n	8000d36 <_ZN7Stepper19StepperSetFrequencyEf+0x8e>
	else
		f = _frequency;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d3c:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8000ff0 <_ZN7Stepper19StepperSetFrequencyEf+0x348>
 8000d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d48:	f2c0 80df 	blt.w	8000f0a <_ZN7Stepper19StepperSetFrequencyEf+0x262>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6898      	ldr	r0, [r3, #8]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	2201      	movs	r2, #1
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f005 fd2d 	bl	80067b8 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f + 500.0f))) - 1U);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d66:	3301      	adds	r3, #1
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d70:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d74:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8000fec <_ZN7Stepper19StepperSetFrequencyEf+0x344>
 8000d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d80:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8000ff4 <_ZN7Stepper19StepperSetFrequencyEf+0x34c>
 8000d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d90:	eeb0 0a67 	vmov.f32	s0, s15
 8000d94:	f7ff ff17 	bl	8000bc6 <_ZSt5roundf>
 8000d98:	eef0 7a40 	vmov.f32	s15, s0
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000da6:	ee17 2a90 	vmov	r2, s15
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d113      	bne.n	8000ddc <_ZN7Stepper19StepperSetFrequencyEf+0x134>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000dbe:	085b      	lsrs	r3, r3, #1
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fa32 	bl	800122a <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000dc6:	eeb0 7b40 	vmov.f64	d7, d0
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dd4:	ee17 2a90 	vmov	r2, s15
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8000dda:	e1e6      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d113      	bne.n	8000e0c <_ZN7Stepper19StepperSetFrequencyEf+0x164>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000dee:	085b      	lsrs	r3, r3, #1
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fa1a 	bl	800122a <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000df6:	eeb0 7b40 	vmov.f64	d7, d0
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e04:	ee17 2a90 	vmov	r2, s15
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e0a:	e1ce      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d113      	bne.n	8000e3c <_ZN7Stepper19StepperSetFrequencyEf+0x194>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000e1e:	085b      	lsrs	r3, r3, #1
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fa02 	bl	800122a <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e26:	eeb0 7b40 	vmov.f64	d7, d0
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e34:	ee17 2a90 	vmov	r2, s15
 8000e38:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e3a:	e1b6      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b0c      	cmp	r3, #12
 8000e42:	d113      	bne.n	8000e6c <_ZN7Stepper19StepperSetFrequencyEf+0x1c4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000e4e:	085b      	lsrs	r3, r3, #1
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f9ea 	bl	800122a <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e56:	eeb0 7b40 	vmov.f64	d7, d0
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e64:	ee17 2a90 	vmov	r2, s15
 8000e68:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e6a:	e19e      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b10      	cmp	r3, #16
 8000e72:	d113      	bne.n	8000e9c <_ZN7Stepper19StepperSetFrequencyEf+0x1f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000e7e:	085b      	lsrs	r3, r3, #1
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 f9d2 	bl	800122a <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e86:	eeb0 7b40 	vmov.f64	d7, d0
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e94:	ee17 2a90 	vmov	r2, s15
 8000e98:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000e9a:	e186      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b14      	cmp	r3, #20
 8000ea2:	d113      	bne.n	8000ecc <_ZN7Stepper19StepperSetFrequencyEf+0x224>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eac:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000eae:	085b      	lsrs	r3, r3, #1
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 f9ba 	bl	800122a <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000eb6:	eeb0 7b40 	vmov.f64	d7, d0
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ec4:	ee17 2a90 	vmov	r2, s15
 8000ec8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000eca:	e16e      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
			this->stepper_htim->Instance->CCR1 = 0;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2200      	movs	r2, #0
 8000ede:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2200      	movs	r2, #0
 8000efc:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000f08:	e14f      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
	} else if (this->frequency < 0.001f) {
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f10:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000ff0 <_ZN7Stepper19StepperSetFrequencyEf+0x348>
 8000f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	f140 80eb 	bpl.w	80010f6 <_ZN7Stepper19StepperSetFrequencyEf+0x44e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6898      	ldr	r0, [r3, #8]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f005 fc43 	bl	80067b8 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f + 500.0f))) - 1U);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f48:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000fec <_ZN7Stepper19StepperSetFrequencyEf+0x344>
 8000f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f50:	eeb0 0a67 	vmov.f32	s0, s15
 8000f54:	f7ff fe27 	bl	8000ba6 <_ZSt4fabsf>
 8000f58:	eef0 7a40 	vmov.f32	s15, s0
 8000f5c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000f60:	eddf 6a24 	vldr	s13, [pc, #144]	; 8000ff4 <_ZN7Stepper19StepperSetFrequencyEf+0x34c>
 8000f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f70:	eeb0 0a67 	vmov.f32	s0, s15
 8000f74:	f7ff fe27 	bl	8000bc6 <_ZSt5roundf>
 8000f78:	eef0 7a40 	vmov.f32	s15, s0
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f86:	ee17 2a90 	vmov	r2, s15
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d113      	bne.n	8000fbc <_ZN7Stepper19StepperSetFrequencyEf+0x314>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f942 	bl	800122a <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000fa6:	eeb0 7b40 	vmov.f64	d7, d0
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fb4:	ee17 2a90 	vmov	r2, s15
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fba:	e0f6      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d119      	bne.n	8000ff8 <_ZN7Stepper19StepperSetFrequencyEf+0x350>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000fce:	085b      	lsrs	r3, r3, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f92a 	bl	800122a <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000fd6:	eeb0 7b40 	vmov.f64	d7, d0
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe4:	ee17 2a90 	vmov	r2, s15
 8000fe8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000fea:	e0de      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
 8000fec:	43fa0000 	.word	0x43fa0000
 8000ff0:	3a83126f 	.word	0x3a83126f
 8000ff4:	4d64e1c0 	.word	0x4d64e1c0
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d113      	bne.n	8001028 <_ZN7Stepper19StepperSetFrequencyEf+0x380>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 800100a:	085b      	lsrs	r3, r3, #1
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f90c 	bl	800122a <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001012:	eeb0 7b40 	vmov.f64	d7, d0
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001020:	ee17 2a90 	vmov	r2, s15
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001026:	e0c0      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b0c      	cmp	r3, #12
 800102e:	d113      	bne.n	8001058 <_ZN7Stepper19StepperSetFrequencyEf+0x3b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800103a:	085b      	lsrs	r3, r3, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f8f4 	bl	800122a <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001042:	eeb0 7b40 	vmov.f64	d7, d0
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001050:	ee17 2a90 	vmov	r2, s15
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001056:	e0a8      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b10      	cmp	r3, #16
 800105e:	d113      	bne.n	8001088 <_ZN7Stepper19StepperSetFrequencyEf+0x3e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001068:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800106a:	085b      	lsrs	r3, r3, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f8dc 	bl	800122a <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001072:	eeb0 7b40 	vmov.f64	d7, d0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001080:	ee17 2a90 	vmov	r2, s15
 8001084:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001086:	e090      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b14      	cmp	r3, #20
 800108e:	d113      	bne.n	80010b8 <_ZN7Stepper19StepperSetFrequencyEf+0x410>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001098:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800109a:	085b      	lsrs	r3, r3, #1
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f8c4 	bl	800122a <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80010a2:	eeb0 7b40 	vmov.f64	d7, d0
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010b0:	ee17 2a90 	vmov	r2, s15
 80010b4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80010b6:	e078      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
			this->stepper_htim->Instance->CCR1 = 0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2200      	movs	r2, #0
 80010d4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2200      	movs	r2, #0
 80010de:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80010f4:	e059      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d105      	bne.n	800110a <_ZN7Stepper19StepperSetFrequencyEf+0x462>
			this->stepper_htim->Instance->CCR1 = 0;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2200      	movs	r2, #0
 8001106:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001108:	e04f      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d105      	bne.n	800111e <_ZN7Stepper19StepperSetFrequencyEf+0x476>
			this->stepper_htim->Instance->CCR2 = 0;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2200      	movs	r2, #0
 800111a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800111c:	e045      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b08      	cmp	r3, #8
 8001124:	d105      	bne.n	8001132 <_ZN7Stepper19StepperSetFrequencyEf+0x48a>
			this->stepper_htim->Instance->CCR3 = 0;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2200      	movs	r2, #0
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001130:	e03b      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b0c      	cmp	r3, #12
 8001138:	d105      	bne.n	8001146 <_ZN7Stepper19StepperSetFrequencyEf+0x49e>
			this->stepper_htim->Instance->CCR4 = 0;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2200      	movs	r2, #0
 8001142:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001144:	e031      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b10      	cmp	r3, #16
 800114c:	d105      	bne.n	800115a <_ZN7Stepper19StepperSetFrequencyEf+0x4b2>
			this->stepper_htim->Instance->CCR5 = 0;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2200      	movs	r2, #0
 8001156:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001158:	e027      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b14      	cmp	r3, #20
 8001160:	d105      	bne.n	800116e <_ZN7Stepper19StepperSetFrequencyEf+0x4c6>
			this->stepper_htim->Instance->CCR6 = 0;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2200      	movs	r2, #0
 800116a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800116c:	e01d      	b.n	80011aa <_ZN7Stepper19StepperSetFrequencyEf+0x502>
			this->stepper_htim->Instance->CCR1 = 0;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2200      	movs	r2, #0
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2200      	movs	r2, #0
 800119e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	ecbd 8b02 	vpop	{d8}
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop

080011b8 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 80011c4:	ed97 0a00 	vldr	s0, [r7]
 80011c8:	f7ff fced 	bl	8000ba6 <_ZSt4fabsf>
 80011cc:	eef0 7a40 	vmov.f32	s15, s0
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80011f2:	eeb0 0b47 	vmov.f64	d0, d7
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ffe5 	bl	80011de <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001214:	eeb0 7b40 	vmov.f64	d7, d0
 8001218:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800123c:	eeb0 0b47 	vmov.f64	d0, d7
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	ed87 0a01 	vstr	s0, [r7, #4]
 8001254:	edc7 0a00 	vstr	s1, [r7]
 8001258:	edd7 0a00 	vldr	s1, [r7]
 800125c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001260:	f00b fa7a 	bl	800c758 <atan2f>
 8001264:	eef0 7a40 	vmov.f32	s15, s0
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	ed87 0a01 	vstr	s0, [r7, #4]
 800127c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001280:	f00b f8f2 	bl	800c468 <cosf>
 8001284:	eef0 7a40 	vmov.f32	s15, s0
 8001288:	eeb0 0a67 	vmov.f32	s0, s15
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	ed87 0a01 	vstr	s0, [r7, #4]
 800129c:	ed97 0a01 	vldr	s0, [r7, #4]
 80012a0:	f00b f9ba 	bl	800c618 <sinf>
 80012a4:	eef0 7a40 	vmov.f32	s15, s0
 80012a8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	ed87 0a01 	vstr	s0, [r7, #4]
 80012bc:	ed97 0a01 	vldr	s0, [r7, #4]
 80012c0:	f00b fa4c 	bl	800c75c <sqrtf>
 80012c4:	eef0 7a40 	vmov.f32	s15, s0
 80012c8:	eeb0 0a67 	vmov.f32	s0, s15
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <_Z7find_IKffff>:
// p12 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*((Q*pow(dt,3))/2 + P22*dt + P12);p21 = P21 + P22*dt + (Q*pow(dt,3))/2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
// p22 = P22 + Q*pow(dt,2) - (((Q*pow(dt,3))/2 + P22*dt + P12)*((Q*pow(dt,3))/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
//}

joint_config find_IK(float gripper_linear_x, float gripper_linear_y, float gripper_linear_z, float gripper_angular_yaw)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b095      	sub	sp, #84	; 0x54
 80012d8:	af00      	add	r7, sp, #0
 80012da:	ed87 0a07 	vstr	s0, [r7, #28]
 80012de:	edc7 0a06 	vstr	s1, [r7, #24]
 80012e2:	ed87 1a05 	vstr	s2, [r7, #20]
 80012e6:	edc7 1a04 	vstr	s3, [r7, #16]
	bug1 = gripper_linear_x*gripper_linear_x;
 80012ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012f2:	4b86      	ldr	r3, [pc, #536]	; (800150c <_Z7find_IKffff+0x238>)
 80012f4:	edc3 7a00 	vstr	s15, [r3]
	bug2 = gripper_linear_y*gripper_linear_y;
 80012f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001300:	4b83      	ldr	r3, [pc, #524]	; (8001510 <_Z7find_IKffff+0x23c>)
 8001302:	edc3 7a00 	vstr	s15, [r3]
	bug3 = L12*L12;
 8001306:	4b83      	ldr	r3, [pc, #524]	; (8001514 <_Z7find_IKffff+0x240>)
 8001308:	ed93 7a00 	vldr	s14, [r3]
 800130c:	4b81      	ldr	r3, [pc, #516]	; (8001514 <_Z7find_IKffff+0x240>)
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001316:	4b80      	ldr	r3, [pc, #512]	; (8001518 <_Z7find_IKffff+0x244>)
 8001318:	edc3 7a00 	vstr	s15, [r3]
	bug4 = L3*L3 ;
 800131c:	4b7f      	ldr	r3, [pc, #508]	; (800151c <_Z7find_IKffff+0x248>)
 800131e:	ed93 7a00 	vldr	s14, [r3]
 8001322:	4b7e      	ldr	r3, [pc, #504]	; (800151c <_Z7find_IKffff+0x248>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800132c:	4b7c      	ldr	r3, [pc, #496]	; (8001520 <_Z7find_IKffff+0x24c>)
 800132e:	edc3 7a00 	vstr	s15, [r3]
	C3 = ((gripper_linear_x*gripper_linear_x)+(gripper_linear_y*gripper_linear_y)-(L12*L12)-(L3*L3)) / (2*L12*L3);
 8001332:	edd7 7a07 	vldr	s15, [r7, #28]
 8001336:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800133a:	edd7 7a06 	vldr	s15, [r7, #24]
 800133e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001342:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001346:	4b73      	ldr	r3, [pc, #460]	; (8001514 <_Z7find_IKffff+0x240>)
 8001348:	edd3 6a00 	vldr	s13, [r3]
 800134c:	4b71      	ldr	r3, [pc, #452]	; (8001514 <_Z7find_IKffff+0x240>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001356:	ee37 7a67 	vsub.f32	s14, s14, s15
 800135a:	4b70      	ldr	r3, [pc, #448]	; (800151c <_Z7find_IKffff+0x248>)
 800135c:	edd3 6a00 	vldr	s13, [r3]
 8001360:	4b6e      	ldr	r3, [pc, #440]	; (800151c <_Z7find_IKffff+0x248>)
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800136e:	4b69      	ldr	r3, [pc, #420]	; (8001514 <_Z7find_IKffff+0x240>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001378:	4b68      	ldr	r3, [pc, #416]	; (800151c <_Z7find_IKffff+0x248>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001386:	4b67      	ldr	r3, [pc, #412]	; (8001524 <_Z7find_IKffff+0x250>)
 8001388:	edc3 7a00 	vstr	s15, [r3]
	S3 = sqrt(1-(C3*C3));
 800138c:	4b65      	ldr	r3, [pc, #404]	; (8001524 <_Z7find_IKffff+0x250>)
 800138e:	ed93 7a00 	vldr	s14, [r3]
 8001392:	4b64      	ldr	r3, [pc, #400]	; (8001524 <_Z7find_IKffff+0x250>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	eeb0 0a67 	vmov.f32	s0, s15
 80013a8:	f7ff ff83 	bl	80012b2 <_ZSt4sqrtf>
 80013ac:	eef0 7a40 	vmov.f32	s15, s0
 80013b0:	4b5d      	ldr	r3, [pc, #372]	; (8001528 <_Z7find_IKffff+0x254>)
 80013b2:	edc3 7a00 	vstr	s15, [r3]
	q3 = atan2(S3,C3);
 80013b6:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <_Z7find_IKffff+0x254>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	4b59      	ldr	r3, [pc, #356]	; (8001524 <_Z7find_IKffff+0x250>)
 80013be:	ed93 7a00 	vldr	s14, [r3]
 80013c2:	eef0 0a47 	vmov.f32	s1, s14
 80013c6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ca:	f7ff ff3e 	bl	800124a <_ZSt5atan2ff>
 80013ce:	eef0 7a40 	vmov.f32	s15, s0
 80013d2:	4b56      	ldr	r3, [pc, #344]	; (800152c <_Z7find_IKffff+0x258>)
 80013d4:	edc3 7a00 	vstr	s15, [r3]

	float L3S3 = L3*S3;
 80013d8:	4b50      	ldr	r3, [pc, #320]	; (800151c <_Z7find_IKffff+0x248>)
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	4b52      	ldr	r3, [pc, #328]	; (8001528 <_Z7find_IKffff+0x254>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float L123C3 = L12 + (L3*C3);
 80013ec:	4b4b      	ldr	r3, [pc, #300]	; (800151c <_Z7find_IKffff+0x248>)
 80013ee:	ed93 7a00 	vldr	s14, [r3]
 80013f2:	4b4c      	ldr	r3, [pc, #304]	; (8001524 <_Z7find_IKffff+0x250>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fc:	4b45      	ldr	r3, [pc, #276]	; (8001514 <_Z7find_IKffff+0x240>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001406:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	S1 = (-L3S3*gripper_linear_x) + (L123C3*gripper_linear_y);
 800140a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800140e:	eeb1 7a67 	vneg.f32	s14, s15
 8001412:	edd7 7a07 	vldr	s15, [r7, #28]
 8001416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800141a:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800141e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <_Z7find_IKffff+0x25c>)
 800142c:	edc3 7a00 	vstr	s15, [r3]
	C1 = (L3S3*gripper_linear_y) + (L123C3*gripper_linear_x);
 8001430:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001434:	edd7 7a06 	vldr	s15, [r7, #24]
 8001438:	ee27 7a27 	vmul.f32	s14, s14, s15
 800143c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001440:	edd7 7a07 	vldr	s15, [r7, #28]
 8001444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <_Z7find_IKffff+0x260>)
 800144e:	edc3 7a00 	vstr	s15, [r3]
	q1 = atan2(S1,C1);
 8001452:	4b37      	ldr	r3, [pc, #220]	; (8001530 <_Z7find_IKffff+0x25c>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	4b36      	ldr	r3, [pc, #216]	; (8001534 <_Z7find_IKffff+0x260>)
 800145a:	ed93 7a00 	vldr	s14, [r3]
 800145e:	eef0 0a47 	vmov.f32	s1, s14
 8001462:	eeb0 0a67 	vmov.f32	s0, s15
 8001466:	f7ff fef0 	bl	800124a <_ZSt5atan2ff>
 800146a:	eef0 7a40 	vmov.f32	s15, s0
 800146e:	4b32      	ldr	r3, [pc, #200]	; (8001538 <_Z7find_IKffff+0x264>)
 8001470:	edc3 7a00 	vstr	s15, [r3]
	float q4 = gripper_angular_yaw - q1 - q3;
 8001474:	4b30      	ldr	r3, [pc, #192]	; (8001538 <_Z7find_IKffff+0x264>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ed97 7a04 	vldr	s14, [r7, #16]
 800147e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <_Z7find_IKffff+0x258>)
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float q2 = gripper_linear_z + H4 - H3 - H1;
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <_Z7find_IKffff+0x268>)
 8001492:	ed93 7a00 	vldr	s14, [r3]
 8001496:	edd7 7a05 	vldr	s15, [r7, #20]
 800149a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800149e:	4b28      	ldr	r3, [pc, #160]	; (8001540 <_Z7find_IKffff+0x26c>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <_Z7find_IKffff+0x270>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	joint_config buff;
	buff.q1 = q1;
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <_Z7find_IKffff+0x264>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	623b      	str	r3, [r7, #32]
	buff.q2 = C3;
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <_Z7find_IKffff+0x250>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
	buff.q3 = q3;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <_Z7find_IKffff+0x258>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
	buff.q4 = S3;
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <_Z7find_IKffff+0x254>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c

    return buff;
 80014ce:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80014e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014e4:	ee06 0a10 	vmov	s12, r0
 80014e8:	ee06 1a90 	vmov	s13, r1
 80014ec:	ee07 2a10 	vmov	s14, r2
 80014f0:	ee07 3a90 	vmov	s15, r3
}
 80014f4:	eeb0 0a46 	vmov.f32	s0, s12
 80014f8:	eef0 0a66 	vmov.f32	s1, s13
 80014fc:	eeb0 1a47 	vmov.f32	s2, s14
 8001500:	eef0 1a67 	vmov.f32	s3, s15
 8001504:	3754      	adds	r7, #84	; 0x54
 8001506:	46bd      	mov	sp, r7
 8001508:	bd90      	pop	{r4, r7, pc}
 800150a:	bf00      	nop
 800150c:	24000afc 	.word	0x24000afc
 8001510:	24000b00 	.word	0x24000b00
 8001514:	24000004 	.word	0x24000004
 8001518:	24000b04 	.word	0x24000b04
 800151c:	24000000 	.word	0x24000000
 8001520:	24000b08 	.word	0x24000b08
 8001524:	24000ad8 	.word	0x24000ad8
 8001528:	24000adc 	.word	0x24000adc
 800152c:	24000ae4 	.word	0x24000ae4
 8001530:	24000ad4 	.word	0x24000ad4
 8001534:	24000ad0 	.word	0x24000ad0
 8001538:	24000ae0 	.word	0x24000ae0
 800153c:	24000010 	.word	0x24000010
 8001540:	2400000c 	.word	0x2400000c
 8001544:	24000008 	.word	0x24000008

08001548 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b08c      	sub	sp, #48	; 0x30
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	if (htim == &htim12){	//
	}
	if (htim == &htim7){	//

	}
	if (htim == &htim14) { 	//
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4aa7      	ldr	r2, [pc, #668]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	f040 8139 	bne.w	80017cc <HAL_TIM_PeriodElapsedCallback+0x284>

		encoderJ1.AMT21_Read();
 800155a:	48a6      	ldr	r0, [pc, #664]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800155c:	f7ff fa6f 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8001560:	48a4      	ldr	r0, [pc, #656]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001562:	f7ff fa9b 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4ba3      	ldr	r3, [pc, #652]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800156c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 800156e:	4ba2      	ldr	r3, [pc, #648]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_TIM_PeriodElapsedCallback+0x3c>
			posJ1 = encoderJ1.getAngPos180();
 8001576:	489f      	ldr	r0, [pc, #636]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001578:	f7ff faf4 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b9e      	ldr	r3, [pc, #632]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001582:	801a      	strh	r2, [r3, #0]
		}
		encoderJ3.AMT21_Read();
 8001584:	489e      	ldr	r0, [pc, #632]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001586:	f7ff fa5a 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 800158a:	489d      	ldr	r0, [pc, #628]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800158c:	f7ff fa86 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	4b9b      	ldr	r3, [pc, #620]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001596:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8001598:	4b9a      	ldr	r3, [pc, #616]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d106      	bne.n	80015ae <HAL_TIM_PeriodElapsedCallback+0x66>
			posJ3 = encoderJ3.getAngPos180();
 80015a0:	4897      	ldr	r0, [pc, #604]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80015a2:	f7ff fadf 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b97      	ldr	r3, [pc, #604]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80015ac:	801a      	strh	r2, [r3, #0]

//		const float KP_J1 = 1;
//		const float Kp_J3 = 2;


		const float KP_J1 = 1;
 80015ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		const float KP_J3 = 1;
 80015b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
		const float KI_J1 = 0.0; //0.0001
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
		const float KI_J3 = 0.0; //0.0001
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
		const float KD_J1 = 0;//4
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
		const float KD_J3 = 0.5;//1
 80015cc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80015d0:	61bb      	str	r3, [r7, #24]

		joint_config findchessbot_joint_state;
	//	findchessbot_joint_state = find_IK(0.4, 0, 0, 0);
		chess_board_ang = chessboard_angular_velocity * t;
 80015d2:	4b8e      	ldr	r3, [pc, #568]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80015d4:	ed93 7a00 	vldr	s14, [r3]
 80015d8:	4b8d      	ldr	r3, [pc, #564]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e2:	4b8c      	ldr	r3, [pc, #560]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80015e4:	edc3 7a00 	vstr	s15, [r3]
		debug_pos_x = 0.247*cos(chess_board_ang)+0.42744;
 80015e8:	4b8a      	ldr	r3, [pc, #552]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	eeb0 0a67 	vmov.f32	s0, s15
 80015f2:	f7ff fe3e 	bl	8001272 <_ZSt3cosf>
 80015f6:	eef0 7a40 	vmov.f32	s15, s0
 80015fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015fe:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80017d8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8001602:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001606:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80017e0 <HAL_TIM_PeriodElapsedCallback+0x298>
 800160a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800160e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001612:	4b81      	ldr	r3, [pc, #516]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001614:	edc3 7a00 	vstr	s15, [r3]
		debug_pos_y = 0.247*sin(chess_board_ang)+0.00059371;
 8001618:	4b7e      	ldr	r3, [pc, #504]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	eeb0 0a67 	vmov.f32	s0, s15
 8001622:	f7ff fe36 	bl	8001292 <_ZSt3sinf>
 8001626:	eef0 7a40 	vmov.f32	s15, s0
 800162a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800162e:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80017d8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8001632:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001636:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80017e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 800163a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800163e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001644:	edc3 7a00 	vstr	s15, [r3]
		findchessbot_joint_state = find_IK(
				debug_pos_x,
				debug_pos_y,
				0,
				0);
 8001648:	4b73      	ldr	r3, [pc, #460]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	4b73      	ldr	r3, [pc, #460]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	eddf 1a72 	vldr	s3, [pc, #456]	; 8001820 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8001658:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8001820 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 800165c:	eef0 0a47 	vmov.f32	s1, s14
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	f7ff fe36 	bl	80012d4 <_Z7find_IKffff>
 8001668:	eeb0 6a40 	vmov.f32	s12, s0
 800166c:	eef0 6a60 	vmov.f32	s13, s1
 8001670:	eeb0 7a41 	vmov.f32	s14, s2
 8001674:	eef0 7a61 	vmov.f32	s15, s3
 8001678:	ed87 6a02 	vstr	s12, [r7, #8]
 800167c:	edc7 6a03 	vstr	s13, [r7, #12]
 8001680:	ed87 7a04 	vstr	s14, [r7, #16]
 8001684:	edc7 7a05 	vstr	s15, [r7, #20]
//		chess_board_ang = (chess_board_ang + 0.000261) ;
//		chess_board_ang = (chess_board_ang + 0.00522) ;
	//	printf("%f\t%f\n",findchessbot_joint_state.q1,findchessbot_joint_state.q3);
//		setpointJ1 = findchessbot_joint_state.q1 * 2607;
//		setpointJ3 = findchessbot_joint_state.q3 * 2607;
		setpointJ1 = sin(chess_board_ang) * 3500;
 8001688:	4b62      	ldr	r3, [pc, #392]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	eeb0 0a67 	vmov.f32	s0, s15
 8001692:	f7ff fdfe 	bl	8001292 <_ZSt3sinf>
 8001696:	eef0 7a40 	vmov.f32	s15, s0
 800169a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001824 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 800169e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a6:	ee17 2a90 	vmov	r2, s15
 80016aa:	4b5f      	ldr	r3, [pc, #380]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80016ac:	601a      	str	r2, [r3, #0]
		setpointJ3 = sin(chess_board_ang) * 3500;
 80016ae:	4b59      	ldr	r3, [pc, #356]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	f7ff fdeb 	bl	8001292 <_ZSt3sinf>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
 80016c0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001824 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 80016c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016cc:	ee17 2a90 	vmov	r2, s15
 80016d0:	4b56      	ldr	r3, [pc, #344]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80016d2:	601a      	str	r2, [r3, #0]
		b1 = findchessbot_joint_state.q1;
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4a56      	ldr	r2, [pc, #344]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80016d8:	6013      	str	r3, [r2, #0]
		b2 = findchessbot_joint_state.q2;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4a55      	ldr	r2, [pc, #340]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80016de:	6013      	str	r3, [r2, #0]
		b3 = findchessbot_joint_state.q3;
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4a55      	ldr	r2, [pc, #340]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80016e4:	6013      	str	r3, [r2, #0]
		b4 = findchessbot_joint_state.q4;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	4a54      	ldr	r2, [pc, #336]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80016ea:	6013      	str	r3, [r2, #0]
//		setpointJ1 = Goal_velocity_q1;
//		setpointJ3 = Goal_velocity_q3;
		errorJ1 = posJ1 - setpointJ1;
 80016ec:	4b43      	ldr	r3, [pc, #268]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	ee07 3a90 	vmov	s15, r3
 80016fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001702:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001704:	edc3 7a00 	vstr	s15, [r3]
		errorJ3 = posJ3 - setpointJ3;
 8001708:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	b21b      	sxth	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	4b46      	ldr	r3, [pc, #280]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171e:	4b49      	ldr	r3, [pc, #292]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001720:	edc3 7a00 	vstr	s15, [r3]
		Sum_Error_q1 = Sum_Error_q1 + errorJ1;
 8001724:	4b48      	ldr	r3, [pc, #288]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001726:	ed93 7a00 	vldr	s14, [r3]
 800172a:	4b45      	ldr	r3, [pc, #276]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001734:	4b44      	ldr	r3, [pc, #272]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001736:	edc3 7a00 	vstr	s15, [r3]
		Sum_Error_q3 = Sum_Error_q3 + errorJ3;
 800173a:	4b44      	ldr	r3, [pc, #272]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800173c:	ed93 7a00 	vldr	s14, [r3]
 8001740:	4b40      	ldr	r3, [pc, #256]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174a:	4b40      	ldr	r3, [pc, #256]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800174c:	edc3 7a00 	vstr	s15, [r3]


//		uJ1 = (KP_J1 * errorJ1) + (KI_J1 * Sum_Error_q1) + (KD_J1 * (errorJ1 - Error_Old_q1));
//		uJ3 = (KP_J3 * errorJ3) + (KI_J3 * Sum_Error_q3) + (KD_J3 * (errorJ3 - Error_Old_q3));

		uJ1 = (KP_J1 * errorJ1);
 8001750:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a3e      	ldr	r2, [pc, #248]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001756:	6013      	str	r3, [r2, #0]
		uJ3 = (KP_J3 * errorJ3);
 8001758:	4b3a      	ldr	r3, [pc, #232]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a3d      	ldr	r2, [pc, #244]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800175e:	6013      	str	r3, [r2, #0]

		Error_Old_q1 = errorJ1;
 8001760:	4b37      	ldr	r3, [pc, #220]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a3c      	ldr	r2, [pc, #240]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001766:	6013      	str	r3, [r2, #0]
		Error_Old_q3 = errorJ3;
 8001768:	4b36      	ldr	r3, [pc, #216]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a3b      	ldr	r2, [pc, #236]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800176e:	6013      	str	r3, [r2, #0]
//	//	stepperJ3.StepperSetFrequency(-1200.0f);
//
		#ifdef __cplusplus
//		stepperJ1.StepperSetFrequency(300.0f);

		stepperJ1.StepperSetFrequency(uJ1);
 8001770:	4b37      	ldr	r3, [pc, #220]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eeb0 0a67 	vmov.f32	s0, s15
 800177a:	4839      	ldr	r0, [pc, #228]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800177c:	f7ff fa94 	bl	8000ca8 <_ZN7Stepper19StepperSetFrequencyEf>
		stepperJ3.StepperSetFrequency(uJ3);
 8001780:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	eeb0 0a67 	vmov.f32	s0, s15
 800178a:	4836      	ldr	r0, [pc, #216]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800178c:	f7ff fa8c 	bl	8000ca8 <_ZN7Stepper19StepperSetFrequencyEf>
//		else
//		{
//		stepperJ3.StepperSetFrequency(0);
//		}

		t = t + sample_time_500;
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001792:	ed93 7a00 	vldr	s14, [r3]
 8001796:	4b34      	ldr	r3, [pc, #208]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80017a2:	edc3 7a00 	vstr	s15, [r3]
		if (t>=30)
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80017b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	bfac      	ite	ge
 80017ba:	2301      	movge	r3, #1
 80017bc:	2300      	movlt	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_TIM_PeriodElapsedCallback+0x284>
		{
			t = 0.0;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
		}

		#endif
	}
}
 80017cc:	bf00      	nop
 80017ce:	3730      	adds	r7, #48	; 0x30
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	f3af 8000 	nop.w
 80017d8:	2d0e5604 	.word	0x2d0e5604
 80017dc:	3fcf9db2 	.word	0x3fcf9db2
 80017e0:	4d4024b3 	.word	0x4d4024b3
 80017e4:	3fdb5b2d 	.word	0x3fdb5b2d
 80017e8:	84437119 	.word	0x84437119
 80017ec:	3f437466 	.word	0x3f437466
 80017f0:	2400057c 	.word	0x2400057c
 80017f4:	24000a1c 	.word	0x24000a1c
 80017f8:	24000a94 	.word	0x24000a94
 80017fc:	24000aa8 	.word	0x24000aa8
 8001800:	24000a30 	.word	0x24000a30
 8001804:	24000a95 	.word	0x24000a95
 8001808:	24000aaa 	.word	0x24000aaa
 800180c:	24000024 	.word	0x24000024
 8001810:	24000ae8 	.word	0x24000ae8
 8001814:	24000ac4 	.word	0x24000ac4
 8001818:	24000ac8 	.word	0x24000ac8
 800181c:	24000acc 	.word	0x24000acc
 8001820:	00000000 	.word	0x00000000
 8001824:	455ac000 	.word	0x455ac000
 8001828:	24000aac 	.word	0x24000aac
 800182c:	24000ab0 	.word	0x24000ab0
 8001830:	24000a98 	.word	0x24000a98
 8001834:	24000a9c 	.word	0x24000a9c
 8001838:	24000aa0 	.word	0x24000aa0
 800183c:	24000aa4 	.word	0x24000aa4
 8001840:	24000ab4 	.word	0x24000ab4
 8001844:	24000ab8 	.word	0x24000ab8
 8001848:	24000b14 	.word	0x24000b14
 800184c:	24000b18 	.word	0x24000b18
 8001850:	24000abc 	.word	0x24000abc
 8001854:	24000ac0 	.word	0x24000ac0
 8001858:	24000b0c 	.word	0x24000b0c
 800185c:	24000b10 	.word	0x24000b10
 8001860:	24000a44 	.word	0x24000a44
 8001864:	24000a6c 	.word	0x24000a6c
 8001868:	24000020 	.word	0x24000020

0800186c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001870:	f002 f92a 	bl	8003ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001874:	f000 f87a 	bl	800196c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001878:	f000 ffa2 	bl	80027c0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800187c:	f000 ff60 	bl	8002740 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8001880:	f000 fefe 	bl	8002680 <_ZL19MX_USART3_UART_Initv>
  MX_TIM2_Init();
 8001884:	f000 fa4a 	bl	8001d1c <_ZL12MX_TIM2_Initv>
  MX_UART4_Init();
 8001888:	f000 fe30 	bl	80024ec <_ZL13MX_UART4_Initv>
  MX_TIM4_Init();
 800188c:	f000 fb68 	bl	8001f60 <_ZL12MX_TIM4_Initv>
  MX_SPI3_Init();
 8001890:	f000 f91e 	bl	8001ad0 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 8001894:	f000 f976 	bl	8001b84 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001898:	f000 fad0 	bl	8001e3c <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 800189c:	f000 fbf2 	bl	8002084 <_ZL12MX_TIM5_Initv>
  MX_TIM15_Init();
 80018a0:	f000 fd62 	bl	8002368 <_ZL13MX_TIM15_Initv>
  MX_CRC_Init();
 80018a4:	f000 f8ec 	bl	8001a80 <_ZL11MX_CRC_Initv>
  MX_UART7_Init();
 80018a8:	f000 fe88 	bl	80025bc <_ZL13MX_UART7_Initv>
  MX_TIM6_Init();
 80018ac:	f000 fc48 	bl	8002140 <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 80018b0:	f000 fc86 	bl	80021c0 <_ZL12MX_TIM7_Initv>
  MX_TIM12_Init();
 80018b4:	f000 fcc4 	bl	8002240 <_ZL13MX_TIM12_Initv>
  MX_TIM13_Init();
 80018b8:	f000 fd06 	bl	80022c8 <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 80018bc:	f000 fd2c 	bl	8002318 <_ZL13MX_TIM14_Initv>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	2101      	movs	r1, #1
 80018c4:	481f      	ldr	r0, [pc, #124]	; (8001944 <main+0xd8>)
 80018c6:	f004 ff77 	bl	80067b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2102      	movs	r1, #2
 80018ce:	481e      	ldr	r0, [pc, #120]	; (8001948 <main+0xdc>)
 80018d0:	f004 ff72 	bl	80067b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018da:	481a      	ldr	r0, [pc, #104]	; (8001944 <main+0xd8>)
 80018dc:	f004 ff6c 	bl	80067b8 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 80018e0:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800194c <main+0xe0>
 80018e4:	481a      	ldr	r0, [pc, #104]	; (8001950 <main+0xe4>)
 80018e6:	f7ff f9df 	bl	8000ca8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(16);
 80018ea:	2110      	movs	r1, #16
 80018ec:	4818      	ldr	r0, [pc, #96]	; (8001950 <main+0xe4>)
 80018ee:	f7ff fc87 	bl	8001200 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(1);
 80018f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018f6:	4816      	ldr	r0, [pc, #88]	; (8001950 <main+0xe4>)
 80018f8:	f7ff fc5e 	bl	80011b8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80018fc:	4814      	ldr	r0, [pc, #80]	; (8001950 <main+0xe4>)
 80018fe:	f7ff f9c2 	bl	8000c86 <_ZN7Stepper13StepperEnableEv>
//	stepperJ2.StepperSetMicrostep(1);
//	stepperJ2.StepperSetRatio(1);
//	stepperJ1.StepperSetFrequency(15842.0f);
	stepperJ3.StepperSetFrequency(0);
 8001902:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800194c <main+0xe0>
 8001906:	4813      	ldr	r0, [pc, #76]	; (8001954 <main+0xe8>)
 8001908:	f7ff f9ce 	bl	8000ca8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 800190c:	2110      	movs	r1, #16
 800190e:	4811      	ldr	r0, [pc, #68]	; (8001954 <main+0xe8>)
 8001910:	f7ff fc76 	bl	8001200 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(1);
 8001914:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001918:	480e      	ldr	r0, [pc, #56]	; (8001954 <main+0xe8>)
 800191a:	f7ff fc4d 	bl	80011b8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 800191e:	480d      	ldr	r0, [pc, #52]	; (8001954 <main+0xe8>)
 8001920:	f7ff f9b1 	bl	8000c86 <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
#endif

	HAL_TIM_Base_Start_IT(&htim5);
 8001924:	480c      	ldr	r0, [pc, #48]	; (8001958 <main+0xec>)
 8001926:	f007 fc47 	bl	80091b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 800192a:	480c      	ldr	r0, [pc, #48]	; (800195c <main+0xf0>)
 800192c:	f007 fc44 	bl	80091b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <main+0xf4>)
 8001932:	f007 fc41 	bl	80091b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim12);
 8001936:	480b      	ldr	r0, [pc, #44]	; (8001964 <main+0xf8>)
 8001938:	f007 fc3e 	bl	80091b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 800193c:	480a      	ldr	r0, [pc, #40]	; (8001968 <main+0xfc>)
 800193e:	f007 fc3b 	bl	80091b8 <HAL_TIM_Base_Start_IT>
//	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001942:	e7fe      	b.n	8001942 <main+0xd6>
 8001944:	58020400 	.word	0x58020400
 8001948:	58021000 	.word	0x58021000
 800194c:	00000000 	.word	0x00000000
 8001950:	24000a44 	.word	0x24000a44
 8001954:	24000a6c 	.word	0x24000a6c
 8001958:	24000400 	.word	0x24000400
 800195c:	2400044c 	.word	0x2400044c
 8001960:	24000498 	.word	0x24000498
 8001964:	240004e4 	.word	0x240004e4
 8001968:	2400057c 	.word	0x2400057c

0800196c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b09c      	sub	sp, #112	; 0x70
 8001970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001976:	224c      	movs	r2, #76	; 0x4c
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f00b f8bc 	bl	800caf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2220      	movs	r2, #32
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f00b f8b6 	bl	800caf8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800198c:	2002      	movs	r0, #2
 800198e:	f004 ff47 	bl	8006820 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001992:	2300      	movs	r3, #0
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <_Z18SystemClock_Configv+0x10c>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	4a37      	ldr	r2, [pc, #220]	; (8001a78 <_Z18SystemClock_Configv+0x10c>)
 800199c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a0:	6193      	str	r3, [r2, #24]
 80019a2:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <_Z18SystemClock_Configv+0x10c>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <_Z18SystemClock_Configv+0x110>)
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	4a32      	ldr	r2, [pc, #200]	; (8001a7c <_Z18SystemClock_Configv+0x110>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <_Z18SystemClock_Configv+0x110>)
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019c4:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <_Z18SystemClock_Configv+0x10c>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d0:	bf14      	ite	ne
 80019d2:	2301      	movne	r3, #1
 80019d4:	2300      	moveq	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d000      	beq.n	80019de <_Z18SystemClock_Configv+0x72>
 80019dc:	e7f2      	b.n	80019c4 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019de:	2302      	movs	r3, #2
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019e6:	2340      	movs	r3, #64	; 0x40
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ea:	2302      	movs	r3, #2
 80019ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ee:	2300      	movs	r3, #0
 80019f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019f2:	2304      	movs	r3, #4
 80019f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80019f6:	233c      	movs	r3, #60	; 0x3c
 80019f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019fa:	2302      	movs	r3, #2
 80019fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80019fe:	2306      	movs	r3, #6
 8001a00:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a02:	2302      	movs	r3, #2
 8001a04:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a06:	230c      	movs	r3, #12
 8001a08:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 ff3c 	bl	8006894 <HAL_RCC_OscConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bf14      	ite	ne
 8001a22:	2301      	movne	r3, #1
 8001a24:	2300      	moveq	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8001a2c:	f001 f80a 	bl	8002a44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a30:	233f      	movs	r3, #63	; 0x3f
 8001a32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a34:	2303      	movs	r3, #3
 8001a36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a40:	2340      	movs	r3, #64	; 0x40
 8001a42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a44:	2340      	movs	r3, #64	; 0x40
 8001a46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a4e:	2340      	movs	r3, #64	; 0x40
 8001a50:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2104      	movs	r1, #4
 8001a56:	4618      	mov	r0, r3
 8001a58:	f005 fb48 	bl	80070ec <HAL_RCC_ClockConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf14      	ite	ne
 8001a62:	2301      	movne	r3, #1
 8001a64:	2300      	moveq	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8001a6c:	f000 ffea 	bl	8002a44 <Error_Handler>
  }
}
 8001a70:	bf00      	nop
 8001a72:	3770      	adds	r7, #112	; 0x70
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	58024800 	.word	0x58024800
 8001a7c:	58000400 	.word	0x58000400

08001a80 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <_ZL11MX_CRC_Initv+0x48>)
 8001a86:	4a11      	ldr	r2, [pc, #68]	; (8001acc <_ZL11MX_CRC_Initv+0x4c>)
 8001a88:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <_ZL11MX_CRC_Initv+0x48>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <_ZL11MX_CRC_Initv+0x48>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <_ZL11MX_CRC_Initv+0x48>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <_ZL11MX_CRC_Initv+0x48>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <_ZL11MX_CRC_Initv+0x48>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001aa8:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <_ZL11MX_CRC_Initv+0x48>)
 8001aaa:	f002 f9c7 	bl	8003e3c <HAL_CRC_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8001abe:	f000 ffc1 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	24000224 	.word	0x24000224
 8001acc:	58024c00 	.word	0x58024c00

08001ad0 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ad4:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001ad6:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <_ZL12MX_SPI3_Initv+0xb0>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001adc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ae0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001aea:	2203      	movs	r2, #3
 8001aec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aee:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001afc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b00:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b5e:	4807      	ldr	r0, [pc, #28]	; (8001b7c <_ZL12MX_SPI3_Initv+0xac>)
 8001b60:	f007 f9b2 	bl	8008ec8 <HAL_SPI_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf14      	ite	ne
 8001b6a:	2301      	movne	r3, #1
 8001b6c:	2300      	moveq	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <_ZL12MX_SPI3_Initv+0xa8>
  {
    Error_Handler();
 8001b74:	f000 ff66 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	24000248 	.word	0x24000248
 8001b80:	40003c00 	.word	0x40003c00

08001b84 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b09a      	sub	sp, #104	; 0x68
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
 8001bb4:	615a      	str	r2, [r3, #20]
 8001bb6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	222c      	movs	r2, #44	; 0x2c
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f00a ff9a 	bl	800caf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bc4:	4b53      	ldr	r3, [pc, #332]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001bc6:	4a54      	ldr	r2, [pc, #336]	; (8001d18 <_ZL12MX_TIM1_Initv+0x194>)
 8001bc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8001bca:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001bcc:	22c7      	movs	r2, #199	; 0xc7
 8001bce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd0:	4b50      	ldr	r3, [pc, #320]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8001bd6:	4b4f      	ldr	r3, [pc, #316]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001bd8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001bdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bde:	4b4d      	ldr	r3, [pc, #308]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001be4:	4b4b      	ldr	r3, [pc, #300]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001bec:	2280      	movs	r2, #128	; 0x80
 8001bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bf0:	4848      	ldr	r0, [pc, #288]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001bf2:	f007 fa8a 	bl	800910a <HAL_TIM_Base_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 8001c06:	f000 ff1d 	bl	8002a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c14:	4619      	mov	r1, r3
 8001c16:	483f      	ldr	r0, [pc, #252]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001c18:	f007 feea 	bl	80099f0 <HAL_TIM_ConfigClockSource>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	bf14      	ite	ne
 8001c22:	2301      	movne	r3, #1
 8001c24:	2300      	moveq	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8001c2c:	f000 ff0a 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c30:	4838      	ldr	r0, [pc, #224]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001c32:	f007 fb39 	bl	80092a8 <HAL_TIM_PWM_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf14      	ite	ne
 8001c3c:	2301      	movne	r3, #1
 8001c3e:	2300      	moveq	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 8001c46:	f000 fefd 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	482d      	ldr	r0, [pc, #180]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001c5e:	f008 fc1b 	bl	800a498 <HAL_TIMEx_MasterConfigSynchronization>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 8001c72:	f000 fee7 	bl	8002a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c76:	2360      	movs	r3, #96	; 0x60
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001c7a:	f240 1339 	movw	r3, #313	; 0x139
 8001c7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c80:	2300      	movs	r3, #0
 8001c82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c84:	2300      	movs	r3, #0
 8001c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c98:	2204      	movs	r2, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	481d      	ldr	r0, [pc, #116]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001c9e:	f007 fd93 	bl	80097c8 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf14      	ite	ne
 8001ca8:	2301      	movne	r3, #1
 8001caa:	2300      	moveq	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 8001cb2:	f000 fec7 	bl	8002a44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480a      	ldr	r0, [pc, #40]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001cec:	f008 fc62 	bl	800a5b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bf14      	ite	ne
 8001cf6:	2301      	movne	r3, #1
 8001cf8:	2300      	moveq	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <_ZL12MX_TIM1_Initv+0x180>
  {
    Error_Handler();
 8001d00:	f000 fea0 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <_ZL12MX_TIM1_Initv+0x190>)
 8001d06:	f001 f979 	bl	8002ffc <HAL_TIM_MspPostInit>

}
 8001d0a:	bf00      	nop
 8001d0c:	3768      	adds	r7, #104	; 0x68
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	240002d0 	.word	0x240002d0
 8001d18:	40010000 	.word	0x40010000

08001d1c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08e      	sub	sp, #56	; 0x38
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	611a      	str	r2, [r3, #16]
 8001d4a:	615a      	str	r2, [r3, #20]
 8001d4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d58:	22c7      	movs	r2, #199	; 0xc7
 8001d5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5c:	4b36      	ldr	r3, [pc, #216]	; (8001e38 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8001d62:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d64:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001d68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6a:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d70:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d76:	4830      	ldr	r0, [pc, #192]	; (8001e38 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d78:	f007 f9c7 	bl	800910a <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	bf14      	ite	ne
 8001d82:	2301      	movne	r3, #1
 8001d84:	2300      	moveq	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8001d8c:	f000 fe5a 	bl	8002a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4826      	ldr	r0, [pc, #152]	; (8001e38 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d9e:	f007 fe27 	bl	80099f0 <HAL_TIM_ConfigClockSource>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf14      	ite	ne
 8001da8:	2301      	movne	r3, #1
 8001daa:	2300      	moveq	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8001db2:	f000 fe47 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001db6:	4820      	ldr	r0, [pc, #128]	; (8001e38 <_ZL12MX_TIM2_Initv+0x11c>)
 8001db8:	f007 fa76 	bl	80092a8 <HAL_TIM_PWM_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	bf14      	ite	ne
 8001dc2:	2301      	movne	r3, #1
 8001dc4:	2300      	moveq	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001dcc:	f000 fe3a 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4816      	ldr	r0, [pc, #88]	; (8001e38 <_ZL12MX_TIM2_Initv+0x11c>)
 8001de0:	f008 fb5a 	bl	800a498 <HAL_TIMEx_MasterConfigSynchronization>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001df4:	f000 fe26 	bl	8002a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df8:	2360      	movs	r3, #96	; 0x60
 8001dfa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001dfc:	f240 1339 	movw	r3, #313	; 0x139
 8001e00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4809      	ldr	r0, [pc, #36]	; (8001e38 <_ZL12MX_TIM2_Initv+0x11c>)
 8001e12:	f007 fcd9 	bl	80097c8 <HAL_TIM_PWM_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 8001e26:	f000 fe0d 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e2a:	4803      	ldr	r0, [pc, #12]	; (8001e38 <_ZL12MX_TIM2_Initv+0x11c>)
 8001e2c:	f001 f8e6 	bl	8002ffc <HAL_TIM_MspPostInit>

}
 8001e30:	bf00      	nop
 8001e32:	3738      	adds	r7, #56	; 0x38
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	2400031c 	.word	0x2400031c

08001e3c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08e      	sub	sp, #56	; 0x38
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	611a      	str	r2, [r3, #16]
 8001e6a:	615a      	str	r2, [r3, #20]
 8001e6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e6e:	4b3a      	ldr	r3, [pc, #232]	; (8001f58 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e70:	4a3a      	ldr	r2, [pc, #232]	; (8001f5c <_ZL12MX_TIM3_Initv+0x120>)
 8001e72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001e74:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e76:	22c7      	movs	r2, #199	; 0xc7
 8001e78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e82:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001e86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e94:	4830      	ldr	r0, [pc, #192]	; (8001f58 <_ZL12MX_TIM3_Initv+0x11c>)
 8001e96:	f007 f938 	bl	800910a <HAL_TIM_Base_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8001eaa:	f000 fdcb 	bl	8002a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4827      	ldr	r0, [pc, #156]	; (8001f58 <_ZL12MX_TIM3_Initv+0x11c>)
 8001ebc:	f007 fd98 	bl	80099f0 <HAL_TIM_ConfigClockSource>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	bf14      	ite	ne
 8001ec6:	2301      	movne	r3, #1
 8001ec8:	2300      	moveq	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8001ed0:	f000 fdb8 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ed4:	4820      	ldr	r0, [pc, #128]	; (8001f58 <_ZL12MX_TIM3_Initv+0x11c>)
 8001ed6:	f007 f9e7 	bl	80092a8 <HAL_TIM_PWM_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8001eea:	f000 fdab 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef6:	f107 031c 	add.w	r3, r7, #28
 8001efa:	4619      	mov	r1, r3
 8001efc:	4816      	ldr	r0, [pc, #88]	; (8001f58 <_ZL12MX_TIM3_Initv+0x11c>)
 8001efe:	f008 facb 	bl	800a498 <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf14      	ite	ne
 8001f08:	2301      	movne	r3, #1
 8001f0a:	2300      	moveq	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8001f12:	f000 fd97 	bl	8002a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f16:	2360      	movs	r3, #96	; 0x60
 8001f18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001f1a:	f240 1339 	movw	r3, #313	; 0x139
 8001f1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f28:	463b      	mov	r3, r7
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480a      	ldr	r0, [pc, #40]	; (8001f58 <_ZL12MX_TIM3_Initv+0x11c>)
 8001f30:	f007 fc4a 	bl	80097c8 <HAL_TIM_PWM_ConfigChannel>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	bf14      	ite	ne
 8001f3a:	2301      	movne	r3, #1
 8001f3c:	2300      	moveq	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 8001f44:	f000 fd7e 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f48:	4803      	ldr	r0, [pc, #12]	; (8001f58 <_ZL12MX_TIM3_Initv+0x11c>)
 8001f4a:	f001 f857 	bl	8002ffc <HAL_TIM_MspPostInit>

}
 8001f4e:	bf00      	nop
 8001f50:	3738      	adds	r7, #56	; 0x38
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	24000368 	.word	0x24000368
 8001f5c:	40000400 	.word	0x40000400

08001f60 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08e      	sub	sp, #56	; 0x38
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f80:	463b      	mov	r3, r7
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	611a      	str	r2, [r3, #16]
 8001f8e:	615a      	str	r2, [r3, #20]
 8001f90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f92:	4b3a      	ldr	r3, [pc, #232]	; (800207c <_ZL12MX_TIM4_Initv+0x11c>)
 8001f94:	4a3a      	ldr	r2, [pc, #232]	; (8002080 <_ZL12MX_TIM4_Initv+0x120>)
 8001f96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8001f98:	4b38      	ldr	r3, [pc, #224]	; (800207c <_ZL12MX_TIM4_Initv+0x11c>)
 8001f9a:	22c7      	movs	r2, #199	; 0xc7
 8001f9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b37      	ldr	r3, [pc, #220]	; (800207c <_ZL12MX_TIM4_Initv+0x11c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8001fa4:	4b35      	ldr	r3, [pc, #212]	; (800207c <_ZL12MX_TIM4_Initv+0x11c>)
 8001fa6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001faa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fac:	4b33      	ldr	r3, [pc, #204]	; (800207c <_ZL12MX_TIM4_Initv+0x11c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fb2:	4b32      	ldr	r3, [pc, #200]	; (800207c <_ZL12MX_TIM4_Initv+0x11c>)
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fb8:	4830      	ldr	r0, [pc, #192]	; (800207c <_ZL12MX_TIM4_Initv+0x11c>)
 8001fba:	f007 f8a6 	bl	800910a <HAL_TIM_Base_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8001fce:	f000 fd39 	bl	8002a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4827      	ldr	r0, [pc, #156]	; (800207c <_ZL12MX_TIM4_Initv+0x11c>)
 8001fe0:	f007 fd06 	bl	80099f0 <HAL_TIM_ConfigClockSource>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf14      	ite	ne
 8001fea:	2301      	movne	r3, #1
 8001fec:	2300      	moveq	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8001ff4:	f000 fd26 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ff8:	4820      	ldr	r0, [pc, #128]	; (800207c <_ZL12MX_TIM4_Initv+0x11c>)
 8001ffa:	f007 f955 	bl	80092a8 <HAL_TIM_PWM_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 800200e:	f000 fd19 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	4816      	ldr	r0, [pc, #88]	; (800207c <_ZL12MX_TIM4_Initv+0x11c>)
 8002022:	f008 fa39 	bl	800a498 <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 8002036:	f000 fd05 	bl	8002a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800203a:	2360      	movs	r3, #96	; 0x60
 800203c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 800203e:	f240 1339 	movw	r3, #313	; 0x139
 8002042:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800204c:	463b      	mov	r3, r7
 800204e:	2208      	movs	r2, #8
 8002050:	4619      	mov	r1, r3
 8002052:	480a      	ldr	r0, [pc, #40]	; (800207c <_ZL12MX_TIM4_Initv+0x11c>)
 8002054:	f007 fbb8 	bl	80097c8 <HAL_TIM_PWM_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf14      	ite	ne
 800205e:	2301      	movne	r3, #1
 8002060:	2300      	moveq	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <_ZL12MX_TIM4_Initv+0x10c>
  {
    Error_Handler();
 8002068:	f000 fcec 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <_ZL12MX_TIM4_Initv+0x11c>)
 800206e:	f000 ffc5 	bl	8002ffc <HAL_TIM_MspPostInit>

}
 8002072:	bf00      	nop
 8002074:	3738      	adds	r7, #56	; 0x38
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	240003b4 	.word	0x240003b4
 8002080:	40000800 	.word	0x40000800

08002084 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208a:	f107 0310 	add.w	r3, r7, #16
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020a2:	4b25      	ldr	r3, [pc, #148]	; (8002138 <_ZL12MX_TIM5_Initv+0xb4>)
 80020a4:	4a25      	ldr	r2, [pc, #148]	; (800213c <_ZL12MX_TIM5_Initv+0xb8>)
 80020a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 80020a8:	4b23      	ldr	r3, [pc, #140]	; (8002138 <_ZL12MX_TIM5_Initv+0xb4>)
 80020aa:	22c7      	movs	r2, #199	; 0xc7
 80020ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	4b22      	ldr	r3, [pc, #136]	; (8002138 <_ZL12MX_TIM5_Initv+0xb4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <_ZL12MX_TIM5_Initv+0xb4>)
 80020b6:	f642 62df 	movw	r2, #11999	; 0x2edf
 80020ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020bc:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <_ZL12MX_TIM5_Initv+0xb4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <_ZL12MX_TIM5_Initv+0xb4>)
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020c8:	481b      	ldr	r0, [pc, #108]	; (8002138 <_ZL12MX_TIM5_Initv+0xb4>)
 80020ca:	f007 f81e 	bl	800910a <HAL_TIM_Base_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 80020de:	f000 fcb1 	bl	8002a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	4619      	mov	r1, r3
 80020ee:	4812      	ldr	r0, [pc, #72]	; (8002138 <_ZL12MX_TIM5_Initv+0xb4>)
 80020f0:	f007 fc7e 	bl	80099f0 <HAL_TIM_ConfigClockSource>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf14      	ite	ne
 80020fa:	2301      	movne	r3, #1
 80020fc:	2300      	moveq	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <_ZL12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 8002104:	f000 fc9e 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	4619      	mov	r1, r3
 8002114:	4808      	ldr	r0, [pc, #32]	; (8002138 <_ZL12MX_TIM5_Initv+0xb4>)
 8002116:	f008 f9bf 	bl	800a498 <HAL_TIMEx_MasterConfigSynchronization>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf14      	ite	ne
 8002120:	2301      	movne	r3, #1
 8002122:	2300      	moveq	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <_ZL12MX_TIM5_Initv+0xaa>
  {
    Error_Handler();
 800212a:	f000 fc8b 	bl	8002a44 <Error_Handler>
  /* USER CODE BEGIN TIM5_Init 2 */
//  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE END TIM5_Init 2 */

}
 800212e:	bf00      	nop
 8002130:	3720      	adds	r7, #32
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	24000400 	.word	0x24000400
 800213c:	40000c00 	.word	0x40000c00

08002140 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <_ZL12MX_TIM6_Initv+0x78>)
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <_ZL12MX_TIM6_Initv+0x7c>)
 8002154:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <_ZL12MX_TIM6_Initv+0x78>)
 8002158:	22c7      	movs	r2, #199	; 0xc7
 800215a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <_ZL12MX_TIM6_Initv+0x78>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <_ZL12MX_TIM6_Initv+0x78>)
 8002164:	f241 726f 	movw	r2, #5999	; 0x176f
 8002168:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <_ZL12MX_TIM6_Initv+0x78>)
 800216c:	2280      	movs	r2, #128	; 0x80
 800216e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002170:	4811      	ldr	r0, [pc, #68]	; (80021b8 <_ZL12MX_TIM6_Initv+0x78>)
 8002172:	f006 ffca 	bl	800910a <HAL_TIM_Base_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8002186:	f000 fc5d 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	4619      	mov	r1, r3
 8002196:	4808      	ldr	r0, [pc, #32]	; (80021b8 <_ZL12MX_TIM6_Initv+0x78>)
 8002198:	f008 f97e 	bl	800a498 <HAL_TIMEx_MasterConfigSynchronization>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf14      	ite	ne
 80021a2:	2301      	movne	r3, #1
 80021a4:	2300      	moveq	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 80021ac:	f000 fc4a 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	2400044c 	.word	0x2400044c
 80021bc:	40001000 	.word	0x40001000

080021c0 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <_ZL12MX_TIM7_Initv+0x78>)
 80021d2:	4a1a      	ldr	r2, [pc, #104]	; (800223c <_ZL12MX_TIM7_Initv+0x7c>)
 80021d4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <_ZL12MX_TIM7_Initv+0x78>)
 80021d8:	22c7      	movs	r2, #199	; 0xc7
 80021da:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <_ZL12MX_TIM7_Initv+0x78>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <_ZL12MX_TIM7_Initv+0x78>)
 80021e4:	f240 42af 	movw	r2, #1199	; 0x4af
 80021e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <_ZL12MX_TIM7_Initv+0x78>)
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80021f0:	4811      	ldr	r0, [pc, #68]	; (8002238 <_ZL12MX_TIM7_Initv+0x78>)
 80021f2:	f006 ff8a 	bl	800910a <HAL_TIM_Base_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf14      	ite	ne
 80021fc:	2301      	movne	r3, #1
 80021fe:	2300      	moveq	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 8002206:	f000 fc1d 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	4619      	mov	r1, r3
 8002216:	4808      	ldr	r0, [pc, #32]	; (8002238 <_ZL12MX_TIM7_Initv+0x78>)
 8002218:	f008 f93e 	bl	800a498 <HAL_TIMEx_MasterConfigSynchronization>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	bf14      	ite	ne
 8002222:	2301      	movne	r3, #1
 8002224:	2300      	moveq	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 800222c:	f000 fc0a 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	24000498 	.word	0x24000498
 800223c:	40001400 	.word	0x40001400

08002240 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002246:	463b      	mov	r3, r7
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <_ZL13MX_TIM12_Initv+0x80>)
 8002254:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <_ZL13MX_TIM12_Initv+0x84>)
 8002256:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <_ZL13MX_TIM12_Initv+0x80>)
 800225a:	22c7      	movs	r2, #199	; 0xc7
 800225c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <_ZL13MX_TIM12_Initv+0x80>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <_ZL13MX_TIM12_Initv+0x80>)
 8002266:	f240 2257 	movw	r2, #599	; 0x257
 800226a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <_ZL13MX_TIM12_Initv+0x80>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002272:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <_ZL13MX_TIM12_Initv+0x80>)
 8002274:	2280      	movs	r2, #128	; 0x80
 8002276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002278:	4811      	ldr	r0, [pc, #68]	; (80022c0 <_ZL13MX_TIM12_Initv+0x80>)
 800227a:	f006 ff46 	bl	800910a <HAL_TIM_Base_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf14      	ite	ne
 8002284:	2301      	movne	r3, #1
 8002286:	2300      	moveq	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <_ZL13MX_TIM12_Initv+0x52>
  {
    Error_Handler();
 800228e:	f000 fbd9 	bl	8002a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002296:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002298:	463b      	mov	r3, r7
 800229a:	4619      	mov	r1, r3
 800229c:	4808      	ldr	r0, [pc, #32]	; (80022c0 <_ZL13MX_TIM12_Initv+0x80>)
 800229e:	f007 fba7 	bl	80099f0 <HAL_TIM_ConfigClockSource>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <_ZL13MX_TIM12_Initv+0x76>
  {
    Error_Handler();
 80022b2:	f000 fbc7 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	240004e4 	.word	0x240004e4
 80022c4:	40001800 	.word	0x40001800

080022c8 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80022cc:	4b10      	ldr	r3, [pc, #64]	; (8002310 <_ZL13MX_TIM13_Initv+0x48>)
 80022ce:	4a11      	ldr	r2, [pc, #68]	; (8002314 <_ZL13MX_TIM13_Initv+0x4c>)
 80022d0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <_ZL13MX_TIM13_Initv+0x48>)
 80022d4:	22c7      	movs	r2, #199	; 0xc7
 80022d6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <_ZL13MX_TIM13_Initv+0x48>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <_ZL13MX_TIM13_Initv+0x48>)
 80022e0:	f240 2257 	movw	r2, #599	; 0x257
 80022e4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <_ZL13MX_TIM13_Initv+0x48>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <_ZL13MX_TIM13_Initv+0x48>)
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80022f2:	4807      	ldr	r0, [pc, #28]	; (8002310 <_ZL13MX_TIM13_Initv+0x48>)
 80022f4:	f006 ff09 	bl	800910a <HAL_TIM_Base_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf14      	ite	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	2300      	moveq	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 8002308:	f000 fb9c 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	24000530 	.word	0x24000530
 8002314:	40001c00 	.word	0x40001c00

08002318 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <_ZL13MX_TIM14_Initv+0x48>)
 800231e:	4a11      	ldr	r2, [pc, #68]	; (8002364 <_ZL13MX_TIM14_Initv+0x4c>)
 8002320:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8002322:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <_ZL13MX_TIM14_Initv+0x48>)
 8002324:	22c7      	movs	r2, #199	; 0xc7
 8002326:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <_ZL13MX_TIM14_Initv+0x48>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <_ZL13MX_TIM14_Initv+0x48>)
 8002330:	f640 125f 	movw	r2, #2399	; 0x95f
 8002334:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <_ZL13MX_TIM14_Initv+0x48>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <_ZL13MX_TIM14_Initv+0x48>)
 800233e:	2280      	movs	r2, #128	; 0x80
 8002340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002342:	4807      	ldr	r0, [pc, #28]	; (8002360 <_ZL13MX_TIM14_Initv+0x48>)
 8002344:	f006 fee1 	bl	800910a <HAL_TIM_Base_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 8002358:	f000 fb74 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	2400057c 	.word	0x2400057c
 8002364:	40002000 	.word	0x40002000

08002368 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b09a      	sub	sp, #104	; 0x68
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002388:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
 8002398:	615a      	str	r2, [r3, #20]
 800239a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	222c      	movs	r2, #44	; 0x2c
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f00a fba8 	bl	800caf8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80023a8:	4b4e      	ldr	r3, [pc, #312]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 80023aa:	4a4f      	ldr	r2, [pc, #316]	; (80024e8 <_ZL13MX_TIM15_Initv+0x180>)
 80023ac:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80023ae:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 80023b0:	22ef      	movs	r2, #239	; 0xef
 80023b2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b4:	4b4b      	ldr	r3, [pc, #300]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 80023bc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80023c0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c2:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80023c8:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023ce:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 80023d0:	2280      	movs	r2, #128	; 0x80
 80023d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80023d4:	4843      	ldr	r0, [pc, #268]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 80023d6:	f006 fe98 	bl	800910a <HAL_TIM_Base_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <_ZL13MX_TIM15_Initv+0x86>
  {
    Error_Handler();
 80023ea:	f000 fb2b 	bl	8002a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80023f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023f8:	4619      	mov	r1, r3
 80023fa:	483a      	ldr	r0, [pc, #232]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 80023fc:	f007 faf8 	bl	80099f0 <HAL_TIM_ConfigClockSource>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	bf14      	ite	ne
 8002406:	2301      	movne	r3, #1
 8002408:	2300      	moveq	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <_ZL13MX_TIM15_Initv+0xac>
  {
    Error_Handler();
 8002410:	f000 fb18 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002414:	4833      	ldr	r0, [pc, #204]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 8002416:	f006 ff47 	bl	80092a8 <HAL_TIM_PWM_Init>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <_ZL13MX_TIM15_Initv+0xc6>
  {
    Error_Handler();
 800242a:	f000 fb0b 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002436:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800243a:	4619      	mov	r1, r3
 800243c:	4829      	ldr	r0, [pc, #164]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 800243e:	f008 f82b 	bl	800a498 <HAL_TIMEx_MasterConfigSynchronization>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <_ZL13MX_TIM15_Initv+0xee>
  {
    Error_Handler();
 8002452:	f000 faf7 	bl	8002a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002456:	2360      	movs	r3, #96	; 0x60
 8002458:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800245a:	f240 1339 	movw	r3, #313	; 0x139
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002460:	2300      	movs	r3, #0
 8002462:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002464:	2300      	movs	r3, #0
 8002466:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800246c:	2300      	movs	r3, #0
 800246e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002470:	2300      	movs	r3, #0
 8002472:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002478:	2204      	movs	r2, #4
 800247a:	4619      	mov	r1, r3
 800247c:	4819      	ldr	r0, [pc, #100]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 800247e:	f007 f9a3 	bl	80097c8 <HAL_TIM_PWM_ConfigChannel>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf14      	ite	ne
 8002488:	2301      	movne	r3, #1
 800248a:	2300      	moveq	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <_ZL13MX_TIM15_Initv+0x12e>
  {
    Error_Handler();
 8002492:	f000 fad7 	bl	8002a44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	4809      	ldr	r0, [pc, #36]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 80024be:	f008 f879 	bl	800a5b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <_ZL13MX_TIM15_Initv+0x16e>
  {
    Error_Handler();
 80024d2:	f000 fab7 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80024d6:	4803      	ldr	r0, [pc, #12]	; (80024e4 <_ZL13MX_TIM15_Initv+0x17c>)
 80024d8:	f000 fd90 	bl	8002ffc <HAL_TIM_MspPostInit>

}
 80024dc:	bf00      	nop
 80024de:	3768      	adds	r7, #104	; 0x68
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	240005c8 	.word	0x240005c8
 80024e8:	40014000 	.word	0x40014000

080024ec <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 80024f2:	4a30      	ldr	r2, [pc, #192]	; (80025b4 <_ZL13MX_UART4_Initv+0xc8>)
 80024f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 80024f8:	4a2f      	ldr	r2, [pc, #188]	; (80025b8 <_ZL13MX_UART4_Initv+0xcc>)
 80024fa:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024fc:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002502:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002508:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800250e:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 8002510:	220c      	movs	r2, #12
 8002512:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002514:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800251a:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 800251c:	2200      	movs	r2, #0
 800251e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002520:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 8002522:	2200      	movs	r2, #0
 8002524:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 8002528:	2200      	movs	r2, #0
 800252a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800252c:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 800252e:	2208      	movs	r2, #8
 8002530:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002532:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 8002534:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800253a:	481d      	ldr	r0, [pc, #116]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 800253c:	f008 f8d6 	bl	800a6ec <HAL_UART_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf14      	ite	ne
 8002546:	2301      	movne	r3, #1
 8002548:	2300      	moveq	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <_ZL13MX_UART4_Initv+0x68>
  {
    Error_Handler();
 8002550:	f000 fa78 	bl	8002a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002554:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8002558:	4815      	ldr	r0, [pc, #84]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 800255a:	f009 fe8e 	bl	800c27a <HAL_UARTEx_SetTxFifoThreshold>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf14      	ite	ne
 8002564:	2301      	movne	r3, #1
 8002566:	2300      	moveq	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <_ZL13MX_UART4_Initv+0x86>
  {
    Error_Handler();
 800256e:	f000 fa69 	bl	8002a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002572:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8002576:	480e      	ldr	r0, [pc, #56]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 8002578:	f009 febd 	bl	800c2f6 <HAL_UARTEx_SetRxFifoThreshold>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	bf14      	ite	ne
 8002582:	2301      	movne	r3, #1
 8002584:	2300      	moveq	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <_ZL13MX_UART4_Initv+0xa4>
  {
    Error_Handler();
 800258c:	f000 fa5a 	bl	8002a44 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8002590:	4807      	ldr	r0, [pc, #28]	; (80025b0 <_ZL13MX_UART4_Initv+0xc4>)
 8002592:	f009 fdfe 	bl	800c192 <HAL_UARTEx_EnableFifoMode>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <_ZL13MX_UART4_Initv+0xbe>
  {
    Error_Handler();
 80025a6:	f000 fa4d 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	24000614 	.word	0x24000614
 80025b4:	40004c00 	.word	0x40004c00
 80025b8:	001e8480 	.word	0x001e8480

080025bc <_ZL13MX_UART7_Initv>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 80025c2:	4a2e      	ldr	r2, [pc, #184]	; (800267c <_ZL13MX_UART7_Initv+0xc0>)
 80025c4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80025c6:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 80025c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025cc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80025ce:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80025d4:	4b28      	ldr	r3, [pc, #160]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80025da:	4b27      	ldr	r3, [pc, #156]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 80025dc:	2200      	movs	r2, #0
 80025de:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80025e0:	4b25      	ldr	r3, [pc, #148]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 80025e2:	220c      	movs	r2, #12
 80025e4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025f2:	4b21      	ldr	r3, [pc, #132]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025f8:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 8002600:	2200      	movs	r2, #0
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002604:	481c      	ldr	r0, [pc, #112]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 8002606:	f008 f871 	bl	800a6ec <HAL_UART_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf14      	ite	ne
 8002610:	2301      	movne	r3, #1
 8002612:	2300      	moveq	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <_ZL13MX_UART7_Initv+0x62>
  {
    Error_Handler();
 800261a:	f000 fa13 	bl	8002a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800261e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8002622:	4815      	ldr	r0, [pc, #84]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 8002624:	f009 fe29 	bl	800c27a <HAL_UARTEx_SetTxFifoThreshold>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <_ZL13MX_UART7_Initv+0x80>
  {
    Error_Handler();
 8002638:	f000 fa04 	bl	8002a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800263c:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8002640:	480d      	ldr	r0, [pc, #52]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 8002642:	f009 fe58 	bl	800c2f6 <HAL_UARTEx_SetRxFifoThreshold>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <_ZL13MX_UART7_Initv+0x9e>
  {
    Error_Handler();
 8002656:	f000 f9f5 	bl	8002a44 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 800265a:	4807      	ldr	r0, [pc, #28]	; (8002678 <_ZL13MX_UART7_Initv+0xbc>)
 800265c:	f009 fd99 	bl	800c192 <HAL_UARTEx_EnableFifoMode>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	bf14      	ite	ne
 8002666:	2301      	movne	r3, #1
 8002668:	2300      	moveq	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <_ZL13MX_UART7_Initv+0xb8>
  {
    Error_Handler();
 8002670:	f000 f9e8 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	240006a4 	.word	0x240006a4
 800267c:	40007800 	.word	0x40007800

08002680 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002684:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002686:	4a2d      	ldr	r2, [pc, #180]	; (800273c <_ZL19MX_USART3_UART_Initv+0xbc>)
 8002688:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800268a:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800268c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002690:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002692:	4b29      	ldr	r3, [pc, #164]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002698:	4b27      	ldr	r3, [pc, #156]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026a4:	4b24      	ldr	r3, [pc, #144]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80026a6:	220c      	movs	r2, #12
 80026a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026bc:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80026be:	2200      	movs	r2, #0
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026c2:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026c8:	481b      	ldr	r0, [pc, #108]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80026ca:	f008 f80f 	bl	800a6ec <HAL_UART_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 80026de:	f000 f9b1 	bl	8002a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026e2:	2100      	movs	r1, #0
 80026e4:	4814      	ldr	r0, [pc, #80]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80026e6:	f009 fdc8 	bl	800c27a <HAL_UARTEx_SetTxFifoThreshold>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf14      	ite	ne
 80026f0:	2301      	movne	r3, #1
 80026f2:	2300      	moveq	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80026fa:	f000 f9a3 	bl	8002a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026fe:	2100      	movs	r1, #0
 8002700:	480d      	ldr	r0, [pc, #52]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002702:	f009 fdf8 	bl	800c2f6 <HAL_UARTEx_SetRxFifoThreshold>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8002716:	f000 f995 	bl	8002a44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800271a:	4807      	ldr	r0, [pc, #28]	; (8002738 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800271c:	f009 fd74 	bl	800c208 <HAL_UARTEx_DisableFifoMode>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	bf14      	ite	ne
 8002726:	2301      	movne	r3, #1
 8002728:	2300      	moveq	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8002730:	f000 f988 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	24000734 	.word	0x24000734
 800273c:	40004800 	.word	0x40004800

08002740 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <_ZL11MX_DMA_Initv+0x7c>)
 8002748:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800274c:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <_ZL11MX_DMA_Initv+0x7c>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002756:	4b19      	ldr	r3, [pc, #100]	; (80027bc <_ZL11MX_DMA_Initv+0x7c>)
 8002758:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002764:	2200      	movs	r2, #0
 8002766:	2100      	movs	r1, #0
 8002768:	200b      	movs	r0, #11
 800276a:	f001 fb26 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800276e:	200b      	movs	r0, #11
 8002770:	f001 fb3d 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002774:	2200      	movs	r2, #0
 8002776:	2100      	movs	r1, #0
 8002778:	200c      	movs	r0, #12
 800277a:	f001 fb1e 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800277e:	200c      	movs	r0, #12
 8002780:	f001 fb35 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002784:	2200      	movs	r2, #0
 8002786:	2100      	movs	r1, #0
 8002788:	200d      	movs	r0, #13
 800278a:	f001 fb16 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800278e:	200d      	movs	r0, #13
 8002790:	f001 fb2d 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002794:	2200      	movs	r2, #0
 8002796:	2100      	movs	r1, #0
 8002798:	200e      	movs	r0, #14
 800279a:	f001 fb0e 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800279e:	200e      	movs	r0, #14
 80027a0:	f001 fb25 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80027a4:	2200      	movs	r2, #0
 80027a6:	2100      	movs	r1, #0
 80027a8:	200f      	movs	r0, #15
 80027aa:	f001 fb06 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80027ae:	200f      	movs	r0, #15
 80027b0:	f001 fb1d 	bl	8003dee <HAL_NVIC_EnableIRQ>

}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	58024400 	.word	0x58024400

080027c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	; 0x30
 80027c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c6:	f107 031c 	add.w	r3, r7, #28
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027d6:	4b8e      	ldr	r3, [pc, #568]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 80027d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027dc:	4a8c      	ldr	r2, [pc, #560]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 80027de:	f043 0310 	orr.w	r3, r3, #16
 80027e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e6:	4b8a      	ldr	r3, [pc, #552]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f4:	4b86      	ldr	r3, [pc, #536]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 80027f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027fa:	4a85      	ldr	r2, [pc, #532]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002804:	4b82      	ldr	r3, [pc, #520]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 8002806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002812:	4b7f      	ldr	r3, [pc, #508]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 8002814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002818:	4a7d      	ldr	r2, [pc, #500]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 800281a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800281e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002822:	4b7b      	ldr	r3, [pc, #492]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 8002824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002830:	4b77      	ldr	r3, [pc, #476]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 8002832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002836:	4a76      	ldr	r2, [pc, #472]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002840:	4b73      	ldr	r3, [pc, #460]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 8002842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b70      	ldr	r3, [pc, #448]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 8002850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002854:	4a6e      	ldr	r2, [pc, #440]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 8002856:	f043 0302 	orr.w	r3, r3, #2
 800285a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800285e:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 8002860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800286c:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 800286e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002872:	4a67      	ldr	r2, [pc, #412]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 8002874:	f043 0308 	orr.w	r3, r3, #8
 8002878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800287c:	4b64      	ldr	r3, [pc, #400]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 800287e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800288a:	4b61      	ldr	r3, [pc, #388]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 800288c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002890:	4a5f      	ldr	r2, [pc, #380]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 8002892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800289a:	4b5d      	ldr	r3, [pc, #372]	; (8002a10 <_ZL12MX_GPIO_Initv+0x250>)
 800289c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80028a8:	2200      	movs	r2, #0
 80028aa:	f644 2121 	movw	r1, #18977	; 0x4a21
 80028ae:	4859      	ldr	r0, [pc, #356]	; (8002a14 <_ZL12MX_GPIO_Initv+0x254>)
 80028b0:	f003 ff82 	bl	80067b8 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80028b4:	2200      	movs	r2, #0
 80028b6:	f24c 0102 	movw	r1, #49154	; 0xc002
 80028ba:	4857      	ldr	r0, [pc, #348]	; (8002a18 <_ZL12MX_GPIO_Initv+0x258>)
 80028bc:	f003 ff7c 	bl	80067b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80028c0:	2200      	movs	r2, #0
 80028c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028c6:	4855      	ldr	r0, [pc, #340]	; (8002a1c <_ZL12MX_GPIO_Initv+0x25c>)
 80028c8:	f003 ff76 	bl	80067b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80028cc:	2200      	movs	r2, #0
 80028ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028d2:	4853      	ldr	r0, [pc, #332]	; (8002a20 <_ZL12MX_GPIO_Initv+0x260>)
 80028d4:	f003 ff70 	bl	80067b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80028d8:	2200      	movs	r2, #0
 80028da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028de:	4851      	ldr	r0, [pc, #324]	; (8002a24 <_ZL12MX_GPIO_Initv+0x264>)
 80028e0:	f003 ff6a 	bl	80067b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 80028e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 80028f4:	f107 031c 	add.w	r3, r7, #28
 80028f8:	4619      	mov	r1, r3
 80028fa:	4849      	ldr	r0, [pc, #292]	; (8002a20 <_ZL12MX_GPIO_Initv+0x260>)
 80028fc:	f003 fdac 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002900:	f644 2321 	movw	r3, #18977	; 0x4a21
 8002904:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002906:	2301      	movs	r3, #1
 8002908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	2300      	movs	r3, #0
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002912:	f107 031c 	add.w	r3, r7, #28
 8002916:	4619      	mov	r1, r3
 8002918:	483e      	ldr	r0, [pc, #248]	; (8002a14 <_ZL12MX_GPIO_Initv+0x254>)
 800291a:	f003 fd9d 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 800291e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002924:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800292e:	f107 031c 	add.w	r3, r7, #28
 8002932:	4619      	mov	r1, r3
 8002934:	4838      	ldr	r0, [pc, #224]	; (8002a18 <_ZL12MX_GPIO_Initv+0x258>)
 8002936:	f003 fd8f 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 800293a:	f24c 0302 	movw	r3, #49154	; 0xc002
 800293e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002940:	2301      	movs	r3, #1
 8002942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	4619      	mov	r1, r3
 8002952:	4831      	ldr	r0, [pc, #196]	; (8002a18 <_ZL12MX_GPIO_Initv+0x258>)
 8002954:	f003 fd80 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800295c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295e:	2301      	movs	r3, #1
 8002960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800296a:	f107 031c 	add.w	r3, r7, #28
 800296e:	4619      	mov	r1, r3
 8002970:	482a      	ldr	r0, [pc, #168]	; (8002a1c <_ZL12MX_GPIO_Initv+0x25c>)
 8002972:	f003 fd71 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800297a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297c:	2301      	movs	r3, #1
 800297e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002988:	f107 031c 	add.w	r3, r7, #28
 800298c:	4619      	mov	r1, r3
 800298e:	4824      	ldr	r0, [pc, #144]	; (8002a20 <_ZL12MX_GPIO_Initv+0x260>)
 8002990:	f003 fd62 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_DE_Pin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299a:	2301      	movs	r3, #1
 800299c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 80029a6:	f107 031c 	add.w	r3, r7, #28
 80029aa:	4619      	mov	r1, r3
 80029ac:	481d      	ldr	r0, [pc, #116]	; (8002a24 <_ZL12MX_GPIO_Initv+0x264>)
 80029ae:	f003 fd53 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 80029b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 80029c2:	f107 031c 	add.w	r3, r7, #28
 80029c6:	4619      	mov	r1, r3
 80029c8:	4817      	ldr	r0, [pc, #92]	; (8002a28 <_ZL12MX_GPIO_Initv+0x268>)
 80029ca:	f003 fd45 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 80029ce:	23c0      	movs	r3, #192	; 0xc0
 80029d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	4619      	mov	r1, r3
 80029e2:	480c      	ldr	r0, [pc, #48]	; (8002a14 <_ZL12MX_GPIO_Initv+0x254>)
 80029e4:	f003 fd38 	bl	8006458 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80029e8:	2200      	movs	r2, #0
 80029ea:	2100      	movs	r1, #0
 80029ec:	2017      	movs	r0, #23
 80029ee:	f001 f9e4 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029f2:	2017      	movs	r0, #23
 80029f4:	f001 f9fb 	bl	8003dee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029f8:	2200      	movs	r2, #0
 80029fa:	2100      	movs	r1, #0
 80029fc:	2028      	movs	r0, #40	; 0x28
 80029fe:	f001 f9dc 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a02:	2028      	movs	r0, #40	; 0x28
 8002a04:	f001 f9f3 	bl	8003dee <HAL_NVIC_EnableIRQ>

}
 8002a08:	bf00      	nop
 8002a0a:	3730      	adds	r7, #48	; 0x30
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	58024400 	.word	0x58024400
 8002a14:	58020400 	.word	0x58020400
 8002a18:	58021000 	.word	0x58021000
 8002a1c:	58020c00 	.word	0x58020c00
 8002a20:	58020800 	.word	0x58020800
 8002a24:	58020000 	.word	0x58020000
 8002a28:	58021800 	.word	0x58021800

08002a2c <HAL_GPIO_EXTI_Callback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]

}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	4808      	ldr	r0, [pc, #32]	; (8002a70 <Error_Handler+0x2c>)
 8002a4e:	f003 feb3 	bl	80067b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2102      	movs	r1, #2
 8002a56:	4807      	ldr	r0, [pc, #28]	; (8002a74 <Error_Handler+0x30>)
 8002a58:	f003 feae 	bl	80067b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a62:	4803      	ldr	r0, [pc, #12]	; (8002a70 <Error_Handler+0x2c>)
 8002a64:	f003 fea8 	bl	80067b8 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a68:	b672      	cpsid	i
}
 8002a6a:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a6c:	e7fe      	b.n	8002a6c <Error_Handler+0x28>
 8002a6e:	bf00      	nop
 8002a70:	58020400 	.word	0x58020400
 8002a74:	58021000 	.word	0x58021000

08002a78 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	f040 809b 	bne.w	8002bc0 <_Z41__static_initialization_and_destruction_0ii+0x148>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a90:	4293      	cmp	r3, r2
 8002a92:	f040 8095 	bne.w	8002bc0 <_Z41__static_initialization_and_destruction_0ii+0x148>
AMT21 encoderJ1(&huart4, 0xD4);
 8002a96:	22d4      	movs	r2, #212	; 0xd4
 8002a98:	4955      	ldr	r1, [pc, #340]	; (8002bf0 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8002a9a:	4856      	ldr	r0, [pc, #344]	; (8002bf4 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8002a9c:	f7fd ffb0 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8002aa0:	22c4      	movs	r2, #196	; 0xc4
 8002aa2:	4953      	ldr	r1, [pc, #332]	; (8002bf0 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8002aa4:	4854      	ldr	r0, [pc, #336]	; (8002bf8 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8002aa6:	f7fd ffab 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8002aaa:	2320      	movs	r3, #32
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	4953      	ldr	r1, [pc, #332]	; (8002c00 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8002ab4:	4853      	ldr	r0, [pc, #332]	; (8002c04 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8002ab6:	f7fe f897 	bl	8000be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8002aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	4b51      	ldr	r3, [pc, #324]	; (8002c08 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	4951      	ldr	r1, [pc, #324]	; (8002c0c <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8002ac6:	4852      	ldr	r0, [pc, #328]	; (8002c10 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8002ac8:	f7fe f88e 	bl	8000be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
volatile const float C2_q1 = 3.0*C0_q1 / Time*Time;
 8002acc:	4b51      	ldr	r3, [pc, #324]	; (8002c14 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ad6:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002ada:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002ade:	4b4e      	ldr	r3, [pc, #312]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ae8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002aec:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002aee:	edd3 7a00 	vldr	s15, [r3]
 8002af2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002af6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002afa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8002b00:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = 2.0*C0_q1 / Time*Time*Time;
 8002b04:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b0e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002b12:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b1c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002b20:	4b3d      	ldr	r3, [pc, #244]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b2a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b2e:	4b3a      	ldr	r3, [pc, #232]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002b30:	edd3 7a00 	vldr	s15, [r3]
 8002b34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b38:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b40:	4b37      	ldr	r3, [pc, #220]	; (8002c20 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8002b42:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = 3.0*C0_q3 / Time*Time;
 8002b46:	4b37      	ldr	r3, [pc, #220]	; (8002c24 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b50:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002b54:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002b58:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002b5a:	edd3 7a00 	vldr	s15, [r3]
 8002b5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b62:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002b66:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8002b7a:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = 2.0*C0_q3 / Time*Time*Time;
 8002b7e:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b88:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002b8c:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002b8e:	edd3 7a00 	vldr	s15, [r3]
 8002b92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b96:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002b9a:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002b9c:	edd3 7a00 	vldr	s15, [r3]
 8002ba0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ba4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002baa:	edd3 7a00 	vldr	s15, [r3]
 8002bae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bb2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002bb6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bba:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8002bbc:	edc3 7a00 	vstr	s15, [r3]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d110      	bne.n	8002be8 <_Z41__static_initialization_and_destruction_0ii+0x170>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d10b      	bne.n	8002be8 <_Z41__static_initialization_and_destruction_0ii+0x170>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8002bd0:	480f      	ldr	r0, [pc, #60]	; (8002c10 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8002bd2:	f7fe f84d 	bl	8000c70 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8002bd6:	480b      	ldr	r0, [pc, #44]	; (8002c04 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8002bd8:	f7fe f84a 	bl	8000c70 <_ZN7StepperD1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8002bdc:	4806      	ldr	r0, [pc, #24]	; (8002bf8 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8002bde:	f7fd ff23 	bl	8000a28 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8002be2:	4804      	ldr	r0, [pc, #16]	; (8002bf4 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8002be4:	f7fd ff20 	bl	8000a28 <_ZN5AMT21D1Ev>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	24000614 	.word	0x24000614
 8002bf4:	24000a1c 	.word	0x24000a1c
 8002bf8:	24000a30 	.word	0x24000a30
 8002bfc:	58020400 	.word	0x58020400
 8002c00:	24000368 	.word	0x24000368
 8002c04:	24000a44 	.word	0x24000a44
 8002c08:	58021000 	.word	0x58021000
 8002c0c:	240005c8 	.word	0x240005c8
 8002c10:	24000a6c 	.word	0x24000a6c
 8002c14:	24000018 	.word	0x24000018
 8002c18:	24000014 	.word	0x24000014
 8002c1c:	24000aec 	.word	0x24000aec
 8002c20:	24000af0 	.word	0x24000af0
 8002c24:	2400001c 	.word	0x2400001c
 8002c28:	24000af4 	.word	0x24000af4
 8002c2c:	24000af8 	.word	0x24000af8

08002c30 <_GLOBAL__sub_I_hcrc>:
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f7ff ff1d 	bl	8002a78 <_Z41__static_initialization_and_destruction_0ii>
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_GLOBAL__sub_D_hcrc>:
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7ff ff15 	bl	8002a78 <_Z41__static_initialization_and_destruction_0ii>
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_MspInit+0x30>)
 8002c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c5c:	4a08      	ldr	r2, [pc, #32]	; (8002c80 <HAL_MspInit+0x30>)
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_MspInit+0x30>)
 8002c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	58024400 	.word	0x58024400

08002c84 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0b      	ldr	r2, [pc, #44]	; (8002cc0 <HAL_CRC_MspInit+0x3c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d10e      	bne.n	8002cb4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_CRC_MspInit+0x40>)
 8002c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9c:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_CRC_MspInit+0x40>)
 8002c9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca6:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <HAL_CRC_MspInit+0x40>)
 8002ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	58024c00 	.word	0x58024c00
 8002cc4:	58024400 	.word	0x58024400

08002cc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b0b8      	sub	sp, #224	; 0xe0
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ce0:	f107 0310 	add.w	r3, r7, #16
 8002ce4:	22bc      	movs	r2, #188	; 0xbc
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f009 ff05 	bl	800caf8 <memset>
  if(hspi->Instance==SPI3)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <HAL_SPI_MspInit+0xc0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d142      	bne.n	8002d7e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cfc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	4618      	mov	r0, r3
 8002d08:	f004 fd7c 	bl	8007804 <HAL_RCCEx_PeriphCLKConfig>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002d12:	f7ff fe97 	bl	8002a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d16:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <HAL_SPI_MspInit+0xc4>)
 8002d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d1c:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <HAL_SPI_MspInit+0xc4>)
 8002d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d26:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_SPI_MspInit+0xc4>)
 8002d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d34:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_SPI_MspInit+0xc4>)
 8002d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3a:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <HAL_SPI_MspInit+0xc4>)
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_SPI_MspInit+0xc4>)
 8002d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002d52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002d56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d6c:	2306      	movs	r3, #6
 8002d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d76:	4619      	mov	r1, r3
 8002d78:	4805      	ldr	r0, [pc, #20]	; (8002d90 <HAL_SPI_MspInit+0xc8>)
 8002d7a:	f003 fb6d 	bl	8006458 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002d7e:	bf00      	nop
 8002d80:	37e0      	adds	r7, #224	; 0xe0
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40003c00 	.word	0x40003c00
 8002d8c:	58024400 	.word	0x58024400
 8002d90:	58020800 	.word	0x58020800

08002d94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08e      	sub	sp, #56	; 0x38
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a8b      	ldr	r2, [pc, #556]	; (8002fd0 <HAL_TIM_Base_MspInit+0x23c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d10f      	bne.n	8002dc6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002da6:	4b8b      	ldr	r3, [pc, #556]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dac:	4a89      	ldr	r2, [pc, #548]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002db6:	4b87      	ldr	r3, [pc, #540]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002dc4:	e100      	b.n	8002fc8 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM2)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dce:	d10f      	bne.n	8002df0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dd0:	4b80      	ldr	r3, [pc, #512]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dd6:	4a7f      	ldr	r2, [pc, #508]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002de0:	4b7c      	ldr	r3, [pc, #496]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002dee:	e0eb      	b.n	8002fc8 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM3)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a78      	ldr	r2, [pc, #480]	; (8002fd8 <HAL_TIM_Base_MspInit+0x244>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10f      	bne.n	8002e1a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dfa:	4b76      	ldr	r3, [pc, #472]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e00:	4a74      	ldr	r2, [pc, #464]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002e02:	f043 0302 	orr.w	r3, r3, #2
 8002e06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e0a:	4b72      	ldr	r3, [pc, #456]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002e18:	e0d6      	b.n	8002fc8 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM4)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a6f      	ldr	r2, [pc, #444]	; (8002fdc <HAL_TIM_Base_MspInit+0x248>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d10f      	bne.n	8002e44 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e24:	4b6b      	ldr	r3, [pc, #428]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e2a:	4a6a      	ldr	r2, [pc, #424]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e34:	4b67      	ldr	r3, [pc, #412]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002e36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002e42:	e0c1      	b.n	8002fc8 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM5)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a65      	ldr	r2, [pc, #404]	; (8002fe0 <HAL_TIM_Base_MspInit+0x24c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d117      	bne.n	8002e7e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e4e:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e54:	4a5f      	ldr	r2, [pc, #380]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e5e:	4b5d      	ldr	r3, [pc, #372]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2032      	movs	r0, #50	; 0x32
 8002e72:	f000 ffa2 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002e76:	2032      	movs	r0, #50	; 0x32
 8002e78:	f000 ffb9 	bl	8003dee <HAL_NVIC_EnableIRQ>
}
 8002e7c:	e0a4      	b.n	8002fc8 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM6)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <HAL_TIM_Base_MspInit+0x250>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d117      	bne.n	8002eb8 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e88:	4b52      	ldr	r3, [pc, #328]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e8e:	4a51      	ldr	r2, [pc, #324]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002e90:	f043 0310 	orr.w	r3, r3, #16
 8002e94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e98:	4b4e      	ldr	r3, [pc, #312]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	623b      	str	r3, [r7, #32]
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	2036      	movs	r0, #54	; 0x36
 8002eac:	f000 ff85 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002eb0:	2036      	movs	r0, #54	; 0x36
 8002eb2:	f000 ff9c 	bl	8003dee <HAL_NVIC_EnableIRQ>
}
 8002eb6:	e087      	b.n	8002fc8 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM7)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a4a      	ldr	r2, [pc, #296]	; (8002fe8 <HAL_TIM_Base_MspInit+0x254>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d117      	bne.n	8002ef2 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002ec2:	4b44      	ldr	r3, [pc, #272]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ec8:	4a42      	ldr	r2, [pc, #264]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002eca:	f043 0320 	orr.w	r3, r3, #32
 8002ece:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ed2:	4b40      	ldr	r3, [pc, #256]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	2037      	movs	r0, #55	; 0x37
 8002ee6:	f000 ff68 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002eea:	2037      	movs	r0, #55	; 0x37
 8002eec:	f000 ff7f 	bl	8003dee <HAL_NVIC_EnableIRQ>
}
 8002ef0:	e06a      	b.n	8002fc8 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM12)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a3d      	ldr	r2, [pc, #244]	; (8002fec <HAL_TIM_Base_MspInit+0x258>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d117      	bne.n	8002f2c <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002efc:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002efe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f02:	4a34      	ldr	r2, [pc, #208]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f0c:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002f0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	202b      	movs	r0, #43	; 0x2b
 8002f20:	f000 ff4b 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002f24:	202b      	movs	r0, #43	; 0x2b
 8002f26:	f000 ff62 	bl	8003dee <HAL_NVIC_EnableIRQ>
}
 8002f2a:	e04d      	b.n	8002fc8 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM13)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2f      	ldr	r2, [pc, #188]	; (8002ff0 <HAL_TIM_Base_MspInit+0x25c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d117      	bne.n	8002f66 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002f36:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f3c:	4a25      	ldr	r2, [pc, #148]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f46:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2100      	movs	r1, #0
 8002f58:	202c      	movs	r0, #44	; 0x2c
 8002f5a:	f000 ff2e 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002f5e:	202c      	movs	r0, #44	; 0x2c
 8002f60:	f000 ff45 	bl	8003dee <HAL_NVIC_EnableIRQ>
}
 8002f64:	e030      	b.n	8002fc8 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM14)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a22      	ldr	r2, [pc, #136]	; (8002ff4 <HAL_TIM_Base_MspInit+0x260>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d117      	bne.n	8002fa0 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002f72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f76:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	202d      	movs	r0, #45	; 0x2d
 8002f94:	f000 ff11 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002f98:	202d      	movs	r0, #45	; 0x2d
 8002f9a:	f000 ff28 	bl	8003dee <HAL_NVIC_EnableIRQ>
}
 8002f9e:	e013      	b.n	8002fc8 <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM15)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <HAL_TIM_Base_MspInit+0x264>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fb0:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_TIM_Base_MspInit+0x240>)
 8002fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
}
 8002fc8:	bf00      	nop
 8002fca:	3738      	adds	r7, #56	; 0x38
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	58024400 	.word	0x58024400
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40000800 	.word	0x40000800
 8002fe0:	40000c00 	.word	0x40000c00
 8002fe4:	40001000 	.word	0x40001000
 8002fe8:	40001400 	.word	0x40001400
 8002fec:	40001800 	.word	0x40001800
 8002ff0:	40001c00 	.word	0x40001c00
 8002ff4:	40002000 	.word	0x40002000
 8002ff8:	40014000 	.word	0x40014000

08002ffc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08c      	sub	sp, #48	; 0x30
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 031c 	add.w	r3, r7, #28
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a5e      	ldr	r2, [pc, #376]	; (8003194 <HAL_TIM_MspPostInit+0x198>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d120      	bne.n	8003060 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800301e:	4b5e      	ldr	r3, [pc, #376]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 8003020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003024:	4a5c      	ldr	r2, [pc, #368]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 8003026:	f043 0310 	orr.w	r3, r3, #16
 800302a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800302e:	4b5a      	ldr	r3, [pc, #360]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 8003030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 800303c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003042:	2302      	movs	r3, #2
 8003044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304a:	2300      	movs	r3, #0
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800304e:	2301      	movs	r3, #1
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8003052:	f107 031c 	add.w	r3, r7, #28
 8003056:	4619      	mov	r1, r3
 8003058:	4850      	ldr	r0, [pc, #320]	; (800319c <HAL_TIM_MspPostInit+0x1a0>)
 800305a:	f003 f9fd 	bl	8006458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800305e:	e094      	b.n	800318a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003068:	d120      	bne.n	80030ac <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800306a:	4b4b      	ldr	r3, [pc, #300]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 800306c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003070:	4a49      	ldr	r2, [pc, #292]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 8003072:	f043 0302 	orr.w	r3, r3, #2
 8003076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800307a:	4b47      	ldr	r3, [pc, #284]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 800307c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8003088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800308c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800309a:	2301      	movs	r3, #1
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800309e:	f107 031c 	add.w	r3, r7, #28
 80030a2:	4619      	mov	r1, r3
 80030a4:	483e      	ldr	r0, [pc, #248]	; (80031a0 <HAL_TIM_MspPostInit+0x1a4>)
 80030a6:	f003 f9d7 	bl	8006458 <HAL_GPIO_Init>
}
 80030aa:	e06e      	b.n	800318a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a3c      	ldr	r2, [pc, #240]	; (80031a4 <HAL_TIM_MspPostInit+0x1a8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d11f      	bne.n	80030f6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 80030b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030bc:	4a36      	ldr	r2, [pc, #216]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c6:	4b34      	ldr	r3, [pc, #208]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 80030c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80030d4:	2340      	movs	r3, #64	; 0x40
 80030d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e0:	2300      	movs	r3, #0
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030e4:	2302      	movs	r3, #2
 80030e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80030e8:	f107 031c 	add.w	r3, r7, #28
 80030ec:	4619      	mov	r1, r3
 80030ee:	482e      	ldr	r0, [pc, #184]	; (80031a8 <HAL_TIM_MspPostInit+0x1ac>)
 80030f0:	f003 f9b2 	bl	8006458 <HAL_GPIO_Init>
}
 80030f4:	e049      	b.n	800318a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <HAL_TIM_MspPostInit+0x1b0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d120      	bne.n	8003142 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003100:	4b25      	ldr	r3, [pc, #148]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 8003102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003106:	4a24      	ldr	r2, [pc, #144]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003110:	4b21      	ldr	r3, [pc, #132]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 8003112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 800311e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312c:	2300      	movs	r3, #0
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003130:	2302      	movs	r3, #2
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8003134:	f107 031c 	add.w	r3, r7, #28
 8003138:	4619      	mov	r1, r3
 800313a:	4819      	ldr	r0, [pc, #100]	; (80031a0 <HAL_TIM_MspPostInit+0x1a4>)
 800313c:	f003 f98c 	bl	8006458 <HAL_GPIO_Init>
}
 8003140:	e023      	b.n	800318a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1a      	ldr	r2, [pc, #104]	; (80031b0 <HAL_TIM_MspPostInit+0x1b4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d11e      	bne.n	800318a <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800314c:	4b12      	ldr	r3, [pc, #72]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 800314e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003152:	4a11      	ldr	r2, [pc, #68]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 8003154:	f043 0310 	orr.w	r3, r3, #16
 8003158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_TIM_MspPostInit+0x19c>)
 800315e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800316a:	2340      	movs	r3, #64	; 0x40
 800316c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003176:	2300      	movs	r3, #0
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800317a:	2304      	movs	r3, #4
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 800317e:	f107 031c 	add.w	r3, r7, #28
 8003182:	4619      	mov	r1, r3
 8003184:	4805      	ldr	r0, [pc, #20]	; (800319c <HAL_TIM_MspPostInit+0x1a0>)
 8003186:	f003 f967 	bl	8006458 <HAL_GPIO_Init>
}
 800318a:	bf00      	nop
 800318c:	3730      	adds	r7, #48	; 0x30
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40010000 	.word	0x40010000
 8003198:	58024400 	.word	0x58024400
 800319c:	58021000 	.word	0x58021000
 80031a0:	58020400 	.word	0x58020400
 80031a4:	40000400 	.word	0x40000400
 80031a8:	58020000 	.word	0x58020000
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40014000 	.word	0x40014000

080031b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b0bc      	sub	sp, #240	; 0xf0
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031cc:	f107 0320 	add.w	r3, r7, #32
 80031d0:	22bc      	movs	r2, #188	; 0xbc
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f009 fc8f 	bl	800caf8 <memset>
  if(huart->Instance==UART4)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4aa1      	ldr	r2, [pc, #644]	; (8003464 <HAL_UART_MspInit+0x2b0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	f040 80b7 	bne.w	8003354 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80031e6:	2302      	movs	r3, #2
 80031e8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031f0:	f107 0320 	add.w	r3, r7, #32
 80031f4:	4618      	mov	r0, r3
 80031f6:	f004 fb05 	bl	8007804 <HAL_RCCEx_PeriphCLKConfig>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003200:	f7ff fc20 	bl	8002a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003204:	4b98      	ldr	r3, [pc, #608]	; (8003468 <HAL_UART_MspInit+0x2b4>)
 8003206:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800320a:	4a97      	ldr	r2, [pc, #604]	; (8003468 <HAL_UART_MspInit+0x2b4>)
 800320c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003210:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003214:	4b94      	ldr	r3, [pc, #592]	; (8003468 <HAL_UART_MspInit+0x2b4>)
 8003216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800321a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003222:	4b91      	ldr	r3, [pc, #580]	; (8003468 <HAL_UART_MspInit+0x2b4>)
 8003224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003228:	4a8f      	ldr	r2, [pc, #572]	; (8003468 <HAL_UART_MspInit+0x2b4>)
 800322a:	f043 0308 	orr.w	r3, r3, #8
 800322e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003232:	4b8d      	ldr	r3, [pc, #564]	; (8003468 <HAL_UART_MspInit+0x2b4>)
 8003234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003240:	2303      	movs	r3, #3
 8003242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	2302      	movs	r3, #2
 8003248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003258:	2308      	movs	r3, #8
 800325a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800325e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003262:	4619      	mov	r1, r3
 8003264:	4881      	ldr	r0, [pc, #516]	; (800346c <HAL_UART_MspInit+0x2b8>)
 8003266:	f003 f8f7 	bl	8006458 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 800326a:	4b81      	ldr	r3, [pc, #516]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 800326c:	4a81      	ldr	r2, [pc, #516]	; (8003474 <HAL_UART_MspInit+0x2c0>)
 800326e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003270:	4b7f      	ldr	r3, [pc, #508]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 8003272:	223f      	movs	r2, #63	; 0x3f
 8003274:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003276:	4b7e      	ldr	r3, [pc, #504]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800327c:	4b7c      	ldr	r3, [pc, #496]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003282:	4b7b      	ldr	r3, [pc, #492]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 8003284:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003288:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800328a:	4b79      	ldr	r3, [pc, #484]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 800328c:	2200      	movs	r2, #0
 800328e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003290:	4b77      	ldr	r3, [pc, #476]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 8003292:	2200      	movs	r2, #0
 8003294:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003296:	4b76      	ldr	r3, [pc, #472]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 8003298:	2200      	movs	r2, #0
 800329a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800329c:	4b74      	ldr	r3, [pc, #464]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 800329e:	2200      	movs	r2, #0
 80032a0:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80032a2:	4b73      	ldr	r3, [pc, #460]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 80032a4:	2204      	movs	r2, #4
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80032a8:	4b71      	ldr	r3, [pc, #452]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 80032aa:	2203      	movs	r2, #3
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80032ae:	4b70      	ldr	r3, [pc, #448]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80032b4:	4b6e      	ldr	r3, [pc, #440]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80032ba:	486d      	ldr	r0, [pc, #436]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 80032bc:	f000 fea8 	bl	8004010 <HAL_DMA_Init>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80032c6:	f7ff fbbd 	bl	8002a44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a68      	ldr	r2, [pc, #416]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 80032ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80032d0:	4a67      	ldr	r2, [pc, #412]	; (8003470 <HAL_UART_MspInit+0x2bc>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80032d6:	4b68      	ldr	r3, [pc, #416]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 80032d8:	4a68      	ldr	r2, [pc, #416]	; (800347c <HAL_UART_MspInit+0x2c8>)
 80032da:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80032dc:	4b66      	ldr	r3, [pc, #408]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 80032de:	2240      	movs	r2, #64	; 0x40
 80032e0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032e2:	4b65      	ldr	r3, [pc, #404]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 80032e4:	2240      	movs	r2, #64	; 0x40
 80032e6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e8:	4b63      	ldr	r3, [pc, #396]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032ee:	4b62      	ldr	r3, [pc, #392]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 80032f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032f4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f6:	4b60      	ldr	r3, [pc, #384]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032fc:	4b5e      	ldr	r3, [pc, #376]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 80032fe:	2200      	movs	r2, #0
 8003300:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003302:	4b5d      	ldr	r3, [pc, #372]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 8003304:	2200      	movs	r2, #0
 8003306:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003308:	4b5b      	ldr	r3, [pc, #364]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 800330a:	2200      	movs	r2, #0
 800330c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800330e:	4b5a      	ldr	r3, [pc, #360]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 8003310:	2204      	movs	r2, #4
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003314:	4b58      	ldr	r3, [pc, #352]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 8003316:	2203      	movs	r2, #3
 8003318:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800331a:	4b57      	ldr	r3, [pc, #348]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 800331c:	2200      	movs	r2, #0
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003320:	4b55      	ldr	r3, [pc, #340]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003326:	4854      	ldr	r0, [pc, #336]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 8003328:	f000 fe72 	bl	8004010 <HAL_DMA_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8003332:	f7ff fb87 	bl	8002a44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4f      	ldr	r2, [pc, #316]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 800333a:	679a      	str	r2, [r3, #120]	; 0x78
 800333c:	4a4e      	ldr	r2, [pc, #312]	; (8003478 <HAL_UART_MspInit+0x2c4>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2100      	movs	r1, #0
 8003346:	2034      	movs	r0, #52	; 0x34
 8003348:	f000 fd37 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800334c:	2034      	movs	r0, #52	; 0x34
 800334e:	f000 fd4e 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003352:	e154      	b.n	80035fe <HAL_UART_MspInit+0x44a>
  else if(huart->Instance==UART7)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a49      	ldr	r2, [pc, #292]	; (8003480 <HAL_UART_MspInit+0x2cc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	f040 8098 	bne.w	8003490 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003360:	2302      	movs	r3, #2
 8003362:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003364:	2300      	movs	r3, #0
 8003366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800336a:	f107 0320 	add.w	r3, r7, #32
 800336e:	4618      	mov	r0, r3
 8003370:	f004 fa48 	bl	8007804 <HAL_RCCEx_PeriphCLKConfig>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 800337a:	f7ff fb63 	bl	8002a44 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800337e:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <HAL_UART_MspInit+0x2b4>)
 8003380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003384:	4a38      	ldr	r2, [pc, #224]	; (8003468 <HAL_UART_MspInit+0x2b4>)
 8003386:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800338a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <HAL_UART_MspInit+0x2b4>)
 8003390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003394:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800339c:	4b32      	ldr	r3, [pc, #200]	; (8003468 <HAL_UART_MspInit+0x2b4>)
 800339e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a2:	4a31      	ldr	r2, [pc, #196]	; (8003468 <HAL_UART_MspInit+0x2b4>)
 80033a4:	f043 0310 	orr.w	r3, r3, #16
 80033a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ac:	4b2e      	ldr	r3, [pc, #184]	; (8003468 <HAL_UART_MspInit+0x2b4>)
 80033ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80033ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80033be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	2300      	movs	r3, #0
 80033d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80033d4:	2307      	movs	r3, #7
 80033d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033da:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033de:	4619      	mov	r1, r3
 80033e0:	4828      	ldr	r0, [pc, #160]	; (8003484 <HAL_UART_MspInit+0x2d0>)
 80033e2:	f003 f839 	bl	8006458 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 80033e6:	4b28      	ldr	r3, [pc, #160]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 80033e8:	4a28      	ldr	r2, [pc, #160]	; (800348c <HAL_UART_MspInit+0x2d8>)
 80033ea:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80033ec:	4b26      	ldr	r3, [pc, #152]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 80033ee:	2250      	movs	r2, #80	; 0x50
 80033f0:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033f2:	4b25      	ldr	r3, [pc, #148]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 80033f4:	2240      	movs	r2, #64	; 0x40
 80033f6:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f8:	4b23      	ldr	r3, [pc, #140]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 8003400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003404:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 8003408:	2200      	movs	r2, #0
 800340a:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800340c:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 800340e:	2200      	movs	r2, #0
 8003410:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8003412:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 8003414:	2200      	movs	r2, #0
 8003416:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 800341a:	2200      	movs	r2, #0
 800341c:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 8003420:	2204      	movs	r2, #4
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003424:	4b18      	ldr	r3, [pc, #96]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 8003426:	2203      	movs	r2, #3
 8003428:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 800342c:	2200      	movs	r2, #0
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003430:	4b15      	ldr	r3, [pc, #84]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8003436:	4814      	ldr	r0, [pc, #80]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 8003438:	f000 fdea 	bl	8004010 <HAL_DMA_Init>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_UART_MspInit+0x292>
      Error_Handler();
 8003442:	f7ff faff 	bl	8002a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a0f      	ldr	r2, [pc, #60]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 800344a:	679a      	str	r2, [r3, #120]	; 0x78
 800344c:	4a0e      	ldr	r2, [pc, #56]	; (8003488 <HAL_UART_MspInit+0x2d4>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	2100      	movs	r1, #0
 8003456:	2052      	movs	r0, #82	; 0x52
 8003458:	f000 fcaf 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800345c:	2052      	movs	r0, #82	; 0x52
 800345e:	f000 fcc6 	bl	8003dee <HAL_NVIC_EnableIRQ>
}
 8003462:	e0cc      	b.n	80035fe <HAL_UART_MspInit+0x44a>
 8003464:	40004c00 	.word	0x40004c00
 8003468:	58024400 	.word	0x58024400
 800346c:	58020c00 	.word	0x58020c00
 8003470:	240007c4 	.word	0x240007c4
 8003474:	40020058 	.word	0x40020058
 8003478:	2400083c 	.word	0x2400083c
 800347c:	40020070 	.word	0x40020070
 8003480:	40007800 	.word	0x40007800
 8003484:	58021000 	.word	0x58021000
 8003488:	240008b4 	.word	0x240008b4
 800348c:	40020010 	.word	0x40020010
  else if(huart->Instance==USART3)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a5c      	ldr	r2, [pc, #368]	; (8003608 <HAL_UART_MspInit+0x454>)
 8003496:	4293      	cmp	r3, r2
 8003498:	f040 80b1 	bne.w	80035fe <HAL_UART_MspInit+0x44a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800349c:	2302      	movs	r3, #2
 800349e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034a6:	f107 0320 	add.w	r3, r7, #32
 80034aa:	4618      	mov	r0, r3
 80034ac:	f004 f9aa 	bl	8007804 <HAL_RCCEx_PeriphCLKConfig>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_UART_MspInit+0x306>
      Error_Handler();
 80034b6:	f7ff fac5 	bl	8002a44 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034ba:	4b54      	ldr	r3, [pc, #336]	; (800360c <HAL_UART_MspInit+0x458>)
 80034bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034c0:	4a52      	ldr	r2, [pc, #328]	; (800360c <HAL_UART_MspInit+0x458>)
 80034c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034ca:	4b50      	ldr	r3, [pc, #320]	; (800360c <HAL_UART_MspInit+0x458>)
 80034cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034d8:	4b4c      	ldr	r3, [pc, #304]	; (800360c <HAL_UART_MspInit+0x458>)
 80034da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034de:	4a4b      	ldr	r2, [pc, #300]	; (800360c <HAL_UART_MspInit+0x458>)
 80034e0:	f043 0308 	orr.w	r3, r3, #8
 80034e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034e8:	4b48      	ldr	r3, [pc, #288]	; (800360c <HAL_UART_MspInit+0x458>)
 80034ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fe:	2302      	movs	r3, #2
 8003500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350a:	2300      	movs	r3, #0
 800350c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003510:	2307      	movs	r3, #7
 8003512:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003516:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800351a:	4619      	mov	r1, r3
 800351c:	483c      	ldr	r0, [pc, #240]	; (8003610 <HAL_UART_MspInit+0x45c>)
 800351e:	f002 ff9b 	bl	8006458 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003522:	4b3c      	ldr	r3, [pc, #240]	; (8003614 <HAL_UART_MspInit+0x460>)
 8003524:	4a3c      	ldr	r2, [pc, #240]	; (8003618 <HAL_UART_MspInit+0x464>)
 8003526:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003528:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_UART_MspInit+0x460>)
 800352a:	222d      	movs	r2, #45	; 0x2d
 800352c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800352e:	4b39      	ldr	r3, [pc, #228]	; (8003614 <HAL_UART_MspInit+0x460>)
 8003530:	2200      	movs	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003534:	4b37      	ldr	r3, [pc, #220]	; (8003614 <HAL_UART_MspInit+0x460>)
 8003536:	2200      	movs	r2, #0
 8003538:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800353a:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_UART_MspInit+0x460>)
 800353c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003540:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003542:	4b34      	ldr	r3, [pc, #208]	; (8003614 <HAL_UART_MspInit+0x460>)
 8003544:	2200      	movs	r2, #0
 8003546:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003548:	4b32      	ldr	r3, [pc, #200]	; (8003614 <HAL_UART_MspInit+0x460>)
 800354a:	2200      	movs	r2, #0
 800354c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800354e:	4b31      	ldr	r3, [pc, #196]	; (8003614 <HAL_UART_MspInit+0x460>)
 8003550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003554:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003556:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <HAL_UART_MspInit+0x460>)
 8003558:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800355c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800355e:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <HAL_UART_MspInit+0x460>)
 8003560:	2200      	movs	r2, #0
 8003562:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003564:	482b      	ldr	r0, [pc, #172]	; (8003614 <HAL_UART_MspInit+0x460>)
 8003566:	f000 fd53 	bl	8004010 <HAL_DMA_Init>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8003570:	f7ff fa68 	bl	8002a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a27      	ldr	r2, [pc, #156]	; (8003614 <HAL_UART_MspInit+0x460>)
 8003578:	67da      	str	r2, [r3, #124]	; 0x7c
 800357a:	4a26      	ldr	r2, [pc, #152]	; (8003614 <HAL_UART_MspInit+0x460>)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8003580:	4b26      	ldr	r3, [pc, #152]	; (800361c <HAL_UART_MspInit+0x468>)
 8003582:	4a27      	ldr	r2, [pc, #156]	; (8003620 <HAL_UART_MspInit+0x46c>)
 8003584:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003586:	4b25      	ldr	r3, [pc, #148]	; (800361c <HAL_UART_MspInit+0x468>)
 8003588:	222e      	movs	r2, #46	; 0x2e
 800358a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800358c:	4b23      	ldr	r3, [pc, #140]	; (800361c <HAL_UART_MspInit+0x468>)
 800358e:	2240      	movs	r2, #64	; 0x40
 8003590:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <HAL_UART_MspInit+0x468>)
 8003594:	2200      	movs	r2, #0
 8003596:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003598:	4b20      	ldr	r3, [pc, #128]	; (800361c <HAL_UART_MspInit+0x468>)
 800359a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800359e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035a0:	4b1e      	ldr	r3, [pc, #120]	; (800361c <HAL_UART_MspInit+0x468>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_UART_MspInit+0x468>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_UART_MspInit+0x468>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80035b2:	4b1a      	ldr	r3, [pc, #104]	; (800361c <HAL_UART_MspInit+0x468>)
 80035b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035b8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80035ba:	4b18      	ldr	r3, [pc, #96]	; (800361c <HAL_UART_MspInit+0x468>)
 80035bc:	2204      	movs	r2, #4
 80035be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80035c0:	4b16      	ldr	r3, [pc, #88]	; (800361c <HAL_UART_MspInit+0x468>)
 80035c2:	2203      	movs	r2, #3
 80035c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_UART_MspInit+0x468>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <HAL_UART_MspInit+0x468>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80035d2:	4812      	ldr	r0, [pc, #72]	; (800361c <HAL_UART_MspInit+0x468>)
 80035d4:	f000 fd1c 	bl	8004010 <HAL_DMA_Init>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_UART_MspInit+0x42e>
      Error_Handler();
 80035de:	f7ff fa31 	bl	8002a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a0d      	ldr	r2, [pc, #52]	; (800361c <HAL_UART_MspInit+0x468>)
 80035e6:	679a      	str	r2, [r3, #120]	; 0x78
 80035e8:	4a0c      	ldr	r2, [pc, #48]	; (800361c <HAL_UART_MspInit+0x468>)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80035ee:	2200      	movs	r2, #0
 80035f0:	2100      	movs	r1, #0
 80035f2:	2027      	movs	r0, #39	; 0x27
 80035f4:	f000 fbe1 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80035f8:	2027      	movs	r0, #39	; 0x27
 80035fa:	f000 fbf8 	bl	8003dee <HAL_NVIC_EnableIRQ>
}
 80035fe:	bf00      	nop
 8003600:	37f0      	adds	r7, #240	; 0xf0
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40004800 	.word	0x40004800
 800360c:	58024400 	.word	0x58024400
 8003610:	58020c00 	.word	0x58020c00
 8003614:	2400092c 	.word	0x2400092c
 8003618:	40020028 	.word	0x40020028
 800361c:	240009a4 	.word	0x240009a4
 8003620:	40020040 	.word	0x40020040

08003624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003628:	e7fe      	b.n	8003628 <NMI_Handler+0x4>

0800362a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800362e:	e7fe      	b.n	800362e <HardFault_Handler+0x4>

08003630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003634:	e7fe      	b.n	8003634 <MemManage_Handler+0x4>

08003636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800363a:	e7fe      	b.n	800363a <BusFault_Handler+0x4>

0800363c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003640:	e7fe      	b.n	8003640 <UsageFault_Handler+0x4>

08003642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003642:	b480      	push	{r7}
 8003644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003670:	f000 fa9c 	bl	8003bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003674:	f000 fbd5 	bl	8003e22 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003678:	bf00      	nop
 800367a:	bd80      	pop	{r7, pc}

0800367c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8003680:	4802      	ldr	r0, [pc, #8]	; (800368c <DMA1_Stream0_IRQHandler+0x10>)
 8003682:	f001 fd83 	bl	800518c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	240008b4 	.word	0x240008b4

08003690 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003694:	4802      	ldr	r0, [pc, #8]	; (80036a0 <DMA1_Stream1_IRQHandler+0x10>)
 8003696:	f001 fd79 	bl	800518c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800369a:	bf00      	nop
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	2400092c 	.word	0x2400092c

080036a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80036a8:	4802      	ldr	r0, [pc, #8]	; (80036b4 <DMA1_Stream2_IRQHandler+0x10>)
 80036aa:	f001 fd6f 	bl	800518c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	240009a4 	.word	0x240009a4

080036b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80036bc:	4802      	ldr	r0, [pc, #8]	; (80036c8 <DMA1_Stream3_IRQHandler+0x10>)
 80036be:	f001 fd65 	bl	800518c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	240007c4 	.word	0x240007c4

080036cc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80036d0:	4802      	ldr	r0, [pc, #8]	; (80036dc <DMA1_Stream4_IRQHandler+0x10>)
 80036d2:	f001 fd5b 	bl	800518c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	2400083c 	.word	0x2400083c

080036e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 80036e4:	2040      	movs	r0, #64	; 0x40
 80036e6:	f003 f880 	bl	80067ea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 80036ea:	2080      	movs	r0, #128	; 0x80
 80036ec:	f003 f87d 	bl	80067ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80036f0:	bf00      	nop
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80036f8:	4802      	ldr	r0, [pc, #8]	; (8003704 <USART3_IRQHandler+0x10>)
 80036fa:	f007 f9b1 	bl	800aa60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	24000734 	.word	0x24000734

08003708 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 800370c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003710:	f003 f86b 	bl	80067ea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8003714:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003718:	f003 f867 	bl	80067ea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 800371c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003720:	f003 f863 	bl	80067ea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8003724:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003728:	f003 f85f 	bl	80067ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}

08003730 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003736:	f005 ff27 	bl	8009588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	240004e4 	.word	0x240004e4

08003744 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003748:	4802      	ldr	r0, [pc, #8]	; (8003754 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800374a:	f005 ff1d 	bl	8009588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	24000530 	.word	0x24000530

08003758 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800375c:	4802      	ldr	r0, [pc, #8]	; (8003768 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800375e:	f005 ff13 	bl	8009588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	2400057c 	.word	0x2400057c

0800376c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <TIM5_IRQHandler+0x10>)
 8003772:	f005 ff09 	bl	8009588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	24000400 	.word	0x24000400

08003780 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <UART4_IRQHandler+0x10>)
 8003786:	f007 f96b 	bl	800aa60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	24000614 	.word	0x24000614

08003794 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <TIM6_DAC_IRQHandler+0x10>)
 800379a:	f005 fef5 	bl	8009588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	2400044c 	.word	0x2400044c

080037a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80037ac:	4802      	ldr	r0, [pc, #8]	; (80037b8 <TIM7_IRQHandler+0x10>)
 80037ae:	f005 feeb 	bl	8009588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	24000498 	.word	0x24000498

080037bc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <UART7_IRQHandler+0x10>)
 80037c2:	f007 f94d 	bl	800aa60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	240006a4 	.word	0x240006a4

080037d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
	return 1;
 80037d4:	2301      	movs	r3, #1
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <_kill>:

int _kill(int pid, int sig)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037ea:	f009 f95b 	bl	800caa4 <__errno>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2216      	movs	r2, #22
 80037f2:	601a      	str	r2, [r3, #0]
	return -1;
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <_exit>:

void _exit (int status)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003808:	f04f 31ff 	mov.w	r1, #4294967295
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ffe7 	bl	80037e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003812:	e7fe      	b.n	8003812 <_exit+0x12>

08003814 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e00a      	b.n	800383c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003826:	f3af 8000 	nop.w
 800382a:	4601      	mov	r1, r0
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	60ba      	str	r2, [r7, #8]
 8003832:	b2ca      	uxtb	r2, r1
 8003834:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	3301      	adds	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	dbf0      	blt.n	8003826 <_read+0x12>
	}

return len;
 8003844:	687b      	ldr	r3, [r7, #4]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e009      	b.n	8003874 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	60ba      	str	r2, [r7, #8]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	3301      	adds	r3, #1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	429a      	cmp	r2, r3
 800387a:	dbf1      	blt.n	8003860 <_write+0x12>
	}
	return len;
 800387c:	687b      	ldr	r3, [r7, #4]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <_close>:

int _close(int file)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
	return -1;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038ae:	605a      	str	r2, [r3, #4]
	return 0;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <_isatty>:

int _isatty(int file)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
	return 1;
 80038c6:	2301      	movs	r3, #1
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
	return 0;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038f8:	4a14      	ldr	r2, [pc, #80]	; (800394c <_sbrk+0x5c>)
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <_sbrk+0x60>)
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003904:	4b13      	ldr	r3, [pc, #76]	; (8003954 <_sbrk+0x64>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <_sbrk+0x64>)
 800390e:	4a12      	ldr	r2, [pc, #72]	; (8003958 <_sbrk+0x68>)
 8003910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <_sbrk+0x64>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	429a      	cmp	r2, r3
 800391e:	d207      	bcs.n	8003930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003920:	f009 f8c0 	bl	800caa4 <__errno>
 8003924:	4603      	mov	r3, r0
 8003926:	220c      	movs	r2, #12
 8003928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295
 800392e:	e009      	b.n	8003944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <_sbrk+0x64>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <_sbrk+0x64>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <_sbrk+0x64>)
 8003940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003942:	68fb      	ldr	r3, [r7, #12]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	24001140 	.word	0x24001140
 8003950:	00000400 	.word	0x00000400
 8003954:	24000b1c 	.word	0x24000b1c
 8003958:	24000b40 	.word	0x24000b40

0800395c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003960:	4b39      	ldr	r3, [pc, #228]	; (8003a48 <SystemInit+0xec>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	4a38      	ldr	r2, [pc, #224]	; (8003a48 <SystemInit+0xec>)
 8003968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800396c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003970:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <SystemInit+0xf0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	2b06      	cmp	r3, #6
 800397a:	d807      	bhi.n	800398c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800397c:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <SystemInit+0xf0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 030f 	bic.w	r3, r3, #15
 8003984:	4a31      	ldr	r2, [pc, #196]	; (8003a4c <SystemInit+0xf0>)
 8003986:	f043 0307 	orr.w	r3, r3, #7
 800398a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800398c:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <SystemInit+0xf4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2f      	ldr	r2, [pc, #188]	; (8003a50 <SystemInit+0xf4>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003998:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <SystemInit+0xf4>)
 800399a:	2200      	movs	r2, #0
 800399c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800399e:	4b2c      	ldr	r3, [pc, #176]	; (8003a50 <SystemInit+0xf4>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	492b      	ldr	r1, [pc, #172]	; (8003a50 <SystemInit+0xf4>)
 80039a4:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <SystemInit+0xf8>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80039aa:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <SystemInit+0xf0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80039b6:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <SystemInit+0xf0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 030f 	bic.w	r3, r3, #15
 80039be:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <SystemInit+0xf0>)
 80039c0:	f043 0307 	orr.w	r3, r3, #7
 80039c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80039c6:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <SystemInit+0xf4>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80039cc:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <SystemInit+0xf4>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80039d2:	4b1f      	ldr	r3, [pc, #124]	; (8003a50 <SystemInit+0xf4>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80039d8:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <SystemInit+0xf4>)
 80039da:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <SystemInit+0xfc>)
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80039de:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <SystemInit+0xf4>)
 80039e0:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <SystemInit+0x100>)
 80039e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80039e4:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <SystemInit+0xf4>)
 80039e6:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <SystemInit+0x104>)
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80039ea:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <SystemInit+0xf4>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80039f0:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <SystemInit+0xf4>)
 80039f2:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <SystemInit+0x104>)
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039f6:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <SystemInit+0xf4>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80039fc:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <SystemInit+0xf4>)
 80039fe:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <SystemInit+0x104>)
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <SystemInit+0xf4>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <SystemInit+0xf4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a10      	ldr	r2, [pc, #64]	; (8003a50 <SystemInit+0xf4>)
 8003a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003a14:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <SystemInit+0xf4>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003a1a:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <SystemInit+0x108>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <SystemInit+0x10c>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a26:	d202      	bcs.n	8003a2e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003a28:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <SystemInit+0x110>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <SystemInit+0x114>)
 8003a30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003a34:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a36:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <SystemInit+0xec>)
 8003a38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a3c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003a3e:	bf00      	nop
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000ed00 	.word	0xe000ed00
 8003a4c:	52002000 	.word	0x52002000
 8003a50:	58024400 	.word	0x58024400
 8003a54:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a58:	02020200 	.word	0x02020200
 8003a5c:	01ff0000 	.word	0x01ff0000
 8003a60:	01010280 	.word	0x01010280
 8003a64:	5c001000 	.word	0x5c001000
 8003a68:	ffff0000 	.word	0xffff0000
 8003a6c:	51008108 	.word	0x51008108
 8003a70:	52004000 	.word	0x52004000

08003a74 <Reset_Handler>:
 8003a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aac <LoopFillZerobss+0xe>
 8003a78:	f7ff ff70 	bl	800395c <SystemInit>
 8003a7c:	480c      	ldr	r0, [pc, #48]	; (8003ab0 <LoopFillZerobss+0x12>)
 8003a7e:	490d      	ldr	r1, [pc, #52]	; (8003ab4 <LoopFillZerobss+0x16>)
 8003a80:	4a0d      	ldr	r2, [pc, #52]	; (8003ab8 <LoopFillZerobss+0x1a>)
 8003a82:	2300      	movs	r3, #0
 8003a84:	e002      	b.n	8003a8c <LoopCopyDataInit>

08003a86 <CopyDataInit>:
 8003a86:	58d4      	ldr	r4, [r2, r3]
 8003a88:	50c4      	str	r4, [r0, r3]
 8003a8a:	3304      	adds	r3, #4

08003a8c <LoopCopyDataInit>:
 8003a8c:	18c4      	adds	r4, r0, r3
 8003a8e:	428c      	cmp	r4, r1
 8003a90:	d3f9      	bcc.n	8003a86 <CopyDataInit>
 8003a92:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <LoopFillZerobss+0x1e>)
 8003a94:	4c0a      	ldr	r4, [pc, #40]	; (8003ac0 <LoopFillZerobss+0x22>)
 8003a96:	2300      	movs	r3, #0
 8003a98:	e001      	b.n	8003a9e <LoopFillZerobss>

08003a9a <FillZerobss>:
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	3204      	adds	r2, #4

08003a9e <LoopFillZerobss>:
 8003a9e:	42a2      	cmp	r2, r4
 8003aa0:	d3fb      	bcc.n	8003a9a <FillZerobss>
 8003aa2:	f009 f805 	bl	800cab0 <__libc_init_array>
 8003aa6:	f7fd fee1 	bl	800186c <main>
 8003aaa:	4770      	bx	lr
 8003aac:	24001140 	.word	0x24001140
 8003ab0:	24000000 	.word	0x24000000
 8003ab4:	24000208 	.word	0x24000208
 8003ab8:	0800f954 	.word	0x0800f954
 8003abc:	24000208 	.word	0x24000208
 8003ac0:	24000b3c 	.word	0x24000b3c

08003ac4 <ADC3_IRQHandler>:
 8003ac4:	e7fe      	b.n	8003ac4 <ADC3_IRQHandler>
	...

08003ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ace:	2003      	movs	r0, #3
 8003ad0:	f000 f968 	bl	8003da4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ad4:	f003 fcc0 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	4b15      	ldr	r3, [pc, #84]	; (8003b30 <HAL_Init+0x68>)
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	0a1b      	lsrs	r3, r3, #8
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	4913      	ldr	r1, [pc, #76]	; (8003b34 <HAL_Init+0x6c>)
 8003ae6:	5ccb      	ldrb	r3, [r1, r3]
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
 8003af0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <HAL_Init+0x68>)
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	4a0e      	ldr	r2, [pc, #56]	; (8003b34 <HAL_Init+0x6c>)
 8003afc:	5cd3      	ldrb	r3, [r2, r3]
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
 8003b08:	4a0b      	ldr	r2, [pc, #44]	; (8003b38 <HAL_Init+0x70>)
 8003b0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b0c:	4a0b      	ldr	r2, [pc, #44]	; (8003b3c <HAL_Init+0x74>)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b12:	2000      	movs	r0, #0
 8003b14:	f000 f814 	bl	8003b40 <HAL_InitTick>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e002      	b.n	8003b28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003b22:	f7ff f895 	bl	8002c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	58024400 	.word	0x58024400
 8003b34:	0800f3a0 	.word	0x0800f3a0
 8003b38:	2400002c 	.word	0x2400002c
 8003b3c:	24000028 	.word	0x24000028

08003b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003b48:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <HAL_InitTick+0x60>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e021      	b.n	8003b98 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003b54:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <HAL_InitTick+0x64>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <HAL_InitTick+0x60>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f94d 	bl	8003e0a <HAL_SYSTICK_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e00e      	b.n	8003b98 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b0f      	cmp	r3, #15
 8003b7e:	d80a      	bhi.n	8003b96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b80:	2200      	movs	r2, #0
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295
 8003b88:	f000 f917 	bl	8003dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b8c:	4a06      	ldr	r2, [pc, #24]	; (8003ba8 <HAL_InitTick+0x68>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	24000034 	.word	0x24000034
 8003ba4:	24000028 	.word	0x24000028
 8003ba8:	24000030 	.word	0x24000030

08003bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_IncTick+0x20>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_IncTick+0x24>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <HAL_IncTick+0x24>)
 8003bbe:	6013      	str	r3, [r2, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	24000034 	.word	0x24000034
 8003bd0:	24000b28 	.word	0x24000b28

08003bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <HAL_GetTick+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	24000b28 	.word	0x24000b28

08003bec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <HAL_GetREVID+0x14>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	5c001000 	.word	0x5c001000

08003c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <__NVIC_SetPriorityGrouping+0x40>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c20:	4013      	ands	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c32:	4a04      	ldr	r2, [pc, #16]	; (8003c44 <__NVIC_SetPriorityGrouping+0x40>)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	60d3      	str	r3, [r2, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000ed00 	.word	0xe000ed00
 8003c48:	05fa0000 	.word	0x05fa0000

08003c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <__NVIC_GetPriorityGrouping+0x18>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 0307 	and.w	r3, r3, #7
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	db0b      	blt.n	8003c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	f003 021f 	and.w	r2, r3, #31
 8003c80:	4907      	ldr	r1, [pc, #28]	; (8003ca0 <__NVIC_EnableIRQ+0x38>)
 8003c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2001      	movs	r0, #1
 8003c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	e000e100 	.word	0xe000e100

08003ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	db0a      	blt.n	8003cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	490c      	ldr	r1, [pc, #48]	; (8003cf0 <__NVIC_SetPriority+0x4c>)
 8003cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cc2:	0112      	lsls	r2, r2, #4
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ccc:	e00a      	b.n	8003ce4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4908      	ldr	r1, [pc, #32]	; (8003cf4 <__NVIC_SetPriority+0x50>)
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	761a      	strb	r2, [r3, #24]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000e100 	.word	0xe000e100
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f1c3 0307 	rsb	r3, r3, #7
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf28      	it	cs
 8003d16:	2304      	movcs	r3, #4
 8003d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d902      	bls.n	8003d28 <NVIC_EncodePriority+0x30>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3b03      	subs	r3, #3
 8003d26:	e000      	b.n	8003d2a <NVIC_EncodePriority+0x32>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d40:	f04f 31ff 	mov.w	r1, #4294967295
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	43d9      	mvns	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	4313      	orrs	r3, r2
         );
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3724      	adds	r7, #36	; 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d70:	d301      	bcc.n	8003d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d72:	2301      	movs	r3, #1
 8003d74:	e00f      	b.n	8003d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d76:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <SysTick_Config+0x40>)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7e:	210f      	movs	r1, #15
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295
 8003d84:	f7ff ff8e 	bl	8003ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <SysTick_Config+0x40>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8e:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <SysTick_Config+0x40>)
 8003d90:	2207      	movs	r2, #7
 8003d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	e000e010 	.word	0xe000e010

08003da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff29 	bl	8003c04 <__NVIC_SetPriorityGrouping>
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc8:	f7ff ff40 	bl	8003c4c <__NVIC_GetPriorityGrouping>
 8003dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff ff90 	bl	8003cf8 <NVIC_EncodePriority>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff5f 	bl	8003ca4 <__NVIC_SetPriority>
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003df8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff33 	bl	8003c68 <__NVIC_EnableIRQ>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ffa4 	bl	8003d60 <SysTick_Config>
 8003e18:	4603      	mov	r3, r0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003e26:	f000 f802 	bl	8003e2e <HAL_SYSTICK_Callback>
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e054      	b.n	8003ef8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	7f5b      	ldrb	r3, [r3, #29]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d105      	bne.n	8003e64 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fe ff10 	bl	8002c84 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	791b      	ldrb	r3, [r3, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10c      	bne.n	8003e8c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a22      	ldr	r2, [pc, #136]	; (8003f00 <HAL_CRC_Init+0xc4>)
 8003e78:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0218 	bic.w	r2, r2, #24
 8003e88:	609a      	str	r2, [r3, #8]
 8003e8a:	e00c      	b.n	8003ea6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6899      	ldr	r1, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	461a      	mov	r2, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f834 	bl	8003f04 <HAL_CRCEx_Polynomial_Set>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e028      	b.n	8003ef8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	795b      	ldrb	r3, [r3, #5]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb6:	611a      	str	r2, [r3, #16]
 8003eb8:	e004      	b.n	8003ec4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6912      	ldr	r2, [r2, #16]
 8003ec2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699a      	ldr	r2, [r3, #24]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	04c11db7 	.word	0x04c11db7

08003f04 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003f14:	231f      	movs	r3, #31
 8003f16:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003f18:	bf00      	nop
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1e5a      	subs	r2, r3, #1
 8003f1e:	613a      	str	r2, [r7, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <HAL_CRCEx_Polynomial_Set+0x34>
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_CRCEx_Polynomial_Set+0x16>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b18      	cmp	r3, #24
 8003f3c:	d846      	bhi.n	8003fcc <HAL_CRCEx_Polynomial_Set+0xc8>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003fd3 	.word	0x08003fd3
 8003f48:	08003fcd 	.word	0x08003fcd
 8003f4c:	08003fcd 	.word	0x08003fcd
 8003f50:	08003fcd 	.word	0x08003fcd
 8003f54:	08003fcd 	.word	0x08003fcd
 8003f58:	08003fcd 	.word	0x08003fcd
 8003f5c:	08003fcd 	.word	0x08003fcd
 8003f60:	08003fcd 	.word	0x08003fcd
 8003f64:	08003fc1 	.word	0x08003fc1
 8003f68:	08003fcd 	.word	0x08003fcd
 8003f6c:	08003fcd 	.word	0x08003fcd
 8003f70:	08003fcd 	.word	0x08003fcd
 8003f74:	08003fcd 	.word	0x08003fcd
 8003f78:	08003fcd 	.word	0x08003fcd
 8003f7c:	08003fcd 	.word	0x08003fcd
 8003f80:	08003fcd 	.word	0x08003fcd
 8003f84:	08003fb5 	.word	0x08003fb5
 8003f88:	08003fcd 	.word	0x08003fcd
 8003f8c:	08003fcd 	.word	0x08003fcd
 8003f90:	08003fcd 	.word	0x08003fcd
 8003f94:	08003fcd 	.word	0x08003fcd
 8003f98:	08003fcd 	.word	0x08003fcd
 8003f9c:	08003fcd 	.word	0x08003fcd
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08003fa9 	.word	0x08003fa9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b06      	cmp	r3, #6
 8003fac:	d913      	bls.n	8003fd6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fb2:	e010      	b.n	8003fd6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b07      	cmp	r3, #7
 8003fb8:	d90f      	bls.n	8003fda <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fbe:	e00c      	b.n	8003fda <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b0f      	cmp	r3, #15
 8003fc4:	d90b      	bls.n	8003fde <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fca:	e008      	b.n	8003fde <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd0:	e006      	b.n	8003fe0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e004      	b.n	8003fe0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e002      	b.n	8003fe0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e000      	b.n	8003fe0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fde:	bf00      	nop
  }
  if (status == HAL_OK)
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10d      	bne.n	8004002 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 0118 	bic.w	r1, r3, #24
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004002:	7dfb      	ldrb	r3, [r7, #23]
}
 8004004:	4618      	mov	r0, r3
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004018:	f7ff fddc 	bl	8003bd4 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e316      	b.n	8004656 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a66      	ldr	r2, [pc, #408]	; (80041c8 <HAL_DMA_Init+0x1b8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d04a      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a65      	ldr	r2, [pc, #404]	; (80041cc <HAL_DMA_Init+0x1bc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d045      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a63      	ldr	r2, [pc, #396]	; (80041d0 <HAL_DMA_Init+0x1c0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d040      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a62      	ldr	r2, [pc, #392]	; (80041d4 <HAL_DMA_Init+0x1c4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d03b      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a60      	ldr	r2, [pc, #384]	; (80041d8 <HAL_DMA_Init+0x1c8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d036      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a5f      	ldr	r2, [pc, #380]	; (80041dc <HAL_DMA_Init+0x1cc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d031      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a5d      	ldr	r2, [pc, #372]	; (80041e0 <HAL_DMA_Init+0x1d0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d02c      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a5c      	ldr	r2, [pc, #368]	; (80041e4 <HAL_DMA_Init+0x1d4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d027      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a5a      	ldr	r2, [pc, #360]	; (80041e8 <HAL_DMA_Init+0x1d8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d022      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a59      	ldr	r2, [pc, #356]	; (80041ec <HAL_DMA_Init+0x1dc>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d01d      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a57      	ldr	r2, [pc, #348]	; (80041f0 <HAL_DMA_Init+0x1e0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d018      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a56      	ldr	r2, [pc, #344]	; (80041f4 <HAL_DMA_Init+0x1e4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d013      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a54      	ldr	r2, [pc, #336]	; (80041f8 <HAL_DMA_Init+0x1e8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00e      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a53      	ldr	r2, [pc, #332]	; (80041fc <HAL_DMA_Init+0x1ec>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d009      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a51      	ldr	r2, [pc, #324]	; (8004200 <HAL_DMA_Init+0x1f0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d004      	beq.n	80040c8 <HAL_DMA_Init+0xb8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a50      	ldr	r2, [pc, #320]	; (8004204 <HAL_DMA_Init+0x1f4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d101      	bne.n	80040cc <HAL_DMA_Init+0xbc>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <HAL_DMA_Init+0xbe>
 80040cc:	2300      	movs	r3, #0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 813b 	beq.w	800434a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a37      	ldr	r2, [pc, #220]	; (80041c8 <HAL_DMA_Init+0x1b8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d04a      	beq.n	8004184 <HAL_DMA_Init+0x174>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a36      	ldr	r2, [pc, #216]	; (80041cc <HAL_DMA_Init+0x1bc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d045      	beq.n	8004184 <HAL_DMA_Init+0x174>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a34      	ldr	r2, [pc, #208]	; (80041d0 <HAL_DMA_Init+0x1c0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d040      	beq.n	8004184 <HAL_DMA_Init+0x174>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a33      	ldr	r2, [pc, #204]	; (80041d4 <HAL_DMA_Init+0x1c4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d03b      	beq.n	8004184 <HAL_DMA_Init+0x174>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a31      	ldr	r2, [pc, #196]	; (80041d8 <HAL_DMA_Init+0x1c8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d036      	beq.n	8004184 <HAL_DMA_Init+0x174>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a30      	ldr	r2, [pc, #192]	; (80041dc <HAL_DMA_Init+0x1cc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d031      	beq.n	8004184 <HAL_DMA_Init+0x174>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2e      	ldr	r2, [pc, #184]	; (80041e0 <HAL_DMA_Init+0x1d0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d02c      	beq.n	8004184 <HAL_DMA_Init+0x174>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a2d      	ldr	r2, [pc, #180]	; (80041e4 <HAL_DMA_Init+0x1d4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d027      	beq.n	8004184 <HAL_DMA_Init+0x174>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a2b      	ldr	r2, [pc, #172]	; (80041e8 <HAL_DMA_Init+0x1d8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d022      	beq.n	8004184 <HAL_DMA_Init+0x174>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2a      	ldr	r2, [pc, #168]	; (80041ec <HAL_DMA_Init+0x1dc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d01d      	beq.n	8004184 <HAL_DMA_Init+0x174>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a28      	ldr	r2, [pc, #160]	; (80041f0 <HAL_DMA_Init+0x1e0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d018      	beq.n	8004184 <HAL_DMA_Init+0x174>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a27      	ldr	r2, [pc, #156]	; (80041f4 <HAL_DMA_Init+0x1e4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <HAL_DMA_Init+0x174>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a25      	ldr	r2, [pc, #148]	; (80041f8 <HAL_DMA_Init+0x1e8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00e      	beq.n	8004184 <HAL_DMA_Init+0x174>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a24      	ldr	r2, [pc, #144]	; (80041fc <HAL_DMA_Init+0x1ec>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d009      	beq.n	8004184 <HAL_DMA_Init+0x174>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a22      	ldr	r2, [pc, #136]	; (8004200 <HAL_DMA_Init+0x1f0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <HAL_DMA_Init+0x174>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a21      	ldr	r2, [pc, #132]	; (8004204 <HAL_DMA_Init+0x1f4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d108      	bne.n	8004196 <HAL_DMA_Init+0x186>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0201 	bic.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	e007      	b.n	80041a6 <HAL_DMA_Init+0x196>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041a6:	e02f      	b.n	8004208 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041a8:	f7ff fd14 	bl	8003bd4 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b05      	cmp	r3, #5
 80041b4:	d928      	bls.n	8004208 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2203      	movs	r2, #3
 80041c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e246      	b.n	8004656 <HAL_DMA_Init+0x646>
 80041c8:	40020010 	.word	0x40020010
 80041cc:	40020028 	.word	0x40020028
 80041d0:	40020040 	.word	0x40020040
 80041d4:	40020058 	.word	0x40020058
 80041d8:	40020070 	.word	0x40020070
 80041dc:	40020088 	.word	0x40020088
 80041e0:	400200a0 	.word	0x400200a0
 80041e4:	400200b8 	.word	0x400200b8
 80041e8:	40020410 	.word	0x40020410
 80041ec:	40020428 	.word	0x40020428
 80041f0:	40020440 	.word	0x40020440
 80041f4:	40020458 	.word	0x40020458
 80041f8:	40020470 	.word	0x40020470
 80041fc:	40020488 	.word	0x40020488
 8004200:	400204a0 	.word	0x400204a0
 8004204:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1c8      	bne.n	80041a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4b83      	ldr	r3, [pc, #524]	; (8004430 <HAL_DMA_Init+0x420>)
 8004222:	4013      	ands	r3, r2
 8004224:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800422e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800423a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004246:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	2b04      	cmp	r3, #4
 800425a:	d107      	bne.n	800426c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	4313      	orrs	r3, r2
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800426c:	4b71      	ldr	r3, [pc, #452]	; (8004434 <HAL_DMA_Init+0x424>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b71      	ldr	r3, [pc, #452]	; (8004438 <HAL_DMA_Init+0x428>)
 8004272:	4013      	ands	r3, r2
 8004274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004278:	d328      	bcc.n	80042cc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b28      	cmp	r3, #40	; 0x28
 8004280:	d903      	bls.n	800428a <HAL_DMA_Init+0x27a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b2e      	cmp	r3, #46	; 0x2e
 8004288:	d917      	bls.n	80042ba <HAL_DMA_Init+0x2aa>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b3e      	cmp	r3, #62	; 0x3e
 8004290:	d903      	bls.n	800429a <HAL_DMA_Init+0x28a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b42      	cmp	r3, #66	; 0x42
 8004298:	d90f      	bls.n	80042ba <HAL_DMA_Init+0x2aa>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b46      	cmp	r3, #70	; 0x46
 80042a0:	d903      	bls.n	80042aa <HAL_DMA_Init+0x29a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b48      	cmp	r3, #72	; 0x48
 80042a8:	d907      	bls.n	80042ba <HAL_DMA_Init+0x2aa>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b4e      	cmp	r3, #78	; 0x4e
 80042b0:	d905      	bls.n	80042be <HAL_DMA_Init+0x2ae>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b52      	cmp	r3, #82	; 0x52
 80042b8:	d801      	bhi.n	80042be <HAL_DMA_Init+0x2ae>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <HAL_DMA_Init+0x2b0>
 80042be:	2300      	movs	r3, #0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f023 0307 	bic.w	r3, r3, #7
 80042e2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d117      	bne.n	8004326 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00e      	beq.n	8004326 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f001 ff1b 	bl	8006144 <DMA_CheckFifoParam>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2240      	movs	r2, #64	; 0x40
 8004318:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e197      	b.n	8004656 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f001 fe56 	bl	8005fe0 <DMA_CalcBaseAndBitshift>
 8004334:	4603      	mov	r3, r0
 8004336:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	223f      	movs	r2, #63	; 0x3f
 8004342:	409a      	lsls	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	e0cd      	b.n	80044e6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3b      	ldr	r2, [pc, #236]	; (800443c <HAL_DMA_Init+0x42c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d022      	beq.n	800439a <HAL_DMA_Init+0x38a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a39      	ldr	r2, [pc, #228]	; (8004440 <HAL_DMA_Init+0x430>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01d      	beq.n	800439a <HAL_DMA_Init+0x38a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a38      	ldr	r2, [pc, #224]	; (8004444 <HAL_DMA_Init+0x434>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d018      	beq.n	800439a <HAL_DMA_Init+0x38a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a36      	ldr	r2, [pc, #216]	; (8004448 <HAL_DMA_Init+0x438>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <HAL_DMA_Init+0x38a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a35      	ldr	r2, [pc, #212]	; (800444c <HAL_DMA_Init+0x43c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00e      	beq.n	800439a <HAL_DMA_Init+0x38a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a33      	ldr	r2, [pc, #204]	; (8004450 <HAL_DMA_Init+0x440>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_DMA_Init+0x38a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a32      	ldr	r2, [pc, #200]	; (8004454 <HAL_DMA_Init+0x444>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d004      	beq.n	800439a <HAL_DMA_Init+0x38a>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a30      	ldr	r2, [pc, #192]	; (8004458 <HAL_DMA_Init+0x448>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d101      	bne.n	800439e <HAL_DMA_Init+0x38e>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_DMA_Init+0x390>
 800439e:	2300      	movs	r3, #0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8097 	beq.w	80044d4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a24      	ldr	r2, [pc, #144]	; (800443c <HAL_DMA_Init+0x42c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d021      	beq.n	80043f4 <HAL_DMA_Init+0x3e4>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a22      	ldr	r2, [pc, #136]	; (8004440 <HAL_DMA_Init+0x430>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01c      	beq.n	80043f4 <HAL_DMA_Init+0x3e4>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a21      	ldr	r2, [pc, #132]	; (8004444 <HAL_DMA_Init+0x434>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d017      	beq.n	80043f4 <HAL_DMA_Init+0x3e4>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1f      	ldr	r2, [pc, #124]	; (8004448 <HAL_DMA_Init+0x438>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d012      	beq.n	80043f4 <HAL_DMA_Init+0x3e4>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1e      	ldr	r2, [pc, #120]	; (800444c <HAL_DMA_Init+0x43c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00d      	beq.n	80043f4 <HAL_DMA_Init+0x3e4>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1c      	ldr	r2, [pc, #112]	; (8004450 <HAL_DMA_Init+0x440>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d008      	beq.n	80043f4 <HAL_DMA_Init+0x3e4>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <HAL_DMA_Init+0x444>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <HAL_DMA_Init+0x3e4>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a19      	ldr	r2, [pc, #100]	; (8004458 <HAL_DMA_Init+0x448>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4b12      	ldr	r3, [pc, #72]	; (800445c <HAL_DMA_Init+0x44c>)
 8004412:	4013      	ands	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d020      	beq.n	8004460 <HAL_DMA_Init+0x450>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b80      	cmp	r3, #128	; 0x80
 8004424:	d102      	bne.n	800442c <HAL_DMA_Init+0x41c>
 8004426:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800442a:	e01a      	b.n	8004462 <HAL_DMA_Init+0x452>
 800442c:	2300      	movs	r3, #0
 800442e:	e018      	b.n	8004462 <HAL_DMA_Init+0x452>
 8004430:	fe10803f 	.word	0xfe10803f
 8004434:	5c001000 	.word	0x5c001000
 8004438:	ffff0000 	.word	0xffff0000
 800443c:	58025408 	.word	0x58025408
 8004440:	5802541c 	.word	0x5802541c
 8004444:	58025430 	.word	0x58025430
 8004448:	58025444 	.word	0x58025444
 800444c:	58025458 	.word	0x58025458
 8004450:	5802546c 	.word	0x5802546c
 8004454:	58025480 	.word	0x58025480
 8004458:	58025494 	.word	0x58025494
 800445c:	fffe000f 	.word	0xfffe000f
 8004460:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68d2      	ldr	r2, [r2, #12]
 8004466:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004468:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004470:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004478:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004480:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004488:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004490:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	4b6e      	ldr	r3, [pc, #440]	; (8004660 <HAL_DMA_Init+0x650>)
 80044a8:	4413      	add	r3, r2
 80044aa:	4a6e      	ldr	r2, [pc, #440]	; (8004664 <HAL_DMA_Init+0x654>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	009a      	lsls	r2, r3, #2
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f001 fd91 	bl	8005fe0 <DMA_CalcBaseAndBitshift>
 80044be:	4603      	mov	r3, r0
 80044c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	2201      	movs	r2, #1
 80044cc:	409a      	lsls	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	e008      	b.n	80044e6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2240      	movs	r2, #64	; 0x40
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2203      	movs	r2, #3
 80044de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0b7      	b.n	8004656 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a5f      	ldr	r2, [pc, #380]	; (8004668 <HAL_DMA_Init+0x658>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d072      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a5d      	ldr	r2, [pc, #372]	; (800466c <HAL_DMA_Init+0x65c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d06d      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a5c      	ldr	r2, [pc, #368]	; (8004670 <HAL_DMA_Init+0x660>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d068      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a5a      	ldr	r2, [pc, #360]	; (8004674 <HAL_DMA_Init+0x664>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d063      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a59      	ldr	r2, [pc, #356]	; (8004678 <HAL_DMA_Init+0x668>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d05e      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a57      	ldr	r2, [pc, #348]	; (800467c <HAL_DMA_Init+0x66c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d059      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a56      	ldr	r2, [pc, #344]	; (8004680 <HAL_DMA_Init+0x670>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d054      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a54      	ldr	r2, [pc, #336]	; (8004684 <HAL_DMA_Init+0x674>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d04f      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a53      	ldr	r2, [pc, #332]	; (8004688 <HAL_DMA_Init+0x678>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d04a      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a51      	ldr	r2, [pc, #324]	; (800468c <HAL_DMA_Init+0x67c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d045      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a50      	ldr	r2, [pc, #320]	; (8004690 <HAL_DMA_Init+0x680>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d040      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a4e      	ldr	r2, [pc, #312]	; (8004694 <HAL_DMA_Init+0x684>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d03b      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a4d      	ldr	r2, [pc, #308]	; (8004698 <HAL_DMA_Init+0x688>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d036      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a4b      	ldr	r2, [pc, #300]	; (800469c <HAL_DMA_Init+0x68c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d031      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a4a      	ldr	r2, [pc, #296]	; (80046a0 <HAL_DMA_Init+0x690>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d02c      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a48      	ldr	r2, [pc, #288]	; (80046a4 <HAL_DMA_Init+0x694>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d027      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a47      	ldr	r2, [pc, #284]	; (80046a8 <HAL_DMA_Init+0x698>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d022      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a45      	ldr	r2, [pc, #276]	; (80046ac <HAL_DMA_Init+0x69c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01d      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a44      	ldr	r2, [pc, #272]	; (80046b0 <HAL_DMA_Init+0x6a0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d018      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a42      	ldr	r2, [pc, #264]	; (80046b4 <HAL_DMA_Init+0x6a4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a41      	ldr	r2, [pc, #260]	; (80046b8 <HAL_DMA_Init+0x6a8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a3f      	ldr	r2, [pc, #252]	; (80046bc <HAL_DMA_Init+0x6ac>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a3e      	ldr	r2, [pc, #248]	; (80046c0 <HAL_DMA_Init+0x6b0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_DMA_Init+0x5c6>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a3c      	ldr	r2, [pc, #240]	; (80046c4 <HAL_DMA_Init+0x6b4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d101      	bne.n	80045da <HAL_DMA_Init+0x5ca>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <HAL_DMA_Init+0x5cc>
 80045da:	2300      	movs	r3, #0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d032      	beq.n	8004646 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f001 fe2b 	bl	800623c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b80      	cmp	r3, #128	; 0x80
 80045ec:	d102      	bne.n	80045f4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004608:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d010      	beq.n	8004634 <HAL_DMA_Init+0x624>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b08      	cmp	r3, #8
 8004618:	d80c      	bhi.n	8004634 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f001 fea8 	bl	8006370 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	e008      	b.n	8004646 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	a7fdabf8 	.word	0xa7fdabf8
 8004664:	cccccccd 	.word	0xcccccccd
 8004668:	40020010 	.word	0x40020010
 800466c:	40020028 	.word	0x40020028
 8004670:	40020040 	.word	0x40020040
 8004674:	40020058 	.word	0x40020058
 8004678:	40020070 	.word	0x40020070
 800467c:	40020088 	.word	0x40020088
 8004680:	400200a0 	.word	0x400200a0
 8004684:	400200b8 	.word	0x400200b8
 8004688:	40020410 	.word	0x40020410
 800468c:	40020428 	.word	0x40020428
 8004690:	40020440 	.word	0x40020440
 8004694:	40020458 	.word	0x40020458
 8004698:	40020470 	.word	0x40020470
 800469c:	40020488 	.word	0x40020488
 80046a0:	400204a0 	.word	0x400204a0
 80046a4:	400204b8 	.word	0x400204b8
 80046a8:	58025408 	.word	0x58025408
 80046ac:	5802541c 	.word	0x5802541c
 80046b0:	58025430 	.word	0x58025430
 80046b4:	58025444 	.word	0x58025444
 80046b8:	58025458 	.word	0x58025458
 80046bc:	5802546c 	.word	0x5802546c
 80046c0:	58025480 	.word	0x58025480
 80046c4:	58025494 	.word	0x58025494

080046c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80046d0:	f7ff fa80 	bl	8003bd4 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e2dc      	b.n	8004c9a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d008      	beq.n	80046fe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2280      	movs	r2, #128	; 0x80
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e2cd      	b.n	8004c9a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a76      	ldr	r2, [pc, #472]	; (80048dc <HAL_DMA_Abort+0x214>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d04a      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a74      	ldr	r2, [pc, #464]	; (80048e0 <HAL_DMA_Abort+0x218>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d045      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a73      	ldr	r2, [pc, #460]	; (80048e4 <HAL_DMA_Abort+0x21c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d040      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a71      	ldr	r2, [pc, #452]	; (80048e8 <HAL_DMA_Abort+0x220>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d03b      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a70      	ldr	r2, [pc, #448]	; (80048ec <HAL_DMA_Abort+0x224>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d036      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a6e      	ldr	r2, [pc, #440]	; (80048f0 <HAL_DMA_Abort+0x228>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d031      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a6d      	ldr	r2, [pc, #436]	; (80048f4 <HAL_DMA_Abort+0x22c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d02c      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a6b      	ldr	r2, [pc, #428]	; (80048f8 <HAL_DMA_Abort+0x230>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d027      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a6a      	ldr	r2, [pc, #424]	; (80048fc <HAL_DMA_Abort+0x234>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d022      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a68      	ldr	r2, [pc, #416]	; (8004900 <HAL_DMA_Abort+0x238>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d01d      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a67      	ldr	r2, [pc, #412]	; (8004904 <HAL_DMA_Abort+0x23c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d018      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a65      	ldr	r2, [pc, #404]	; (8004908 <HAL_DMA_Abort+0x240>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d013      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a64      	ldr	r2, [pc, #400]	; (800490c <HAL_DMA_Abort+0x244>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00e      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a62      	ldr	r2, [pc, #392]	; (8004910 <HAL_DMA_Abort+0x248>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d009      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a61      	ldr	r2, [pc, #388]	; (8004914 <HAL_DMA_Abort+0x24c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d004      	beq.n	800479e <HAL_DMA_Abort+0xd6>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a5f      	ldr	r2, [pc, #380]	; (8004918 <HAL_DMA_Abort+0x250>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <HAL_DMA_Abort+0xda>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <HAL_DMA_Abort+0xdc>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d013      	beq.n	80047d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 021e 	bic.w	r2, r2, #30
 80047b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	e00a      	b.n	80047e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 020e 	bic.w	r2, r2, #14
 80047de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3c      	ldr	r2, [pc, #240]	; (80048dc <HAL_DMA_Abort+0x214>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d072      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a3a      	ldr	r2, [pc, #232]	; (80048e0 <HAL_DMA_Abort+0x218>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d06d      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a39      	ldr	r2, [pc, #228]	; (80048e4 <HAL_DMA_Abort+0x21c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d068      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a37      	ldr	r2, [pc, #220]	; (80048e8 <HAL_DMA_Abort+0x220>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d063      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a36      	ldr	r2, [pc, #216]	; (80048ec <HAL_DMA_Abort+0x224>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d05e      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a34      	ldr	r2, [pc, #208]	; (80048f0 <HAL_DMA_Abort+0x228>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d059      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a33      	ldr	r2, [pc, #204]	; (80048f4 <HAL_DMA_Abort+0x22c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d054      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a31      	ldr	r2, [pc, #196]	; (80048f8 <HAL_DMA_Abort+0x230>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d04f      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a30      	ldr	r2, [pc, #192]	; (80048fc <HAL_DMA_Abort+0x234>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d04a      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2e      	ldr	r2, [pc, #184]	; (8004900 <HAL_DMA_Abort+0x238>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d045      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2d      	ldr	r2, [pc, #180]	; (8004904 <HAL_DMA_Abort+0x23c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d040      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2b      	ldr	r2, [pc, #172]	; (8004908 <HAL_DMA_Abort+0x240>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d03b      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a2a      	ldr	r2, [pc, #168]	; (800490c <HAL_DMA_Abort+0x244>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d036      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a28      	ldr	r2, [pc, #160]	; (8004910 <HAL_DMA_Abort+0x248>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d031      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a27      	ldr	r2, [pc, #156]	; (8004914 <HAL_DMA_Abort+0x24c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d02c      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a25      	ldr	r2, [pc, #148]	; (8004918 <HAL_DMA_Abort+0x250>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d027      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a24      	ldr	r2, [pc, #144]	; (800491c <HAL_DMA_Abort+0x254>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d022      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a22      	ldr	r2, [pc, #136]	; (8004920 <HAL_DMA_Abort+0x258>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01d      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a21      	ldr	r2, [pc, #132]	; (8004924 <HAL_DMA_Abort+0x25c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d018      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1f      	ldr	r2, [pc, #124]	; (8004928 <HAL_DMA_Abort+0x260>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1e      	ldr	r2, [pc, #120]	; (800492c <HAL_DMA_Abort+0x264>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00e      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <HAL_DMA_Abort+0x268>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d009      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1b      	ldr	r2, [pc, #108]	; (8004934 <HAL_DMA_Abort+0x26c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d004      	beq.n	80048d6 <HAL_DMA_Abort+0x20e>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a19      	ldr	r2, [pc, #100]	; (8004938 <HAL_DMA_Abort+0x270>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d132      	bne.n	800493c <HAL_DMA_Abort+0x274>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e031      	b.n	800493e <HAL_DMA_Abort+0x276>
 80048da:	bf00      	nop
 80048dc:	40020010 	.word	0x40020010
 80048e0:	40020028 	.word	0x40020028
 80048e4:	40020040 	.word	0x40020040
 80048e8:	40020058 	.word	0x40020058
 80048ec:	40020070 	.word	0x40020070
 80048f0:	40020088 	.word	0x40020088
 80048f4:	400200a0 	.word	0x400200a0
 80048f8:	400200b8 	.word	0x400200b8
 80048fc:	40020410 	.word	0x40020410
 8004900:	40020428 	.word	0x40020428
 8004904:	40020440 	.word	0x40020440
 8004908:	40020458 	.word	0x40020458
 800490c:	40020470 	.word	0x40020470
 8004910:	40020488 	.word	0x40020488
 8004914:	400204a0 	.word	0x400204a0
 8004918:	400204b8 	.word	0x400204b8
 800491c:	58025408 	.word	0x58025408
 8004920:	5802541c 	.word	0x5802541c
 8004924:	58025430 	.word	0x58025430
 8004928:	58025444 	.word	0x58025444
 800492c:	58025458 	.word	0x58025458
 8004930:	5802546c 	.word	0x5802546c
 8004934:	58025480 	.word	0x58025480
 8004938:	58025494 	.word	0x58025494
 800493c:	2300      	movs	r3, #0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004950:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a6d      	ldr	r2, [pc, #436]	; (8004b0c <HAL_DMA_Abort+0x444>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d04a      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a6b      	ldr	r2, [pc, #428]	; (8004b10 <HAL_DMA_Abort+0x448>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d045      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a6a      	ldr	r2, [pc, #424]	; (8004b14 <HAL_DMA_Abort+0x44c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d040      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a68      	ldr	r2, [pc, #416]	; (8004b18 <HAL_DMA_Abort+0x450>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d03b      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a67      	ldr	r2, [pc, #412]	; (8004b1c <HAL_DMA_Abort+0x454>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d036      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a65      	ldr	r2, [pc, #404]	; (8004b20 <HAL_DMA_Abort+0x458>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d031      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a64      	ldr	r2, [pc, #400]	; (8004b24 <HAL_DMA_Abort+0x45c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d02c      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a62      	ldr	r2, [pc, #392]	; (8004b28 <HAL_DMA_Abort+0x460>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d027      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a61      	ldr	r2, [pc, #388]	; (8004b2c <HAL_DMA_Abort+0x464>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d022      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a5f      	ldr	r2, [pc, #380]	; (8004b30 <HAL_DMA_Abort+0x468>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d01d      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a5e      	ldr	r2, [pc, #376]	; (8004b34 <HAL_DMA_Abort+0x46c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d018      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a5c      	ldr	r2, [pc, #368]	; (8004b38 <HAL_DMA_Abort+0x470>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a5b      	ldr	r2, [pc, #364]	; (8004b3c <HAL_DMA_Abort+0x474>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00e      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a59      	ldr	r2, [pc, #356]	; (8004b40 <HAL_DMA_Abort+0x478>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d009      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a58      	ldr	r2, [pc, #352]	; (8004b44 <HAL_DMA_Abort+0x47c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d004      	beq.n	80049f2 <HAL_DMA_Abort+0x32a>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a56      	ldr	r2, [pc, #344]	; (8004b48 <HAL_DMA_Abort+0x480>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d108      	bne.n	8004a04 <HAL_DMA_Abort+0x33c>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0201 	bic.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e007      	b.n	8004a14 <HAL_DMA_Abort+0x34c>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0201 	bic.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004a14:	e013      	b.n	8004a3e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a16:	f7ff f8dd 	bl	8003bd4 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b05      	cmp	r3, #5
 8004a22:	d90c      	bls.n	8004a3e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e12d      	b.n	8004c9a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e5      	bne.n	8004a16 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2f      	ldr	r2, [pc, #188]	; (8004b0c <HAL_DMA_Abort+0x444>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d04a      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a2d      	ldr	r2, [pc, #180]	; (8004b10 <HAL_DMA_Abort+0x448>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d045      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a2c      	ldr	r2, [pc, #176]	; (8004b14 <HAL_DMA_Abort+0x44c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d040      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <HAL_DMA_Abort+0x450>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d03b      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a29      	ldr	r2, [pc, #164]	; (8004b1c <HAL_DMA_Abort+0x454>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d036      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a27      	ldr	r2, [pc, #156]	; (8004b20 <HAL_DMA_Abort+0x458>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d031      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a26      	ldr	r2, [pc, #152]	; (8004b24 <HAL_DMA_Abort+0x45c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d02c      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a24      	ldr	r2, [pc, #144]	; (8004b28 <HAL_DMA_Abort+0x460>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d027      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a23      	ldr	r2, [pc, #140]	; (8004b2c <HAL_DMA_Abort+0x464>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d022      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a21      	ldr	r2, [pc, #132]	; (8004b30 <HAL_DMA_Abort+0x468>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d01d      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a20      	ldr	r2, [pc, #128]	; (8004b34 <HAL_DMA_Abort+0x46c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d018      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1e      	ldr	r2, [pc, #120]	; (8004b38 <HAL_DMA_Abort+0x470>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <HAL_DMA_Abort+0x474>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00e      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <HAL_DMA_Abort+0x478>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d009      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1a      	ldr	r2, [pc, #104]	; (8004b44 <HAL_DMA_Abort+0x47c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_DMA_Abort+0x422>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <HAL_DMA_Abort+0x480>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d101      	bne.n	8004aee <HAL_DMA_Abort+0x426>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <HAL_DMA_Abort+0x428>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d02b      	beq.n	8004b4c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	223f      	movs	r2, #63	; 0x3f
 8004b04:	409a      	lsls	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	609a      	str	r2, [r3, #8]
 8004b0a:	e02a      	b.n	8004b62 <HAL_DMA_Abort+0x49a>
 8004b0c:	40020010 	.word	0x40020010
 8004b10:	40020028 	.word	0x40020028
 8004b14:	40020040 	.word	0x40020040
 8004b18:	40020058 	.word	0x40020058
 8004b1c:	40020070 	.word	0x40020070
 8004b20:	40020088 	.word	0x40020088
 8004b24:	400200a0 	.word	0x400200a0
 8004b28:	400200b8 	.word	0x400200b8
 8004b2c:	40020410 	.word	0x40020410
 8004b30:	40020428 	.word	0x40020428
 8004b34:	40020440 	.word	0x40020440
 8004b38:	40020458 	.word	0x40020458
 8004b3c:	40020470 	.word	0x40020470
 8004b40:	40020488 	.word	0x40020488
 8004b44:	400204a0 	.word	0x400204a0
 8004b48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a4f      	ldr	r2, [pc, #316]	; (8004ca4 <HAL_DMA_Abort+0x5dc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d072      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a4d      	ldr	r2, [pc, #308]	; (8004ca8 <HAL_DMA_Abort+0x5e0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d06d      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a4c      	ldr	r2, [pc, #304]	; (8004cac <HAL_DMA_Abort+0x5e4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d068      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a4a      	ldr	r2, [pc, #296]	; (8004cb0 <HAL_DMA_Abort+0x5e8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d063      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a49      	ldr	r2, [pc, #292]	; (8004cb4 <HAL_DMA_Abort+0x5ec>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d05e      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a47      	ldr	r2, [pc, #284]	; (8004cb8 <HAL_DMA_Abort+0x5f0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d059      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a46      	ldr	r2, [pc, #280]	; (8004cbc <HAL_DMA_Abort+0x5f4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d054      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a44      	ldr	r2, [pc, #272]	; (8004cc0 <HAL_DMA_Abort+0x5f8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d04f      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a43      	ldr	r2, [pc, #268]	; (8004cc4 <HAL_DMA_Abort+0x5fc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d04a      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a41      	ldr	r2, [pc, #260]	; (8004cc8 <HAL_DMA_Abort+0x600>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d045      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a40      	ldr	r2, [pc, #256]	; (8004ccc <HAL_DMA_Abort+0x604>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d040      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a3e      	ldr	r2, [pc, #248]	; (8004cd0 <HAL_DMA_Abort+0x608>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d03b      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a3d      	ldr	r2, [pc, #244]	; (8004cd4 <HAL_DMA_Abort+0x60c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d036      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a3b      	ldr	r2, [pc, #236]	; (8004cd8 <HAL_DMA_Abort+0x610>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d031      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a3a      	ldr	r2, [pc, #232]	; (8004cdc <HAL_DMA_Abort+0x614>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d02c      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a38      	ldr	r2, [pc, #224]	; (8004ce0 <HAL_DMA_Abort+0x618>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d027      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a37      	ldr	r2, [pc, #220]	; (8004ce4 <HAL_DMA_Abort+0x61c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a35      	ldr	r2, [pc, #212]	; (8004ce8 <HAL_DMA_Abort+0x620>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01d      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a34      	ldr	r2, [pc, #208]	; (8004cec <HAL_DMA_Abort+0x624>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a32      	ldr	r2, [pc, #200]	; (8004cf0 <HAL_DMA_Abort+0x628>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a31      	ldr	r2, [pc, #196]	; (8004cf4 <HAL_DMA_Abort+0x62c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2f      	ldr	r2, [pc, #188]	; (8004cf8 <HAL_DMA_Abort+0x630>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a2e      	ldr	r2, [pc, #184]	; (8004cfc <HAL_DMA_Abort+0x634>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_DMA_Abort+0x58a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2c      	ldr	r2, [pc, #176]	; (8004d00 <HAL_DMA_Abort+0x638>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d101      	bne.n	8004c56 <HAL_DMA_Abort+0x58e>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <HAL_DMA_Abort+0x590>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d015      	beq.n	8004c88 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c64:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00c      	beq.n	8004c88 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c7c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c86:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40020010 	.word	0x40020010
 8004ca8:	40020028 	.word	0x40020028
 8004cac:	40020040 	.word	0x40020040
 8004cb0:	40020058 	.word	0x40020058
 8004cb4:	40020070 	.word	0x40020070
 8004cb8:	40020088 	.word	0x40020088
 8004cbc:	400200a0 	.word	0x400200a0
 8004cc0:	400200b8 	.word	0x400200b8
 8004cc4:	40020410 	.word	0x40020410
 8004cc8:	40020428 	.word	0x40020428
 8004ccc:	40020440 	.word	0x40020440
 8004cd0:	40020458 	.word	0x40020458
 8004cd4:	40020470 	.word	0x40020470
 8004cd8:	40020488 	.word	0x40020488
 8004cdc:	400204a0 	.word	0x400204a0
 8004ce0:	400204b8 	.word	0x400204b8
 8004ce4:	58025408 	.word	0x58025408
 8004ce8:	5802541c 	.word	0x5802541c
 8004cec:	58025430 	.word	0x58025430
 8004cf0:	58025444 	.word	0x58025444
 8004cf4:	58025458 	.word	0x58025458
 8004cf8:	5802546c 	.word	0x5802546c
 8004cfc:	58025480 	.word	0x58025480
 8004d00:	58025494 	.word	0x58025494

08004d04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e205      	b.n	8005122 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d004      	beq.n	8004d2c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2280      	movs	r2, #128	; 0x80
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e1fa      	b.n	8005122 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a8c      	ldr	r2, [pc, #560]	; (8004f64 <HAL_DMA_Abort_IT+0x260>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d04a      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a8b      	ldr	r2, [pc, #556]	; (8004f68 <HAL_DMA_Abort_IT+0x264>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d045      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a89      	ldr	r2, [pc, #548]	; (8004f6c <HAL_DMA_Abort_IT+0x268>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d040      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a88      	ldr	r2, [pc, #544]	; (8004f70 <HAL_DMA_Abort_IT+0x26c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d03b      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a86      	ldr	r2, [pc, #536]	; (8004f74 <HAL_DMA_Abort_IT+0x270>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d036      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a85      	ldr	r2, [pc, #532]	; (8004f78 <HAL_DMA_Abort_IT+0x274>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d031      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a83      	ldr	r2, [pc, #524]	; (8004f7c <HAL_DMA_Abort_IT+0x278>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d02c      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a82      	ldr	r2, [pc, #520]	; (8004f80 <HAL_DMA_Abort_IT+0x27c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d027      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a80      	ldr	r2, [pc, #512]	; (8004f84 <HAL_DMA_Abort_IT+0x280>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d022      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a7f      	ldr	r2, [pc, #508]	; (8004f88 <HAL_DMA_Abort_IT+0x284>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d01d      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a7d      	ldr	r2, [pc, #500]	; (8004f8c <HAL_DMA_Abort_IT+0x288>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d018      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a7c      	ldr	r2, [pc, #496]	; (8004f90 <HAL_DMA_Abort_IT+0x28c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d013      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a7a      	ldr	r2, [pc, #488]	; (8004f94 <HAL_DMA_Abort_IT+0x290>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00e      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a79      	ldr	r2, [pc, #484]	; (8004f98 <HAL_DMA_Abort_IT+0x294>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d009      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a77      	ldr	r2, [pc, #476]	; (8004f9c <HAL_DMA_Abort_IT+0x298>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <HAL_DMA_Abort_IT+0xc8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a76      	ldr	r2, [pc, #472]	; (8004fa0 <HAL_DMA_Abort_IT+0x29c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d101      	bne.n	8004dd0 <HAL_DMA_Abort_IT+0xcc>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <HAL_DMA_Abort_IT+0xce>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d065      	beq.n	8004ea2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2204      	movs	r2, #4
 8004dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a60      	ldr	r2, [pc, #384]	; (8004f64 <HAL_DMA_Abort_IT+0x260>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d04a      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a5e      	ldr	r2, [pc, #376]	; (8004f68 <HAL_DMA_Abort_IT+0x264>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d045      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a5d      	ldr	r2, [pc, #372]	; (8004f6c <HAL_DMA_Abort_IT+0x268>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d040      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a5b      	ldr	r2, [pc, #364]	; (8004f70 <HAL_DMA_Abort_IT+0x26c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d03b      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a5a      	ldr	r2, [pc, #360]	; (8004f74 <HAL_DMA_Abort_IT+0x270>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d036      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a58      	ldr	r2, [pc, #352]	; (8004f78 <HAL_DMA_Abort_IT+0x274>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d031      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a57      	ldr	r2, [pc, #348]	; (8004f7c <HAL_DMA_Abort_IT+0x278>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d02c      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a55      	ldr	r2, [pc, #340]	; (8004f80 <HAL_DMA_Abort_IT+0x27c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d027      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a54      	ldr	r2, [pc, #336]	; (8004f84 <HAL_DMA_Abort_IT+0x280>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d022      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a52      	ldr	r2, [pc, #328]	; (8004f88 <HAL_DMA_Abort_IT+0x284>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01d      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a51      	ldr	r2, [pc, #324]	; (8004f8c <HAL_DMA_Abort_IT+0x288>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d018      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a4f      	ldr	r2, [pc, #316]	; (8004f90 <HAL_DMA_Abort_IT+0x28c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d013      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a4e      	ldr	r2, [pc, #312]	; (8004f94 <HAL_DMA_Abort_IT+0x290>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00e      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a4c      	ldr	r2, [pc, #304]	; (8004f98 <HAL_DMA_Abort_IT+0x294>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d009      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a4b      	ldr	r2, [pc, #300]	; (8004f9c <HAL_DMA_Abort_IT+0x298>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d004      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x17a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a49      	ldr	r2, [pc, #292]	; (8004fa0 <HAL_DMA_Abort_IT+0x29c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d108      	bne.n	8004e90 <HAL_DMA_Abort_IT+0x18c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e147      	b.n	8005120 <HAL_DMA_Abort_IT+0x41c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e13e      	b.n	8005120 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 020e 	bic.w	r2, r2, #14
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a2b      	ldr	r2, [pc, #172]	; (8004f64 <HAL_DMA_Abort_IT+0x260>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d04a      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a29      	ldr	r2, [pc, #164]	; (8004f68 <HAL_DMA_Abort_IT+0x264>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d045      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a28      	ldr	r2, [pc, #160]	; (8004f6c <HAL_DMA_Abort_IT+0x268>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d040      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a26      	ldr	r2, [pc, #152]	; (8004f70 <HAL_DMA_Abort_IT+0x26c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d03b      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a25      	ldr	r2, [pc, #148]	; (8004f74 <HAL_DMA_Abort_IT+0x270>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d036      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a23      	ldr	r2, [pc, #140]	; (8004f78 <HAL_DMA_Abort_IT+0x274>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d031      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a22      	ldr	r2, [pc, #136]	; (8004f7c <HAL_DMA_Abort_IT+0x278>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d02c      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a20      	ldr	r2, [pc, #128]	; (8004f80 <HAL_DMA_Abort_IT+0x27c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d027      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1f      	ldr	r2, [pc, #124]	; (8004f84 <HAL_DMA_Abort_IT+0x280>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d022      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1d      	ldr	r2, [pc, #116]	; (8004f88 <HAL_DMA_Abort_IT+0x284>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01d      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a1c      	ldr	r2, [pc, #112]	; (8004f8c <HAL_DMA_Abort_IT+0x288>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d018      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a1a      	ldr	r2, [pc, #104]	; (8004f90 <HAL_DMA_Abort_IT+0x28c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d013      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a19      	ldr	r2, [pc, #100]	; (8004f94 <HAL_DMA_Abort_IT+0x290>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00e      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a17      	ldr	r2, [pc, #92]	; (8004f98 <HAL_DMA_Abort_IT+0x294>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d009      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a16      	ldr	r2, [pc, #88]	; (8004f9c <HAL_DMA_Abort_IT+0x298>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d004      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x24e>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <HAL_DMA_Abort_IT+0x29c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d128      	bne.n	8004fa4 <HAL_DMA_Abort_IT+0x2a0>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	e027      	b.n	8004fb4 <HAL_DMA_Abort_IT+0x2b0>
 8004f64:	40020010 	.word	0x40020010
 8004f68:	40020028 	.word	0x40020028
 8004f6c:	40020040 	.word	0x40020040
 8004f70:	40020058 	.word	0x40020058
 8004f74:	40020070 	.word	0x40020070
 8004f78:	40020088 	.word	0x40020088
 8004f7c:	400200a0 	.word	0x400200a0
 8004f80:	400200b8 	.word	0x400200b8
 8004f84:	40020410 	.word	0x40020410
 8004f88:	40020428 	.word	0x40020428
 8004f8c:	40020440 	.word	0x40020440
 8004f90:	40020458 	.word	0x40020458
 8004f94:	40020470 	.word	0x40020470
 8004f98:	40020488 	.word	0x40020488
 8004f9c:	400204a0 	.word	0x400204a0
 8004fa0:	400204b8 	.word	0x400204b8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a5c      	ldr	r2, [pc, #368]	; (800512c <HAL_DMA_Abort_IT+0x428>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d072      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a5b      	ldr	r2, [pc, #364]	; (8005130 <HAL_DMA_Abort_IT+0x42c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d06d      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a59      	ldr	r2, [pc, #356]	; (8005134 <HAL_DMA_Abort_IT+0x430>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d068      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a58      	ldr	r2, [pc, #352]	; (8005138 <HAL_DMA_Abort_IT+0x434>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d063      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a56      	ldr	r2, [pc, #344]	; (800513c <HAL_DMA_Abort_IT+0x438>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d05e      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a55      	ldr	r2, [pc, #340]	; (8005140 <HAL_DMA_Abort_IT+0x43c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d059      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a53      	ldr	r2, [pc, #332]	; (8005144 <HAL_DMA_Abort_IT+0x440>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d054      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a52      	ldr	r2, [pc, #328]	; (8005148 <HAL_DMA_Abort_IT+0x444>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d04f      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a50      	ldr	r2, [pc, #320]	; (800514c <HAL_DMA_Abort_IT+0x448>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d04a      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a4f      	ldr	r2, [pc, #316]	; (8005150 <HAL_DMA_Abort_IT+0x44c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d045      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a4d      	ldr	r2, [pc, #308]	; (8005154 <HAL_DMA_Abort_IT+0x450>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d040      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a4c      	ldr	r2, [pc, #304]	; (8005158 <HAL_DMA_Abort_IT+0x454>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d03b      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a4a      	ldr	r2, [pc, #296]	; (800515c <HAL_DMA_Abort_IT+0x458>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d036      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a49      	ldr	r2, [pc, #292]	; (8005160 <HAL_DMA_Abort_IT+0x45c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d031      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a47      	ldr	r2, [pc, #284]	; (8005164 <HAL_DMA_Abort_IT+0x460>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d02c      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a46      	ldr	r2, [pc, #280]	; (8005168 <HAL_DMA_Abort_IT+0x464>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d027      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a44      	ldr	r2, [pc, #272]	; (800516c <HAL_DMA_Abort_IT+0x468>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d022      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a43      	ldr	r2, [pc, #268]	; (8005170 <HAL_DMA_Abort_IT+0x46c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d01d      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a41      	ldr	r2, [pc, #260]	; (8005174 <HAL_DMA_Abort_IT+0x470>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d018      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a40      	ldr	r2, [pc, #256]	; (8005178 <HAL_DMA_Abort_IT+0x474>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a3e      	ldr	r2, [pc, #248]	; (800517c <HAL_DMA_Abort_IT+0x478>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00e      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a3d      	ldr	r2, [pc, #244]	; (8005180 <HAL_DMA_Abort_IT+0x47c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d009      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a3b      	ldr	r2, [pc, #236]	; (8005184 <HAL_DMA_Abort_IT+0x480>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x3a0>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a3a      	ldr	r2, [pc, #232]	; (8005188 <HAL_DMA_Abort_IT+0x484>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d101      	bne.n	80050a8 <HAL_DMA_Abort_IT+0x3a4>
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <HAL_DMA_Abort_IT+0x3a6>
 80050a8:	2300      	movs	r3, #0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d028      	beq.n	8005100 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2201      	movs	r2, #1
 80050ce:	409a      	lsls	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00c      	beq.n	8005100 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40020010 	.word	0x40020010
 8005130:	40020028 	.word	0x40020028
 8005134:	40020040 	.word	0x40020040
 8005138:	40020058 	.word	0x40020058
 800513c:	40020070 	.word	0x40020070
 8005140:	40020088 	.word	0x40020088
 8005144:	400200a0 	.word	0x400200a0
 8005148:	400200b8 	.word	0x400200b8
 800514c:	40020410 	.word	0x40020410
 8005150:	40020428 	.word	0x40020428
 8005154:	40020440 	.word	0x40020440
 8005158:	40020458 	.word	0x40020458
 800515c:	40020470 	.word	0x40020470
 8005160:	40020488 	.word	0x40020488
 8005164:	400204a0 	.word	0x400204a0
 8005168:	400204b8 	.word	0x400204b8
 800516c:	58025408 	.word	0x58025408
 8005170:	5802541c 	.word	0x5802541c
 8005174:	58025430 	.word	0x58025430
 8005178:	58025444 	.word	0x58025444
 800517c:	58025458 	.word	0x58025458
 8005180:	5802546c 	.word	0x5802546c
 8005184:	58025480 	.word	0x58025480
 8005188:	58025494 	.word	0x58025494

0800518c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	; 0x28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005198:	4b67      	ldr	r3, [pc, #412]	; (8005338 <HAL_DMA_IRQHandler+0x1ac>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a67      	ldr	r2, [pc, #412]	; (800533c <HAL_DMA_IRQHandler+0x1b0>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	0a9b      	lsrs	r3, r3, #10
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a5f      	ldr	r2, [pc, #380]	; (8005340 <HAL_DMA_IRQHandler+0x1b4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d04a      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a5d      	ldr	r2, [pc, #372]	; (8005344 <HAL_DMA_IRQHandler+0x1b8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d045      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a5c      	ldr	r2, [pc, #368]	; (8005348 <HAL_DMA_IRQHandler+0x1bc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d040      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a5a      	ldr	r2, [pc, #360]	; (800534c <HAL_DMA_IRQHandler+0x1c0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d03b      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a59      	ldr	r2, [pc, #356]	; (8005350 <HAL_DMA_IRQHandler+0x1c4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d036      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a57      	ldr	r2, [pc, #348]	; (8005354 <HAL_DMA_IRQHandler+0x1c8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d031      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a56      	ldr	r2, [pc, #344]	; (8005358 <HAL_DMA_IRQHandler+0x1cc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d02c      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a54      	ldr	r2, [pc, #336]	; (800535c <HAL_DMA_IRQHandler+0x1d0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d027      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a53      	ldr	r2, [pc, #332]	; (8005360 <HAL_DMA_IRQHandler+0x1d4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d022      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a51      	ldr	r2, [pc, #324]	; (8005364 <HAL_DMA_IRQHandler+0x1d8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01d      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a50      	ldr	r2, [pc, #320]	; (8005368 <HAL_DMA_IRQHandler+0x1dc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d018      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a4e      	ldr	r2, [pc, #312]	; (800536c <HAL_DMA_IRQHandler+0x1e0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a4d      	ldr	r2, [pc, #308]	; (8005370 <HAL_DMA_IRQHandler+0x1e4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a4b      	ldr	r2, [pc, #300]	; (8005374 <HAL_DMA_IRQHandler+0x1e8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a4a      	ldr	r2, [pc, #296]	; (8005378 <HAL_DMA_IRQHandler+0x1ec>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_DMA_IRQHandler+0xd2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a48      	ldr	r2, [pc, #288]	; (800537c <HAL_DMA_IRQHandler+0x1f0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d101      	bne.n	8005262 <HAL_DMA_IRQHandler+0xd6>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <HAL_DMA_IRQHandler+0xd8>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 842b 	beq.w	8005ac0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2208      	movs	r2, #8
 8005274:	409a      	lsls	r2, r3
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 80a2 	beq.w	80053c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a2e      	ldr	r2, [pc, #184]	; (8005340 <HAL_DMA_IRQHandler+0x1b4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d04a      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a2d      	ldr	r2, [pc, #180]	; (8005344 <HAL_DMA_IRQHandler+0x1b8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d045      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a2b      	ldr	r2, [pc, #172]	; (8005348 <HAL_DMA_IRQHandler+0x1bc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d040      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a2a      	ldr	r2, [pc, #168]	; (800534c <HAL_DMA_IRQHandler+0x1c0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d03b      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a28      	ldr	r2, [pc, #160]	; (8005350 <HAL_DMA_IRQHandler+0x1c4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d036      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a27      	ldr	r2, [pc, #156]	; (8005354 <HAL_DMA_IRQHandler+0x1c8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d031      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a25      	ldr	r2, [pc, #148]	; (8005358 <HAL_DMA_IRQHandler+0x1cc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d02c      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a24      	ldr	r2, [pc, #144]	; (800535c <HAL_DMA_IRQHandler+0x1d0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d027      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a22      	ldr	r2, [pc, #136]	; (8005360 <HAL_DMA_IRQHandler+0x1d4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d022      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a21      	ldr	r2, [pc, #132]	; (8005364 <HAL_DMA_IRQHandler+0x1d8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d01d      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1f      	ldr	r2, [pc, #124]	; (8005368 <HAL_DMA_IRQHandler+0x1dc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d018      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1e      	ldr	r2, [pc, #120]	; (800536c <HAL_DMA_IRQHandler+0x1e0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d013      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1c      	ldr	r2, [pc, #112]	; (8005370 <HAL_DMA_IRQHandler+0x1e4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00e      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a1b      	ldr	r2, [pc, #108]	; (8005374 <HAL_DMA_IRQHandler+0x1e8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d009      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a19      	ldr	r2, [pc, #100]	; (8005378 <HAL_DMA_IRQHandler+0x1ec>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_DMA_IRQHandler+0x194>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a18      	ldr	r2, [pc, #96]	; (800537c <HAL_DMA_IRQHandler+0x1f0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d12f      	bne.n	8005380 <HAL_DMA_IRQHandler+0x1f4>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	bf14      	ite	ne
 800532e:	2301      	movne	r3, #1
 8005330:	2300      	moveq	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	e02e      	b.n	8005394 <HAL_DMA_IRQHandler+0x208>
 8005336:	bf00      	nop
 8005338:	24000028 	.word	0x24000028
 800533c:	1b4e81b5 	.word	0x1b4e81b5
 8005340:	40020010 	.word	0x40020010
 8005344:	40020028 	.word	0x40020028
 8005348:	40020040 	.word	0x40020040
 800534c:	40020058 	.word	0x40020058
 8005350:	40020070 	.word	0x40020070
 8005354:	40020088 	.word	0x40020088
 8005358:	400200a0 	.word	0x400200a0
 800535c:	400200b8 	.word	0x400200b8
 8005360:	40020410 	.word	0x40020410
 8005364:	40020428 	.word	0x40020428
 8005368:	40020440 	.word	0x40020440
 800536c:	40020458 	.word	0x40020458
 8005370:	40020470 	.word	0x40020470
 8005374:	40020488 	.word	0x40020488
 8005378:	400204a0 	.word	0x400204a0
 800537c:	400204b8 	.word	0x400204b8
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	bf14      	ite	ne
 800538e:	2301      	movne	r3, #1
 8005390:	2300      	moveq	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d015      	beq.n	80053c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0204 	bic.w	r2, r2, #4
 80053a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	2208      	movs	r2, #8
 80053b2:	409a      	lsls	r2, r3
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053bc:	f043 0201 	orr.w	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	fa22 f303 	lsr.w	r3, r2, r3
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d06e      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a69      	ldr	r2, [pc, #420]	; (8005584 <HAL_DMA_IRQHandler+0x3f8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d04a      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a67      	ldr	r2, [pc, #412]	; (8005588 <HAL_DMA_IRQHandler+0x3fc>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d045      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a66      	ldr	r2, [pc, #408]	; (800558c <HAL_DMA_IRQHandler+0x400>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d040      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a64      	ldr	r2, [pc, #400]	; (8005590 <HAL_DMA_IRQHandler+0x404>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d03b      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a63      	ldr	r2, [pc, #396]	; (8005594 <HAL_DMA_IRQHandler+0x408>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d036      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a61      	ldr	r2, [pc, #388]	; (8005598 <HAL_DMA_IRQHandler+0x40c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d031      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a60      	ldr	r2, [pc, #384]	; (800559c <HAL_DMA_IRQHandler+0x410>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d02c      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a5e      	ldr	r2, [pc, #376]	; (80055a0 <HAL_DMA_IRQHandler+0x414>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d027      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a5d      	ldr	r2, [pc, #372]	; (80055a4 <HAL_DMA_IRQHandler+0x418>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d022      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a5b      	ldr	r2, [pc, #364]	; (80055a8 <HAL_DMA_IRQHandler+0x41c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d01d      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a5a      	ldr	r2, [pc, #360]	; (80055ac <HAL_DMA_IRQHandler+0x420>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d018      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a58      	ldr	r2, [pc, #352]	; (80055b0 <HAL_DMA_IRQHandler+0x424>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a57      	ldr	r2, [pc, #348]	; (80055b4 <HAL_DMA_IRQHandler+0x428>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00e      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a55      	ldr	r2, [pc, #340]	; (80055b8 <HAL_DMA_IRQHandler+0x42c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d009      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a54      	ldr	r2, [pc, #336]	; (80055bc <HAL_DMA_IRQHandler+0x430>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d004      	beq.n	800547a <HAL_DMA_IRQHandler+0x2ee>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a52      	ldr	r2, [pc, #328]	; (80055c0 <HAL_DMA_IRQHandler+0x434>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d10a      	bne.n	8005490 <HAL_DMA_IRQHandler+0x304>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b00      	cmp	r3, #0
 8005486:	bf14      	ite	ne
 8005488:	2301      	movne	r3, #1
 800548a:	2300      	moveq	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	e003      	b.n	8005498 <HAL_DMA_IRQHandler+0x30c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00d      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a0:	f003 031f 	and.w	r3, r3, #31
 80054a4:	2201      	movs	r2, #1
 80054a6:	409a      	lsls	r2, r3
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b0:	f043 0202 	orr.w	r2, r3, #2
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	2204      	movs	r2, #4
 80054c2:	409a      	lsls	r2, r3
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 808f 	beq.w	80055ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a2c      	ldr	r2, [pc, #176]	; (8005584 <HAL_DMA_IRQHandler+0x3f8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d04a      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a2a      	ldr	r2, [pc, #168]	; (8005588 <HAL_DMA_IRQHandler+0x3fc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d045      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a29      	ldr	r2, [pc, #164]	; (800558c <HAL_DMA_IRQHandler+0x400>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d040      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a27      	ldr	r2, [pc, #156]	; (8005590 <HAL_DMA_IRQHandler+0x404>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d03b      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a26      	ldr	r2, [pc, #152]	; (8005594 <HAL_DMA_IRQHandler+0x408>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d036      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a24      	ldr	r2, [pc, #144]	; (8005598 <HAL_DMA_IRQHandler+0x40c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d031      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a23      	ldr	r2, [pc, #140]	; (800559c <HAL_DMA_IRQHandler+0x410>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d02c      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a21      	ldr	r2, [pc, #132]	; (80055a0 <HAL_DMA_IRQHandler+0x414>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d027      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a20      	ldr	r2, [pc, #128]	; (80055a4 <HAL_DMA_IRQHandler+0x418>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d022      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1e      	ldr	r2, [pc, #120]	; (80055a8 <HAL_DMA_IRQHandler+0x41c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d01d      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <HAL_DMA_IRQHandler+0x420>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d018      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <HAL_DMA_IRQHandler+0x424>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d013      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a1a      	ldr	r2, [pc, #104]	; (80055b4 <HAL_DMA_IRQHandler+0x428>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00e      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <HAL_DMA_IRQHandler+0x42c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d009      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a17      	ldr	r2, [pc, #92]	; (80055bc <HAL_DMA_IRQHandler+0x430>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d004      	beq.n	800556e <HAL_DMA_IRQHandler+0x3e2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <HAL_DMA_IRQHandler+0x434>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d12a      	bne.n	80055c4 <HAL_DMA_IRQHandler+0x438>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	e023      	b.n	80055cc <HAL_DMA_IRQHandler+0x440>
 8005584:	40020010 	.word	0x40020010
 8005588:	40020028 	.word	0x40020028
 800558c:	40020040 	.word	0x40020040
 8005590:	40020058 	.word	0x40020058
 8005594:	40020070 	.word	0x40020070
 8005598:	40020088 	.word	0x40020088
 800559c:	400200a0 	.word	0x400200a0
 80055a0:	400200b8 	.word	0x400200b8
 80055a4:	40020410 	.word	0x40020410
 80055a8:	40020428 	.word	0x40020428
 80055ac:	40020440 	.word	0x40020440
 80055b0:	40020458 	.word	0x40020458
 80055b4:	40020470 	.word	0x40020470
 80055b8:	40020488 	.word	0x40020488
 80055bc:	400204a0 	.word	0x400204a0
 80055c0:	400204b8 	.word	0x400204b8
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2300      	movs	r3, #0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00d      	beq.n	80055ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	2204      	movs	r2, #4
 80055da:	409a      	lsls	r2, r3
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	f043 0204 	orr.w	r2, r3, #4
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f0:	f003 031f 	and.w	r3, r3, #31
 80055f4:	2210      	movs	r2, #16
 80055f6:	409a      	lsls	r2, r3
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80a6 	beq.w	800574e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a85      	ldr	r2, [pc, #532]	; (800581c <HAL_DMA_IRQHandler+0x690>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d04a      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a83      	ldr	r2, [pc, #524]	; (8005820 <HAL_DMA_IRQHandler+0x694>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d045      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a82      	ldr	r2, [pc, #520]	; (8005824 <HAL_DMA_IRQHandler+0x698>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d040      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a80      	ldr	r2, [pc, #512]	; (8005828 <HAL_DMA_IRQHandler+0x69c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d03b      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a7f      	ldr	r2, [pc, #508]	; (800582c <HAL_DMA_IRQHandler+0x6a0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d036      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a7d      	ldr	r2, [pc, #500]	; (8005830 <HAL_DMA_IRQHandler+0x6a4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d031      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a7c      	ldr	r2, [pc, #496]	; (8005834 <HAL_DMA_IRQHandler+0x6a8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d02c      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a7a      	ldr	r2, [pc, #488]	; (8005838 <HAL_DMA_IRQHandler+0x6ac>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d027      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a79      	ldr	r2, [pc, #484]	; (800583c <HAL_DMA_IRQHandler+0x6b0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d022      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a77      	ldr	r2, [pc, #476]	; (8005840 <HAL_DMA_IRQHandler+0x6b4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d01d      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a76      	ldr	r2, [pc, #472]	; (8005844 <HAL_DMA_IRQHandler+0x6b8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d018      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a74      	ldr	r2, [pc, #464]	; (8005848 <HAL_DMA_IRQHandler+0x6bc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d013      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a73      	ldr	r2, [pc, #460]	; (800584c <HAL_DMA_IRQHandler+0x6c0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00e      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a71      	ldr	r2, [pc, #452]	; (8005850 <HAL_DMA_IRQHandler+0x6c4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a70      	ldr	r2, [pc, #448]	; (8005854 <HAL_DMA_IRQHandler+0x6c8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x516>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a6e      	ldr	r2, [pc, #440]	; (8005858 <HAL_DMA_IRQHandler+0x6cc>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d10a      	bne.n	80056b8 <HAL_DMA_IRQHandler+0x52c>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bf14      	ite	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	2300      	moveq	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	e009      	b.n	80056cc <HAL_DMA_IRQHandler+0x540>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	bf14      	ite	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	2300      	moveq	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d03e      	beq.n	800574e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d4:	f003 031f 	and.w	r3, r3, #31
 80056d8:	2210      	movs	r2, #16
 80056da:	409a      	lsls	r2, r3
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d018      	beq.n	8005720 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d108      	bne.n	800570e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	d024      	beq.n	800574e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
 800570c:	e01f      	b.n	800574e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01b      	beq.n	800574e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	4798      	blx	r3
 800571e:	e016      	b.n	800574e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d107      	bne.n	800573e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0208 	bic.w	r2, r2, #8
 800573c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	2220      	movs	r2, #32
 8005758:	409a      	lsls	r2, r3
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	4013      	ands	r3, r2
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8110 	beq.w	8005984 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2c      	ldr	r2, [pc, #176]	; (800581c <HAL_DMA_IRQHandler+0x690>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d04a      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a2b      	ldr	r2, [pc, #172]	; (8005820 <HAL_DMA_IRQHandler+0x694>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d045      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a29      	ldr	r2, [pc, #164]	; (8005824 <HAL_DMA_IRQHandler+0x698>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d040      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a28      	ldr	r2, [pc, #160]	; (8005828 <HAL_DMA_IRQHandler+0x69c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d03b      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a26      	ldr	r2, [pc, #152]	; (800582c <HAL_DMA_IRQHandler+0x6a0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d036      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a25      	ldr	r2, [pc, #148]	; (8005830 <HAL_DMA_IRQHandler+0x6a4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d031      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a23      	ldr	r2, [pc, #140]	; (8005834 <HAL_DMA_IRQHandler+0x6a8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d02c      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a22      	ldr	r2, [pc, #136]	; (8005838 <HAL_DMA_IRQHandler+0x6ac>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d027      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a20      	ldr	r2, [pc, #128]	; (800583c <HAL_DMA_IRQHandler+0x6b0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d022      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1f      	ldr	r2, [pc, #124]	; (8005840 <HAL_DMA_IRQHandler+0x6b4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d01d      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a1d      	ldr	r2, [pc, #116]	; (8005844 <HAL_DMA_IRQHandler+0x6b8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d018      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1c      	ldr	r2, [pc, #112]	; (8005848 <HAL_DMA_IRQHandler+0x6bc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d013      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1a      	ldr	r2, [pc, #104]	; (800584c <HAL_DMA_IRQHandler+0x6c0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00e      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a19      	ldr	r2, [pc, #100]	; (8005850 <HAL_DMA_IRQHandler+0x6c4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d009      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a17      	ldr	r2, [pc, #92]	; (8005854 <HAL_DMA_IRQHandler+0x6c8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d004      	beq.n	8005804 <HAL_DMA_IRQHandler+0x678>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a16      	ldr	r2, [pc, #88]	; (8005858 <HAL_DMA_IRQHandler+0x6cc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d12b      	bne.n	800585c <HAL_DMA_IRQHandler+0x6d0>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0310 	and.w	r3, r3, #16
 800580e:	2b00      	cmp	r3, #0
 8005810:	bf14      	ite	ne
 8005812:	2301      	movne	r3, #1
 8005814:	2300      	moveq	r3, #0
 8005816:	b2db      	uxtb	r3, r3
 8005818:	e02a      	b.n	8005870 <HAL_DMA_IRQHandler+0x6e4>
 800581a:	bf00      	nop
 800581c:	40020010 	.word	0x40020010
 8005820:	40020028 	.word	0x40020028
 8005824:	40020040 	.word	0x40020040
 8005828:	40020058 	.word	0x40020058
 800582c:	40020070 	.word	0x40020070
 8005830:	40020088 	.word	0x40020088
 8005834:	400200a0 	.word	0x400200a0
 8005838:	400200b8 	.word	0x400200b8
 800583c:	40020410 	.word	0x40020410
 8005840:	40020428 	.word	0x40020428
 8005844:	40020440 	.word	0x40020440
 8005848:	40020458 	.word	0x40020458
 800584c:	40020470 	.word	0x40020470
 8005850:	40020488 	.word	0x40020488
 8005854:	400204a0 	.word	0x400204a0
 8005858:	400204b8 	.word	0x400204b8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	bf14      	ite	ne
 800586a:	2301      	movne	r3, #1
 800586c:	2300      	moveq	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8087 	beq.w	8005984 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	2220      	movs	r2, #32
 8005880:	409a      	lsls	r2, r3
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b04      	cmp	r3, #4
 8005890:	d139      	bne.n	8005906 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0216 	bic.w	r2, r2, #22
 80058a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695a      	ldr	r2, [r3, #20]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <HAL_DMA_IRQHandler+0x736>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0208 	bic.w	r2, r2, #8
 80058d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d6:	f003 031f 	and.w	r3, r3, #31
 80058da:	223f      	movs	r2, #63	; 0x3f
 80058dc:	409a      	lsls	r2, r3
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 834a 	beq.w	8005f90 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4798      	blx	r3
          }
          return;
 8005904:	e344      	b.n	8005f90 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d018      	beq.n	8005946 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d108      	bne.n	8005934 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	2b00      	cmp	r3, #0
 8005928:	d02c      	beq.n	8005984 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	4798      	blx	r3
 8005932:	e027      	b.n	8005984 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d023      	beq.n	8005984 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	4798      	blx	r3
 8005944:	e01e      	b.n	8005984 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10f      	bne.n	8005974 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0210 	bic.w	r2, r2, #16
 8005962:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8306 	beq.w	8005f9a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8088 	beq.w	8005aac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2204      	movs	r2, #4
 80059a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a7a      	ldr	r2, [pc, #488]	; (8005b94 <HAL_DMA_IRQHandler+0xa08>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d04a      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a79      	ldr	r2, [pc, #484]	; (8005b98 <HAL_DMA_IRQHandler+0xa0c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d045      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a77      	ldr	r2, [pc, #476]	; (8005b9c <HAL_DMA_IRQHandler+0xa10>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d040      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a76      	ldr	r2, [pc, #472]	; (8005ba0 <HAL_DMA_IRQHandler+0xa14>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d03b      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a74      	ldr	r2, [pc, #464]	; (8005ba4 <HAL_DMA_IRQHandler+0xa18>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d036      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a73      	ldr	r2, [pc, #460]	; (8005ba8 <HAL_DMA_IRQHandler+0xa1c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d031      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a71      	ldr	r2, [pc, #452]	; (8005bac <HAL_DMA_IRQHandler+0xa20>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d02c      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a70      	ldr	r2, [pc, #448]	; (8005bb0 <HAL_DMA_IRQHandler+0xa24>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d027      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a6e      	ldr	r2, [pc, #440]	; (8005bb4 <HAL_DMA_IRQHandler+0xa28>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d022      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a6d      	ldr	r2, [pc, #436]	; (8005bb8 <HAL_DMA_IRQHandler+0xa2c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d01d      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a6b      	ldr	r2, [pc, #428]	; (8005bbc <HAL_DMA_IRQHandler+0xa30>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d018      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a6a      	ldr	r2, [pc, #424]	; (8005bc0 <HAL_DMA_IRQHandler+0xa34>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d013      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a68      	ldr	r2, [pc, #416]	; (8005bc4 <HAL_DMA_IRQHandler+0xa38>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00e      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a67      	ldr	r2, [pc, #412]	; (8005bc8 <HAL_DMA_IRQHandler+0xa3c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d009      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a65      	ldr	r2, [pc, #404]	; (8005bcc <HAL_DMA_IRQHandler+0xa40>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x8b8>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a64      	ldr	r2, [pc, #400]	; (8005bd0 <HAL_DMA_IRQHandler+0xa44>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d108      	bne.n	8005a56 <HAL_DMA_IRQHandler+0x8ca>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0201 	bic.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	e007      	b.n	8005a66 <HAL_DMA_IRQHandler+0x8da>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0201 	bic.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d307      	bcc.n	8005a82 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f2      	bne.n	8005a66 <HAL_DMA_IRQHandler+0x8da>
 8005a80:	e000      	b.n	8005a84 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005a82:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d004      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2203      	movs	r2, #3
 8005a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005a9a:	e003      	b.n	8005aa4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8272 	beq.w	8005f9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	4798      	blx	r3
 8005abe:	e26c      	b.n	8005f9a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a43      	ldr	r2, [pc, #268]	; (8005bd4 <HAL_DMA_IRQHandler+0xa48>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d022      	beq.n	8005b10 <HAL_DMA_IRQHandler+0x984>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a42      	ldr	r2, [pc, #264]	; (8005bd8 <HAL_DMA_IRQHandler+0xa4c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d01d      	beq.n	8005b10 <HAL_DMA_IRQHandler+0x984>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a40      	ldr	r2, [pc, #256]	; (8005bdc <HAL_DMA_IRQHandler+0xa50>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d018      	beq.n	8005b10 <HAL_DMA_IRQHandler+0x984>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a3f      	ldr	r2, [pc, #252]	; (8005be0 <HAL_DMA_IRQHandler+0xa54>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <HAL_DMA_IRQHandler+0x984>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a3d      	ldr	r2, [pc, #244]	; (8005be4 <HAL_DMA_IRQHandler+0xa58>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00e      	beq.n	8005b10 <HAL_DMA_IRQHandler+0x984>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a3c      	ldr	r2, [pc, #240]	; (8005be8 <HAL_DMA_IRQHandler+0xa5c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d009      	beq.n	8005b10 <HAL_DMA_IRQHandler+0x984>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a3a      	ldr	r2, [pc, #232]	; (8005bec <HAL_DMA_IRQHandler+0xa60>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <HAL_DMA_IRQHandler+0x984>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a39      	ldr	r2, [pc, #228]	; (8005bf0 <HAL_DMA_IRQHandler+0xa64>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d101      	bne.n	8005b14 <HAL_DMA_IRQHandler+0x988>
 8005b10:	2301      	movs	r3, #1
 8005b12:	e000      	b.n	8005b16 <HAL_DMA_IRQHandler+0x98a>
 8005b14:	2300      	movs	r3, #0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 823f 	beq.w	8005f9a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	4013      	ands	r3, r2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 80cd 	beq.w	8005cd4 <HAL_DMA_IRQHandler+0xb48>
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80c7 	beq.w	8005cd4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2204      	movs	r2, #4
 8005b50:	409a      	lsls	r2, r3
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d049      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d109      	bne.n	8005b7e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 8210 	beq.w	8005f94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b7c:	e20a      	b.n	8005f94 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8206 	beq.w	8005f94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b90:	e200      	b.n	8005f94 <HAL_DMA_IRQHandler+0xe08>
 8005b92:	bf00      	nop
 8005b94:	40020010 	.word	0x40020010
 8005b98:	40020028 	.word	0x40020028
 8005b9c:	40020040 	.word	0x40020040
 8005ba0:	40020058 	.word	0x40020058
 8005ba4:	40020070 	.word	0x40020070
 8005ba8:	40020088 	.word	0x40020088
 8005bac:	400200a0 	.word	0x400200a0
 8005bb0:	400200b8 	.word	0x400200b8
 8005bb4:	40020410 	.word	0x40020410
 8005bb8:	40020428 	.word	0x40020428
 8005bbc:	40020440 	.word	0x40020440
 8005bc0:	40020458 	.word	0x40020458
 8005bc4:	40020470 	.word	0x40020470
 8005bc8:	40020488 	.word	0x40020488
 8005bcc:	400204a0 	.word	0x400204a0
 8005bd0:	400204b8 	.word	0x400204b8
 8005bd4:	58025408 	.word	0x58025408
 8005bd8:	5802541c 	.word	0x5802541c
 8005bdc:	58025430 	.word	0x58025430
 8005be0:	58025444 	.word	0x58025444
 8005be4:	58025458 	.word	0x58025458
 8005be8:	5802546c 	.word	0x5802546c
 8005bec:	58025480 	.word	0x58025480
 8005bf0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f003 0320 	and.w	r3, r3, #32
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d160      	bne.n	8005cc0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a8c      	ldr	r2, [pc, #560]	; (8005e34 <HAL_DMA_IRQHandler+0xca8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d04a      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a8a      	ldr	r2, [pc, #552]	; (8005e38 <HAL_DMA_IRQHandler+0xcac>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d045      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a89      	ldr	r2, [pc, #548]	; (8005e3c <HAL_DMA_IRQHandler+0xcb0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d040      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a87      	ldr	r2, [pc, #540]	; (8005e40 <HAL_DMA_IRQHandler+0xcb4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d03b      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a86      	ldr	r2, [pc, #536]	; (8005e44 <HAL_DMA_IRQHandler+0xcb8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d036      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a84      	ldr	r2, [pc, #528]	; (8005e48 <HAL_DMA_IRQHandler+0xcbc>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d031      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a83      	ldr	r2, [pc, #524]	; (8005e4c <HAL_DMA_IRQHandler+0xcc0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d02c      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a81      	ldr	r2, [pc, #516]	; (8005e50 <HAL_DMA_IRQHandler+0xcc4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d027      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a80      	ldr	r2, [pc, #512]	; (8005e54 <HAL_DMA_IRQHandler+0xcc8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d022      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a7e      	ldr	r2, [pc, #504]	; (8005e58 <HAL_DMA_IRQHandler+0xccc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01d      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a7d      	ldr	r2, [pc, #500]	; (8005e5c <HAL_DMA_IRQHandler+0xcd0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d018      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a7b      	ldr	r2, [pc, #492]	; (8005e60 <HAL_DMA_IRQHandler+0xcd4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a7a      	ldr	r2, [pc, #488]	; (8005e64 <HAL_DMA_IRQHandler+0xcd8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00e      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a78      	ldr	r2, [pc, #480]	; (8005e68 <HAL_DMA_IRQHandler+0xcdc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d009      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a77      	ldr	r2, [pc, #476]	; (8005e6c <HAL_DMA_IRQHandler+0xce0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xb12>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a75      	ldr	r2, [pc, #468]	; (8005e70 <HAL_DMA_IRQHandler+0xce4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d108      	bne.n	8005cb0 <HAL_DMA_IRQHandler+0xb24>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0208 	bic.w	r2, r2, #8
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	e007      	b.n	8005cc0 <HAL_DMA_IRQHandler+0xb34>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0204 	bic.w	r2, r2, #4
 8005cbe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 8165 	beq.w	8005f94 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cd2:	e15f      	b.n	8005f94 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	2202      	movs	r2, #2
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 80c5 	beq.w	8005e74 <HAL_DMA_IRQHandler+0xce8>
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 80bf 	beq.w	8005e74 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	2202      	movs	r2, #2
 8005d00:	409a      	lsls	r2, r3
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d018      	beq.n	8005d42 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 813a 	beq.w	8005f98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d2c:	e134      	b.n	8005f98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 8130 	beq.w	8005f98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d40:	e12a      	b.n	8005f98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d168      	bne.n	8005e1e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a38      	ldr	r2, [pc, #224]	; (8005e34 <HAL_DMA_IRQHandler+0xca8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d04a      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a37      	ldr	r2, [pc, #220]	; (8005e38 <HAL_DMA_IRQHandler+0xcac>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d045      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a35      	ldr	r2, [pc, #212]	; (8005e3c <HAL_DMA_IRQHandler+0xcb0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d040      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a34      	ldr	r2, [pc, #208]	; (8005e40 <HAL_DMA_IRQHandler+0xcb4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d03b      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a32      	ldr	r2, [pc, #200]	; (8005e44 <HAL_DMA_IRQHandler+0xcb8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d036      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a31      	ldr	r2, [pc, #196]	; (8005e48 <HAL_DMA_IRQHandler+0xcbc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d031      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a2f      	ldr	r2, [pc, #188]	; (8005e4c <HAL_DMA_IRQHandler+0xcc0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d02c      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a2e      	ldr	r2, [pc, #184]	; (8005e50 <HAL_DMA_IRQHandler+0xcc4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d027      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a2c      	ldr	r2, [pc, #176]	; (8005e54 <HAL_DMA_IRQHandler+0xcc8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d022      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a2b      	ldr	r2, [pc, #172]	; (8005e58 <HAL_DMA_IRQHandler+0xccc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d01d      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a29      	ldr	r2, [pc, #164]	; (8005e5c <HAL_DMA_IRQHandler+0xcd0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d018      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a28      	ldr	r2, [pc, #160]	; (8005e60 <HAL_DMA_IRQHandler+0xcd4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d013      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a26      	ldr	r2, [pc, #152]	; (8005e64 <HAL_DMA_IRQHandler+0xcd8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00e      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a25      	ldr	r2, [pc, #148]	; (8005e68 <HAL_DMA_IRQHandler+0xcdc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d009      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a23      	ldr	r2, [pc, #140]	; (8005e6c <HAL_DMA_IRQHandler+0xce0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc60>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a22      	ldr	r2, [pc, #136]	; (8005e70 <HAL_DMA_IRQHandler+0xce4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d108      	bne.n	8005dfe <HAL_DMA_IRQHandler+0xc72>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0214 	bic.w	r2, r2, #20
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	e007      	b.n	8005e0e <HAL_DMA_IRQHandler+0xc82>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 020a 	bic.w	r2, r2, #10
 8005e0c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80b8 	beq.w	8005f98 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e30:	e0b2      	b.n	8005f98 <HAL_DMA_IRQHandler+0xe0c>
 8005e32:	bf00      	nop
 8005e34:	40020010 	.word	0x40020010
 8005e38:	40020028 	.word	0x40020028
 8005e3c:	40020040 	.word	0x40020040
 8005e40:	40020058 	.word	0x40020058
 8005e44:	40020070 	.word	0x40020070
 8005e48:	40020088 	.word	0x40020088
 8005e4c:	400200a0 	.word	0x400200a0
 8005e50:	400200b8 	.word	0x400200b8
 8005e54:	40020410 	.word	0x40020410
 8005e58:	40020428 	.word	0x40020428
 8005e5c:	40020440 	.word	0x40020440
 8005e60:	40020458 	.word	0x40020458
 8005e64:	40020470 	.word	0x40020470
 8005e68:	40020488 	.word	0x40020488
 8005e6c:	400204a0 	.word	0x400204a0
 8005e70:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e78:	f003 031f 	and.w	r3, r3, #31
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	409a      	lsls	r2, r3
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8088 	beq.w	8005f9a <HAL_DMA_IRQHandler+0xe0e>
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8082 	beq.w	8005f9a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a41      	ldr	r2, [pc, #260]	; (8005fa0 <HAL_DMA_IRQHandler+0xe14>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d04a      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a3f      	ldr	r2, [pc, #252]	; (8005fa4 <HAL_DMA_IRQHandler+0xe18>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d045      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a3e      	ldr	r2, [pc, #248]	; (8005fa8 <HAL_DMA_IRQHandler+0xe1c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d040      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a3c      	ldr	r2, [pc, #240]	; (8005fac <HAL_DMA_IRQHandler+0xe20>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d03b      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a3b      	ldr	r2, [pc, #236]	; (8005fb0 <HAL_DMA_IRQHandler+0xe24>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d036      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a39      	ldr	r2, [pc, #228]	; (8005fb4 <HAL_DMA_IRQHandler+0xe28>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d031      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a38      	ldr	r2, [pc, #224]	; (8005fb8 <HAL_DMA_IRQHandler+0xe2c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d02c      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a36      	ldr	r2, [pc, #216]	; (8005fbc <HAL_DMA_IRQHandler+0xe30>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d027      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a35      	ldr	r2, [pc, #212]	; (8005fc0 <HAL_DMA_IRQHandler+0xe34>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d022      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a33      	ldr	r2, [pc, #204]	; (8005fc4 <HAL_DMA_IRQHandler+0xe38>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01d      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a32      	ldr	r2, [pc, #200]	; (8005fc8 <HAL_DMA_IRQHandler+0xe3c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d018      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a30      	ldr	r2, [pc, #192]	; (8005fcc <HAL_DMA_IRQHandler+0xe40>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d013      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a2f      	ldr	r2, [pc, #188]	; (8005fd0 <HAL_DMA_IRQHandler+0xe44>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00e      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a2d      	ldr	r2, [pc, #180]	; (8005fd4 <HAL_DMA_IRQHandler+0xe48>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d009      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a2c      	ldr	r2, [pc, #176]	; (8005fd8 <HAL_DMA_IRQHandler+0xe4c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d004      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xdaa>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a2a      	ldr	r2, [pc, #168]	; (8005fdc <HAL_DMA_IRQHandler+0xe50>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d108      	bne.n	8005f48 <HAL_DMA_IRQHandler+0xdbc>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 021c 	bic.w	r2, r2, #28
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	e007      	b.n	8005f58 <HAL_DMA_IRQHandler+0xdcc>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 020e 	bic.w	r2, r2, #14
 8005f56:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	2201      	movs	r2, #1
 8005f62:	409a      	lsls	r2, r3
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d009      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
 8005f8e:	e004      	b.n	8005f9a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005f90:	bf00      	nop
 8005f92:	e002      	b.n	8005f9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f94:	bf00      	nop
 8005f96:	e000      	b.n	8005f9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f98:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f9a:	3728      	adds	r7, #40	; 0x28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40020010 	.word	0x40020010
 8005fa4:	40020028 	.word	0x40020028
 8005fa8:	40020040 	.word	0x40020040
 8005fac:	40020058 	.word	0x40020058
 8005fb0:	40020070 	.word	0x40020070
 8005fb4:	40020088 	.word	0x40020088
 8005fb8:	400200a0 	.word	0x400200a0
 8005fbc:	400200b8 	.word	0x400200b8
 8005fc0:	40020410 	.word	0x40020410
 8005fc4:	40020428 	.word	0x40020428
 8005fc8:	40020440 	.word	0x40020440
 8005fcc:	40020458 	.word	0x40020458
 8005fd0:	40020470 	.word	0x40020470
 8005fd4:	40020488 	.word	0x40020488
 8005fd8:	400204a0 	.word	0x400204a0
 8005fdc:	400204b8 	.word	0x400204b8

08005fe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a42      	ldr	r2, [pc, #264]	; (80060f8 <DMA_CalcBaseAndBitshift+0x118>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d04a      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a41      	ldr	r2, [pc, #260]	; (80060fc <DMA_CalcBaseAndBitshift+0x11c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d045      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a3f      	ldr	r2, [pc, #252]	; (8006100 <DMA_CalcBaseAndBitshift+0x120>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d040      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a3e      	ldr	r2, [pc, #248]	; (8006104 <DMA_CalcBaseAndBitshift+0x124>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d03b      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a3c      	ldr	r2, [pc, #240]	; (8006108 <DMA_CalcBaseAndBitshift+0x128>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d036      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a3b      	ldr	r2, [pc, #236]	; (800610c <DMA_CalcBaseAndBitshift+0x12c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d031      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a39      	ldr	r2, [pc, #228]	; (8006110 <DMA_CalcBaseAndBitshift+0x130>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d02c      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a38      	ldr	r2, [pc, #224]	; (8006114 <DMA_CalcBaseAndBitshift+0x134>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d027      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a36      	ldr	r2, [pc, #216]	; (8006118 <DMA_CalcBaseAndBitshift+0x138>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d022      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a35      	ldr	r2, [pc, #212]	; (800611c <DMA_CalcBaseAndBitshift+0x13c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d01d      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a33      	ldr	r2, [pc, #204]	; (8006120 <DMA_CalcBaseAndBitshift+0x140>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d018      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a32      	ldr	r2, [pc, #200]	; (8006124 <DMA_CalcBaseAndBitshift+0x144>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d013      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a30      	ldr	r2, [pc, #192]	; (8006128 <DMA_CalcBaseAndBitshift+0x148>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00e      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a2f      	ldr	r2, [pc, #188]	; (800612c <DMA_CalcBaseAndBitshift+0x14c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d009      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a2d      	ldr	r2, [pc, #180]	; (8006130 <DMA_CalcBaseAndBitshift+0x150>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d004      	beq.n	8006088 <DMA_CalcBaseAndBitshift+0xa8>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2c      	ldr	r2, [pc, #176]	; (8006134 <DMA_CalcBaseAndBitshift+0x154>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d101      	bne.n	800608c <DMA_CalcBaseAndBitshift+0xac>
 8006088:	2301      	movs	r3, #1
 800608a:	e000      	b.n	800608e <DMA_CalcBaseAndBitshift+0xae>
 800608c:	2300      	movs	r3, #0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d024      	beq.n	80060dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	3b10      	subs	r3, #16
 800609a:	4a27      	ldr	r2, [pc, #156]	; (8006138 <DMA_CalcBaseAndBitshift+0x158>)
 800609c:	fba2 2303 	umull	r2, r3, r2, r3
 80060a0:	091b      	lsrs	r3, r3, #4
 80060a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	4a24      	ldr	r2, [pc, #144]	; (800613c <DMA_CalcBaseAndBitshift+0x15c>)
 80060ac:	5cd3      	ldrb	r3, [r2, r3]
 80060ae:	461a      	mov	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d908      	bls.n	80060cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	4b1f      	ldr	r3, [pc, #124]	; (8006140 <DMA_CalcBaseAndBitshift+0x160>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	1d1a      	adds	r2, r3, #4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	659a      	str	r2, [r3, #88]	; 0x58
 80060ca:	e00d      	b.n	80060e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <DMA_CalcBaseAndBitshift+0x160>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6593      	str	r3, [r2, #88]	; 0x58
 80060da:	e005      	b.n	80060e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	40020010 	.word	0x40020010
 80060fc:	40020028 	.word	0x40020028
 8006100:	40020040 	.word	0x40020040
 8006104:	40020058 	.word	0x40020058
 8006108:	40020070 	.word	0x40020070
 800610c:	40020088 	.word	0x40020088
 8006110:	400200a0 	.word	0x400200a0
 8006114:	400200b8 	.word	0x400200b8
 8006118:	40020410 	.word	0x40020410
 800611c:	40020428 	.word	0x40020428
 8006120:	40020440 	.word	0x40020440
 8006124:	40020458 	.word	0x40020458
 8006128:	40020470 	.word	0x40020470
 800612c:	40020488 	.word	0x40020488
 8006130:	400204a0 	.word	0x400204a0
 8006134:	400204b8 	.word	0x400204b8
 8006138:	aaaaaaab 	.word	0xaaaaaaab
 800613c:	0800f3b0 	.word	0x0800f3b0
 8006140:	fffffc00 	.word	0xfffffc00

08006144 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d120      	bne.n	800619a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615c:	2b03      	cmp	r3, #3
 800615e:	d858      	bhi.n	8006212 <DMA_CheckFifoParam+0xce>
 8006160:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <DMA_CheckFifoParam+0x24>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	08006179 	.word	0x08006179
 800616c:	0800618b 	.word	0x0800618b
 8006170:	08006179 	.word	0x08006179
 8006174:	08006213 	.word	0x08006213
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d048      	beq.n	8006216 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006188:	e045      	b.n	8006216 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006192:	d142      	bne.n	800621a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006198:	e03f      	b.n	800621a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a2:	d123      	bne.n	80061ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d838      	bhi.n	800621e <DMA_CheckFifoParam+0xda>
 80061ac:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <DMA_CheckFifoParam+0x70>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061c5 	.word	0x080061c5
 80061b8:	080061cb 	.word	0x080061cb
 80061bc:	080061c5 	.word	0x080061c5
 80061c0:	080061dd 	.word	0x080061dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	73fb      	strb	r3, [r7, #15]
        break;
 80061c8:	e030      	b.n	800622c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d025      	beq.n	8006222 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061da:	e022      	b.n	8006222 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061e4:	d11f      	bne.n	8006226 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061ea:	e01c      	b.n	8006226 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d902      	bls.n	80061fa <DMA_CheckFifoParam+0xb6>
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d003      	beq.n	8006200 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80061f8:	e018      	b.n	800622c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	73fb      	strb	r3, [r7, #15]
        break;
 80061fe:	e015      	b.n	800622c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00e      	beq.n	800622a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	73fb      	strb	r3, [r7, #15]
    break;
 8006210:	e00b      	b.n	800622a <DMA_CheckFifoParam+0xe6>
        break;
 8006212:	bf00      	nop
 8006214:	e00a      	b.n	800622c <DMA_CheckFifoParam+0xe8>
        break;
 8006216:	bf00      	nop
 8006218:	e008      	b.n	800622c <DMA_CheckFifoParam+0xe8>
        break;
 800621a:	bf00      	nop
 800621c:	e006      	b.n	800622c <DMA_CheckFifoParam+0xe8>
        break;
 800621e:	bf00      	nop
 8006220:	e004      	b.n	800622c <DMA_CheckFifoParam+0xe8>
        break;
 8006222:	bf00      	nop
 8006224:	e002      	b.n	800622c <DMA_CheckFifoParam+0xe8>
        break;
 8006226:	bf00      	nop
 8006228:	e000      	b.n	800622c <DMA_CheckFifoParam+0xe8>
    break;
 800622a:	bf00      	nop
    }
  }

  return status;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop

0800623c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a38      	ldr	r2, [pc, #224]	; (8006330 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d022      	beq.n	800629a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a36      	ldr	r2, [pc, #216]	; (8006334 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01d      	beq.n	800629a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a35      	ldr	r2, [pc, #212]	; (8006338 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d018      	beq.n	800629a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a33      	ldr	r2, [pc, #204]	; (800633c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a32      	ldr	r2, [pc, #200]	; (8006340 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a30      	ldr	r2, [pc, #192]	; (8006344 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a2f      	ldr	r2, [pc, #188]	; (8006348 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2d      	ldr	r2, [pc, #180]	; (800634c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d101      	bne.n	800629e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800629e:	2300      	movs	r3, #0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01a      	beq.n	80062da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	3b08      	subs	r3, #8
 80062ac:	4a28      	ldr	r2, [pc, #160]	; (8006350 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4b26      	ldr	r3, [pc, #152]	; (8006354 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	461a      	mov	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a24      	ldr	r2, [pc, #144]	; (8006358 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80062c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	2201      	movs	r2, #1
 80062d2:	409a      	lsls	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80062d8:	e024      	b.n	8006324 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	3b10      	subs	r3, #16
 80062e2:	4a1e      	ldr	r2, [pc, #120]	; (800635c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80062e4:	fba2 2303 	umull	r2, r3, r2, r3
 80062e8:	091b      	lsrs	r3, r3, #4
 80062ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4a1c      	ldr	r2, [pc, #112]	; (8006360 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d806      	bhi.n	8006302 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4a1b      	ldr	r2, [pc, #108]	; (8006364 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d902      	bls.n	8006302 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3308      	adds	r3, #8
 8006300:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4b18      	ldr	r3, [pc, #96]	; (8006368 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	461a      	mov	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a16      	ldr	r2, [pc, #88]	; (800636c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006314:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f003 031f 	and.w	r3, r3, #31
 800631c:	2201      	movs	r2, #1
 800631e:	409a      	lsls	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006324:	bf00      	nop
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	58025408 	.word	0x58025408
 8006334:	5802541c 	.word	0x5802541c
 8006338:	58025430 	.word	0x58025430
 800633c:	58025444 	.word	0x58025444
 8006340:	58025458 	.word	0x58025458
 8006344:	5802546c 	.word	0x5802546c
 8006348:	58025480 	.word	0x58025480
 800634c:	58025494 	.word	0x58025494
 8006350:	cccccccd 	.word	0xcccccccd
 8006354:	16009600 	.word	0x16009600
 8006358:	58025880 	.word	0x58025880
 800635c:	aaaaaaab 	.word	0xaaaaaaab
 8006360:	400204b8 	.word	0x400204b8
 8006364:	4002040f 	.word	0x4002040f
 8006368:	10008200 	.word	0x10008200
 800636c:	40020880 	.word	0x40020880

08006370 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d04a      	beq.n	800641c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b08      	cmp	r3, #8
 800638a:	d847      	bhi.n	800641c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a25      	ldr	r2, [pc, #148]	; (8006428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d022      	beq.n	80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a24      	ldr	r2, [pc, #144]	; (800642c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d01d      	beq.n	80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a22      	ldr	r2, [pc, #136]	; (8006430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d018      	beq.n	80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a21      	ldr	r2, [pc, #132]	; (8006434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d013      	beq.n	80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1f      	ldr	r2, [pc, #124]	; (8006438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00e      	beq.n	80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1e      	ldr	r2, [pc, #120]	; (800643c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d009      	beq.n	80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1c      	ldr	r2, [pc, #112]	; (8006440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d004      	beq.n	80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1b      	ldr	r2, [pc, #108]	; (8006444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d101      	bne.n	80063e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80063e0:	2300      	movs	r3, #0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4b17      	ldr	r3, [pc, #92]	; (8006448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	461a      	mov	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a15      	ldr	r2, [pc, #84]	; (800644c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80063f8:	671a      	str	r2, [r3, #112]	; 0x70
 80063fa:	e009      	b.n	8006410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4b14      	ldr	r3, [pc, #80]	; (8006450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	461a      	mov	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a11      	ldr	r2, [pc, #68]	; (8006454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800640e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3b01      	subs	r3, #1
 8006414:	2201      	movs	r2, #1
 8006416:	409a      	lsls	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800641c:	bf00      	nop
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	58025408 	.word	0x58025408
 800642c:	5802541c 	.word	0x5802541c
 8006430:	58025430 	.word	0x58025430
 8006434:	58025444 	.word	0x58025444
 8006438:	58025458 	.word	0x58025458
 800643c:	5802546c 	.word	0x5802546c
 8006440:	58025480 	.word	0x58025480
 8006444:	58025494 	.word	0x58025494
 8006448:	1600963f 	.word	0x1600963f
 800644c:	58025940 	.word	0x58025940
 8006450:	1000823f 	.word	0x1000823f
 8006454:	40020940 	.word	0x40020940

08006458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006458:	b480      	push	{r7}
 800645a:	b089      	sub	sp, #36	; 0x24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006462:	2300      	movs	r3, #0
 8006464:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006466:	4b89      	ldr	r3, [pc, #548]	; (800668c <HAL_GPIO_Init+0x234>)
 8006468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800646a:	e194      	b.n	8006796 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	2101      	movs	r1, #1
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	fa01 f303 	lsl.w	r3, r1, r3
 8006478:	4013      	ands	r3, r2
 800647a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 8186 	beq.w	8006790 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f003 0303 	and.w	r3, r3, #3
 800648c:	2b01      	cmp	r3, #1
 800648e:	d005      	beq.n	800649c <HAL_GPIO_Init+0x44>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f003 0303 	and.w	r3, r3, #3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d130      	bne.n	80064fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	2203      	movs	r2, #3
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	43db      	mvns	r3, r3
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	4013      	ands	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	fa02 f303 	lsl.w	r3, r2, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064d2:	2201      	movs	r2, #1
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	43db      	mvns	r3, r3
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	4013      	ands	r3, r2
 80064e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	091b      	lsrs	r3, r3, #4
 80064e8:	f003 0201 	and.w	r2, r3, #1
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	2b03      	cmp	r3, #3
 8006508:	d017      	beq.n	800653a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	2203      	movs	r2, #3
 8006516:	fa02 f303 	lsl.w	r3, r2, r3
 800651a:	43db      	mvns	r3, r3
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	4013      	ands	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4313      	orrs	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d123      	bne.n	800658e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	08da      	lsrs	r2, r3, #3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3208      	adds	r2, #8
 800654e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	220f      	movs	r2, #15
 800655e:	fa02 f303 	lsl.w	r3, r2, r3
 8006562:	43db      	mvns	r3, r3
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	4013      	ands	r3, r2
 8006568:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	fa02 f303 	lsl.w	r3, r2, r3
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	4313      	orrs	r3, r2
 800657e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	08da      	lsrs	r2, r3, #3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3208      	adds	r2, #8
 8006588:	69b9      	ldr	r1, [r7, #24]
 800658a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	2203      	movs	r2, #3
 800659a:	fa02 f303 	lsl.w	r3, r2, r3
 800659e:	43db      	mvns	r3, r3
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	4013      	ands	r3, r2
 80065a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f003 0203 	and.w	r2, r3, #3
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 80e0 	beq.w	8006790 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065d0:	4b2f      	ldr	r3, [pc, #188]	; (8006690 <HAL_GPIO_Init+0x238>)
 80065d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065d6:	4a2e      	ldr	r2, [pc, #184]	; (8006690 <HAL_GPIO_Init+0x238>)
 80065d8:	f043 0302 	orr.w	r3, r3, #2
 80065dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80065e0:	4b2b      	ldr	r3, [pc, #172]	; (8006690 <HAL_GPIO_Init+0x238>)
 80065e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065ee:	4a29      	ldr	r2, [pc, #164]	; (8006694 <HAL_GPIO_Init+0x23c>)
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	089b      	lsrs	r3, r3, #2
 80065f4:	3302      	adds	r3, #2
 80065f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	220f      	movs	r2, #15
 8006606:	fa02 f303 	lsl.w	r3, r2, r3
 800660a:	43db      	mvns	r3, r3
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	4013      	ands	r3, r2
 8006610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a20      	ldr	r2, [pc, #128]	; (8006698 <HAL_GPIO_Init+0x240>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d052      	beq.n	80066c0 <HAL_GPIO_Init+0x268>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a1f      	ldr	r2, [pc, #124]	; (800669c <HAL_GPIO_Init+0x244>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d031      	beq.n	8006686 <HAL_GPIO_Init+0x22e>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a1e      	ldr	r2, [pc, #120]	; (80066a0 <HAL_GPIO_Init+0x248>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d02b      	beq.n	8006682 <HAL_GPIO_Init+0x22a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <HAL_GPIO_Init+0x24c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d025      	beq.n	800667e <HAL_GPIO_Init+0x226>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a1c      	ldr	r2, [pc, #112]	; (80066a8 <HAL_GPIO_Init+0x250>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01f      	beq.n	800667a <HAL_GPIO_Init+0x222>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a1b      	ldr	r2, [pc, #108]	; (80066ac <HAL_GPIO_Init+0x254>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d019      	beq.n	8006676 <HAL_GPIO_Init+0x21e>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a1a      	ldr	r2, [pc, #104]	; (80066b0 <HAL_GPIO_Init+0x258>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <HAL_GPIO_Init+0x21a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a19      	ldr	r2, [pc, #100]	; (80066b4 <HAL_GPIO_Init+0x25c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00d      	beq.n	800666e <HAL_GPIO_Init+0x216>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a18      	ldr	r2, [pc, #96]	; (80066b8 <HAL_GPIO_Init+0x260>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d007      	beq.n	800666a <HAL_GPIO_Init+0x212>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a17      	ldr	r2, [pc, #92]	; (80066bc <HAL_GPIO_Init+0x264>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d101      	bne.n	8006666 <HAL_GPIO_Init+0x20e>
 8006662:	2309      	movs	r3, #9
 8006664:	e02d      	b.n	80066c2 <HAL_GPIO_Init+0x26a>
 8006666:	230a      	movs	r3, #10
 8006668:	e02b      	b.n	80066c2 <HAL_GPIO_Init+0x26a>
 800666a:	2308      	movs	r3, #8
 800666c:	e029      	b.n	80066c2 <HAL_GPIO_Init+0x26a>
 800666e:	2307      	movs	r3, #7
 8006670:	e027      	b.n	80066c2 <HAL_GPIO_Init+0x26a>
 8006672:	2306      	movs	r3, #6
 8006674:	e025      	b.n	80066c2 <HAL_GPIO_Init+0x26a>
 8006676:	2305      	movs	r3, #5
 8006678:	e023      	b.n	80066c2 <HAL_GPIO_Init+0x26a>
 800667a:	2304      	movs	r3, #4
 800667c:	e021      	b.n	80066c2 <HAL_GPIO_Init+0x26a>
 800667e:	2303      	movs	r3, #3
 8006680:	e01f      	b.n	80066c2 <HAL_GPIO_Init+0x26a>
 8006682:	2302      	movs	r3, #2
 8006684:	e01d      	b.n	80066c2 <HAL_GPIO_Init+0x26a>
 8006686:	2301      	movs	r3, #1
 8006688:	e01b      	b.n	80066c2 <HAL_GPIO_Init+0x26a>
 800668a:	bf00      	nop
 800668c:	58000080 	.word	0x58000080
 8006690:	58024400 	.word	0x58024400
 8006694:	58000400 	.word	0x58000400
 8006698:	58020000 	.word	0x58020000
 800669c:	58020400 	.word	0x58020400
 80066a0:	58020800 	.word	0x58020800
 80066a4:	58020c00 	.word	0x58020c00
 80066a8:	58021000 	.word	0x58021000
 80066ac:	58021400 	.word	0x58021400
 80066b0:	58021800 	.word	0x58021800
 80066b4:	58021c00 	.word	0x58021c00
 80066b8:	58022000 	.word	0x58022000
 80066bc:	58022400 	.word	0x58022400
 80066c0:	2300      	movs	r3, #0
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	f002 0203 	and.w	r2, r2, #3
 80066c8:	0092      	lsls	r2, r2, #2
 80066ca:	4093      	lsls	r3, r2
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066d2:	4938      	ldr	r1, [pc, #224]	; (80067b4 <HAL_GPIO_Init+0x35c>)
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	089b      	lsrs	r3, r3, #2
 80066d8:	3302      	adds	r3, #2
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	43db      	mvns	r3, r3
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	4013      	ands	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800670e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	43db      	mvns	r3, r3
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	4013      	ands	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	43db      	mvns	r3, r3
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	4013      	ands	r3, r2
 800674a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	43db      	mvns	r3, r3
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	4013      	ands	r3, r2
 8006774:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	3301      	adds	r3, #1
 8006794:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	fa22 f303 	lsr.w	r3, r2, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f47f ae63 	bne.w	800646c <HAL_GPIO_Init+0x14>
  }
}
 80067a6:	bf00      	nop
 80067a8:	bf00      	nop
 80067aa:	3724      	adds	r7, #36	; 0x24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	58000400 	.word	0x58000400

080067b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	807b      	strh	r3, [r7, #2]
 80067c4:	4613      	mov	r3, r2
 80067c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067c8:	787b      	ldrb	r3, [r7, #1]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067ce:	887a      	ldrh	r2, [r7, #2]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80067d4:	e003      	b.n	80067de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80067d6:	887b      	ldrh	r3, [r7, #2]
 80067d8:	041a      	lsls	r2, r3, #16
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	619a      	str	r2, [r3, #24]
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	4603      	mov	r3, r0
 80067f2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80067f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067fc:	88fb      	ldrh	r3, [r7, #6]
 80067fe:	4013      	ands	r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d008      	beq.n	8006816 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006808:	88fb      	ldrh	r3, [r7, #6]
 800680a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	4618      	mov	r0, r3
 8006812:	f7fc f90b 	bl	8002a2c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006816:	bf00      	nop
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006828:	4b19      	ldr	r3, [pc, #100]	; (8006890 <HAL_PWREx_ConfigSupply+0x70>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b04      	cmp	r3, #4
 8006832:	d00a      	beq.n	800684a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006834:	4b16      	ldr	r3, [pc, #88]	; (8006890 <HAL_PWREx_ConfigSupply+0x70>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f003 0307 	and.w	r3, r3, #7
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	429a      	cmp	r2, r3
 8006840:	d001      	beq.n	8006846 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e01f      	b.n	8006886 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	e01d      	b.n	8006886 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800684a:	4b11      	ldr	r3, [pc, #68]	; (8006890 <HAL_PWREx_ConfigSupply+0x70>)
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f023 0207 	bic.w	r2, r3, #7
 8006852:	490f      	ldr	r1, [pc, #60]	; (8006890 <HAL_PWREx_ConfigSupply+0x70>)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4313      	orrs	r3, r2
 8006858:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800685a:	f7fd f9bb 	bl	8003bd4 <HAL_GetTick>
 800685e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006860:	e009      	b.n	8006876 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006862:	f7fd f9b7 	bl	8003bd4 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006870:	d901      	bls.n	8006876 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e007      	b.n	8006886 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006876:	4b06      	ldr	r3, [pc, #24]	; (8006890 <HAL_PWREx_ConfigSupply+0x70>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800687e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006882:	d1ee      	bne.n	8006862 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	58024800 	.word	0x58024800

08006894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08c      	sub	sp, #48	; 0x30
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d102      	bne.n	80068a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f000 bc1c 	b.w	80070e0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8087 	beq.w	80069c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068b6:	4b9e      	ldr	r3, [pc, #632]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068c0:	4b9b      	ldr	r3, [pc, #620]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	2b10      	cmp	r3, #16
 80068ca:	d007      	beq.n	80068dc <HAL_RCC_OscConfig+0x48>
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	2b18      	cmp	r3, #24
 80068d0:	d110      	bne.n	80068f4 <HAL_RCC_OscConfig+0x60>
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	f003 0303 	and.w	r3, r3, #3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d10b      	bne.n	80068f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068dc:	4b94      	ldr	r3, [pc, #592]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d06c      	beq.n	80069c2 <HAL_RCC_OscConfig+0x12e>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d168      	bne.n	80069c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e3f5      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068fc:	d106      	bne.n	800690c <HAL_RCC_OscConfig+0x78>
 80068fe:	4b8c      	ldr	r3, [pc, #560]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a8b      	ldr	r2, [pc, #556]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006908:	6013      	str	r3, [r2, #0]
 800690a:	e02e      	b.n	800696a <HAL_RCC_OscConfig+0xd6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10c      	bne.n	800692e <HAL_RCC_OscConfig+0x9a>
 8006914:	4b86      	ldr	r3, [pc, #536]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a85      	ldr	r2, [pc, #532]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 800691a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	4b83      	ldr	r3, [pc, #524]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a82      	ldr	r2, [pc, #520]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	e01d      	b.n	800696a <HAL_RCC_OscConfig+0xd6>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006936:	d10c      	bne.n	8006952 <HAL_RCC_OscConfig+0xbe>
 8006938:	4b7d      	ldr	r3, [pc, #500]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a7c      	ldr	r2, [pc, #496]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 800693e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	4b7a      	ldr	r3, [pc, #488]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a79      	ldr	r2, [pc, #484]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 800694a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	e00b      	b.n	800696a <HAL_RCC_OscConfig+0xd6>
 8006952:	4b77      	ldr	r3, [pc, #476]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a76      	ldr	r2, [pc, #472]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	4b74      	ldr	r3, [pc, #464]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a73      	ldr	r2, [pc, #460]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006968:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d013      	beq.n	800699a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006972:	f7fd f92f 	bl	8003bd4 <HAL_GetTick>
 8006976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006978:	e008      	b.n	800698c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800697a:	f7fd f92b 	bl	8003bd4 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b64      	cmp	r3, #100	; 0x64
 8006986:	d901      	bls.n	800698c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e3a9      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800698c:	4b68      	ldr	r3, [pc, #416]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0f0      	beq.n	800697a <HAL_RCC_OscConfig+0xe6>
 8006998:	e014      	b.n	80069c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699a:	f7fd f91b 	bl	8003bd4 <HAL_GetTick>
 800699e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069a2:	f7fd f917 	bl	8003bd4 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b64      	cmp	r3, #100	; 0x64
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e395      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069b4:	4b5e      	ldr	r3, [pc, #376]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1f0      	bne.n	80069a2 <HAL_RCC_OscConfig+0x10e>
 80069c0:	e000      	b.n	80069c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 80ca 	beq.w	8006b66 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069d2:	4b57      	ldr	r3, [pc, #348]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069dc:	4b54      	ldr	r3, [pc, #336]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 80069de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <HAL_RCC_OscConfig+0x164>
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	2b18      	cmp	r3, #24
 80069ec:	d156      	bne.n	8006a9c <HAL_RCC_OscConfig+0x208>
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	f003 0303 	and.w	r3, r3, #3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d151      	bne.n	8006a9c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069f8:	4b4d      	ldr	r3, [pc, #308]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_RCC_OscConfig+0x17c>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e367      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a10:	4b47      	ldr	r3, [pc, #284]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f023 0219 	bic.w	r2, r3, #25
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	4944      	ldr	r1, [pc, #272]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a22:	f7fd f8d7 	bl	8003bd4 <HAL_GetTick>
 8006a26:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a28:	e008      	b.n	8006a3c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a2a:	f7fd f8d3 	bl	8003bd4 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e351      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a3c:	4b3c      	ldr	r3, [pc, #240]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0f0      	beq.n	8006a2a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a48:	f7fd f8d0 	bl	8003bec <HAL_GetREVID>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d817      	bhi.n	8006a86 <HAL_RCC_OscConfig+0x1f2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	d108      	bne.n	8006a70 <HAL_RCC_OscConfig+0x1dc>
 8006a5e:	4b34      	ldr	r3, [pc, #208]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a66:	4a32      	ldr	r2, [pc, #200]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a6c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a6e:	e07a      	b.n	8006b66 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a70:	4b2f      	ldr	r3, [pc, #188]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	031b      	lsls	r3, r3, #12
 8006a7e:	492c      	ldr	r1, [pc, #176]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a84:	e06f      	b.n	8006b66 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a86:	4b2a      	ldr	r3, [pc, #168]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	061b      	lsls	r3, r3, #24
 8006a94:	4926      	ldr	r1, [pc, #152]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a9a:	e064      	b.n	8006b66 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d047      	beq.n	8006b34 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006aa4:	4b22      	ldr	r3, [pc, #136]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f023 0219 	bic.w	r2, r3, #25
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	491f      	ldr	r1, [pc, #124]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab6:	f7fd f88d 	bl	8003bd4 <HAL_GetTick>
 8006aba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006abe:	f7fd f889 	bl	8003bd4 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e307      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ad0:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0f0      	beq.n	8006abe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006adc:	f7fd f886 	bl	8003bec <HAL_GetREVID>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d817      	bhi.n	8006b1a <HAL_RCC_OscConfig+0x286>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	d108      	bne.n	8006b04 <HAL_RCC_OscConfig+0x270>
 8006af2:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006afa:	4a0d      	ldr	r2, [pc, #52]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b00:	6053      	str	r3, [r2, #4]
 8006b02:	e030      	b.n	8006b66 <HAL_RCC_OscConfig+0x2d2>
 8006b04:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	031b      	lsls	r3, r3, #12
 8006b12:	4907      	ldr	r1, [pc, #28]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	604b      	str	r3, [r1, #4]
 8006b18:	e025      	b.n	8006b66 <HAL_RCC_OscConfig+0x2d2>
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	061b      	lsls	r3, r3, #24
 8006b28:	4901      	ldr	r1, [pc, #4]	; (8006b30 <HAL_RCC_OscConfig+0x29c>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	604b      	str	r3, [r1, #4]
 8006b2e:	e01a      	b.n	8006b66 <HAL_RCC_OscConfig+0x2d2>
 8006b30:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b34:	4b9e      	ldr	r3, [pc, #632]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a9d      	ldr	r2, [pc, #628]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006b3a:	f023 0301 	bic.w	r3, r3, #1
 8006b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b40:	f7fd f848 	bl	8003bd4 <HAL_GetTick>
 8006b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b48:	f7fd f844 	bl	8003bd4 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e2c2      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b5a:	4b95      	ldr	r3, [pc, #596]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f0      	bne.n	8006b48 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0310 	and.w	r3, r3, #16
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 80a9 	beq.w	8006cc6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b74:	4b8e      	ldr	r3, [pc, #568]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b7c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b7e:	4b8c      	ldr	r3, [pc, #560]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	d007      	beq.n	8006b9a <HAL_RCC_OscConfig+0x306>
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2b18      	cmp	r3, #24
 8006b8e:	d13a      	bne.n	8006c06 <HAL_RCC_OscConfig+0x372>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f003 0303 	and.w	r3, r3, #3
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d135      	bne.n	8006c06 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b9a:	4b85      	ldr	r3, [pc, #532]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d005      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x31e>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	2b80      	cmp	r3, #128	; 0x80
 8006bac:	d001      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e296      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bb2:	f7fd f81b 	bl	8003bec <HAL_GetREVID>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d817      	bhi.n	8006bf0 <HAL_RCC_OscConfig+0x35c>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d108      	bne.n	8006bda <HAL_RCC_OscConfig+0x346>
 8006bc8:	4b79      	ldr	r3, [pc, #484]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006bd0:	4a77      	ldr	r2, [pc, #476]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006bd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bd6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bd8:	e075      	b.n	8006cc6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bda:	4b75      	ldr	r3, [pc, #468]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	069b      	lsls	r3, r3, #26
 8006be8:	4971      	ldr	r1, [pc, #452]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bee:	e06a      	b.n	8006cc6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bf0:	4b6f      	ldr	r3, [pc, #444]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	061b      	lsls	r3, r3, #24
 8006bfe:	496c      	ldr	r1, [pc, #432]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c04:	e05f      	b.n	8006cc6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d042      	beq.n	8006c94 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c0e:	4b68      	ldr	r3, [pc, #416]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a67      	ldr	r2, [pc, #412]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1a:	f7fc ffdb 	bl	8003bd4 <HAL_GetTick>
 8006c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c20:	e008      	b.n	8006c34 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c22:	f7fc ffd7 	bl	8003bd4 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e255      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c34:	4b5e      	ldr	r3, [pc, #376]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0f0      	beq.n	8006c22 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c40:	f7fc ffd4 	bl	8003bec <HAL_GetREVID>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d817      	bhi.n	8006c7e <HAL_RCC_OscConfig+0x3ea>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	d108      	bne.n	8006c68 <HAL_RCC_OscConfig+0x3d4>
 8006c56:	4b56      	ldr	r3, [pc, #344]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c5e:	4a54      	ldr	r2, [pc, #336]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006c60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c64:	6053      	str	r3, [r2, #4]
 8006c66:	e02e      	b.n	8006cc6 <HAL_RCC_OscConfig+0x432>
 8006c68:	4b51      	ldr	r3, [pc, #324]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	069b      	lsls	r3, r3, #26
 8006c76:	494e      	ldr	r1, [pc, #312]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	604b      	str	r3, [r1, #4]
 8006c7c:	e023      	b.n	8006cc6 <HAL_RCC_OscConfig+0x432>
 8006c7e:	4b4c      	ldr	r3, [pc, #304]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	061b      	lsls	r3, r3, #24
 8006c8c:	4948      	ldr	r1, [pc, #288]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60cb      	str	r3, [r1, #12]
 8006c92:	e018      	b.n	8006cc6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c94:	4b46      	ldr	r3, [pc, #280]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a45      	ldr	r2, [pc, #276]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca0:	f7fc ff98 	bl	8003bd4 <HAL_GetTick>
 8006ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ca8:	f7fc ff94 	bl	8003bd4 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e212      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cba:	4b3d      	ldr	r3, [pc, #244]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1f0      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0308 	and.w	r3, r3, #8
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d036      	beq.n	8006d40 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d019      	beq.n	8006d0e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cda:	4b35      	ldr	r3, [pc, #212]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cde:	4a34      	ldr	r2, [pc, #208]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006ce0:	f043 0301 	orr.w	r3, r3, #1
 8006ce4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce6:	f7fc ff75 	bl	8003bd4 <HAL_GetTick>
 8006cea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cec:	e008      	b.n	8006d00 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cee:	f7fc ff71 	bl	8003bd4 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e1ef      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d00:	4b2b      	ldr	r3, [pc, #172]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0f0      	beq.n	8006cee <HAL_RCC_OscConfig+0x45a>
 8006d0c:	e018      	b.n	8006d40 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d0e:	4b28      	ldr	r3, [pc, #160]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d12:	4a27      	ldr	r2, [pc, #156]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006d14:	f023 0301 	bic.w	r3, r3, #1
 8006d18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d1a:	f7fc ff5b 	bl	8003bd4 <HAL_GetTick>
 8006d1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d20:	e008      	b.n	8006d34 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d22:	f7fc ff57 	bl	8003bd4 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e1d5      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d34:	4b1e      	ldr	r3, [pc, #120]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1f0      	bne.n	8006d22 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d039      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d019      	beq.n	8006d88 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d54:	4b16      	ldr	r3, [pc, #88]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a15      	ldr	r2, [pc, #84]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006d5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d60:	f7fc ff38 	bl	8003bd4 <HAL_GetTick>
 8006d64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d68:	f7fc ff34 	bl	8003bd4 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e1b2      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0f0      	beq.n	8006d68 <HAL_RCC_OscConfig+0x4d4>
 8006d86:	e01b      	b.n	8006dc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d88:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a08      	ldr	r2, [pc, #32]	; (8006db0 <HAL_RCC_OscConfig+0x51c>)
 8006d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d94:	f7fc ff1e 	bl	8003bd4 <HAL_GetTick>
 8006d98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d9a:	e00b      	b.n	8006db4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d9c:	f7fc ff1a 	bl	8003bd4 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d904      	bls.n	8006db4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e198      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
 8006dae:	bf00      	nop
 8006db0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006db4:	4ba3      	ldr	r3, [pc, #652]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1ed      	bne.n	8006d9c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 8081 	beq.w	8006ed0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006dce:	4b9e      	ldr	r3, [pc, #632]	; (8007048 <HAL_RCC_OscConfig+0x7b4>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a9d      	ldr	r2, [pc, #628]	; (8007048 <HAL_RCC_OscConfig+0x7b4>)
 8006dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006dda:	f7fc fefb 	bl	8003bd4 <HAL_GetTick>
 8006dde:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006de0:	e008      	b.n	8006df4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006de2:	f7fc fef7 	bl	8003bd4 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b64      	cmp	r3, #100	; 0x64
 8006dee:	d901      	bls.n	8006df4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e175      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006df4:	4b94      	ldr	r3, [pc, #592]	; (8007048 <HAL_RCC_OscConfig+0x7b4>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0f0      	beq.n	8006de2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d106      	bne.n	8006e16 <HAL_RCC_OscConfig+0x582>
 8006e08:	4b8e      	ldr	r3, [pc, #568]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0c:	4a8d      	ldr	r2, [pc, #564]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e0e:	f043 0301 	orr.w	r3, r3, #1
 8006e12:	6713      	str	r3, [r2, #112]	; 0x70
 8006e14:	e02d      	b.n	8006e72 <HAL_RCC_OscConfig+0x5de>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10c      	bne.n	8006e38 <HAL_RCC_OscConfig+0x5a4>
 8006e1e:	4b89      	ldr	r3, [pc, #548]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e22:	4a88      	ldr	r2, [pc, #544]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e24:	f023 0301 	bic.w	r3, r3, #1
 8006e28:	6713      	str	r3, [r2, #112]	; 0x70
 8006e2a:	4b86      	ldr	r3, [pc, #536]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2e:	4a85      	ldr	r2, [pc, #532]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e30:	f023 0304 	bic.w	r3, r3, #4
 8006e34:	6713      	str	r3, [r2, #112]	; 0x70
 8006e36:	e01c      	b.n	8006e72 <HAL_RCC_OscConfig+0x5de>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	2b05      	cmp	r3, #5
 8006e3e:	d10c      	bne.n	8006e5a <HAL_RCC_OscConfig+0x5c6>
 8006e40:	4b80      	ldr	r3, [pc, #512]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e44:	4a7f      	ldr	r2, [pc, #508]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e46:	f043 0304 	orr.w	r3, r3, #4
 8006e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e4c:	4b7d      	ldr	r3, [pc, #500]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e50:	4a7c      	ldr	r2, [pc, #496]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	6713      	str	r3, [r2, #112]	; 0x70
 8006e58:	e00b      	b.n	8006e72 <HAL_RCC_OscConfig+0x5de>
 8006e5a:	4b7a      	ldr	r3, [pc, #488]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5e:	4a79      	ldr	r2, [pc, #484]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e60:	f023 0301 	bic.w	r3, r3, #1
 8006e64:	6713      	str	r3, [r2, #112]	; 0x70
 8006e66:	4b77      	ldr	r3, [pc, #476]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6a:	4a76      	ldr	r2, [pc, #472]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e6c:	f023 0304 	bic.w	r3, r3, #4
 8006e70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d015      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e7a:	f7fc feab 	bl	8003bd4 <HAL_GetTick>
 8006e7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e80:	e00a      	b.n	8006e98 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e82:	f7fc fea7 	bl	8003bd4 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e123      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e98:	4b6a      	ldr	r3, [pc, #424]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0ee      	beq.n	8006e82 <HAL_RCC_OscConfig+0x5ee>
 8006ea4:	e014      	b.n	8006ed0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea6:	f7fc fe95 	bl	8003bd4 <HAL_GetTick>
 8006eaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006eac:	e00a      	b.n	8006ec4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eae:	f7fc fe91 	bl	8003bd4 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e10d      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ec4:	4b5f      	ldr	r3, [pc, #380]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1ee      	bne.n	8006eae <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8102 	beq.w	80070de <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006eda:	4b5a      	ldr	r3, [pc, #360]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ee2:	2b18      	cmp	r3, #24
 8006ee4:	f000 80bd 	beq.w	8007062 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	f040 8095 	bne.w	800701c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ef2:	4b54      	ldr	r3, [pc, #336]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a53      	ldr	r2, [pc, #332]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efe:	f7fc fe69 	bl	8003bd4 <HAL_GetTick>
 8006f02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f04:	e008      	b.n	8006f18 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f06:	f7fc fe65 	bl	8003bd4 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d901      	bls.n	8006f18 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e0e3      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f18:	4b4a      	ldr	r3, [pc, #296]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1f0      	bne.n	8006f06 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f24:	4b47      	ldr	r3, [pc, #284]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f28:	4b48      	ldr	r3, [pc, #288]	; (800704c <HAL_RCC_OscConfig+0x7b8>)
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f34:	0112      	lsls	r2, r2, #4
 8006f36:	430a      	orrs	r2, r1
 8006f38:	4942      	ldr	r1, [pc, #264]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	628b      	str	r3, [r1, #40]	; 0x28
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	3b01      	subs	r3, #1
 8006f44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	025b      	lsls	r3, r3, #9
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	041b      	lsls	r3, r3, #16
 8006f5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f60:	431a      	orrs	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f66:	3b01      	subs	r3, #1
 8006f68:	061b      	lsls	r3, r3, #24
 8006f6a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f6e:	4935      	ldr	r1, [pc, #212]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006f74:	4b33      	ldr	r3, [pc, #204]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	4a32      	ldr	r2, [pc, #200]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006f7a:	f023 0301 	bic.w	r3, r3, #1
 8006f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f80:	4b30      	ldr	r3, [pc, #192]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f84:	4b32      	ldr	r3, [pc, #200]	; (8007050 <HAL_RCC_OscConfig+0x7bc>)
 8006f86:	4013      	ands	r3, r2
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f8c:	00d2      	lsls	r2, r2, #3
 8006f8e:	492d      	ldr	r1, [pc, #180]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f94:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	f023 020c 	bic.w	r2, r3, #12
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	4928      	ldr	r1, [pc, #160]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fa6:	4b27      	ldr	r3, [pc, #156]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006faa:	f023 0202 	bic.w	r2, r3, #2
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb2:	4924      	ldr	r1, [pc, #144]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006fb8:	4b22      	ldr	r3, [pc, #136]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	4a21      	ldr	r2, [pc, #132]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc4:	4b1f      	ldr	r3, [pc, #124]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	4a1e      	ldr	r2, [pc, #120]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006fd0:	4b1c      	ldr	r3, [pc, #112]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	4a1b      	ldr	r2, [pc, #108]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006fd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006fdc:	4b19      	ldr	r3, [pc, #100]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	4a18      	ldr	r2, [pc, #96]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fe8:	4b16      	ldr	r3, [pc, #88]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a15      	ldr	r2, [pc, #84]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8006fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff4:	f7fc fdee 	bl	8003bd4 <HAL_GetTick>
 8006ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ffc:	f7fc fdea 	bl	8003bd4 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e068      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800700e:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0f0      	beq.n	8006ffc <HAL_RCC_OscConfig+0x768>
 800701a:	e060      	b.n	80070de <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800701c:	4b09      	ldr	r3, [pc, #36]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a08      	ldr	r2, [pc, #32]	; (8007044 <HAL_RCC_OscConfig+0x7b0>)
 8007022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007028:	f7fc fdd4 	bl	8003bd4 <HAL_GetTick>
 800702c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800702e:	e011      	b.n	8007054 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007030:	f7fc fdd0 	bl	8003bd4 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d90a      	bls.n	8007054 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e04e      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
 8007042:	bf00      	nop
 8007044:	58024400 	.word	0x58024400
 8007048:	58024800 	.word	0x58024800
 800704c:	fffffc0c 	.word	0xfffffc0c
 8007050:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007054:	4b24      	ldr	r3, [pc, #144]	; (80070e8 <HAL_RCC_OscConfig+0x854>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e7      	bne.n	8007030 <HAL_RCC_OscConfig+0x79c>
 8007060:	e03d      	b.n	80070de <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007062:	4b21      	ldr	r3, [pc, #132]	; (80070e8 <HAL_RCC_OscConfig+0x854>)
 8007064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007066:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007068:	4b1f      	ldr	r3, [pc, #124]	; (80070e8 <HAL_RCC_OscConfig+0x854>)
 800706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2b01      	cmp	r3, #1
 8007074:	d031      	beq.n	80070da <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f003 0203 	and.w	r2, r3, #3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007080:	429a      	cmp	r2, r3
 8007082:	d12a      	bne.n	80070da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	091b      	lsrs	r3, r3, #4
 8007088:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007090:	429a      	cmp	r2, r3
 8007092:	d122      	bne.n	80070da <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d11a      	bne.n	80070da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	0a5b      	lsrs	r3, r3, #9
 80070a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d111      	bne.n	80070da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	0c1b      	lsrs	r3, r3, #16
 80070ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d108      	bne.n	80070da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	0e1b      	lsrs	r3, r3, #24
 80070cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d001      	beq.n	80070de <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3730      	adds	r7, #48	; 0x30
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	58024400 	.word	0x58024400

080070ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e19c      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007100:	4b8a      	ldr	r3, [pc, #552]	; (800732c <HAL_RCC_ClockConfig+0x240>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 030f 	and.w	r3, r3, #15
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d910      	bls.n	8007130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800710e:	4b87      	ldr	r3, [pc, #540]	; (800732c <HAL_RCC_ClockConfig+0x240>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f023 020f 	bic.w	r2, r3, #15
 8007116:	4985      	ldr	r1, [pc, #532]	; (800732c <HAL_RCC_ClockConfig+0x240>)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	4313      	orrs	r3, r2
 800711c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800711e:	4b83      	ldr	r3, [pc, #524]	; (800732c <HAL_RCC_ClockConfig+0x240>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d001      	beq.n	8007130 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e184      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d010      	beq.n	800715e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691a      	ldr	r2, [r3, #16]
 8007140:	4b7b      	ldr	r3, [pc, #492]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007148:	429a      	cmp	r2, r3
 800714a:	d908      	bls.n	800715e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800714c:	4b78      	ldr	r3, [pc, #480]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	4975      	ldr	r1, [pc, #468]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 800715a:	4313      	orrs	r3, r2
 800715c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0308 	and.w	r3, r3, #8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d010      	beq.n	800718c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695a      	ldr	r2, [r3, #20]
 800716e:	4b70      	ldr	r3, [pc, #448]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007176:	429a      	cmp	r2, r3
 8007178:	d908      	bls.n	800718c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800717a:	4b6d      	ldr	r3, [pc, #436]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	496a      	ldr	r1, [pc, #424]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007188:	4313      	orrs	r3, r2
 800718a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0310 	and.w	r3, r3, #16
 8007194:	2b00      	cmp	r3, #0
 8007196:	d010      	beq.n	80071ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699a      	ldr	r2, [r3, #24]
 800719c:	4b64      	ldr	r3, [pc, #400]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d908      	bls.n	80071ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80071a8:	4b61      	ldr	r3, [pc, #388]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	495e      	ldr	r1, [pc, #376]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d010      	beq.n	80071e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69da      	ldr	r2, [r3, #28]
 80071ca:	4b59      	ldr	r3, [pc, #356]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d908      	bls.n	80071e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80071d6:	4b56      	ldr	r3, [pc, #344]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	4953      	ldr	r1, [pc, #332]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d010      	beq.n	8007216 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68da      	ldr	r2, [r3, #12]
 80071f8:	4b4d      	ldr	r3, [pc, #308]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	429a      	cmp	r2, r3
 8007202:	d908      	bls.n	8007216 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007204:	4b4a      	ldr	r3, [pc, #296]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	f023 020f 	bic.w	r2, r3, #15
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	4947      	ldr	r1, [pc, #284]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007212:	4313      	orrs	r3, r2
 8007214:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d055      	beq.n	80072ce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007222:	4b43      	ldr	r3, [pc, #268]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	4940      	ldr	r1, [pc, #256]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007230:	4313      	orrs	r3, r2
 8007232:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	2b02      	cmp	r3, #2
 800723a:	d107      	bne.n	800724c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800723c:	4b3c      	ldr	r3, [pc, #240]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d121      	bne.n	800728c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e0f6      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b03      	cmp	r3, #3
 8007252:	d107      	bne.n	8007264 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007254:	4b36      	ldr	r3, [pc, #216]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d115      	bne.n	800728c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e0ea      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d107      	bne.n	800727c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800726c:	4b30      	ldr	r3, [pc, #192]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007274:	2b00      	cmp	r3, #0
 8007276:	d109      	bne.n	800728c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e0de      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800727c:	4b2c      	ldr	r3, [pc, #176]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e0d6      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800728c:	4b28      	ldr	r3, [pc, #160]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	f023 0207 	bic.w	r2, r3, #7
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4925      	ldr	r1, [pc, #148]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 800729a:	4313      	orrs	r3, r2
 800729c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729e:	f7fc fc99 	bl	8003bd4 <HAL_GetTick>
 80072a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072a4:	e00a      	b.n	80072bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072a6:	f7fc fc95 	bl	8003bd4 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e0be      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072bc:	4b1c      	ldr	r3, [pc, #112]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d1eb      	bne.n	80072a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d010      	beq.n	80072fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	4b14      	ldr	r3, [pc, #80]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	f003 030f 	and.w	r3, r3, #15
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d208      	bcs.n	80072fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ea:	4b11      	ldr	r3, [pc, #68]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	f023 020f 	bic.w	r2, r3, #15
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	490e      	ldr	r1, [pc, #56]	; (8007330 <HAL_RCC_ClockConfig+0x244>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072fc:	4b0b      	ldr	r3, [pc, #44]	; (800732c <HAL_RCC_ClockConfig+0x240>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 030f 	and.w	r3, r3, #15
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d214      	bcs.n	8007334 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800730a:	4b08      	ldr	r3, [pc, #32]	; (800732c <HAL_RCC_ClockConfig+0x240>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f023 020f 	bic.w	r2, r3, #15
 8007312:	4906      	ldr	r1, [pc, #24]	; (800732c <HAL_RCC_ClockConfig+0x240>)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	4313      	orrs	r3, r2
 8007318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800731a:	4b04      	ldr	r3, [pc, #16]	; (800732c <HAL_RCC_ClockConfig+0x240>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	429a      	cmp	r2, r3
 8007326:	d005      	beq.n	8007334 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e086      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
 800732c:	52002000 	.word	0x52002000
 8007330:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b00      	cmp	r3, #0
 800733e:	d010      	beq.n	8007362 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	4b3f      	ldr	r3, [pc, #252]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800734c:	429a      	cmp	r2, r3
 800734e:	d208      	bcs.n	8007362 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007350:	4b3c      	ldr	r3, [pc, #240]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	4939      	ldr	r1, [pc, #228]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 800735e:	4313      	orrs	r3, r2
 8007360:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0308 	and.w	r3, r3, #8
 800736a:	2b00      	cmp	r3, #0
 800736c:	d010      	beq.n	8007390 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	695a      	ldr	r2, [r3, #20]
 8007372:	4b34      	ldr	r3, [pc, #208]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800737a:	429a      	cmp	r2, r3
 800737c:	d208      	bcs.n	8007390 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800737e:	4b31      	ldr	r3, [pc, #196]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	492e      	ldr	r1, [pc, #184]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 800738c:	4313      	orrs	r3, r2
 800738e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	d010      	beq.n	80073be <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	699a      	ldr	r2, [r3, #24]
 80073a0:	4b28      	ldr	r3, [pc, #160]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d208      	bcs.n	80073be <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073ac:	4b25      	ldr	r3, [pc, #148]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	4922      	ldr	r1, [pc, #136]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d010      	beq.n	80073ec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69da      	ldr	r2, [r3, #28]
 80073ce:	4b1d      	ldr	r3, [pc, #116]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d208      	bcs.n	80073ec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80073da:	4b1a      	ldr	r3, [pc, #104]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	4917      	ldr	r1, [pc, #92]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80073ec:	f000 f834 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 80073f0:	4602      	mov	r2, r0
 80073f2:	4b14      	ldr	r3, [pc, #80]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	0a1b      	lsrs	r3, r3, #8
 80073f8:	f003 030f 	and.w	r3, r3, #15
 80073fc:	4912      	ldr	r1, [pc, #72]	; (8007448 <HAL_RCC_ClockConfig+0x35c>)
 80073fe:	5ccb      	ldrb	r3, [r1, r3]
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	fa22 f303 	lsr.w	r3, r2, r3
 8007408:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800740a:	4b0e      	ldr	r3, [pc, #56]	; (8007444 <HAL_RCC_ClockConfig+0x358>)
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	4a0d      	ldr	r2, [pc, #52]	; (8007448 <HAL_RCC_ClockConfig+0x35c>)
 8007414:	5cd3      	ldrb	r3, [r2, r3]
 8007416:	f003 031f 	and.w	r3, r3, #31
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	fa22 f303 	lsr.w	r3, r2, r3
 8007420:	4a0a      	ldr	r2, [pc, #40]	; (800744c <HAL_RCC_ClockConfig+0x360>)
 8007422:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007424:	4a0a      	ldr	r2, [pc, #40]	; (8007450 <HAL_RCC_ClockConfig+0x364>)
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800742a:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <HAL_RCC_ClockConfig+0x368>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4618      	mov	r0, r3
 8007430:	f7fc fb86 	bl	8003b40 <HAL_InitTick>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400
 8007448:	0800f3a0 	.word	0x0800f3a0
 800744c:	2400002c 	.word	0x2400002c
 8007450:	24000028 	.word	0x24000028
 8007454:	24000030 	.word	0x24000030

08007458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007458:	b480      	push	{r7}
 800745a:	b089      	sub	sp, #36	; 0x24
 800745c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800745e:	4bb3      	ldr	r3, [pc, #716]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007466:	2b18      	cmp	r3, #24
 8007468:	f200 8155 	bhi.w	8007716 <HAL_RCC_GetSysClockFreq+0x2be>
 800746c:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <HAL_RCC_GetSysClockFreq+0x1c>)
 800746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007472:	bf00      	nop
 8007474:	080074d9 	.word	0x080074d9
 8007478:	08007717 	.word	0x08007717
 800747c:	08007717 	.word	0x08007717
 8007480:	08007717 	.word	0x08007717
 8007484:	08007717 	.word	0x08007717
 8007488:	08007717 	.word	0x08007717
 800748c:	08007717 	.word	0x08007717
 8007490:	08007717 	.word	0x08007717
 8007494:	080074ff 	.word	0x080074ff
 8007498:	08007717 	.word	0x08007717
 800749c:	08007717 	.word	0x08007717
 80074a0:	08007717 	.word	0x08007717
 80074a4:	08007717 	.word	0x08007717
 80074a8:	08007717 	.word	0x08007717
 80074ac:	08007717 	.word	0x08007717
 80074b0:	08007717 	.word	0x08007717
 80074b4:	08007505 	.word	0x08007505
 80074b8:	08007717 	.word	0x08007717
 80074bc:	08007717 	.word	0x08007717
 80074c0:	08007717 	.word	0x08007717
 80074c4:	08007717 	.word	0x08007717
 80074c8:	08007717 	.word	0x08007717
 80074cc:	08007717 	.word	0x08007717
 80074d0:	08007717 	.word	0x08007717
 80074d4:	0800750b 	.word	0x0800750b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074d8:	4b94      	ldr	r3, [pc, #592]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d009      	beq.n	80074f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074e4:	4b91      	ldr	r3, [pc, #580]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	08db      	lsrs	r3, r3, #3
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	4a90      	ldr	r2, [pc, #576]	; (8007730 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
 80074f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80074f6:	e111      	b.n	800771c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80074f8:	4b8d      	ldr	r3, [pc, #564]	; (8007730 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074fa:	61bb      	str	r3, [r7, #24]
    break;
 80074fc:	e10e      	b.n	800771c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80074fe:	4b8d      	ldr	r3, [pc, #564]	; (8007734 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007500:	61bb      	str	r3, [r7, #24]
    break;
 8007502:	e10b      	b.n	800771c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007504:	4b8c      	ldr	r3, [pc, #560]	; (8007738 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007506:	61bb      	str	r3, [r7, #24]
    break;
 8007508:	e108      	b.n	800771c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800750a:	4b88      	ldr	r3, [pc, #544]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800750c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007514:	4b85      	ldr	r3, [pc, #532]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007518:	091b      	lsrs	r3, r3, #4
 800751a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800751e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007520:	4b82      	ldr	r3, [pc, #520]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800752a:	4b80      	ldr	r3, [pc, #512]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800752c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752e:	08db      	lsrs	r3, r3, #3
 8007530:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	fb02 f303 	mul.w	r3, r2, r3
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007542:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 80e1 	beq.w	8007710 <HAL_RCC_GetSysClockFreq+0x2b8>
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b02      	cmp	r3, #2
 8007552:	f000 8083 	beq.w	800765c <HAL_RCC_GetSysClockFreq+0x204>
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b02      	cmp	r3, #2
 800755a:	f200 80a1 	bhi.w	80076a0 <HAL_RCC_GetSysClockFreq+0x248>
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <HAL_RCC_GetSysClockFreq+0x114>
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d056      	beq.n	8007618 <HAL_RCC_GetSysClockFreq+0x1c0>
 800756a:	e099      	b.n	80076a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800756c:	4b6f      	ldr	r3, [pc, #444]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d02d      	beq.n	80075d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007578:	4b6c      	ldr	r3, [pc, #432]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	08db      	lsrs	r3, r3, #3
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	4a6b      	ldr	r2, [pc, #428]	; (8007730 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007584:	fa22 f303 	lsr.w	r3, r2, r3
 8007588:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a2:	4b62      	ldr	r3, [pc, #392]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80075b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800773c <HAL_RCC_GetSysClockFreq+0x2e4>
 80075ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80075d2:	e087      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007740 <HAL_RCC_GetSysClockFreq+0x2e8>
 80075e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e6:	4b51      	ldr	r3, [pc, #324]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80075fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800773c <HAL_RCC_GetSysClockFreq+0x2e4>
 80075fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007616:	e065      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007622:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007744 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762a:	4b40      	ldr	r3, [pc, #256]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763a:	ed97 6a02 	vldr	s12, [r7, #8]
 800763e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800773c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800764e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800765a:	e043      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007748 <HAL_RCC_GetSysClockFreq+0x2f0>
 800766a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766e:	4b2f      	ldr	r3, [pc, #188]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007682:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800773c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800769e:	e021      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007744 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b2:	4b1e      	ldr	r3, [pc, #120]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80076c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800773c <HAL_RCC_GetSysClockFreq+0x2e4>
 80076ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80076e4:	4b11      	ldr	r3, [pc, #68]	; (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	0a5b      	lsrs	r3, r3, #9
 80076ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ee:	3301      	adds	r3, #1
 80076f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007708:	ee17 3a90 	vmov	r3, s15
 800770c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800770e:	e005      	b.n	800771c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	61bb      	str	r3, [r7, #24]
    break;
 8007714:	e002      	b.n	800771c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007716:	4b07      	ldr	r3, [pc, #28]	; (8007734 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007718:	61bb      	str	r3, [r7, #24]
    break;
 800771a:	bf00      	nop
  }

  return sysclockfreq;
 800771c:	69bb      	ldr	r3, [r7, #24]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3724      	adds	r7, #36	; 0x24
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	58024400 	.word	0x58024400
 8007730:	03d09000 	.word	0x03d09000
 8007734:	003d0900 	.word	0x003d0900
 8007738:	02dc6c00 	.word	0x02dc6c00
 800773c:	46000000 	.word	0x46000000
 8007740:	4c742400 	.word	0x4c742400
 8007744:	4a742400 	.word	0x4a742400
 8007748:	4c371b00 	.word	0x4c371b00

0800774c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007752:	f7ff fe81 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 8007756:	4602      	mov	r2, r0
 8007758:	4b10      	ldr	r3, [pc, #64]	; (800779c <HAL_RCC_GetHCLKFreq+0x50>)
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	0a1b      	lsrs	r3, r3, #8
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	490f      	ldr	r1, [pc, #60]	; (80077a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007764:	5ccb      	ldrb	r3, [r1, r3]
 8007766:	f003 031f 	and.w	r3, r3, #31
 800776a:	fa22 f303 	lsr.w	r3, r2, r3
 800776e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007770:	4b0a      	ldr	r3, [pc, #40]	; (800779c <HAL_RCC_GetHCLKFreq+0x50>)
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	f003 030f 	and.w	r3, r3, #15
 8007778:	4a09      	ldr	r2, [pc, #36]	; (80077a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800777a:	5cd3      	ldrb	r3, [r2, r3]
 800777c:	f003 031f 	and.w	r3, r3, #31
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	fa22 f303 	lsr.w	r3, r2, r3
 8007786:	4a07      	ldr	r2, [pc, #28]	; (80077a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007788:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800778a:	4a07      	ldr	r2, [pc, #28]	; (80077a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007790:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007792:	681b      	ldr	r3, [r3, #0]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	58024400 	.word	0x58024400
 80077a0:	0800f3a0 	.word	0x0800f3a0
 80077a4:	2400002c 	.word	0x2400002c
 80077a8:	24000028 	.word	0x24000028

080077ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80077b0:	f7ff ffcc 	bl	800774c <HAL_RCC_GetHCLKFreq>
 80077b4:	4602      	mov	r2, r0
 80077b6:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	091b      	lsrs	r3, r3, #4
 80077bc:	f003 0307 	and.w	r3, r3, #7
 80077c0:	4904      	ldr	r1, [pc, #16]	; (80077d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80077c2:	5ccb      	ldrb	r3, [r1, r3]
 80077c4:	f003 031f 	and.w	r3, r3, #31
 80077c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	58024400 	.word	0x58024400
 80077d4:	0800f3a0 	.word	0x0800f3a0

080077d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80077dc:	f7ff ffb6 	bl	800774c <HAL_RCC_GetHCLKFreq>
 80077e0:	4602      	mov	r2, r0
 80077e2:	4b06      	ldr	r3, [pc, #24]	; (80077fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	0a1b      	lsrs	r3, r3, #8
 80077e8:	f003 0307 	and.w	r3, r3, #7
 80077ec:	4904      	ldr	r1, [pc, #16]	; (8007800 <HAL_RCC_GetPCLK2Freq+0x28>)
 80077ee:	5ccb      	ldrb	r3, [r1, r3]
 80077f0:	f003 031f 	and.w	r3, r3, #31
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	58024400 	.word	0x58024400
 8007800:	0800f3a0 	.word	0x0800f3a0

08007804 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800780c:	2300      	movs	r3, #0
 800780e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007810:	2300      	movs	r3, #0
 8007812:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d03f      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007824:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007828:	d02a      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800782a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800782e:	d824      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007834:	d018      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007836:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800783a:	d81e      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007844:	d007      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007846:	e018      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007848:	4bab      	ldr	r3, [pc, #684]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800784a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784c:	4aaa      	ldr	r2, [pc, #680]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800784e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007854:	e015      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	3304      	adds	r3, #4
 800785a:	2102      	movs	r1, #2
 800785c:	4618      	mov	r0, r3
 800785e:	f001 f9cf 	bl	8008c00 <RCCEx_PLL2_Config>
 8007862:	4603      	mov	r3, r0
 8007864:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007866:	e00c      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3324      	adds	r3, #36	; 0x24
 800786c:	2102      	movs	r1, #2
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fa78 	bl	8008d64 <RCCEx_PLL3_Config>
 8007874:	4603      	mov	r3, r0
 8007876:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007878:	e003      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	75fb      	strb	r3, [r7, #23]
      break;
 800787e:	e000      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007888:	4b9b      	ldr	r3, [pc, #620]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800788a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007894:	4998      	ldr	r1, [pc, #608]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007896:	4313      	orrs	r3, r2
 8007898:	650b      	str	r3, [r1, #80]	; 0x50
 800789a:	e001      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d03d      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d826      	bhi.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80078b4:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80078b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ba:	bf00      	nop
 80078bc:	080078d1 	.word	0x080078d1
 80078c0:	080078df 	.word	0x080078df
 80078c4:	080078f1 	.word	0x080078f1
 80078c8:	08007909 	.word	0x08007909
 80078cc:	08007909 	.word	0x08007909
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078d0:	4b89      	ldr	r3, [pc, #548]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d4:	4a88      	ldr	r2, [pc, #544]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078dc:	e015      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	3304      	adds	r3, #4
 80078e2:	2100      	movs	r1, #0
 80078e4:	4618      	mov	r0, r3
 80078e6:	f001 f98b 	bl	8008c00 <RCCEx_PLL2_Config>
 80078ea:	4603      	mov	r3, r0
 80078ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078ee:	e00c      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3324      	adds	r3, #36	; 0x24
 80078f4:	2100      	movs	r1, #0
 80078f6:	4618      	mov	r0, r3
 80078f8:	f001 fa34 	bl	8008d64 <RCCEx_PLL3_Config>
 80078fc:	4603      	mov	r3, r0
 80078fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007900:	e003      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	75fb      	strb	r3, [r7, #23]
      break;
 8007906:	e000      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800790a:	7dfb      	ldrb	r3, [r7, #23]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d109      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007910:	4b79      	ldr	r3, [pc, #484]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007914:	f023 0207 	bic.w	r2, r3, #7
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791c:	4976      	ldr	r1, [pc, #472]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800791e:	4313      	orrs	r3, r2
 8007920:	650b      	str	r3, [r1, #80]	; 0x50
 8007922:	e001      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007924:	7dfb      	ldrb	r3, [r7, #23]
 8007926:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007930:	2b00      	cmp	r3, #0
 8007932:	d042      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800793c:	d02b      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800793e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007942:	d825      	bhi.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007944:	2bc0      	cmp	r3, #192	; 0xc0
 8007946:	d028      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007948:	2bc0      	cmp	r3, #192	; 0xc0
 800794a:	d821      	bhi.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800794c:	2b80      	cmp	r3, #128	; 0x80
 800794e:	d016      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007950:	2b80      	cmp	r3, #128	; 0x80
 8007952:	d81d      	bhi.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007958:	2b40      	cmp	r3, #64	; 0x40
 800795a:	d007      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800795c:	e018      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800795e:	4b66      	ldr	r3, [pc, #408]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	4a65      	ldr	r2, [pc, #404]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007968:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800796a:	e017      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3304      	adds	r3, #4
 8007970:	2100      	movs	r1, #0
 8007972:	4618      	mov	r0, r3
 8007974:	f001 f944 	bl	8008c00 <RCCEx_PLL2_Config>
 8007978:	4603      	mov	r3, r0
 800797a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800797c:	e00e      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3324      	adds	r3, #36	; 0x24
 8007982:	2100      	movs	r1, #0
 8007984:	4618      	mov	r0, r3
 8007986:	f001 f9ed 	bl	8008d64 <RCCEx_PLL3_Config>
 800798a:	4603      	mov	r3, r0
 800798c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800798e:	e005      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	75fb      	strb	r3, [r7, #23]
      break;
 8007994:	e002      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007996:	bf00      	nop
 8007998:	e000      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800799a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800799c:	7dfb      	ldrb	r3, [r7, #23]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d109      	bne.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80079a2:	4b55      	ldr	r3, [pc, #340]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ae:	4952      	ldr	r1, [pc, #328]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	650b      	str	r3, [r1, #80]	; 0x50
 80079b4:	e001      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d049      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80079cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079d0:	d030      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80079d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079d6:	d82a      	bhi.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80079d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079dc:	d02c      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80079de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079e2:	d824      	bhi.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80079e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079e8:	d018      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80079ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ee:	d81e      	bhi.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80079f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079f8:	d007      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80079fa:	e018      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079fc:	4b3e      	ldr	r3, [pc, #248]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	4a3d      	ldr	r2, [pc, #244]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a08:	e017      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	2100      	movs	r1, #0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f001 f8f5 	bl	8008c00 <RCCEx_PLL2_Config>
 8007a16:	4603      	mov	r3, r0
 8007a18:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007a1a:	e00e      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3324      	adds	r3, #36	; 0x24
 8007a20:	2100      	movs	r1, #0
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 f99e 	bl	8008d64 <RCCEx_PLL3_Config>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a2c:	e005      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	75fb      	strb	r3, [r7, #23]
      break;
 8007a32:	e002      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007a34:	bf00      	nop
 8007a36:	e000      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007a40:	4b2d      	ldr	r3, [pc, #180]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a44:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a4e:	492a      	ldr	r1, [pc, #168]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a50:	4313      	orrs	r3, r2
 8007a52:	658b      	str	r3, [r1, #88]	; 0x58
 8007a54:	e001      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d04c      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a70:	d030      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a76:	d82a      	bhi.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007a78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a7c:	d02c      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007a7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a82:	d824      	bhi.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a88:	d018      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007a8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a8e:	d81e      	bhi.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a98:	d007      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007a9a:	e018      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a9c:	4b16      	ldr	r3, [pc, #88]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	4a15      	ldr	r2, [pc, #84]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007aa8:	e017      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3304      	adds	r3, #4
 8007aae:	2100      	movs	r1, #0
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 f8a5 	bl	8008c00 <RCCEx_PLL2_Config>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007aba:	e00e      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3324      	adds	r3, #36	; 0x24
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f001 f94e 	bl	8008d64 <RCCEx_PLL3_Config>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007acc:	e005      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad2:	e002      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007ad4:	bf00      	nop
 8007ad6:	e000      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10d      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007ae0:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007aee:	4902      	ldr	r1, [pc, #8]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	658b      	str	r3, [r1, #88]	; 0x58
 8007af4:	e004      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007af6:	bf00      	nop
 8007af8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d032      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b10:	2b30      	cmp	r3, #48	; 0x30
 8007b12:	d01c      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007b14:	2b30      	cmp	r3, #48	; 0x30
 8007b16:	d817      	bhi.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	d00c      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007b1c:	2b20      	cmp	r3, #32
 8007b1e:	d813      	bhi.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d016      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007b24:	2b10      	cmp	r3, #16
 8007b26:	d10f      	bne.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b28:	4baf      	ldr	r3, [pc, #700]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	4aae      	ldr	r2, [pc, #696]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007b34:	e00e      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	2102      	movs	r1, #2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f001 f85f 	bl	8008c00 <RCCEx_PLL2_Config>
 8007b42:	4603      	mov	r3, r0
 8007b44:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007b46:	e005      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b4c:	e002      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007b4e:	bf00      	nop
 8007b50:	e000      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d109      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b5a:	4ba3      	ldr	r3, [pc, #652]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b66:	49a0      	ldr	r1, [pc, #640]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b6c:	e001      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d047      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b86:	d030      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b8c:	d82a      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007b8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b92:	d02c      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007b94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b98:	d824      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9e:	d018      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba4:	d81e      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bae:	d007      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007bb0:	e018      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bb2:	4b8d      	ldr	r3, [pc, #564]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb6:	4a8c      	ldr	r2, [pc, #560]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007bbe:	e017      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f001 f81a 	bl	8008c00 <RCCEx_PLL2_Config>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007bd0:	e00e      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3324      	adds	r3, #36	; 0x24
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f001 f8c3 	bl	8008d64 <RCCEx_PLL3_Config>
 8007bde:	4603      	mov	r3, r0
 8007be0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007be2:	e005      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	75fb      	strb	r3, [r7, #23]
      break;
 8007be8:	e002      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007bea:	bf00      	nop
 8007bec:	e000      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007bf6:	4b7c      	ldr	r3, [pc, #496]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bfa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c02:	4979      	ldr	r1, [pc, #484]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	650b      	str	r3, [r1, #80]	; 0x50
 8007c08:	e001      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d049      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c22:	d02e      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c28:	d828      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c2e:	d02a      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007c30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c34:	d822      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c3a:	d026      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007c3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c40:	d81c      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c46:	d010      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c4c:	d816      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d01d      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c56:	d111      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 ffce 	bl	8008c00 <RCCEx_PLL2_Config>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007c68:	e012      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3324      	adds	r3, #36	; 0x24
 8007c6e:	2101      	movs	r1, #1
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 f877 	bl	8008d64 <RCCEx_PLL3_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007c7a:	e009      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c80:	e006      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007c82:	bf00      	nop
 8007c84:	e004      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007c86:	bf00      	nop
 8007c88:	e002      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007c8a:	bf00      	nop
 8007c8c:	e000      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d109      	bne.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007c96:	4b54      	ldr	r3, [pc, #336]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c9a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca2:	4951      	ldr	r1, [pc, #324]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	650b      	str	r3, [r1, #80]	; 0x50
 8007ca8:	e001      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d04b      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cc4:	d02e      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cca:	d828      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd0:	d02a      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd6:	d822      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007cd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cdc:	d026      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007cde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ce2:	d81c      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ce8:	d010      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cee:	d816      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01d      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007cf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cf8:	d111      	bne.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 ff7d 	bl	8008c00 <RCCEx_PLL2_Config>
 8007d06:	4603      	mov	r3, r0
 8007d08:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007d0a:	e012      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3324      	adds	r3, #36	; 0x24
 8007d10:	2101      	movs	r1, #1
 8007d12:	4618      	mov	r0, r3
 8007d14:	f001 f826 	bl	8008d64 <RCCEx_PLL3_Config>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007d1c:	e009      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	75fb      	strb	r3, [r7, #23]
      break;
 8007d22:	e006      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007d24:	bf00      	nop
 8007d26:	e004      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007d28:	bf00      	nop
 8007d2a:	e002      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007d2c:	bf00      	nop
 8007d2e:	e000      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10a      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007d38:	4b2b      	ldr	r3, [pc, #172]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d46:	4928      	ldr	r1, [pc, #160]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	658b      	str	r3, [r1, #88]	; 0x58
 8007d4c:	e001      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d02f      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d66:	d00e      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d6c:	d814      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d015      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d76:	d10f      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d78:	4b1b      	ldr	r3, [pc, #108]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	4a1a      	ldr	r2, [pc, #104]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007d84:	e00c      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 ff37 	bl	8008c00 <RCCEx_PLL2_Config>
 8007d92:	4603      	mov	r3, r0
 8007d94:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007d96:	e003      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d9c:	e000      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d109      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007da6:	4b10      	ldr	r3, [pc, #64]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007daa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db2:	490d      	ldr	r1, [pc, #52]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	650b      	str	r3, [r1, #80]	; 0x50
 8007db8:	e001      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d033      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d81c      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007dd2:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007e13 	.word	0x08007e13
 8007ddc:	08007ded 	.word	0x08007ded
 8007de0:	08007dfb 	.word	0x08007dfb
 8007de4:	08007e13 	.word	0x08007e13
 8007de8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dec:	4bb8      	ldr	r3, [pc, #736]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	4ab7      	ldr	r2, [pc, #732]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007df6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007df8:	e00c      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	2102      	movs	r1, #2
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 fefd 	bl	8008c00 <RCCEx_PLL2_Config>
 8007e06:	4603      	mov	r3, r0
 8007e08:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007e0a:	e003      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e10:	e000      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d109      	bne.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007e1a:	4bad      	ldr	r3, [pc, #692]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1e:	f023 0203 	bic.w	r2, r3, #3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e26:	49aa      	ldr	r1, [pc, #680]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e2c:	e001      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
 8007e30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 8086 	beq.w	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e40:	4ba4      	ldr	r3, [pc, #656]	; (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4aa3      	ldr	r2, [pc, #652]	; (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e4c:	f7fb fec2 	bl	8003bd4 <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e52:	e009      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e54:	f7fb febe 	bl	8003bd4 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b64      	cmp	r3, #100	; 0x64
 8007e60:	d902      	bls.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	75fb      	strb	r3, [r7, #23]
        break;
 8007e66:	e005      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e68:	4b9a      	ldr	r3, [pc, #616]	; (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d0ef      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d166      	bne.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007e7a:	4b95      	ldr	r3, [pc, #596]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e84:	4053      	eors	r3, r2
 8007e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d013      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e8e:	4b90      	ldr	r3, [pc, #576]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e96:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e98:	4b8d      	ldr	r3, [pc, #564]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9c:	4a8c      	ldr	r2, [pc, #560]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ea2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ea4:	4b8a      	ldr	r3, [pc, #552]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea8:	4a89      	ldr	r2, [pc, #548]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007eb0:	4a87      	ldr	r2, [pc, #540]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec0:	d115      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec2:	f7fb fe87 	bl	8003bd4 <HAL_GetTick>
 8007ec6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ec8:	e00b      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eca:	f7fb fe83 	bl	8003bd4 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d902      	bls.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	75fb      	strb	r3, [r7, #23]
            break;
 8007ee0:	e005      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ee2:	4b7b      	ldr	r3, [pc, #492]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0ed      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d126      	bne.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f02:	d10d      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007f04:	4b72      	ldr	r3, [pc, #456]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f12:	0919      	lsrs	r1, r3, #4
 8007f14:	4b70      	ldr	r3, [pc, #448]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007f16:	400b      	ands	r3, r1
 8007f18:	496d      	ldr	r1, [pc, #436]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	610b      	str	r3, [r1, #16]
 8007f1e:	e005      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007f20:	4b6b      	ldr	r3, [pc, #428]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	4a6a      	ldr	r2, [pc, #424]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f2a:	6113      	str	r3, [r2, #16]
 8007f2c:	4b68      	ldr	r3, [pc, #416]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f3a:	4965      	ldr	r1, [pc, #404]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	670b      	str	r3, [r1, #112]	; 0x70
 8007f40:	e004      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	75bb      	strb	r3, [r7, #22]
 8007f46:	e001      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d07e      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f5c:	2b28      	cmp	r3, #40	; 0x28
 8007f5e:	d867      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007f60:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f66:	bf00      	nop
 8007f68:	08008037 	.word	0x08008037
 8007f6c:	08008031 	.word	0x08008031
 8007f70:	08008031 	.word	0x08008031
 8007f74:	08008031 	.word	0x08008031
 8007f78:	08008031 	.word	0x08008031
 8007f7c:	08008031 	.word	0x08008031
 8007f80:	08008031 	.word	0x08008031
 8007f84:	08008031 	.word	0x08008031
 8007f88:	0800800d 	.word	0x0800800d
 8007f8c:	08008031 	.word	0x08008031
 8007f90:	08008031 	.word	0x08008031
 8007f94:	08008031 	.word	0x08008031
 8007f98:	08008031 	.word	0x08008031
 8007f9c:	08008031 	.word	0x08008031
 8007fa0:	08008031 	.word	0x08008031
 8007fa4:	08008031 	.word	0x08008031
 8007fa8:	0800801f 	.word	0x0800801f
 8007fac:	08008031 	.word	0x08008031
 8007fb0:	08008031 	.word	0x08008031
 8007fb4:	08008031 	.word	0x08008031
 8007fb8:	08008031 	.word	0x08008031
 8007fbc:	08008031 	.word	0x08008031
 8007fc0:	08008031 	.word	0x08008031
 8007fc4:	08008031 	.word	0x08008031
 8007fc8:	08008037 	.word	0x08008037
 8007fcc:	08008031 	.word	0x08008031
 8007fd0:	08008031 	.word	0x08008031
 8007fd4:	08008031 	.word	0x08008031
 8007fd8:	08008031 	.word	0x08008031
 8007fdc:	08008031 	.word	0x08008031
 8007fe0:	08008031 	.word	0x08008031
 8007fe4:	08008031 	.word	0x08008031
 8007fe8:	08008037 	.word	0x08008037
 8007fec:	08008031 	.word	0x08008031
 8007ff0:	08008031 	.word	0x08008031
 8007ff4:	08008031 	.word	0x08008031
 8007ff8:	08008031 	.word	0x08008031
 8007ffc:	08008031 	.word	0x08008031
 8008000:	08008031 	.word	0x08008031
 8008004:	08008031 	.word	0x08008031
 8008008:	08008037 	.word	0x08008037
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3304      	adds	r3, #4
 8008010:	2101      	movs	r1, #1
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fdf4 	bl	8008c00 <RCCEx_PLL2_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800801c:	e00c      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3324      	adds	r3, #36	; 0x24
 8008022:	2101      	movs	r1, #1
 8008024:	4618      	mov	r0, r3
 8008026:	f000 fe9d 	bl	8008d64 <RCCEx_PLL3_Config>
 800802a:	4603      	mov	r3, r0
 800802c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800802e:	e003      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
      break;
 8008034:	e000      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008038:	7dfb      	ldrb	r3, [r7, #23]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d109      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800803e:	4b24      	ldr	r3, [pc, #144]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008042:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800804a:	4921      	ldr	r1, [pc, #132]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800804c:	4313      	orrs	r3, r2
 800804e:	654b      	str	r3, [r1, #84]	; 0x54
 8008050:	e001      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008052:	7dfb      	ldrb	r3, [r7, #23]
 8008054:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d03e      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008066:	2b05      	cmp	r3, #5
 8008068:	d820      	bhi.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800806a:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800806c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008070:	080080b3 	.word	0x080080b3
 8008074:	08008089 	.word	0x08008089
 8008078:	0800809b 	.word	0x0800809b
 800807c:	080080b3 	.word	0x080080b3
 8008080:	080080b3 	.word	0x080080b3
 8008084:	080080b3 	.word	0x080080b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3304      	adds	r3, #4
 800808c:	2101      	movs	r1, #1
 800808e:	4618      	mov	r0, r3
 8008090:	f000 fdb6 	bl	8008c00 <RCCEx_PLL2_Config>
 8008094:	4603      	mov	r3, r0
 8008096:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008098:	e00c      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	3324      	adds	r3, #36	; 0x24
 800809e:	2101      	movs	r1, #1
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fe5f 	bl	8008d64 <RCCEx_PLL3_Config>
 80080a6:	4603      	mov	r3, r0
 80080a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80080aa:	e003      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	75fb      	strb	r3, [r7, #23]
      break;
 80080b0:	e000      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80080b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d110      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80080ba:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080be:	f023 0207 	bic.w	r2, r3, #7
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080c6:	4902      	ldr	r1, [pc, #8]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	654b      	str	r3, [r1, #84]	; 0x54
 80080cc:	e008      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80080ce:	bf00      	nop
 80080d0:	58024400 	.word	0x58024400
 80080d4:	58024800 	.word	0x58024800
 80080d8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080dc:	7dfb      	ldrb	r3, [r7, #23]
 80080de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d039      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f2:	2b05      	cmp	r3, #5
 80080f4:	d820      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80080f6:	a201      	add	r2, pc, #4	; (adr r2, 80080fc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80080f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fc:	0800813f 	.word	0x0800813f
 8008100:	08008115 	.word	0x08008115
 8008104:	08008127 	.word	0x08008127
 8008108:	0800813f 	.word	0x0800813f
 800810c:	0800813f 	.word	0x0800813f
 8008110:	0800813f 	.word	0x0800813f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3304      	adds	r3, #4
 8008118:	2101      	movs	r1, #1
 800811a:	4618      	mov	r0, r3
 800811c:	f000 fd70 	bl	8008c00 <RCCEx_PLL2_Config>
 8008120:	4603      	mov	r3, r0
 8008122:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008124:	e00c      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3324      	adds	r3, #36	; 0x24
 800812a:	2101      	movs	r1, #1
 800812c:	4618      	mov	r0, r3
 800812e:	f000 fe19 	bl	8008d64 <RCCEx_PLL3_Config>
 8008132:	4603      	mov	r3, r0
 8008134:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008136:	e003      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	75fb      	strb	r3, [r7, #23]
      break;
 800813c:	e000      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800813e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008140:	7dfb      	ldrb	r3, [r7, #23]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10a      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008146:	4bb7      	ldr	r3, [pc, #732]	; (8008424 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814a:	f023 0207 	bic.w	r2, r3, #7
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008154:	49b3      	ldr	r1, [pc, #716]	; (8008424 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008156:	4313      	orrs	r3, r2
 8008158:	658b      	str	r3, [r1, #88]	; 0x58
 800815a:	e001      	b.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815c:	7dfb      	ldrb	r3, [r7, #23]
 800815e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0320 	and.w	r3, r3, #32
 8008168:	2b00      	cmp	r3, #0
 800816a:	d04b      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008176:	d02e      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800817c:	d828      	bhi.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800817e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008182:	d02a      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008188:	d822      	bhi.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800818a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800818e:	d026      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008190:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008194:	d81c      	bhi.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800819a:	d010      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800819c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081a0:	d816      	bhi.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d01d      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80081a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081aa:	d111      	bne.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3304      	adds	r3, #4
 80081b0:	2100      	movs	r1, #0
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 fd24 	bl	8008c00 <RCCEx_PLL2_Config>
 80081b8:	4603      	mov	r3, r0
 80081ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80081bc:	e012      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3324      	adds	r3, #36	; 0x24
 80081c2:	2102      	movs	r1, #2
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fdcd 	bl	8008d64 <RCCEx_PLL3_Config>
 80081ca:	4603      	mov	r3, r0
 80081cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80081ce:	e009      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	75fb      	strb	r3, [r7, #23]
      break;
 80081d4:	e006      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80081d6:	bf00      	nop
 80081d8:	e004      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80081da:	bf00      	nop
 80081dc:	e002      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80081de:	bf00      	nop
 80081e0:	e000      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80081e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081ea:	4b8e      	ldr	r3, [pc, #568]	; (8008424 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f8:	498a      	ldr	r1, [pc, #552]	; (8008424 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	654b      	str	r3, [r1, #84]	; 0x54
 80081fe:	e001      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008200:	7dfb      	ldrb	r3, [r7, #23]
 8008202:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820c:	2b00      	cmp	r3, #0
 800820e:	d04b      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008216:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800821a:	d02e      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800821c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008220:	d828      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008226:	d02a      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800822c:	d822      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800822e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008232:	d026      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008234:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008238:	d81c      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800823a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800823e:	d010      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008244:	d816      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008246:	2b00      	cmp	r3, #0
 8008248:	d01d      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800824a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800824e:	d111      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	3304      	adds	r3, #4
 8008254:	2100      	movs	r1, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fcd2 	bl	8008c00 <RCCEx_PLL2_Config>
 800825c:	4603      	mov	r3, r0
 800825e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008260:	e012      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3324      	adds	r3, #36	; 0x24
 8008266:	2102      	movs	r1, #2
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fd7b 	bl	8008d64 <RCCEx_PLL3_Config>
 800826e:	4603      	mov	r3, r0
 8008270:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008272:	e009      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	75fb      	strb	r3, [r7, #23]
      break;
 8008278:	e006      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800827a:	bf00      	nop
 800827c:	e004      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800827e:	bf00      	nop
 8008280:	e002      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008282:	bf00      	nop
 8008284:	e000      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10a      	bne.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800828e:	4b65      	ldr	r3, [pc, #404]	; (8008424 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008292:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800829c:	4961      	ldr	r1, [pc, #388]	; (8008424 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	658b      	str	r3, [r1, #88]	; 0x58
 80082a2:	e001      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d04b      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80082be:	d02e      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80082c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80082c4:	d828      	bhi.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80082c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ca:	d02a      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80082cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082d0:	d822      	bhi.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80082d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80082d6:	d026      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80082d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80082dc:	d81c      	bhi.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80082de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082e2:	d010      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80082e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082e8:	d816      	bhi.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d01d      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80082ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082f2:	d111      	bne.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3304      	adds	r3, #4
 80082f8:	2100      	movs	r1, #0
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fc80 	bl	8008c00 <RCCEx_PLL2_Config>
 8008300:	4603      	mov	r3, r0
 8008302:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008304:	e012      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3324      	adds	r3, #36	; 0x24
 800830a:	2102      	movs	r1, #2
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fd29 	bl	8008d64 <RCCEx_PLL3_Config>
 8008312:	4603      	mov	r3, r0
 8008314:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008316:	e009      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	75fb      	strb	r3, [r7, #23]
      break;
 800831c:	e006      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800831e:	bf00      	nop
 8008320:	e004      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008322:	bf00      	nop
 8008324:	e002      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008326:	bf00      	nop
 8008328:	e000      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800832a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800832c:	7dfb      	ldrb	r3, [r7, #23]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10a      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008332:	4b3c      	ldr	r3, [pc, #240]	; (8008424 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008340:	4938      	ldr	r1, [pc, #224]	; (8008424 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008342:	4313      	orrs	r3, r2
 8008344:	658b      	str	r3, [r1, #88]	; 0x58
 8008346:	e001      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008348:	7dfb      	ldrb	r3, [r7, #23]
 800834a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0308 	and.w	r3, r3, #8
 8008354:	2b00      	cmp	r3, #0
 8008356:	d01a      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800835e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008362:	d10a      	bne.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3324      	adds	r3, #36	; 0x24
 8008368:	2102      	movs	r1, #2
 800836a:	4618      	mov	r0, r3
 800836c:	f000 fcfa 	bl	8008d64 <RCCEx_PLL3_Config>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800837a:	4b2a      	ldr	r3, [pc, #168]	; (8008424 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800837c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008388:	4926      	ldr	r1, [pc, #152]	; (8008424 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800838a:	4313      	orrs	r3, r2
 800838c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0310 	and.w	r3, r3, #16
 8008396:	2b00      	cmp	r3, #0
 8008398:	d01a      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a4:	d10a      	bne.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3324      	adds	r3, #36	; 0x24
 80083aa:	2102      	movs	r1, #2
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 fcd9 	bl	8008d64 <RCCEx_PLL3_Config>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083bc:	4b19      	ldr	r3, [pc, #100]	; (8008424 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083ca:	4916      	ldr	r1, [pc, #88]	; (8008424 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d036      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80083e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083e6:	d01f      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80083e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083ec:	d817      	bhi.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80083f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083f6:	d009      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80083f8:	e011      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3304      	adds	r3, #4
 80083fe:	2100      	movs	r1, #0
 8008400:	4618      	mov	r0, r3
 8008402:	f000 fbfd 	bl	8008c00 <RCCEx_PLL2_Config>
 8008406:	4603      	mov	r3, r0
 8008408:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800840a:	e00e      	b.n	800842a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3324      	adds	r3, #36	; 0x24
 8008410:	2102      	movs	r1, #2
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fca6 	bl	8008d64 <RCCEx_PLL3_Config>
 8008418:	4603      	mov	r3, r0
 800841a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800841c:	e005      	b.n	800842a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	75fb      	strb	r3, [r7, #23]
      break;
 8008422:	e002      	b.n	800842a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008424:	58024400 	.word	0x58024400
      break;
 8008428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10a      	bne.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008430:	4b93      	ldr	r3, [pc, #588]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800843e:	4990      	ldr	r1, [pc, #576]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008440:	4313      	orrs	r3, r2
 8008442:	658b      	str	r3, [r1, #88]	; 0x58
 8008444:	e001      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d033      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800845c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008460:	d01c      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008462:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008466:	d816      	bhi.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800846c:	d003      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800846e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008472:	d007      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008474:	e00f      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008476:	4b82      	ldr	r3, [pc, #520]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847a:	4a81      	ldr	r2, [pc, #516]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800847c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008480:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008482:	e00c      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3324      	adds	r3, #36	; 0x24
 8008488:	2101      	movs	r1, #1
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fc6a 	bl	8008d64 <RCCEx_PLL3_Config>
 8008490:	4603      	mov	r3, r0
 8008492:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008494:	e003      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	75fb      	strb	r3, [r7, #23]
      break;
 800849a:	e000      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800849c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800849e:	7dfb      	ldrb	r3, [r7, #23]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084a4:	4b76      	ldr	r3, [pc, #472]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b2:	4973      	ldr	r1, [pc, #460]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	654b      	str	r3, [r1, #84]	; 0x54
 80084b8:	e001      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d029      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80084d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084d6:	d007      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80084d8:	e00f      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084da:	4b69      	ldr	r3, [pc, #420]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084de:	4a68      	ldr	r2, [pc, #416]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80084e6:	e00b      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	3304      	adds	r3, #4
 80084ec:	2102      	movs	r1, #2
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fb86 	bl	8008c00 <RCCEx_PLL2_Config>
 80084f4:	4603      	mov	r3, r0
 80084f6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80084f8:	e002      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	75fb      	strb	r3, [r7, #23]
      break;
 80084fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d109      	bne.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008506:	4b5e      	ldr	r3, [pc, #376]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008512:	495b      	ldr	r1, [pc, #364]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008514:	4313      	orrs	r3, r2
 8008516:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008518:	e001      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00a      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	3324      	adds	r3, #36	; 0x24
 800852e:	2102      	movs	r1, #2
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fc17 	bl	8008d64 <RCCEx_PLL3_Config>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d030      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008554:	d017      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800855a:	d811      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800855c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008560:	d013      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008566:	d80b      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008568:	2b00      	cmp	r3, #0
 800856a:	d010      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800856c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008570:	d106      	bne.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008572:	4b43      	ldr	r3, [pc, #268]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008576:	4a42      	ldr	r2, [pc, #264]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800857c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800857e:	e007      	b.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	75fb      	strb	r3, [r7, #23]
      break;
 8008584:	e004      	b.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008586:	bf00      	nop
 8008588:	e002      	b.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800858a:	bf00      	nop
 800858c:	e000      	b.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800858e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008590:	7dfb      	ldrb	r3, [r7, #23]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d109      	bne.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008596:	4b3a      	ldr	r3, [pc, #232]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800859a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085a2:	4937      	ldr	r1, [pc, #220]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	654b      	str	r3, [r1, #84]	; 0x54
 80085a8:	e001      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d008      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085ba:	4b31      	ldr	r3, [pc, #196]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c6:	492e      	ldr	r1, [pc, #184]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d009      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80085d8:	4b29      	ldr	r3, [pc, #164]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085e6:	4926      	ldr	r1, [pc, #152]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d008      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80085f8:	4b21      	ldr	r3, [pc, #132]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008604:	491e      	ldr	r1, [pc, #120]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008606:	4313      	orrs	r3, r2
 8008608:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00d      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008616:	4b1a      	ldr	r3, [pc, #104]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	4a19      	ldr	r2, [pc, #100]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800861c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008620:	6113      	str	r3, [r2, #16]
 8008622:	4b17      	ldr	r3, [pc, #92]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008624:	691a      	ldr	r2, [r3, #16]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800862c:	4914      	ldr	r1, [pc, #80]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800862e:	4313      	orrs	r3, r2
 8008630:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	da08      	bge.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800863a:	4b11      	ldr	r3, [pc, #68]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800863c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800863e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008646:	490e      	ldr	r1, [pc, #56]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008648:	4313      	orrs	r3, r2
 800864a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d009      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008658:	4b09      	ldr	r3, [pc, #36]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800865a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008666:	4906      	ldr	r1, [pc, #24]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008668:	4313      	orrs	r3, r2
 800866a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800866c:	7dbb      	ldrb	r3, [r7, #22]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	e000      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	58024400 	.word	0x58024400

08008684 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008688:	f7ff f860 	bl	800774c <HAL_RCC_GetHCLKFreq>
 800868c:	4602      	mov	r2, r0
 800868e:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	091b      	lsrs	r3, r3, #4
 8008694:	f003 0307 	and.w	r3, r3, #7
 8008698:	4904      	ldr	r1, [pc, #16]	; (80086ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800869a:	5ccb      	ldrb	r3, [r1, r3]
 800869c:	f003 031f 	and.w	r3, r3, #31
 80086a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	58024400 	.word	0x58024400
 80086ac:	0800f3a0 	.word	0x0800f3a0

080086b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b089      	sub	sp, #36	; 0x24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086b8:	4ba1      	ldr	r3, [pc, #644]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	f003 0303 	and.w	r3, r3, #3
 80086c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80086c2:	4b9f      	ldr	r3, [pc, #636]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c6:	0b1b      	lsrs	r3, r3, #12
 80086c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80086ce:	4b9c      	ldr	r3, [pc, #624]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	091b      	lsrs	r3, r3, #4
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80086da:	4b99      	ldr	r3, [pc, #612]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086de:	08db      	lsrs	r3, r3, #3
 80086e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	fb02 f303 	mul.w	r3, r2, r3
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8111 	beq.w	8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	2b02      	cmp	r3, #2
 8008702:	f000 8083 	beq.w	800880c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	2b02      	cmp	r3, #2
 800870a:	f200 80a1 	bhi.w	8008850 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d003      	beq.n	800871c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d056      	beq.n	80087c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800871a:	e099      	b.n	8008850 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800871c:	4b88      	ldr	r3, [pc, #544]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	d02d      	beq.n	8008784 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008728:	4b85      	ldr	r3, [pc, #532]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	08db      	lsrs	r3, r3, #3
 800872e:	f003 0303 	and.w	r3, r3, #3
 8008732:	4a84      	ldr	r2, [pc, #528]	; (8008944 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008734:	fa22 f303 	lsr.w	r3, r2, r3
 8008738:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	ee07 3a90 	vmov	s15, r3
 8008740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008752:	4b7b      	ldr	r3, [pc, #492]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800875a:	ee07 3a90 	vmov	s15, r3
 800875e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008762:	ed97 6a03 	vldr	s12, [r7, #12]
 8008766:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800876a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800876e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800877a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800877e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008782:	e087      	b.n	8008894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	ee07 3a90 	vmov	s15, r3
 800878a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800894c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008796:	4b6a      	ldr	r3, [pc, #424]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879e:	ee07 3a90 	vmov	s15, r3
 80087a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087c6:	e065      	b.n	8008894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	ee07 3a90 	vmov	s15, r3
 80087ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087da:	4b59      	ldr	r3, [pc, #356]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800880a:	e043      	b.n	8008894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008816:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008954 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800881a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881e:	4b48      	ldr	r3, [pc, #288]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008826:	ee07 3a90 	vmov	s15, r3
 800882a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008832:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800884e:	e021      	b.n	8008894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800885e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008862:	4b37      	ldr	r3, [pc, #220]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800886a:	ee07 3a90 	vmov	s15, r3
 800886e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008872:	ed97 6a03 	vldr	s12, [r7, #12]
 8008876:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800887a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800888a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008892:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008894:	4b2a      	ldr	r3, [pc, #168]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008898:	0a5b      	lsrs	r3, r3, #9
 800889a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800889e:	ee07 3a90 	vmov	s15, r3
 80088a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80088b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088ba:	ee17 2a90 	vmov	r2, s15
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80088c2:	4b1f      	ldr	r3, [pc, #124]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c6:	0c1b      	lsrs	r3, r3, #16
 80088c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088cc:	ee07 3a90 	vmov	s15, r3
 80088d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80088e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088e8:	ee17 2a90 	vmov	r2, s15
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80088f0:	4b13      	ldr	r3, [pc, #76]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f4:	0e1b      	lsrs	r3, r3, #24
 80088f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800890a:	edd7 6a07 	vldr	s13, [r7, #28]
 800890e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008916:	ee17 2a90 	vmov	r2, s15
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800891e:	e008      	b.n	8008932 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	609a      	str	r2, [r3, #8]
}
 8008932:	bf00      	nop
 8008934:	3724      	adds	r7, #36	; 0x24
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	58024400 	.word	0x58024400
 8008944:	03d09000 	.word	0x03d09000
 8008948:	46000000 	.word	0x46000000
 800894c:	4c742400 	.word	0x4c742400
 8008950:	4a742400 	.word	0x4a742400
 8008954:	4c371b00 	.word	0x4c371b00

08008958 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008958:	b480      	push	{r7}
 800895a:	b089      	sub	sp, #36	; 0x24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008960:	4ba1      	ldr	r3, [pc, #644]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	f003 0303 	and.w	r3, r3, #3
 8008968:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800896a:	4b9f      	ldr	r3, [pc, #636]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800896c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896e:	0d1b      	lsrs	r3, r3, #20
 8008970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008974:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008976:	4b9c      	ldr	r3, [pc, #624]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897a:	0a1b      	lsrs	r3, r3, #8
 800897c:	f003 0301 	and.w	r3, r3, #1
 8008980:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008982:	4b99      	ldr	r3, [pc, #612]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008986:	08db      	lsrs	r3, r3, #3
 8008988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	fb02 f303 	mul.w	r3, r2, r3
 8008992:	ee07 3a90 	vmov	s15, r3
 8008996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 8111 	beq.w	8008bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	f000 8083 	beq.w	8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	f200 80a1 	bhi.w	8008af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d056      	beq.n	8008a70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80089c2:	e099      	b.n	8008af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089c4:	4b88      	ldr	r3, [pc, #544]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0320 	and.w	r3, r3, #32
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d02d      	beq.n	8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089d0:	4b85      	ldr	r3, [pc, #532]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	08db      	lsrs	r3, r3, #3
 80089d6:	f003 0303 	and.w	r3, r3, #3
 80089da:	4a84      	ldr	r2, [pc, #528]	; (8008bec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80089dc:	fa22 f303 	lsr.w	r3, r2, r3
 80089e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	ee07 3a90 	vmov	s15, r3
 80089e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fa:	4b7b      	ldr	r3, [pc, #492]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a02:	ee07 3a90 	vmov	s15, r3
 8008a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008a2a:	e087      	b.n	8008b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	ee07 3a90 	vmov	s15, r3
 8008a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a3e:	4b6a      	ldr	r3, [pc, #424]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a6e:	e065      	b.n	8008b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	ee07 3a90 	vmov	s15, r3
 8008a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a82:	4b59      	ldr	r3, [pc, #356]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ab2:	e043      	b.n	8008b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac6:	4b48      	ldr	r3, [pc, #288]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ada:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008af6:	e021      	b.n	8008b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0a:	4b37      	ldr	r3, [pc, #220]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008b3c:	4b2a      	ldr	r3, [pc, #168]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b40:	0a5b      	lsrs	r3, r3, #9
 8008b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b46:	ee07 3a90 	vmov	s15, r3
 8008b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b56:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b62:	ee17 2a90 	vmov	r2, s15
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008b6a:	4b1f      	ldr	r3, [pc, #124]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6e:	0c1b      	lsrs	r3, r3, #16
 8008b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b74:	ee07 3a90 	vmov	s15, r3
 8008b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b84:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b90:	ee17 2a90 	vmov	r2, s15
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008b98:	4b13      	ldr	r3, [pc, #76]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9c:	0e1b      	lsrs	r3, r3, #24
 8008b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bbe:	ee17 2a90 	vmov	r2, s15
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008bc6:	e008      	b.n	8008bda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	609a      	str	r2, [r3, #8]
}
 8008bda:	bf00      	nop
 8008bdc:	3724      	adds	r7, #36	; 0x24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	58024400 	.word	0x58024400
 8008bec:	03d09000 	.word	0x03d09000
 8008bf0:	46000000 	.word	0x46000000
 8008bf4:	4c742400 	.word	0x4c742400
 8008bf8:	4a742400 	.word	0x4a742400
 8008bfc:	4c371b00 	.word	0x4c371b00

08008c00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c0e:	4b53      	ldr	r3, [pc, #332]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c12:	f003 0303 	and.w	r3, r3, #3
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d101      	bne.n	8008c1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e099      	b.n	8008d52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c1e:	4b4f      	ldr	r3, [pc, #316]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a4e      	ldr	r2, [pc, #312]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008c24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c2a:	f7fa ffd3 	bl	8003bd4 <HAL_GetTick>
 8008c2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c30:	e008      	b.n	8008c44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c32:	f7fa ffcf 	bl	8003bd4 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d901      	bls.n	8008c44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e086      	b.n	8008d52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c44:	4b45      	ldr	r3, [pc, #276]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1f0      	bne.n	8008c32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c50:	4b42      	ldr	r3, [pc, #264]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	031b      	lsls	r3, r3, #12
 8008c5e:	493f      	ldr	r1, [pc, #252]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	628b      	str	r3, [r1, #40]	; 0x28
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	025b      	lsls	r3, r3, #9
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	431a      	orrs	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	041b      	lsls	r3, r3, #16
 8008c82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c86:	431a      	orrs	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	061b      	lsls	r3, r3, #24
 8008c90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c94:	4931      	ldr	r1, [pc, #196]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c9a:	4b30      	ldr	r3, [pc, #192]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	492d      	ldr	r1, [pc, #180]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008cac:	4b2b      	ldr	r3, [pc, #172]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	f023 0220 	bic.w	r2, r3, #32
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	4928      	ldr	r1, [pc, #160]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008cbe:	4b27      	ldr	r3, [pc, #156]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc2:	4a26      	ldr	r2, [pc, #152]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008cc4:	f023 0310 	bic.w	r3, r3, #16
 8008cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008cca:	4b24      	ldr	r3, [pc, #144]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cce:	4b24      	ldr	r3, [pc, #144]	; (8008d60 <RCCEx_PLL2_Config+0x160>)
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	69d2      	ldr	r2, [r2, #28]
 8008cd6:	00d2      	lsls	r2, r2, #3
 8008cd8:	4920      	ldr	r1, [pc, #128]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008cde:	4b1f      	ldr	r3, [pc, #124]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce2:	4a1e      	ldr	r2, [pc, #120]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008ce4:	f043 0310 	orr.w	r3, r3, #16
 8008ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d106      	bne.n	8008cfe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008cf0:	4b1a      	ldr	r3, [pc, #104]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	4a19      	ldr	r2, [pc, #100]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008cf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cfc:	e00f      	b.n	8008d1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d106      	bne.n	8008d12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d04:	4b15      	ldr	r3, [pc, #84]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	4a14      	ldr	r2, [pc, #80]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d10:	e005      	b.n	8008d1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d12:	4b12      	ldr	r3, [pc, #72]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	4a11      	ldr	r2, [pc, #68]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008d18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d1e:	4b0f      	ldr	r3, [pc, #60]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a0e      	ldr	r2, [pc, #56]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008d24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d2a:	f7fa ff53 	bl	8003bd4 <HAL_GetTick>
 8008d2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d30:	e008      	b.n	8008d44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d32:	f7fa ff4f 	bl	8003bd4 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d901      	bls.n	8008d44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e006      	b.n	8008d52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d44:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <RCCEx_PLL2_Config+0x15c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d0f0      	beq.n	8008d32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	58024400 	.word	0x58024400
 8008d60:	ffff0007 	.word	0xffff0007

08008d64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d72:	4b53      	ldr	r3, [pc, #332]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	f003 0303 	and.w	r3, r3, #3
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d101      	bne.n	8008d82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e099      	b.n	8008eb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008d82:	4b4f      	ldr	r3, [pc, #316]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a4e      	ldr	r2, [pc, #312]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d8e:	f7fa ff21 	bl	8003bd4 <HAL_GetTick>
 8008d92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d94:	e008      	b.n	8008da8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d96:	f7fa ff1d 	bl	8003bd4 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d901      	bls.n	8008da8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e086      	b.n	8008eb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008da8:	4b45      	ldr	r3, [pc, #276]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1f0      	bne.n	8008d96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008db4:	4b42      	ldr	r3, [pc, #264]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	051b      	lsls	r3, r3, #20
 8008dc2:	493f      	ldr	r1, [pc, #252]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	628b      	str	r3, [r1, #40]	; 0x28
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	025b      	lsls	r3, r3, #9
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	431a      	orrs	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	041b      	lsls	r3, r3, #16
 8008de6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008dea:	431a      	orrs	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	061b      	lsls	r3, r3, #24
 8008df4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008df8:	4931      	ldr	r1, [pc, #196]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008dfe:	4b30      	ldr	r3, [pc, #192]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	492d      	ldr	r1, [pc, #180]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e10:	4b2b      	ldr	r3, [pc, #172]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	4928      	ldr	r1, [pc, #160]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e22:	4b27      	ldr	r3, [pc, #156]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e26:	4a26      	ldr	r2, [pc, #152]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e2e:	4b24      	ldr	r3, [pc, #144]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e32:	4b24      	ldr	r3, [pc, #144]	; (8008ec4 <RCCEx_PLL3_Config+0x160>)
 8008e34:	4013      	ands	r3, r2
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	69d2      	ldr	r2, [r2, #28]
 8008e3a:	00d2      	lsls	r2, r2, #3
 8008e3c:	4920      	ldr	r1, [pc, #128]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e42:	4b1f      	ldr	r3, [pc, #124]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e46:	4a1e      	ldr	r2, [pc, #120]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d106      	bne.n	8008e62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e54:	4b1a      	ldr	r3, [pc, #104]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	4a19      	ldr	r2, [pc, #100]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e60:	e00f      	b.n	8008e82 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d106      	bne.n	8008e76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008e68:	4b15      	ldr	r3, [pc, #84]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6c:	4a14      	ldr	r2, [pc, #80]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e74:	e005      	b.n	8008e82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008e76:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7a:	4a11      	ldr	r2, [pc, #68]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008e82:	4b0f      	ldr	r3, [pc, #60]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a0e      	ldr	r2, [pc, #56]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e8e:	f7fa fea1 	bl	8003bd4 <HAL_GetTick>
 8008e92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e94:	e008      	b.n	8008ea8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e96:	f7fa fe9d 	bl	8003bd4 <HAL_GetTick>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d901      	bls.n	8008ea8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e006      	b.n	8008eb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ea8:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <RCCEx_PLL3_Config+0x15c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d0f0      	beq.n	8008e96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	58024400 	.word	0x58024400
 8008ec4:	ffff0007 	.word	0xffff0007

08008ec8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e0f1      	b.n	80090be <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a78      	ldr	r2, [pc, #480]	; (80090c8 <HAL_SPI_Init+0x200>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d00f      	beq.n	8008f0a <HAL_SPI_Init+0x42>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a77      	ldr	r2, [pc, #476]	; (80090cc <HAL_SPI_Init+0x204>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d00a      	beq.n	8008f0a <HAL_SPI_Init+0x42>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a75      	ldr	r2, [pc, #468]	; (80090d0 <HAL_SPI_Init+0x208>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d005      	beq.n	8008f0a <HAL_SPI_Init+0x42>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	2b0f      	cmp	r3, #15
 8008f04:	d901      	bls.n	8008f0a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e0d9      	b.n	80090be <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f8e2 	bl	80090d4 <SPI_GetPacketSize>
 8008f10:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a6c      	ldr	r2, [pc, #432]	; (80090c8 <HAL_SPI_Init+0x200>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d00c      	beq.n	8008f36 <HAL_SPI_Init+0x6e>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a6a      	ldr	r2, [pc, #424]	; (80090cc <HAL_SPI_Init+0x204>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d007      	beq.n	8008f36 <HAL_SPI_Init+0x6e>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a69      	ldr	r2, [pc, #420]	; (80090d0 <HAL_SPI_Init+0x208>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d002      	beq.n	8008f36 <HAL_SPI_Init+0x6e>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b08      	cmp	r3, #8
 8008f34:	d811      	bhi.n	8008f5a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f3a:	4a63      	ldr	r2, [pc, #396]	; (80090c8 <HAL_SPI_Init+0x200>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d009      	beq.n	8008f54 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a61      	ldr	r2, [pc, #388]	; (80090cc <HAL_SPI_Init+0x204>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d004      	beq.n	8008f54 <HAL_SPI_Init+0x8c>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a60      	ldr	r2, [pc, #384]	; (80090d0 <HAL_SPI_Init+0x208>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d104      	bne.n	8008f5e <HAL_SPI_Init+0x96>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b10      	cmp	r3, #16
 8008f58:	d901      	bls.n	8008f5e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e0af      	b.n	80090be <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d106      	bne.n	8008f78 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7f9 fea8 	bl	8002cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0201 	bic.w	r2, r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008f9a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fa4:	d119      	bne.n	8008fda <HAL_SPI_Init+0x112>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fae:	d103      	bne.n	8008fb8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d008      	beq.n	8008fca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10c      	bne.n	8008fda <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fc8:	d107      	bne.n	8008fda <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008fd8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69da      	ldr	r2, [r3, #28]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fec:	ea42 0103 	orr.w	r1, r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68da      	ldr	r2, [r3, #12]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009004:	431a      	orrs	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900a:	431a      	orrs	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	431a      	orrs	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	431a      	orrs	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	431a      	orrs	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	431a      	orrs	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800902e:	431a      	orrs	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	431a      	orrs	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800903a:	ea42 0103 	orr.w	r1, r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	430a      	orrs	r2, r1
 8009048:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d113      	bne.n	800907a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009064:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009078:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 0201 	bic.w	r2, r2, #1
 8009088:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	430a      	orrs	r2, r1
 80090aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	40013000 	.word	0x40013000
 80090cc:	40003800 	.word	0x40003800
 80090d0:	40003c00 	.word	0x40003c00

080090d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e0:	095b      	lsrs	r3, r3, #5
 80090e2:	3301      	adds	r3, #1
 80090e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	3301      	adds	r3, #1
 80090ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	3307      	adds	r3, #7
 80090f2:	08db      	lsrs	r3, r3, #3
 80090f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	fb02 f303 	mul.w	r3, r2, r3
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d101      	bne.n	800911c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	e049      	b.n	80091b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009122:	b2db      	uxtb	r3, r3
 8009124:	2b00      	cmp	r3, #0
 8009126:	d106      	bne.n	8009136 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7f9 fe2f 	bl	8002d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2202      	movs	r2, #2
 800913a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3304      	adds	r3, #4
 8009146:	4619      	mov	r1, r3
 8009148:	4610      	mov	r0, r2
 800914a:	f000 fd71 	bl	8009c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d001      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e054      	b.n	800927a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2202      	movs	r2, #2
 80091d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68da      	ldr	r2, [r3, #12]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f042 0201 	orr.w	r2, r2, #1
 80091e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a26      	ldr	r2, [pc, #152]	; (8009288 <HAL_TIM_Base_Start_IT+0xd0>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d022      	beq.n	8009238 <HAL_TIM_Base_Start_IT+0x80>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091fa:	d01d      	beq.n	8009238 <HAL_TIM_Base_Start_IT+0x80>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a22      	ldr	r2, [pc, #136]	; (800928c <HAL_TIM_Base_Start_IT+0xd4>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d018      	beq.n	8009238 <HAL_TIM_Base_Start_IT+0x80>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a21      	ldr	r2, [pc, #132]	; (8009290 <HAL_TIM_Base_Start_IT+0xd8>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d013      	beq.n	8009238 <HAL_TIM_Base_Start_IT+0x80>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a1f      	ldr	r2, [pc, #124]	; (8009294 <HAL_TIM_Base_Start_IT+0xdc>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d00e      	beq.n	8009238 <HAL_TIM_Base_Start_IT+0x80>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a1e      	ldr	r2, [pc, #120]	; (8009298 <HAL_TIM_Base_Start_IT+0xe0>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d009      	beq.n	8009238 <HAL_TIM_Base_Start_IT+0x80>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a1c      	ldr	r2, [pc, #112]	; (800929c <HAL_TIM_Base_Start_IT+0xe4>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d004      	beq.n	8009238 <HAL_TIM_Base_Start_IT+0x80>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a1b      	ldr	r2, [pc, #108]	; (80092a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d115      	bne.n	8009264 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	4b19      	ldr	r3, [pc, #100]	; (80092a4 <HAL_TIM_Base_Start_IT+0xec>)
 8009240:	4013      	ands	r3, r2
 8009242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2b06      	cmp	r3, #6
 8009248:	d015      	beq.n	8009276 <HAL_TIM_Base_Start_IT+0xbe>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009250:	d011      	beq.n	8009276 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f042 0201 	orr.w	r2, r2, #1
 8009260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009262:	e008      	b.n	8009276 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	e000      	b.n	8009278 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009276:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	40010000 	.word	0x40010000
 800928c:	40000400 	.word	0x40000400
 8009290:	40000800 	.word	0x40000800
 8009294:	40000c00 	.word	0x40000c00
 8009298:	40010400 	.word	0x40010400
 800929c:	40001800 	.word	0x40001800
 80092a0:	40014000 	.word	0x40014000
 80092a4:	00010007 	.word	0x00010007

080092a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e049      	b.n	800934e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f841 	bl	8009356 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2202      	movs	r2, #2
 80092d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	3304      	adds	r3, #4
 80092e4:	4619      	mov	r1, r3
 80092e6:	4610      	mov	r0, r2
 80092e8:	f000 fca2 	bl	8009c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
	...

0800936c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d109      	bne.n	8009390 <HAL_TIM_PWM_Start+0x24>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b01      	cmp	r3, #1
 8009386:	bf14      	ite	ne
 8009388:	2301      	movne	r3, #1
 800938a:	2300      	moveq	r3, #0
 800938c:	b2db      	uxtb	r3, r3
 800938e:	e03c      	b.n	800940a <HAL_TIM_PWM_Start+0x9e>
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	2b04      	cmp	r3, #4
 8009394:	d109      	bne.n	80093aa <HAL_TIM_PWM_Start+0x3e>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b01      	cmp	r3, #1
 80093a0:	bf14      	ite	ne
 80093a2:	2301      	movne	r3, #1
 80093a4:	2300      	moveq	r3, #0
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	e02f      	b.n	800940a <HAL_TIM_PWM_Start+0x9e>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b08      	cmp	r3, #8
 80093ae:	d109      	bne.n	80093c4 <HAL_TIM_PWM_Start+0x58>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	bf14      	ite	ne
 80093bc:	2301      	movne	r3, #1
 80093be:	2300      	moveq	r3, #0
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	e022      	b.n	800940a <HAL_TIM_PWM_Start+0x9e>
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	2b0c      	cmp	r3, #12
 80093c8:	d109      	bne.n	80093de <HAL_TIM_PWM_Start+0x72>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	bf14      	ite	ne
 80093d6:	2301      	movne	r3, #1
 80093d8:	2300      	moveq	r3, #0
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	e015      	b.n	800940a <HAL_TIM_PWM_Start+0x9e>
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b10      	cmp	r3, #16
 80093e2:	d109      	bne.n	80093f8 <HAL_TIM_PWM_Start+0x8c>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	bf14      	ite	ne
 80093f0:	2301      	movne	r3, #1
 80093f2:	2300      	moveq	r3, #0
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	e008      	b.n	800940a <HAL_TIM_PWM_Start+0x9e>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b01      	cmp	r3, #1
 8009402:	bf14      	ite	ne
 8009404:	2301      	movne	r3, #1
 8009406:	2300      	moveq	r3, #0
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e0a1      	b.n	8009556 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d104      	bne.n	8009422 <HAL_TIM_PWM_Start+0xb6>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2202      	movs	r2, #2
 800941c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009420:	e023      	b.n	800946a <HAL_TIM_PWM_Start+0xfe>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2b04      	cmp	r3, #4
 8009426:	d104      	bne.n	8009432 <HAL_TIM_PWM_Start+0xc6>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2202      	movs	r2, #2
 800942c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009430:	e01b      	b.n	800946a <HAL_TIM_PWM_Start+0xfe>
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b08      	cmp	r3, #8
 8009436:	d104      	bne.n	8009442 <HAL_TIM_PWM_Start+0xd6>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2202      	movs	r2, #2
 800943c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009440:	e013      	b.n	800946a <HAL_TIM_PWM_Start+0xfe>
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b0c      	cmp	r3, #12
 8009446:	d104      	bne.n	8009452 <HAL_TIM_PWM_Start+0xe6>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2202      	movs	r2, #2
 800944c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009450:	e00b      	b.n	800946a <HAL_TIM_PWM_Start+0xfe>
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2b10      	cmp	r3, #16
 8009456:	d104      	bne.n	8009462 <HAL_TIM_PWM_Start+0xf6>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2202      	movs	r2, #2
 800945c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009460:	e003      	b.n	800946a <HAL_TIM_PWM_Start+0xfe>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2202      	movs	r2, #2
 8009466:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2201      	movs	r2, #1
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	4618      	mov	r0, r3
 8009474:	f000 ffea 	bl	800a44c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a38      	ldr	r2, [pc, #224]	; (8009560 <HAL_TIM_PWM_Start+0x1f4>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d013      	beq.n	80094aa <HAL_TIM_PWM_Start+0x13e>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a37      	ldr	r2, [pc, #220]	; (8009564 <HAL_TIM_PWM_Start+0x1f8>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d00e      	beq.n	80094aa <HAL_TIM_PWM_Start+0x13e>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a35      	ldr	r2, [pc, #212]	; (8009568 <HAL_TIM_PWM_Start+0x1fc>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d009      	beq.n	80094aa <HAL_TIM_PWM_Start+0x13e>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a34      	ldr	r2, [pc, #208]	; (800956c <HAL_TIM_PWM_Start+0x200>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d004      	beq.n	80094aa <HAL_TIM_PWM_Start+0x13e>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a32      	ldr	r2, [pc, #200]	; (8009570 <HAL_TIM_PWM_Start+0x204>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d101      	bne.n	80094ae <HAL_TIM_PWM_Start+0x142>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e000      	b.n	80094b0 <HAL_TIM_PWM_Start+0x144>
 80094ae:	2300      	movs	r3, #0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d007      	beq.n	80094c4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a25      	ldr	r2, [pc, #148]	; (8009560 <HAL_TIM_PWM_Start+0x1f4>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d022      	beq.n	8009514 <HAL_TIM_PWM_Start+0x1a8>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094d6:	d01d      	beq.n	8009514 <HAL_TIM_PWM_Start+0x1a8>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a25      	ldr	r2, [pc, #148]	; (8009574 <HAL_TIM_PWM_Start+0x208>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d018      	beq.n	8009514 <HAL_TIM_PWM_Start+0x1a8>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a24      	ldr	r2, [pc, #144]	; (8009578 <HAL_TIM_PWM_Start+0x20c>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d013      	beq.n	8009514 <HAL_TIM_PWM_Start+0x1a8>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a22      	ldr	r2, [pc, #136]	; (800957c <HAL_TIM_PWM_Start+0x210>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d00e      	beq.n	8009514 <HAL_TIM_PWM_Start+0x1a8>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a1a      	ldr	r2, [pc, #104]	; (8009564 <HAL_TIM_PWM_Start+0x1f8>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d009      	beq.n	8009514 <HAL_TIM_PWM_Start+0x1a8>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a1e      	ldr	r2, [pc, #120]	; (8009580 <HAL_TIM_PWM_Start+0x214>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d004      	beq.n	8009514 <HAL_TIM_PWM_Start+0x1a8>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a16      	ldr	r2, [pc, #88]	; (8009568 <HAL_TIM_PWM_Start+0x1fc>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d115      	bne.n	8009540 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689a      	ldr	r2, [r3, #8]
 800951a:	4b1a      	ldr	r3, [pc, #104]	; (8009584 <HAL_TIM_PWM_Start+0x218>)
 800951c:	4013      	ands	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2b06      	cmp	r3, #6
 8009524:	d015      	beq.n	8009552 <HAL_TIM_PWM_Start+0x1e6>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800952c:	d011      	beq.n	8009552 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f042 0201 	orr.w	r2, r2, #1
 800953c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800953e:	e008      	b.n	8009552 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f042 0201 	orr.w	r2, r2, #1
 800954e:	601a      	str	r2, [r3, #0]
 8009550:	e000      	b.n	8009554 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	40010000 	.word	0x40010000
 8009564:	40010400 	.word	0x40010400
 8009568:	40014000 	.word	0x40014000
 800956c:	40014400 	.word	0x40014400
 8009570:	40014800 	.word	0x40014800
 8009574:	40000400 	.word	0x40000400
 8009578:	40000800 	.word	0x40000800
 800957c:	40000c00 	.word	0x40000c00
 8009580:	40001800 	.word	0x40001800
 8009584:	00010007 	.word	0x00010007

08009588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f003 0302 	and.w	r3, r3, #2
 800959a:	2b02      	cmp	r3, #2
 800959c:	d122      	bne.n	80095e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d11b      	bne.n	80095e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f06f 0202 	mvn.w	r2, #2
 80095b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	f003 0303 	and.w	r3, r3, #3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fb12 	bl	8009bf4 <HAL_TIM_IC_CaptureCallback>
 80095d0:	e005      	b.n	80095de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fb04 	bl	8009be0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fb15 	bl	8009c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	f003 0304 	and.w	r3, r3, #4
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d122      	bne.n	8009638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	f003 0304 	and.w	r3, r3, #4
 80095fc:	2b04      	cmp	r3, #4
 80095fe:	d11b      	bne.n	8009638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f06f 0204 	mvn.w	r2, #4
 8009608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2202      	movs	r2, #2
 800960e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fae8 	bl	8009bf4 <HAL_TIM_IC_CaptureCallback>
 8009624:	e005      	b.n	8009632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fada 	bl	8009be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 faeb 	bl	8009c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	f003 0308 	and.w	r3, r3, #8
 8009642:	2b08      	cmp	r3, #8
 8009644:	d122      	bne.n	800968c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	f003 0308 	and.w	r3, r3, #8
 8009650:	2b08      	cmp	r3, #8
 8009652:	d11b      	bne.n	800968c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f06f 0208 	mvn.w	r2, #8
 800965c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2204      	movs	r2, #4
 8009662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 fabe 	bl	8009bf4 <HAL_TIM_IC_CaptureCallback>
 8009678:	e005      	b.n	8009686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fab0 	bl	8009be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fac1 	bl	8009c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	f003 0310 	and.w	r3, r3, #16
 8009696:	2b10      	cmp	r3, #16
 8009698:	d122      	bne.n	80096e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	f003 0310 	and.w	r3, r3, #16
 80096a4:	2b10      	cmp	r3, #16
 80096a6:	d11b      	bne.n	80096e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f06f 0210 	mvn.w	r2, #16
 80096b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2208      	movs	r2, #8
 80096b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fa94 	bl	8009bf4 <HAL_TIM_IC_CaptureCallback>
 80096cc:	e005      	b.n	80096da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fa86 	bl	8009be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fa97 	bl	8009c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d10e      	bne.n	800970c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d107      	bne.n	800970c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f06f 0201 	mvn.w	r2, #1
 8009704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7f7 ff1e 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009716:	2b80      	cmp	r3, #128	; 0x80
 8009718:	d10e      	bne.n	8009738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009724:	2b80      	cmp	r3, #128	; 0x80
 8009726:	d107      	bne.n	8009738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 ffc6 	bl	800a6c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009746:	d10e      	bne.n	8009766 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009752:	2b80      	cmp	r3, #128	; 0x80
 8009754:	d107      	bne.n	8009766 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800975e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 ffb9 	bl	800a6d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009770:	2b40      	cmp	r3, #64	; 0x40
 8009772:	d10e      	bne.n	8009792 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800977e:	2b40      	cmp	r3, #64	; 0x40
 8009780:	d107      	bne.n	8009792 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800978a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fa45 	bl	8009c1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	f003 0320 	and.w	r3, r3, #32
 800979c:	2b20      	cmp	r3, #32
 800979e:	d10e      	bne.n	80097be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	f003 0320 	and.w	r3, r3, #32
 80097aa:	2b20      	cmp	r3, #32
 80097ac:	d107      	bne.n	80097be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f06f 0220 	mvn.w	r2, #32
 80097b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 ff79 	bl	800a6b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097be:	bf00      	nop
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d101      	bne.n	80097e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80097e2:	2302      	movs	r3, #2
 80097e4:	e0ff      	b.n	80099e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b14      	cmp	r3, #20
 80097f2:	f200 80f0 	bhi.w	80099d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80097f6:	a201      	add	r2, pc, #4	; (adr r2, 80097fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80097f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fc:	08009851 	.word	0x08009851
 8009800:	080099d7 	.word	0x080099d7
 8009804:	080099d7 	.word	0x080099d7
 8009808:	080099d7 	.word	0x080099d7
 800980c:	08009891 	.word	0x08009891
 8009810:	080099d7 	.word	0x080099d7
 8009814:	080099d7 	.word	0x080099d7
 8009818:	080099d7 	.word	0x080099d7
 800981c:	080098d3 	.word	0x080098d3
 8009820:	080099d7 	.word	0x080099d7
 8009824:	080099d7 	.word	0x080099d7
 8009828:	080099d7 	.word	0x080099d7
 800982c:	08009913 	.word	0x08009913
 8009830:	080099d7 	.word	0x080099d7
 8009834:	080099d7 	.word	0x080099d7
 8009838:	080099d7 	.word	0x080099d7
 800983c:	08009955 	.word	0x08009955
 8009840:	080099d7 	.word	0x080099d7
 8009844:	080099d7 	.word	0x080099d7
 8009848:	080099d7 	.word	0x080099d7
 800984c:	08009995 	.word	0x08009995
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fa84 	bl	8009d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	699a      	ldr	r2, [r3, #24]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0208 	orr.w	r2, r2, #8
 800986a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	699a      	ldr	r2, [r3, #24]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f022 0204 	bic.w	r2, r2, #4
 800987a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6999      	ldr	r1, [r3, #24]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	691a      	ldr	r2, [r3, #16]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	619a      	str	r2, [r3, #24]
      break;
 800988e:	e0a5      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68b9      	ldr	r1, [r7, #8]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 faf4 	bl	8009e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	699a      	ldr	r2, [r3, #24]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699a      	ldr	r2, [r3, #24]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6999      	ldr	r1, [r3, #24]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	021a      	lsls	r2, r3, #8
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	619a      	str	r2, [r3, #24]
      break;
 80098d0:	e084      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68b9      	ldr	r1, [r7, #8]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fb5d 	bl	8009f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	69da      	ldr	r2, [r3, #28]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f042 0208 	orr.w	r2, r2, #8
 80098ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	69da      	ldr	r2, [r3, #28]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 0204 	bic.w	r2, r2, #4
 80098fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69d9      	ldr	r1, [r3, #28]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	691a      	ldr	r2, [r3, #16]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	430a      	orrs	r2, r1
 800990e:	61da      	str	r2, [r3, #28]
      break;
 8009910:	e064      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68b9      	ldr	r1, [r7, #8]
 8009918:	4618      	mov	r0, r3
 800991a:	f000 fbc5 	bl	800a0a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69da      	ldr	r2, [r3, #28]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800992c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	69da      	ldr	r2, [r3, #28]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800993c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69d9      	ldr	r1, [r3, #28]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	021a      	lsls	r2, r3, #8
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	61da      	str	r2, [r3, #28]
      break;
 8009952:	e043      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68b9      	ldr	r1, [r7, #8]
 800995a:	4618      	mov	r0, r3
 800995c:	f000 fc0e 	bl	800a17c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f042 0208 	orr.w	r2, r2, #8
 800996e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f022 0204 	bic.w	r2, r2, #4
 800997e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	691a      	ldr	r2, [r3, #16]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009992:	e023      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68b9      	ldr	r1, [r7, #8]
 800999a:	4618      	mov	r0, r3
 800999c:	f000 fc52 	bl	800a244 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	021a      	lsls	r2, r3, #8
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	430a      	orrs	r2, r1
 80099d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80099d4:	e002      	b.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	75fb      	strb	r3, [r7, #23]
      break;
 80099da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop

080099f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d101      	bne.n	8009a0c <HAL_TIM_ConfigClockSource+0x1c>
 8009a08:	2302      	movs	r3, #2
 8009a0a:	e0dc      	b.n	8009bc6 <HAL_TIM_ConfigClockSource+0x1d6>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	4b6a      	ldr	r3, [pc, #424]	; (8009bd0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009a28:	4013      	ands	r3, r2
 8009a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a64      	ldr	r2, [pc, #400]	; (8009bd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	f000 80a9 	beq.w	8009b9a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a48:	4a62      	ldr	r2, [pc, #392]	; (8009bd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	f200 80ae 	bhi.w	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
 8009a50:	4a61      	ldr	r2, [pc, #388]	; (8009bd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	f000 80a1 	beq.w	8009b9a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a58:	4a5f      	ldr	r2, [pc, #380]	; (8009bd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	f200 80a6 	bhi.w	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
 8009a60:	4a5e      	ldr	r2, [pc, #376]	; (8009bdc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	f000 8099 	beq.w	8009b9a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a68:	4a5c      	ldr	r2, [pc, #368]	; (8009bdc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	f200 809e 	bhi.w	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
 8009a70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a74:	f000 8091 	beq.w	8009b9a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a7c:	f200 8096 	bhi.w	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
 8009a80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a84:	f000 8089 	beq.w	8009b9a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a8c:	f200 808e 	bhi.w	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
 8009a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a94:	d03e      	beq.n	8009b14 <HAL_TIM_ConfigClockSource+0x124>
 8009a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a9a:	f200 8087 	bhi.w	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
 8009a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa2:	f000 8086 	beq.w	8009bb2 <HAL_TIM_ConfigClockSource+0x1c2>
 8009aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aaa:	d87f      	bhi.n	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
 8009aac:	2b70      	cmp	r3, #112	; 0x70
 8009aae:	d01a      	beq.n	8009ae6 <HAL_TIM_ConfigClockSource+0xf6>
 8009ab0:	2b70      	cmp	r3, #112	; 0x70
 8009ab2:	d87b      	bhi.n	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
 8009ab4:	2b60      	cmp	r3, #96	; 0x60
 8009ab6:	d050      	beq.n	8009b5a <HAL_TIM_ConfigClockSource+0x16a>
 8009ab8:	2b60      	cmp	r3, #96	; 0x60
 8009aba:	d877      	bhi.n	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
 8009abc:	2b50      	cmp	r3, #80	; 0x50
 8009abe:	d03c      	beq.n	8009b3a <HAL_TIM_ConfigClockSource+0x14a>
 8009ac0:	2b50      	cmp	r3, #80	; 0x50
 8009ac2:	d873      	bhi.n	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
 8009ac4:	2b40      	cmp	r3, #64	; 0x40
 8009ac6:	d058      	beq.n	8009b7a <HAL_TIM_ConfigClockSource+0x18a>
 8009ac8:	2b40      	cmp	r3, #64	; 0x40
 8009aca:	d86f      	bhi.n	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
 8009acc:	2b30      	cmp	r3, #48	; 0x30
 8009ace:	d064      	beq.n	8009b9a <HAL_TIM_ConfigClockSource+0x1aa>
 8009ad0:	2b30      	cmp	r3, #48	; 0x30
 8009ad2:	d86b      	bhi.n	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	d060      	beq.n	8009b9a <HAL_TIM_ConfigClockSource+0x1aa>
 8009ad8:	2b20      	cmp	r3, #32
 8009ada:	d867      	bhi.n	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d05c      	beq.n	8009b9a <HAL_TIM_ConfigClockSource+0x1aa>
 8009ae0:	2b10      	cmp	r3, #16
 8009ae2:	d05a      	beq.n	8009b9a <HAL_TIM_ConfigClockSource+0x1aa>
 8009ae4:	e062      	b.n	8009bac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6818      	ldr	r0, [r3, #0]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	6899      	ldr	r1, [r3, #8]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	f000 fc89 	bl	800a40c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	609a      	str	r2, [r3, #8]
      break;
 8009b12:	e04f      	b.n	8009bb4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	6899      	ldr	r1, [r3, #8]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	685a      	ldr	r2, [r3, #4]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	f000 fc72 	bl	800a40c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689a      	ldr	r2, [r3, #8]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b36:	609a      	str	r2, [r3, #8]
      break;
 8009b38:	e03c      	b.n	8009bb4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6818      	ldr	r0, [r3, #0]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	6859      	ldr	r1, [r3, #4]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	461a      	mov	r2, r3
 8009b48:	f000 fbe2 	bl	800a310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2150      	movs	r1, #80	; 0x50
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 fc3c 	bl	800a3d0 <TIM_ITRx_SetConfig>
      break;
 8009b58:	e02c      	b.n	8009bb4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6818      	ldr	r0, [r3, #0]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	6859      	ldr	r1, [r3, #4]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	461a      	mov	r2, r3
 8009b68:	f000 fc01 	bl	800a36e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2160      	movs	r1, #96	; 0x60
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 fc2c 	bl	800a3d0 <TIM_ITRx_SetConfig>
      break;
 8009b78:	e01c      	b.n	8009bb4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6818      	ldr	r0, [r3, #0]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	6859      	ldr	r1, [r3, #4]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	461a      	mov	r2, r3
 8009b88:	f000 fbc2 	bl	800a310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2140      	movs	r1, #64	; 0x40
 8009b92:	4618      	mov	r0, r3
 8009b94:	f000 fc1c 	bl	800a3d0 <TIM_ITRx_SetConfig>
      break;
 8009b98:	e00c      	b.n	8009bb4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	f000 fc13 	bl	800a3d0 <TIM_ITRx_SetConfig>
      break;
 8009baa:	e003      	b.n	8009bb4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	73fb      	strb	r3, [r7, #15]
      break;
 8009bb0:	e000      	b.n	8009bb4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009bb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	ffceff88 	.word	0xffceff88
 8009bd4:	00100040 	.word	0x00100040
 8009bd8:	00100030 	.word	0x00100030
 8009bdc:	00100020 	.word	0x00100020

08009be0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a40      	ldr	r2, [pc, #256]	; (8009d44 <TIM_Base_SetConfig+0x114>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d013      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c4e:	d00f      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a3d      	ldr	r2, [pc, #244]	; (8009d48 <TIM_Base_SetConfig+0x118>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00b      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a3c      	ldr	r2, [pc, #240]	; (8009d4c <TIM_Base_SetConfig+0x11c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d007      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a3b      	ldr	r2, [pc, #236]	; (8009d50 <TIM_Base_SetConfig+0x120>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d003      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a3a      	ldr	r2, [pc, #232]	; (8009d54 <TIM_Base_SetConfig+0x124>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d108      	bne.n	8009c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a2f      	ldr	r2, [pc, #188]	; (8009d44 <TIM_Base_SetConfig+0x114>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d01f      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c90:	d01b      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a2c      	ldr	r2, [pc, #176]	; (8009d48 <TIM_Base_SetConfig+0x118>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d017      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a2b      	ldr	r2, [pc, #172]	; (8009d4c <TIM_Base_SetConfig+0x11c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d013      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a2a      	ldr	r2, [pc, #168]	; (8009d50 <TIM_Base_SetConfig+0x120>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d00f      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a29      	ldr	r2, [pc, #164]	; (8009d54 <TIM_Base_SetConfig+0x124>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d00b      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a28      	ldr	r2, [pc, #160]	; (8009d58 <TIM_Base_SetConfig+0x128>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d007      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a27      	ldr	r2, [pc, #156]	; (8009d5c <TIM_Base_SetConfig+0x12c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d003      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a26      	ldr	r2, [pc, #152]	; (8009d60 <TIM_Base_SetConfig+0x130>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d108      	bne.n	8009cdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	689a      	ldr	r2, [r3, #8]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a10      	ldr	r2, [pc, #64]	; (8009d44 <TIM_Base_SetConfig+0x114>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d00f      	beq.n	8009d28 <TIM_Base_SetConfig+0xf8>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a12      	ldr	r2, [pc, #72]	; (8009d54 <TIM_Base_SetConfig+0x124>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d00b      	beq.n	8009d28 <TIM_Base_SetConfig+0xf8>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a11      	ldr	r2, [pc, #68]	; (8009d58 <TIM_Base_SetConfig+0x128>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d007      	beq.n	8009d28 <TIM_Base_SetConfig+0xf8>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a10      	ldr	r2, [pc, #64]	; (8009d5c <TIM_Base_SetConfig+0x12c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d003      	beq.n	8009d28 <TIM_Base_SetConfig+0xf8>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a0f      	ldr	r2, [pc, #60]	; (8009d60 <TIM_Base_SetConfig+0x130>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d103      	bne.n	8009d30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	691a      	ldr	r2, [r3, #16]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	615a      	str	r2, [r3, #20]
}
 8009d36:	bf00      	nop
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	40010000 	.word	0x40010000
 8009d48:	40000400 	.word	0x40000400
 8009d4c:	40000800 	.word	0x40000800
 8009d50:	40000c00 	.word	0x40000c00
 8009d54:	40010400 	.word	0x40010400
 8009d58:	40014000 	.word	0x40014000
 8009d5c:	40014400 	.word	0x40014400
 8009d60:	40014800 	.word	0x40014800

08009d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b087      	sub	sp, #28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	f023 0201 	bic.w	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	4b37      	ldr	r3, [pc, #220]	; (8009e6c <TIM_OC1_SetConfig+0x108>)
 8009d90:	4013      	ands	r3, r2
 8009d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f023 0303 	bic.w	r3, r3, #3
 8009d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	f023 0302 	bic.w	r3, r3, #2
 8009dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a2d      	ldr	r2, [pc, #180]	; (8009e70 <TIM_OC1_SetConfig+0x10c>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d00f      	beq.n	8009de0 <TIM_OC1_SetConfig+0x7c>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a2c      	ldr	r2, [pc, #176]	; (8009e74 <TIM_OC1_SetConfig+0x110>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d00b      	beq.n	8009de0 <TIM_OC1_SetConfig+0x7c>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a2b      	ldr	r2, [pc, #172]	; (8009e78 <TIM_OC1_SetConfig+0x114>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d007      	beq.n	8009de0 <TIM_OC1_SetConfig+0x7c>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a2a      	ldr	r2, [pc, #168]	; (8009e7c <TIM_OC1_SetConfig+0x118>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d003      	beq.n	8009de0 <TIM_OC1_SetConfig+0x7c>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a29      	ldr	r2, [pc, #164]	; (8009e80 <TIM_OC1_SetConfig+0x11c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d10c      	bne.n	8009dfa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f023 0308 	bic.w	r3, r3, #8
 8009de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f023 0304 	bic.w	r3, r3, #4
 8009df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a1c      	ldr	r2, [pc, #112]	; (8009e70 <TIM_OC1_SetConfig+0x10c>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00f      	beq.n	8009e22 <TIM_OC1_SetConfig+0xbe>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a1b      	ldr	r2, [pc, #108]	; (8009e74 <TIM_OC1_SetConfig+0x110>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d00b      	beq.n	8009e22 <TIM_OC1_SetConfig+0xbe>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a1a      	ldr	r2, [pc, #104]	; (8009e78 <TIM_OC1_SetConfig+0x114>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d007      	beq.n	8009e22 <TIM_OC1_SetConfig+0xbe>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a19      	ldr	r2, [pc, #100]	; (8009e7c <TIM_OC1_SetConfig+0x118>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d003      	beq.n	8009e22 <TIM_OC1_SetConfig+0xbe>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a18      	ldr	r2, [pc, #96]	; (8009e80 <TIM_OC1_SetConfig+0x11c>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d111      	bne.n	8009e46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	621a      	str	r2, [r3, #32]
}
 8009e60:	bf00      	nop
 8009e62:	371c      	adds	r7, #28
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	fffeff8f 	.word	0xfffeff8f
 8009e70:	40010000 	.word	0x40010000
 8009e74:	40010400 	.word	0x40010400
 8009e78:	40014000 	.word	0x40014000
 8009e7c:	40014400 	.word	0x40014400
 8009e80:	40014800 	.word	0x40014800

08009e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b087      	sub	sp, #28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	f023 0210 	bic.w	r2, r3, #16
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	4b34      	ldr	r3, [pc, #208]	; (8009f80 <TIM_OC2_SetConfig+0xfc>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	021b      	lsls	r3, r3, #8
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f023 0320 	bic.w	r3, r3, #32
 8009ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	011b      	lsls	r3, r3, #4
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a29      	ldr	r2, [pc, #164]	; (8009f84 <TIM_OC2_SetConfig+0x100>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d003      	beq.n	8009eec <TIM_OC2_SetConfig+0x68>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a28      	ldr	r2, [pc, #160]	; (8009f88 <TIM_OC2_SetConfig+0x104>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d10d      	bne.n	8009f08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	011b      	lsls	r3, r3, #4
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a1e      	ldr	r2, [pc, #120]	; (8009f84 <TIM_OC2_SetConfig+0x100>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d00f      	beq.n	8009f30 <TIM_OC2_SetConfig+0xac>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a1d      	ldr	r2, [pc, #116]	; (8009f88 <TIM_OC2_SetConfig+0x104>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d00b      	beq.n	8009f30 <TIM_OC2_SetConfig+0xac>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a1c      	ldr	r2, [pc, #112]	; (8009f8c <TIM_OC2_SetConfig+0x108>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d007      	beq.n	8009f30 <TIM_OC2_SetConfig+0xac>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a1b      	ldr	r2, [pc, #108]	; (8009f90 <TIM_OC2_SetConfig+0x10c>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d003      	beq.n	8009f30 <TIM_OC2_SetConfig+0xac>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a1a      	ldr	r2, [pc, #104]	; (8009f94 <TIM_OC2_SetConfig+0x110>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d113      	bne.n	8009f58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	621a      	str	r2, [r3, #32]
}
 8009f72:	bf00      	nop
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	feff8fff 	.word	0xfeff8fff
 8009f84:	40010000 	.word	0x40010000
 8009f88:	40010400 	.word	0x40010400
 8009f8c:	40014000 	.word	0x40014000
 8009f90:	40014400 	.word	0x40014400
 8009f94:	40014800 	.word	0x40014800

08009f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	4b33      	ldr	r3, [pc, #204]	; (800a090 <TIM_OC3_SetConfig+0xf8>)
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f023 0303 	bic.w	r3, r3, #3
 8009fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	021b      	lsls	r3, r3, #8
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a28      	ldr	r2, [pc, #160]	; (800a094 <TIM_OC3_SetConfig+0xfc>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d003      	beq.n	8009ffe <TIM_OC3_SetConfig+0x66>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a27      	ldr	r2, [pc, #156]	; (800a098 <TIM_OC3_SetConfig+0x100>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d10d      	bne.n	800a01a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	021b      	lsls	r3, r3, #8
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	4313      	orrs	r3, r2
 800a010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a1d      	ldr	r2, [pc, #116]	; (800a094 <TIM_OC3_SetConfig+0xfc>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d00f      	beq.n	800a042 <TIM_OC3_SetConfig+0xaa>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a1c      	ldr	r2, [pc, #112]	; (800a098 <TIM_OC3_SetConfig+0x100>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d00b      	beq.n	800a042 <TIM_OC3_SetConfig+0xaa>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a1b      	ldr	r2, [pc, #108]	; (800a09c <TIM_OC3_SetConfig+0x104>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d007      	beq.n	800a042 <TIM_OC3_SetConfig+0xaa>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a1a      	ldr	r2, [pc, #104]	; (800a0a0 <TIM_OC3_SetConfig+0x108>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d003      	beq.n	800a042 <TIM_OC3_SetConfig+0xaa>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a19      	ldr	r2, [pc, #100]	; (800a0a4 <TIM_OC3_SetConfig+0x10c>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d113      	bne.n	800a06a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	695b      	ldr	r3, [r3, #20]
 800a056:	011b      	lsls	r3, r3, #4
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	011b      	lsls	r3, r3, #4
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	4313      	orrs	r3, r2
 800a068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	621a      	str	r2, [r3, #32]
}
 800a084:	bf00      	nop
 800a086:	371c      	adds	r7, #28
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	fffeff8f 	.word	0xfffeff8f
 800a094:	40010000 	.word	0x40010000
 800a098:	40010400 	.word	0x40010400
 800a09c:	40014000 	.word	0x40014000
 800a0a0:	40014400 	.word	0x40014400
 800a0a4:	40014800 	.word	0x40014800

0800a0a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	4b24      	ldr	r3, [pc, #144]	; (800a164 <TIM_OC4_SetConfig+0xbc>)
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	021b      	lsls	r3, r3, #8
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	031b      	lsls	r3, r3, #12
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a19      	ldr	r2, [pc, #100]	; (800a168 <TIM_OC4_SetConfig+0xc0>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d00f      	beq.n	800a128 <TIM_OC4_SetConfig+0x80>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a18      	ldr	r2, [pc, #96]	; (800a16c <TIM_OC4_SetConfig+0xc4>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d00b      	beq.n	800a128 <TIM_OC4_SetConfig+0x80>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a17      	ldr	r2, [pc, #92]	; (800a170 <TIM_OC4_SetConfig+0xc8>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d007      	beq.n	800a128 <TIM_OC4_SetConfig+0x80>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a16      	ldr	r2, [pc, #88]	; (800a174 <TIM_OC4_SetConfig+0xcc>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d003      	beq.n	800a128 <TIM_OC4_SetConfig+0x80>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a15      	ldr	r2, [pc, #84]	; (800a178 <TIM_OC4_SetConfig+0xd0>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d109      	bne.n	800a13c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a12e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	019b      	lsls	r3, r3, #6
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	4313      	orrs	r3, r2
 800a13a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	621a      	str	r2, [r3, #32]
}
 800a156:	bf00      	nop
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	feff8fff 	.word	0xfeff8fff
 800a168:	40010000 	.word	0x40010000
 800a16c:	40010400 	.word	0x40010400
 800a170:	40014000 	.word	0x40014000
 800a174:	40014400 	.word	0x40014400
 800a178:	40014800 	.word	0x40014800

0800a17c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b087      	sub	sp, #28
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	4b21      	ldr	r3, [pc, #132]	; (800a22c <TIM_OC5_SetConfig+0xb0>)
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a1bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	041b      	lsls	r3, r3, #16
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a18      	ldr	r2, [pc, #96]	; (800a230 <TIM_OC5_SetConfig+0xb4>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00f      	beq.n	800a1f2 <TIM_OC5_SetConfig+0x76>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a17      	ldr	r2, [pc, #92]	; (800a234 <TIM_OC5_SetConfig+0xb8>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d00b      	beq.n	800a1f2 <TIM_OC5_SetConfig+0x76>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a16      	ldr	r2, [pc, #88]	; (800a238 <TIM_OC5_SetConfig+0xbc>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d007      	beq.n	800a1f2 <TIM_OC5_SetConfig+0x76>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a15      	ldr	r2, [pc, #84]	; (800a23c <TIM_OC5_SetConfig+0xc0>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d003      	beq.n	800a1f2 <TIM_OC5_SetConfig+0x76>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a14      	ldr	r2, [pc, #80]	; (800a240 <TIM_OC5_SetConfig+0xc4>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d109      	bne.n	800a206 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	021b      	lsls	r3, r3, #8
 800a200:	697a      	ldr	r2, [r7, #20]
 800a202:	4313      	orrs	r3, r2
 800a204:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	621a      	str	r2, [r3, #32]
}
 800a220:	bf00      	nop
 800a222:	371c      	adds	r7, #28
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	fffeff8f 	.word	0xfffeff8f
 800a230:	40010000 	.word	0x40010000
 800a234:	40010400 	.word	0x40010400
 800a238:	40014000 	.word	0x40014000
 800a23c:	40014400 	.word	0x40014400
 800a240:	40014800 	.word	0x40014800

0800a244 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a244:	b480      	push	{r7}
 800a246:	b087      	sub	sp, #28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	4b22      	ldr	r3, [pc, #136]	; (800a2f8 <TIM_OC6_SetConfig+0xb4>)
 800a270:	4013      	ands	r3, r2
 800a272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	021b      	lsls	r3, r3, #8
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	051b      	lsls	r3, r3, #20
 800a28e:	693a      	ldr	r2, [r7, #16]
 800a290:	4313      	orrs	r3, r2
 800a292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a19      	ldr	r2, [pc, #100]	; (800a2fc <TIM_OC6_SetConfig+0xb8>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d00f      	beq.n	800a2bc <TIM_OC6_SetConfig+0x78>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a18      	ldr	r2, [pc, #96]	; (800a300 <TIM_OC6_SetConfig+0xbc>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d00b      	beq.n	800a2bc <TIM_OC6_SetConfig+0x78>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a17      	ldr	r2, [pc, #92]	; (800a304 <TIM_OC6_SetConfig+0xc0>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d007      	beq.n	800a2bc <TIM_OC6_SetConfig+0x78>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a16      	ldr	r2, [pc, #88]	; (800a308 <TIM_OC6_SetConfig+0xc4>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d003      	beq.n	800a2bc <TIM_OC6_SetConfig+0x78>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a15      	ldr	r2, [pc, #84]	; (800a30c <TIM_OC6_SetConfig+0xc8>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d109      	bne.n	800a2d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	029b      	lsls	r3, r3, #10
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	621a      	str	r2, [r3, #32]
}
 800a2ea:	bf00      	nop
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	feff8fff 	.word	0xfeff8fff
 800a2fc:	40010000 	.word	0x40010000
 800a300:	40010400 	.word	0x40010400
 800a304:	40014000 	.word	0x40014000
 800a308:	40014400 	.word	0x40014400
 800a30c:	40014800 	.word	0x40014800

0800a310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a310:	b480      	push	{r7}
 800a312:	b087      	sub	sp, #28
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	f023 0201 	bic.w	r2, r3, #1
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a33a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	011b      	lsls	r3, r3, #4
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	4313      	orrs	r3, r2
 800a344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f023 030a 	bic.w	r3, r3, #10
 800a34c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	4313      	orrs	r3, r2
 800a354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	621a      	str	r2, [r3, #32]
}
 800a362:	bf00      	nop
 800a364:	371c      	adds	r7, #28
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a36e:	b480      	push	{r7}
 800a370:	b087      	sub	sp, #28
 800a372:	af00      	add	r7, sp, #0
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	f023 0210 	bic.w	r2, r3, #16
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6a1b      	ldr	r3, [r3, #32]
 800a390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	031b      	lsls	r3, r3, #12
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	011b      	lsls	r3, r3, #4
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	621a      	str	r2, [r3, #32]
}
 800a3c2:	bf00      	nop
 800a3c4:	371c      	adds	r7, #28
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
	...

0800a3d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	4b09      	ldr	r3, [pc, #36]	; (800a408 <TIM_ITRx_SetConfig+0x38>)
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	f043 0307 	orr.w	r3, r3, #7
 800a3f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	609a      	str	r2, [r3, #8]
}
 800a3fa:	bf00      	nop
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	ffcfff8f 	.word	0xffcfff8f

0800a40c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	021a      	lsls	r2, r3, #8
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	431a      	orrs	r2, r3
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	4313      	orrs	r3, r2
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	4313      	orrs	r3, r2
 800a438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	697a      	ldr	r2, [r7, #20]
 800a43e:	609a      	str	r2, [r3, #8]
}
 800a440:	bf00      	nop
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b087      	sub	sp, #28
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	f003 031f 	and.w	r3, r3, #31
 800a45e:	2201      	movs	r2, #1
 800a460:	fa02 f303 	lsl.w	r3, r2, r3
 800a464:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6a1a      	ldr	r2, [r3, #32]
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	43db      	mvns	r3, r3
 800a46e:	401a      	ands	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6a1a      	ldr	r2, [r3, #32]
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	f003 031f 	and.w	r3, r3, #31
 800a47e:	6879      	ldr	r1, [r7, #4]
 800a480:	fa01 f303 	lsl.w	r3, r1, r3
 800a484:	431a      	orrs	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	621a      	str	r2, [r3, #32]
}
 800a48a:	bf00      	nop
 800a48c:	371c      	adds	r7, #28
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
	...

0800a498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d101      	bne.n	800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	e06d      	b.n	800a58c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a30      	ldr	r2, [pc, #192]	; (800a598 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d004      	beq.n	800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a2f      	ldr	r2, [pc, #188]	; (800a59c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d108      	bne.n	800a4f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a4ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	4313      	orrs	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a20      	ldr	r2, [pc, #128]	; (800a598 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d022      	beq.n	800a560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a522:	d01d      	beq.n	800a560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a1d      	ldr	r2, [pc, #116]	; (800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d018      	beq.n	800a560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a1c      	ldr	r2, [pc, #112]	; (800a5a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d013      	beq.n	800a560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a1a      	ldr	r2, [pc, #104]	; (800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d00e      	beq.n	800a560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a15      	ldr	r2, [pc, #84]	; (800a59c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d009      	beq.n	800a560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a16      	ldr	r2, [pc, #88]	; (800a5ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d004      	beq.n	800a560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a15      	ldr	r2, [pc, #84]	; (800a5b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d10c      	bne.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a566:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	4313      	orrs	r3, r2
 800a570:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	40010000 	.word	0x40010000
 800a59c:	40010400 	.word	0x40010400
 800a5a0:	40000400 	.word	0x40000400
 800a5a4:	40000800 	.word	0x40000800
 800a5a8:	40000c00 	.word	0x40000c00
 800a5ac:	40001800 	.word	0x40001800
 800a5b0:	40014000 	.word	0x40014000

0800a5b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d101      	bne.n	800a5d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	e065      	b.n	800a69c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	695b      	ldr	r3, [r3, #20]
 800a628:	4313      	orrs	r3, r2
 800a62a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a636:	4313      	orrs	r3, r2
 800a638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	041b      	lsls	r3, r3, #16
 800a646:	4313      	orrs	r3, r2
 800a648:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a16      	ldr	r2, [pc, #88]	; (800a6a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d004      	beq.n	800a65e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a14      	ldr	r2, [pc, #80]	; (800a6ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d115      	bne.n	800a68a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	051b      	lsls	r3, r3, #20
 800a66a:	4313      	orrs	r3, r2
 800a66c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	69db      	ldr	r3, [r3, #28]
 800a678:	4313      	orrs	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	4313      	orrs	r3, r2
 800a688:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr
 800a6a8:	40010000 	.word	0x40010000
 800a6ac:	40010400 	.word	0x40010400

0800a6b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d101      	bne.n	800a6fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e042      	b.n	800a784 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a704:	2b00      	cmp	r3, #0
 800a706:	d106      	bne.n	800a716 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7f8 fd4f 	bl	80031b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2224      	movs	r2, #36	; 0x24
 800a71a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f022 0201 	bic.w	r2, r2, #1
 800a72c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fd54 	bl	800b1dc <UART_SetConfig>
 800a734:	4603      	mov	r3, r0
 800a736:	2b01      	cmp	r3, #1
 800a738:	d101      	bne.n	800a73e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e022      	b.n	800a784 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a742:	2b00      	cmp	r3, #0
 800a744:	d002      	beq.n	800a74c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f001 faa8 	bl	800bc9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a75a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	689a      	ldr	r2, [r3, #8]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a76a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f042 0201 	orr.w	r2, r2, #1
 800a77a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f001 fb2f 	bl	800bde0 <UART_CheckIdleState>
 800a782:	4603      	mov	r3, r0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b08a      	sub	sp, #40	; 0x28
 800a790:	af02      	add	r7, sp, #8
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	4613      	mov	r3, r2
 800a79a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7a2:	2b20      	cmp	r3, #32
 800a7a4:	f040 8083 	bne.w	800a8ae <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d002      	beq.n	800a7b4 <HAL_UART_Transmit+0x28>
 800a7ae:	88fb      	ldrh	r3, [r7, #6]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d101      	bne.n	800a7b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e07b      	b.n	800a8b0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d101      	bne.n	800a7c6 <HAL_UART_Transmit+0x3a>
 800a7c2:	2302      	movs	r3, #2
 800a7c4:	e074      	b.n	800a8b0 <HAL_UART_Transmit+0x124>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2221      	movs	r2, #33	; 0x21
 800a7da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a7de:	f7f9 f9f9 	bl	8003bd4 <HAL_GetTick>
 800a7e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	88fa      	ldrh	r2, [r7, #6]
 800a7e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	88fa      	ldrh	r2, [r7, #6]
 800a7f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7fc:	d108      	bne.n	800a810 <HAL_UART_Transmit+0x84>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d104      	bne.n	800a810 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	61bb      	str	r3, [r7, #24]
 800a80e:	e003      	b.n	800a818 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a814:	2300      	movs	r3, #0
 800a816:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a820:	e02c      	b.n	800a87c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	2200      	movs	r2, #0
 800a82a:	2180      	movs	r1, #128	; 0x80
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f001 fb22 	bl	800be76 <UART_WaitOnFlagUntilTimeout>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d001      	beq.n	800a83c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a838:	2303      	movs	r3, #3
 800a83a:	e039      	b.n	800a8b0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10b      	bne.n	800a85a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	461a      	mov	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a850:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	3302      	adds	r3, #2
 800a856:	61bb      	str	r3, [r7, #24]
 800a858:	e007      	b.n	800a86a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	781a      	ldrb	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	3301      	adds	r3, #1
 800a868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a870:	b29b      	uxth	r3, r3
 800a872:	3b01      	subs	r3, #1
 800a874:	b29a      	uxth	r2, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a882:	b29b      	uxth	r3, r3
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1cc      	bne.n	800a822 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	2200      	movs	r2, #0
 800a890:	2140      	movs	r1, #64	; 0x40
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f001 faef 	bl	800be76 <UART_WaitOnFlagUntilTimeout>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	e006      	b.n	800a8b0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2220      	movs	r2, #32
 800a8a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e000      	b.n	800a8b0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a8ae:	2302      	movs	r3, #2
  }
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3720      	adds	r7, #32
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08a      	sub	sp, #40	; 0x28
 800a8bc:	af02      	add	r7, sp, #8
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	603b      	str	r3, [r7, #0]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ce:	2b20      	cmp	r3, #32
 800a8d0:	f040 80c0 	bne.w	800aa54 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d002      	beq.n	800a8e0 <HAL_UART_Receive+0x28>
 800a8da:	88fb      	ldrh	r3, [r7, #6]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e0b8      	b.n	800aa56 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d101      	bne.n	800a8f2 <HAL_UART_Receive+0x3a>
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	e0b1      	b.n	800aa56 <HAL_UART_Receive+0x19e>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2222      	movs	r2, #34	; 0x22
 800a906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a910:	f7f9 f960 	bl	8003bd4 <HAL_GetTick>
 800a914:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	88fa      	ldrh	r2, [r7, #6]
 800a91a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	88fa      	ldrh	r2, [r7, #6]
 800a922:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a92e:	d10e      	bne.n	800a94e <HAL_UART_Receive+0x96>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d105      	bne.n	800a944 <HAL_UART_Receive+0x8c>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a93e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a942:	e02d      	b.n	800a9a0 <HAL_UART_Receive+0xe8>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	22ff      	movs	r2, #255	; 0xff
 800a948:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a94c:	e028      	b.n	800a9a0 <HAL_UART_Receive+0xe8>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10d      	bne.n	800a972 <HAL_UART_Receive+0xba>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d104      	bne.n	800a968 <HAL_UART_Receive+0xb0>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	22ff      	movs	r2, #255	; 0xff
 800a962:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a966:	e01b      	b.n	800a9a0 <HAL_UART_Receive+0xe8>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	227f      	movs	r2, #127	; 0x7f
 800a96c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a970:	e016      	b.n	800a9a0 <HAL_UART_Receive+0xe8>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a97a:	d10d      	bne.n	800a998 <HAL_UART_Receive+0xe0>
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d104      	bne.n	800a98e <HAL_UART_Receive+0xd6>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	227f      	movs	r2, #127	; 0x7f
 800a988:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a98c:	e008      	b.n	800a9a0 <HAL_UART_Receive+0xe8>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	223f      	movs	r2, #63	; 0x3f
 800a992:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a996:	e003      	b.n	800a9a0 <HAL_UART_Receive+0xe8>
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2200      	movs	r2, #0
 800a99c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a9a6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9b0:	d108      	bne.n	800a9c4 <HAL_UART_Receive+0x10c>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d104      	bne.n	800a9c4 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	61bb      	str	r3, [r7, #24]
 800a9c2:	e003      	b.n	800a9cc <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a9d4:	e032      	b.n	800aa3c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	2120      	movs	r1, #32
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f001 fa48 	bl	800be76 <UART_WaitOnFlagUntilTimeout>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	e032      	b.n	800aa56 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10c      	bne.n	800aa10 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	8a7b      	ldrh	r3, [r7, #18]
 800aa00:	4013      	ands	r3, r2
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	3302      	adds	r3, #2
 800aa0c:	61bb      	str	r3, [r7, #24]
 800aa0e:	e00c      	b.n	800aa2a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	8a7b      	ldrh	r3, [r7, #18]
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	b2da      	uxtb	r2, r3
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	3301      	adds	r3, #1
 800aa28:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	3b01      	subs	r3, #1
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1c6      	bne.n	800a9d6 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	e000      	b.n	800aa56 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800aa54:	2302      	movs	r3, #2
  }
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3720      	adds	r7, #32
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b0ba      	sub	sp, #232	; 0xe8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	69db      	ldr	r3, [r3, #28]
 800aa6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aa8a:	f640 030f 	movw	r3, #2063	; 0x80f
 800aa8e:	4013      	ands	r3, r2
 800aa90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800aa94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d11b      	bne.n	800aad4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaa0:	f003 0320 	and.w	r3, r3, #32
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d015      	beq.n	800aad4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aaa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaac:	f003 0320 	and.w	r3, r3, #32
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d105      	bne.n	800aac0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d009      	beq.n	800aad4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f000 835a 	beq.w	800b17e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	4798      	blx	r3
      }
      return;
 800aad2:	e354      	b.n	800b17e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 811f 	beq.w	800ad1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aade:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aae2:	4b8b      	ldr	r3, [pc, #556]	; (800ad10 <HAL_UART_IRQHandler+0x2b0>)
 800aae4:	4013      	ands	r3, r2
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d106      	bne.n	800aaf8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aaea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800aaee:	4b89      	ldr	r3, [pc, #548]	; (800ad14 <HAL_UART_IRQHandler+0x2b4>)
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 8112 	beq.w	800ad1c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aaf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d011      	beq.n	800ab28 <HAL_UART_IRQHandler+0xc8>
 800ab04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00b      	beq.n	800ab28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2201      	movs	r2, #1
 800ab16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab1e:	f043 0201 	orr.w	r2, r3, #1
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab2c:	f003 0302 	and.w	r3, r3, #2
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d011      	beq.n	800ab58 <HAL_UART_IRQHandler+0xf8>
 800ab34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab38:	f003 0301 	and.w	r3, r3, #1
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2202      	movs	r2, #2
 800ab46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab4e:	f043 0204 	orr.w	r2, r3, #4
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab5c:	f003 0304 	and.w	r3, r3, #4
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d011      	beq.n	800ab88 <HAL_UART_IRQHandler+0x128>
 800ab64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab68:	f003 0301 	and.w	r3, r3, #1
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00b      	beq.n	800ab88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2204      	movs	r2, #4
 800ab76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab7e:	f043 0202 	orr.w	r2, r3, #2
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab8c:	f003 0308 	and.w	r3, r3, #8
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d017      	beq.n	800abc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab98:	f003 0320 	and.w	r3, r3, #32
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d105      	bne.n	800abac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aba0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aba4:	4b5a      	ldr	r3, [pc, #360]	; (800ad10 <HAL_UART_IRQHandler+0x2b0>)
 800aba6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00b      	beq.n	800abc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2208      	movs	r2, #8
 800abb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abba:	f043 0208 	orr.w	r2, r3, #8
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800abc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d012      	beq.n	800abf6 <HAL_UART_IRQHandler+0x196>
 800abd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00c      	beq.n	800abf6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abec:	f043 0220 	orr.w	r2, r3, #32
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f000 82c0 	beq.w	800b182 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac06:	f003 0320 	and.w	r3, r3, #32
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d013      	beq.n	800ac36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac12:	f003 0320 	and.w	r3, r3, #32
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d105      	bne.n	800ac26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d007      	beq.n	800ac36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d003      	beq.n	800ac36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4a:	2b40      	cmp	r3, #64	; 0x40
 800ac4c:	d005      	beq.n	800ac5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d04f      	beq.n	800acfa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f001 f9d4 	bl	800c008 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac6a:	2b40      	cmp	r3, #64	; 0x40
 800ac6c:	d141      	bne.n	800acf2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3308      	adds	r3, #8
 800ac74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ac7c:	e853 3f00 	ldrex	r3, [r3]
 800ac80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ac84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	3308      	adds	r3, #8
 800ac96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ac9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ac9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aca6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800acb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1d9      	bne.n	800ac6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d013      	beq.n	800acea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acc6:	4a14      	ldr	r2, [pc, #80]	; (800ad18 <HAL_UART_IRQHandler+0x2b8>)
 800acc8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fa f818 	bl	8004d04 <HAL_DMA_Abort_IT>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d017      	beq.n	800ad0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ace4:	4610      	mov	r0, r2
 800ace6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ace8:	e00f      	b.n	800ad0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fa60 	bl	800b1b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf0:	e00b      	b.n	800ad0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fa5c 	bl	800b1b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf8:	e007      	b.n	800ad0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fa58 	bl	800b1b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ad08:	e23b      	b.n	800b182 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad0a:	bf00      	nop
    return;
 800ad0c:	e239      	b.n	800b182 <HAL_UART_IRQHandler+0x722>
 800ad0e:	bf00      	nop
 800ad10:	10000001 	.word	0x10000001
 800ad14:	04000120 	.word	0x04000120
 800ad18:	0800c0d5 	.word	0x0800c0d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	f040 81ce 	bne.w	800b0c2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad2a:	f003 0310 	and.w	r3, r3, #16
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f000 81c7 	beq.w	800b0c2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad38:	f003 0310 	and.w	r3, r3, #16
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f000 81c0 	beq.w	800b0c2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2210      	movs	r2, #16
 800ad48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad54:	2b40      	cmp	r3, #64	; 0x40
 800ad56:	f040 813b 	bne.w	800afd0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a8b      	ldr	r2, [pc, #556]	; (800af90 <HAL_UART_IRQHandler+0x530>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d059      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a89      	ldr	r2, [pc, #548]	; (800af94 <HAL_UART_IRQHandler+0x534>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d053      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a87      	ldr	r2, [pc, #540]	; (800af98 <HAL_UART_IRQHandler+0x538>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d04d      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a85      	ldr	r2, [pc, #532]	; (800af9c <HAL_UART_IRQHandler+0x53c>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d047      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a83      	ldr	r2, [pc, #524]	; (800afa0 <HAL_UART_IRQHandler+0x540>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d041      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a81      	ldr	r2, [pc, #516]	; (800afa4 <HAL_UART_IRQHandler+0x544>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d03b      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a7f      	ldr	r2, [pc, #508]	; (800afa8 <HAL_UART_IRQHandler+0x548>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d035      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a7d      	ldr	r2, [pc, #500]	; (800afac <HAL_UART_IRQHandler+0x54c>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d02f      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a7b      	ldr	r2, [pc, #492]	; (800afb0 <HAL_UART_IRQHandler+0x550>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d029      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a79      	ldr	r2, [pc, #484]	; (800afb4 <HAL_UART_IRQHandler+0x554>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d023      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a77      	ldr	r2, [pc, #476]	; (800afb8 <HAL_UART_IRQHandler+0x558>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d01d      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a75      	ldr	r2, [pc, #468]	; (800afbc <HAL_UART_IRQHandler+0x55c>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d017      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a73      	ldr	r2, [pc, #460]	; (800afc0 <HAL_UART_IRQHandler+0x560>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d011      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a71      	ldr	r2, [pc, #452]	; (800afc4 <HAL_UART_IRQHandler+0x564>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d00b      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a6f      	ldr	r2, [pc, #444]	; (800afc8 <HAL_UART_IRQHandler+0x568>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d005      	beq.n	800ae1a <HAL_UART_IRQHandler+0x3ba>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a6d      	ldr	r2, [pc, #436]	; (800afcc <HAL_UART_IRQHandler+0x56c>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d105      	bne.n	800ae26 <HAL_UART_IRQHandler+0x3c6>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	e004      	b.n	800ae30 <HAL_UART_IRQHandler+0x3d0>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f000 81a4 	beq.w	800b186 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	f080 819c 	bcs.w	800b186 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae62:	f000 8086 	beq.w	800af72 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae72:	e853 3f00 	ldrex	r3, [r3]
 800ae76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ae7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ae94:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aea0:	e841 2300 	strex	r3, r2, [r1]
 800aea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1da      	bne.n	800ae66 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3308      	adds	r3, #8
 800aeb6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeba:	e853 3f00 	ldrex	r3, [r3]
 800aebe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aec0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aec2:	f023 0301 	bic.w	r3, r3, #1
 800aec6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	3308      	adds	r3, #8
 800aed0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aed4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aed8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeda:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aedc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aee0:	e841 2300 	strex	r3, r2, [r1]
 800aee4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aee6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1e1      	bne.n	800aeb0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3308      	adds	r3, #8
 800aef2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aef6:	e853 3f00 	ldrex	r3, [r3]
 800aefa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aefc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aefe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	3308      	adds	r3, #8
 800af0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800af10:	66fa      	str	r2, [r7, #108]	; 0x6c
 800af12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800af16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af18:	e841 2300 	strex	r3, r2, [r1]
 800af1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800af1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af20:	2b00      	cmp	r3, #0
 800af22:	d1e3      	bne.n	800aeec <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2220      	movs	r2, #32
 800af28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af3a:	e853 3f00 	ldrex	r3, [r3]
 800af3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af42:	f023 0310 	bic.w	r3, r3, #16
 800af46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af54:	65bb      	str	r3, [r7, #88]	; 0x58
 800af56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af5c:	e841 2300 	strex	r3, r2, [r1]
 800af60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af64:	2b00      	cmp	r3, #0
 800af66:	d1e4      	bne.n	800af32 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7f9 fbab 	bl	80046c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af7e:	b29b      	uxth	r3, r3
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	b29b      	uxth	r3, r3
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f91c 	bl	800b1c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af8c:	e0fb      	b.n	800b186 <HAL_UART_IRQHandler+0x726>
 800af8e:	bf00      	nop
 800af90:	40020010 	.word	0x40020010
 800af94:	40020028 	.word	0x40020028
 800af98:	40020040 	.word	0x40020040
 800af9c:	40020058 	.word	0x40020058
 800afa0:	40020070 	.word	0x40020070
 800afa4:	40020088 	.word	0x40020088
 800afa8:	400200a0 	.word	0x400200a0
 800afac:	400200b8 	.word	0x400200b8
 800afb0:	40020410 	.word	0x40020410
 800afb4:	40020428 	.word	0x40020428
 800afb8:	40020440 	.word	0x40020440
 800afbc:	40020458 	.word	0x40020458
 800afc0:	40020470 	.word	0x40020470
 800afc4:	40020488 	.word	0x40020488
 800afc8:	400204a0 	.word	0x400204a0
 800afcc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afdc:	b29b      	uxth	r3, r3
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afea:	b29b      	uxth	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	f000 80cc 	beq.w	800b18a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800aff2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f000 80c7 	beq.w	800b18a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b004:	e853 3f00 	ldrex	r3, [r3]
 800b008:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b00c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b010:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	461a      	mov	r2, r3
 800b01a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b01e:	647b      	str	r3, [r7, #68]	; 0x44
 800b020:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b026:	e841 2300 	strex	r3, r2, [r1]
 800b02a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1e4      	bne.n	800affc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	3308      	adds	r3, #8
 800b038:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	e853 3f00 	ldrex	r3, [r3]
 800b040:	623b      	str	r3, [r7, #32]
   return(result);
 800b042:	6a3a      	ldr	r2, [r7, #32]
 800b044:	4b54      	ldr	r3, [pc, #336]	; (800b198 <HAL_UART_IRQHandler+0x738>)
 800b046:	4013      	ands	r3, r2
 800b048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	3308      	adds	r3, #8
 800b052:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b056:	633a      	str	r2, [r7, #48]	; 0x30
 800b058:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b05e:	e841 2300 	strex	r3, r2, [r1]
 800b062:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1e3      	bne.n	800b032 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2220      	movs	r2, #32
 800b06e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	e853 3f00 	ldrex	r3, [r3]
 800b08a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f023 0310 	bic.w	r3, r3, #16
 800b092:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	461a      	mov	r2, r3
 800b09c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b0a0:	61fb      	str	r3, [r7, #28]
 800b0a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a4:	69b9      	ldr	r1, [r7, #24]
 800b0a6:	69fa      	ldr	r2, [r7, #28]
 800b0a8:	e841 2300 	strex	r3, r2, [r1]
 800b0ac:	617b      	str	r3, [r7, #20]
   return(result);
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1e4      	bne.n	800b07e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b0b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 f882 	bl	800b1c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b0c0:	e063      	b.n	800b18a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00e      	beq.n	800b0ec <HAL_UART_IRQHandler+0x68c>
 800b0ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d008      	beq.n	800b0ec <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b0e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f001 f836 	bl	800c156 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0ea:	e051      	b.n	800b190 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d014      	beq.n	800b122 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b0f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b100:	2b00      	cmp	r3, #0
 800b102:	d105      	bne.n	800b110 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d008      	beq.n	800b122 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b114:	2b00      	cmp	r3, #0
 800b116:	d03a      	beq.n	800b18e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	4798      	blx	r3
    }
    return;
 800b120:	e035      	b.n	800b18e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d009      	beq.n	800b142 <HAL_UART_IRQHandler+0x6e2>
 800b12e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 ffe0 	bl	800c100 <UART_EndTransmit_IT>
    return;
 800b140:	e026      	b.n	800b190 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d009      	beq.n	800b162 <HAL_UART_IRQHandler+0x702>
 800b14e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b152:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d003      	beq.n	800b162 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f001 f80f 	bl	800c17e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b160:	e016      	b.n	800b190 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d010      	beq.n	800b190 <HAL_UART_IRQHandler+0x730>
 800b16e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b172:	2b00      	cmp	r3, #0
 800b174:	da0c      	bge.n	800b190 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fff7 	bl	800c16a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b17c:	e008      	b.n	800b190 <HAL_UART_IRQHandler+0x730>
      return;
 800b17e:	bf00      	nop
 800b180:	e006      	b.n	800b190 <HAL_UART_IRQHandler+0x730>
    return;
 800b182:	bf00      	nop
 800b184:	e004      	b.n	800b190 <HAL_UART_IRQHandler+0x730>
      return;
 800b186:	bf00      	nop
 800b188:	e002      	b.n	800b190 <HAL_UART_IRQHandler+0x730>
      return;
 800b18a:	bf00      	nop
 800b18c:	e000      	b.n	800b190 <HAL_UART_IRQHandler+0x730>
    return;
 800b18e:	bf00      	nop
  }
}
 800b190:	37e8      	adds	r7, #232	; 0xe8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	effffffe 	.word	0xeffffffe

0800b19c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1dc:	b5b0      	push	{r4, r5, r7, lr}
 800b1de:	b08e      	sub	sp, #56	; 0x38
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	689a      	ldr	r2, [r3, #8]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	431a      	orrs	r2, r3
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	695b      	ldr	r3, [r3, #20]
 800b1f8:	431a      	orrs	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	69db      	ldr	r3, [r3, #28]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	4bbf      	ldr	r3, [pc, #764]	; (800b508 <UART_SetConfig+0x32c>)
 800b20a:	4013      	ands	r3, r2
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	6812      	ldr	r2, [r2, #0]
 800b210:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b212:	430b      	orrs	r3, r1
 800b214:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	68da      	ldr	r2, [r3, #12]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	430a      	orrs	r2, r1
 800b22a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4ab5      	ldr	r2, [pc, #724]	; (800b50c <UART_SetConfig+0x330>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d004      	beq.n	800b246 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a1b      	ldr	r3, [r3, #32]
 800b240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b242:	4313      	orrs	r3, r2
 800b244:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	689a      	ldr	r2, [r3, #8]
 800b24c:	4bb0      	ldr	r3, [pc, #704]	; (800b510 <UART_SetConfig+0x334>)
 800b24e:	4013      	ands	r3, r2
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	6812      	ldr	r2, [r2, #0]
 800b254:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b256:	430b      	orrs	r3, r1
 800b258:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b260:	f023 010f 	bic.w	r1, r3, #15
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	430a      	orrs	r2, r1
 800b26e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4aa7      	ldr	r2, [pc, #668]	; (800b514 <UART_SetConfig+0x338>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d176      	bne.n	800b368 <UART_SetConfig+0x18c>
 800b27a:	4ba7      	ldr	r3, [pc, #668]	; (800b518 <UART_SetConfig+0x33c>)
 800b27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b27e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b282:	2b28      	cmp	r3, #40	; 0x28
 800b284:	d86c      	bhi.n	800b360 <UART_SetConfig+0x184>
 800b286:	a201      	add	r2, pc, #4	; (adr r2, 800b28c <UART_SetConfig+0xb0>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b331 	.word	0x0800b331
 800b290:	0800b361 	.word	0x0800b361
 800b294:	0800b361 	.word	0x0800b361
 800b298:	0800b361 	.word	0x0800b361
 800b29c:	0800b361 	.word	0x0800b361
 800b2a0:	0800b361 	.word	0x0800b361
 800b2a4:	0800b361 	.word	0x0800b361
 800b2a8:	0800b361 	.word	0x0800b361
 800b2ac:	0800b339 	.word	0x0800b339
 800b2b0:	0800b361 	.word	0x0800b361
 800b2b4:	0800b361 	.word	0x0800b361
 800b2b8:	0800b361 	.word	0x0800b361
 800b2bc:	0800b361 	.word	0x0800b361
 800b2c0:	0800b361 	.word	0x0800b361
 800b2c4:	0800b361 	.word	0x0800b361
 800b2c8:	0800b361 	.word	0x0800b361
 800b2cc:	0800b341 	.word	0x0800b341
 800b2d0:	0800b361 	.word	0x0800b361
 800b2d4:	0800b361 	.word	0x0800b361
 800b2d8:	0800b361 	.word	0x0800b361
 800b2dc:	0800b361 	.word	0x0800b361
 800b2e0:	0800b361 	.word	0x0800b361
 800b2e4:	0800b361 	.word	0x0800b361
 800b2e8:	0800b361 	.word	0x0800b361
 800b2ec:	0800b349 	.word	0x0800b349
 800b2f0:	0800b361 	.word	0x0800b361
 800b2f4:	0800b361 	.word	0x0800b361
 800b2f8:	0800b361 	.word	0x0800b361
 800b2fc:	0800b361 	.word	0x0800b361
 800b300:	0800b361 	.word	0x0800b361
 800b304:	0800b361 	.word	0x0800b361
 800b308:	0800b361 	.word	0x0800b361
 800b30c:	0800b351 	.word	0x0800b351
 800b310:	0800b361 	.word	0x0800b361
 800b314:	0800b361 	.word	0x0800b361
 800b318:	0800b361 	.word	0x0800b361
 800b31c:	0800b361 	.word	0x0800b361
 800b320:	0800b361 	.word	0x0800b361
 800b324:	0800b361 	.word	0x0800b361
 800b328:	0800b361 	.word	0x0800b361
 800b32c:	0800b359 	.word	0x0800b359
 800b330:	2301      	movs	r3, #1
 800b332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b336:	e222      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b338:	2304      	movs	r3, #4
 800b33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b33e:	e21e      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b340:	2308      	movs	r3, #8
 800b342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b346:	e21a      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b348:	2310      	movs	r3, #16
 800b34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b34e:	e216      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b350:	2320      	movs	r3, #32
 800b352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b356:	e212      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b358:	2340      	movs	r3, #64	; 0x40
 800b35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b35e:	e20e      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b360:	2380      	movs	r3, #128	; 0x80
 800b362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b366:	e20a      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a6b      	ldr	r2, [pc, #428]	; (800b51c <UART_SetConfig+0x340>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d130      	bne.n	800b3d4 <UART_SetConfig+0x1f8>
 800b372:	4b69      	ldr	r3, [pc, #420]	; (800b518 <UART_SetConfig+0x33c>)
 800b374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b376:	f003 0307 	and.w	r3, r3, #7
 800b37a:	2b05      	cmp	r3, #5
 800b37c:	d826      	bhi.n	800b3cc <UART_SetConfig+0x1f0>
 800b37e:	a201      	add	r2, pc, #4	; (adr r2, 800b384 <UART_SetConfig+0x1a8>)
 800b380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b384:	0800b39d 	.word	0x0800b39d
 800b388:	0800b3a5 	.word	0x0800b3a5
 800b38c:	0800b3ad 	.word	0x0800b3ad
 800b390:	0800b3b5 	.word	0x0800b3b5
 800b394:	0800b3bd 	.word	0x0800b3bd
 800b398:	0800b3c5 	.word	0x0800b3c5
 800b39c:	2300      	movs	r3, #0
 800b39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3a2:	e1ec      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b3a4:	2304      	movs	r3, #4
 800b3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3aa:	e1e8      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b3ac:	2308      	movs	r3, #8
 800b3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3b2:	e1e4      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b3b4:	2310      	movs	r3, #16
 800b3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ba:	e1e0      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b3bc:	2320      	movs	r3, #32
 800b3be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3c2:	e1dc      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b3c4:	2340      	movs	r3, #64	; 0x40
 800b3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ca:	e1d8      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b3cc:	2380      	movs	r3, #128	; 0x80
 800b3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3d2:	e1d4      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a51      	ldr	r2, [pc, #324]	; (800b520 <UART_SetConfig+0x344>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d130      	bne.n	800b440 <UART_SetConfig+0x264>
 800b3de:	4b4e      	ldr	r3, [pc, #312]	; (800b518 <UART_SetConfig+0x33c>)
 800b3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e2:	f003 0307 	and.w	r3, r3, #7
 800b3e6:	2b05      	cmp	r3, #5
 800b3e8:	d826      	bhi.n	800b438 <UART_SetConfig+0x25c>
 800b3ea:	a201      	add	r2, pc, #4	; (adr r2, 800b3f0 <UART_SetConfig+0x214>)
 800b3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f0:	0800b409 	.word	0x0800b409
 800b3f4:	0800b411 	.word	0x0800b411
 800b3f8:	0800b419 	.word	0x0800b419
 800b3fc:	0800b421 	.word	0x0800b421
 800b400:	0800b429 	.word	0x0800b429
 800b404:	0800b431 	.word	0x0800b431
 800b408:	2300      	movs	r3, #0
 800b40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b40e:	e1b6      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b410:	2304      	movs	r3, #4
 800b412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b416:	e1b2      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b418:	2308      	movs	r3, #8
 800b41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b41e:	e1ae      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b420:	2310      	movs	r3, #16
 800b422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b426:	e1aa      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b428:	2320      	movs	r3, #32
 800b42a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b42e:	e1a6      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b430:	2340      	movs	r3, #64	; 0x40
 800b432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b436:	e1a2      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b438:	2380      	movs	r3, #128	; 0x80
 800b43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b43e:	e19e      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a37      	ldr	r2, [pc, #220]	; (800b524 <UART_SetConfig+0x348>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d130      	bne.n	800b4ac <UART_SetConfig+0x2d0>
 800b44a:	4b33      	ldr	r3, [pc, #204]	; (800b518 <UART_SetConfig+0x33c>)
 800b44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b44e:	f003 0307 	and.w	r3, r3, #7
 800b452:	2b05      	cmp	r3, #5
 800b454:	d826      	bhi.n	800b4a4 <UART_SetConfig+0x2c8>
 800b456:	a201      	add	r2, pc, #4	; (adr r2, 800b45c <UART_SetConfig+0x280>)
 800b458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45c:	0800b475 	.word	0x0800b475
 800b460:	0800b47d 	.word	0x0800b47d
 800b464:	0800b485 	.word	0x0800b485
 800b468:	0800b48d 	.word	0x0800b48d
 800b46c:	0800b495 	.word	0x0800b495
 800b470:	0800b49d 	.word	0x0800b49d
 800b474:	2300      	movs	r3, #0
 800b476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b47a:	e180      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b47c:	2304      	movs	r3, #4
 800b47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b482:	e17c      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b484:	2308      	movs	r3, #8
 800b486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b48a:	e178      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b48c:	2310      	movs	r3, #16
 800b48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b492:	e174      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b494:	2320      	movs	r3, #32
 800b496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b49a:	e170      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b49c:	2340      	movs	r3, #64	; 0x40
 800b49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4a2:	e16c      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b4a4:	2380      	movs	r3, #128	; 0x80
 800b4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4aa:	e168      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a1d      	ldr	r2, [pc, #116]	; (800b528 <UART_SetConfig+0x34c>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d142      	bne.n	800b53c <UART_SetConfig+0x360>
 800b4b6:	4b18      	ldr	r3, [pc, #96]	; (800b518 <UART_SetConfig+0x33c>)
 800b4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ba:	f003 0307 	and.w	r3, r3, #7
 800b4be:	2b05      	cmp	r3, #5
 800b4c0:	d838      	bhi.n	800b534 <UART_SetConfig+0x358>
 800b4c2:	a201      	add	r2, pc, #4	; (adr r2, 800b4c8 <UART_SetConfig+0x2ec>)
 800b4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c8:	0800b4e1 	.word	0x0800b4e1
 800b4cc:	0800b4e9 	.word	0x0800b4e9
 800b4d0:	0800b4f1 	.word	0x0800b4f1
 800b4d4:	0800b4f9 	.word	0x0800b4f9
 800b4d8:	0800b501 	.word	0x0800b501
 800b4dc:	0800b52d 	.word	0x0800b52d
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4e6:	e14a      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b4e8:	2304      	movs	r3, #4
 800b4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ee:	e146      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b4f0:	2308      	movs	r3, #8
 800b4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4f6:	e142      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b4f8:	2310      	movs	r3, #16
 800b4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4fe:	e13e      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b500:	2320      	movs	r3, #32
 800b502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b506:	e13a      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b508:	cfff69f3 	.word	0xcfff69f3
 800b50c:	58000c00 	.word	0x58000c00
 800b510:	11fff4ff 	.word	0x11fff4ff
 800b514:	40011000 	.word	0x40011000
 800b518:	58024400 	.word	0x58024400
 800b51c:	40004400 	.word	0x40004400
 800b520:	40004800 	.word	0x40004800
 800b524:	40004c00 	.word	0x40004c00
 800b528:	40005000 	.word	0x40005000
 800b52c:	2340      	movs	r3, #64	; 0x40
 800b52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b532:	e124      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b534:	2380      	movs	r3, #128	; 0x80
 800b536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b53a:	e120      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4acc      	ldr	r2, [pc, #816]	; (800b874 <UART_SetConfig+0x698>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d176      	bne.n	800b634 <UART_SetConfig+0x458>
 800b546:	4bcc      	ldr	r3, [pc, #816]	; (800b878 <UART_SetConfig+0x69c>)
 800b548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b54a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b54e:	2b28      	cmp	r3, #40	; 0x28
 800b550:	d86c      	bhi.n	800b62c <UART_SetConfig+0x450>
 800b552:	a201      	add	r2, pc, #4	; (adr r2, 800b558 <UART_SetConfig+0x37c>)
 800b554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b558:	0800b5fd 	.word	0x0800b5fd
 800b55c:	0800b62d 	.word	0x0800b62d
 800b560:	0800b62d 	.word	0x0800b62d
 800b564:	0800b62d 	.word	0x0800b62d
 800b568:	0800b62d 	.word	0x0800b62d
 800b56c:	0800b62d 	.word	0x0800b62d
 800b570:	0800b62d 	.word	0x0800b62d
 800b574:	0800b62d 	.word	0x0800b62d
 800b578:	0800b605 	.word	0x0800b605
 800b57c:	0800b62d 	.word	0x0800b62d
 800b580:	0800b62d 	.word	0x0800b62d
 800b584:	0800b62d 	.word	0x0800b62d
 800b588:	0800b62d 	.word	0x0800b62d
 800b58c:	0800b62d 	.word	0x0800b62d
 800b590:	0800b62d 	.word	0x0800b62d
 800b594:	0800b62d 	.word	0x0800b62d
 800b598:	0800b60d 	.word	0x0800b60d
 800b59c:	0800b62d 	.word	0x0800b62d
 800b5a0:	0800b62d 	.word	0x0800b62d
 800b5a4:	0800b62d 	.word	0x0800b62d
 800b5a8:	0800b62d 	.word	0x0800b62d
 800b5ac:	0800b62d 	.word	0x0800b62d
 800b5b0:	0800b62d 	.word	0x0800b62d
 800b5b4:	0800b62d 	.word	0x0800b62d
 800b5b8:	0800b615 	.word	0x0800b615
 800b5bc:	0800b62d 	.word	0x0800b62d
 800b5c0:	0800b62d 	.word	0x0800b62d
 800b5c4:	0800b62d 	.word	0x0800b62d
 800b5c8:	0800b62d 	.word	0x0800b62d
 800b5cc:	0800b62d 	.word	0x0800b62d
 800b5d0:	0800b62d 	.word	0x0800b62d
 800b5d4:	0800b62d 	.word	0x0800b62d
 800b5d8:	0800b61d 	.word	0x0800b61d
 800b5dc:	0800b62d 	.word	0x0800b62d
 800b5e0:	0800b62d 	.word	0x0800b62d
 800b5e4:	0800b62d 	.word	0x0800b62d
 800b5e8:	0800b62d 	.word	0x0800b62d
 800b5ec:	0800b62d 	.word	0x0800b62d
 800b5f0:	0800b62d 	.word	0x0800b62d
 800b5f4:	0800b62d 	.word	0x0800b62d
 800b5f8:	0800b625 	.word	0x0800b625
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b602:	e0bc      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b604:	2304      	movs	r3, #4
 800b606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b60a:	e0b8      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b60c:	2308      	movs	r3, #8
 800b60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b612:	e0b4      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b614:	2310      	movs	r3, #16
 800b616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b61a:	e0b0      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b61c:	2320      	movs	r3, #32
 800b61e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b622:	e0ac      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b624:	2340      	movs	r3, #64	; 0x40
 800b626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b62a:	e0a8      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b62c:	2380      	movs	r3, #128	; 0x80
 800b62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b632:	e0a4      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a90      	ldr	r2, [pc, #576]	; (800b87c <UART_SetConfig+0x6a0>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d130      	bne.n	800b6a0 <UART_SetConfig+0x4c4>
 800b63e:	4b8e      	ldr	r3, [pc, #568]	; (800b878 <UART_SetConfig+0x69c>)
 800b640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b642:	f003 0307 	and.w	r3, r3, #7
 800b646:	2b05      	cmp	r3, #5
 800b648:	d826      	bhi.n	800b698 <UART_SetConfig+0x4bc>
 800b64a:	a201      	add	r2, pc, #4	; (adr r2, 800b650 <UART_SetConfig+0x474>)
 800b64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b650:	0800b669 	.word	0x0800b669
 800b654:	0800b671 	.word	0x0800b671
 800b658:	0800b679 	.word	0x0800b679
 800b65c:	0800b681 	.word	0x0800b681
 800b660:	0800b689 	.word	0x0800b689
 800b664:	0800b691 	.word	0x0800b691
 800b668:	2300      	movs	r3, #0
 800b66a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b66e:	e086      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b670:	2304      	movs	r3, #4
 800b672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b676:	e082      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b678:	2308      	movs	r3, #8
 800b67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b67e:	e07e      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b680:	2310      	movs	r3, #16
 800b682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b686:	e07a      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b688:	2320      	movs	r3, #32
 800b68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b68e:	e076      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b690:	2340      	movs	r3, #64	; 0x40
 800b692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b696:	e072      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b698:	2380      	movs	r3, #128	; 0x80
 800b69a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b69e:	e06e      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a76      	ldr	r2, [pc, #472]	; (800b880 <UART_SetConfig+0x6a4>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d130      	bne.n	800b70c <UART_SetConfig+0x530>
 800b6aa:	4b73      	ldr	r3, [pc, #460]	; (800b878 <UART_SetConfig+0x69c>)
 800b6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ae:	f003 0307 	and.w	r3, r3, #7
 800b6b2:	2b05      	cmp	r3, #5
 800b6b4:	d826      	bhi.n	800b704 <UART_SetConfig+0x528>
 800b6b6:	a201      	add	r2, pc, #4	; (adr r2, 800b6bc <UART_SetConfig+0x4e0>)
 800b6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6bc:	0800b6d5 	.word	0x0800b6d5
 800b6c0:	0800b6dd 	.word	0x0800b6dd
 800b6c4:	0800b6e5 	.word	0x0800b6e5
 800b6c8:	0800b6ed 	.word	0x0800b6ed
 800b6cc:	0800b6f5 	.word	0x0800b6f5
 800b6d0:	0800b6fd 	.word	0x0800b6fd
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6da:	e050      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b6dc:	2304      	movs	r3, #4
 800b6de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6e2:	e04c      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b6e4:	2308      	movs	r3, #8
 800b6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6ea:	e048      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b6ec:	2310      	movs	r3, #16
 800b6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6f2:	e044      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b6f4:	2320      	movs	r3, #32
 800b6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6fa:	e040      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b6fc:	2340      	movs	r3, #64	; 0x40
 800b6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b702:	e03c      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b704:	2380      	movs	r3, #128	; 0x80
 800b706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b70a:	e038      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a5c      	ldr	r2, [pc, #368]	; (800b884 <UART_SetConfig+0x6a8>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d130      	bne.n	800b778 <UART_SetConfig+0x59c>
 800b716:	4b58      	ldr	r3, [pc, #352]	; (800b878 <UART_SetConfig+0x69c>)
 800b718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b71a:	f003 0307 	and.w	r3, r3, #7
 800b71e:	2b05      	cmp	r3, #5
 800b720:	d826      	bhi.n	800b770 <UART_SetConfig+0x594>
 800b722:	a201      	add	r2, pc, #4	; (adr r2, 800b728 <UART_SetConfig+0x54c>)
 800b724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b728:	0800b741 	.word	0x0800b741
 800b72c:	0800b749 	.word	0x0800b749
 800b730:	0800b751 	.word	0x0800b751
 800b734:	0800b759 	.word	0x0800b759
 800b738:	0800b761 	.word	0x0800b761
 800b73c:	0800b769 	.word	0x0800b769
 800b740:	2302      	movs	r3, #2
 800b742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b746:	e01a      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b748:	2304      	movs	r3, #4
 800b74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b74e:	e016      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b750:	2308      	movs	r3, #8
 800b752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b756:	e012      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b758:	2310      	movs	r3, #16
 800b75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b75e:	e00e      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b760:	2320      	movs	r3, #32
 800b762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b766:	e00a      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b768:	2340      	movs	r3, #64	; 0x40
 800b76a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b76e:	e006      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b770:	2380      	movs	r3, #128	; 0x80
 800b772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b776:	e002      	b.n	800b77e <UART_SetConfig+0x5a2>
 800b778:	2380      	movs	r3, #128	; 0x80
 800b77a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a40      	ldr	r2, [pc, #256]	; (800b884 <UART_SetConfig+0x6a8>)
 800b784:	4293      	cmp	r3, r2
 800b786:	f040 80ef 	bne.w	800b968 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b78a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b78e:	2b20      	cmp	r3, #32
 800b790:	dc46      	bgt.n	800b820 <UART_SetConfig+0x644>
 800b792:	2b02      	cmp	r3, #2
 800b794:	f2c0 8081 	blt.w	800b89a <UART_SetConfig+0x6be>
 800b798:	3b02      	subs	r3, #2
 800b79a:	2b1e      	cmp	r3, #30
 800b79c:	d87d      	bhi.n	800b89a <UART_SetConfig+0x6be>
 800b79e:	a201      	add	r2, pc, #4	; (adr r2, 800b7a4 <UART_SetConfig+0x5c8>)
 800b7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a4:	0800b827 	.word	0x0800b827
 800b7a8:	0800b89b 	.word	0x0800b89b
 800b7ac:	0800b82f 	.word	0x0800b82f
 800b7b0:	0800b89b 	.word	0x0800b89b
 800b7b4:	0800b89b 	.word	0x0800b89b
 800b7b8:	0800b89b 	.word	0x0800b89b
 800b7bc:	0800b83f 	.word	0x0800b83f
 800b7c0:	0800b89b 	.word	0x0800b89b
 800b7c4:	0800b89b 	.word	0x0800b89b
 800b7c8:	0800b89b 	.word	0x0800b89b
 800b7cc:	0800b89b 	.word	0x0800b89b
 800b7d0:	0800b89b 	.word	0x0800b89b
 800b7d4:	0800b89b 	.word	0x0800b89b
 800b7d8:	0800b89b 	.word	0x0800b89b
 800b7dc:	0800b84f 	.word	0x0800b84f
 800b7e0:	0800b89b 	.word	0x0800b89b
 800b7e4:	0800b89b 	.word	0x0800b89b
 800b7e8:	0800b89b 	.word	0x0800b89b
 800b7ec:	0800b89b 	.word	0x0800b89b
 800b7f0:	0800b89b 	.word	0x0800b89b
 800b7f4:	0800b89b 	.word	0x0800b89b
 800b7f8:	0800b89b 	.word	0x0800b89b
 800b7fc:	0800b89b 	.word	0x0800b89b
 800b800:	0800b89b 	.word	0x0800b89b
 800b804:	0800b89b 	.word	0x0800b89b
 800b808:	0800b89b 	.word	0x0800b89b
 800b80c:	0800b89b 	.word	0x0800b89b
 800b810:	0800b89b 	.word	0x0800b89b
 800b814:	0800b89b 	.word	0x0800b89b
 800b818:	0800b89b 	.word	0x0800b89b
 800b81c:	0800b88d 	.word	0x0800b88d
 800b820:	2b40      	cmp	r3, #64	; 0x40
 800b822:	d036      	beq.n	800b892 <UART_SetConfig+0x6b6>
 800b824:	e039      	b.n	800b89a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b826:	f7fc ff2d 	bl	8008684 <HAL_RCCEx_GetD3PCLK1Freq>
 800b82a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b82c:	e03b      	b.n	800b8a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b82e:	f107 0314 	add.w	r3, r7, #20
 800b832:	4618      	mov	r0, r3
 800b834:	f7fc ff3c 	bl	80086b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b83c:	e033      	b.n	800b8a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b83e:	f107 0308 	add.w	r3, r7, #8
 800b842:	4618      	mov	r0, r3
 800b844:	f7fd f888 	bl	8008958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b84c:	e02b      	b.n	800b8a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b84e:	4b0a      	ldr	r3, [pc, #40]	; (800b878 <UART_SetConfig+0x69c>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 0320 	and.w	r3, r3, #32
 800b856:	2b00      	cmp	r3, #0
 800b858:	d009      	beq.n	800b86e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b85a:	4b07      	ldr	r3, [pc, #28]	; (800b878 <UART_SetConfig+0x69c>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	08db      	lsrs	r3, r3, #3
 800b860:	f003 0303 	and.w	r3, r3, #3
 800b864:	4a08      	ldr	r2, [pc, #32]	; (800b888 <UART_SetConfig+0x6ac>)
 800b866:	fa22 f303 	lsr.w	r3, r2, r3
 800b86a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b86c:	e01b      	b.n	800b8a6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b86e:	4b06      	ldr	r3, [pc, #24]	; (800b888 <UART_SetConfig+0x6ac>)
 800b870:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b872:	e018      	b.n	800b8a6 <UART_SetConfig+0x6ca>
 800b874:	40011400 	.word	0x40011400
 800b878:	58024400 	.word	0x58024400
 800b87c:	40007800 	.word	0x40007800
 800b880:	40007c00 	.word	0x40007c00
 800b884:	58000c00 	.word	0x58000c00
 800b888:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b88c:	4bc4      	ldr	r3, [pc, #784]	; (800bba0 <UART_SetConfig+0x9c4>)
 800b88e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b890:	e009      	b.n	800b8a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b896:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b898:	e005      	b.n	800b8a6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b89a:	2300      	movs	r3, #0
 800b89c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b8a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f000 81da 	beq.w	800bc62 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	4abc      	ldr	r2, [pc, #752]	; (800bba4 <UART_SetConfig+0x9c8>)
 800b8b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8c0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	685a      	ldr	r2, [r3, #4]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	005b      	lsls	r3, r3, #1
 800b8ca:	4413      	add	r3, r2
 800b8cc:	6a3a      	ldr	r2, [r7, #32]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d305      	bcc.n	800b8de <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8d8:	6a3a      	ldr	r2, [r7, #32]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d903      	bls.n	800b8e6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b8e4:	e1bd      	b.n	800bc62 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f04f 0100 	mov.w	r1, #0
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	4aac      	ldr	r2, [pc, #688]	; (800bba4 <UART_SetConfig+0x9c8>)
 800b8f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	f04f 0300 	mov.w	r3, #0
 800b8fe:	f7f4 ff03 	bl	8000708 <__aeabi_uldivmod>
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	4610      	mov	r0, r2
 800b908:	4619      	mov	r1, r3
 800b90a:	f04f 0200 	mov.w	r2, #0
 800b90e:	f04f 0300 	mov.w	r3, #0
 800b912:	020b      	lsls	r3, r1, #8
 800b914:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b918:	0202      	lsls	r2, r0, #8
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	6849      	ldr	r1, [r1, #4]
 800b91e:	0849      	lsrs	r1, r1, #1
 800b920:	4608      	mov	r0, r1
 800b922:	f04f 0100 	mov.w	r1, #0
 800b926:	1814      	adds	r4, r2, r0
 800b928:	eb43 0501 	adc.w	r5, r3, r1
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	461a      	mov	r2, r3
 800b932:	f04f 0300 	mov.w	r3, #0
 800b936:	4620      	mov	r0, r4
 800b938:	4629      	mov	r1, r5
 800b93a:	f7f4 fee5 	bl	8000708 <__aeabi_uldivmod>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	4613      	mov	r3, r2
 800b944:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b94c:	d308      	bcc.n	800b960 <UART_SetConfig+0x784>
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b954:	d204      	bcs.n	800b960 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b95c:	60da      	str	r2, [r3, #12]
 800b95e:	e180      	b.n	800bc62 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b966:	e17c      	b.n	800bc62 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	69db      	ldr	r3, [r3, #28]
 800b96c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b970:	f040 80be 	bne.w	800baf0 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800b974:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b978:	2b20      	cmp	r3, #32
 800b97a:	dc49      	bgt.n	800ba10 <UART_SetConfig+0x834>
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	db7c      	blt.n	800ba7a <UART_SetConfig+0x89e>
 800b980:	2b20      	cmp	r3, #32
 800b982:	d87a      	bhi.n	800ba7a <UART_SetConfig+0x89e>
 800b984:	a201      	add	r2, pc, #4	; (adr r2, 800b98c <UART_SetConfig+0x7b0>)
 800b986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98a:	bf00      	nop
 800b98c:	0800ba17 	.word	0x0800ba17
 800b990:	0800ba1f 	.word	0x0800ba1f
 800b994:	0800ba7b 	.word	0x0800ba7b
 800b998:	0800ba7b 	.word	0x0800ba7b
 800b99c:	0800ba27 	.word	0x0800ba27
 800b9a0:	0800ba7b 	.word	0x0800ba7b
 800b9a4:	0800ba7b 	.word	0x0800ba7b
 800b9a8:	0800ba7b 	.word	0x0800ba7b
 800b9ac:	0800ba37 	.word	0x0800ba37
 800b9b0:	0800ba7b 	.word	0x0800ba7b
 800b9b4:	0800ba7b 	.word	0x0800ba7b
 800b9b8:	0800ba7b 	.word	0x0800ba7b
 800b9bc:	0800ba7b 	.word	0x0800ba7b
 800b9c0:	0800ba7b 	.word	0x0800ba7b
 800b9c4:	0800ba7b 	.word	0x0800ba7b
 800b9c8:	0800ba7b 	.word	0x0800ba7b
 800b9cc:	0800ba47 	.word	0x0800ba47
 800b9d0:	0800ba7b 	.word	0x0800ba7b
 800b9d4:	0800ba7b 	.word	0x0800ba7b
 800b9d8:	0800ba7b 	.word	0x0800ba7b
 800b9dc:	0800ba7b 	.word	0x0800ba7b
 800b9e0:	0800ba7b 	.word	0x0800ba7b
 800b9e4:	0800ba7b 	.word	0x0800ba7b
 800b9e8:	0800ba7b 	.word	0x0800ba7b
 800b9ec:	0800ba7b 	.word	0x0800ba7b
 800b9f0:	0800ba7b 	.word	0x0800ba7b
 800b9f4:	0800ba7b 	.word	0x0800ba7b
 800b9f8:	0800ba7b 	.word	0x0800ba7b
 800b9fc:	0800ba7b 	.word	0x0800ba7b
 800ba00:	0800ba7b 	.word	0x0800ba7b
 800ba04:	0800ba7b 	.word	0x0800ba7b
 800ba08:	0800ba7b 	.word	0x0800ba7b
 800ba0c:	0800ba6d 	.word	0x0800ba6d
 800ba10:	2b40      	cmp	r3, #64	; 0x40
 800ba12:	d02e      	beq.n	800ba72 <UART_SetConfig+0x896>
 800ba14:	e031      	b.n	800ba7a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba16:	f7fb fec9 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 800ba1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba1c:	e033      	b.n	800ba86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba1e:	f7fb fedb 	bl	80077d8 <HAL_RCC_GetPCLK2Freq>
 800ba22:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba24:	e02f      	b.n	800ba86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba26:	f107 0314 	add.w	r3, r7, #20
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fc fe40 	bl	80086b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba34:	e027      	b.n	800ba86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba36:	f107 0308 	add.w	r3, r7, #8
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fc ff8c 	bl	8008958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba44:	e01f      	b.n	800ba86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba46:	4b58      	ldr	r3, [pc, #352]	; (800bba8 <UART_SetConfig+0x9cc>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f003 0320 	and.w	r3, r3, #32
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d009      	beq.n	800ba66 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba52:	4b55      	ldr	r3, [pc, #340]	; (800bba8 <UART_SetConfig+0x9cc>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	08db      	lsrs	r3, r3, #3
 800ba58:	f003 0303 	and.w	r3, r3, #3
 800ba5c:	4a53      	ldr	r2, [pc, #332]	; (800bbac <UART_SetConfig+0x9d0>)
 800ba5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba64:	e00f      	b.n	800ba86 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ba66:	4b51      	ldr	r3, [pc, #324]	; (800bbac <UART_SetConfig+0x9d0>)
 800ba68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba6a:	e00c      	b.n	800ba86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba6c:	4b4c      	ldr	r3, [pc, #304]	; (800bba0 <UART_SetConfig+0x9c4>)
 800ba6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba70:	e009      	b.n	800ba86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba78:	e005      	b.n	800ba86 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ba84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 80ea 	beq.w	800bc62 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba92:	4a44      	ldr	r2, [pc, #272]	; (800bba4 <UART_SetConfig+0x9c8>)
 800ba94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800baa0:	005a      	lsls	r2, r3, #1
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	085b      	lsrs	r3, r3, #1
 800baa8:	441a      	add	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	fbb2 f3f3 	udiv	r3, r2, r3
 800bab2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab6:	2b0f      	cmp	r3, #15
 800bab8:	d916      	bls.n	800bae8 <UART_SetConfig+0x90c>
 800baba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bac0:	d212      	bcs.n	800bae8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	f023 030f 	bic.w	r3, r3, #15
 800baca:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	085b      	lsrs	r3, r3, #1
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	f003 0307 	and.w	r3, r3, #7
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bada:	4313      	orrs	r3, r2
 800badc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bae4:	60da      	str	r2, [r3, #12]
 800bae6:	e0bc      	b.n	800bc62 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800bae8:	2301      	movs	r3, #1
 800baea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800baee:	e0b8      	b.n	800bc62 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800baf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800baf4:	2b20      	cmp	r3, #32
 800baf6:	dc4b      	bgt.n	800bb90 <UART_SetConfig+0x9b4>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f2c0 8087 	blt.w	800bc0c <UART_SetConfig+0xa30>
 800bafe:	2b20      	cmp	r3, #32
 800bb00:	f200 8084 	bhi.w	800bc0c <UART_SetConfig+0xa30>
 800bb04:	a201      	add	r2, pc, #4	; (adr r2, 800bb0c <UART_SetConfig+0x930>)
 800bb06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0a:	bf00      	nop
 800bb0c:	0800bb97 	.word	0x0800bb97
 800bb10:	0800bbb1 	.word	0x0800bbb1
 800bb14:	0800bc0d 	.word	0x0800bc0d
 800bb18:	0800bc0d 	.word	0x0800bc0d
 800bb1c:	0800bbb9 	.word	0x0800bbb9
 800bb20:	0800bc0d 	.word	0x0800bc0d
 800bb24:	0800bc0d 	.word	0x0800bc0d
 800bb28:	0800bc0d 	.word	0x0800bc0d
 800bb2c:	0800bbc9 	.word	0x0800bbc9
 800bb30:	0800bc0d 	.word	0x0800bc0d
 800bb34:	0800bc0d 	.word	0x0800bc0d
 800bb38:	0800bc0d 	.word	0x0800bc0d
 800bb3c:	0800bc0d 	.word	0x0800bc0d
 800bb40:	0800bc0d 	.word	0x0800bc0d
 800bb44:	0800bc0d 	.word	0x0800bc0d
 800bb48:	0800bc0d 	.word	0x0800bc0d
 800bb4c:	0800bbd9 	.word	0x0800bbd9
 800bb50:	0800bc0d 	.word	0x0800bc0d
 800bb54:	0800bc0d 	.word	0x0800bc0d
 800bb58:	0800bc0d 	.word	0x0800bc0d
 800bb5c:	0800bc0d 	.word	0x0800bc0d
 800bb60:	0800bc0d 	.word	0x0800bc0d
 800bb64:	0800bc0d 	.word	0x0800bc0d
 800bb68:	0800bc0d 	.word	0x0800bc0d
 800bb6c:	0800bc0d 	.word	0x0800bc0d
 800bb70:	0800bc0d 	.word	0x0800bc0d
 800bb74:	0800bc0d 	.word	0x0800bc0d
 800bb78:	0800bc0d 	.word	0x0800bc0d
 800bb7c:	0800bc0d 	.word	0x0800bc0d
 800bb80:	0800bc0d 	.word	0x0800bc0d
 800bb84:	0800bc0d 	.word	0x0800bc0d
 800bb88:	0800bc0d 	.word	0x0800bc0d
 800bb8c:	0800bbff 	.word	0x0800bbff
 800bb90:	2b40      	cmp	r3, #64	; 0x40
 800bb92:	d037      	beq.n	800bc04 <UART_SetConfig+0xa28>
 800bb94:	e03a      	b.n	800bc0c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb96:	f7fb fe09 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 800bb9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bb9c:	e03c      	b.n	800bc18 <UART_SetConfig+0xa3c>
 800bb9e:	bf00      	nop
 800bba0:	003d0900 	.word	0x003d0900
 800bba4:	0800f3b8 	.word	0x0800f3b8
 800bba8:	58024400 	.word	0x58024400
 800bbac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbb0:	f7fb fe12 	bl	80077d8 <HAL_RCC_GetPCLK2Freq>
 800bbb4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bbb6:	e02f      	b.n	800bc18 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbb8:	f107 0314 	add.w	r3, r7, #20
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fc fd77 	bl	80086b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bbc6:	e027      	b.n	800bc18 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbc8:	f107 0308 	add.w	r3, r7, #8
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fc fec3 	bl	8008958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bbd6:	e01f      	b.n	800bc18 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbd8:	4b2c      	ldr	r3, [pc, #176]	; (800bc8c <UART_SetConfig+0xab0>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f003 0320 	and.w	r3, r3, #32
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d009      	beq.n	800bbf8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bbe4:	4b29      	ldr	r3, [pc, #164]	; (800bc8c <UART_SetConfig+0xab0>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	08db      	lsrs	r3, r3, #3
 800bbea:	f003 0303 	and.w	r3, r3, #3
 800bbee:	4a28      	ldr	r2, [pc, #160]	; (800bc90 <UART_SetConfig+0xab4>)
 800bbf0:	fa22 f303 	lsr.w	r3, r2, r3
 800bbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bbf6:	e00f      	b.n	800bc18 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800bbf8:	4b25      	ldr	r3, [pc, #148]	; (800bc90 <UART_SetConfig+0xab4>)
 800bbfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bbfc:	e00c      	b.n	800bc18 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bbfe:	4b25      	ldr	r3, [pc, #148]	; (800bc94 <UART_SetConfig+0xab8>)
 800bc00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bc02:	e009      	b.n	800bc18 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bc0a:	e005      	b.n	800bc18 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bc10:	2301      	movs	r3, #1
 800bc12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bc16:	bf00      	nop
    }

    if (pclk != 0U)
 800bc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d021      	beq.n	800bc62 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc22:	4a1d      	ldr	r2, [pc, #116]	; (800bc98 <UART_SetConfig+0xabc>)
 800bc24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc28:	461a      	mov	r2, r3
 800bc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2c:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	085b      	lsrs	r3, r3, #1
 800bc36:	441a      	add	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc40:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc44:	2b0f      	cmp	r3, #15
 800bc46:	d909      	bls.n	800bc5c <UART_SetConfig+0xa80>
 800bc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc4e:	d205      	bcs.n	800bc5c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	b29a      	uxth	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	60da      	str	r2, [r3, #12]
 800bc5a:	e002      	b.n	800bc62 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2201      	movs	r2, #1
 800bc66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bc7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3738      	adds	r7, #56	; 0x38
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bdb0      	pop	{r4, r5, r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	58024400 	.word	0x58024400
 800bc90:	03d09000 	.word	0x03d09000
 800bc94:	003d0900 	.word	0x003d0900
 800bc98:	0800f3b8 	.word	0x0800f3b8

0800bc9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00a      	beq.n	800bcc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	430a      	orrs	r2, r1
 800bcc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcca:	f003 0302 	and.w	r3, r3, #2
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00a      	beq.n	800bce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	430a      	orrs	r2, r1
 800bce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcec:	f003 0304 	and.w	r3, r3, #4
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00a      	beq.n	800bd0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	430a      	orrs	r2, r1
 800bd08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd0e:	f003 0308 	and.w	r3, r3, #8
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00a      	beq.n	800bd2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	430a      	orrs	r2, r1
 800bd2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd30:	f003 0310 	and.w	r3, r3, #16
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00a      	beq.n	800bd4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	430a      	orrs	r2, r1
 800bd4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd52:	f003 0320 	and.w	r3, r3, #32
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00a      	beq.n	800bd70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	430a      	orrs	r2, r1
 800bd6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d01a      	beq.n	800bdb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	430a      	orrs	r2, r1
 800bd90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd9a:	d10a      	bne.n	800bdb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	430a      	orrs	r2, r1
 800bdb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00a      	beq.n	800bdd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	430a      	orrs	r2, r1
 800bdd2:	605a      	str	r2, [r3, #4]
  }
}
 800bdd4:	bf00      	nop
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af02      	add	r7, sp, #8
 800bde6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bdf0:	f7f7 fef0 	bl	8003bd4 <HAL_GetTick>
 800bdf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f003 0308 	and.w	r3, r3, #8
 800be00:	2b08      	cmp	r3, #8
 800be02:	d10e      	bne.n	800be22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2200      	movs	r2, #0
 800be0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f82f 	bl	800be76 <UART_WaitOnFlagUntilTimeout>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d001      	beq.n	800be22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be1e:	2303      	movs	r3, #3
 800be20:	e025      	b.n	800be6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 0304 	and.w	r3, r3, #4
 800be2c:	2b04      	cmp	r3, #4
 800be2e:	d10e      	bne.n	800be4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2200      	movs	r2, #0
 800be3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f819 	bl	800be76 <UART_WaitOnFlagUntilTimeout>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be4a:	2303      	movs	r3, #3
 800be4c:	e00f      	b.n	800be6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2220      	movs	r2, #32
 800be52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2220      	movs	r2, #32
 800be5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b09c      	sub	sp, #112	; 0x70
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	60f8      	str	r0, [r7, #12]
 800be7e:	60b9      	str	r1, [r7, #8]
 800be80:	603b      	str	r3, [r7, #0]
 800be82:	4613      	mov	r3, r2
 800be84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be86:	e0a9      	b.n	800bfdc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be8e:	f000 80a5 	beq.w	800bfdc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be92:	f7f7 fe9f 	bl	8003bd4 <HAL_GetTick>
 800be96:	4602      	mov	r2, r0
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d302      	bcc.n	800bea8 <UART_WaitOnFlagUntilTimeout+0x32>
 800bea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d140      	bne.n	800bf2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beb0:	e853 3f00 	ldrex	r3, [r3]
 800beb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800beb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bebc:	667b      	str	r3, [r7, #100]	; 0x64
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	461a      	mov	r2, r3
 800bec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bec8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800becc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bece:	e841 2300 	strex	r3, r2, [r1]
 800bed2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1e6      	bne.n	800bea8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	3308      	adds	r3, #8
 800bee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bee4:	e853 3f00 	ldrex	r3, [r3]
 800bee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800beea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beec:	f023 0301 	bic.w	r3, r3, #1
 800bef0:	663b      	str	r3, [r7, #96]	; 0x60
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	3308      	adds	r3, #8
 800bef8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800befa:	64ba      	str	r2, [r7, #72]	; 0x48
 800befc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf02:	e841 2300 	strex	r3, r2, [r1]
 800bf06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bf08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1e5      	bne.n	800beda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2220      	movs	r2, #32
 800bf12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2220      	movs	r2, #32
 800bf1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bf26:	2303      	movs	r3, #3
 800bf28:	e069      	b.n	800bffe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f003 0304 	and.w	r3, r3, #4
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d051      	beq.n	800bfdc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	69db      	ldr	r3, [r3, #28]
 800bf3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf46:	d149      	bne.n	800bfdc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5a:	e853 3f00 	ldrex	r3, [r3]
 800bf5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf66:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf70:	637b      	str	r3, [r7, #52]	; 0x34
 800bf72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf78:	e841 2300 	strex	r3, r2, [r1]
 800bf7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1e6      	bne.n	800bf52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	3308      	adds	r3, #8
 800bf8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	e853 3f00 	ldrex	r3, [r3]
 800bf92:	613b      	str	r3, [r7, #16]
   return(result);
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	f023 0301 	bic.w	r3, r3, #1
 800bf9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	3308      	adds	r3, #8
 800bfa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bfa4:	623a      	str	r2, [r7, #32]
 800bfa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa8:	69f9      	ldr	r1, [r7, #28]
 800bfaa:	6a3a      	ldr	r2, [r7, #32]
 800bfac:	e841 2300 	strex	r3, r2, [r1]
 800bfb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1e5      	bne.n	800bf84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2220      	movs	r2, #32
 800bfbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2220      	movs	r2, #32
 800bfc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2220      	movs	r2, #32
 800bfcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bfd8:	2303      	movs	r3, #3
 800bfda:	e010      	b.n	800bffe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	69da      	ldr	r2, [r3, #28]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	68ba      	ldr	r2, [r7, #8]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	bf0c      	ite	eq
 800bfec:	2301      	moveq	r3, #1
 800bfee:	2300      	movne	r3, #0
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	461a      	mov	r2, r3
 800bff4:	79fb      	ldrb	r3, [r7, #7]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	f43f af46 	beq.w	800be88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3770      	adds	r7, #112	; 0x70
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
	...

0800c008 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c008:	b480      	push	{r7}
 800c00a:	b095      	sub	sp, #84	; 0x54
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c018:	e853 3f00 	ldrex	r3, [r3]
 800c01c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c020:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c024:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	461a      	mov	r2, r3
 800c02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c02e:	643b      	str	r3, [r7, #64]	; 0x40
 800c030:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c032:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c034:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c036:	e841 2300 	strex	r3, r2, [r1]
 800c03a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d1e6      	bne.n	800c010 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	3308      	adds	r3, #8
 800c048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04a:	6a3b      	ldr	r3, [r7, #32]
 800c04c:	e853 3f00 	ldrex	r3, [r3]
 800c050:	61fb      	str	r3, [r7, #28]
   return(result);
 800c052:	69fa      	ldr	r2, [r7, #28]
 800c054:	4b1e      	ldr	r3, [pc, #120]	; (800c0d0 <UART_EndRxTransfer+0xc8>)
 800c056:	4013      	ands	r3, r2
 800c058:	64bb      	str	r3, [r7, #72]	; 0x48
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3308      	adds	r3, #8
 800c060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c062:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c064:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c06a:	e841 2300 	strex	r3, r2, [r1]
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1e5      	bne.n	800c042 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d118      	bne.n	800c0b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	e853 3f00 	ldrex	r3, [r3]
 800c08a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	f023 0310 	bic.w	r3, r3, #16
 800c092:	647b      	str	r3, [r7, #68]	; 0x44
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	461a      	mov	r2, r3
 800c09a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c09c:	61bb      	str	r3, [r7, #24]
 800c09e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a0:	6979      	ldr	r1, [r7, #20]
 800c0a2:	69ba      	ldr	r2, [r7, #24]
 800c0a4:	e841 2300 	strex	r3, r2, [r1]
 800c0a8:	613b      	str	r3, [r7, #16]
   return(result);
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1e6      	bne.n	800c07e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2220      	movs	r2, #32
 800c0b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c0c4:	bf00      	nop
 800c0c6:	3754      	adds	r7, #84	; 0x54
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr
 800c0d0:	effffffe 	.word	0xeffffffe

0800c0d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f7ff f85c 	bl	800b1b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0f8:	bf00      	nop
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b088      	sub	sp, #32
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	e853 3f00 	ldrex	r3, [r3]
 800c114:	60bb      	str	r3, [r7, #8]
   return(result);
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c11c:	61fb      	str	r3, [r7, #28]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	461a      	mov	r2, r3
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	61bb      	str	r3, [r7, #24]
 800c128:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12a:	6979      	ldr	r1, [r7, #20]
 800c12c:	69ba      	ldr	r2, [r7, #24]
 800c12e:	e841 2300 	strex	r3, r2, [r1]
 800c132:	613b      	str	r3, [r7, #16]
   return(result);
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1e6      	bne.n	800c108 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2220      	movs	r2, #32
 800c13e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7ff f827 	bl	800b19c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c14e:	bf00      	nop
 800c150:	3720      	adds	r7, #32
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c156:	b480      	push	{r7}
 800c158:	b083      	sub	sp, #12
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c15e:	bf00      	nop
 800c160:	370c      	adds	r7, #12
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr

0800c16a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c16a:	b480      	push	{r7}
 800c16c:	b083      	sub	sp, #12
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c172:	bf00      	nop
 800c174:	370c      	adds	r7, #12
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c17e:	b480      	push	{r7}
 800c180:	b083      	sub	sp, #12
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c186:	bf00      	nop
 800c188:	370c      	adds	r7, #12
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr

0800c192 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b084      	sub	sp, #16
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d101      	bne.n	800c1a8 <HAL_UARTEx_EnableFifoMode+0x16>
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	e02b      	b.n	800c200 <HAL_UARTEx_EnableFifoMode+0x6e>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2224      	movs	r2, #36	; 0x24
 800c1b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f022 0201 	bic.w	r2, r2, #1
 800c1ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c1d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c1de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f8c3 	bl	800c374 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2220      	movs	r2, #32
 800c1f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c216:	2b01      	cmp	r3, #1
 800c218:	d101      	bne.n	800c21e <HAL_UARTEx_DisableFifoMode+0x16>
 800c21a:	2302      	movs	r3, #2
 800c21c:	e027      	b.n	800c26e <HAL_UARTEx_DisableFifoMode+0x66>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2201      	movs	r2, #1
 800c222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2224      	movs	r2, #36	; 0x24
 800c22a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f022 0201 	bic.w	r2, r2, #1
 800c244:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c24c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2220      	movs	r2, #32
 800c260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3714      	adds	r7, #20
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d101      	bne.n	800c292 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c28e:	2302      	movs	r3, #2
 800c290:	e02d      	b.n	800c2ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2224      	movs	r2, #36	; 0x24
 800c29e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f022 0201 	bic.w	r2, r2, #1
 800c2b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f850 	bl	800c374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2220      	movs	r2, #32
 800c2e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b084      	sub	sp, #16
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c306:	2b01      	cmp	r3, #1
 800c308:	d101      	bne.n	800c30e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c30a:	2302      	movs	r3, #2
 800c30c:	e02d      	b.n	800c36a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2201      	movs	r2, #1
 800c312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2224      	movs	r2, #36	; 0x24
 800c31a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f022 0201 	bic.w	r2, r2, #1
 800c334:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	683a      	ldr	r2, [r7, #0]
 800c346:	430a      	orrs	r2, r1
 800c348:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f812 	bl	800c374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2220      	movs	r2, #32
 800c35c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
	...

0800c374 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c380:	2b00      	cmp	r3, #0
 800c382:	d108      	bne.n	800c396 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c394:	e031      	b.n	800c3fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c396:	2310      	movs	r3, #16
 800c398:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c39a:	2310      	movs	r3, #16
 800c39c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	0e5b      	lsrs	r3, r3, #25
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	f003 0307 	and.w	r3, r3, #7
 800c3ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	0f5b      	lsrs	r3, r3, #29
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	f003 0307 	and.w	r3, r3, #7
 800c3bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3be:	7bbb      	ldrb	r3, [r7, #14]
 800c3c0:	7b3a      	ldrb	r2, [r7, #12]
 800c3c2:	4911      	ldr	r1, [pc, #68]	; (800c408 <UARTEx_SetNbDataToProcess+0x94>)
 800c3c4:	5c8a      	ldrb	r2, [r1, r2]
 800c3c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c3ca:	7b3a      	ldrb	r2, [r7, #12]
 800c3cc:	490f      	ldr	r1, [pc, #60]	; (800c40c <UARTEx_SetNbDataToProcess+0x98>)
 800c3ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3dc:	7bfb      	ldrb	r3, [r7, #15]
 800c3de:	7b7a      	ldrb	r2, [r7, #13]
 800c3e0:	4909      	ldr	r1, [pc, #36]	; (800c408 <UARTEx_SetNbDataToProcess+0x94>)
 800c3e2:	5c8a      	ldrb	r2, [r1, r2]
 800c3e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c3e8:	7b7a      	ldrb	r2, [r7, #13]
 800c3ea:	4908      	ldr	r1, [pc, #32]	; (800c40c <UARTEx_SetNbDataToProcess+0x98>)
 800c3ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c3fa:	bf00      	nop
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	0800f3d0 	.word	0x0800f3d0
 800c40c:	0800f3d8 	.word	0x0800f3d8

0800c410 <sinf_poly>:
 800c410:	07cb      	lsls	r3, r1, #31
 800c412:	d412      	bmi.n	800c43a <sinf_poly+0x2a>
 800c414:	ee21 6b00 	vmul.f64	d6, d1, d0
 800c418:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800c41c:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800c420:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c424:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800c428:	ee21 1b06 	vmul.f64	d1, d1, d6
 800c42c:	eea5 0b06 	vfma.f64	d0, d5, d6
 800c430:	eea7 0b01 	vfma.f64	d0, d7, d1
 800c434:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c438:	4770      	bx	lr
 800c43a:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800c43e:	ee21 6b01 	vmul.f64	d6, d1, d1
 800c442:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800c446:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800c44a:	eea1 7b05 	vfma.f64	d7, d1, d5
 800c44e:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800c452:	eea1 0b05 	vfma.f64	d0, d1, d5
 800c456:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800c45a:	ee21 1b06 	vmul.f64	d1, d1, d6
 800c45e:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c462:	e7e5      	b.n	800c430 <sinf_poly+0x20>
 800c464:	0000      	movs	r0, r0
	...

0800c468 <cosf>:
 800c468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c46a:	ee10 4a10 	vmov	r4, s0
 800c46e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800c472:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800c476:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800c47a:	d20c      	bcs.n	800c496 <cosf+0x2e>
 800c47c:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c480:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800c484:	d378      	bcc.n	800c578 <cosf+0x110>
 800c486:	eeb0 0b46 	vmov.f64	d0, d6
 800c48a:	483f      	ldr	r0, [pc, #252]	; (800c588 <cosf+0x120>)
 800c48c:	2101      	movs	r1, #1
 800c48e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c492:	f7ff bfbd 	b.w	800c410 <sinf_poly>
 800c496:	f240 422e 	movw	r2, #1070	; 0x42e
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d826      	bhi.n	800c4ec <cosf+0x84>
 800c49e:	4b3a      	ldr	r3, [pc, #232]	; (800c588 <cosf+0x120>)
 800c4a0:	ed93 7b08 	vldr	d7, [r3, #32]
 800c4a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c4a8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c4ac:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c4b0:	ee17 1a90 	vmov	r1, s15
 800c4b4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800c4b8:	1609      	asrs	r1, r1, #24
 800c4ba:	ee07 1a90 	vmov	s15, r1
 800c4be:	f001 0203 	and.w	r2, r1, #3
 800c4c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c4c6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c4ca:	ed92 0b00 	vldr	d0, [r2]
 800c4ce:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800c4d2:	f011 0f02 	tst.w	r1, #2
 800c4d6:	eea5 6b47 	vfms.f64	d6, d5, d7
 800c4da:	f081 0101 	eor.w	r1, r1, #1
 800c4de:	bf08      	it	eq
 800c4e0:	4618      	moveq	r0, r3
 800c4e2:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c4e6:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c4ea:	e7d0      	b.n	800c48e <cosf+0x26>
 800c4ec:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800c4f0:	d23e      	bcs.n	800c570 <cosf+0x108>
 800c4f2:	4b26      	ldr	r3, [pc, #152]	; (800c58c <cosf+0x124>)
 800c4f4:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800c4f8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800c4fc:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800c500:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800c504:	6a06      	ldr	r6, [r0, #32]
 800c506:	6900      	ldr	r0, [r0, #16]
 800c508:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800c50c:	40a9      	lsls	r1, r5
 800c50e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800c512:	fba1 6706 	umull	r6, r7, r1, r6
 800c516:	fb05 f301 	mul.w	r3, r5, r1
 800c51a:	463a      	mov	r2, r7
 800c51c:	fbe0 2301 	umlal	r2, r3, r0, r1
 800c520:	1c11      	adds	r1, r2, #0
 800c522:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800c526:	2000      	movs	r0, #0
 800c528:	1a10      	subs	r0, r2, r0
 800c52a:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800c52e:	eb63 0101 	sbc.w	r1, r3, r1
 800c532:	f7f4 f8bb 	bl	80006ac <__aeabi_l2d>
 800c536:	0fb5      	lsrs	r5, r6, #30
 800c538:	4b13      	ldr	r3, [pc, #76]	; (800c588 <cosf+0x120>)
 800c53a:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800c53e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 800c580 <cosf+0x118>
 800c542:	ec41 0b17 	vmov	d7, r0, r1
 800c546:	f004 0203 	and.w	r2, r4, #3
 800c54a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c54e:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c552:	ed92 7b00 	vldr	d7, [r2]
 800c556:	ee20 1b00 	vmul.f64	d1, d0, d0
 800c55a:	f014 0f02 	tst.w	r4, #2
 800c55e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c562:	f085 0101 	eor.w	r1, r5, #1
 800c566:	bf08      	it	eq
 800c568:	4618      	moveq	r0, r3
 800c56a:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c56e:	e78e      	b.n	800c48e <cosf+0x26>
 800c570:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c574:	f000 b817 	b.w	800c5a6 <__math_invalidf>
 800c578:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c57e:	bf00      	nop
 800c580:	54442d18 	.word	0x54442d18
 800c584:	3c1921fb 	.word	0x3c1921fb
 800c588:	0800f440 	.word	0x0800f440
 800c58c:	0800f3e0 	.word	0x0800f3e0

0800c590 <with_errnof>:
 800c590:	b513      	push	{r0, r1, r4, lr}
 800c592:	4604      	mov	r4, r0
 800c594:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c598:	f000 fa84 	bl	800caa4 <__errno>
 800c59c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c5a0:	6004      	str	r4, [r0, #0]
 800c5a2:	b002      	add	sp, #8
 800c5a4:	bd10      	pop	{r4, pc}

0800c5a6 <__math_invalidf>:
 800c5a6:	eef0 7a40 	vmov.f32	s15, s0
 800c5aa:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c5ae:	eef4 7a67 	vcmp.f32	s15, s15
 800c5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800c5ba:	d602      	bvs.n	800c5c2 <__math_invalidf+0x1c>
 800c5bc:	2021      	movs	r0, #33	; 0x21
 800c5be:	f7ff bfe7 	b.w	800c590 <with_errnof>
 800c5c2:	4770      	bx	lr

0800c5c4 <sinf_poly>:
 800c5c4:	07cb      	lsls	r3, r1, #31
 800c5c6:	d412      	bmi.n	800c5ee <sinf_poly+0x2a>
 800c5c8:	ee21 6b00 	vmul.f64	d6, d1, d0
 800c5cc:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800c5d0:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800c5d4:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c5d8:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800c5dc:	ee21 1b06 	vmul.f64	d1, d1, d6
 800c5e0:	eea5 0b06 	vfma.f64	d0, d5, d6
 800c5e4:	eea7 0b01 	vfma.f64	d0, d7, d1
 800c5e8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c5ec:	4770      	bx	lr
 800c5ee:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800c5f2:	ee21 6b01 	vmul.f64	d6, d1, d1
 800c5f6:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800c5fa:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800c5fe:	eea1 7b05 	vfma.f64	d7, d1, d5
 800c602:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800c606:	eea1 0b05 	vfma.f64	d0, d1, d5
 800c60a:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800c60e:	ee21 1b06 	vmul.f64	d1, d1, d6
 800c612:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c616:	e7e5      	b.n	800c5e4 <sinf_poly+0x20>

0800c618 <sinf>:
 800c618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c61a:	ee10 4a10 	vmov	r4, s0
 800c61e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800c622:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800c626:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800c62a:	eef0 7a40 	vmov.f32	s15, s0
 800c62e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800c632:	d218      	bcs.n	800c666 <sinf+0x4e>
 800c634:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c638:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800c63c:	d20a      	bcs.n	800c654 <sinf+0x3c>
 800c63e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800c642:	d103      	bne.n	800c64c <sinf+0x34>
 800c644:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800c648:	ed8d 1a01 	vstr	s2, [sp, #4]
 800c64c:	eeb0 0a67 	vmov.f32	s0, s15
 800c650:	b003      	add	sp, #12
 800c652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c654:	483e      	ldr	r0, [pc, #248]	; (800c750 <sinf+0x138>)
 800c656:	eeb0 0b46 	vmov.f64	d0, d6
 800c65a:	2100      	movs	r1, #0
 800c65c:	b003      	add	sp, #12
 800c65e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c662:	f7ff bfaf 	b.w	800c5c4 <sinf_poly>
 800c666:	f240 422e 	movw	r2, #1070	; 0x42e
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d824      	bhi.n	800c6b8 <sinf+0xa0>
 800c66e:	4b38      	ldr	r3, [pc, #224]	; (800c750 <sinf+0x138>)
 800c670:	ed93 7b08 	vldr	d7, [r3, #32]
 800c674:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c678:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c67c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c680:	ee17 1a90 	vmov	r1, s15
 800c684:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800c688:	1609      	asrs	r1, r1, #24
 800c68a:	ee07 1a90 	vmov	s15, r1
 800c68e:	f001 0203 	and.w	r2, r1, #3
 800c692:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c696:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c69a:	ed92 0b00 	vldr	d0, [r2]
 800c69e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800c6a2:	f011 0f02 	tst.w	r1, #2
 800c6a6:	eea5 6b47 	vfms.f64	d6, d5, d7
 800c6aa:	bf08      	it	eq
 800c6ac:	4618      	moveq	r0, r3
 800c6ae:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c6b2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c6b6:	e7d1      	b.n	800c65c <sinf+0x44>
 800c6b8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800c6bc:	d23d      	bcs.n	800c73a <sinf+0x122>
 800c6be:	4b25      	ldr	r3, [pc, #148]	; (800c754 <sinf+0x13c>)
 800c6c0:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800c6c4:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800c6c8:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800c6cc:	6a06      	ldr	r6, [r0, #32]
 800c6ce:	6900      	ldr	r0, [r0, #16]
 800c6d0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800c6d4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800c6d8:	40a9      	lsls	r1, r5
 800c6da:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800c6de:	fba1 6706 	umull	r6, r7, r1, r6
 800c6e2:	fb05 f301 	mul.w	r3, r5, r1
 800c6e6:	463a      	mov	r2, r7
 800c6e8:	fbe0 2301 	umlal	r2, r3, r0, r1
 800c6ec:	1c11      	adds	r1, r2, #0
 800c6ee:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	1a10      	subs	r0, r2, r0
 800c6f6:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800c6fa:	eb63 0101 	sbc.w	r1, r3, r1
 800c6fe:	f7f3 ffd5 	bl	80006ac <__aeabi_l2d>
 800c702:	0fb5      	lsrs	r5, r6, #30
 800c704:	4a12      	ldr	r2, [pc, #72]	; (800c750 <sinf+0x138>)
 800c706:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 800c70a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800c748 <sinf+0x130>
 800c70e:	ec41 0b17 	vmov	d7, r0, r1
 800c712:	f003 0103 	and.w	r1, r3, #3
 800c716:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800c71a:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c71e:	ed91 7b00 	vldr	d7, [r1]
 800c722:	ee20 1b00 	vmul.f64	d1, d0, d0
 800c726:	f013 0f02 	tst.w	r3, #2
 800c72a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 800c72e:	4629      	mov	r1, r5
 800c730:	bf08      	it	eq
 800c732:	4610      	moveq	r0, r2
 800c734:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c738:	e790      	b.n	800c65c <sinf+0x44>
 800c73a:	b003      	add	sp, #12
 800c73c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c740:	f7ff bf31 	b.w	800c5a6 <__math_invalidf>
 800c744:	f3af 8000 	nop.w
 800c748:	54442d18 	.word	0x54442d18
 800c74c:	3c1921fb 	.word	0x3c1921fb
 800c750:	0800f440 	.word	0x0800f440
 800c754:	0800f3e0 	.word	0x0800f3e0

0800c758 <atan2f>:
 800c758:	f000 b826 	b.w	800c7a8 <__ieee754_atan2f>

0800c75c <sqrtf>:
 800c75c:	b508      	push	{r3, lr}
 800c75e:	ed2d 8b02 	vpush	{d8}
 800c762:	eeb0 8a40 	vmov.f32	s16, s0
 800c766:	f000 f8bd 	bl	800c8e4 <__ieee754_sqrtf>
 800c76a:	4b0d      	ldr	r3, [pc, #52]	; (800c7a0 <sqrtf+0x44>)
 800c76c:	f993 3000 	ldrsb.w	r3, [r3]
 800c770:	3301      	adds	r3, #1
 800c772:	d011      	beq.n	800c798 <sqrtf+0x3c>
 800c774:	eeb4 8a48 	vcmp.f32	s16, s16
 800c778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c77c:	d60c      	bvs.n	800c798 <sqrtf+0x3c>
 800c77e:	eddf 8a09 	vldr	s17, [pc, #36]	; 800c7a4 <sqrtf+0x48>
 800c782:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c78a:	d505      	bpl.n	800c798 <sqrtf+0x3c>
 800c78c:	f000 f98a 	bl	800caa4 <__errno>
 800c790:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c794:	2321      	movs	r3, #33	; 0x21
 800c796:	6003      	str	r3, [r0, #0]
 800c798:	ecbd 8b02 	vpop	{d8}
 800c79c:	bd08      	pop	{r3, pc}
 800c79e:	bf00      	nop
 800c7a0:	24000035 	.word	0x24000035
 800c7a4:	00000000 	.word	0x00000000

0800c7a8 <__ieee754_atan2f>:
 800c7a8:	ee10 2a90 	vmov	r2, s1
 800c7ac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c7b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c7b4:	b510      	push	{r4, lr}
 800c7b6:	eef0 7a40 	vmov.f32	s15, s0
 800c7ba:	dc06      	bgt.n	800c7ca <__ieee754_atan2f+0x22>
 800c7bc:	ee10 0a10 	vmov	r0, s0
 800c7c0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c7c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c7c8:	dd04      	ble.n	800c7d4 <__ieee754_atan2f+0x2c>
 800c7ca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c7ce:	eeb0 0a67 	vmov.f32	s0, s15
 800c7d2:	bd10      	pop	{r4, pc}
 800c7d4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c7d8:	d103      	bne.n	800c7e2 <__ieee754_atan2f+0x3a>
 800c7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7de:	f000 b885 	b.w	800c8ec <atanf>
 800c7e2:	1794      	asrs	r4, r2, #30
 800c7e4:	f004 0402 	and.w	r4, r4, #2
 800c7e8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c7ec:	b93b      	cbnz	r3, 800c7fe <__ieee754_atan2f+0x56>
 800c7ee:	2c02      	cmp	r4, #2
 800c7f0:	d05c      	beq.n	800c8ac <__ieee754_atan2f+0x104>
 800c7f2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c8c0 <__ieee754_atan2f+0x118>
 800c7f6:	2c03      	cmp	r4, #3
 800c7f8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800c7fc:	e7e7      	b.n	800c7ce <__ieee754_atan2f+0x26>
 800c7fe:	b939      	cbnz	r1, 800c810 <__ieee754_atan2f+0x68>
 800c800:	eddf 7a30 	vldr	s15, [pc, #192]	; 800c8c4 <__ieee754_atan2f+0x11c>
 800c804:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800c8c8 <__ieee754_atan2f+0x120>
 800c808:	2800      	cmp	r0, #0
 800c80a:	fe67 7a80 	vselge.f32	s15, s15, s0
 800c80e:	e7de      	b.n	800c7ce <__ieee754_atan2f+0x26>
 800c810:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c814:	d110      	bne.n	800c838 <__ieee754_atan2f+0x90>
 800c816:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c81a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c81e:	d107      	bne.n	800c830 <__ieee754_atan2f+0x88>
 800c820:	2c02      	cmp	r4, #2
 800c822:	d846      	bhi.n	800c8b2 <__ieee754_atan2f+0x10a>
 800c824:	4b29      	ldr	r3, [pc, #164]	; (800c8cc <__ieee754_atan2f+0x124>)
 800c826:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c82a:	edd4 7a00 	vldr	s15, [r4]
 800c82e:	e7ce      	b.n	800c7ce <__ieee754_atan2f+0x26>
 800c830:	2c02      	cmp	r4, #2
 800c832:	d841      	bhi.n	800c8b8 <__ieee754_atan2f+0x110>
 800c834:	4b26      	ldr	r3, [pc, #152]	; (800c8d0 <__ieee754_atan2f+0x128>)
 800c836:	e7f6      	b.n	800c826 <__ieee754_atan2f+0x7e>
 800c838:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c83c:	d0e0      	beq.n	800c800 <__ieee754_atan2f+0x58>
 800c83e:	1a5b      	subs	r3, r3, r1
 800c840:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800c844:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c848:	da1a      	bge.n	800c880 <__ieee754_atan2f+0xd8>
 800c84a:	2a00      	cmp	r2, #0
 800c84c:	da01      	bge.n	800c852 <__ieee754_atan2f+0xaa>
 800c84e:	313c      	adds	r1, #60	; 0x3c
 800c850:	db19      	blt.n	800c886 <__ieee754_atan2f+0xde>
 800c852:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c856:	f000 f91d 	bl	800ca94 <fabsf>
 800c85a:	f000 f847 	bl	800c8ec <atanf>
 800c85e:	eef0 7a40 	vmov.f32	s15, s0
 800c862:	2c01      	cmp	r4, #1
 800c864:	d012      	beq.n	800c88c <__ieee754_atan2f+0xe4>
 800c866:	2c02      	cmp	r4, #2
 800c868:	d017      	beq.n	800c89a <__ieee754_atan2f+0xf2>
 800c86a:	2c00      	cmp	r4, #0
 800c86c:	d0af      	beq.n	800c7ce <__ieee754_atan2f+0x26>
 800c86e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800c8d4 <__ieee754_atan2f+0x12c>
 800c872:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c876:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800c8d8 <__ieee754_atan2f+0x130>
 800c87a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c87e:	e7a6      	b.n	800c7ce <__ieee754_atan2f+0x26>
 800c880:	eddf 7a10 	vldr	s15, [pc, #64]	; 800c8c4 <__ieee754_atan2f+0x11c>
 800c884:	e7ed      	b.n	800c862 <__ieee754_atan2f+0xba>
 800c886:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c8dc <__ieee754_atan2f+0x134>
 800c88a:	e7ea      	b.n	800c862 <__ieee754_atan2f+0xba>
 800c88c:	ee17 3a90 	vmov	r3, s15
 800c890:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c894:	ee07 3a90 	vmov	s15, r3
 800c898:	e799      	b.n	800c7ce <__ieee754_atan2f+0x26>
 800c89a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c8d4 <__ieee754_atan2f+0x12c>
 800c89e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c8a2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800c8d8 <__ieee754_atan2f+0x130>
 800c8a6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c8aa:	e790      	b.n	800c7ce <__ieee754_atan2f+0x26>
 800c8ac:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800c8d8 <__ieee754_atan2f+0x130>
 800c8b0:	e78d      	b.n	800c7ce <__ieee754_atan2f+0x26>
 800c8b2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c8e0 <__ieee754_atan2f+0x138>
 800c8b6:	e78a      	b.n	800c7ce <__ieee754_atan2f+0x26>
 800c8b8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c8dc <__ieee754_atan2f+0x134>
 800c8bc:	e787      	b.n	800c7ce <__ieee754_atan2f+0x26>
 800c8be:	bf00      	nop
 800c8c0:	c0490fdb 	.word	0xc0490fdb
 800c8c4:	3fc90fdb 	.word	0x3fc90fdb
 800c8c8:	bfc90fdb 	.word	0xbfc90fdb
 800c8cc:	0800f520 	.word	0x0800f520
 800c8d0:	0800f52c 	.word	0x0800f52c
 800c8d4:	33bbbd2e 	.word	0x33bbbd2e
 800c8d8:	40490fdb 	.word	0x40490fdb
 800c8dc:	00000000 	.word	0x00000000
 800c8e0:	3f490fdb 	.word	0x3f490fdb

0800c8e4 <__ieee754_sqrtf>:
 800c8e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c8e8:	4770      	bx	lr
	...

0800c8ec <atanf>:
 800c8ec:	b538      	push	{r3, r4, r5, lr}
 800c8ee:	ee10 5a10 	vmov	r5, s0
 800c8f2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c8f6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800c8fa:	eef0 7a40 	vmov.f32	s15, s0
 800c8fe:	db0f      	blt.n	800c920 <atanf+0x34>
 800c900:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c904:	dd04      	ble.n	800c910 <atanf+0x24>
 800c906:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c90a:	eeb0 0a67 	vmov.f32	s0, s15
 800c90e:	bd38      	pop	{r3, r4, r5, pc}
 800c910:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ca48 <atanf+0x15c>
 800c914:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ca4c <atanf+0x160>
 800c918:	2d00      	cmp	r5, #0
 800c91a:	fe77 7a80 	vselgt.f32	s15, s15, s0
 800c91e:	e7f4      	b.n	800c90a <atanf+0x1e>
 800c920:	4b4b      	ldr	r3, [pc, #300]	; (800ca50 <atanf+0x164>)
 800c922:	429c      	cmp	r4, r3
 800c924:	dc10      	bgt.n	800c948 <atanf+0x5c>
 800c926:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800c92a:	da0a      	bge.n	800c942 <atanf+0x56>
 800c92c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ca54 <atanf+0x168>
 800c930:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c934:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c938:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c940:	dce3      	bgt.n	800c90a <atanf+0x1e>
 800c942:	f04f 33ff 	mov.w	r3, #4294967295
 800c946:	e013      	b.n	800c970 <atanf+0x84>
 800c948:	f000 f8a4 	bl	800ca94 <fabsf>
 800c94c:	4b42      	ldr	r3, [pc, #264]	; (800ca58 <atanf+0x16c>)
 800c94e:	429c      	cmp	r4, r3
 800c950:	dc4f      	bgt.n	800c9f2 <atanf+0x106>
 800c952:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c956:	429c      	cmp	r4, r3
 800c958:	dc41      	bgt.n	800c9de <atanf+0xf2>
 800c95a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c95e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c962:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c966:	2300      	movs	r3, #0
 800c968:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c96c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c970:	1c5a      	adds	r2, r3, #1
 800c972:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c976:	eddf 5a39 	vldr	s11, [pc, #228]	; 800ca5c <atanf+0x170>
 800c97a:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800ca60 <atanf+0x174>
 800c97e:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800ca64 <atanf+0x178>
 800c982:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800ca68 <atanf+0x17c>
 800c986:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c98a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c98e:	eddf 5a37 	vldr	s11, [pc, #220]	; 800ca6c <atanf+0x180>
 800c992:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c996:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800ca70 <atanf+0x184>
 800c99a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c99e:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ca74 <atanf+0x188>
 800c9a2:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c9a6:	ed9f 6a34 	vldr	s12, [pc, #208]	; 800ca78 <atanf+0x18c>
 800c9aa:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c9ae:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ca7c <atanf+0x190>
 800c9b2:	eee7 5a05 	vfma.f32	s11, s14, s10
 800c9b6:	ed9f 5a32 	vldr	s10, [pc, #200]	; 800ca80 <atanf+0x194>
 800c9ba:	eea5 5a87 	vfma.f32	s10, s11, s14
 800c9be:	eddf 5a31 	vldr	s11, [pc, #196]	; 800ca84 <atanf+0x198>
 800c9c2:	eee5 5a07 	vfma.f32	s11, s10, s14
 800c9c6:	eea5 0a87 	vfma.f32	s0, s11, s14
 800c9ca:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c9ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c9d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c9d6:	d121      	bne.n	800ca1c <atanf+0x130>
 800c9d8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c9dc:	e795      	b.n	800c90a <atanf+0x1e>
 800c9de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c9e2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c9e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c9f0:	e7be      	b.n	800c970 <atanf+0x84>
 800c9f2:	4b25      	ldr	r3, [pc, #148]	; (800ca88 <atanf+0x19c>)
 800c9f4:	429c      	cmp	r4, r3
 800c9f6:	dc0b      	bgt.n	800ca10 <atanf+0x124>
 800c9f8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c9fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca00:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ca04:	2302      	movs	r3, #2
 800ca06:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ca0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca0e:	e7af      	b.n	800c970 <atanf+0x84>
 800ca10:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ca14:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ca18:	2303      	movs	r3, #3
 800ca1a:	e7a9      	b.n	800c970 <atanf+0x84>
 800ca1c:	4a1b      	ldr	r2, [pc, #108]	; (800ca8c <atanf+0x1a0>)
 800ca1e:	491c      	ldr	r1, [pc, #112]	; (800ca90 <atanf+0x1a4>)
 800ca20:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ca24:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ca28:	ed93 7a00 	vldr	s14, [r3]
 800ca2c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ca30:	2d00      	cmp	r5, #0
 800ca32:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ca36:	ed92 0a00 	vldr	s0, [r2]
 800ca3a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ca3e:	bfb8      	it	lt
 800ca40:	eef1 7a67 	vneglt.f32	s15, s15
 800ca44:	e761      	b.n	800c90a <atanf+0x1e>
 800ca46:	bf00      	nop
 800ca48:	3fc90fdb 	.word	0x3fc90fdb
 800ca4c:	bfc90fdb 	.word	0xbfc90fdb
 800ca50:	3edfffff 	.word	0x3edfffff
 800ca54:	7149f2ca 	.word	0x7149f2ca
 800ca58:	3f97ffff 	.word	0x3f97ffff
 800ca5c:	3c8569d7 	.word	0x3c8569d7
 800ca60:	3d4bda59 	.word	0x3d4bda59
 800ca64:	bd15a221 	.word	0xbd15a221
 800ca68:	be4ccccd 	.word	0xbe4ccccd
 800ca6c:	3d886b35 	.word	0x3d886b35
 800ca70:	3dba2e6e 	.word	0x3dba2e6e
 800ca74:	3e124925 	.word	0x3e124925
 800ca78:	3eaaaaab 	.word	0x3eaaaaab
 800ca7c:	bd6ef16b 	.word	0xbd6ef16b
 800ca80:	bd9d8795 	.word	0xbd9d8795
 800ca84:	bde38e38 	.word	0xbde38e38
 800ca88:	401bffff 	.word	0x401bffff
 800ca8c:	0800f538 	.word	0x0800f538
 800ca90:	0800f548 	.word	0x0800f548

0800ca94 <fabsf>:
 800ca94:	ee10 3a10 	vmov	r3, s0
 800ca98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca9c:	ee00 3a10 	vmov	s0, r3
 800caa0:	4770      	bx	lr
	...

0800caa4 <__errno>:
 800caa4:	4b01      	ldr	r3, [pc, #4]	; (800caac <__errno+0x8>)
 800caa6:	6818      	ldr	r0, [r3, #0]
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	24000038 	.word	0x24000038

0800cab0 <__libc_init_array>:
 800cab0:	b570      	push	{r4, r5, r6, lr}
 800cab2:	4d0d      	ldr	r5, [pc, #52]	; (800cae8 <__libc_init_array+0x38>)
 800cab4:	4c0d      	ldr	r4, [pc, #52]	; (800caec <__libc_init_array+0x3c>)
 800cab6:	1b64      	subs	r4, r4, r5
 800cab8:	10a4      	asrs	r4, r4, #2
 800caba:	2600      	movs	r6, #0
 800cabc:	42a6      	cmp	r6, r4
 800cabe:	d109      	bne.n	800cad4 <__libc_init_array+0x24>
 800cac0:	4d0b      	ldr	r5, [pc, #44]	; (800caf0 <__libc_init_array+0x40>)
 800cac2:	4c0c      	ldr	r4, [pc, #48]	; (800caf4 <__libc_init_array+0x44>)
 800cac4:	f002 fc60 	bl	800f388 <_init>
 800cac8:	1b64      	subs	r4, r4, r5
 800caca:	10a4      	asrs	r4, r4, #2
 800cacc:	2600      	movs	r6, #0
 800cace:	42a6      	cmp	r6, r4
 800cad0:	d105      	bne.n	800cade <__libc_init_array+0x2e>
 800cad2:	bd70      	pop	{r4, r5, r6, pc}
 800cad4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cad8:	4798      	blx	r3
 800cada:	3601      	adds	r6, #1
 800cadc:	e7ee      	b.n	800cabc <__libc_init_array+0xc>
 800cade:	f855 3b04 	ldr.w	r3, [r5], #4
 800cae2:	4798      	blx	r3
 800cae4:	3601      	adds	r6, #1
 800cae6:	e7f2      	b.n	800cace <__libc_init_array+0x1e>
 800cae8:	0800f944 	.word	0x0800f944
 800caec:	0800f944 	.word	0x0800f944
 800caf0:	0800f944 	.word	0x0800f944
 800caf4:	0800f94c 	.word	0x0800f94c

0800caf8 <memset>:
 800caf8:	4402      	add	r2, r0
 800cafa:	4603      	mov	r3, r0
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d100      	bne.n	800cb02 <memset+0xa>
 800cb00:	4770      	bx	lr
 800cb02:	f803 1b01 	strb.w	r1, [r3], #1
 800cb06:	e7f9      	b.n	800cafc <memset+0x4>

0800cb08 <__cvt>:
 800cb08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb0a:	ed2d 8b02 	vpush	{d8}
 800cb0e:	eeb0 8b40 	vmov.f64	d8, d0
 800cb12:	b085      	sub	sp, #20
 800cb14:	4617      	mov	r7, r2
 800cb16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cb18:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cb1a:	ee18 2a90 	vmov	r2, s17
 800cb1e:	f025 0520 	bic.w	r5, r5, #32
 800cb22:	2a00      	cmp	r2, #0
 800cb24:	bfb6      	itet	lt
 800cb26:	222d      	movlt	r2, #45	; 0x2d
 800cb28:	2200      	movge	r2, #0
 800cb2a:	eeb1 8b40 	vneglt.f64	d8, d0
 800cb2e:	2d46      	cmp	r5, #70	; 0x46
 800cb30:	460c      	mov	r4, r1
 800cb32:	701a      	strb	r2, [r3, #0]
 800cb34:	d004      	beq.n	800cb40 <__cvt+0x38>
 800cb36:	2d45      	cmp	r5, #69	; 0x45
 800cb38:	d100      	bne.n	800cb3c <__cvt+0x34>
 800cb3a:	3401      	adds	r4, #1
 800cb3c:	2102      	movs	r1, #2
 800cb3e:	e000      	b.n	800cb42 <__cvt+0x3a>
 800cb40:	2103      	movs	r1, #3
 800cb42:	ab03      	add	r3, sp, #12
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	ab02      	add	r3, sp, #8
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	4622      	mov	r2, r4
 800cb4c:	4633      	mov	r3, r6
 800cb4e:	eeb0 0b48 	vmov.f64	d0, d8
 800cb52:	f000 fca9 	bl	800d4a8 <_dtoa_r>
 800cb56:	2d47      	cmp	r5, #71	; 0x47
 800cb58:	d109      	bne.n	800cb6e <__cvt+0x66>
 800cb5a:	07fb      	lsls	r3, r7, #31
 800cb5c:	d407      	bmi.n	800cb6e <__cvt+0x66>
 800cb5e:	9b03      	ldr	r3, [sp, #12]
 800cb60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb62:	1a1b      	subs	r3, r3, r0
 800cb64:	6013      	str	r3, [r2, #0]
 800cb66:	b005      	add	sp, #20
 800cb68:	ecbd 8b02 	vpop	{d8}
 800cb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb6e:	2d46      	cmp	r5, #70	; 0x46
 800cb70:	eb00 0204 	add.w	r2, r0, r4
 800cb74:	d10c      	bne.n	800cb90 <__cvt+0x88>
 800cb76:	7803      	ldrb	r3, [r0, #0]
 800cb78:	2b30      	cmp	r3, #48	; 0x30
 800cb7a:	d107      	bne.n	800cb8c <__cvt+0x84>
 800cb7c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb84:	bf1c      	itt	ne
 800cb86:	f1c4 0401 	rsbne	r4, r4, #1
 800cb8a:	6034      	strne	r4, [r6, #0]
 800cb8c:	6833      	ldr	r3, [r6, #0]
 800cb8e:	441a      	add	r2, r3
 800cb90:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb98:	bf08      	it	eq
 800cb9a:	9203      	streq	r2, [sp, #12]
 800cb9c:	2130      	movs	r1, #48	; 0x30
 800cb9e:	9b03      	ldr	r3, [sp, #12]
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d2dc      	bcs.n	800cb5e <__cvt+0x56>
 800cba4:	1c5c      	adds	r4, r3, #1
 800cba6:	9403      	str	r4, [sp, #12]
 800cba8:	7019      	strb	r1, [r3, #0]
 800cbaa:	e7f8      	b.n	800cb9e <__cvt+0x96>

0800cbac <__exponent>:
 800cbac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2900      	cmp	r1, #0
 800cbb2:	bfb8      	it	lt
 800cbb4:	4249      	neglt	r1, r1
 800cbb6:	f803 2b02 	strb.w	r2, [r3], #2
 800cbba:	bfb4      	ite	lt
 800cbbc:	222d      	movlt	r2, #45	; 0x2d
 800cbbe:	222b      	movge	r2, #43	; 0x2b
 800cbc0:	2909      	cmp	r1, #9
 800cbc2:	7042      	strb	r2, [r0, #1]
 800cbc4:	dd2a      	ble.n	800cc1c <__exponent+0x70>
 800cbc6:	f10d 0407 	add.w	r4, sp, #7
 800cbca:	46a4      	mov	ip, r4
 800cbcc:	270a      	movs	r7, #10
 800cbce:	46a6      	mov	lr, r4
 800cbd0:	460a      	mov	r2, r1
 800cbd2:	fb91 f6f7 	sdiv	r6, r1, r7
 800cbd6:	fb07 1516 	mls	r5, r7, r6, r1
 800cbda:	3530      	adds	r5, #48	; 0x30
 800cbdc:	2a63      	cmp	r2, #99	; 0x63
 800cbde:	f104 34ff 	add.w	r4, r4, #4294967295
 800cbe2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cbe6:	4631      	mov	r1, r6
 800cbe8:	dcf1      	bgt.n	800cbce <__exponent+0x22>
 800cbea:	3130      	adds	r1, #48	; 0x30
 800cbec:	f1ae 0502 	sub.w	r5, lr, #2
 800cbf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cbf4:	1c44      	adds	r4, r0, #1
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	4561      	cmp	r1, ip
 800cbfa:	d30a      	bcc.n	800cc12 <__exponent+0x66>
 800cbfc:	f10d 0209 	add.w	r2, sp, #9
 800cc00:	eba2 020e 	sub.w	r2, r2, lr
 800cc04:	4565      	cmp	r5, ip
 800cc06:	bf88      	it	hi
 800cc08:	2200      	movhi	r2, #0
 800cc0a:	4413      	add	r3, r2
 800cc0c:	1a18      	subs	r0, r3, r0
 800cc0e:	b003      	add	sp, #12
 800cc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc16:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cc1a:	e7ed      	b.n	800cbf8 <__exponent+0x4c>
 800cc1c:	2330      	movs	r3, #48	; 0x30
 800cc1e:	3130      	adds	r1, #48	; 0x30
 800cc20:	7083      	strb	r3, [r0, #2]
 800cc22:	70c1      	strb	r1, [r0, #3]
 800cc24:	1d03      	adds	r3, r0, #4
 800cc26:	e7f1      	b.n	800cc0c <__exponent+0x60>

0800cc28 <_printf_float>:
 800cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2c:	b08b      	sub	sp, #44	; 0x2c
 800cc2e:	460c      	mov	r4, r1
 800cc30:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cc34:	4616      	mov	r6, r2
 800cc36:	461f      	mov	r7, r3
 800cc38:	4605      	mov	r5, r0
 800cc3a:	f001 f9b7 	bl	800dfac <_localeconv_r>
 800cc3e:	f8d0 b000 	ldr.w	fp, [r0]
 800cc42:	4658      	mov	r0, fp
 800cc44:	f7f3 fb4c 	bl	80002e0 <strlen>
 800cc48:	2300      	movs	r3, #0
 800cc4a:	9308      	str	r3, [sp, #32]
 800cc4c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc50:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cc54:	6822      	ldr	r2, [r4, #0]
 800cc56:	3307      	adds	r3, #7
 800cc58:	f023 0307 	bic.w	r3, r3, #7
 800cc5c:	f103 0108 	add.w	r1, r3, #8
 800cc60:	f8c8 1000 	str.w	r1, [r8]
 800cc64:	4682      	mov	sl, r0
 800cc66:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc6a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cc6e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ced0 <_printf_float+0x2a8>
 800cc72:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cc76:	eeb0 6bc0 	vabs.f64	d6, d0
 800cc7a:	eeb4 6b47 	vcmp.f64	d6, d7
 800cc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc82:	dd24      	ble.n	800ccce <_printf_float+0xa6>
 800cc84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc8c:	d502      	bpl.n	800cc94 <_printf_float+0x6c>
 800cc8e:	232d      	movs	r3, #45	; 0x2d
 800cc90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc94:	4b90      	ldr	r3, [pc, #576]	; (800ced8 <_printf_float+0x2b0>)
 800cc96:	4891      	ldr	r0, [pc, #580]	; (800cedc <_printf_float+0x2b4>)
 800cc98:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cc9c:	bf94      	ite	ls
 800cc9e:	4698      	movls	r8, r3
 800cca0:	4680      	movhi	r8, r0
 800cca2:	2303      	movs	r3, #3
 800cca4:	6123      	str	r3, [r4, #16]
 800cca6:	f022 0204 	bic.w	r2, r2, #4
 800ccaa:	2300      	movs	r3, #0
 800ccac:	6022      	str	r2, [r4, #0]
 800ccae:	9304      	str	r3, [sp, #16]
 800ccb0:	9700      	str	r7, [sp, #0]
 800ccb2:	4633      	mov	r3, r6
 800ccb4:	aa09      	add	r2, sp, #36	; 0x24
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	4628      	mov	r0, r5
 800ccba:	f000 f9d3 	bl	800d064 <_printf_common>
 800ccbe:	3001      	adds	r0, #1
 800ccc0:	f040 808a 	bne.w	800cdd8 <_printf_float+0x1b0>
 800ccc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc8:	b00b      	add	sp, #44	; 0x2c
 800ccca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccce:	eeb4 0b40 	vcmp.f64	d0, d0
 800ccd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd6:	d709      	bvc.n	800ccec <_printf_float+0xc4>
 800ccd8:	ee10 3a90 	vmov	r3, s1
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	bfbc      	itt	lt
 800cce0:	232d      	movlt	r3, #45	; 0x2d
 800cce2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cce6:	487e      	ldr	r0, [pc, #504]	; (800cee0 <_printf_float+0x2b8>)
 800cce8:	4b7e      	ldr	r3, [pc, #504]	; (800cee4 <_printf_float+0x2bc>)
 800ccea:	e7d5      	b.n	800cc98 <_printf_float+0x70>
 800ccec:	6863      	ldr	r3, [r4, #4]
 800ccee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ccf2:	9104      	str	r1, [sp, #16]
 800ccf4:	1c59      	adds	r1, r3, #1
 800ccf6:	d13c      	bne.n	800cd72 <_printf_float+0x14a>
 800ccf8:	2306      	movs	r3, #6
 800ccfa:	6063      	str	r3, [r4, #4]
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	9303      	str	r3, [sp, #12]
 800cd00:	ab08      	add	r3, sp, #32
 800cd02:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cd06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd0a:	ab07      	add	r3, sp, #28
 800cd0c:	6861      	ldr	r1, [r4, #4]
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	6022      	str	r2, [r4, #0]
 800cd12:	f10d 031b 	add.w	r3, sp, #27
 800cd16:	4628      	mov	r0, r5
 800cd18:	f7ff fef6 	bl	800cb08 <__cvt>
 800cd1c:	9b04      	ldr	r3, [sp, #16]
 800cd1e:	9907      	ldr	r1, [sp, #28]
 800cd20:	2b47      	cmp	r3, #71	; 0x47
 800cd22:	4680      	mov	r8, r0
 800cd24:	d108      	bne.n	800cd38 <_printf_float+0x110>
 800cd26:	1cc8      	adds	r0, r1, #3
 800cd28:	db02      	blt.n	800cd30 <_printf_float+0x108>
 800cd2a:	6863      	ldr	r3, [r4, #4]
 800cd2c:	4299      	cmp	r1, r3
 800cd2e:	dd41      	ble.n	800cdb4 <_printf_float+0x18c>
 800cd30:	f1a9 0902 	sub.w	r9, r9, #2
 800cd34:	fa5f f989 	uxtb.w	r9, r9
 800cd38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cd3c:	d820      	bhi.n	800cd80 <_printf_float+0x158>
 800cd3e:	3901      	subs	r1, #1
 800cd40:	464a      	mov	r2, r9
 800cd42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd46:	9107      	str	r1, [sp, #28]
 800cd48:	f7ff ff30 	bl	800cbac <__exponent>
 800cd4c:	9a08      	ldr	r2, [sp, #32]
 800cd4e:	9004      	str	r0, [sp, #16]
 800cd50:	1813      	adds	r3, r2, r0
 800cd52:	2a01      	cmp	r2, #1
 800cd54:	6123      	str	r3, [r4, #16]
 800cd56:	dc02      	bgt.n	800cd5e <_printf_float+0x136>
 800cd58:	6822      	ldr	r2, [r4, #0]
 800cd5a:	07d2      	lsls	r2, r2, #31
 800cd5c:	d501      	bpl.n	800cd62 <_printf_float+0x13a>
 800cd5e:	3301      	adds	r3, #1
 800cd60:	6123      	str	r3, [r4, #16]
 800cd62:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0a2      	beq.n	800ccb0 <_printf_float+0x88>
 800cd6a:	232d      	movs	r3, #45	; 0x2d
 800cd6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd70:	e79e      	b.n	800ccb0 <_printf_float+0x88>
 800cd72:	9904      	ldr	r1, [sp, #16]
 800cd74:	2947      	cmp	r1, #71	; 0x47
 800cd76:	d1c1      	bne.n	800ccfc <_printf_float+0xd4>
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1bf      	bne.n	800ccfc <_printf_float+0xd4>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e7bc      	b.n	800ccfa <_printf_float+0xd2>
 800cd80:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cd84:	d118      	bne.n	800cdb8 <_printf_float+0x190>
 800cd86:	2900      	cmp	r1, #0
 800cd88:	6863      	ldr	r3, [r4, #4]
 800cd8a:	dd0b      	ble.n	800cda4 <_printf_float+0x17c>
 800cd8c:	6121      	str	r1, [r4, #16]
 800cd8e:	b913      	cbnz	r3, 800cd96 <_printf_float+0x16e>
 800cd90:	6822      	ldr	r2, [r4, #0]
 800cd92:	07d0      	lsls	r0, r2, #31
 800cd94:	d502      	bpl.n	800cd9c <_printf_float+0x174>
 800cd96:	3301      	adds	r3, #1
 800cd98:	440b      	add	r3, r1
 800cd9a:	6123      	str	r3, [r4, #16]
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cda0:	9304      	str	r3, [sp, #16]
 800cda2:	e7de      	b.n	800cd62 <_printf_float+0x13a>
 800cda4:	b913      	cbnz	r3, 800cdac <_printf_float+0x184>
 800cda6:	6822      	ldr	r2, [r4, #0]
 800cda8:	07d2      	lsls	r2, r2, #31
 800cdaa:	d501      	bpl.n	800cdb0 <_printf_float+0x188>
 800cdac:	3302      	adds	r3, #2
 800cdae:	e7f4      	b.n	800cd9a <_printf_float+0x172>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e7f2      	b.n	800cd9a <_printf_float+0x172>
 800cdb4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cdb8:	9b08      	ldr	r3, [sp, #32]
 800cdba:	4299      	cmp	r1, r3
 800cdbc:	db05      	blt.n	800cdca <_printf_float+0x1a2>
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	6121      	str	r1, [r4, #16]
 800cdc2:	07d8      	lsls	r0, r3, #31
 800cdc4:	d5ea      	bpl.n	800cd9c <_printf_float+0x174>
 800cdc6:	1c4b      	adds	r3, r1, #1
 800cdc8:	e7e7      	b.n	800cd9a <_printf_float+0x172>
 800cdca:	2900      	cmp	r1, #0
 800cdcc:	bfd4      	ite	le
 800cdce:	f1c1 0202 	rsble	r2, r1, #2
 800cdd2:	2201      	movgt	r2, #1
 800cdd4:	4413      	add	r3, r2
 800cdd6:	e7e0      	b.n	800cd9a <_printf_float+0x172>
 800cdd8:	6823      	ldr	r3, [r4, #0]
 800cdda:	055a      	lsls	r2, r3, #21
 800cddc:	d407      	bmi.n	800cdee <_printf_float+0x1c6>
 800cdde:	6923      	ldr	r3, [r4, #16]
 800cde0:	4642      	mov	r2, r8
 800cde2:	4631      	mov	r1, r6
 800cde4:	4628      	mov	r0, r5
 800cde6:	47b8      	blx	r7
 800cde8:	3001      	adds	r0, #1
 800cdea:	d12a      	bne.n	800ce42 <_printf_float+0x21a>
 800cdec:	e76a      	b.n	800ccc4 <_printf_float+0x9c>
 800cdee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cdf2:	f240 80e2 	bls.w	800cfba <_printf_float+0x392>
 800cdf6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cdfa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce02:	d133      	bne.n	800ce6c <_printf_float+0x244>
 800ce04:	4a38      	ldr	r2, [pc, #224]	; (800cee8 <_printf_float+0x2c0>)
 800ce06:	2301      	movs	r3, #1
 800ce08:	4631      	mov	r1, r6
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	47b8      	blx	r7
 800ce0e:	3001      	adds	r0, #1
 800ce10:	f43f af58 	beq.w	800ccc4 <_printf_float+0x9c>
 800ce14:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	db02      	blt.n	800ce22 <_printf_float+0x1fa>
 800ce1c:	6823      	ldr	r3, [r4, #0]
 800ce1e:	07d8      	lsls	r0, r3, #31
 800ce20:	d50f      	bpl.n	800ce42 <_printf_float+0x21a>
 800ce22:	4653      	mov	r3, sl
 800ce24:	465a      	mov	r2, fp
 800ce26:	4631      	mov	r1, r6
 800ce28:	4628      	mov	r0, r5
 800ce2a:	47b8      	blx	r7
 800ce2c:	3001      	adds	r0, #1
 800ce2e:	f43f af49 	beq.w	800ccc4 <_printf_float+0x9c>
 800ce32:	f04f 0800 	mov.w	r8, #0
 800ce36:	f104 091a 	add.w	r9, r4, #26
 800ce3a:	9b08      	ldr	r3, [sp, #32]
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	4543      	cmp	r3, r8
 800ce40:	dc09      	bgt.n	800ce56 <_printf_float+0x22e>
 800ce42:	6823      	ldr	r3, [r4, #0]
 800ce44:	079b      	lsls	r3, r3, #30
 800ce46:	f100 8108 	bmi.w	800d05a <_printf_float+0x432>
 800ce4a:	68e0      	ldr	r0, [r4, #12]
 800ce4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce4e:	4298      	cmp	r0, r3
 800ce50:	bfb8      	it	lt
 800ce52:	4618      	movlt	r0, r3
 800ce54:	e738      	b.n	800ccc8 <_printf_float+0xa0>
 800ce56:	2301      	movs	r3, #1
 800ce58:	464a      	mov	r2, r9
 800ce5a:	4631      	mov	r1, r6
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	47b8      	blx	r7
 800ce60:	3001      	adds	r0, #1
 800ce62:	f43f af2f 	beq.w	800ccc4 <_printf_float+0x9c>
 800ce66:	f108 0801 	add.w	r8, r8, #1
 800ce6a:	e7e6      	b.n	800ce3a <_printf_float+0x212>
 800ce6c:	9b07      	ldr	r3, [sp, #28]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	dc3c      	bgt.n	800ceec <_printf_float+0x2c4>
 800ce72:	4a1d      	ldr	r2, [pc, #116]	; (800cee8 <_printf_float+0x2c0>)
 800ce74:	2301      	movs	r3, #1
 800ce76:	4631      	mov	r1, r6
 800ce78:	4628      	mov	r0, r5
 800ce7a:	47b8      	blx	r7
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	f43f af21 	beq.w	800ccc4 <_printf_float+0x9c>
 800ce82:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	d102      	bne.n	800ce90 <_printf_float+0x268>
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	07d9      	lsls	r1, r3, #31
 800ce8e:	d5d8      	bpl.n	800ce42 <_printf_float+0x21a>
 800ce90:	4653      	mov	r3, sl
 800ce92:	465a      	mov	r2, fp
 800ce94:	4631      	mov	r1, r6
 800ce96:	4628      	mov	r0, r5
 800ce98:	47b8      	blx	r7
 800ce9a:	3001      	adds	r0, #1
 800ce9c:	f43f af12 	beq.w	800ccc4 <_printf_float+0x9c>
 800cea0:	f04f 0900 	mov.w	r9, #0
 800cea4:	f104 0a1a 	add.w	sl, r4, #26
 800cea8:	9b07      	ldr	r3, [sp, #28]
 800ceaa:	425b      	negs	r3, r3
 800ceac:	454b      	cmp	r3, r9
 800ceae:	dc01      	bgt.n	800ceb4 <_printf_float+0x28c>
 800ceb0:	9b08      	ldr	r3, [sp, #32]
 800ceb2:	e795      	b.n	800cde0 <_printf_float+0x1b8>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	4652      	mov	r2, sl
 800ceb8:	4631      	mov	r1, r6
 800ceba:	4628      	mov	r0, r5
 800cebc:	47b8      	blx	r7
 800cebe:	3001      	adds	r0, #1
 800cec0:	f43f af00 	beq.w	800ccc4 <_printf_float+0x9c>
 800cec4:	f109 0901 	add.w	r9, r9, #1
 800cec8:	e7ee      	b.n	800cea8 <_printf_float+0x280>
 800ceca:	bf00      	nop
 800cecc:	f3af 8000 	nop.w
 800ced0:	ffffffff 	.word	0xffffffff
 800ced4:	7fefffff 	.word	0x7fefffff
 800ced8:	0800f55c 	.word	0x0800f55c
 800cedc:	0800f560 	.word	0x0800f560
 800cee0:	0800f568 	.word	0x0800f568
 800cee4:	0800f564 	.word	0x0800f564
 800cee8:	0800f56c 	.word	0x0800f56c
 800ceec:	9a08      	ldr	r2, [sp, #32]
 800ceee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cef0:	429a      	cmp	r2, r3
 800cef2:	bfa8      	it	ge
 800cef4:	461a      	movge	r2, r3
 800cef6:	2a00      	cmp	r2, #0
 800cef8:	4691      	mov	r9, r2
 800cefa:	dc38      	bgt.n	800cf6e <_printf_float+0x346>
 800cefc:	2300      	movs	r3, #0
 800cefe:	9305      	str	r3, [sp, #20]
 800cf00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf04:	f104 021a 	add.w	r2, r4, #26
 800cf08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf0a:	9905      	ldr	r1, [sp, #20]
 800cf0c:	9304      	str	r3, [sp, #16]
 800cf0e:	eba3 0309 	sub.w	r3, r3, r9
 800cf12:	428b      	cmp	r3, r1
 800cf14:	dc33      	bgt.n	800cf7e <_printf_float+0x356>
 800cf16:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	db3c      	blt.n	800cf98 <_printf_float+0x370>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	07da      	lsls	r2, r3, #31
 800cf22:	d439      	bmi.n	800cf98 <_printf_float+0x370>
 800cf24:	9a08      	ldr	r2, [sp, #32]
 800cf26:	9b04      	ldr	r3, [sp, #16]
 800cf28:	9907      	ldr	r1, [sp, #28]
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	eba2 0901 	sub.w	r9, r2, r1
 800cf30:	4599      	cmp	r9, r3
 800cf32:	bfa8      	it	ge
 800cf34:	4699      	movge	r9, r3
 800cf36:	f1b9 0f00 	cmp.w	r9, #0
 800cf3a:	dc35      	bgt.n	800cfa8 <_printf_float+0x380>
 800cf3c:	f04f 0800 	mov.w	r8, #0
 800cf40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf44:	f104 0a1a 	add.w	sl, r4, #26
 800cf48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cf4c:	1a9b      	subs	r3, r3, r2
 800cf4e:	eba3 0309 	sub.w	r3, r3, r9
 800cf52:	4543      	cmp	r3, r8
 800cf54:	f77f af75 	ble.w	800ce42 <_printf_float+0x21a>
 800cf58:	2301      	movs	r3, #1
 800cf5a:	4652      	mov	r2, sl
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4628      	mov	r0, r5
 800cf60:	47b8      	blx	r7
 800cf62:	3001      	adds	r0, #1
 800cf64:	f43f aeae 	beq.w	800ccc4 <_printf_float+0x9c>
 800cf68:	f108 0801 	add.w	r8, r8, #1
 800cf6c:	e7ec      	b.n	800cf48 <_printf_float+0x320>
 800cf6e:	4613      	mov	r3, r2
 800cf70:	4631      	mov	r1, r6
 800cf72:	4642      	mov	r2, r8
 800cf74:	4628      	mov	r0, r5
 800cf76:	47b8      	blx	r7
 800cf78:	3001      	adds	r0, #1
 800cf7a:	d1bf      	bne.n	800cefc <_printf_float+0x2d4>
 800cf7c:	e6a2      	b.n	800ccc4 <_printf_float+0x9c>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	4631      	mov	r1, r6
 800cf82:	4628      	mov	r0, r5
 800cf84:	9204      	str	r2, [sp, #16]
 800cf86:	47b8      	blx	r7
 800cf88:	3001      	adds	r0, #1
 800cf8a:	f43f ae9b 	beq.w	800ccc4 <_printf_float+0x9c>
 800cf8e:	9b05      	ldr	r3, [sp, #20]
 800cf90:	9a04      	ldr	r2, [sp, #16]
 800cf92:	3301      	adds	r3, #1
 800cf94:	9305      	str	r3, [sp, #20]
 800cf96:	e7b7      	b.n	800cf08 <_printf_float+0x2e0>
 800cf98:	4653      	mov	r3, sl
 800cf9a:	465a      	mov	r2, fp
 800cf9c:	4631      	mov	r1, r6
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	47b8      	blx	r7
 800cfa2:	3001      	adds	r0, #1
 800cfa4:	d1be      	bne.n	800cf24 <_printf_float+0x2fc>
 800cfa6:	e68d      	b.n	800ccc4 <_printf_float+0x9c>
 800cfa8:	9a04      	ldr	r2, [sp, #16]
 800cfaa:	464b      	mov	r3, r9
 800cfac:	4442      	add	r2, r8
 800cfae:	4631      	mov	r1, r6
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	47b8      	blx	r7
 800cfb4:	3001      	adds	r0, #1
 800cfb6:	d1c1      	bne.n	800cf3c <_printf_float+0x314>
 800cfb8:	e684      	b.n	800ccc4 <_printf_float+0x9c>
 800cfba:	9a08      	ldr	r2, [sp, #32]
 800cfbc:	2a01      	cmp	r2, #1
 800cfbe:	dc01      	bgt.n	800cfc4 <_printf_float+0x39c>
 800cfc0:	07db      	lsls	r3, r3, #31
 800cfc2:	d537      	bpl.n	800d034 <_printf_float+0x40c>
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	4642      	mov	r2, r8
 800cfc8:	4631      	mov	r1, r6
 800cfca:	4628      	mov	r0, r5
 800cfcc:	47b8      	blx	r7
 800cfce:	3001      	adds	r0, #1
 800cfd0:	f43f ae78 	beq.w	800ccc4 <_printf_float+0x9c>
 800cfd4:	4653      	mov	r3, sl
 800cfd6:	465a      	mov	r2, fp
 800cfd8:	4631      	mov	r1, r6
 800cfda:	4628      	mov	r0, r5
 800cfdc:	47b8      	blx	r7
 800cfde:	3001      	adds	r0, #1
 800cfe0:	f43f ae70 	beq.w	800ccc4 <_printf_float+0x9c>
 800cfe4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cfe8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff0:	d01b      	beq.n	800d02a <_printf_float+0x402>
 800cff2:	9b08      	ldr	r3, [sp, #32]
 800cff4:	f108 0201 	add.w	r2, r8, #1
 800cff8:	3b01      	subs	r3, #1
 800cffa:	4631      	mov	r1, r6
 800cffc:	4628      	mov	r0, r5
 800cffe:	47b8      	blx	r7
 800d000:	3001      	adds	r0, #1
 800d002:	d10e      	bne.n	800d022 <_printf_float+0x3fa>
 800d004:	e65e      	b.n	800ccc4 <_printf_float+0x9c>
 800d006:	2301      	movs	r3, #1
 800d008:	464a      	mov	r2, r9
 800d00a:	4631      	mov	r1, r6
 800d00c:	4628      	mov	r0, r5
 800d00e:	47b8      	blx	r7
 800d010:	3001      	adds	r0, #1
 800d012:	f43f ae57 	beq.w	800ccc4 <_printf_float+0x9c>
 800d016:	f108 0801 	add.w	r8, r8, #1
 800d01a:	9b08      	ldr	r3, [sp, #32]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	4543      	cmp	r3, r8
 800d020:	dcf1      	bgt.n	800d006 <_printf_float+0x3de>
 800d022:	9b04      	ldr	r3, [sp, #16]
 800d024:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d028:	e6db      	b.n	800cde2 <_printf_float+0x1ba>
 800d02a:	f04f 0800 	mov.w	r8, #0
 800d02e:	f104 091a 	add.w	r9, r4, #26
 800d032:	e7f2      	b.n	800d01a <_printf_float+0x3f2>
 800d034:	2301      	movs	r3, #1
 800d036:	4642      	mov	r2, r8
 800d038:	e7df      	b.n	800cffa <_printf_float+0x3d2>
 800d03a:	2301      	movs	r3, #1
 800d03c:	464a      	mov	r2, r9
 800d03e:	4631      	mov	r1, r6
 800d040:	4628      	mov	r0, r5
 800d042:	47b8      	blx	r7
 800d044:	3001      	adds	r0, #1
 800d046:	f43f ae3d 	beq.w	800ccc4 <_printf_float+0x9c>
 800d04a:	f108 0801 	add.w	r8, r8, #1
 800d04e:	68e3      	ldr	r3, [r4, #12]
 800d050:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d052:	1a5b      	subs	r3, r3, r1
 800d054:	4543      	cmp	r3, r8
 800d056:	dcf0      	bgt.n	800d03a <_printf_float+0x412>
 800d058:	e6f7      	b.n	800ce4a <_printf_float+0x222>
 800d05a:	f04f 0800 	mov.w	r8, #0
 800d05e:	f104 0919 	add.w	r9, r4, #25
 800d062:	e7f4      	b.n	800d04e <_printf_float+0x426>

0800d064 <_printf_common>:
 800d064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d068:	4616      	mov	r6, r2
 800d06a:	4699      	mov	r9, r3
 800d06c:	688a      	ldr	r2, [r1, #8]
 800d06e:	690b      	ldr	r3, [r1, #16]
 800d070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d074:	4293      	cmp	r3, r2
 800d076:	bfb8      	it	lt
 800d078:	4613      	movlt	r3, r2
 800d07a:	6033      	str	r3, [r6, #0]
 800d07c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d080:	4607      	mov	r7, r0
 800d082:	460c      	mov	r4, r1
 800d084:	b10a      	cbz	r2, 800d08a <_printf_common+0x26>
 800d086:	3301      	adds	r3, #1
 800d088:	6033      	str	r3, [r6, #0]
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	0699      	lsls	r1, r3, #26
 800d08e:	bf42      	ittt	mi
 800d090:	6833      	ldrmi	r3, [r6, #0]
 800d092:	3302      	addmi	r3, #2
 800d094:	6033      	strmi	r3, [r6, #0]
 800d096:	6825      	ldr	r5, [r4, #0]
 800d098:	f015 0506 	ands.w	r5, r5, #6
 800d09c:	d106      	bne.n	800d0ac <_printf_common+0x48>
 800d09e:	f104 0a19 	add.w	sl, r4, #25
 800d0a2:	68e3      	ldr	r3, [r4, #12]
 800d0a4:	6832      	ldr	r2, [r6, #0]
 800d0a6:	1a9b      	subs	r3, r3, r2
 800d0a8:	42ab      	cmp	r3, r5
 800d0aa:	dc26      	bgt.n	800d0fa <_printf_common+0x96>
 800d0ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0b0:	1e13      	subs	r3, r2, #0
 800d0b2:	6822      	ldr	r2, [r4, #0]
 800d0b4:	bf18      	it	ne
 800d0b6:	2301      	movne	r3, #1
 800d0b8:	0692      	lsls	r2, r2, #26
 800d0ba:	d42b      	bmi.n	800d114 <_printf_common+0xb0>
 800d0bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	47c0      	blx	r8
 800d0c6:	3001      	adds	r0, #1
 800d0c8:	d01e      	beq.n	800d108 <_printf_common+0xa4>
 800d0ca:	6823      	ldr	r3, [r4, #0]
 800d0cc:	68e5      	ldr	r5, [r4, #12]
 800d0ce:	6832      	ldr	r2, [r6, #0]
 800d0d0:	f003 0306 	and.w	r3, r3, #6
 800d0d4:	2b04      	cmp	r3, #4
 800d0d6:	bf08      	it	eq
 800d0d8:	1aad      	subeq	r5, r5, r2
 800d0da:	68a3      	ldr	r3, [r4, #8]
 800d0dc:	6922      	ldr	r2, [r4, #16]
 800d0de:	bf0c      	ite	eq
 800d0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0e4:	2500      	movne	r5, #0
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	bfc4      	itt	gt
 800d0ea:	1a9b      	subgt	r3, r3, r2
 800d0ec:	18ed      	addgt	r5, r5, r3
 800d0ee:	2600      	movs	r6, #0
 800d0f0:	341a      	adds	r4, #26
 800d0f2:	42b5      	cmp	r5, r6
 800d0f4:	d11a      	bne.n	800d12c <_printf_common+0xc8>
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	e008      	b.n	800d10c <_printf_common+0xa8>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	4652      	mov	r2, sl
 800d0fe:	4649      	mov	r1, r9
 800d100:	4638      	mov	r0, r7
 800d102:	47c0      	blx	r8
 800d104:	3001      	adds	r0, #1
 800d106:	d103      	bne.n	800d110 <_printf_common+0xac>
 800d108:	f04f 30ff 	mov.w	r0, #4294967295
 800d10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d110:	3501      	adds	r5, #1
 800d112:	e7c6      	b.n	800d0a2 <_printf_common+0x3e>
 800d114:	18e1      	adds	r1, r4, r3
 800d116:	1c5a      	adds	r2, r3, #1
 800d118:	2030      	movs	r0, #48	; 0x30
 800d11a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d11e:	4422      	add	r2, r4
 800d120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d128:	3302      	adds	r3, #2
 800d12a:	e7c7      	b.n	800d0bc <_printf_common+0x58>
 800d12c:	2301      	movs	r3, #1
 800d12e:	4622      	mov	r2, r4
 800d130:	4649      	mov	r1, r9
 800d132:	4638      	mov	r0, r7
 800d134:	47c0      	blx	r8
 800d136:	3001      	adds	r0, #1
 800d138:	d0e6      	beq.n	800d108 <_printf_common+0xa4>
 800d13a:	3601      	adds	r6, #1
 800d13c:	e7d9      	b.n	800d0f2 <_printf_common+0x8e>
	...

0800d140 <_printf_i>:
 800d140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d144:	460c      	mov	r4, r1
 800d146:	4691      	mov	r9, r2
 800d148:	7e27      	ldrb	r7, [r4, #24]
 800d14a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d14c:	2f78      	cmp	r7, #120	; 0x78
 800d14e:	4680      	mov	r8, r0
 800d150:	469a      	mov	sl, r3
 800d152:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d156:	d807      	bhi.n	800d168 <_printf_i+0x28>
 800d158:	2f62      	cmp	r7, #98	; 0x62
 800d15a:	d80a      	bhi.n	800d172 <_printf_i+0x32>
 800d15c:	2f00      	cmp	r7, #0
 800d15e:	f000 80d8 	beq.w	800d312 <_printf_i+0x1d2>
 800d162:	2f58      	cmp	r7, #88	; 0x58
 800d164:	f000 80a3 	beq.w	800d2ae <_printf_i+0x16e>
 800d168:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d16c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d170:	e03a      	b.n	800d1e8 <_printf_i+0xa8>
 800d172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d176:	2b15      	cmp	r3, #21
 800d178:	d8f6      	bhi.n	800d168 <_printf_i+0x28>
 800d17a:	a001      	add	r0, pc, #4	; (adr r0, 800d180 <_printf_i+0x40>)
 800d17c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d180:	0800d1d9 	.word	0x0800d1d9
 800d184:	0800d1ed 	.word	0x0800d1ed
 800d188:	0800d169 	.word	0x0800d169
 800d18c:	0800d169 	.word	0x0800d169
 800d190:	0800d169 	.word	0x0800d169
 800d194:	0800d169 	.word	0x0800d169
 800d198:	0800d1ed 	.word	0x0800d1ed
 800d19c:	0800d169 	.word	0x0800d169
 800d1a0:	0800d169 	.word	0x0800d169
 800d1a4:	0800d169 	.word	0x0800d169
 800d1a8:	0800d169 	.word	0x0800d169
 800d1ac:	0800d2f9 	.word	0x0800d2f9
 800d1b0:	0800d21d 	.word	0x0800d21d
 800d1b4:	0800d2db 	.word	0x0800d2db
 800d1b8:	0800d169 	.word	0x0800d169
 800d1bc:	0800d169 	.word	0x0800d169
 800d1c0:	0800d31b 	.word	0x0800d31b
 800d1c4:	0800d169 	.word	0x0800d169
 800d1c8:	0800d21d 	.word	0x0800d21d
 800d1cc:	0800d169 	.word	0x0800d169
 800d1d0:	0800d169 	.word	0x0800d169
 800d1d4:	0800d2e3 	.word	0x0800d2e3
 800d1d8:	680b      	ldr	r3, [r1, #0]
 800d1da:	1d1a      	adds	r2, r3, #4
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	600a      	str	r2, [r1, #0]
 800d1e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e0a3      	b.n	800d334 <_printf_i+0x1f4>
 800d1ec:	6825      	ldr	r5, [r4, #0]
 800d1ee:	6808      	ldr	r0, [r1, #0]
 800d1f0:	062e      	lsls	r6, r5, #24
 800d1f2:	f100 0304 	add.w	r3, r0, #4
 800d1f6:	d50a      	bpl.n	800d20e <_printf_i+0xce>
 800d1f8:	6805      	ldr	r5, [r0, #0]
 800d1fa:	600b      	str	r3, [r1, #0]
 800d1fc:	2d00      	cmp	r5, #0
 800d1fe:	da03      	bge.n	800d208 <_printf_i+0xc8>
 800d200:	232d      	movs	r3, #45	; 0x2d
 800d202:	426d      	negs	r5, r5
 800d204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d208:	485e      	ldr	r0, [pc, #376]	; (800d384 <_printf_i+0x244>)
 800d20a:	230a      	movs	r3, #10
 800d20c:	e019      	b.n	800d242 <_printf_i+0x102>
 800d20e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d212:	6805      	ldr	r5, [r0, #0]
 800d214:	600b      	str	r3, [r1, #0]
 800d216:	bf18      	it	ne
 800d218:	b22d      	sxthne	r5, r5
 800d21a:	e7ef      	b.n	800d1fc <_printf_i+0xbc>
 800d21c:	680b      	ldr	r3, [r1, #0]
 800d21e:	6825      	ldr	r5, [r4, #0]
 800d220:	1d18      	adds	r0, r3, #4
 800d222:	6008      	str	r0, [r1, #0]
 800d224:	0628      	lsls	r0, r5, #24
 800d226:	d501      	bpl.n	800d22c <_printf_i+0xec>
 800d228:	681d      	ldr	r5, [r3, #0]
 800d22a:	e002      	b.n	800d232 <_printf_i+0xf2>
 800d22c:	0669      	lsls	r1, r5, #25
 800d22e:	d5fb      	bpl.n	800d228 <_printf_i+0xe8>
 800d230:	881d      	ldrh	r5, [r3, #0]
 800d232:	4854      	ldr	r0, [pc, #336]	; (800d384 <_printf_i+0x244>)
 800d234:	2f6f      	cmp	r7, #111	; 0x6f
 800d236:	bf0c      	ite	eq
 800d238:	2308      	moveq	r3, #8
 800d23a:	230a      	movne	r3, #10
 800d23c:	2100      	movs	r1, #0
 800d23e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d242:	6866      	ldr	r6, [r4, #4]
 800d244:	60a6      	str	r6, [r4, #8]
 800d246:	2e00      	cmp	r6, #0
 800d248:	bfa2      	ittt	ge
 800d24a:	6821      	ldrge	r1, [r4, #0]
 800d24c:	f021 0104 	bicge.w	r1, r1, #4
 800d250:	6021      	strge	r1, [r4, #0]
 800d252:	b90d      	cbnz	r5, 800d258 <_printf_i+0x118>
 800d254:	2e00      	cmp	r6, #0
 800d256:	d04d      	beq.n	800d2f4 <_printf_i+0x1b4>
 800d258:	4616      	mov	r6, r2
 800d25a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d25e:	fb03 5711 	mls	r7, r3, r1, r5
 800d262:	5dc7      	ldrb	r7, [r0, r7]
 800d264:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d268:	462f      	mov	r7, r5
 800d26a:	42bb      	cmp	r3, r7
 800d26c:	460d      	mov	r5, r1
 800d26e:	d9f4      	bls.n	800d25a <_printf_i+0x11a>
 800d270:	2b08      	cmp	r3, #8
 800d272:	d10b      	bne.n	800d28c <_printf_i+0x14c>
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	07df      	lsls	r7, r3, #31
 800d278:	d508      	bpl.n	800d28c <_printf_i+0x14c>
 800d27a:	6923      	ldr	r3, [r4, #16]
 800d27c:	6861      	ldr	r1, [r4, #4]
 800d27e:	4299      	cmp	r1, r3
 800d280:	bfde      	ittt	le
 800d282:	2330      	movle	r3, #48	; 0x30
 800d284:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d288:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d28c:	1b92      	subs	r2, r2, r6
 800d28e:	6122      	str	r2, [r4, #16]
 800d290:	f8cd a000 	str.w	sl, [sp]
 800d294:	464b      	mov	r3, r9
 800d296:	aa03      	add	r2, sp, #12
 800d298:	4621      	mov	r1, r4
 800d29a:	4640      	mov	r0, r8
 800d29c:	f7ff fee2 	bl	800d064 <_printf_common>
 800d2a0:	3001      	adds	r0, #1
 800d2a2:	d14c      	bne.n	800d33e <_printf_i+0x1fe>
 800d2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a8:	b004      	add	sp, #16
 800d2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ae:	4835      	ldr	r0, [pc, #212]	; (800d384 <_printf_i+0x244>)
 800d2b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	680e      	ldr	r6, [r1, #0]
 800d2b8:	061f      	lsls	r7, r3, #24
 800d2ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800d2be:	600e      	str	r6, [r1, #0]
 800d2c0:	d514      	bpl.n	800d2ec <_printf_i+0x1ac>
 800d2c2:	07d9      	lsls	r1, r3, #31
 800d2c4:	bf44      	itt	mi
 800d2c6:	f043 0320 	orrmi.w	r3, r3, #32
 800d2ca:	6023      	strmi	r3, [r4, #0]
 800d2cc:	b91d      	cbnz	r5, 800d2d6 <_printf_i+0x196>
 800d2ce:	6823      	ldr	r3, [r4, #0]
 800d2d0:	f023 0320 	bic.w	r3, r3, #32
 800d2d4:	6023      	str	r3, [r4, #0]
 800d2d6:	2310      	movs	r3, #16
 800d2d8:	e7b0      	b.n	800d23c <_printf_i+0xfc>
 800d2da:	6823      	ldr	r3, [r4, #0]
 800d2dc:	f043 0320 	orr.w	r3, r3, #32
 800d2e0:	6023      	str	r3, [r4, #0]
 800d2e2:	2378      	movs	r3, #120	; 0x78
 800d2e4:	4828      	ldr	r0, [pc, #160]	; (800d388 <_printf_i+0x248>)
 800d2e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2ea:	e7e3      	b.n	800d2b4 <_printf_i+0x174>
 800d2ec:	065e      	lsls	r6, r3, #25
 800d2ee:	bf48      	it	mi
 800d2f0:	b2ad      	uxthmi	r5, r5
 800d2f2:	e7e6      	b.n	800d2c2 <_printf_i+0x182>
 800d2f4:	4616      	mov	r6, r2
 800d2f6:	e7bb      	b.n	800d270 <_printf_i+0x130>
 800d2f8:	680b      	ldr	r3, [r1, #0]
 800d2fa:	6826      	ldr	r6, [r4, #0]
 800d2fc:	6960      	ldr	r0, [r4, #20]
 800d2fe:	1d1d      	adds	r5, r3, #4
 800d300:	600d      	str	r5, [r1, #0]
 800d302:	0635      	lsls	r5, r6, #24
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	d501      	bpl.n	800d30c <_printf_i+0x1cc>
 800d308:	6018      	str	r0, [r3, #0]
 800d30a:	e002      	b.n	800d312 <_printf_i+0x1d2>
 800d30c:	0671      	lsls	r1, r6, #25
 800d30e:	d5fb      	bpl.n	800d308 <_printf_i+0x1c8>
 800d310:	8018      	strh	r0, [r3, #0]
 800d312:	2300      	movs	r3, #0
 800d314:	6123      	str	r3, [r4, #16]
 800d316:	4616      	mov	r6, r2
 800d318:	e7ba      	b.n	800d290 <_printf_i+0x150>
 800d31a:	680b      	ldr	r3, [r1, #0]
 800d31c:	1d1a      	adds	r2, r3, #4
 800d31e:	600a      	str	r2, [r1, #0]
 800d320:	681e      	ldr	r6, [r3, #0]
 800d322:	6862      	ldr	r2, [r4, #4]
 800d324:	2100      	movs	r1, #0
 800d326:	4630      	mov	r0, r6
 800d328:	f7f2 ffe2 	bl	80002f0 <memchr>
 800d32c:	b108      	cbz	r0, 800d332 <_printf_i+0x1f2>
 800d32e:	1b80      	subs	r0, r0, r6
 800d330:	6060      	str	r0, [r4, #4]
 800d332:	6863      	ldr	r3, [r4, #4]
 800d334:	6123      	str	r3, [r4, #16]
 800d336:	2300      	movs	r3, #0
 800d338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d33c:	e7a8      	b.n	800d290 <_printf_i+0x150>
 800d33e:	6923      	ldr	r3, [r4, #16]
 800d340:	4632      	mov	r2, r6
 800d342:	4649      	mov	r1, r9
 800d344:	4640      	mov	r0, r8
 800d346:	47d0      	blx	sl
 800d348:	3001      	adds	r0, #1
 800d34a:	d0ab      	beq.n	800d2a4 <_printf_i+0x164>
 800d34c:	6823      	ldr	r3, [r4, #0]
 800d34e:	079b      	lsls	r3, r3, #30
 800d350:	d413      	bmi.n	800d37a <_printf_i+0x23a>
 800d352:	68e0      	ldr	r0, [r4, #12]
 800d354:	9b03      	ldr	r3, [sp, #12]
 800d356:	4298      	cmp	r0, r3
 800d358:	bfb8      	it	lt
 800d35a:	4618      	movlt	r0, r3
 800d35c:	e7a4      	b.n	800d2a8 <_printf_i+0x168>
 800d35e:	2301      	movs	r3, #1
 800d360:	4632      	mov	r2, r6
 800d362:	4649      	mov	r1, r9
 800d364:	4640      	mov	r0, r8
 800d366:	47d0      	blx	sl
 800d368:	3001      	adds	r0, #1
 800d36a:	d09b      	beq.n	800d2a4 <_printf_i+0x164>
 800d36c:	3501      	adds	r5, #1
 800d36e:	68e3      	ldr	r3, [r4, #12]
 800d370:	9903      	ldr	r1, [sp, #12]
 800d372:	1a5b      	subs	r3, r3, r1
 800d374:	42ab      	cmp	r3, r5
 800d376:	dcf2      	bgt.n	800d35e <_printf_i+0x21e>
 800d378:	e7eb      	b.n	800d352 <_printf_i+0x212>
 800d37a:	2500      	movs	r5, #0
 800d37c:	f104 0619 	add.w	r6, r4, #25
 800d380:	e7f5      	b.n	800d36e <_printf_i+0x22e>
 800d382:	bf00      	nop
 800d384:	0800f56e 	.word	0x0800f56e
 800d388:	0800f57f 	.word	0x0800f57f

0800d38c <quorem>:
 800d38c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d390:	6903      	ldr	r3, [r0, #16]
 800d392:	690c      	ldr	r4, [r1, #16]
 800d394:	42a3      	cmp	r3, r4
 800d396:	4607      	mov	r7, r0
 800d398:	f2c0 8081 	blt.w	800d49e <quorem+0x112>
 800d39c:	3c01      	subs	r4, #1
 800d39e:	f101 0814 	add.w	r8, r1, #20
 800d3a2:	f100 0514 	add.w	r5, r0, #20
 800d3a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3aa:	9301      	str	r3, [sp, #4]
 800d3ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d3bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3c4:	d331      	bcc.n	800d42a <quorem+0x9e>
 800d3c6:	f04f 0e00 	mov.w	lr, #0
 800d3ca:	4640      	mov	r0, r8
 800d3cc:	46ac      	mov	ip, r5
 800d3ce:	46f2      	mov	sl, lr
 800d3d0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3d4:	b293      	uxth	r3, r2
 800d3d6:	fb06 e303 	mla	r3, r6, r3, lr
 800d3da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	ebaa 0303 	sub.w	r3, sl, r3
 800d3e4:	0c12      	lsrs	r2, r2, #16
 800d3e6:	f8dc a000 	ldr.w	sl, [ip]
 800d3ea:	fb06 e202 	mla	r2, r6, r2, lr
 800d3ee:	fa13 f38a 	uxtah	r3, r3, sl
 800d3f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d3f6:	fa1f fa82 	uxth.w	sl, r2
 800d3fa:	f8dc 2000 	ldr.w	r2, [ip]
 800d3fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d402:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d406:	b29b      	uxth	r3, r3
 800d408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d40c:	4581      	cmp	r9, r0
 800d40e:	f84c 3b04 	str.w	r3, [ip], #4
 800d412:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d416:	d2db      	bcs.n	800d3d0 <quorem+0x44>
 800d418:	f855 300b 	ldr.w	r3, [r5, fp]
 800d41c:	b92b      	cbnz	r3, 800d42a <quorem+0x9e>
 800d41e:	9b01      	ldr	r3, [sp, #4]
 800d420:	3b04      	subs	r3, #4
 800d422:	429d      	cmp	r5, r3
 800d424:	461a      	mov	r2, r3
 800d426:	d32e      	bcc.n	800d486 <quorem+0xfa>
 800d428:	613c      	str	r4, [r7, #16]
 800d42a:	4638      	mov	r0, r7
 800d42c:	f001 f856 	bl	800e4dc <__mcmp>
 800d430:	2800      	cmp	r0, #0
 800d432:	db24      	blt.n	800d47e <quorem+0xf2>
 800d434:	3601      	adds	r6, #1
 800d436:	4628      	mov	r0, r5
 800d438:	f04f 0c00 	mov.w	ip, #0
 800d43c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d440:	f8d0 e000 	ldr.w	lr, [r0]
 800d444:	b293      	uxth	r3, r2
 800d446:	ebac 0303 	sub.w	r3, ip, r3
 800d44a:	0c12      	lsrs	r2, r2, #16
 800d44c:	fa13 f38e 	uxtah	r3, r3, lr
 800d450:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d454:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d458:	b29b      	uxth	r3, r3
 800d45a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d45e:	45c1      	cmp	r9, r8
 800d460:	f840 3b04 	str.w	r3, [r0], #4
 800d464:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d468:	d2e8      	bcs.n	800d43c <quorem+0xb0>
 800d46a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d46e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d472:	b922      	cbnz	r2, 800d47e <quorem+0xf2>
 800d474:	3b04      	subs	r3, #4
 800d476:	429d      	cmp	r5, r3
 800d478:	461a      	mov	r2, r3
 800d47a:	d30a      	bcc.n	800d492 <quorem+0x106>
 800d47c:	613c      	str	r4, [r7, #16]
 800d47e:	4630      	mov	r0, r6
 800d480:	b003      	add	sp, #12
 800d482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d486:	6812      	ldr	r2, [r2, #0]
 800d488:	3b04      	subs	r3, #4
 800d48a:	2a00      	cmp	r2, #0
 800d48c:	d1cc      	bne.n	800d428 <quorem+0x9c>
 800d48e:	3c01      	subs	r4, #1
 800d490:	e7c7      	b.n	800d422 <quorem+0x96>
 800d492:	6812      	ldr	r2, [r2, #0]
 800d494:	3b04      	subs	r3, #4
 800d496:	2a00      	cmp	r2, #0
 800d498:	d1f0      	bne.n	800d47c <quorem+0xf0>
 800d49a:	3c01      	subs	r4, #1
 800d49c:	e7eb      	b.n	800d476 <quorem+0xea>
 800d49e:	2000      	movs	r0, #0
 800d4a0:	e7ee      	b.n	800d480 <quorem+0xf4>
 800d4a2:	0000      	movs	r0, r0
 800d4a4:	0000      	movs	r0, r0
	...

0800d4a8 <_dtoa_r>:
 800d4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ac:	ec59 8b10 	vmov	r8, r9, d0
 800d4b0:	b095      	sub	sp, #84	; 0x54
 800d4b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4b4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d4b6:	9107      	str	r1, [sp, #28]
 800d4b8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d4bc:	4606      	mov	r6, r0
 800d4be:	9209      	str	r2, [sp, #36]	; 0x24
 800d4c0:	9310      	str	r3, [sp, #64]	; 0x40
 800d4c2:	b975      	cbnz	r5, 800d4e2 <_dtoa_r+0x3a>
 800d4c4:	2010      	movs	r0, #16
 800d4c6:	f000 fd75 	bl	800dfb4 <malloc>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	6270      	str	r0, [r6, #36]	; 0x24
 800d4ce:	b920      	cbnz	r0, 800d4da <_dtoa_r+0x32>
 800d4d0:	4bab      	ldr	r3, [pc, #684]	; (800d780 <_dtoa_r+0x2d8>)
 800d4d2:	21ea      	movs	r1, #234	; 0xea
 800d4d4:	48ab      	ldr	r0, [pc, #684]	; (800d784 <_dtoa_r+0x2dc>)
 800d4d6:	f001 f9cb 	bl	800e870 <__assert_func>
 800d4da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4de:	6005      	str	r5, [r0, #0]
 800d4e0:	60c5      	str	r5, [r0, #12]
 800d4e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d4e4:	6819      	ldr	r1, [r3, #0]
 800d4e6:	b151      	cbz	r1, 800d4fe <_dtoa_r+0x56>
 800d4e8:	685a      	ldr	r2, [r3, #4]
 800d4ea:	604a      	str	r2, [r1, #4]
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	4093      	lsls	r3, r2
 800d4f0:	608b      	str	r3, [r1, #8]
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	f000 fdb4 	bl	800e060 <_Bfree>
 800d4f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	f1b9 0300 	subs.w	r3, r9, #0
 800d502:	bfbb      	ittet	lt
 800d504:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d508:	9303      	strlt	r3, [sp, #12]
 800d50a:	2300      	movge	r3, #0
 800d50c:	2201      	movlt	r2, #1
 800d50e:	bfac      	ite	ge
 800d510:	6023      	strge	r3, [r4, #0]
 800d512:	6022      	strlt	r2, [r4, #0]
 800d514:	4b9c      	ldr	r3, [pc, #624]	; (800d788 <_dtoa_r+0x2e0>)
 800d516:	9c03      	ldr	r4, [sp, #12]
 800d518:	43a3      	bics	r3, r4
 800d51a:	d11a      	bne.n	800d552 <_dtoa_r+0xaa>
 800d51c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d51e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d528:	ea53 0308 	orrs.w	r3, r3, r8
 800d52c:	f000 8512 	beq.w	800df54 <_dtoa_r+0xaac>
 800d530:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d532:	b953      	cbnz	r3, 800d54a <_dtoa_r+0xa2>
 800d534:	4b95      	ldr	r3, [pc, #596]	; (800d78c <_dtoa_r+0x2e4>)
 800d536:	e01f      	b.n	800d578 <_dtoa_r+0xd0>
 800d538:	4b95      	ldr	r3, [pc, #596]	; (800d790 <_dtoa_r+0x2e8>)
 800d53a:	9300      	str	r3, [sp, #0]
 800d53c:	3308      	adds	r3, #8
 800d53e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d540:	6013      	str	r3, [r2, #0]
 800d542:	9800      	ldr	r0, [sp, #0]
 800d544:	b015      	add	sp, #84	; 0x54
 800d546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54a:	4b90      	ldr	r3, [pc, #576]	; (800d78c <_dtoa_r+0x2e4>)
 800d54c:	9300      	str	r3, [sp, #0]
 800d54e:	3303      	adds	r3, #3
 800d550:	e7f5      	b.n	800d53e <_dtoa_r+0x96>
 800d552:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d556:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d55e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d562:	d10b      	bne.n	800d57c <_dtoa_r+0xd4>
 800d564:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d566:	2301      	movs	r3, #1
 800d568:	6013      	str	r3, [r2, #0]
 800d56a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 84ee 	beq.w	800df4e <_dtoa_r+0xaa6>
 800d572:	4888      	ldr	r0, [pc, #544]	; (800d794 <_dtoa_r+0x2ec>)
 800d574:	6018      	str	r0, [r3, #0]
 800d576:	1e43      	subs	r3, r0, #1
 800d578:	9300      	str	r3, [sp, #0]
 800d57a:	e7e2      	b.n	800d542 <_dtoa_r+0x9a>
 800d57c:	a913      	add	r1, sp, #76	; 0x4c
 800d57e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d582:	aa12      	add	r2, sp, #72	; 0x48
 800d584:	4630      	mov	r0, r6
 800d586:	f001 f84d 	bl	800e624 <__d2b>
 800d58a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d58e:	4605      	mov	r5, r0
 800d590:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d592:	2900      	cmp	r1, #0
 800d594:	d047      	beq.n	800d626 <_dtoa_r+0x17e>
 800d596:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d598:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d59c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d5a0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d5a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d5a8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d5ac:	2400      	movs	r4, #0
 800d5ae:	ec43 2b16 	vmov	d6, r2, r3
 800d5b2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d5b6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d768 <_dtoa_r+0x2c0>
 800d5ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d5be:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d770 <_dtoa_r+0x2c8>
 800d5c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d5c6:	eeb0 7b46 	vmov.f64	d7, d6
 800d5ca:	ee06 1a90 	vmov	s13, r1
 800d5ce:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d5d2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d778 <_dtoa_r+0x2d0>
 800d5d6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d5da:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d5de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e6:	ee16 ba90 	vmov	fp, s13
 800d5ea:	9411      	str	r4, [sp, #68]	; 0x44
 800d5ec:	d508      	bpl.n	800d600 <_dtoa_r+0x158>
 800d5ee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d5f2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5fa:	bf18      	it	ne
 800d5fc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d600:	f1bb 0f16 	cmp.w	fp, #22
 800d604:	d832      	bhi.n	800d66c <_dtoa_r+0x1c4>
 800d606:	4b64      	ldr	r3, [pc, #400]	; (800d798 <_dtoa_r+0x2f0>)
 800d608:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d60c:	ed93 7b00 	vldr	d7, [r3]
 800d610:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d614:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d61c:	d501      	bpl.n	800d622 <_dtoa_r+0x17a>
 800d61e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d622:	2300      	movs	r3, #0
 800d624:	e023      	b.n	800d66e <_dtoa_r+0x1c6>
 800d626:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d628:	4401      	add	r1, r0
 800d62a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d62e:	2b20      	cmp	r3, #32
 800d630:	bfc3      	ittte	gt
 800d632:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d636:	fa04 f303 	lslgt.w	r3, r4, r3
 800d63a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d63e:	f1c3 0320 	rsble	r3, r3, #32
 800d642:	bfc6      	itte	gt
 800d644:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d648:	ea43 0308 	orrgt.w	r3, r3, r8
 800d64c:	fa08 f303 	lslle.w	r3, r8, r3
 800d650:	ee07 3a90 	vmov	s15, r3
 800d654:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d658:	3901      	subs	r1, #1
 800d65a:	ed8d 7b00 	vstr	d7, [sp]
 800d65e:	9c01      	ldr	r4, [sp, #4]
 800d660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d664:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d668:	2401      	movs	r4, #1
 800d66a:	e7a0      	b.n	800d5ae <_dtoa_r+0x106>
 800d66c:	2301      	movs	r3, #1
 800d66e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d670:	1a43      	subs	r3, r0, r1
 800d672:	1e5a      	subs	r2, r3, #1
 800d674:	bf45      	ittet	mi
 800d676:	f1c3 0301 	rsbmi	r3, r3, #1
 800d67a:	9305      	strmi	r3, [sp, #20]
 800d67c:	2300      	movpl	r3, #0
 800d67e:	2300      	movmi	r3, #0
 800d680:	9206      	str	r2, [sp, #24]
 800d682:	bf54      	ite	pl
 800d684:	9305      	strpl	r3, [sp, #20]
 800d686:	9306      	strmi	r3, [sp, #24]
 800d688:	f1bb 0f00 	cmp.w	fp, #0
 800d68c:	db18      	blt.n	800d6c0 <_dtoa_r+0x218>
 800d68e:	9b06      	ldr	r3, [sp, #24]
 800d690:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d694:	445b      	add	r3, fp
 800d696:	9306      	str	r3, [sp, #24]
 800d698:	2300      	movs	r3, #0
 800d69a:	9a07      	ldr	r2, [sp, #28]
 800d69c:	2a09      	cmp	r2, #9
 800d69e:	d849      	bhi.n	800d734 <_dtoa_r+0x28c>
 800d6a0:	2a05      	cmp	r2, #5
 800d6a2:	bfc4      	itt	gt
 800d6a4:	3a04      	subgt	r2, #4
 800d6a6:	9207      	strgt	r2, [sp, #28]
 800d6a8:	9a07      	ldr	r2, [sp, #28]
 800d6aa:	f1a2 0202 	sub.w	r2, r2, #2
 800d6ae:	bfcc      	ite	gt
 800d6b0:	2400      	movgt	r4, #0
 800d6b2:	2401      	movle	r4, #1
 800d6b4:	2a03      	cmp	r2, #3
 800d6b6:	d848      	bhi.n	800d74a <_dtoa_r+0x2a2>
 800d6b8:	e8df f002 	tbb	[pc, r2]
 800d6bc:	3a2c2e0b 	.word	0x3a2c2e0b
 800d6c0:	9b05      	ldr	r3, [sp, #20]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	eba3 030b 	sub.w	r3, r3, fp
 800d6c8:	9305      	str	r3, [sp, #20]
 800d6ca:	920e      	str	r2, [sp, #56]	; 0x38
 800d6cc:	f1cb 0300 	rsb	r3, fp, #0
 800d6d0:	e7e3      	b.n	800d69a <_dtoa_r+0x1f2>
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	9208      	str	r2, [sp, #32]
 800d6d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6d8:	2a00      	cmp	r2, #0
 800d6da:	dc39      	bgt.n	800d750 <_dtoa_r+0x2a8>
 800d6dc:	f04f 0a01 	mov.w	sl, #1
 800d6e0:	46d1      	mov	r9, sl
 800d6e2:	4652      	mov	r2, sl
 800d6e4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d6e8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	6079      	str	r1, [r7, #4]
 800d6ee:	2004      	movs	r0, #4
 800d6f0:	f100 0c14 	add.w	ip, r0, #20
 800d6f4:	4594      	cmp	ip, r2
 800d6f6:	6879      	ldr	r1, [r7, #4]
 800d6f8:	d92f      	bls.n	800d75a <_dtoa_r+0x2b2>
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	930c      	str	r3, [sp, #48]	; 0x30
 800d6fe:	f000 fc6f 	bl	800dfe0 <_Balloc>
 800d702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d704:	9000      	str	r0, [sp, #0]
 800d706:	4602      	mov	r2, r0
 800d708:	2800      	cmp	r0, #0
 800d70a:	d149      	bne.n	800d7a0 <_dtoa_r+0x2f8>
 800d70c:	4b23      	ldr	r3, [pc, #140]	; (800d79c <_dtoa_r+0x2f4>)
 800d70e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d712:	e6df      	b.n	800d4d4 <_dtoa_r+0x2c>
 800d714:	2201      	movs	r2, #1
 800d716:	e7dd      	b.n	800d6d4 <_dtoa_r+0x22c>
 800d718:	2200      	movs	r2, #0
 800d71a:	9208      	str	r2, [sp, #32]
 800d71c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d71e:	eb0b 0a02 	add.w	sl, fp, r2
 800d722:	f10a 0901 	add.w	r9, sl, #1
 800d726:	464a      	mov	r2, r9
 800d728:	2a01      	cmp	r2, #1
 800d72a:	bfb8      	it	lt
 800d72c:	2201      	movlt	r2, #1
 800d72e:	e7db      	b.n	800d6e8 <_dtoa_r+0x240>
 800d730:	2201      	movs	r2, #1
 800d732:	e7f2      	b.n	800d71a <_dtoa_r+0x272>
 800d734:	2401      	movs	r4, #1
 800d736:	2200      	movs	r2, #0
 800d738:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d73c:	f04f 3aff 	mov.w	sl, #4294967295
 800d740:	2100      	movs	r1, #0
 800d742:	46d1      	mov	r9, sl
 800d744:	2212      	movs	r2, #18
 800d746:	9109      	str	r1, [sp, #36]	; 0x24
 800d748:	e7ce      	b.n	800d6e8 <_dtoa_r+0x240>
 800d74a:	2201      	movs	r2, #1
 800d74c:	9208      	str	r2, [sp, #32]
 800d74e:	e7f5      	b.n	800d73c <_dtoa_r+0x294>
 800d750:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d754:	46d1      	mov	r9, sl
 800d756:	4652      	mov	r2, sl
 800d758:	e7c6      	b.n	800d6e8 <_dtoa_r+0x240>
 800d75a:	3101      	adds	r1, #1
 800d75c:	6079      	str	r1, [r7, #4]
 800d75e:	0040      	lsls	r0, r0, #1
 800d760:	e7c6      	b.n	800d6f0 <_dtoa_r+0x248>
 800d762:	bf00      	nop
 800d764:	f3af 8000 	nop.w
 800d768:	636f4361 	.word	0x636f4361
 800d76c:	3fd287a7 	.word	0x3fd287a7
 800d770:	8b60c8b3 	.word	0x8b60c8b3
 800d774:	3fc68a28 	.word	0x3fc68a28
 800d778:	509f79fb 	.word	0x509f79fb
 800d77c:	3fd34413 	.word	0x3fd34413
 800d780:	0800f59d 	.word	0x0800f59d
 800d784:	0800f5b4 	.word	0x0800f5b4
 800d788:	7ff00000 	.word	0x7ff00000
 800d78c:	0800f599 	.word	0x0800f599
 800d790:	0800f590 	.word	0x0800f590
 800d794:	0800f56d 	.word	0x0800f56d
 800d798:	0800f6b0 	.word	0x0800f6b0
 800d79c:	0800f613 	.word	0x0800f613
 800d7a0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d7a2:	9900      	ldr	r1, [sp, #0]
 800d7a4:	6011      	str	r1, [r2, #0]
 800d7a6:	f1b9 0f0e 	cmp.w	r9, #14
 800d7aa:	d872      	bhi.n	800d892 <_dtoa_r+0x3ea>
 800d7ac:	2c00      	cmp	r4, #0
 800d7ae:	d070      	beq.n	800d892 <_dtoa_r+0x3ea>
 800d7b0:	f1bb 0f00 	cmp.w	fp, #0
 800d7b4:	f340 80a6 	ble.w	800d904 <_dtoa_r+0x45c>
 800d7b8:	49ca      	ldr	r1, [pc, #808]	; (800dae4 <_dtoa_r+0x63c>)
 800d7ba:	f00b 020f 	and.w	r2, fp, #15
 800d7be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d7c2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d7c6:	ed92 7b00 	vldr	d7, [r2]
 800d7ca:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d7ce:	f000 808d 	beq.w	800d8ec <_dtoa_r+0x444>
 800d7d2:	4ac5      	ldr	r2, [pc, #788]	; (800dae8 <_dtoa_r+0x640>)
 800d7d4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d7d8:	ed92 6b08 	vldr	d6, [r2, #32]
 800d7dc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d7e0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d7e4:	f001 010f 	and.w	r1, r1, #15
 800d7e8:	2203      	movs	r2, #3
 800d7ea:	48bf      	ldr	r0, [pc, #764]	; (800dae8 <_dtoa_r+0x640>)
 800d7ec:	2900      	cmp	r1, #0
 800d7ee:	d17f      	bne.n	800d8f0 <_dtoa_r+0x448>
 800d7f0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d7f4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d7f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d7fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d7fe:	2900      	cmp	r1, #0
 800d800:	f000 80b2 	beq.w	800d968 <_dtoa_r+0x4c0>
 800d804:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d808:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d80c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d814:	f140 80a8 	bpl.w	800d968 <_dtoa_r+0x4c0>
 800d818:	f1b9 0f00 	cmp.w	r9, #0
 800d81c:	f000 80a4 	beq.w	800d968 <_dtoa_r+0x4c0>
 800d820:	f1ba 0f00 	cmp.w	sl, #0
 800d824:	dd31      	ble.n	800d88a <_dtoa_r+0x3e2>
 800d826:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d82a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d82e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d832:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d836:	3201      	adds	r2, #1
 800d838:	4650      	mov	r0, sl
 800d83a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d83e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d842:	ee07 2a90 	vmov	s15, r2
 800d846:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d84a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d84e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d852:	9c03      	ldr	r4, [sp, #12]
 800d854:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d858:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d85c:	2800      	cmp	r0, #0
 800d85e:	f040 8086 	bne.w	800d96e <_dtoa_r+0x4c6>
 800d862:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d866:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d86a:	ec42 1b17 	vmov	d7, r1, r2
 800d86e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d876:	f300 8272 	bgt.w	800dd5e <_dtoa_r+0x8b6>
 800d87a:	eeb1 7b47 	vneg.f64	d7, d7
 800d87e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d886:	f100 8267 	bmi.w	800dd58 <_dtoa_r+0x8b0>
 800d88a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d88e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d892:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d894:	2a00      	cmp	r2, #0
 800d896:	f2c0 8129 	blt.w	800daec <_dtoa_r+0x644>
 800d89a:	f1bb 0f0e 	cmp.w	fp, #14
 800d89e:	f300 8125 	bgt.w	800daec <_dtoa_r+0x644>
 800d8a2:	4b90      	ldr	r3, [pc, #576]	; (800dae4 <_dtoa_r+0x63c>)
 800d8a4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d8a8:	ed93 6b00 	vldr	d6, [r3]
 800d8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f280 80c3 	bge.w	800da3a <_dtoa_r+0x592>
 800d8b4:	f1b9 0f00 	cmp.w	r9, #0
 800d8b8:	f300 80bf 	bgt.w	800da3a <_dtoa_r+0x592>
 800d8bc:	f040 824c 	bne.w	800dd58 <_dtoa_r+0x8b0>
 800d8c0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d8c4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d8c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d4:	464c      	mov	r4, r9
 800d8d6:	464f      	mov	r7, r9
 800d8d8:	f280 8222 	bge.w	800dd20 <_dtoa_r+0x878>
 800d8dc:	f8dd 8000 	ldr.w	r8, [sp]
 800d8e0:	2331      	movs	r3, #49	; 0x31
 800d8e2:	f808 3b01 	strb.w	r3, [r8], #1
 800d8e6:	f10b 0b01 	add.w	fp, fp, #1
 800d8ea:	e21e      	b.n	800dd2a <_dtoa_r+0x882>
 800d8ec:	2202      	movs	r2, #2
 800d8ee:	e77c      	b.n	800d7ea <_dtoa_r+0x342>
 800d8f0:	07cc      	lsls	r4, r1, #31
 800d8f2:	d504      	bpl.n	800d8fe <_dtoa_r+0x456>
 800d8f4:	ed90 6b00 	vldr	d6, [r0]
 800d8f8:	3201      	adds	r2, #1
 800d8fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d8fe:	1049      	asrs	r1, r1, #1
 800d900:	3008      	adds	r0, #8
 800d902:	e773      	b.n	800d7ec <_dtoa_r+0x344>
 800d904:	d02e      	beq.n	800d964 <_dtoa_r+0x4bc>
 800d906:	f1cb 0100 	rsb	r1, fp, #0
 800d90a:	4a76      	ldr	r2, [pc, #472]	; (800dae4 <_dtoa_r+0x63c>)
 800d90c:	f001 000f 	and.w	r0, r1, #15
 800d910:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d914:	ed92 7b00 	vldr	d7, [r2]
 800d918:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d91c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d920:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d924:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d928:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d92c:	486e      	ldr	r0, [pc, #440]	; (800dae8 <_dtoa_r+0x640>)
 800d92e:	1109      	asrs	r1, r1, #4
 800d930:	2400      	movs	r4, #0
 800d932:	2202      	movs	r2, #2
 800d934:	b939      	cbnz	r1, 800d946 <_dtoa_r+0x49e>
 800d936:	2c00      	cmp	r4, #0
 800d938:	f43f af60 	beq.w	800d7fc <_dtoa_r+0x354>
 800d93c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d944:	e75a      	b.n	800d7fc <_dtoa_r+0x354>
 800d946:	07cf      	lsls	r7, r1, #31
 800d948:	d509      	bpl.n	800d95e <_dtoa_r+0x4b6>
 800d94a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d94e:	ed90 7b00 	vldr	d7, [r0]
 800d952:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d956:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d95a:	3201      	adds	r2, #1
 800d95c:	2401      	movs	r4, #1
 800d95e:	1049      	asrs	r1, r1, #1
 800d960:	3008      	adds	r0, #8
 800d962:	e7e7      	b.n	800d934 <_dtoa_r+0x48c>
 800d964:	2202      	movs	r2, #2
 800d966:	e749      	b.n	800d7fc <_dtoa_r+0x354>
 800d968:	465f      	mov	r7, fp
 800d96a:	4648      	mov	r0, r9
 800d96c:	e765      	b.n	800d83a <_dtoa_r+0x392>
 800d96e:	ec42 1b17 	vmov	d7, r1, r2
 800d972:	4a5c      	ldr	r2, [pc, #368]	; (800dae4 <_dtoa_r+0x63c>)
 800d974:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d978:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d97c:	9a00      	ldr	r2, [sp, #0]
 800d97e:	1814      	adds	r4, r2, r0
 800d980:	9a08      	ldr	r2, [sp, #32]
 800d982:	b352      	cbz	r2, 800d9da <_dtoa_r+0x532>
 800d984:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d988:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d98c:	f8dd 8000 	ldr.w	r8, [sp]
 800d990:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d994:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d998:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d99c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d9a0:	ee14 2a90 	vmov	r2, s9
 800d9a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d9a8:	3230      	adds	r2, #48	; 0x30
 800d9aa:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d9ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9b6:	f808 2b01 	strb.w	r2, [r8], #1
 800d9ba:	d439      	bmi.n	800da30 <_dtoa_r+0x588>
 800d9bc:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d9c0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c8:	d472      	bmi.n	800dab0 <_dtoa_r+0x608>
 800d9ca:	45a0      	cmp	r8, r4
 800d9cc:	f43f af5d 	beq.w	800d88a <_dtoa_r+0x3e2>
 800d9d0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d9d4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d9d8:	e7e0      	b.n	800d99c <_dtoa_r+0x4f4>
 800d9da:	f8dd 8000 	ldr.w	r8, [sp]
 800d9de:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d9e2:	4621      	mov	r1, r4
 800d9e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d9e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d9ec:	ee14 2a90 	vmov	r2, s9
 800d9f0:	3230      	adds	r2, #48	; 0x30
 800d9f2:	f808 2b01 	strb.w	r2, [r8], #1
 800d9f6:	45a0      	cmp	r8, r4
 800d9f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d9fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800da00:	d118      	bne.n	800da34 <_dtoa_r+0x58c>
 800da02:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800da06:	ee37 4b05 	vadd.f64	d4, d7, d5
 800da0a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800da0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da12:	dc4d      	bgt.n	800dab0 <_dtoa_r+0x608>
 800da14:	ee35 7b47 	vsub.f64	d7, d5, d7
 800da18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da20:	f57f af33 	bpl.w	800d88a <_dtoa_r+0x3e2>
 800da24:	4688      	mov	r8, r1
 800da26:	3901      	subs	r1, #1
 800da28:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800da2c:	2b30      	cmp	r3, #48	; 0x30
 800da2e:	d0f9      	beq.n	800da24 <_dtoa_r+0x57c>
 800da30:	46bb      	mov	fp, r7
 800da32:	e02a      	b.n	800da8a <_dtoa_r+0x5e2>
 800da34:	ee26 6b03 	vmul.f64	d6, d6, d3
 800da38:	e7d6      	b.n	800d9e8 <_dtoa_r+0x540>
 800da3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da3e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800da42:	f8dd 8000 	ldr.w	r8, [sp]
 800da46:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800da4a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800da4e:	ee15 3a10 	vmov	r3, s10
 800da52:	3330      	adds	r3, #48	; 0x30
 800da54:	f808 3b01 	strb.w	r3, [r8], #1
 800da58:	9b00      	ldr	r3, [sp, #0]
 800da5a:	eba8 0303 	sub.w	r3, r8, r3
 800da5e:	4599      	cmp	r9, r3
 800da60:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800da64:	eea3 7b46 	vfms.f64	d7, d3, d6
 800da68:	d133      	bne.n	800dad2 <_dtoa_r+0x62a>
 800da6a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800da6e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800da72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da76:	dc1a      	bgt.n	800daae <_dtoa_r+0x606>
 800da78:	eeb4 7b46 	vcmp.f64	d7, d6
 800da7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da80:	d103      	bne.n	800da8a <_dtoa_r+0x5e2>
 800da82:	ee15 3a10 	vmov	r3, s10
 800da86:	07d9      	lsls	r1, r3, #31
 800da88:	d411      	bmi.n	800daae <_dtoa_r+0x606>
 800da8a:	4629      	mov	r1, r5
 800da8c:	4630      	mov	r0, r6
 800da8e:	f000 fae7 	bl	800e060 <_Bfree>
 800da92:	2300      	movs	r3, #0
 800da94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800da96:	f888 3000 	strb.w	r3, [r8]
 800da9a:	f10b 0301 	add.w	r3, fp, #1
 800da9e:	6013      	str	r3, [r2, #0]
 800daa0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f43f ad4d 	beq.w	800d542 <_dtoa_r+0x9a>
 800daa8:	f8c3 8000 	str.w	r8, [r3]
 800daac:	e549      	b.n	800d542 <_dtoa_r+0x9a>
 800daae:	465f      	mov	r7, fp
 800dab0:	4643      	mov	r3, r8
 800dab2:	4698      	mov	r8, r3
 800dab4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dab8:	2a39      	cmp	r2, #57	; 0x39
 800daba:	d106      	bne.n	800daca <_dtoa_r+0x622>
 800dabc:	9a00      	ldr	r2, [sp, #0]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d1f7      	bne.n	800dab2 <_dtoa_r+0x60a>
 800dac2:	9900      	ldr	r1, [sp, #0]
 800dac4:	2230      	movs	r2, #48	; 0x30
 800dac6:	3701      	adds	r7, #1
 800dac8:	700a      	strb	r2, [r1, #0]
 800daca:	781a      	ldrb	r2, [r3, #0]
 800dacc:	3201      	adds	r2, #1
 800dace:	701a      	strb	r2, [r3, #0]
 800dad0:	e7ae      	b.n	800da30 <_dtoa_r+0x588>
 800dad2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dad6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dade:	d1b2      	bne.n	800da46 <_dtoa_r+0x59e>
 800dae0:	e7d3      	b.n	800da8a <_dtoa_r+0x5e2>
 800dae2:	bf00      	nop
 800dae4:	0800f6b0 	.word	0x0800f6b0
 800dae8:	0800f688 	.word	0x0800f688
 800daec:	9908      	ldr	r1, [sp, #32]
 800daee:	2900      	cmp	r1, #0
 800daf0:	f000 80d1 	beq.w	800dc96 <_dtoa_r+0x7ee>
 800daf4:	9907      	ldr	r1, [sp, #28]
 800daf6:	2901      	cmp	r1, #1
 800daf8:	f300 80b4 	bgt.w	800dc64 <_dtoa_r+0x7bc>
 800dafc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dafe:	2900      	cmp	r1, #0
 800db00:	f000 80ac 	beq.w	800dc5c <_dtoa_r+0x7b4>
 800db04:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800db08:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800db0c:	461c      	mov	r4, r3
 800db0e:	930a      	str	r3, [sp, #40]	; 0x28
 800db10:	9b05      	ldr	r3, [sp, #20]
 800db12:	4413      	add	r3, r2
 800db14:	9305      	str	r3, [sp, #20]
 800db16:	9b06      	ldr	r3, [sp, #24]
 800db18:	2101      	movs	r1, #1
 800db1a:	4413      	add	r3, r2
 800db1c:	4630      	mov	r0, r6
 800db1e:	9306      	str	r3, [sp, #24]
 800db20:	f000 fb5a 	bl	800e1d8 <__i2b>
 800db24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db26:	4607      	mov	r7, r0
 800db28:	f1b8 0f00 	cmp.w	r8, #0
 800db2c:	dd0d      	ble.n	800db4a <_dtoa_r+0x6a2>
 800db2e:	9a06      	ldr	r2, [sp, #24]
 800db30:	2a00      	cmp	r2, #0
 800db32:	dd0a      	ble.n	800db4a <_dtoa_r+0x6a2>
 800db34:	4542      	cmp	r2, r8
 800db36:	9905      	ldr	r1, [sp, #20]
 800db38:	bfa8      	it	ge
 800db3a:	4642      	movge	r2, r8
 800db3c:	1a89      	subs	r1, r1, r2
 800db3e:	9105      	str	r1, [sp, #20]
 800db40:	9906      	ldr	r1, [sp, #24]
 800db42:	eba8 0802 	sub.w	r8, r8, r2
 800db46:	1a8a      	subs	r2, r1, r2
 800db48:	9206      	str	r2, [sp, #24]
 800db4a:	b303      	cbz	r3, 800db8e <_dtoa_r+0x6e6>
 800db4c:	9a08      	ldr	r2, [sp, #32]
 800db4e:	2a00      	cmp	r2, #0
 800db50:	f000 80a6 	beq.w	800dca0 <_dtoa_r+0x7f8>
 800db54:	2c00      	cmp	r4, #0
 800db56:	dd13      	ble.n	800db80 <_dtoa_r+0x6d8>
 800db58:	4639      	mov	r1, r7
 800db5a:	4622      	mov	r2, r4
 800db5c:	4630      	mov	r0, r6
 800db5e:	930c      	str	r3, [sp, #48]	; 0x30
 800db60:	f000 fbf6 	bl	800e350 <__pow5mult>
 800db64:	462a      	mov	r2, r5
 800db66:	4601      	mov	r1, r0
 800db68:	4607      	mov	r7, r0
 800db6a:	4630      	mov	r0, r6
 800db6c:	f000 fb4a 	bl	800e204 <__multiply>
 800db70:	4629      	mov	r1, r5
 800db72:	900a      	str	r0, [sp, #40]	; 0x28
 800db74:	4630      	mov	r0, r6
 800db76:	f000 fa73 	bl	800e060 <_Bfree>
 800db7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db7e:	4615      	mov	r5, r2
 800db80:	1b1a      	subs	r2, r3, r4
 800db82:	d004      	beq.n	800db8e <_dtoa_r+0x6e6>
 800db84:	4629      	mov	r1, r5
 800db86:	4630      	mov	r0, r6
 800db88:	f000 fbe2 	bl	800e350 <__pow5mult>
 800db8c:	4605      	mov	r5, r0
 800db8e:	2101      	movs	r1, #1
 800db90:	4630      	mov	r0, r6
 800db92:	f000 fb21 	bl	800e1d8 <__i2b>
 800db96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db98:	2b00      	cmp	r3, #0
 800db9a:	4604      	mov	r4, r0
 800db9c:	f340 8082 	ble.w	800dca4 <_dtoa_r+0x7fc>
 800dba0:	461a      	mov	r2, r3
 800dba2:	4601      	mov	r1, r0
 800dba4:	4630      	mov	r0, r6
 800dba6:	f000 fbd3 	bl	800e350 <__pow5mult>
 800dbaa:	9b07      	ldr	r3, [sp, #28]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	4604      	mov	r4, r0
 800dbb0:	dd7b      	ble.n	800dcaa <_dtoa_r+0x802>
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	930a      	str	r3, [sp, #40]	; 0x28
 800dbb6:	6922      	ldr	r2, [r4, #16]
 800dbb8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dbbc:	6910      	ldr	r0, [r2, #16]
 800dbbe:	f000 fabb 	bl	800e138 <__hi0bits>
 800dbc2:	f1c0 0020 	rsb	r0, r0, #32
 800dbc6:	9b06      	ldr	r3, [sp, #24]
 800dbc8:	4418      	add	r0, r3
 800dbca:	f010 001f 	ands.w	r0, r0, #31
 800dbce:	f000 808d 	beq.w	800dcec <_dtoa_r+0x844>
 800dbd2:	f1c0 0220 	rsb	r2, r0, #32
 800dbd6:	2a04      	cmp	r2, #4
 800dbd8:	f340 8086 	ble.w	800dce8 <_dtoa_r+0x840>
 800dbdc:	f1c0 001c 	rsb	r0, r0, #28
 800dbe0:	9b05      	ldr	r3, [sp, #20]
 800dbe2:	4403      	add	r3, r0
 800dbe4:	9305      	str	r3, [sp, #20]
 800dbe6:	9b06      	ldr	r3, [sp, #24]
 800dbe8:	4403      	add	r3, r0
 800dbea:	4480      	add	r8, r0
 800dbec:	9306      	str	r3, [sp, #24]
 800dbee:	9b05      	ldr	r3, [sp, #20]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	dd05      	ble.n	800dc00 <_dtoa_r+0x758>
 800dbf4:	4629      	mov	r1, r5
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	f000 fc03 	bl	800e404 <__lshift>
 800dbfe:	4605      	mov	r5, r0
 800dc00:	9b06      	ldr	r3, [sp, #24]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	dd05      	ble.n	800dc12 <_dtoa_r+0x76a>
 800dc06:	4621      	mov	r1, r4
 800dc08:	461a      	mov	r2, r3
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	f000 fbfa 	bl	800e404 <__lshift>
 800dc10:	4604      	mov	r4, r0
 800dc12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d06b      	beq.n	800dcf0 <_dtoa_r+0x848>
 800dc18:	4621      	mov	r1, r4
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	f000 fc5e 	bl	800e4dc <__mcmp>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	da65      	bge.n	800dcf0 <_dtoa_r+0x848>
 800dc24:	2300      	movs	r3, #0
 800dc26:	4629      	mov	r1, r5
 800dc28:	220a      	movs	r2, #10
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	f000 fa3a 	bl	800e0a4 <__multadd>
 800dc30:	9b08      	ldr	r3, [sp, #32]
 800dc32:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dc36:	4605      	mov	r5, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	f000 8192 	beq.w	800df62 <_dtoa_r+0xaba>
 800dc3e:	4639      	mov	r1, r7
 800dc40:	2300      	movs	r3, #0
 800dc42:	220a      	movs	r2, #10
 800dc44:	4630      	mov	r0, r6
 800dc46:	f000 fa2d 	bl	800e0a4 <__multadd>
 800dc4a:	f1ba 0f00 	cmp.w	sl, #0
 800dc4e:	4607      	mov	r7, r0
 800dc50:	f300 808e 	bgt.w	800dd70 <_dtoa_r+0x8c8>
 800dc54:	9b07      	ldr	r3, [sp, #28]
 800dc56:	2b02      	cmp	r3, #2
 800dc58:	dc51      	bgt.n	800dcfe <_dtoa_r+0x856>
 800dc5a:	e089      	b.n	800dd70 <_dtoa_r+0x8c8>
 800dc5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dc5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dc62:	e751      	b.n	800db08 <_dtoa_r+0x660>
 800dc64:	f109 34ff 	add.w	r4, r9, #4294967295
 800dc68:	42a3      	cmp	r3, r4
 800dc6a:	bfbf      	itttt	lt
 800dc6c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800dc6e:	1ae3      	sublt	r3, r4, r3
 800dc70:	18d2      	addlt	r2, r2, r3
 800dc72:	4613      	movlt	r3, r2
 800dc74:	bfb7      	itett	lt
 800dc76:	930e      	strlt	r3, [sp, #56]	; 0x38
 800dc78:	1b1c      	subge	r4, r3, r4
 800dc7a:	4623      	movlt	r3, r4
 800dc7c:	2400      	movlt	r4, #0
 800dc7e:	f1b9 0f00 	cmp.w	r9, #0
 800dc82:	bfb5      	itete	lt
 800dc84:	9a05      	ldrlt	r2, [sp, #20]
 800dc86:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800dc8a:	eba2 0809 	sublt.w	r8, r2, r9
 800dc8e:	464a      	movge	r2, r9
 800dc90:	bfb8      	it	lt
 800dc92:	2200      	movlt	r2, #0
 800dc94:	e73b      	b.n	800db0e <_dtoa_r+0x666>
 800dc96:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dc9a:	9f08      	ldr	r7, [sp, #32]
 800dc9c:	461c      	mov	r4, r3
 800dc9e:	e743      	b.n	800db28 <_dtoa_r+0x680>
 800dca0:	461a      	mov	r2, r3
 800dca2:	e76f      	b.n	800db84 <_dtoa_r+0x6dc>
 800dca4:	9b07      	ldr	r3, [sp, #28]
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	dc18      	bgt.n	800dcdc <_dtoa_r+0x834>
 800dcaa:	9b02      	ldr	r3, [sp, #8]
 800dcac:	b9b3      	cbnz	r3, 800dcdc <_dtoa_r+0x834>
 800dcae:	9b03      	ldr	r3, [sp, #12]
 800dcb0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dcb4:	b9a2      	cbnz	r2, 800dce0 <_dtoa_r+0x838>
 800dcb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dcba:	0d12      	lsrs	r2, r2, #20
 800dcbc:	0512      	lsls	r2, r2, #20
 800dcbe:	b18a      	cbz	r2, 800dce4 <_dtoa_r+0x83c>
 800dcc0:	9b05      	ldr	r3, [sp, #20]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	9305      	str	r3, [sp, #20]
 800dcc6:	9b06      	ldr	r3, [sp, #24]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	9306      	str	r3, [sp, #24]
 800dccc:	2301      	movs	r3, #1
 800dcce:	930a      	str	r3, [sp, #40]	; 0x28
 800dcd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f47f af6f 	bne.w	800dbb6 <_dtoa_r+0x70e>
 800dcd8:	2001      	movs	r0, #1
 800dcda:	e774      	b.n	800dbc6 <_dtoa_r+0x71e>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	e7f6      	b.n	800dcce <_dtoa_r+0x826>
 800dce0:	9b02      	ldr	r3, [sp, #8]
 800dce2:	e7f4      	b.n	800dcce <_dtoa_r+0x826>
 800dce4:	920a      	str	r2, [sp, #40]	; 0x28
 800dce6:	e7f3      	b.n	800dcd0 <_dtoa_r+0x828>
 800dce8:	d081      	beq.n	800dbee <_dtoa_r+0x746>
 800dcea:	4610      	mov	r0, r2
 800dcec:	301c      	adds	r0, #28
 800dcee:	e777      	b.n	800dbe0 <_dtoa_r+0x738>
 800dcf0:	f1b9 0f00 	cmp.w	r9, #0
 800dcf4:	dc37      	bgt.n	800dd66 <_dtoa_r+0x8be>
 800dcf6:	9b07      	ldr	r3, [sp, #28]
 800dcf8:	2b02      	cmp	r3, #2
 800dcfa:	dd34      	ble.n	800dd66 <_dtoa_r+0x8be>
 800dcfc:	46ca      	mov	sl, r9
 800dcfe:	f1ba 0f00 	cmp.w	sl, #0
 800dd02:	d10d      	bne.n	800dd20 <_dtoa_r+0x878>
 800dd04:	4621      	mov	r1, r4
 800dd06:	4653      	mov	r3, sl
 800dd08:	2205      	movs	r2, #5
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	f000 f9ca 	bl	800e0a4 <__multadd>
 800dd10:	4601      	mov	r1, r0
 800dd12:	4604      	mov	r4, r0
 800dd14:	4628      	mov	r0, r5
 800dd16:	f000 fbe1 	bl	800e4dc <__mcmp>
 800dd1a:	2800      	cmp	r0, #0
 800dd1c:	f73f adde 	bgt.w	800d8dc <_dtoa_r+0x434>
 800dd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd22:	f8dd 8000 	ldr.w	r8, [sp]
 800dd26:	ea6f 0b03 	mvn.w	fp, r3
 800dd2a:	f04f 0900 	mov.w	r9, #0
 800dd2e:	4621      	mov	r1, r4
 800dd30:	4630      	mov	r0, r6
 800dd32:	f000 f995 	bl	800e060 <_Bfree>
 800dd36:	2f00      	cmp	r7, #0
 800dd38:	f43f aea7 	beq.w	800da8a <_dtoa_r+0x5e2>
 800dd3c:	f1b9 0f00 	cmp.w	r9, #0
 800dd40:	d005      	beq.n	800dd4e <_dtoa_r+0x8a6>
 800dd42:	45b9      	cmp	r9, r7
 800dd44:	d003      	beq.n	800dd4e <_dtoa_r+0x8a6>
 800dd46:	4649      	mov	r1, r9
 800dd48:	4630      	mov	r0, r6
 800dd4a:	f000 f989 	bl	800e060 <_Bfree>
 800dd4e:	4639      	mov	r1, r7
 800dd50:	4630      	mov	r0, r6
 800dd52:	f000 f985 	bl	800e060 <_Bfree>
 800dd56:	e698      	b.n	800da8a <_dtoa_r+0x5e2>
 800dd58:	2400      	movs	r4, #0
 800dd5a:	4627      	mov	r7, r4
 800dd5c:	e7e0      	b.n	800dd20 <_dtoa_r+0x878>
 800dd5e:	46bb      	mov	fp, r7
 800dd60:	4604      	mov	r4, r0
 800dd62:	4607      	mov	r7, r0
 800dd64:	e5ba      	b.n	800d8dc <_dtoa_r+0x434>
 800dd66:	9b08      	ldr	r3, [sp, #32]
 800dd68:	46ca      	mov	sl, r9
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f000 8100 	beq.w	800df70 <_dtoa_r+0xac8>
 800dd70:	f1b8 0f00 	cmp.w	r8, #0
 800dd74:	dd05      	ble.n	800dd82 <_dtoa_r+0x8da>
 800dd76:	4639      	mov	r1, r7
 800dd78:	4642      	mov	r2, r8
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	f000 fb42 	bl	800e404 <__lshift>
 800dd80:	4607      	mov	r7, r0
 800dd82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d05d      	beq.n	800de44 <_dtoa_r+0x99c>
 800dd88:	6879      	ldr	r1, [r7, #4]
 800dd8a:	4630      	mov	r0, r6
 800dd8c:	f000 f928 	bl	800dfe0 <_Balloc>
 800dd90:	4680      	mov	r8, r0
 800dd92:	b928      	cbnz	r0, 800dda0 <_dtoa_r+0x8f8>
 800dd94:	4b82      	ldr	r3, [pc, #520]	; (800dfa0 <_dtoa_r+0xaf8>)
 800dd96:	4602      	mov	r2, r0
 800dd98:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dd9c:	f7ff bb9a 	b.w	800d4d4 <_dtoa_r+0x2c>
 800dda0:	693a      	ldr	r2, [r7, #16]
 800dda2:	3202      	adds	r2, #2
 800dda4:	0092      	lsls	r2, r2, #2
 800dda6:	f107 010c 	add.w	r1, r7, #12
 800ddaa:	300c      	adds	r0, #12
 800ddac:	f000 f90a 	bl	800dfc4 <memcpy>
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	4641      	mov	r1, r8
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	f000 fb25 	bl	800e404 <__lshift>
 800ddba:	9b00      	ldr	r3, [sp, #0]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	9305      	str	r3, [sp, #20]
 800ddc0:	9b00      	ldr	r3, [sp, #0]
 800ddc2:	4453      	add	r3, sl
 800ddc4:	9309      	str	r3, [sp, #36]	; 0x24
 800ddc6:	9b02      	ldr	r3, [sp, #8]
 800ddc8:	f003 0301 	and.w	r3, r3, #1
 800ddcc:	46b9      	mov	r9, r7
 800ddce:	9308      	str	r3, [sp, #32]
 800ddd0:	4607      	mov	r7, r0
 800ddd2:	9b05      	ldr	r3, [sp, #20]
 800ddd4:	4621      	mov	r1, r4
 800ddd6:	3b01      	subs	r3, #1
 800ddd8:	4628      	mov	r0, r5
 800ddda:	9302      	str	r3, [sp, #8]
 800dddc:	f7ff fad6 	bl	800d38c <quorem>
 800dde0:	4603      	mov	r3, r0
 800dde2:	3330      	adds	r3, #48	; 0x30
 800dde4:	9006      	str	r0, [sp, #24]
 800dde6:	4649      	mov	r1, r9
 800dde8:	4628      	mov	r0, r5
 800ddea:	930a      	str	r3, [sp, #40]	; 0x28
 800ddec:	f000 fb76 	bl	800e4dc <__mcmp>
 800ddf0:	463a      	mov	r2, r7
 800ddf2:	4682      	mov	sl, r0
 800ddf4:	4621      	mov	r1, r4
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	f000 fb8c 	bl	800e514 <__mdiff>
 800ddfc:	68c2      	ldr	r2, [r0, #12]
 800ddfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de00:	4680      	mov	r8, r0
 800de02:	bb0a      	cbnz	r2, 800de48 <_dtoa_r+0x9a0>
 800de04:	4601      	mov	r1, r0
 800de06:	4628      	mov	r0, r5
 800de08:	f000 fb68 	bl	800e4dc <__mcmp>
 800de0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de0e:	4602      	mov	r2, r0
 800de10:	4641      	mov	r1, r8
 800de12:	4630      	mov	r0, r6
 800de14:	920e      	str	r2, [sp, #56]	; 0x38
 800de16:	930a      	str	r3, [sp, #40]	; 0x28
 800de18:	f000 f922 	bl	800e060 <_Bfree>
 800de1c:	9b07      	ldr	r3, [sp, #28]
 800de1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de20:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800de24:	ea43 0102 	orr.w	r1, r3, r2
 800de28:	9b08      	ldr	r3, [sp, #32]
 800de2a:	430b      	orrs	r3, r1
 800de2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de2e:	d10d      	bne.n	800de4c <_dtoa_r+0x9a4>
 800de30:	2b39      	cmp	r3, #57	; 0x39
 800de32:	d029      	beq.n	800de88 <_dtoa_r+0x9e0>
 800de34:	f1ba 0f00 	cmp.w	sl, #0
 800de38:	dd01      	ble.n	800de3e <_dtoa_r+0x996>
 800de3a:	9b06      	ldr	r3, [sp, #24]
 800de3c:	3331      	adds	r3, #49	; 0x31
 800de3e:	9a02      	ldr	r2, [sp, #8]
 800de40:	7013      	strb	r3, [r2, #0]
 800de42:	e774      	b.n	800dd2e <_dtoa_r+0x886>
 800de44:	4638      	mov	r0, r7
 800de46:	e7b8      	b.n	800ddba <_dtoa_r+0x912>
 800de48:	2201      	movs	r2, #1
 800de4a:	e7e1      	b.n	800de10 <_dtoa_r+0x968>
 800de4c:	f1ba 0f00 	cmp.w	sl, #0
 800de50:	db06      	blt.n	800de60 <_dtoa_r+0x9b8>
 800de52:	9907      	ldr	r1, [sp, #28]
 800de54:	ea41 0a0a 	orr.w	sl, r1, sl
 800de58:	9908      	ldr	r1, [sp, #32]
 800de5a:	ea5a 0101 	orrs.w	r1, sl, r1
 800de5e:	d120      	bne.n	800dea2 <_dtoa_r+0x9fa>
 800de60:	2a00      	cmp	r2, #0
 800de62:	ddec      	ble.n	800de3e <_dtoa_r+0x996>
 800de64:	4629      	mov	r1, r5
 800de66:	2201      	movs	r2, #1
 800de68:	4630      	mov	r0, r6
 800de6a:	9305      	str	r3, [sp, #20]
 800de6c:	f000 faca 	bl	800e404 <__lshift>
 800de70:	4621      	mov	r1, r4
 800de72:	4605      	mov	r5, r0
 800de74:	f000 fb32 	bl	800e4dc <__mcmp>
 800de78:	2800      	cmp	r0, #0
 800de7a:	9b05      	ldr	r3, [sp, #20]
 800de7c:	dc02      	bgt.n	800de84 <_dtoa_r+0x9dc>
 800de7e:	d1de      	bne.n	800de3e <_dtoa_r+0x996>
 800de80:	07da      	lsls	r2, r3, #31
 800de82:	d5dc      	bpl.n	800de3e <_dtoa_r+0x996>
 800de84:	2b39      	cmp	r3, #57	; 0x39
 800de86:	d1d8      	bne.n	800de3a <_dtoa_r+0x992>
 800de88:	9a02      	ldr	r2, [sp, #8]
 800de8a:	2339      	movs	r3, #57	; 0x39
 800de8c:	7013      	strb	r3, [r2, #0]
 800de8e:	4643      	mov	r3, r8
 800de90:	4698      	mov	r8, r3
 800de92:	3b01      	subs	r3, #1
 800de94:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800de98:	2a39      	cmp	r2, #57	; 0x39
 800de9a:	d051      	beq.n	800df40 <_dtoa_r+0xa98>
 800de9c:	3201      	adds	r2, #1
 800de9e:	701a      	strb	r2, [r3, #0]
 800dea0:	e745      	b.n	800dd2e <_dtoa_r+0x886>
 800dea2:	2a00      	cmp	r2, #0
 800dea4:	dd03      	ble.n	800deae <_dtoa_r+0xa06>
 800dea6:	2b39      	cmp	r3, #57	; 0x39
 800dea8:	d0ee      	beq.n	800de88 <_dtoa_r+0x9e0>
 800deaa:	3301      	adds	r3, #1
 800deac:	e7c7      	b.n	800de3e <_dtoa_r+0x996>
 800deae:	9a05      	ldr	r2, [sp, #20]
 800deb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800deb2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800deb6:	428a      	cmp	r2, r1
 800deb8:	d02b      	beq.n	800df12 <_dtoa_r+0xa6a>
 800deba:	4629      	mov	r1, r5
 800debc:	2300      	movs	r3, #0
 800debe:	220a      	movs	r2, #10
 800dec0:	4630      	mov	r0, r6
 800dec2:	f000 f8ef 	bl	800e0a4 <__multadd>
 800dec6:	45b9      	cmp	r9, r7
 800dec8:	4605      	mov	r5, r0
 800deca:	f04f 0300 	mov.w	r3, #0
 800dece:	f04f 020a 	mov.w	r2, #10
 800ded2:	4649      	mov	r1, r9
 800ded4:	4630      	mov	r0, r6
 800ded6:	d107      	bne.n	800dee8 <_dtoa_r+0xa40>
 800ded8:	f000 f8e4 	bl	800e0a4 <__multadd>
 800dedc:	4681      	mov	r9, r0
 800dede:	4607      	mov	r7, r0
 800dee0:	9b05      	ldr	r3, [sp, #20]
 800dee2:	3301      	adds	r3, #1
 800dee4:	9305      	str	r3, [sp, #20]
 800dee6:	e774      	b.n	800ddd2 <_dtoa_r+0x92a>
 800dee8:	f000 f8dc 	bl	800e0a4 <__multadd>
 800deec:	4639      	mov	r1, r7
 800deee:	4681      	mov	r9, r0
 800def0:	2300      	movs	r3, #0
 800def2:	220a      	movs	r2, #10
 800def4:	4630      	mov	r0, r6
 800def6:	f000 f8d5 	bl	800e0a4 <__multadd>
 800defa:	4607      	mov	r7, r0
 800defc:	e7f0      	b.n	800dee0 <_dtoa_r+0xa38>
 800defe:	f1ba 0f00 	cmp.w	sl, #0
 800df02:	9a00      	ldr	r2, [sp, #0]
 800df04:	bfcc      	ite	gt
 800df06:	46d0      	movgt	r8, sl
 800df08:	f04f 0801 	movle.w	r8, #1
 800df0c:	4490      	add	r8, r2
 800df0e:	f04f 0900 	mov.w	r9, #0
 800df12:	4629      	mov	r1, r5
 800df14:	2201      	movs	r2, #1
 800df16:	4630      	mov	r0, r6
 800df18:	9302      	str	r3, [sp, #8]
 800df1a:	f000 fa73 	bl	800e404 <__lshift>
 800df1e:	4621      	mov	r1, r4
 800df20:	4605      	mov	r5, r0
 800df22:	f000 fadb 	bl	800e4dc <__mcmp>
 800df26:	2800      	cmp	r0, #0
 800df28:	dcb1      	bgt.n	800de8e <_dtoa_r+0x9e6>
 800df2a:	d102      	bne.n	800df32 <_dtoa_r+0xa8a>
 800df2c:	9b02      	ldr	r3, [sp, #8]
 800df2e:	07db      	lsls	r3, r3, #31
 800df30:	d4ad      	bmi.n	800de8e <_dtoa_r+0x9e6>
 800df32:	4643      	mov	r3, r8
 800df34:	4698      	mov	r8, r3
 800df36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df3a:	2a30      	cmp	r2, #48	; 0x30
 800df3c:	d0fa      	beq.n	800df34 <_dtoa_r+0xa8c>
 800df3e:	e6f6      	b.n	800dd2e <_dtoa_r+0x886>
 800df40:	9a00      	ldr	r2, [sp, #0]
 800df42:	429a      	cmp	r2, r3
 800df44:	d1a4      	bne.n	800de90 <_dtoa_r+0x9e8>
 800df46:	f10b 0b01 	add.w	fp, fp, #1
 800df4a:	2331      	movs	r3, #49	; 0x31
 800df4c:	e778      	b.n	800de40 <_dtoa_r+0x998>
 800df4e:	4b15      	ldr	r3, [pc, #84]	; (800dfa4 <_dtoa_r+0xafc>)
 800df50:	f7ff bb12 	b.w	800d578 <_dtoa_r+0xd0>
 800df54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800df56:	2b00      	cmp	r3, #0
 800df58:	f47f aaee 	bne.w	800d538 <_dtoa_r+0x90>
 800df5c:	4b12      	ldr	r3, [pc, #72]	; (800dfa8 <_dtoa_r+0xb00>)
 800df5e:	f7ff bb0b 	b.w	800d578 <_dtoa_r+0xd0>
 800df62:	f1ba 0f00 	cmp.w	sl, #0
 800df66:	dc03      	bgt.n	800df70 <_dtoa_r+0xac8>
 800df68:	9b07      	ldr	r3, [sp, #28]
 800df6a:	2b02      	cmp	r3, #2
 800df6c:	f73f aec7 	bgt.w	800dcfe <_dtoa_r+0x856>
 800df70:	f8dd 8000 	ldr.w	r8, [sp]
 800df74:	4621      	mov	r1, r4
 800df76:	4628      	mov	r0, r5
 800df78:	f7ff fa08 	bl	800d38c <quorem>
 800df7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800df80:	f808 3b01 	strb.w	r3, [r8], #1
 800df84:	9a00      	ldr	r2, [sp, #0]
 800df86:	eba8 0202 	sub.w	r2, r8, r2
 800df8a:	4592      	cmp	sl, r2
 800df8c:	ddb7      	ble.n	800defe <_dtoa_r+0xa56>
 800df8e:	4629      	mov	r1, r5
 800df90:	2300      	movs	r3, #0
 800df92:	220a      	movs	r2, #10
 800df94:	4630      	mov	r0, r6
 800df96:	f000 f885 	bl	800e0a4 <__multadd>
 800df9a:	4605      	mov	r5, r0
 800df9c:	e7ea      	b.n	800df74 <_dtoa_r+0xacc>
 800df9e:	bf00      	nop
 800dfa0:	0800f613 	.word	0x0800f613
 800dfa4:	0800f56c 	.word	0x0800f56c
 800dfa8:	0800f590 	.word	0x0800f590

0800dfac <_localeconv_r>:
 800dfac:	4800      	ldr	r0, [pc, #0]	; (800dfb0 <_localeconv_r+0x4>)
 800dfae:	4770      	bx	lr
 800dfb0:	2400018c 	.word	0x2400018c

0800dfb4 <malloc>:
 800dfb4:	4b02      	ldr	r3, [pc, #8]	; (800dfc0 <malloc+0xc>)
 800dfb6:	4601      	mov	r1, r0
 800dfb8:	6818      	ldr	r0, [r3, #0]
 800dfba:	f000 bbef 	b.w	800e79c <_malloc_r>
 800dfbe:	bf00      	nop
 800dfc0:	24000038 	.word	0x24000038

0800dfc4 <memcpy>:
 800dfc4:	440a      	add	r2, r1
 800dfc6:	4291      	cmp	r1, r2
 800dfc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfcc:	d100      	bne.n	800dfd0 <memcpy+0xc>
 800dfce:	4770      	bx	lr
 800dfd0:	b510      	push	{r4, lr}
 800dfd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfda:	4291      	cmp	r1, r2
 800dfdc:	d1f9      	bne.n	800dfd2 <memcpy+0xe>
 800dfde:	bd10      	pop	{r4, pc}

0800dfe0 <_Balloc>:
 800dfe0:	b570      	push	{r4, r5, r6, lr}
 800dfe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dfe4:	4604      	mov	r4, r0
 800dfe6:	460d      	mov	r5, r1
 800dfe8:	b976      	cbnz	r6, 800e008 <_Balloc+0x28>
 800dfea:	2010      	movs	r0, #16
 800dfec:	f7ff ffe2 	bl	800dfb4 <malloc>
 800dff0:	4602      	mov	r2, r0
 800dff2:	6260      	str	r0, [r4, #36]	; 0x24
 800dff4:	b920      	cbnz	r0, 800e000 <_Balloc+0x20>
 800dff6:	4b18      	ldr	r3, [pc, #96]	; (800e058 <_Balloc+0x78>)
 800dff8:	4818      	ldr	r0, [pc, #96]	; (800e05c <_Balloc+0x7c>)
 800dffa:	2166      	movs	r1, #102	; 0x66
 800dffc:	f000 fc38 	bl	800e870 <__assert_func>
 800e000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e004:	6006      	str	r6, [r0, #0]
 800e006:	60c6      	str	r6, [r0, #12]
 800e008:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e00a:	68f3      	ldr	r3, [r6, #12]
 800e00c:	b183      	cbz	r3, 800e030 <_Balloc+0x50>
 800e00e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e010:	68db      	ldr	r3, [r3, #12]
 800e012:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e016:	b9b8      	cbnz	r0, 800e048 <_Balloc+0x68>
 800e018:	2101      	movs	r1, #1
 800e01a:	fa01 f605 	lsl.w	r6, r1, r5
 800e01e:	1d72      	adds	r2, r6, #5
 800e020:	0092      	lsls	r2, r2, #2
 800e022:	4620      	mov	r0, r4
 800e024:	f000 fb5a 	bl	800e6dc <_calloc_r>
 800e028:	b160      	cbz	r0, 800e044 <_Balloc+0x64>
 800e02a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e02e:	e00e      	b.n	800e04e <_Balloc+0x6e>
 800e030:	2221      	movs	r2, #33	; 0x21
 800e032:	2104      	movs	r1, #4
 800e034:	4620      	mov	r0, r4
 800e036:	f000 fb51 	bl	800e6dc <_calloc_r>
 800e03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e03c:	60f0      	str	r0, [r6, #12]
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d1e4      	bne.n	800e00e <_Balloc+0x2e>
 800e044:	2000      	movs	r0, #0
 800e046:	bd70      	pop	{r4, r5, r6, pc}
 800e048:	6802      	ldr	r2, [r0, #0]
 800e04a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e04e:	2300      	movs	r3, #0
 800e050:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e054:	e7f7      	b.n	800e046 <_Balloc+0x66>
 800e056:	bf00      	nop
 800e058:	0800f59d 	.word	0x0800f59d
 800e05c:	0800f624 	.word	0x0800f624

0800e060 <_Bfree>:
 800e060:	b570      	push	{r4, r5, r6, lr}
 800e062:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e064:	4605      	mov	r5, r0
 800e066:	460c      	mov	r4, r1
 800e068:	b976      	cbnz	r6, 800e088 <_Bfree+0x28>
 800e06a:	2010      	movs	r0, #16
 800e06c:	f7ff ffa2 	bl	800dfb4 <malloc>
 800e070:	4602      	mov	r2, r0
 800e072:	6268      	str	r0, [r5, #36]	; 0x24
 800e074:	b920      	cbnz	r0, 800e080 <_Bfree+0x20>
 800e076:	4b09      	ldr	r3, [pc, #36]	; (800e09c <_Bfree+0x3c>)
 800e078:	4809      	ldr	r0, [pc, #36]	; (800e0a0 <_Bfree+0x40>)
 800e07a:	218a      	movs	r1, #138	; 0x8a
 800e07c:	f000 fbf8 	bl	800e870 <__assert_func>
 800e080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e084:	6006      	str	r6, [r0, #0]
 800e086:	60c6      	str	r6, [r0, #12]
 800e088:	b13c      	cbz	r4, 800e09a <_Bfree+0x3a>
 800e08a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e08c:	6862      	ldr	r2, [r4, #4]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e094:	6021      	str	r1, [r4, #0]
 800e096:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e09a:	bd70      	pop	{r4, r5, r6, pc}
 800e09c:	0800f59d 	.word	0x0800f59d
 800e0a0:	0800f624 	.word	0x0800f624

0800e0a4 <__multadd>:
 800e0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a8:	690e      	ldr	r6, [r1, #16]
 800e0aa:	4607      	mov	r7, r0
 800e0ac:	4698      	mov	r8, r3
 800e0ae:	460c      	mov	r4, r1
 800e0b0:	f101 0014 	add.w	r0, r1, #20
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	6805      	ldr	r5, [r0, #0]
 800e0b8:	b2a9      	uxth	r1, r5
 800e0ba:	fb02 8101 	mla	r1, r2, r1, r8
 800e0be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e0c2:	0c2d      	lsrs	r5, r5, #16
 800e0c4:	fb02 c505 	mla	r5, r2, r5, ip
 800e0c8:	b289      	uxth	r1, r1
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e0d0:	429e      	cmp	r6, r3
 800e0d2:	f840 1b04 	str.w	r1, [r0], #4
 800e0d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e0da:	dcec      	bgt.n	800e0b6 <__multadd+0x12>
 800e0dc:	f1b8 0f00 	cmp.w	r8, #0
 800e0e0:	d022      	beq.n	800e128 <__multadd+0x84>
 800e0e2:	68a3      	ldr	r3, [r4, #8]
 800e0e4:	42b3      	cmp	r3, r6
 800e0e6:	dc19      	bgt.n	800e11c <__multadd+0x78>
 800e0e8:	6861      	ldr	r1, [r4, #4]
 800e0ea:	4638      	mov	r0, r7
 800e0ec:	3101      	adds	r1, #1
 800e0ee:	f7ff ff77 	bl	800dfe0 <_Balloc>
 800e0f2:	4605      	mov	r5, r0
 800e0f4:	b928      	cbnz	r0, 800e102 <__multadd+0x5e>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	4b0d      	ldr	r3, [pc, #52]	; (800e130 <__multadd+0x8c>)
 800e0fa:	480e      	ldr	r0, [pc, #56]	; (800e134 <__multadd+0x90>)
 800e0fc:	21b5      	movs	r1, #181	; 0xb5
 800e0fe:	f000 fbb7 	bl	800e870 <__assert_func>
 800e102:	6922      	ldr	r2, [r4, #16]
 800e104:	3202      	adds	r2, #2
 800e106:	f104 010c 	add.w	r1, r4, #12
 800e10a:	0092      	lsls	r2, r2, #2
 800e10c:	300c      	adds	r0, #12
 800e10e:	f7ff ff59 	bl	800dfc4 <memcpy>
 800e112:	4621      	mov	r1, r4
 800e114:	4638      	mov	r0, r7
 800e116:	f7ff ffa3 	bl	800e060 <_Bfree>
 800e11a:	462c      	mov	r4, r5
 800e11c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e120:	3601      	adds	r6, #1
 800e122:	f8c3 8014 	str.w	r8, [r3, #20]
 800e126:	6126      	str	r6, [r4, #16]
 800e128:	4620      	mov	r0, r4
 800e12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e12e:	bf00      	nop
 800e130:	0800f613 	.word	0x0800f613
 800e134:	0800f624 	.word	0x0800f624

0800e138 <__hi0bits>:
 800e138:	0c03      	lsrs	r3, r0, #16
 800e13a:	041b      	lsls	r3, r3, #16
 800e13c:	b9d3      	cbnz	r3, 800e174 <__hi0bits+0x3c>
 800e13e:	0400      	lsls	r0, r0, #16
 800e140:	2310      	movs	r3, #16
 800e142:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e146:	bf04      	itt	eq
 800e148:	0200      	lsleq	r0, r0, #8
 800e14a:	3308      	addeq	r3, #8
 800e14c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e150:	bf04      	itt	eq
 800e152:	0100      	lsleq	r0, r0, #4
 800e154:	3304      	addeq	r3, #4
 800e156:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e15a:	bf04      	itt	eq
 800e15c:	0080      	lsleq	r0, r0, #2
 800e15e:	3302      	addeq	r3, #2
 800e160:	2800      	cmp	r0, #0
 800e162:	db05      	blt.n	800e170 <__hi0bits+0x38>
 800e164:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e168:	f103 0301 	add.w	r3, r3, #1
 800e16c:	bf08      	it	eq
 800e16e:	2320      	moveq	r3, #32
 800e170:	4618      	mov	r0, r3
 800e172:	4770      	bx	lr
 800e174:	2300      	movs	r3, #0
 800e176:	e7e4      	b.n	800e142 <__hi0bits+0xa>

0800e178 <__lo0bits>:
 800e178:	6803      	ldr	r3, [r0, #0]
 800e17a:	f013 0207 	ands.w	r2, r3, #7
 800e17e:	4601      	mov	r1, r0
 800e180:	d00b      	beq.n	800e19a <__lo0bits+0x22>
 800e182:	07da      	lsls	r2, r3, #31
 800e184:	d424      	bmi.n	800e1d0 <__lo0bits+0x58>
 800e186:	0798      	lsls	r0, r3, #30
 800e188:	bf49      	itett	mi
 800e18a:	085b      	lsrmi	r3, r3, #1
 800e18c:	089b      	lsrpl	r3, r3, #2
 800e18e:	2001      	movmi	r0, #1
 800e190:	600b      	strmi	r3, [r1, #0]
 800e192:	bf5c      	itt	pl
 800e194:	600b      	strpl	r3, [r1, #0]
 800e196:	2002      	movpl	r0, #2
 800e198:	4770      	bx	lr
 800e19a:	b298      	uxth	r0, r3
 800e19c:	b9b0      	cbnz	r0, 800e1cc <__lo0bits+0x54>
 800e19e:	0c1b      	lsrs	r3, r3, #16
 800e1a0:	2010      	movs	r0, #16
 800e1a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e1a6:	bf04      	itt	eq
 800e1a8:	0a1b      	lsreq	r3, r3, #8
 800e1aa:	3008      	addeq	r0, #8
 800e1ac:	071a      	lsls	r2, r3, #28
 800e1ae:	bf04      	itt	eq
 800e1b0:	091b      	lsreq	r3, r3, #4
 800e1b2:	3004      	addeq	r0, #4
 800e1b4:	079a      	lsls	r2, r3, #30
 800e1b6:	bf04      	itt	eq
 800e1b8:	089b      	lsreq	r3, r3, #2
 800e1ba:	3002      	addeq	r0, #2
 800e1bc:	07da      	lsls	r2, r3, #31
 800e1be:	d403      	bmi.n	800e1c8 <__lo0bits+0x50>
 800e1c0:	085b      	lsrs	r3, r3, #1
 800e1c2:	f100 0001 	add.w	r0, r0, #1
 800e1c6:	d005      	beq.n	800e1d4 <__lo0bits+0x5c>
 800e1c8:	600b      	str	r3, [r1, #0]
 800e1ca:	4770      	bx	lr
 800e1cc:	4610      	mov	r0, r2
 800e1ce:	e7e8      	b.n	800e1a2 <__lo0bits+0x2a>
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	4770      	bx	lr
 800e1d4:	2020      	movs	r0, #32
 800e1d6:	4770      	bx	lr

0800e1d8 <__i2b>:
 800e1d8:	b510      	push	{r4, lr}
 800e1da:	460c      	mov	r4, r1
 800e1dc:	2101      	movs	r1, #1
 800e1de:	f7ff feff 	bl	800dfe0 <_Balloc>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	b928      	cbnz	r0, 800e1f2 <__i2b+0x1a>
 800e1e6:	4b05      	ldr	r3, [pc, #20]	; (800e1fc <__i2b+0x24>)
 800e1e8:	4805      	ldr	r0, [pc, #20]	; (800e200 <__i2b+0x28>)
 800e1ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e1ee:	f000 fb3f 	bl	800e870 <__assert_func>
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	6144      	str	r4, [r0, #20]
 800e1f6:	6103      	str	r3, [r0, #16]
 800e1f8:	bd10      	pop	{r4, pc}
 800e1fa:	bf00      	nop
 800e1fc:	0800f613 	.word	0x0800f613
 800e200:	0800f624 	.word	0x0800f624

0800e204 <__multiply>:
 800e204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e208:	4614      	mov	r4, r2
 800e20a:	690a      	ldr	r2, [r1, #16]
 800e20c:	6923      	ldr	r3, [r4, #16]
 800e20e:	429a      	cmp	r2, r3
 800e210:	bfb8      	it	lt
 800e212:	460b      	movlt	r3, r1
 800e214:	460d      	mov	r5, r1
 800e216:	bfbc      	itt	lt
 800e218:	4625      	movlt	r5, r4
 800e21a:	461c      	movlt	r4, r3
 800e21c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e220:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e224:	68ab      	ldr	r3, [r5, #8]
 800e226:	6869      	ldr	r1, [r5, #4]
 800e228:	eb0a 0709 	add.w	r7, sl, r9
 800e22c:	42bb      	cmp	r3, r7
 800e22e:	b085      	sub	sp, #20
 800e230:	bfb8      	it	lt
 800e232:	3101      	addlt	r1, #1
 800e234:	f7ff fed4 	bl	800dfe0 <_Balloc>
 800e238:	b930      	cbnz	r0, 800e248 <__multiply+0x44>
 800e23a:	4602      	mov	r2, r0
 800e23c:	4b42      	ldr	r3, [pc, #264]	; (800e348 <__multiply+0x144>)
 800e23e:	4843      	ldr	r0, [pc, #268]	; (800e34c <__multiply+0x148>)
 800e240:	f240 115d 	movw	r1, #349	; 0x15d
 800e244:	f000 fb14 	bl	800e870 <__assert_func>
 800e248:	f100 0614 	add.w	r6, r0, #20
 800e24c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e250:	4633      	mov	r3, r6
 800e252:	2200      	movs	r2, #0
 800e254:	4543      	cmp	r3, r8
 800e256:	d31e      	bcc.n	800e296 <__multiply+0x92>
 800e258:	f105 0c14 	add.w	ip, r5, #20
 800e25c:	f104 0314 	add.w	r3, r4, #20
 800e260:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e264:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e268:	9202      	str	r2, [sp, #8]
 800e26a:	ebac 0205 	sub.w	r2, ip, r5
 800e26e:	3a15      	subs	r2, #21
 800e270:	f022 0203 	bic.w	r2, r2, #3
 800e274:	3204      	adds	r2, #4
 800e276:	f105 0115 	add.w	r1, r5, #21
 800e27a:	458c      	cmp	ip, r1
 800e27c:	bf38      	it	cc
 800e27e:	2204      	movcc	r2, #4
 800e280:	9201      	str	r2, [sp, #4]
 800e282:	9a02      	ldr	r2, [sp, #8]
 800e284:	9303      	str	r3, [sp, #12]
 800e286:	429a      	cmp	r2, r3
 800e288:	d808      	bhi.n	800e29c <__multiply+0x98>
 800e28a:	2f00      	cmp	r7, #0
 800e28c:	dc55      	bgt.n	800e33a <__multiply+0x136>
 800e28e:	6107      	str	r7, [r0, #16]
 800e290:	b005      	add	sp, #20
 800e292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e296:	f843 2b04 	str.w	r2, [r3], #4
 800e29a:	e7db      	b.n	800e254 <__multiply+0x50>
 800e29c:	f8b3 a000 	ldrh.w	sl, [r3]
 800e2a0:	f1ba 0f00 	cmp.w	sl, #0
 800e2a4:	d020      	beq.n	800e2e8 <__multiply+0xe4>
 800e2a6:	f105 0e14 	add.w	lr, r5, #20
 800e2aa:	46b1      	mov	r9, r6
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e2b2:	f8d9 b000 	ldr.w	fp, [r9]
 800e2b6:	b2a1      	uxth	r1, r4
 800e2b8:	fa1f fb8b 	uxth.w	fp, fp
 800e2bc:	fb0a b101 	mla	r1, sl, r1, fp
 800e2c0:	4411      	add	r1, r2
 800e2c2:	f8d9 2000 	ldr.w	r2, [r9]
 800e2c6:	0c24      	lsrs	r4, r4, #16
 800e2c8:	0c12      	lsrs	r2, r2, #16
 800e2ca:	fb0a 2404 	mla	r4, sl, r4, r2
 800e2ce:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e2d2:	b289      	uxth	r1, r1
 800e2d4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e2d8:	45f4      	cmp	ip, lr
 800e2da:	f849 1b04 	str.w	r1, [r9], #4
 800e2de:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e2e2:	d8e4      	bhi.n	800e2ae <__multiply+0xaa>
 800e2e4:	9901      	ldr	r1, [sp, #4]
 800e2e6:	5072      	str	r2, [r6, r1]
 800e2e8:	9a03      	ldr	r2, [sp, #12]
 800e2ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e2ee:	3304      	adds	r3, #4
 800e2f0:	f1b9 0f00 	cmp.w	r9, #0
 800e2f4:	d01f      	beq.n	800e336 <__multiply+0x132>
 800e2f6:	6834      	ldr	r4, [r6, #0]
 800e2f8:	f105 0114 	add.w	r1, r5, #20
 800e2fc:	46b6      	mov	lr, r6
 800e2fe:	f04f 0a00 	mov.w	sl, #0
 800e302:	880a      	ldrh	r2, [r1, #0]
 800e304:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e308:	fb09 b202 	mla	r2, r9, r2, fp
 800e30c:	4492      	add	sl, r2
 800e30e:	b2a4      	uxth	r4, r4
 800e310:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e314:	f84e 4b04 	str.w	r4, [lr], #4
 800e318:	f851 4b04 	ldr.w	r4, [r1], #4
 800e31c:	f8be 2000 	ldrh.w	r2, [lr]
 800e320:	0c24      	lsrs	r4, r4, #16
 800e322:	fb09 2404 	mla	r4, r9, r4, r2
 800e326:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e32a:	458c      	cmp	ip, r1
 800e32c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e330:	d8e7      	bhi.n	800e302 <__multiply+0xfe>
 800e332:	9a01      	ldr	r2, [sp, #4]
 800e334:	50b4      	str	r4, [r6, r2]
 800e336:	3604      	adds	r6, #4
 800e338:	e7a3      	b.n	800e282 <__multiply+0x7e>
 800e33a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d1a5      	bne.n	800e28e <__multiply+0x8a>
 800e342:	3f01      	subs	r7, #1
 800e344:	e7a1      	b.n	800e28a <__multiply+0x86>
 800e346:	bf00      	nop
 800e348:	0800f613 	.word	0x0800f613
 800e34c:	0800f624 	.word	0x0800f624

0800e350 <__pow5mult>:
 800e350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e354:	4615      	mov	r5, r2
 800e356:	f012 0203 	ands.w	r2, r2, #3
 800e35a:	4606      	mov	r6, r0
 800e35c:	460f      	mov	r7, r1
 800e35e:	d007      	beq.n	800e370 <__pow5mult+0x20>
 800e360:	4c25      	ldr	r4, [pc, #148]	; (800e3f8 <__pow5mult+0xa8>)
 800e362:	3a01      	subs	r2, #1
 800e364:	2300      	movs	r3, #0
 800e366:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e36a:	f7ff fe9b 	bl	800e0a4 <__multadd>
 800e36e:	4607      	mov	r7, r0
 800e370:	10ad      	asrs	r5, r5, #2
 800e372:	d03d      	beq.n	800e3f0 <__pow5mult+0xa0>
 800e374:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e376:	b97c      	cbnz	r4, 800e398 <__pow5mult+0x48>
 800e378:	2010      	movs	r0, #16
 800e37a:	f7ff fe1b 	bl	800dfb4 <malloc>
 800e37e:	4602      	mov	r2, r0
 800e380:	6270      	str	r0, [r6, #36]	; 0x24
 800e382:	b928      	cbnz	r0, 800e390 <__pow5mult+0x40>
 800e384:	4b1d      	ldr	r3, [pc, #116]	; (800e3fc <__pow5mult+0xac>)
 800e386:	481e      	ldr	r0, [pc, #120]	; (800e400 <__pow5mult+0xb0>)
 800e388:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e38c:	f000 fa70 	bl	800e870 <__assert_func>
 800e390:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e394:	6004      	str	r4, [r0, #0]
 800e396:	60c4      	str	r4, [r0, #12]
 800e398:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e39c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e3a0:	b94c      	cbnz	r4, 800e3b6 <__pow5mult+0x66>
 800e3a2:	f240 2171 	movw	r1, #625	; 0x271
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	f7ff ff16 	bl	800e1d8 <__i2b>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3b2:	4604      	mov	r4, r0
 800e3b4:	6003      	str	r3, [r0, #0]
 800e3b6:	f04f 0900 	mov.w	r9, #0
 800e3ba:	07eb      	lsls	r3, r5, #31
 800e3bc:	d50a      	bpl.n	800e3d4 <__pow5mult+0x84>
 800e3be:	4639      	mov	r1, r7
 800e3c0:	4622      	mov	r2, r4
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	f7ff ff1e 	bl	800e204 <__multiply>
 800e3c8:	4639      	mov	r1, r7
 800e3ca:	4680      	mov	r8, r0
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f7ff fe47 	bl	800e060 <_Bfree>
 800e3d2:	4647      	mov	r7, r8
 800e3d4:	106d      	asrs	r5, r5, #1
 800e3d6:	d00b      	beq.n	800e3f0 <__pow5mult+0xa0>
 800e3d8:	6820      	ldr	r0, [r4, #0]
 800e3da:	b938      	cbnz	r0, 800e3ec <__pow5mult+0x9c>
 800e3dc:	4622      	mov	r2, r4
 800e3de:	4621      	mov	r1, r4
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	f7ff ff0f 	bl	800e204 <__multiply>
 800e3e6:	6020      	str	r0, [r4, #0]
 800e3e8:	f8c0 9000 	str.w	r9, [r0]
 800e3ec:	4604      	mov	r4, r0
 800e3ee:	e7e4      	b.n	800e3ba <__pow5mult+0x6a>
 800e3f0:	4638      	mov	r0, r7
 800e3f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3f6:	bf00      	nop
 800e3f8:	0800f778 	.word	0x0800f778
 800e3fc:	0800f59d 	.word	0x0800f59d
 800e400:	0800f624 	.word	0x0800f624

0800e404 <__lshift>:
 800e404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e408:	460c      	mov	r4, r1
 800e40a:	6849      	ldr	r1, [r1, #4]
 800e40c:	6923      	ldr	r3, [r4, #16]
 800e40e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e412:	68a3      	ldr	r3, [r4, #8]
 800e414:	4607      	mov	r7, r0
 800e416:	4691      	mov	r9, r2
 800e418:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e41c:	f108 0601 	add.w	r6, r8, #1
 800e420:	42b3      	cmp	r3, r6
 800e422:	db0b      	blt.n	800e43c <__lshift+0x38>
 800e424:	4638      	mov	r0, r7
 800e426:	f7ff fddb 	bl	800dfe0 <_Balloc>
 800e42a:	4605      	mov	r5, r0
 800e42c:	b948      	cbnz	r0, 800e442 <__lshift+0x3e>
 800e42e:	4602      	mov	r2, r0
 800e430:	4b28      	ldr	r3, [pc, #160]	; (800e4d4 <__lshift+0xd0>)
 800e432:	4829      	ldr	r0, [pc, #164]	; (800e4d8 <__lshift+0xd4>)
 800e434:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e438:	f000 fa1a 	bl	800e870 <__assert_func>
 800e43c:	3101      	adds	r1, #1
 800e43e:	005b      	lsls	r3, r3, #1
 800e440:	e7ee      	b.n	800e420 <__lshift+0x1c>
 800e442:	2300      	movs	r3, #0
 800e444:	f100 0114 	add.w	r1, r0, #20
 800e448:	f100 0210 	add.w	r2, r0, #16
 800e44c:	4618      	mov	r0, r3
 800e44e:	4553      	cmp	r3, sl
 800e450:	db33      	blt.n	800e4ba <__lshift+0xb6>
 800e452:	6920      	ldr	r0, [r4, #16]
 800e454:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e458:	f104 0314 	add.w	r3, r4, #20
 800e45c:	f019 091f 	ands.w	r9, r9, #31
 800e460:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e464:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e468:	d02b      	beq.n	800e4c2 <__lshift+0xbe>
 800e46a:	f1c9 0e20 	rsb	lr, r9, #32
 800e46e:	468a      	mov	sl, r1
 800e470:	2200      	movs	r2, #0
 800e472:	6818      	ldr	r0, [r3, #0]
 800e474:	fa00 f009 	lsl.w	r0, r0, r9
 800e478:	4302      	orrs	r2, r0
 800e47a:	f84a 2b04 	str.w	r2, [sl], #4
 800e47e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e482:	459c      	cmp	ip, r3
 800e484:	fa22 f20e 	lsr.w	r2, r2, lr
 800e488:	d8f3      	bhi.n	800e472 <__lshift+0x6e>
 800e48a:	ebac 0304 	sub.w	r3, ip, r4
 800e48e:	3b15      	subs	r3, #21
 800e490:	f023 0303 	bic.w	r3, r3, #3
 800e494:	3304      	adds	r3, #4
 800e496:	f104 0015 	add.w	r0, r4, #21
 800e49a:	4584      	cmp	ip, r0
 800e49c:	bf38      	it	cc
 800e49e:	2304      	movcc	r3, #4
 800e4a0:	50ca      	str	r2, [r1, r3]
 800e4a2:	b10a      	cbz	r2, 800e4a8 <__lshift+0xa4>
 800e4a4:	f108 0602 	add.w	r6, r8, #2
 800e4a8:	3e01      	subs	r6, #1
 800e4aa:	4638      	mov	r0, r7
 800e4ac:	612e      	str	r6, [r5, #16]
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	f7ff fdd6 	bl	800e060 <_Bfree>
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4be:	3301      	adds	r3, #1
 800e4c0:	e7c5      	b.n	800e44e <__lshift+0x4a>
 800e4c2:	3904      	subs	r1, #4
 800e4c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4cc:	459c      	cmp	ip, r3
 800e4ce:	d8f9      	bhi.n	800e4c4 <__lshift+0xc0>
 800e4d0:	e7ea      	b.n	800e4a8 <__lshift+0xa4>
 800e4d2:	bf00      	nop
 800e4d4:	0800f613 	.word	0x0800f613
 800e4d8:	0800f624 	.word	0x0800f624

0800e4dc <__mcmp>:
 800e4dc:	b530      	push	{r4, r5, lr}
 800e4de:	6902      	ldr	r2, [r0, #16]
 800e4e0:	690c      	ldr	r4, [r1, #16]
 800e4e2:	1b12      	subs	r2, r2, r4
 800e4e4:	d10e      	bne.n	800e504 <__mcmp+0x28>
 800e4e6:	f100 0314 	add.w	r3, r0, #20
 800e4ea:	3114      	adds	r1, #20
 800e4ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e4f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e4f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e4f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e4fc:	42a5      	cmp	r5, r4
 800e4fe:	d003      	beq.n	800e508 <__mcmp+0x2c>
 800e500:	d305      	bcc.n	800e50e <__mcmp+0x32>
 800e502:	2201      	movs	r2, #1
 800e504:	4610      	mov	r0, r2
 800e506:	bd30      	pop	{r4, r5, pc}
 800e508:	4283      	cmp	r3, r0
 800e50a:	d3f3      	bcc.n	800e4f4 <__mcmp+0x18>
 800e50c:	e7fa      	b.n	800e504 <__mcmp+0x28>
 800e50e:	f04f 32ff 	mov.w	r2, #4294967295
 800e512:	e7f7      	b.n	800e504 <__mcmp+0x28>

0800e514 <__mdiff>:
 800e514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e518:	460c      	mov	r4, r1
 800e51a:	4606      	mov	r6, r0
 800e51c:	4611      	mov	r1, r2
 800e51e:	4620      	mov	r0, r4
 800e520:	4617      	mov	r7, r2
 800e522:	f7ff ffdb 	bl	800e4dc <__mcmp>
 800e526:	1e05      	subs	r5, r0, #0
 800e528:	d110      	bne.n	800e54c <__mdiff+0x38>
 800e52a:	4629      	mov	r1, r5
 800e52c:	4630      	mov	r0, r6
 800e52e:	f7ff fd57 	bl	800dfe0 <_Balloc>
 800e532:	b930      	cbnz	r0, 800e542 <__mdiff+0x2e>
 800e534:	4b39      	ldr	r3, [pc, #228]	; (800e61c <__mdiff+0x108>)
 800e536:	4602      	mov	r2, r0
 800e538:	f240 2132 	movw	r1, #562	; 0x232
 800e53c:	4838      	ldr	r0, [pc, #224]	; (800e620 <__mdiff+0x10c>)
 800e53e:	f000 f997 	bl	800e870 <__assert_func>
 800e542:	2301      	movs	r3, #1
 800e544:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e54c:	bfa4      	itt	ge
 800e54e:	463b      	movge	r3, r7
 800e550:	4627      	movge	r7, r4
 800e552:	4630      	mov	r0, r6
 800e554:	6879      	ldr	r1, [r7, #4]
 800e556:	bfa6      	itte	ge
 800e558:	461c      	movge	r4, r3
 800e55a:	2500      	movge	r5, #0
 800e55c:	2501      	movlt	r5, #1
 800e55e:	f7ff fd3f 	bl	800dfe0 <_Balloc>
 800e562:	b920      	cbnz	r0, 800e56e <__mdiff+0x5a>
 800e564:	4b2d      	ldr	r3, [pc, #180]	; (800e61c <__mdiff+0x108>)
 800e566:	4602      	mov	r2, r0
 800e568:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e56c:	e7e6      	b.n	800e53c <__mdiff+0x28>
 800e56e:	693e      	ldr	r6, [r7, #16]
 800e570:	60c5      	str	r5, [r0, #12]
 800e572:	6925      	ldr	r5, [r4, #16]
 800e574:	f107 0114 	add.w	r1, r7, #20
 800e578:	f104 0914 	add.w	r9, r4, #20
 800e57c:	f100 0e14 	add.w	lr, r0, #20
 800e580:	f107 0210 	add.w	r2, r7, #16
 800e584:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e588:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e58c:	46f2      	mov	sl, lr
 800e58e:	2700      	movs	r7, #0
 800e590:	f859 3b04 	ldr.w	r3, [r9], #4
 800e594:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e598:	fa1f f883 	uxth.w	r8, r3
 800e59c:	fa17 f78b 	uxtah	r7, r7, fp
 800e5a0:	0c1b      	lsrs	r3, r3, #16
 800e5a2:	eba7 0808 	sub.w	r8, r7, r8
 800e5a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e5aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e5ae:	fa1f f888 	uxth.w	r8, r8
 800e5b2:	141f      	asrs	r7, r3, #16
 800e5b4:	454d      	cmp	r5, r9
 800e5b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e5ba:	f84a 3b04 	str.w	r3, [sl], #4
 800e5be:	d8e7      	bhi.n	800e590 <__mdiff+0x7c>
 800e5c0:	1b2b      	subs	r3, r5, r4
 800e5c2:	3b15      	subs	r3, #21
 800e5c4:	f023 0303 	bic.w	r3, r3, #3
 800e5c8:	3304      	adds	r3, #4
 800e5ca:	3415      	adds	r4, #21
 800e5cc:	42a5      	cmp	r5, r4
 800e5ce:	bf38      	it	cc
 800e5d0:	2304      	movcc	r3, #4
 800e5d2:	4419      	add	r1, r3
 800e5d4:	4473      	add	r3, lr
 800e5d6:	469e      	mov	lr, r3
 800e5d8:	460d      	mov	r5, r1
 800e5da:	4565      	cmp	r5, ip
 800e5dc:	d30e      	bcc.n	800e5fc <__mdiff+0xe8>
 800e5de:	f10c 0203 	add.w	r2, ip, #3
 800e5e2:	1a52      	subs	r2, r2, r1
 800e5e4:	f022 0203 	bic.w	r2, r2, #3
 800e5e8:	3903      	subs	r1, #3
 800e5ea:	458c      	cmp	ip, r1
 800e5ec:	bf38      	it	cc
 800e5ee:	2200      	movcc	r2, #0
 800e5f0:	441a      	add	r2, r3
 800e5f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e5f6:	b17b      	cbz	r3, 800e618 <__mdiff+0x104>
 800e5f8:	6106      	str	r6, [r0, #16]
 800e5fa:	e7a5      	b.n	800e548 <__mdiff+0x34>
 800e5fc:	f855 8b04 	ldr.w	r8, [r5], #4
 800e600:	fa17 f488 	uxtah	r4, r7, r8
 800e604:	1422      	asrs	r2, r4, #16
 800e606:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e60a:	b2a4      	uxth	r4, r4
 800e60c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e610:	f84e 4b04 	str.w	r4, [lr], #4
 800e614:	1417      	asrs	r7, r2, #16
 800e616:	e7e0      	b.n	800e5da <__mdiff+0xc6>
 800e618:	3e01      	subs	r6, #1
 800e61a:	e7ea      	b.n	800e5f2 <__mdiff+0xde>
 800e61c:	0800f613 	.word	0x0800f613
 800e620:	0800f624 	.word	0x0800f624

0800e624 <__d2b>:
 800e624:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e628:	4689      	mov	r9, r1
 800e62a:	2101      	movs	r1, #1
 800e62c:	ec57 6b10 	vmov	r6, r7, d0
 800e630:	4690      	mov	r8, r2
 800e632:	f7ff fcd5 	bl	800dfe0 <_Balloc>
 800e636:	4604      	mov	r4, r0
 800e638:	b930      	cbnz	r0, 800e648 <__d2b+0x24>
 800e63a:	4602      	mov	r2, r0
 800e63c:	4b25      	ldr	r3, [pc, #148]	; (800e6d4 <__d2b+0xb0>)
 800e63e:	4826      	ldr	r0, [pc, #152]	; (800e6d8 <__d2b+0xb4>)
 800e640:	f240 310a 	movw	r1, #778	; 0x30a
 800e644:	f000 f914 	bl	800e870 <__assert_func>
 800e648:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e64c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e650:	bb35      	cbnz	r5, 800e6a0 <__d2b+0x7c>
 800e652:	2e00      	cmp	r6, #0
 800e654:	9301      	str	r3, [sp, #4]
 800e656:	d028      	beq.n	800e6aa <__d2b+0x86>
 800e658:	4668      	mov	r0, sp
 800e65a:	9600      	str	r6, [sp, #0]
 800e65c:	f7ff fd8c 	bl	800e178 <__lo0bits>
 800e660:	9900      	ldr	r1, [sp, #0]
 800e662:	b300      	cbz	r0, 800e6a6 <__d2b+0x82>
 800e664:	9a01      	ldr	r2, [sp, #4]
 800e666:	f1c0 0320 	rsb	r3, r0, #32
 800e66a:	fa02 f303 	lsl.w	r3, r2, r3
 800e66e:	430b      	orrs	r3, r1
 800e670:	40c2      	lsrs	r2, r0
 800e672:	6163      	str	r3, [r4, #20]
 800e674:	9201      	str	r2, [sp, #4]
 800e676:	9b01      	ldr	r3, [sp, #4]
 800e678:	61a3      	str	r3, [r4, #24]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	bf14      	ite	ne
 800e67e:	2202      	movne	r2, #2
 800e680:	2201      	moveq	r2, #1
 800e682:	6122      	str	r2, [r4, #16]
 800e684:	b1d5      	cbz	r5, 800e6bc <__d2b+0x98>
 800e686:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e68a:	4405      	add	r5, r0
 800e68c:	f8c9 5000 	str.w	r5, [r9]
 800e690:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e694:	f8c8 0000 	str.w	r0, [r8]
 800e698:	4620      	mov	r0, r4
 800e69a:	b003      	add	sp, #12
 800e69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6a4:	e7d5      	b.n	800e652 <__d2b+0x2e>
 800e6a6:	6161      	str	r1, [r4, #20]
 800e6a8:	e7e5      	b.n	800e676 <__d2b+0x52>
 800e6aa:	a801      	add	r0, sp, #4
 800e6ac:	f7ff fd64 	bl	800e178 <__lo0bits>
 800e6b0:	9b01      	ldr	r3, [sp, #4]
 800e6b2:	6163      	str	r3, [r4, #20]
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	6122      	str	r2, [r4, #16]
 800e6b8:	3020      	adds	r0, #32
 800e6ba:	e7e3      	b.n	800e684 <__d2b+0x60>
 800e6bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e6c4:	f8c9 0000 	str.w	r0, [r9]
 800e6c8:	6918      	ldr	r0, [r3, #16]
 800e6ca:	f7ff fd35 	bl	800e138 <__hi0bits>
 800e6ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6d2:	e7df      	b.n	800e694 <__d2b+0x70>
 800e6d4:	0800f613 	.word	0x0800f613
 800e6d8:	0800f624 	.word	0x0800f624

0800e6dc <_calloc_r>:
 800e6dc:	b513      	push	{r0, r1, r4, lr}
 800e6de:	434a      	muls	r2, r1
 800e6e0:	4611      	mov	r1, r2
 800e6e2:	9201      	str	r2, [sp, #4]
 800e6e4:	f000 f85a 	bl	800e79c <_malloc_r>
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	b118      	cbz	r0, 800e6f4 <_calloc_r+0x18>
 800e6ec:	9a01      	ldr	r2, [sp, #4]
 800e6ee:	2100      	movs	r1, #0
 800e6f0:	f7fe fa02 	bl	800caf8 <memset>
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	b002      	add	sp, #8
 800e6f8:	bd10      	pop	{r4, pc}
	...

0800e6fc <_free_r>:
 800e6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6fe:	2900      	cmp	r1, #0
 800e700:	d048      	beq.n	800e794 <_free_r+0x98>
 800e702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e706:	9001      	str	r0, [sp, #4]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f1a1 0404 	sub.w	r4, r1, #4
 800e70e:	bfb8      	it	lt
 800e710:	18e4      	addlt	r4, r4, r3
 800e712:	f000 f8ef 	bl	800e8f4 <__malloc_lock>
 800e716:	4a20      	ldr	r2, [pc, #128]	; (800e798 <_free_r+0x9c>)
 800e718:	9801      	ldr	r0, [sp, #4]
 800e71a:	6813      	ldr	r3, [r2, #0]
 800e71c:	4615      	mov	r5, r2
 800e71e:	b933      	cbnz	r3, 800e72e <_free_r+0x32>
 800e720:	6063      	str	r3, [r4, #4]
 800e722:	6014      	str	r4, [r2, #0]
 800e724:	b003      	add	sp, #12
 800e726:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e72a:	f000 b8e9 	b.w	800e900 <__malloc_unlock>
 800e72e:	42a3      	cmp	r3, r4
 800e730:	d90b      	bls.n	800e74a <_free_r+0x4e>
 800e732:	6821      	ldr	r1, [r4, #0]
 800e734:	1862      	adds	r2, r4, r1
 800e736:	4293      	cmp	r3, r2
 800e738:	bf04      	itt	eq
 800e73a:	681a      	ldreq	r2, [r3, #0]
 800e73c:	685b      	ldreq	r3, [r3, #4]
 800e73e:	6063      	str	r3, [r4, #4]
 800e740:	bf04      	itt	eq
 800e742:	1852      	addeq	r2, r2, r1
 800e744:	6022      	streq	r2, [r4, #0]
 800e746:	602c      	str	r4, [r5, #0]
 800e748:	e7ec      	b.n	800e724 <_free_r+0x28>
 800e74a:	461a      	mov	r2, r3
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	b10b      	cbz	r3, 800e754 <_free_r+0x58>
 800e750:	42a3      	cmp	r3, r4
 800e752:	d9fa      	bls.n	800e74a <_free_r+0x4e>
 800e754:	6811      	ldr	r1, [r2, #0]
 800e756:	1855      	adds	r5, r2, r1
 800e758:	42a5      	cmp	r5, r4
 800e75a:	d10b      	bne.n	800e774 <_free_r+0x78>
 800e75c:	6824      	ldr	r4, [r4, #0]
 800e75e:	4421      	add	r1, r4
 800e760:	1854      	adds	r4, r2, r1
 800e762:	42a3      	cmp	r3, r4
 800e764:	6011      	str	r1, [r2, #0]
 800e766:	d1dd      	bne.n	800e724 <_free_r+0x28>
 800e768:	681c      	ldr	r4, [r3, #0]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	6053      	str	r3, [r2, #4]
 800e76e:	4421      	add	r1, r4
 800e770:	6011      	str	r1, [r2, #0]
 800e772:	e7d7      	b.n	800e724 <_free_r+0x28>
 800e774:	d902      	bls.n	800e77c <_free_r+0x80>
 800e776:	230c      	movs	r3, #12
 800e778:	6003      	str	r3, [r0, #0]
 800e77a:	e7d3      	b.n	800e724 <_free_r+0x28>
 800e77c:	6825      	ldr	r5, [r4, #0]
 800e77e:	1961      	adds	r1, r4, r5
 800e780:	428b      	cmp	r3, r1
 800e782:	bf04      	itt	eq
 800e784:	6819      	ldreq	r1, [r3, #0]
 800e786:	685b      	ldreq	r3, [r3, #4]
 800e788:	6063      	str	r3, [r4, #4]
 800e78a:	bf04      	itt	eq
 800e78c:	1949      	addeq	r1, r1, r5
 800e78e:	6021      	streq	r1, [r4, #0]
 800e790:	6054      	str	r4, [r2, #4]
 800e792:	e7c7      	b.n	800e724 <_free_r+0x28>
 800e794:	b003      	add	sp, #12
 800e796:	bd30      	pop	{r4, r5, pc}
 800e798:	24000b20 	.word	0x24000b20

0800e79c <_malloc_r>:
 800e79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e79e:	1ccd      	adds	r5, r1, #3
 800e7a0:	f025 0503 	bic.w	r5, r5, #3
 800e7a4:	3508      	adds	r5, #8
 800e7a6:	2d0c      	cmp	r5, #12
 800e7a8:	bf38      	it	cc
 800e7aa:	250c      	movcc	r5, #12
 800e7ac:	2d00      	cmp	r5, #0
 800e7ae:	4606      	mov	r6, r0
 800e7b0:	db01      	blt.n	800e7b6 <_malloc_r+0x1a>
 800e7b2:	42a9      	cmp	r1, r5
 800e7b4:	d903      	bls.n	800e7be <_malloc_r+0x22>
 800e7b6:	230c      	movs	r3, #12
 800e7b8:	6033      	str	r3, [r6, #0]
 800e7ba:	2000      	movs	r0, #0
 800e7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7be:	f000 f899 	bl	800e8f4 <__malloc_lock>
 800e7c2:	4921      	ldr	r1, [pc, #132]	; (800e848 <_malloc_r+0xac>)
 800e7c4:	680a      	ldr	r2, [r1, #0]
 800e7c6:	4614      	mov	r4, r2
 800e7c8:	b99c      	cbnz	r4, 800e7f2 <_malloc_r+0x56>
 800e7ca:	4f20      	ldr	r7, [pc, #128]	; (800e84c <_malloc_r+0xb0>)
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	b923      	cbnz	r3, 800e7da <_malloc_r+0x3e>
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	4630      	mov	r0, r6
 800e7d4:	f000 f83c 	bl	800e850 <_sbrk_r>
 800e7d8:	6038      	str	r0, [r7, #0]
 800e7da:	4629      	mov	r1, r5
 800e7dc:	4630      	mov	r0, r6
 800e7de:	f000 f837 	bl	800e850 <_sbrk_r>
 800e7e2:	1c43      	adds	r3, r0, #1
 800e7e4:	d123      	bne.n	800e82e <_malloc_r+0x92>
 800e7e6:	230c      	movs	r3, #12
 800e7e8:	6033      	str	r3, [r6, #0]
 800e7ea:	4630      	mov	r0, r6
 800e7ec:	f000 f888 	bl	800e900 <__malloc_unlock>
 800e7f0:	e7e3      	b.n	800e7ba <_malloc_r+0x1e>
 800e7f2:	6823      	ldr	r3, [r4, #0]
 800e7f4:	1b5b      	subs	r3, r3, r5
 800e7f6:	d417      	bmi.n	800e828 <_malloc_r+0x8c>
 800e7f8:	2b0b      	cmp	r3, #11
 800e7fa:	d903      	bls.n	800e804 <_malloc_r+0x68>
 800e7fc:	6023      	str	r3, [r4, #0]
 800e7fe:	441c      	add	r4, r3
 800e800:	6025      	str	r5, [r4, #0]
 800e802:	e004      	b.n	800e80e <_malloc_r+0x72>
 800e804:	6863      	ldr	r3, [r4, #4]
 800e806:	42a2      	cmp	r2, r4
 800e808:	bf0c      	ite	eq
 800e80a:	600b      	streq	r3, [r1, #0]
 800e80c:	6053      	strne	r3, [r2, #4]
 800e80e:	4630      	mov	r0, r6
 800e810:	f000 f876 	bl	800e900 <__malloc_unlock>
 800e814:	f104 000b 	add.w	r0, r4, #11
 800e818:	1d23      	adds	r3, r4, #4
 800e81a:	f020 0007 	bic.w	r0, r0, #7
 800e81e:	1ac2      	subs	r2, r0, r3
 800e820:	d0cc      	beq.n	800e7bc <_malloc_r+0x20>
 800e822:	1a1b      	subs	r3, r3, r0
 800e824:	50a3      	str	r3, [r4, r2]
 800e826:	e7c9      	b.n	800e7bc <_malloc_r+0x20>
 800e828:	4622      	mov	r2, r4
 800e82a:	6864      	ldr	r4, [r4, #4]
 800e82c:	e7cc      	b.n	800e7c8 <_malloc_r+0x2c>
 800e82e:	1cc4      	adds	r4, r0, #3
 800e830:	f024 0403 	bic.w	r4, r4, #3
 800e834:	42a0      	cmp	r0, r4
 800e836:	d0e3      	beq.n	800e800 <_malloc_r+0x64>
 800e838:	1a21      	subs	r1, r4, r0
 800e83a:	4630      	mov	r0, r6
 800e83c:	f000 f808 	bl	800e850 <_sbrk_r>
 800e840:	3001      	adds	r0, #1
 800e842:	d1dd      	bne.n	800e800 <_malloc_r+0x64>
 800e844:	e7cf      	b.n	800e7e6 <_malloc_r+0x4a>
 800e846:	bf00      	nop
 800e848:	24000b20 	.word	0x24000b20
 800e84c:	24000b24 	.word	0x24000b24

0800e850 <_sbrk_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4d06      	ldr	r5, [pc, #24]	; (800e86c <_sbrk_r+0x1c>)
 800e854:	2300      	movs	r3, #0
 800e856:	4604      	mov	r4, r0
 800e858:	4608      	mov	r0, r1
 800e85a:	602b      	str	r3, [r5, #0]
 800e85c:	f7f5 f848 	bl	80038f0 <_sbrk>
 800e860:	1c43      	adds	r3, r0, #1
 800e862:	d102      	bne.n	800e86a <_sbrk_r+0x1a>
 800e864:	682b      	ldr	r3, [r5, #0]
 800e866:	b103      	cbz	r3, 800e86a <_sbrk_r+0x1a>
 800e868:	6023      	str	r3, [r4, #0]
 800e86a:	bd38      	pop	{r3, r4, r5, pc}
 800e86c:	24000b2c 	.word	0x24000b2c

0800e870 <__assert_func>:
 800e870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e872:	4614      	mov	r4, r2
 800e874:	461a      	mov	r2, r3
 800e876:	4b09      	ldr	r3, [pc, #36]	; (800e89c <__assert_func+0x2c>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4605      	mov	r5, r0
 800e87c:	68d8      	ldr	r0, [r3, #12]
 800e87e:	b14c      	cbz	r4, 800e894 <__assert_func+0x24>
 800e880:	4b07      	ldr	r3, [pc, #28]	; (800e8a0 <__assert_func+0x30>)
 800e882:	9100      	str	r1, [sp, #0]
 800e884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e888:	4906      	ldr	r1, [pc, #24]	; (800e8a4 <__assert_func+0x34>)
 800e88a:	462b      	mov	r3, r5
 800e88c:	f000 f80e 	bl	800e8ac <fiprintf>
 800e890:	f000 fa64 	bl	800ed5c <abort>
 800e894:	4b04      	ldr	r3, [pc, #16]	; (800e8a8 <__assert_func+0x38>)
 800e896:	461c      	mov	r4, r3
 800e898:	e7f3      	b.n	800e882 <__assert_func+0x12>
 800e89a:	bf00      	nop
 800e89c:	24000038 	.word	0x24000038
 800e8a0:	0800f784 	.word	0x0800f784
 800e8a4:	0800f791 	.word	0x0800f791
 800e8a8:	0800f7bf 	.word	0x0800f7bf

0800e8ac <fiprintf>:
 800e8ac:	b40e      	push	{r1, r2, r3}
 800e8ae:	b503      	push	{r0, r1, lr}
 800e8b0:	4601      	mov	r1, r0
 800e8b2:	ab03      	add	r3, sp, #12
 800e8b4:	4805      	ldr	r0, [pc, #20]	; (800e8cc <fiprintf+0x20>)
 800e8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8ba:	6800      	ldr	r0, [r0, #0]
 800e8bc:	9301      	str	r3, [sp, #4]
 800e8be:	f000 f84f 	bl	800e960 <_vfiprintf_r>
 800e8c2:	b002      	add	sp, #8
 800e8c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8c8:	b003      	add	sp, #12
 800e8ca:	4770      	bx	lr
 800e8cc:	24000038 	.word	0x24000038

0800e8d0 <__ascii_mbtowc>:
 800e8d0:	b082      	sub	sp, #8
 800e8d2:	b901      	cbnz	r1, 800e8d6 <__ascii_mbtowc+0x6>
 800e8d4:	a901      	add	r1, sp, #4
 800e8d6:	b142      	cbz	r2, 800e8ea <__ascii_mbtowc+0x1a>
 800e8d8:	b14b      	cbz	r3, 800e8ee <__ascii_mbtowc+0x1e>
 800e8da:	7813      	ldrb	r3, [r2, #0]
 800e8dc:	600b      	str	r3, [r1, #0]
 800e8de:	7812      	ldrb	r2, [r2, #0]
 800e8e0:	1e10      	subs	r0, r2, #0
 800e8e2:	bf18      	it	ne
 800e8e4:	2001      	movne	r0, #1
 800e8e6:	b002      	add	sp, #8
 800e8e8:	4770      	bx	lr
 800e8ea:	4610      	mov	r0, r2
 800e8ec:	e7fb      	b.n	800e8e6 <__ascii_mbtowc+0x16>
 800e8ee:	f06f 0001 	mvn.w	r0, #1
 800e8f2:	e7f8      	b.n	800e8e6 <__ascii_mbtowc+0x16>

0800e8f4 <__malloc_lock>:
 800e8f4:	4801      	ldr	r0, [pc, #4]	; (800e8fc <__malloc_lock+0x8>)
 800e8f6:	f000 bbf1 	b.w	800f0dc <__retarget_lock_acquire_recursive>
 800e8fa:	bf00      	nop
 800e8fc:	24000b34 	.word	0x24000b34

0800e900 <__malloc_unlock>:
 800e900:	4801      	ldr	r0, [pc, #4]	; (800e908 <__malloc_unlock+0x8>)
 800e902:	f000 bbec 	b.w	800f0de <__retarget_lock_release_recursive>
 800e906:	bf00      	nop
 800e908:	24000b34 	.word	0x24000b34

0800e90c <__sfputc_r>:
 800e90c:	6893      	ldr	r3, [r2, #8]
 800e90e:	3b01      	subs	r3, #1
 800e910:	2b00      	cmp	r3, #0
 800e912:	b410      	push	{r4}
 800e914:	6093      	str	r3, [r2, #8]
 800e916:	da08      	bge.n	800e92a <__sfputc_r+0x1e>
 800e918:	6994      	ldr	r4, [r2, #24]
 800e91a:	42a3      	cmp	r3, r4
 800e91c:	db01      	blt.n	800e922 <__sfputc_r+0x16>
 800e91e:	290a      	cmp	r1, #10
 800e920:	d103      	bne.n	800e92a <__sfputc_r+0x1e>
 800e922:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e926:	f000 b94b 	b.w	800ebc0 <__swbuf_r>
 800e92a:	6813      	ldr	r3, [r2, #0]
 800e92c:	1c58      	adds	r0, r3, #1
 800e92e:	6010      	str	r0, [r2, #0]
 800e930:	7019      	strb	r1, [r3, #0]
 800e932:	4608      	mov	r0, r1
 800e934:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e938:	4770      	bx	lr

0800e93a <__sfputs_r>:
 800e93a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e93c:	4606      	mov	r6, r0
 800e93e:	460f      	mov	r7, r1
 800e940:	4614      	mov	r4, r2
 800e942:	18d5      	adds	r5, r2, r3
 800e944:	42ac      	cmp	r4, r5
 800e946:	d101      	bne.n	800e94c <__sfputs_r+0x12>
 800e948:	2000      	movs	r0, #0
 800e94a:	e007      	b.n	800e95c <__sfputs_r+0x22>
 800e94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e950:	463a      	mov	r2, r7
 800e952:	4630      	mov	r0, r6
 800e954:	f7ff ffda 	bl	800e90c <__sfputc_r>
 800e958:	1c43      	adds	r3, r0, #1
 800e95a:	d1f3      	bne.n	800e944 <__sfputs_r+0xa>
 800e95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e960 <_vfiprintf_r>:
 800e960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e964:	460d      	mov	r5, r1
 800e966:	b09d      	sub	sp, #116	; 0x74
 800e968:	4614      	mov	r4, r2
 800e96a:	4698      	mov	r8, r3
 800e96c:	4606      	mov	r6, r0
 800e96e:	b118      	cbz	r0, 800e978 <_vfiprintf_r+0x18>
 800e970:	6983      	ldr	r3, [r0, #24]
 800e972:	b90b      	cbnz	r3, 800e978 <_vfiprintf_r+0x18>
 800e974:	f000 fb14 	bl	800efa0 <__sinit>
 800e978:	4b89      	ldr	r3, [pc, #548]	; (800eba0 <_vfiprintf_r+0x240>)
 800e97a:	429d      	cmp	r5, r3
 800e97c:	d11b      	bne.n	800e9b6 <_vfiprintf_r+0x56>
 800e97e:	6875      	ldr	r5, [r6, #4]
 800e980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e982:	07d9      	lsls	r1, r3, #31
 800e984:	d405      	bmi.n	800e992 <_vfiprintf_r+0x32>
 800e986:	89ab      	ldrh	r3, [r5, #12]
 800e988:	059a      	lsls	r2, r3, #22
 800e98a:	d402      	bmi.n	800e992 <_vfiprintf_r+0x32>
 800e98c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e98e:	f000 fba5 	bl	800f0dc <__retarget_lock_acquire_recursive>
 800e992:	89ab      	ldrh	r3, [r5, #12]
 800e994:	071b      	lsls	r3, r3, #28
 800e996:	d501      	bpl.n	800e99c <_vfiprintf_r+0x3c>
 800e998:	692b      	ldr	r3, [r5, #16]
 800e99a:	b9eb      	cbnz	r3, 800e9d8 <_vfiprintf_r+0x78>
 800e99c:	4629      	mov	r1, r5
 800e99e:	4630      	mov	r0, r6
 800e9a0:	f000 f96e 	bl	800ec80 <__swsetup_r>
 800e9a4:	b1c0      	cbz	r0, 800e9d8 <_vfiprintf_r+0x78>
 800e9a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9a8:	07dc      	lsls	r4, r3, #31
 800e9aa:	d50e      	bpl.n	800e9ca <_vfiprintf_r+0x6a>
 800e9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b0:	b01d      	add	sp, #116	; 0x74
 800e9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b6:	4b7b      	ldr	r3, [pc, #492]	; (800eba4 <_vfiprintf_r+0x244>)
 800e9b8:	429d      	cmp	r5, r3
 800e9ba:	d101      	bne.n	800e9c0 <_vfiprintf_r+0x60>
 800e9bc:	68b5      	ldr	r5, [r6, #8]
 800e9be:	e7df      	b.n	800e980 <_vfiprintf_r+0x20>
 800e9c0:	4b79      	ldr	r3, [pc, #484]	; (800eba8 <_vfiprintf_r+0x248>)
 800e9c2:	429d      	cmp	r5, r3
 800e9c4:	bf08      	it	eq
 800e9c6:	68f5      	ldreq	r5, [r6, #12]
 800e9c8:	e7da      	b.n	800e980 <_vfiprintf_r+0x20>
 800e9ca:	89ab      	ldrh	r3, [r5, #12]
 800e9cc:	0598      	lsls	r0, r3, #22
 800e9ce:	d4ed      	bmi.n	800e9ac <_vfiprintf_r+0x4c>
 800e9d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9d2:	f000 fb84 	bl	800f0de <__retarget_lock_release_recursive>
 800e9d6:	e7e9      	b.n	800e9ac <_vfiprintf_r+0x4c>
 800e9d8:	2300      	movs	r3, #0
 800e9da:	9309      	str	r3, [sp, #36]	; 0x24
 800e9dc:	2320      	movs	r3, #32
 800e9de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9e6:	2330      	movs	r3, #48	; 0x30
 800e9e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ebac <_vfiprintf_r+0x24c>
 800e9ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9f0:	f04f 0901 	mov.w	r9, #1
 800e9f4:	4623      	mov	r3, r4
 800e9f6:	469a      	mov	sl, r3
 800e9f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9fc:	b10a      	cbz	r2, 800ea02 <_vfiprintf_r+0xa2>
 800e9fe:	2a25      	cmp	r2, #37	; 0x25
 800ea00:	d1f9      	bne.n	800e9f6 <_vfiprintf_r+0x96>
 800ea02:	ebba 0b04 	subs.w	fp, sl, r4
 800ea06:	d00b      	beq.n	800ea20 <_vfiprintf_r+0xc0>
 800ea08:	465b      	mov	r3, fp
 800ea0a:	4622      	mov	r2, r4
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	4630      	mov	r0, r6
 800ea10:	f7ff ff93 	bl	800e93a <__sfputs_r>
 800ea14:	3001      	adds	r0, #1
 800ea16:	f000 80aa 	beq.w	800eb6e <_vfiprintf_r+0x20e>
 800ea1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea1c:	445a      	add	r2, fp
 800ea1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ea20:	f89a 3000 	ldrb.w	r3, [sl]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	f000 80a2 	beq.w	800eb6e <_vfiprintf_r+0x20e>
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea34:	f10a 0a01 	add.w	sl, sl, #1
 800ea38:	9304      	str	r3, [sp, #16]
 800ea3a:	9307      	str	r3, [sp, #28]
 800ea3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea40:	931a      	str	r3, [sp, #104]	; 0x68
 800ea42:	4654      	mov	r4, sl
 800ea44:	2205      	movs	r2, #5
 800ea46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea4a:	4858      	ldr	r0, [pc, #352]	; (800ebac <_vfiprintf_r+0x24c>)
 800ea4c:	f7f1 fc50 	bl	80002f0 <memchr>
 800ea50:	9a04      	ldr	r2, [sp, #16]
 800ea52:	b9d8      	cbnz	r0, 800ea8c <_vfiprintf_r+0x12c>
 800ea54:	06d1      	lsls	r1, r2, #27
 800ea56:	bf44      	itt	mi
 800ea58:	2320      	movmi	r3, #32
 800ea5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea5e:	0713      	lsls	r3, r2, #28
 800ea60:	bf44      	itt	mi
 800ea62:	232b      	movmi	r3, #43	; 0x2b
 800ea64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea68:	f89a 3000 	ldrb.w	r3, [sl]
 800ea6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ea6e:	d015      	beq.n	800ea9c <_vfiprintf_r+0x13c>
 800ea70:	9a07      	ldr	r2, [sp, #28]
 800ea72:	4654      	mov	r4, sl
 800ea74:	2000      	movs	r0, #0
 800ea76:	f04f 0c0a 	mov.w	ip, #10
 800ea7a:	4621      	mov	r1, r4
 800ea7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea80:	3b30      	subs	r3, #48	; 0x30
 800ea82:	2b09      	cmp	r3, #9
 800ea84:	d94e      	bls.n	800eb24 <_vfiprintf_r+0x1c4>
 800ea86:	b1b0      	cbz	r0, 800eab6 <_vfiprintf_r+0x156>
 800ea88:	9207      	str	r2, [sp, #28]
 800ea8a:	e014      	b.n	800eab6 <_vfiprintf_r+0x156>
 800ea8c:	eba0 0308 	sub.w	r3, r0, r8
 800ea90:	fa09 f303 	lsl.w	r3, r9, r3
 800ea94:	4313      	orrs	r3, r2
 800ea96:	9304      	str	r3, [sp, #16]
 800ea98:	46a2      	mov	sl, r4
 800ea9a:	e7d2      	b.n	800ea42 <_vfiprintf_r+0xe2>
 800ea9c:	9b03      	ldr	r3, [sp, #12]
 800ea9e:	1d19      	adds	r1, r3, #4
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	9103      	str	r1, [sp, #12]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	bfbb      	ittet	lt
 800eaa8:	425b      	neglt	r3, r3
 800eaaa:	f042 0202 	orrlt.w	r2, r2, #2
 800eaae:	9307      	strge	r3, [sp, #28]
 800eab0:	9307      	strlt	r3, [sp, #28]
 800eab2:	bfb8      	it	lt
 800eab4:	9204      	strlt	r2, [sp, #16]
 800eab6:	7823      	ldrb	r3, [r4, #0]
 800eab8:	2b2e      	cmp	r3, #46	; 0x2e
 800eaba:	d10c      	bne.n	800ead6 <_vfiprintf_r+0x176>
 800eabc:	7863      	ldrb	r3, [r4, #1]
 800eabe:	2b2a      	cmp	r3, #42	; 0x2a
 800eac0:	d135      	bne.n	800eb2e <_vfiprintf_r+0x1ce>
 800eac2:	9b03      	ldr	r3, [sp, #12]
 800eac4:	1d1a      	adds	r2, r3, #4
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	9203      	str	r2, [sp, #12]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	bfb8      	it	lt
 800eace:	f04f 33ff 	movlt.w	r3, #4294967295
 800ead2:	3402      	adds	r4, #2
 800ead4:	9305      	str	r3, [sp, #20]
 800ead6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ebbc <_vfiprintf_r+0x25c>
 800eada:	7821      	ldrb	r1, [r4, #0]
 800eadc:	2203      	movs	r2, #3
 800eade:	4650      	mov	r0, sl
 800eae0:	f7f1 fc06 	bl	80002f0 <memchr>
 800eae4:	b140      	cbz	r0, 800eaf8 <_vfiprintf_r+0x198>
 800eae6:	2340      	movs	r3, #64	; 0x40
 800eae8:	eba0 000a 	sub.w	r0, r0, sl
 800eaec:	fa03 f000 	lsl.w	r0, r3, r0
 800eaf0:	9b04      	ldr	r3, [sp, #16]
 800eaf2:	4303      	orrs	r3, r0
 800eaf4:	3401      	adds	r4, #1
 800eaf6:	9304      	str	r3, [sp, #16]
 800eaf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eafc:	482c      	ldr	r0, [pc, #176]	; (800ebb0 <_vfiprintf_r+0x250>)
 800eafe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb02:	2206      	movs	r2, #6
 800eb04:	f7f1 fbf4 	bl	80002f0 <memchr>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	d03f      	beq.n	800eb8c <_vfiprintf_r+0x22c>
 800eb0c:	4b29      	ldr	r3, [pc, #164]	; (800ebb4 <_vfiprintf_r+0x254>)
 800eb0e:	bb1b      	cbnz	r3, 800eb58 <_vfiprintf_r+0x1f8>
 800eb10:	9b03      	ldr	r3, [sp, #12]
 800eb12:	3307      	adds	r3, #7
 800eb14:	f023 0307 	bic.w	r3, r3, #7
 800eb18:	3308      	adds	r3, #8
 800eb1a:	9303      	str	r3, [sp, #12]
 800eb1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb1e:	443b      	add	r3, r7
 800eb20:	9309      	str	r3, [sp, #36]	; 0x24
 800eb22:	e767      	b.n	800e9f4 <_vfiprintf_r+0x94>
 800eb24:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb28:	460c      	mov	r4, r1
 800eb2a:	2001      	movs	r0, #1
 800eb2c:	e7a5      	b.n	800ea7a <_vfiprintf_r+0x11a>
 800eb2e:	2300      	movs	r3, #0
 800eb30:	3401      	adds	r4, #1
 800eb32:	9305      	str	r3, [sp, #20]
 800eb34:	4619      	mov	r1, r3
 800eb36:	f04f 0c0a 	mov.w	ip, #10
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb40:	3a30      	subs	r2, #48	; 0x30
 800eb42:	2a09      	cmp	r2, #9
 800eb44:	d903      	bls.n	800eb4e <_vfiprintf_r+0x1ee>
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d0c5      	beq.n	800ead6 <_vfiprintf_r+0x176>
 800eb4a:	9105      	str	r1, [sp, #20]
 800eb4c:	e7c3      	b.n	800ead6 <_vfiprintf_r+0x176>
 800eb4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb52:	4604      	mov	r4, r0
 800eb54:	2301      	movs	r3, #1
 800eb56:	e7f0      	b.n	800eb3a <_vfiprintf_r+0x1da>
 800eb58:	ab03      	add	r3, sp, #12
 800eb5a:	9300      	str	r3, [sp, #0]
 800eb5c:	462a      	mov	r2, r5
 800eb5e:	4b16      	ldr	r3, [pc, #88]	; (800ebb8 <_vfiprintf_r+0x258>)
 800eb60:	a904      	add	r1, sp, #16
 800eb62:	4630      	mov	r0, r6
 800eb64:	f7fe f860 	bl	800cc28 <_printf_float>
 800eb68:	4607      	mov	r7, r0
 800eb6a:	1c78      	adds	r0, r7, #1
 800eb6c:	d1d6      	bne.n	800eb1c <_vfiprintf_r+0x1bc>
 800eb6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb70:	07d9      	lsls	r1, r3, #31
 800eb72:	d405      	bmi.n	800eb80 <_vfiprintf_r+0x220>
 800eb74:	89ab      	ldrh	r3, [r5, #12]
 800eb76:	059a      	lsls	r2, r3, #22
 800eb78:	d402      	bmi.n	800eb80 <_vfiprintf_r+0x220>
 800eb7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb7c:	f000 faaf 	bl	800f0de <__retarget_lock_release_recursive>
 800eb80:	89ab      	ldrh	r3, [r5, #12]
 800eb82:	065b      	lsls	r3, r3, #25
 800eb84:	f53f af12 	bmi.w	800e9ac <_vfiprintf_r+0x4c>
 800eb88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb8a:	e711      	b.n	800e9b0 <_vfiprintf_r+0x50>
 800eb8c:	ab03      	add	r3, sp, #12
 800eb8e:	9300      	str	r3, [sp, #0]
 800eb90:	462a      	mov	r2, r5
 800eb92:	4b09      	ldr	r3, [pc, #36]	; (800ebb8 <_vfiprintf_r+0x258>)
 800eb94:	a904      	add	r1, sp, #16
 800eb96:	4630      	mov	r0, r6
 800eb98:	f7fe fad2 	bl	800d140 <_printf_i>
 800eb9c:	e7e4      	b.n	800eb68 <_vfiprintf_r+0x208>
 800eb9e:	bf00      	nop
 800eba0:	0800f8fc 	.word	0x0800f8fc
 800eba4:	0800f91c 	.word	0x0800f91c
 800eba8:	0800f8dc 	.word	0x0800f8dc
 800ebac:	0800f7ca 	.word	0x0800f7ca
 800ebb0:	0800f7d4 	.word	0x0800f7d4
 800ebb4:	0800cc29 	.word	0x0800cc29
 800ebb8:	0800e93b 	.word	0x0800e93b
 800ebbc:	0800f7d0 	.word	0x0800f7d0

0800ebc0 <__swbuf_r>:
 800ebc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc2:	460e      	mov	r6, r1
 800ebc4:	4614      	mov	r4, r2
 800ebc6:	4605      	mov	r5, r0
 800ebc8:	b118      	cbz	r0, 800ebd2 <__swbuf_r+0x12>
 800ebca:	6983      	ldr	r3, [r0, #24]
 800ebcc:	b90b      	cbnz	r3, 800ebd2 <__swbuf_r+0x12>
 800ebce:	f000 f9e7 	bl	800efa0 <__sinit>
 800ebd2:	4b21      	ldr	r3, [pc, #132]	; (800ec58 <__swbuf_r+0x98>)
 800ebd4:	429c      	cmp	r4, r3
 800ebd6:	d12b      	bne.n	800ec30 <__swbuf_r+0x70>
 800ebd8:	686c      	ldr	r4, [r5, #4]
 800ebda:	69a3      	ldr	r3, [r4, #24]
 800ebdc:	60a3      	str	r3, [r4, #8]
 800ebde:	89a3      	ldrh	r3, [r4, #12]
 800ebe0:	071a      	lsls	r2, r3, #28
 800ebe2:	d52f      	bpl.n	800ec44 <__swbuf_r+0x84>
 800ebe4:	6923      	ldr	r3, [r4, #16]
 800ebe6:	b36b      	cbz	r3, 800ec44 <__swbuf_r+0x84>
 800ebe8:	6923      	ldr	r3, [r4, #16]
 800ebea:	6820      	ldr	r0, [r4, #0]
 800ebec:	1ac0      	subs	r0, r0, r3
 800ebee:	6963      	ldr	r3, [r4, #20]
 800ebf0:	b2f6      	uxtb	r6, r6
 800ebf2:	4283      	cmp	r3, r0
 800ebf4:	4637      	mov	r7, r6
 800ebf6:	dc04      	bgt.n	800ec02 <__swbuf_r+0x42>
 800ebf8:	4621      	mov	r1, r4
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	f000 f93c 	bl	800ee78 <_fflush_r>
 800ec00:	bb30      	cbnz	r0, 800ec50 <__swbuf_r+0x90>
 800ec02:	68a3      	ldr	r3, [r4, #8]
 800ec04:	3b01      	subs	r3, #1
 800ec06:	60a3      	str	r3, [r4, #8]
 800ec08:	6823      	ldr	r3, [r4, #0]
 800ec0a:	1c5a      	adds	r2, r3, #1
 800ec0c:	6022      	str	r2, [r4, #0]
 800ec0e:	701e      	strb	r6, [r3, #0]
 800ec10:	6963      	ldr	r3, [r4, #20]
 800ec12:	3001      	adds	r0, #1
 800ec14:	4283      	cmp	r3, r0
 800ec16:	d004      	beq.n	800ec22 <__swbuf_r+0x62>
 800ec18:	89a3      	ldrh	r3, [r4, #12]
 800ec1a:	07db      	lsls	r3, r3, #31
 800ec1c:	d506      	bpl.n	800ec2c <__swbuf_r+0x6c>
 800ec1e:	2e0a      	cmp	r6, #10
 800ec20:	d104      	bne.n	800ec2c <__swbuf_r+0x6c>
 800ec22:	4621      	mov	r1, r4
 800ec24:	4628      	mov	r0, r5
 800ec26:	f000 f927 	bl	800ee78 <_fflush_r>
 800ec2a:	b988      	cbnz	r0, 800ec50 <__swbuf_r+0x90>
 800ec2c:	4638      	mov	r0, r7
 800ec2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec30:	4b0a      	ldr	r3, [pc, #40]	; (800ec5c <__swbuf_r+0x9c>)
 800ec32:	429c      	cmp	r4, r3
 800ec34:	d101      	bne.n	800ec3a <__swbuf_r+0x7a>
 800ec36:	68ac      	ldr	r4, [r5, #8]
 800ec38:	e7cf      	b.n	800ebda <__swbuf_r+0x1a>
 800ec3a:	4b09      	ldr	r3, [pc, #36]	; (800ec60 <__swbuf_r+0xa0>)
 800ec3c:	429c      	cmp	r4, r3
 800ec3e:	bf08      	it	eq
 800ec40:	68ec      	ldreq	r4, [r5, #12]
 800ec42:	e7ca      	b.n	800ebda <__swbuf_r+0x1a>
 800ec44:	4621      	mov	r1, r4
 800ec46:	4628      	mov	r0, r5
 800ec48:	f000 f81a 	bl	800ec80 <__swsetup_r>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d0cb      	beq.n	800ebe8 <__swbuf_r+0x28>
 800ec50:	f04f 37ff 	mov.w	r7, #4294967295
 800ec54:	e7ea      	b.n	800ec2c <__swbuf_r+0x6c>
 800ec56:	bf00      	nop
 800ec58:	0800f8fc 	.word	0x0800f8fc
 800ec5c:	0800f91c 	.word	0x0800f91c
 800ec60:	0800f8dc 	.word	0x0800f8dc

0800ec64 <__ascii_wctomb>:
 800ec64:	b149      	cbz	r1, 800ec7a <__ascii_wctomb+0x16>
 800ec66:	2aff      	cmp	r2, #255	; 0xff
 800ec68:	bf85      	ittet	hi
 800ec6a:	238a      	movhi	r3, #138	; 0x8a
 800ec6c:	6003      	strhi	r3, [r0, #0]
 800ec6e:	700a      	strbls	r2, [r1, #0]
 800ec70:	f04f 30ff 	movhi.w	r0, #4294967295
 800ec74:	bf98      	it	ls
 800ec76:	2001      	movls	r0, #1
 800ec78:	4770      	bx	lr
 800ec7a:	4608      	mov	r0, r1
 800ec7c:	4770      	bx	lr
	...

0800ec80 <__swsetup_r>:
 800ec80:	4b32      	ldr	r3, [pc, #200]	; (800ed4c <__swsetup_r+0xcc>)
 800ec82:	b570      	push	{r4, r5, r6, lr}
 800ec84:	681d      	ldr	r5, [r3, #0]
 800ec86:	4606      	mov	r6, r0
 800ec88:	460c      	mov	r4, r1
 800ec8a:	b125      	cbz	r5, 800ec96 <__swsetup_r+0x16>
 800ec8c:	69ab      	ldr	r3, [r5, #24]
 800ec8e:	b913      	cbnz	r3, 800ec96 <__swsetup_r+0x16>
 800ec90:	4628      	mov	r0, r5
 800ec92:	f000 f985 	bl	800efa0 <__sinit>
 800ec96:	4b2e      	ldr	r3, [pc, #184]	; (800ed50 <__swsetup_r+0xd0>)
 800ec98:	429c      	cmp	r4, r3
 800ec9a:	d10f      	bne.n	800ecbc <__swsetup_r+0x3c>
 800ec9c:	686c      	ldr	r4, [r5, #4]
 800ec9e:	89a3      	ldrh	r3, [r4, #12]
 800eca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eca4:	0719      	lsls	r1, r3, #28
 800eca6:	d42c      	bmi.n	800ed02 <__swsetup_r+0x82>
 800eca8:	06dd      	lsls	r5, r3, #27
 800ecaa:	d411      	bmi.n	800ecd0 <__swsetup_r+0x50>
 800ecac:	2309      	movs	r3, #9
 800ecae:	6033      	str	r3, [r6, #0]
 800ecb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ecb4:	81a3      	strh	r3, [r4, #12]
 800ecb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecba:	e03e      	b.n	800ed3a <__swsetup_r+0xba>
 800ecbc:	4b25      	ldr	r3, [pc, #148]	; (800ed54 <__swsetup_r+0xd4>)
 800ecbe:	429c      	cmp	r4, r3
 800ecc0:	d101      	bne.n	800ecc6 <__swsetup_r+0x46>
 800ecc2:	68ac      	ldr	r4, [r5, #8]
 800ecc4:	e7eb      	b.n	800ec9e <__swsetup_r+0x1e>
 800ecc6:	4b24      	ldr	r3, [pc, #144]	; (800ed58 <__swsetup_r+0xd8>)
 800ecc8:	429c      	cmp	r4, r3
 800ecca:	bf08      	it	eq
 800eccc:	68ec      	ldreq	r4, [r5, #12]
 800ecce:	e7e6      	b.n	800ec9e <__swsetup_r+0x1e>
 800ecd0:	0758      	lsls	r0, r3, #29
 800ecd2:	d512      	bpl.n	800ecfa <__swsetup_r+0x7a>
 800ecd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecd6:	b141      	cbz	r1, 800ecea <__swsetup_r+0x6a>
 800ecd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecdc:	4299      	cmp	r1, r3
 800ecde:	d002      	beq.n	800ece6 <__swsetup_r+0x66>
 800ece0:	4630      	mov	r0, r6
 800ece2:	f7ff fd0b 	bl	800e6fc <_free_r>
 800ece6:	2300      	movs	r3, #0
 800ece8:	6363      	str	r3, [r4, #52]	; 0x34
 800ecea:	89a3      	ldrh	r3, [r4, #12]
 800ecec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ecf0:	81a3      	strh	r3, [r4, #12]
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	6063      	str	r3, [r4, #4]
 800ecf6:	6923      	ldr	r3, [r4, #16]
 800ecf8:	6023      	str	r3, [r4, #0]
 800ecfa:	89a3      	ldrh	r3, [r4, #12]
 800ecfc:	f043 0308 	orr.w	r3, r3, #8
 800ed00:	81a3      	strh	r3, [r4, #12]
 800ed02:	6923      	ldr	r3, [r4, #16]
 800ed04:	b94b      	cbnz	r3, 800ed1a <__swsetup_r+0x9a>
 800ed06:	89a3      	ldrh	r3, [r4, #12]
 800ed08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ed0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed10:	d003      	beq.n	800ed1a <__swsetup_r+0x9a>
 800ed12:	4621      	mov	r1, r4
 800ed14:	4630      	mov	r0, r6
 800ed16:	f000 fa07 	bl	800f128 <__smakebuf_r>
 800ed1a:	89a0      	ldrh	r0, [r4, #12]
 800ed1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed20:	f010 0301 	ands.w	r3, r0, #1
 800ed24:	d00a      	beq.n	800ed3c <__swsetup_r+0xbc>
 800ed26:	2300      	movs	r3, #0
 800ed28:	60a3      	str	r3, [r4, #8]
 800ed2a:	6963      	ldr	r3, [r4, #20]
 800ed2c:	425b      	negs	r3, r3
 800ed2e:	61a3      	str	r3, [r4, #24]
 800ed30:	6923      	ldr	r3, [r4, #16]
 800ed32:	b943      	cbnz	r3, 800ed46 <__swsetup_r+0xc6>
 800ed34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed38:	d1ba      	bne.n	800ecb0 <__swsetup_r+0x30>
 800ed3a:	bd70      	pop	{r4, r5, r6, pc}
 800ed3c:	0781      	lsls	r1, r0, #30
 800ed3e:	bf58      	it	pl
 800ed40:	6963      	ldrpl	r3, [r4, #20]
 800ed42:	60a3      	str	r3, [r4, #8]
 800ed44:	e7f4      	b.n	800ed30 <__swsetup_r+0xb0>
 800ed46:	2000      	movs	r0, #0
 800ed48:	e7f7      	b.n	800ed3a <__swsetup_r+0xba>
 800ed4a:	bf00      	nop
 800ed4c:	24000038 	.word	0x24000038
 800ed50:	0800f8fc 	.word	0x0800f8fc
 800ed54:	0800f91c 	.word	0x0800f91c
 800ed58:	0800f8dc 	.word	0x0800f8dc

0800ed5c <abort>:
 800ed5c:	b508      	push	{r3, lr}
 800ed5e:	2006      	movs	r0, #6
 800ed60:	f000 fa4a 	bl	800f1f8 <raise>
 800ed64:	2001      	movs	r0, #1
 800ed66:	f7f4 fd4b 	bl	8003800 <_exit>
	...

0800ed6c <__sflush_r>:
 800ed6c:	898a      	ldrh	r2, [r1, #12]
 800ed6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed72:	4605      	mov	r5, r0
 800ed74:	0710      	lsls	r0, r2, #28
 800ed76:	460c      	mov	r4, r1
 800ed78:	d458      	bmi.n	800ee2c <__sflush_r+0xc0>
 800ed7a:	684b      	ldr	r3, [r1, #4]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	dc05      	bgt.n	800ed8c <__sflush_r+0x20>
 800ed80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	dc02      	bgt.n	800ed8c <__sflush_r+0x20>
 800ed86:	2000      	movs	r0, #0
 800ed88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed8e:	2e00      	cmp	r6, #0
 800ed90:	d0f9      	beq.n	800ed86 <__sflush_r+0x1a>
 800ed92:	2300      	movs	r3, #0
 800ed94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ed98:	682f      	ldr	r7, [r5, #0]
 800ed9a:	602b      	str	r3, [r5, #0]
 800ed9c:	d032      	beq.n	800ee04 <__sflush_r+0x98>
 800ed9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eda0:	89a3      	ldrh	r3, [r4, #12]
 800eda2:	075a      	lsls	r2, r3, #29
 800eda4:	d505      	bpl.n	800edb2 <__sflush_r+0x46>
 800eda6:	6863      	ldr	r3, [r4, #4]
 800eda8:	1ac0      	subs	r0, r0, r3
 800edaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800edac:	b10b      	cbz	r3, 800edb2 <__sflush_r+0x46>
 800edae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800edb0:	1ac0      	subs	r0, r0, r3
 800edb2:	2300      	movs	r3, #0
 800edb4:	4602      	mov	r2, r0
 800edb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800edb8:	6a21      	ldr	r1, [r4, #32]
 800edba:	4628      	mov	r0, r5
 800edbc:	47b0      	blx	r6
 800edbe:	1c43      	adds	r3, r0, #1
 800edc0:	89a3      	ldrh	r3, [r4, #12]
 800edc2:	d106      	bne.n	800edd2 <__sflush_r+0x66>
 800edc4:	6829      	ldr	r1, [r5, #0]
 800edc6:	291d      	cmp	r1, #29
 800edc8:	d82c      	bhi.n	800ee24 <__sflush_r+0xb8>
 800edca:	4a2a      	ldr	r2, [pc, #168]	; (800ee74 <__sflush_r+0x108>)
 800edcc:	40ca      	lsrs	r2, r1
 800edce:	07d6      	lsls	r6, r2, #31
 800edd0:	d528      	bpl.n	800ee24 <__sflush_r+0xb8>
 800edd2:	2200      	movs	r2, #0
 800edd4:	6062      	str	r2, [r4, #4]
 800edd6:	04d9      	lsls	r1, r3, #19
 800edd8:	6922      	ldr	r2, [r4, #16]
 800edda:	6022      	str	r2, [r4, #0]
 800eddc:	d504      	bpl.n	800ede8 <__sflush_r+0x7c>
 800edde:	1c42      	adds	r2, r0, #1
 800ede0:	d101      	bne.n	800ede6 <__sflush_r+0x7a>
 800ede2:	682b      	ldr	r3, [r5, #0]
 800ede4:	b903      	cbnz	r3, 800ede8 <__sflush_r+0x7c>
 800ede6:	6560      	str	r0, [r4, #84]	; 0x54
 800ede8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edea:	602f      	str	r7, [r5, #0]
 800edec:	2900      	cmp	r1, #0
 800edee:	d0ca      	beq.n	800ed86 <__sflush_r+0x1a>
 800edf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edf4:	4299      	cmp	r1, r3
 800edf6:	d002      	beq.n	800edfe <__sflush_r+0x92>
 800edf8:	4628      	mov	r0, r5
 800edfa:	f7ff fc7f 	bl	800e6fc <_free_r>
 800edfe:	2000      	movs	r0, #0
 800ee00:	6360      	str	r0, [r4, #52]	; 0x34
 800ee02:	e7c1      	b.n	800ed88 <__sflush_r+0x1c>
 800ee04:	6a21      	ldr	r1, [r4, #32]
 800ee06:	2301      	movs	r3, #1
 800ee08:	4628      	mov	r0, r5
 800ee0a:	47b0      	blx	r6
 800ee0c:	1c41      	adds	r1, r0, #1
 800ee0e:	d1c7      	bne.n	800eda0 <__sflush_r+0x34>
 800ee10:	682b      	ldr	r3, [r5, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d0c4      	beq.n	800eda0 <__sflush_r+0x34>
 800ee16:	2b1d      	cmp	r3, #29
 800ee18:	d001      	beq.n	800ee1e <__sflush_r+0xb2>
 800ee1a:	2b16      	cmp	r3, #22
 800ee1c:	d101      	bne.n	800ee22 <__sflush_r+0xb6>
 800ee1e:	602f      	str	r7, [r5, #0]
 800ee20:	e7b1      	b.n	800ed86 <__sflush_r+0x1a>
 800ee22:	89a3      	ldrh	r3, [r4, #12]
 800ee24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee28:	81a3      	strh	r3, [r4, #12]
 800ee2a:	e7ad      	b.n	800ed88 <__sflush_r+0x1c>
 800ee2c:	690f      	ldr	r7, [r1, #16]
 800ee2e:	2f00      	cmp	r7, #0
 800ee30:	d0a9      	beq.n	800ed86 <__sflush_r+0x1a>
 800ee32:	0793      	lsls	r3, r2, #30
 800ee34:	680e      	ldr	r6, [r1, #0]
 800ee36:	bf08      	it	eq
 800ee38:	694b      	ldreq	r3, [r1, #20]
 800ee3a:	600f      	str	r7, [r1, #0]
 800ee3c:	bf18      	it	ne
 800ee3e:	2300      	movne	r3, #0
 800ee40:	eba6 0807 	sub.w	r8, r6, r7
 800ee44:	608b      	str	r3, [r1, #8]
 800ee46:	f1b8 0f00 	cmp.w	r8, #0
 800ee4a:	dd9c      	ble.n	800ed86 <__sflush_r+0x1a>
 800ee4c:	6a21      	ldr	r1, [r4, #32]
 800ee4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee50:	4643      	mov	r3, r8
 800ee52:	463a      	mov	r2, r7
 800ee54:	4628      	mov	r0, r5
 800ee56:	47b0      	blx	r6
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	dc06      	bgt.n	800ee6a <__sflush_r+0xfe>
 800ee5c:	89a3      	ldrh	r3, [r4, #12]
 800ee5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee62:	81a3      	strh	r3, [r4, #12]
 800ee64:	f04f 30ff 	mov.w	r0, #4294967295
 800ee68:	e78e      	b.n	800ed88 <__sflush_r+0x1c>
 800ee6a:	4407      	add	r7, r0
 800ee6c:	eba8 0800 	sub.w	r8, r8, r0
 800ee70:	e7e9      	b.n	800ee46 <__sflush_r+0xda>
 800ee72:	bf00      	nop
 800ee74:	20400001 	.word	0x20400001

0800ee78 <_fflush_r>:
 800ee78:	b538      	push	{r3, r4, r5, lr}
 800ee7a:	690b      	ldr	r3, [r1, #16]
 800ee7c:	4605      	mov	r5, r0
 800ee7e:	460c      	mov	r4, r1
 800ee80:	b913      	cbnz	r3, 800ee88 <_fflush_r+0x10>
 800ee82:	2500      	movs	r5, #0
 800ee84:	4628      	mov	r0, r5
 800ee86:	bd38      	pop	{r3, r4, r5, pc}
 800ee88:	b118      	cbz	r0, 800ee92 <_fflush_r+0x1a>
 800ee8a:	6983      	ldr	r3, [r0, #24]
 800ee8c:	b90b      	cbnz	r3, 800ee92 <_fflush_r+0x1a>
 800ee8e:	f000 f887 	bl	800efa0 <__sinit>
 800ee92:	4b14      	ldr	r3, [pc, #80]	; (800eee4 <_fflush_r+0x6c>)
 800ee94:	429c      	cmp	r4, r3
 800ee96:	d11b      	bne.n	800eed0 <_fflush_r+0x58>
 800ee98:	686c      	ldr	r4, [r5, #4]
 800ee9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d0ef      	beq.n	800ee82 <_fflush_r+0xa>
 800eea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eea4:	07d0      	lsls	r0, r2, #31
 800eea6:	d404      	bmi.n	800eeb2 <_fflush_r+0x3a>
 800eea8:	0599      	lsls	r1, r3, #22
 800eeaa:	d402      	bmi.n	800eeb2 <_fflush_r+0x3a>
 800eeac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eeae:	f000 f915 	bl	800f0dc <__retarget_lock_acquire_recursive>
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	4621      	mov	r1, r4
 800eeb6:	f7ff ff59 	bl	800ed6c <__sflush_r>
 800eeba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eebc:	07da      	lsls	r2, r3, #31
 800eebe:	4605      	mov	r5, r0
 800eec0:	d4e0      	bmi.n	800ee84 <_fflush_r+0xc>
 800eec2:	89a3      	ldrh	r3, [r4, #12]
 800eec4:	059b      	lsls	r3, r3, #22
 800eec6:	d4dd      	bmi.n	800ee84 <_fflush_r+0xc>
 800eec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eeca:	f000 f908 	bl	800f0de <__retarget_lock_release_recursive>
 800eece:	e7d9      	b.n	800ee84 <_fflush_r+0xc>
 800eed0:	4b05      	ldr	r3, [pc, #20]	; (800eee8 <_fflush_r+0x70>)
 800eed2:	429c      	cmp	r4, r3
 800eed4:	d101      	bne.n	800eeda <_fflush_r+0x62>
 800eed6:	68ac      	ldr	r4, [r5, #8]
 800eed8:	e7df      	b.n	800ee9a <_fflush_r+0x22>
 800eeda:	4b04      	ldr	r3, [pc, #16]	; (800eeec <_fflush_r+0x74>)
 800eedc:	429c      	cmp	r4, r3
 800eede:	bf08      	it	eq
 800eee0:	68ec      	ldreq	r4, [r5, #12]
 800eee2:	e7da      	b.n	800ee9a <_fflush_r+0x22>
 800eee4:	0800f8fc 	.word	0x0800f8fc
 800eee8:	0800f91c 	.word	0x0800f91c
 800eeec:	0800f8dc 	.word	0x0800f8dc

0800eef0 <std>:
 800eef0:	2300      	movs	r3, #0
 800eef2:	b510      	push	{r4, lr}
 800eef4:	4604      	mov	r4, r0
 800eef6:	e9c0 3300 	strd	r3, r3, [r0]
 800eefa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eefe:	6083      	str	r3, [r0, #8]
 800ef00:	8181      	strh	r1, [r0, #12]
 800ef02:	6643      	str	r3, [r0, #100]	; 0x64
 800ef04:	81c2      	strh	r2, [r0, #14]
 800ef06:	6183      	str	r3, [r0, #24]
 800ef08:	4619      	mov	r1, r3
 800ef0a:	2208      	movs	r2, #8
 800ef0c:	305c      	adds	r0, #92	; 0x5c
 800ef0e:	f7fd fdf3 	bl	800caf8 <memset>
 800ef12:	4b05      	ldr	r3, [pc, #20]	; (800ef28 <std+0x38>)
 800ef14:	6263      	str	r3, [r4, #36]	; 0x24
 800ef16:	4b05      	ldr	r3, [pc, #20]	; (800ef2c <std+0x3c>)
 800ef18:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef1a:	4b05      	ldr	r3, [pc, #20]	; (800ef30 <std+0x40>)
 800ef1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ef1e:	4b05      	ldr	r3, [pc, #20]	; (800ef34 <std+0x44>)
 800ef20:	6224      	str	r4, [r4, #32]
 800ef22:	6323      	str	r3, [r4, #48]	; 0x30
 800ef24:	bd10      	pop	{r4, pc}
 800ef26:	bf00      	nop
 800ef28:	0800f231 	.word	0x0800f231
 800ef2c:	0800f253 	.word	0x0800f253
 800ef30:	0800f28b 	.word	0x0800f28b
 800ef34:	0800f2af 	.word	0x0800f2af

0800ef38 <_cleanup_r>:
 800ef38:	4901      	ldr	r1, [pc, #4]	; (800ef40 <_cleanup_r+0x8>)
 800ef3a:	f000 b8af 	b.w	800f09c <_fwalk_reent>
 800ef3e:	bf00      	nop
 800ef40:	0800ee79 	.word	0x0800ee79

0800ef44 <__sfmoreglue>:
 800ef44:	b570      	push	{r4, r5, r6, lr}
 800ef46:	1e4a      	subs	r2, r1, #1
 800ef48:	2568      	movs	r5, #104	; 0x68
 800ef4a:	4355      	muls	r5, r2
 800ef4c:	460e      	mov	r6, r1
 800ef4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ef52:	f7ff fc23 	bl	800e79c <_malloc_r>
 800ef56:	4604      	mov	r4, r0
 800ef58:	b140      	cbz	r0, 800ef6c <__sfmoreglue+0x28>
 800ef5a:	2100      	movs	r1, #0
 800ef5c:	e9c0 1600 	strd	r1, r6, [r0]
 800ef60:	300c      	adds	r0, #12
 800ef62:	60a0      	str	r0, [r4, #8]
 800ef64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ef68:	f7fd fdc6 	bl	800caf8 <memset>
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	bd70      	pop	{r4, r5, r6, pc}

0800ef70 <__sfp_lock_acquire>:
 800ef70:	4801      	ldr	r0, [pc, #4]	; (800ef78 <__sfp_lock_acquire+0x8>)
 800ef72:	f000 b8b3 	b.w	800f0dc <__retarget_lock_acquire_recursive>
 800ef76:	bf00      	nop
 800ef78:	24000b38 	.word	0x24000b38

0800ef7c <__sfp_lock_release>:
 800ef7c:	4801      	ldr	r0, [pc, #4]	; (800ef84 <__sfp_lock_release+0x8>)
 800ef7e:	f000 b8ae 	b.w	800f0de <__retarget_lock_release_recursive>
 800ef82:	bf00      	nop
 800ef84:	24000b38 	.word	0x24000b38

0800ef88 <__sinit_lock_acquire>:
 800ef88:	4801      	ldr	r0, [pc, #4]	; (800ef90 <__sinit_lock_acquire+0x8>)
 800ef8a:	f000 b8a7 	b.w	800f0dc <__retarget_lock_acquire_recursive>
 800ef8e:	bf00      	nop
 800ef90:	24000b33 	.word	0x24000b33

0800ef94 <__sinit_lock_release>:
 800ef94:	4801      	ldr	r0, [pc, #4]	; (800ef9c <__sinit_lock_release+0x8>)
 800ef96:	f000 b8a2 	b.w	800f0de <__retarget_lock_release_recursive>
 800ef9a:	bf00      	nop
 800ef9c:	24000b33 	.word	0x24000b33

0800efa0 <__sinit>:
 800efa0:	b510      	push	{r4, lr}
 800efa2:	4604      	mov	r4, r0
 800efa4:	f7ff fff0 	bl	800ef88 <__sinit_lock_acquire>
 800efa8:	69a3      	ldr	r3, [r4, #24]
 800efaa:	b11b      	cbz	r3, 800efb4 <__sinit+0x14>
 800efac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efb0:	f7ff bff0 	b.w	800ef94 <__sinit_lock_release>
 800efb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800efb8:	6523      	str	r3, [r4, #80]	; 0x50
 800efba:	4b13      	ldr	r3, [pc, #76]	; (800f008 <__sinit+0x68>)
 800efbc:	4a13      	ldr	r2, [pc, #76]	; (800f00c <__sinit+0x6c>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	62a2      	str	r2, [r4, #40]	; 0x28
 800efc2:	42a3      	cmp	r3, r4
 800efc4:	bf04      	itt	eq
 800efc6:	2301      	moveq	r3, #1
 800efc8:	61a3      	streq	r3, [r4, #24]
 800efca:	4620      	mov	r0, r4
 800efcc:	f000 f820 	bl	800f010 <__sfp>
 800efd0:	6060      	str	r0, [r4, #4]
 800efd2:	4620      	mov	r0, r4
 800efd4:	f000 f81c 	bl	800f010 <__sfp>
 800efd8:	60a0      	str	r0, [r4, #8]
 800efda:	4620      	mov	r0, r4
 800efdc:	f000 f818 	bl	800f010 <__sfp>
 800efe0:	2200      	movs	r2, #0
 800efe2:	60e0      	str	r0, [r4, #12]
 800efe4:	2104      	movs	r1, #4
 800efe6:	6860      	ldr	r0, [r4, #4]
 800efe8:	f7ff ff82 	bl	800eef0 <std>
 800efec:	68a0      	ldr	r0, [r4, #8]
 800efee:	2201      	movs	r2, #1
 800eff0:	2109      	movs	r1, #9
 800eff2:	f7ff ff7d 	bl	800eef0 <std>
 800eff6:	68e0      	ldr	r0, [r4, #12]
 800eff8:	2202      	movs	r2, #2
 800effa:	2112      	movs	r1, #18
 800effc:	f7ff ff78 	bl	800eef0 <std>
 800f000:	2301      	movs	r3, #1
 800f002:	61a3      	str	r3, [r4, #24]
 800f004:	e7d2      	b.n	800efac <__sinit+0xc>
 800f006:	bf00      	nop
 800f008:	0800f558 	.word	0x0800f558
 800f00c:	0800ef39 	.word	0x0800ef39

0800f010 <__sfp>:
 800f010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f012:	4607      	mov	r7, r0
 800f014:	f7ff ffac 	bl	800ef70 <__sfp_lock_acquire>
 800f018:	4b1e      	ldr	r3, [pc, #120]	; (800f094 <__sfp+0x84>)
 800f01a:	681e      	ldr	r6, [r3, #0]
 800f01c:	69b3      	ldr	r3, [r6, #24]
 800f01e:	b913      	cbnz	r3, 800f026 <__sfp+0x16>
 800f020:	4630      	mov	r0, r6
 800f022:	f7ff ffbd 	bl	800efa0 <__sinit>
 800f026:	3648      	adds	r6, #72	; 0x48
 800f028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f02c:	3b01      	subs	r3, #1
 800f02e:	d503      	bpl.n	800f038 <__sfp+0x28>
 800f030:	6833      	ldr	r3, [r6, #0]
 800f032:	b30b      	cbz	r3, 800f078 <__sfp+0x68>
 800f034:	6836      	ldr	r6, [r6, #0]
 800f036:	e7f7      	b.n	800f028 <__sfp+0x18>
 800f038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f03c:	b9d5      	cbnz	r5, 800f074 <__sfp+0x64>
 800f03e:	4b16      	ldr	r3, [pc, #88]	; (800f098 <__sfp+0x88>)
 800f040:	60e3      	str	r3, [r4, #12]
 800f042:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f046:	6665      	str	r5, [r4, #100]	; 0x64
 800f048:	f000 f847 	bl	800f0da <__retarget_lock_init_recursive>
 800f04c:	f7ff ff96 	bl	800ef7c <__sfp_lock_release>
 800f050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f058:	6025      	str	r5, [r4, #0]
 800f05a:	61a5      	str	r5, [r4, #24]
 800f05c:	2208      	movs	r2, #8
 800f05e:	4629      	mov	r1, r5
 800f060:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f064:	f7fd fd48 	bl	800caf8 <memset>
 800f068:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f06c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f070:	4620      	mov	r0, r4
 800f072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f074:	3468      	adds	r4, #104	; 0x68
 800f076:	e7d9      	b.n	800f02c <__sfp+0x1c>
 800f078:	2104      	movs	r1, #4
 800f07a:	4638      	mov	r0, r7
 800f07c:	f7ff ff62 	bl	800ef44 <__sfmoreglue>
 800f080:	4604      	mov	r4, r0
 800f082:	6030      	str	r0, [r6, #0]
 800f084:	2800      	cmp	r0, #0
 800f086:	d1d5      	bne.n	800f034 <__sfp+0x24>
 800f088:	f7ff ff78 	bl	800ef7c <__sfp_lock_release>
 800f08c:	230c      	movs	r3, #12
 800f08e:	603b      	str	r3, [r7, #0]
 800f090:	e7ee      	b.n	800f070 <__sfp+0x60>
 800f092:	bf00      	nop
 800f094:	0800f558 	.word	0x0800f558
 800f098:	ffff0001 	.word	0xffff0001

0800f09c <_fwalk_reent>:
 800f09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0a0:	4606      	mov	r6, r0
 800f0a2:	4688      	mov	r8, r1
 800f0a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f0a8:	2700      	movs	r7, #0
 800f0aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0ae:	f1b9 0901 	subs.w	r9, r9, #1
 800f0b2:	d505      	bpl.n	800f0c0 <_fwalk_reent+0x24>
 800f0b4:	6824      	ldr	r4, [r4, #0]
 800f0b6:	2c00      	cmp	r4, #0
 800f0b8:	d1f7      	bne.n	800f0aa <_fwalk_reent+0xe>
 800f0ba:	4638      	mov	r0, r7
 800f0bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0c0:	89ab      	ldrh	r3, [r5, #12]
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	d907      	bls.n	800f0d6 <_fwalk_reent+0x3a>
 800f0c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	d003      	beq.n	800f0d6 <_fwalk_reent+0x3a>
 800f0ce:	4629      	mov	r1, r5
 800f0d0:	4630      	mov	r0, r6
 800f0d2:	47c0      	blx	r8
 800f0d4:	4307      	orrs	r7, r0
 800f0d6:	3568      	adds	r5, #104	; 0x68
 800f0d8:	e7e9      	b.n	800f0ae <_fwalk_reent+0x12>

0800f0da <__retarget_lock_init_recursive>:
 800f0da:	4770      	bx	lr

0800f0dc <__retarget_lock_acquire_recursive>:
 800f0dc:	4770      	bx	lr

0800f0de <__retarget_lock_release_recursive>:
 800f0de:	4770      	bx	lr

0800f0e0 <__swhatbuf_r>:
 800f0e0:	b570      	push	{r4, r5, r6, lr}
 800f0e2:	460e      	mov	r6, r1
 800f0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0e8:	2900      	cmp	r1, #0
 800f0ea:	b096      	sub	sp, #88	; 0x58
 800f0ec:	4614      	mov	r4, r2
 800f0ee:	461d      	mov	r5, r3
 800f0f0:	da07      	bge.n	800f102 <__swhatbuf_r+0x22>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	602b      	str	r3, [r5, #0]
 800f0f6:	89b3      	ldrh	r3, [r6, #12]
 800f0f8:	061a      	lsls	r2, r3, #24
 800f0fa:	d410      	bmi.n	800f11e <__swhatbuf_r+0x3e>
 800f0fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f100:	e00e      	b.n	800f120 <__swhatbuf_r+0x40>
 800f102:	466a      	mov	r2, sp
 800f104:	f000 f8fa 	bl	800f2fc <_fstat_r>
 800f108:	2800      	cmp	r0, #0
 800f10a:	dbf2      	blt.n	800f0f2 <__swhatbuf_r+0x12>
 800f10c:	9a01      	ldr	r2, [sp, #4]
 800f10e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f112:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f116:	425a      	negs	r2, r3
 800f118:	415a      	adcs	r2, r3
 800f11a:	602a      	str	r2, [r5, #0]
 800f11c:	e7ee      	b.n	800f0fc <__swhatbuf_r+0x1c>
 800f11e:	2340      	movs	r3, #64	; 0x40
 800f120:	2000      	movs	r0, #0
 800f122:	6023      	str	r3, [r4, #0]
 800f124:	b016      	add	sp, #88	; 0x58
 800f126:	bd70      	pop	{r4, r5, r6, pc}

0800f128 <__smakebuf_r>:
 800f128:	898b      	ldrh	r3, [r1, #12]
 800f12a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f12c:	079d      	lsls	r5, r3, #30
 800f12e:	4606      	mov	r6, r0
 800f130:	460c      	mov	r4, r1
 800f132:	d507      	bpl.n	800f144 <__smakebuf_r+0x1c>
 800f134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f138:	6023      	str	r3, [r4, #0]
 800f13a:	6123      	str	r3, [r4, #16]
 800f13c:	2301      	movs	r3, #1
 800f13e:	6163      	str	r3, [r4, #20]
 800f140:	b002      	add	sp, #8
 800f142:	bd70      	pop	{r4, r5, r6, pc}
 800f144:	ab01      	add	r3, sp, #4
 800f146:	466a      	mov	r2, sp
 800f148:	f7ff ffca 	bl	800f0e0 <__swhatbuf_r>
 800f14c:	9900      	ldr	r1, [sp, #0]
 800f14e:	4605      	mov	r5, r0
 800f150:	4630      	mov	r0, r6
 800f152:	f7ff fb23 	bl	800e79c <_malloc_r>
 800f156:	b948      	cbnz	r0, 800f16c <__smakebuf_r+0x44>
 800f158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f15c:	059a      	lsls	r2, r3, #22
 800f15e:	d4ef      	bmi.n	800f140 <__smakebuf_r+0x18>
 800f160:	f023 0303 	bic.w	r3, r3, #3
 800f164:	f043 0302 	orr.w	r3, r3, #2
 800f168:	81a3      	strh	r3, [r4, #12]
 800f16a:	e7e3      	b.n	800f134 <__smakebuf_r+0xc>
 800f16c:	4b0d      	ldr	r3, [pc, #52]	; (800f1a4 <__smakebuf_r+0x7c>)
 800f16e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f170:	89a3      	ldrh	r3, [r4, #12]
 800f172:	6020      	str	r0, [r4, #0]
 800f174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f178:	81a3      	strh	r3, [r4, #12]
 800f17a:	9b00      	ldr	r3, [sp, #0]
 800f17c:	6163      	str	r3, [r4, #20]
 800f17e:	9b01      	ldr	r3, [sp, #4]
 800f180:	6120      	str	r0, [r4, #16]
 800f182:	b15b      	cbz	r3, 800f19c <__smakebuf_r+0x74>
 800f184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f188:	4630      	mov	r0, r6
 800f18a:	f000 f8c9 	bl	800f320 <_isatty_r>
 800f18e:	b128      	cbz	r0, 800f19c <__smakebuf_r+0x74>
 800f190:	89a3      	ldrh	r3, [r4, #12]
 800f192:	f023 0303 	bic.w	r3, r3, #3
 800f196:	f043 0301 	orr.w	r3, r3, #1
 800f19a:	81a3      	strh	r3, [r4, #12]
 800f19c:	89a0      	ldrh	r0, [r4, #12]
 800f19e:	4305      	orrs	r5, r0
 800f1a0:	81a5      	strh	r5, [r4, #12]
 800f1a2:	e7cd      	b.n	800f140 <__smakebuf_r+0x18>
 800f1a4:	0800ef39 	.word	0x0800ef39

0800f1a8 <_raise_r>:
 800f1a8:	291f      	cmp	r1, #31
 800f1aa:	b538      	push	{r3, r4, r5, lr}
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	460d      	mov	r5, r1
 800f1b0:	d904      	bls.n	800f1bc <_raise_r+0x14>
 800f1b2:	2316      	movs	r3, #22
 800f1b4:	6003      	str	r3, [r0, #0]
 800f1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ba:	bd38      	pop	{r3, r4, r5, pc}
 800f1bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f1be:	b112      	cbz	r2, 800f1c6 <_raise_r+0x1e>
 800f1c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f1c4:	b94b      	cbnz	r3, 800f1da <_raise_r+0x32>
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f000 f830 	bl	800f22c <_getpid_r>
 800f1cc:	462a      	mov	r2, r5
 800f1ce:	4601      	mov	r1, r0
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1d6:	f000 b817 	b.w	800f208 <_kill_r>
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	d00a      	beq.n	800f1f4 <_raise_r+0x4c>
 800f1de:	1c59      	adds	r1, r3, #1
 800f1e0:	d103      	bne.n	800f1ea <_raise_r+0x42>
 800f1e2:	2316      	movs	r3, #22
 800f1e4:	6003      	str	r3, [r0, #0]
 800f1e6:	2001      	movs	r0, #1
 800f1e8:	e7e7      	b.n	800f1ba <_raise_r+0x12>
 800f1ea:	2400      	movs	r4, #0
 800f1ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f1f0:	4628      	mov	r0, r5
 800f1f2:	4798      	blx	r3
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	e7e0      	b.n	800f1ba <_raise_r+0x12>

0800f1f8 <raise>:
 800f1f8:	4b02      	ldr	r3, [pc, #8]	; (800f204 <raise+0xc>)
 800f1fa:	4601      	mov	r1, r0
 800f1fc:	6818      	ldr	r0, [r3, #0]
 800f1fe:	f7ff bfd3 	b.w	800f1a8 <_raise_r>
 800f202:	bf00      	nop
 800f204:	24000038 	.word	0x24000038

0800f208 <_kill_r>:
 800f208:	b538      	push	{r3, r4, r5, lr}
 800f20a:	4d07      	ldr	r5, [pc, #28]	; (800f228 <_kill_r+0x20>)
 800f20c:	2300      	movs	r3, #0
 800f20e:	4604      	mov	r4, r0
 800f210:	4608      	mov	r0, r1
 800f212:	4611      	mov	r1, r2
 800f214:	602b      	str	r3, [r5, #0]
 800f216:	f7f4 fae3 	bl	80037e0 <_kill>
 800f21a:	1c43      	adds	r3, r0, #1
 800f21c:	d102      	bne.n	800f224 <_kill_r+0x1c>
 800f21e:	682b      	ldr	r3, [r5, #0]
 800f220:	b103      	cbz	r3, 800f224 <_kill_r+0x1c>
 800f222:	6023      	str	r3, [r4, #0]
 800f224:	bd38      	pop	{r3, r4, r5, pc}
 800f226:	bf00      	nop
 800f228:	24000b2c 	.word	0x24000b2c

0800f22c <_getpid_r>:
 800f22c:	f7f4 bad0 	b.w	80037d0 <_getpid>

0800f230 <__sread>:
 800f230:	b510      	push	{r4, lr}
 800f232:	460c      	mov	r4, r1
 800f234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f238:	f000 f894 	bl	800f364 <_read_r>
 800f23c:	2800      	cmp	r0, #0
 800f23e:	bfab      	itete	ge
 800f240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f242:	89a3      	ldrhlt	r3, [r4, #12]
 800f244:	181b      	addge	r3, r3, r0
 800f246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f24a:	bfac      	ite	ge
 800f24c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f24e:	81a3      	strhlt	r3, [r4, #12]
 800f250:	bd10      	pop	{r4, pc}

0800f252 <__swrite>:
 800f252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f256:	461f      	mov	r7, r3
 800f258:	898b      	ldrh	r3, [r1, #12]
 800f25a:	05db      	lsls	r3, r3, #23
 800f25c:	4605      	mov	r5, r0
 800f25e:	460c      	mov	r4, r1
 800f260:	4616      	mov	r6, r2
 800f262:	d505      	bpl.n	800f270 <__swrite+0x1e>
 800f264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f268:	2302      	movs	r3, #2
 800f26a:	2200      	movs	r2, #0
 800f26c:	f000 f868 	bl	800f340 <_lseek_r>
 800f270:	89a3      	ldrh	r3, [r4, #12]
 800f272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f27a:	81a3      	strh	r3, [r4, #12]
 800f27c:	4632      	mov	r2, r6
 800f27e:	463b      	mov	r3, r7
 800f280:	4628      	mov	r0, r5
 800f282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f286:	f000 b817 	b.w	800f2b8 <_write_r>

0800f28a <__sseek>:
 800f28a:	b510      	push	{r4, lr}
 800f28c:	460c      	mov	r4, r1
 800f28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f292:	f000 f855 	bl	800f340 <_lseek_r>
 800f296:	1c43      	adds	r3, r0, #1
 800f298:	89a3      	ldrh	r3, [r4, #12]
 800f29a:	bf15      	itete	ne
 800f29c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f29e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2a6:	81a3      	strheq	r3, [r4, #12]
 800f2a8:	bf18      	it	ne
 800f2aa:	81a3      	strhne	r3, [r4, #12]
 800f2ac:	bd10      	pop	{r4, pc}

0800f2ae <__sclose>:
 800f2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2b2:	f000 b813 	b.w	800f2dc <_close_r>
	...

0800f2b8 <_write_r>:
 800f2b8:	b538      	push	{r3, r4, r5, lr}
 800f2ba:	4d07      	ldr	r5, [pc, #28]	; (800f2d8 <_write_r+0x20>)
 800f2bc:	4604      	mov	r4, r0
 800f2be:	4608      	mov	r0, r1
 800f2c0:	4611      	mov	r1, r2
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	602a      	str	r2, [r5, #0]
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	f7f4 fac1 	bl	800384e <_write>
 800f2cc:	1c43      	adds	r3, r0, #1
 800f2ce:	d102      	bne.n	800f2d6 <_write_r+0x1e>
 800f2d0:	682b      	ldr	r3, [r5, #0]
 800f2d2:	b103      	cbz	r3, 800f2d6 <_write_r+0x1e>
 800f2d4:	6023      	str	r3, [r4, #0]
 800f2d6:	bd38      	pop	{r3, r4, r5, pc}
 800f2d8:	24000b2c 	.word	0x24000b2c

0800f2dc <_close_r>:
 800f2dc:	b538      	push	{r3, r4, r5, lr}
 800f2de:	4d06      	ldr	r5, [pc, #24]	; (800f2f8 <_close_r+0x1c>)
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	4608      	mov	r0, r1
 800f2e6:	602b      	str	r3, [r5, #0]
 800f2e8:	f7f4 facd 	bl	8003886 <_close>
 800f2ec:	1c43      	adds	r3, r0, #1
 800f2ee:	d102      	bne.n	800f2f6 <_close_r+0x1a>
 800f2f0:	682b      	ldr	r3, [r5, #0]
 800f2f2:	b103      	cbz	r3, 800f2f6 <_close_r+0x1a>
 800f2f4:	6023      	str	r3, [r4, #0]
 800f2f6:	bd38      	pop	{r3, r4, r5, pc}
 800f2f8:	24000b2c 	.word	0x24000b2c

0800f2fc <_fstat_r>:
 800f2fc:	b538      	push	{r3, r4, r5, lr}
 800f2fe:	4d07      	ldr	r5, [pc, #28]	; (800f31c <_fstat_r+0x20>)
 800f300:	2300      	movs	r3, #0
 800f302:	4604      	mov	r4, r0
 800f304:	4608      	mov	r0, r1
 800f306:	4611      	mov	r1, r2
 800f308:	602b      	str	r3, [r5, #0]
 800f30a:	f7f4 fac8 	bl	800389e <_fstat>
 800f30e:	1c43      	adds	r3, r0, #1
 800f310:	d102      	bne.n	800f318 <_fstat_r+0x1c>
 800f312:	682b      	ldr	r3, [r5, #0]
 800f314:	b103      	cbz	r3, 800f318 <_fstat_r+0x1c>
 800f316:	6023      	str	r3, [r4, #0]
 800f318:	bd38      	pop	{r3, r4, r5, pc}
 800f31a:	bf00      	nop
 800f31c:	24000b2c 	.word	0x24000b2c

0800f320 <_isatty_r>:
 800f320:	b538      	push	{r3, r4, r5, lr}
 800f322:	4d06      	ldr	r5, [pc, #24]	; (800f33c <_isatty_r+0x1c>)
 800f324:	2300      	movs	r3, #0
 800f326:	4604      	mov	r4, r0
 800f328:	4608      	mov	r0, r1
 800f32a:	602b      	str	r3, [r5, #0]
 800f32c:	f7f4 fac7 	bl	80038be <_isatty>
 800f330:	1c43      	adds	r3, r0, #1
 800f332:	d102      	bne.n	800f33a <_isatty_r+0x1a>
 800f334:	682b      	ldr	r3, [r5, #0]
 800f336:	b103      	cbz	r3, 800f33a <_isatty_r+0x1a>
 800f338:	6023      	str	r3, [r4, #0]
 800f33a:	bd38      	pop	{r3, r4, r5, pc}
 800f33c:	24000b2c 	.word	0x24000b2c

0800f340 <_lseek_r>:
 800f340:	b538      	push	{r3, r4, r5, lr}
 800f342:	4d07      	ldr	r5, [pc, #28]	; (800f360 <_lseek_r+0x20>)
 800f344:	4604      	mov	r4, r0
 800f346:	4608      	mov	r0, r1
 800f348:	4611      	mov	r1, r2
 800f34a:	2200      	movs	r2, #0
 800f34c:	602a      	str	r2, [r5, #0]
 800f34e:	461a      	mov	r2, r3
 800f350:	f7f4 fac0 	bl	80038d4 <_lseek>
 800f354:	1c43      	adds	r3, r0, #1
 800f356:	d102      	bne.n	800f35e <_lseek_r+0x1e>
 800f358:	682b      	ldr	r3, [r5, #0]
 800f35a:	b103      	cbz	r3, 800f35e <_lseek_r+0x1e>
 800f35c:	6023      	str	r3, [r4, #0]
 800f35e:	bd38      	pop	{r3, r4, r5, pc}
 800f360:	24000b2c 	.word	0x24000b2c

0800f364 <_read_r>:
 800f364:	b538      	push	{r3, r4, r5, lr}
 800f366:	4d07      	ldr	r5, [pc, #28]	; (800f384 <_read_r+0x20>)
 800f368:	4604      	mov	r4, r0
 800f36a:	4608      	mov	r0, r1
 800f36c:	4611      	mov	r1, r2
 800f36e:	2200      	movs	r2, #0
 800f370:	602a      	str	r2, [r5, #0]
 800f372:	461a      	mov	r2, r3
 800f374:	f7f4 fa4e 	bl	8003814 <_read>
 800f378:	1c43      	adds	r3, r0, #1
 800f37a:	d102      	bne.n	800f382 <_read_r+0x1e>
 800f37c:	682b      	ldr	r3, [r5, #0]
 800f37e:	b103      	cbz	r3, 800f382 <_read_r+0x1e>
 800f380:	6023      	str	r3, [r4, #0]
 800f382:	bd38      	pop	{r3, r4, r5, pc}
 800f384:	24000b2c 	.word	0x24000b2c

0800f388 <_init>:
 800f388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f38a:	bf00      	nop
 800f38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f38e:	bc08      	pop	{r3}
 800f390:	469e      	mov	lr, r3
 800f392:	4770      	bx	lr

0800f394 <_fini>:
 800f394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f396:	bf00      	nop
 800f398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f39a:	bc08      	pop	{r3}
 800f39c:	469e      	mov	lr, r3
 800f39e:	4770      	bx	lr
