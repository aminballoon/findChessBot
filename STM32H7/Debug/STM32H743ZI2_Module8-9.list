
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dee0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800e180  0800e180  0001e180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e5a4  0800e5a4  0001e5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800e5ac  0800e5ac  0001e5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0800e5b4  0800e5b4  0001e5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800e5bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000081c  240001e0  0800e79c  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240009fc  0800e79c  000209fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fcc5  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000445d  00000000  00000000  0004fed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001510  00000000  00000000  00054330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013d8  00000000  00000000  00055840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc28  00000000  00000000  00056c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d8a2  00000000  00000000  00093840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d027  00000000  00000000  000b10e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021e109  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066e8  00000000  00000000  0021e15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e168 	.word	0x0800e168

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800e168 	.word	0x0800e168

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address){
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21(){
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read(){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f009 fa8e 	bl	8009bfc <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f009 fb1b 	bl	8009d28 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	749a      	strb	r2, [r3, #18]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	74da      	strb	r2, [r3, #19]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:

HAL_StatusTypeDef AMT21::AMT21_Check_Value(){
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7c9b      	ldrb	r3, [r3, #18]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7cdb      	ldrb	r3, [r3, #19]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
{
	return this->raw_value;
}

int16_t AMT21::getAngPos180()
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
//	uint8_t iii =  (this->raw_value & 0x1FFF);
	return ((((this->raw_value & 0x2000) >> 13) * (-16383)) + (this->raw_value & 0x3FFF) );
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	039b      	lsls	r3, r3, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	4413      	add	r3, r2
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
//	return this->raw_value;
//	this->value =
//	return iii;
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	ed87 0a01 	vstr	s0, [r7, #4]
 8000838:	edd7 7a01 	vldr	s15, [r7, #4]
 800083c:	eef0 7ae7 	vabs.f32	s15, s15
 8000840:	eeb0 0a67 	vmov.f32	s0, s15
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	ed87 0a01 	vstr	s0, [r7, #4]
 8000858:	edd7 7a01 	vldr	s15, [r7, #4]
 800085c:	fef8 7a67 	vrinta.f32	s15, s15
 8000860:	eeb0 0a67 	vmov.f32	s0, s15
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000888:	619a      	str	r2, [r3, #24]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000890:	61da      	str	r2, [r3, #28]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	4a15      	ldr	r2, [pc, #84]	; (80008ec <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8000896:	621a      	str	r2, [r3, #32]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	22c7      	movs	r2, #199	; 0xc7
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 20.0f;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 80008ba:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 80008c0:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 80008c2:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80008f0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f000 f830 	bl	800092c <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	60da      	str	r2, [r3, #12]
}
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	41a00000 	.word	0x41a00000
 80008e8:	469c4000 	.word	0x469c4000
 80008ec:	43480000 	.word	0x43480000
 80008f0:	00000000 	.word	0x00000000

080008f4 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
}
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	4619      	mov	r1, r3
 800091c:	4610      	mov	r0, r2
 800091e:	f007 ff5d 	bl	80087dc <HAL_TIM_PWM_Start>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 800092c:	b580      	push	{r7, lr}
 800092e:	ed2d 8b02 	vpush	{d8}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	edd3 7a04 	vldr	s15, [r3, #16]
 8000948:	eeb0 0a67 	vmov.f32	s0, s15
 800094c:	f7ff ff6f 	bl	800082e <_ZSt4fabsf>
 8000950:	eeb0 7a40 	vmov.f32	s14, s0
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	edd3 7a05 	vldr	s15, [r3, #20]
 800095a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800095e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000962:	bf94      	ite	ls
 8000964:	2301      	movls	r3, #1
 8000966:	2300      	movhi	r3, #0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	e01b      	b.n	80009ae <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	edd3 7a04 	vldr	s15, [r3, #16]
 800097c:	eeb0 0a67 	vmov.f32	s0, s15
 8000980:	f7ff ff55 	bl	800082e <_ZSt4fabsf>
 8000984:	eeb0 7a40 	vmov.f32	s14, s0
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	edd3 7a06 	vldr	s15, [r3, #24]
 800098e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000996:	bfac      	ite	ge
 8000998:	2301      	movge	r3, #1
 800099a:	2300      	movlt	r3, #0
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d003      	beq.n	80009aa <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	e001      	b.n	80009ae <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	60fb      	str	r3, [r7, #12]

	if (this->frequency > 0.001f && this->frequency != 0.0f) {
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80009b4:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8000c74 <_ZN7Stepper19StepperSetFrequencyEf+0x348>
 80009b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c0:	f340 80e4 	ble.w	8000b8c <_ZN7Stepper19StepperSetFrequencyEf+0x260>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80009ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d2:	f000 80db 	beq.w	8000b8c <_ZN7Stepper19StepperSetFrequencyEf+0x260>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6898      	ldr	r0, [r3, #8]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	2201      	movs	r2, #1
 80009e2:	4619      	mov	r1, r3
 80009e4:	f005 f920 	bl	8005c28 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * f)) - 1U);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f0:	3301      	adds	r3, #1
 80009f2:	ee07 3a90 	vmov	s15, r3
 80009f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80009fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a02:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8000c78 <_ZN7Stepper19StepperSetFrequencyEf+0x34c>
 8000a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a12:	eeb0 0a67 	vmov.f32	s0, s15
 8000a16:	f7ff ff1a 	bl	800084e <_ZSt5roundf>
 8000a1a:	eef0 7a40 	vmov.f32	s15, s0
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a28:	ee17 2a90 	vmov	r2, s15
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d113      	bne.n	8000a5e <_ZN7Stepper19StepperSetFrequencyEf+0x132>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3e:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000a40:	085b      	lsrs	r3, r3, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 fa33 	bl	8000eae <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a48:	eeb0 7b40 	vmov.f64	d7, d0
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a56:	ee17 2a90 	vmov	r2, s15
 8000a5a:	635a      	str	r2, [r3, #52]	; 0x34
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a5c:	e1e8      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	d113      	bne.n	8000a8e <_ZN7Stepper19StepperSetFrequencyEf+0x162>
			this->stepper_htim->Instance->CCR2 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6e:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fa1b 	bl	8000eae <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a78:	eeb0 7b40 	vmov.f64	d7, d0
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a86:	ee17 2a90 	vmov	r2, s15
 8000a8a:	639a      	str	r2, [r3, #56]	; 0x38
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a8c:	e1d0      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b08      	cmp	r3, #8
 8000a94:	d113      	bne.n	8000abe <_ZN7Stepper19StepperSetFrequencyEf+0x192>
			this->stepper_htim->Instance->CCR3 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9e:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000aa0:	085b      	lsrs	r3, r3, #1
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fa03 	bl	8000eae <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000aa8:	eeb0 7b40 	vmov.f64	d7, d0
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ab6:	ee17 2a90 	vmov	r2, s15
 8000aba:	63da      	str	r2, [r3, #60]	; 0x3c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000abc:	e1b8      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	2b0c      	cmp	r3, #12
 8000ac4:	d113      	bne.n	8000aee <_ZN7Stepper19StepperSetFrequencyEf+0x1c2>
			this->stepper_htim->Instance->CCR4 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ace:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000ad0:	085b      	lsrs	r3, r3, #1
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f9eb 	bl	8000eae <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000ad8:	eeb0 7b40 	vmov.f64	d7, d0
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ae6:	ee17 2a90 	vmov	r2, s15
 8000aea:	641a      	str	r2, [r3, #64]	; 0x40
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000aec:	e1a0      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2b10      	cmp	r3, #16
 8000af4:	d113      	bne.n	8000b1e <_ZN7Stepper19StepperSetFrequencyEf+0x1f2>
			this->stepper_htim->Instance->CCR5 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f9d3 	bl	8000eae <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b08:	eeb0 7b40 	vmov.f64	d7, d0
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b16:	ee17 2a90 	vmov	r2, s15
 8000b1a:	659a      	str	r2, [r3, #88]	; 0x58
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000b1c:	e188      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b14      	cmp	r3, #20
 8000b24:	d113      	bne.n	8000b4e <_ZN7Stepper19StepperSetFrequencyEf+0x222>
			this->stepper_htim->Instance->CCR6 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2e:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000b30:	085b      	lsrs	r3, r3, #1
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f9bb 	bl	8000eae <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b38:	eeb0 7b40 	vmov.f64	d7, d0
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b46:	ee17 2a90 	vmov	r2, s15
 8000b4a:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000b4c:	e170      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else {
			this->stepper_htim->Instance->CCR1 = 0;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2200      	movs	r2, #0
 8000b56:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2200      	movs	r2, #0
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2200      	movs	r2, #0
 8000b88:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000b8a:	e151      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

	} else if (this->frequency < 0.001f && this->frequency != 0.0f) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b92:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000c74 <_ZN7Stepper19StepperSetFrequencyEf+0x348>
 8000b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9e:	f140 80ec 	bpl.w	8000d7a <_ZN7Stepper19StepperSetFrequencyEf+0x44e>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ba8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb0:	f000 80e3 	beq.w	8000d7a <_ZN7Stepper19StepperSetFrequencyEf+0x44e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6898      	ldr	r0, [r3, #8]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f005 f831 	bl	8005c28 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bce:	3301      	adds	r3, #1
 8000bd0:	ee07 3a90 	vmov	s15, r3
 8000bd4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000bd8:	ed97 0a03 	vldr	s0, [r7, #12]
 8000bdc:	f7ff fe27 	bl	800082e <_ZSt4fabsf>
 8000be0:	eef0 7a40 	vmov.f32	s15, s0
 8000be4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000be8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000c78 <_ZN7Stepper19StepperSetFrequencyEf+0x34c>
 8000bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfc:	f7ff fe27 	bl	800084e <_ZSt5roundf>
 8000c00:	eef0 7a40 	vmov.f32	s15, s0
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c0e:	ee17 2a90 	vmov	r2, s15
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d113      	bne.n	8000c44 <_ZN7Stepper19StepperSetFrequencyEf+0x318>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c24:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000c26:	085b      	lsrs	r3, r3, #1
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f940 	bl	8000eae <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c2e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c3c:	ee17 2a90 	vmov	r2, s15
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c42:	e0f5      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d117      	bne.n	8000c7c <_ZN7Stepper19StepperSetFrequencyEf+0x350>
			this->stepper_htim->Instance->CCR2 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c54:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000c56:	085b      	lsrs	r3, r3, #1
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 f928 	bl	8000eae <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c5e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c6c:	ee17 2a90 	vmov	r2, s15
 8000c70:	639a      	str	r2, [r3, #56]	; 0x38
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c72:	e0dd      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
 8000c74:	3a83126f 	.word	0x3a83126f
 8000c78:	4d64e1c0 	.word	0x4d64e1c0
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	d113      	bne.n	8000cac <_ZN7Stepper19StepperSetFrequencyEf+0x380>
			this->stepper_htim->Instance->CCR3 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000c8e:	085b      	lsrs	r3, r3, #1
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f90c 	bl	8000eae <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c96:	eeb0 7b40 	vmov.f64	d7, d0
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ca4:	ee17 2a90 	vmov	r2, s15
 8000ca8:	63da      	str	r2, [r3, #60]	; 0x3c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000caa:	e0c1      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b0c      	cmp	r3, #12
 8000cb2:	d113      	bne.n	8000cdc <_ZN7Stepper19StepperSetFrequencyEf+0x3b0>
			this->stepper_htim->Instance->CCR4 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000cbe:	085b      	lsrs	r3, r3, #1
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 f8f4 	bl	8000eae <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cc6:	eeb0 7b40 	vmov.f64	d7, d0
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cd4:	ee17 2a90 	vmov	r2, s15
 8000cd8:	641a      	str	r2, [r3, #64]	; 0x40
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000cda:	e0a9      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b10      	cmp	r3, #16
 8000ce2:	d113      	bne.n	8000d0c <_ZN7Stepper19StepperSetFrequencyEf+0x3e0>
			this->stepper_htim->Instance->CCR5 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cec:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000cee:	085b      	lsrs	r3, r3, #1
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f8dc 	bl	8000eae <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cf6:	eeb0 7b40 	vmov.f64	d7, d0
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d04:	ee17 2a90 	vmov	r2, s15
 8000d08:	659a      	str	r2, [r3, #88]	; 0x58
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d0a:	e091      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b14      	cmp	r3, #20
 8000d12:	d113      	bne.n	8000d3c <_ZN7Stepper19StepperSetFrequencyEf+0x410>
			this->stepper_htim->Instance->CCR6 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000d1e:	085b      	lsrs	r3, r3, #1
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f8c4 	bl	8000eae <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000d26:	eeb0 7b40 	vmov.f64	d7, d0
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d34:	ee17 2a90 	vmov	r2, s15
 8000d38:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d3a:	e079      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else {
			this->stepper_htim->Instance->CCR1 = 0;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2200      	movs	r2, #0
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2200      	movs	r2, #0
 8000d58:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2200      	movs	r2, #0
 8000d76:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d78:	e05a      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}
	} else {
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d105      	bne.n	8000d8e <_ZN7Stepper19StepperSetFrequencyEf+0x462>
			this->stepper_htim->Instance->CCR1 = 0;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8000d8c:	e050      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d105      	bne.n	8000da2 <_ZN7Stepper19StepperSetFrequencyEf+0x476>
			this->stepper_htim->Instance->CCR2 = 0;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000da0:	e046      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d105      	bne.n	8000db6 <_ZN7Stepper19StepperSetFrequencyEf+0x48a>
			this->stepper_htim->Instance->CCR3 = 0;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2200      	movs	r2, #0
 8000db2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000db4:	e03c      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b0c      	cmp	r3, #12
 8000dbc:	d105      	bne.n	8000dca <_ZN7Stepper19StepperSetFrequencyEf+0x49e>
			this->stepper_htim->Instance->CCR4 = 0;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000dc8:	e032      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b10      	cmp	r3, #16
 8000dd0:	d105      	bne.n	8000dde <_ZN7Stepper19StepperSetFrequencyEf+0x4b2>
			this->stepper_htim->Instance->CCR5 = 0;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000ddc:	e028      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b14      	cmp	r3, #20
 8000de4:	d105      	bne.n	8000df2 <_ZN7Stepper19StepperSetFrequencyEf+0x4c6>
			this->stepper_htim->Instance->CCR6 = 0;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000df0:	e01e      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
			this->stepper_htim->Instance->CCR1 = 0;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2200      	movs	r2, #0
 8000e04:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2200      	movs	r2, #0
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2200      	movs	r2, #0
 8000e22:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e2e:	e7ff      	b.n	8000e30 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	ecbd 8b02 	vpop	{d8}
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8000e48:	ed97 0a00 	vldr	s0, [r7]
 8000e4c:	f7ff fcef 	bl	800082e <_ZSt4fabsf>
 8000e50:	eef0 7a40 	vmov.f32	s15, s0
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e76:	eeb0 0b47 	vmov.f64	d0, d7
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ffe5 	bl	8000e62 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e98:	eeb0 7b40 	vmov.f64	d7, d0
 8000e9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	ee07 3a90 	vmov	s15, r3
 8000ebc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ec0:	eeb0 0b47 	vmov.f64	d0, d7
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed4:	f002 f830 	bl	8002f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed8:	f000 f86c 	bl	8000fb4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000edc:	f000 ff40 	bl	8001d60 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000ee0:	f000 fefe 	bl	8001ce0 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8000ee4:	f000 fe9c 	bl	8001c20 <_ZL19MX_USART3_UART_Initv>
  MX_TIM2_Init();
 8000ee8:	f000 fa3c 	bl	8001364 <_ZL12MX_TIM2_Initv>
  MX_UART4_Init();
 8000eec:	f000 fdd2 	bl	8001a94 <_ZL13MX_UART4_Initv>
  MX_TIM4_Init();
 8000ef0:	f000 fb5a 	bl	80015a8 <_ZL12MX_TIM4_Initv>
  MX_SPI3_Init();
 8000ef4:	f000 f910 	bl	8001118 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 8000ef8:	f000 f968 	bl	80011cc <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8000efc:	f000 fac2 	bl	8001484 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8000f00:	f000 fbe4 	bl	80016cc <_ZL12MX_TIM5_Initv>
  MX_TIM15_Init();
 8000f04:	f000 fd04 	bl	8001910 <_ZL13MX_TIM15_Initv>
  MX_TIM12_Init();
 8000f08:	f000 fcbe 	bl	8001888 <_ZL13MX_TIM12_Initv>
  MX_CRC_Init();
 8000f0c:	f000 f8dc 	bl	80010c8 <_ZL11MX_CRC_Initv>
  MX_UART7_Init();
 8000f10:	f000 fe24 	bl	8001b5c <_ZL13MX_UART7_Initv>
  MX_TIM6_Init();
 8000f14:	f000 fc38 	bl	8001788 <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8000f18:	f000 fc76 	bl	8001808 <_ZL12MX_TIM7_Initv>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2101      	movs	r1, #1
 8000f20:	481c      	ldr	r0, [pc, #112]	; (8000f94 <main+0xc4>)
 8000f22:	f004 fe81 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2102      	movs	r1, #2
 8000f2a:	481b      	ldr	r0, [pc, #108]	; (8000f98 <main+0xc8>)
 8000f2c:	f004 fe7c 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f36:	4817      	ldr	r0, [pc, #92]	; (8000f94 <main+0xc4>)
 8000f38:	f004 fe76 	bl	8005c28 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(400.0f);
 8000f3c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000f9c <main+0xcc>
 8000f40:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <main+0xd0>)
 8000f42:	f7ff fcf3 	bl	800092c <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(16);
 8000f46:	2110      	movs	r1, #16
 8000f48:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <main+0xd0>)
 8000f4a:	f7ff ff9b 	bl	8000e84 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(1);
 8000f4e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f52:	4813      	ldr	r0, [pc, #76]	; (8000fa0 <main+0xd0>)
 8000f54:	f7ff ff72 	bl	8000e3c <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8000f58:	4811      	ldr	r0, [pc, #68]	; (8000fa0 <main+0xd0>)
 8000f5a:	f7ff fcd6 	bl	800090a <_ZN7Stepper13StepperEnableEv>

//	stepperJ2.StepperSetMicrostep(1);
//	stepperJ2.StepperSetRatio(1);

	stepperJ3.StepperSetFrequency(400.0f);
 8000f5e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000f9c <main+0xcc>
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <main+0xd4>)
 8000f64:	f7ff fce2 	bl	800092c <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 8000f68:	2110      	movs	r1, #16
 8000f6a:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <main+0xd4>)
 8000f6c:	f7ff ff8a 	bl	8000e84 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(1);
 8000f70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <main+0xd4>)
 8000f76:	f7ff ff61 	bl	8000e3c <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <main+0xd4>)
 8000f7c:	f7ff fcc5 	bl	800090a <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
#endif

	HAL_TIM_Base_Start_IT(&htim5);
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <main+0xd8>)
 8000f82:	f007 fb51 	bl	8008628 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8000f86:	4809      	ldr	r0, [pc, #36]	; (8000fac <main+0xdc>)
 8000f88:	f007 fb4e 	bl	8008628 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8000f8c:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <main+0xe0>)
 8000f8e:	f007 fb4b 	bl	8008628 <HAL_TIM_Base_Start_IT>
//	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f92:	e7fe      	b.n	8000f92 <main+0xc2>
 8000f94:	58020400 	.word	0x58020400
 8000f98:	58021000 	.word	0x58021000
 8000f9c:	43c80000 	.word	0x43c80000
 8000fa0:	24000984 	.word	0x24000984
 8000fa4:	240009ac 	.word	0x240009ac
 8000fa8:	240003d8 	.word	0x240003d8
 8000fac:	24000424 	.word	0x24000424
 8000fb0:	24000470 	.word	0x24000470

08000fb4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b09c      	sub	sp, #112	; 0x70
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	224c      	movs	r2, #76	; 0x4c
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f00a fc86 	bl	800b8d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2220      	movs	r2, #32
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f00a fc80 	bl	800b8d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f004 fe5b 	bl	8005c90 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <_Z18SystemClock_Configv+0x10c>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	4a37      	ldr	r2, [pc, #220]	; (80010c0 <_Z18SystemClock_Configv+0x10c>)
 8000fe4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fe8:	6193      	str	r3, [r2, #24]
 8000fea:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <_Z18SystemClock_Configv+0x10c>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	4b33      	ldr	r3, [pc, #204]	; (80010c4 <_Z18SystemClock_Configv+0x110>)
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	4a32      	ldr	r2, [pc, #200]	; (80010c4 <_Z18SystemClock_Configv+0x110>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001000:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <_Z18SystemClock_Configv+0x110>)
 8001002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <_Z18SystemClock_Configv+0x10c>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001018:	bf14      	ite	ne
 800101a:	2301      	movne	r3, #1
 800101c:	2300      	moveq	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d000      	beq.n	8001026 <_Z18SystemClock_Configv+0x72>
 8001024:	e7f2      	b.n	800100c <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001026:	2302      	movs	r3, #2
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800102a:	2301      	movs	r3, #1
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102e:	2340      	movs	r3, #64	; 0x40
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001032:	2302      	movs	r3, #2
 8001034:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001036:	2300      	movs	r3, #0
 8001038:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800103a:	2304      	movs	r3, #4
 800103c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800103e:	233c      	movs	r3, #60	; 0x3c
 8001040:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001042:	2302      	movs	r3, #2
 8001044:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001046:	2306      	movs	r3, #6
 8001048:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800104a:	2302      	movs	r3, #2
 800104c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800104e:	230c      	movs	r3, #12
 8001050:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001052:	2300      	movs	r3, #0
 8001054:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4618      	mov	r0, r3
 8001060:	f004 fe50 	bl	8005d04 <HAL_RCC_OscConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	bf14      	ite	ne
 800106a:	2301      	movne	r3, #1
 800106c:	2300      	moveq	r3, #0
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8001074:	f000 fffa 	bl	800206c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001078:	233f      	movs	r3, #63	; 0x3f
 800107a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107c:	2303      	movs	r3, #3
 800107e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001084:	2308      	movs	r3, #8
 8001086:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001088:	2340      	movs	r3, #64	; 0x40
 800108a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800108c:	2340      	movs	r3, #64	; 0x40
 800108e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001094:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001096:	2340      	movs	r3, #64	; 0x40
 8001098:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2104      	movs	r1, #4
 800109e:	4618      	mov	r0, r3
 80010a0:	f005 fa5c 	bl	800655c <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	bf14      	ite	ne
 80010aa:	2301      	movne	r3, #1
 80010ac:	2300      	moveq	r3, #0
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 80010b4:	f000 ffda 	bl	800206c <Error_Handler>
  }
}
 80010b8:	bf00      	nop
 80010ba:	3770      	adds	r7, #112	; 0x70
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	58024800 	.word	0x58024800
 80010c4:	58000400 	.word	0x58000400

080010c8 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <_ZL11MX_CRC_Initv+0x48>)
 80010ce:	4a11      	ldr	r2, [pc, #68]	; (8001114 <_ZL11MX_CRC_Initv+0x4c>)
 80010d0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <_ZL11MX_CRC_Initv+0x48>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <_ZL11MX_CRC_Initv+0x48>)
 80010da:	2200      	movs	r2, #0
 80010dc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <_ZL11MX_CRC_Initv+0x48>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <_ZL11MX_CRC_Initv+0x48>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <_ZL11MX_CRC_Initv+0x48>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <_ZL11MX_CRC_Initv+0x48>)
 80010f2:	f002 f8db 	bl	80032ac <HAL_CRC_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf14      	ite	ne
 80010fc:	2301      	movne	r3, #1
 80010fe:	2300      	moveq	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8001106:	f000 ffb1 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	240001fc 	.word	0x240001fc
 8001114:	58024c00 	.word	0x58024c00

08001118 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 800111e:	4a2a      	ldr	r2, [pc, #168]	; (80011c8 <_ZL12MX_SPI3_Initv+0xb0>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 8001124:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001128:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 8001132:	2203      	movs	r2, #3
 8001134:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 8001144:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001148:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 800115e:	2200      	movs	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 8001164:	2200      	movs	r2, #0
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 800116a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800116e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 8001172:	2200      	movs	r2, #0
 8001174:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 8001178:	2200      	movs	r2, #0
 800117a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 800117e:	2200      	movs	r2, #0
 8001180:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 8001184:	2200      	movs	r2, #0
 8001186:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 800118a:	2200      	movs	r2, #0
 800118c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 8001190:	2200      	movs	r2, #0
 8001192:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 8001196:	2200      	movs	r2, #0
 8001198:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 800119c:	2200      	movs	r2, #0
 800119e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011a6:	4807      	ldr	r0, [pc, #28]	; (80011c4 <_ZL12MX_SPI3_Initv+0xac>)
 80011a8:	f007 f8c6 	bl	8008338 <HAL_SPI_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bf14      	ite	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	2300      	moveq	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <_ZL12MX_SPI3_Initv+0xa8>
  {
    Error_Handler();
 80011bc:	f000 ff56 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000220 	.word	0x24000220
 80011c8:	40003c00 	.word	0x40003c00

080011cc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b09a      	sub	sp, #104	; 0x68
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	615a      	str	r2, [r3, #20]
 80011fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	222c      	movs	r2, #44	; 0x2c
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f00a fb64 	bl	800b8d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800120c:	4b53      	ldr	r3, [pc, #332]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 800120e:	4a54      	ldr	r2, [pc, #336]	; (8001360 <_ZL12MX_TIM1_Initv+0x194>)
 8001210:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8001212:	4b52      	ldr	r3, [pc, #328]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 8001214:	22c7      	movs	r2, #199	; 0xc7
 8001216:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b50      	ldr	r3, [pc, #320]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800121e:	4b4f      	ldr	r3, [pc, #316]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 8001220:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001224:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b4d      	ldr	r3, [pc, #308]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b4a      	ldr	r3, [pc, #296]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001238:	4848      	ldr	r0, [pc, #288]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 800123a:	f007 f99e 	bl	800857a <HAL_TIM_Base_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf14      	ite	ne
 8001244:	2301      	movne	r3, #1
 8001246:	2300      	moveq	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 800124e:	f000 ff0d 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001256:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001258:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800125c:	4619      	mov	r1, r3
 800125e:	483f      	ldr	r0, [pc, #252]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 8001260:	f007 fdfe 	bl	8008e60 <HAL_TIM_ConfigClockSource>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf14      	ite	ne
 800126a:	2301      	movne	r3, #1
 800126c:	2300      	moveq	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8001274:	f000 fefa 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001278:	4838      	ldr	r0, [pc, #224]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 800127a:	f007 fa4d 	bl	8008718 <HAL_TIM_PWM_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf14      	ite	ne
 8001284:	2301      	movne	r3, #1
 8001286:	2300      	moveq	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 800128e:	f000 feed 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012a2:	4619      	mov	r1, r3
 80012a4:	482d      	ldr	r0, [pc, #180]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 80012a6:	f008 fb2f 	bl	8009908 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf14      	ite	ne
 80012b0:	2301      	movne	r3, #1
 80012b2:	2300      	moveq	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 80012ba:	f000 fed7 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012be:	2360      	movs	r3, #96	; 0x60
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80012c2:	f240 1339 	movw	r3, #313	; 0x139
 80012c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e0:	2204      	movs	r2, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	481d      	ldr	r0, [pc, #116]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 80012e6:	f007 fca7 	bl	8008c38 <HAL_TIM_PWM_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bf14      	ite	ne
 80012f0:	2301      	movne	r3, #1
 80012f2:	2300      	moveq	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 80012fa:	f000 feb7 	bl	800206c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001316:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	480a      	ldr	r0, [pc, #40]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 8001334:	f008 fb76 	bl	8009a24 <HAL_TIMEx_ConfigBreakDeadTime>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	bf14      	ite	ne
 800133e:	2301      	movne	r3, #1
 8001340:	2300      	moveq	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <_ZL12MX_TIM1_Initv+0x180>
  {
    Error_Handler();
 8001348:	f000 fe90 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <_ZL12MX_TIM1_Initv+0x190>)
 800134e:	f001 f8a1 	bl	8002494 <HAL_TIM_MspPostInit>

}
 8001352:	bf00      	nop
 8001354:	3768      	adds	r7, #104	; 0x68
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	240002a8 	.word	0x240002a8
 8001360:	40010000 	.word	0x40010000

08001364 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08e      	sub	sp, #56	; 0x38
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001384:	463b      	mov	r3, r7
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]
 8001392:	615a      	str	r2, [r3, #20]
 8001394:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001396:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <_ZL12MX_TIM2_Initv+0x11c>)
 8001398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 800139e:	4b38      	ldr	r3, [pc, #224]	; (8001480 <_ZL12MX_TIM2_Initv+0x11c>)
 80013a0:	22c7      	movs	r2, #199	; 0xc7
 80013a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a4:	4b36      	ldr	r3, [pc, #216]	; (8001480 <_ZL12MX_TIM2_Initv+0x11c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <_ZL12MX_TIM2_Initv+0x11c>)
 80013ac:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80013b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b2:	4b33      	ldr	r3, [pc, #204]	; (8001480 <_ZL12MX_TIM2_Initv+0x11c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b31      	ldr	r3, [pc, #196]	; (8001480 <_ZL12MX_TIM2_Initv+0x11c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013be:	4830      	ldr	r0, [pc, #192]	; (8001480 <_ZL12MX_TIM2_Initv+0x11c>)
 80013c0:	f007 f8db 	bl	800857a <HAL_TIM_Base_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bf14      	ite	ne
 80013ca:	2301      	movne	r3, #1
 80013cc:	2300      	moveq	r3, #0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 80013d4:	f000 fe4a 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e2:	4619      	mov	r1, r3
 80013e4:	4826      	ldr	r0, [pc, #152]	; (8001480 <_ZL12MX_TIM2_Initv+0x11c>)
 80013e6:	f007 fd3b 	bl	8008e60 <HAL_TIM_ConfigClockSource>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf14      	ite	ne
 80013f0:	2301      	movne	r3, #1
 80013f2:	2300      	moveq	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 80013fa:	f000 fe37 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013fe:	4820      	ldr	r0, [pc, #128]	; (8001480 <_ZL12MX_TIM2_Initv+0x11c>)
 8001400:	f007 f98a 	bl	8008718 <HAL_TIM_PWM_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	bf14      	ite	ne
 800140a:	2301      	movne	r3, #1
 800140c:	2300      	moveq	r3, #0
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001414:	f000 fe2a 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	4816      	ldr	r0, [pc, #88]	; (8001480 <_ZL12MX_TIM2_Initv+0x11c>)
 8001428:	f008 fa6e 	bl	8009908 <HAL_TIMEx_MasterConfigSynchronization>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	bf14      	ite	ne
 8001432:	2301      	movne	r3, #1
 8001434:	2300      	moveq	r3, #0
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 800143c:	f000 fe16 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001440:	2360      	movs	r3, #96	; 0x60
 8001442:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001444:	f240 1339 	movw	r3, #313	; 0x139
 8001448:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	2208      	movs	r2, #8
 8001456:	4619      	mov	r1, r3
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <_ZL12MX_TIM2_Initv+0x11c>)
 800145a:	f007 fbed 	bl	8008c38 <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 800146e:	f000 fdfd 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <_ZL12MX_TIM2_Initv+0x11c>)
 8001474:	f001 f80e 	bl	8002494 <HAL_TIM_MspPostInit>

}
 8001478:	bf00      	nop
 800147a:	3738      	adds	r7, #56	; 0x38
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	240002f4 	.word	0x240002f4

08001484 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08e      	sub	sp, #56	; 0x38
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a4:	463b      	mov	r3, r7
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014b6:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <_ZL12MX_TIM3_Initv+0x11c>)
 80014b8:	4a3a      	ldr	r2, [pc, #232]	; (80015a4 <_ZL12MX_TIM3_Initv+0x120>)
 80014ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 80014bc:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <_ZL12MX_TIM3_Initv+0x11c>)
 80014be:	22c7      	movs	r2, #199	; 0xc7
 80014c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <_ZL12MX_TIM3_Initv+0x11c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <_ZL12MX_TIM3_Initv+0x11c>)
 80014ca:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80014ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <_ZL12MX_TIM3_Initv+0x11c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d6:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <_ZL12MX_TIM3_Initv+0x11c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014dc:	4830      	ldr	r0, [pc, #192]	; (80015a0 <_ZL12MX_TIM3_Initv+0x11c>)
 80014de:	f007 f84c 	bl	800857a <HAL_TIM_Base_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf14      	ite	ne
 80014e8:	2301      	movne	r3, #1
 80014ea:	2300      	moveq	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 80014f2:	f000 fdbb 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001500:	4619      	mov	r1, r3
 8001502:	4827      	ldr	r0, [pc, #156]	; (80015a0 <_ZL12MX_TIM3_Initv+0x11c>)
 8001504:	f007 fcac 	bl	8008e60 <HAL_TIM_ConfigClockSource>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	bf14      	ite	ne
 800150e:	2301      	movne	r3, #1
 8001510:	2300      	moveq	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8001518:	f000 fda8 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800151c:	4820      	ldr	r0, [pc, #128]	; (80015a0 <_ZL12MX_TIM3_Initv+0x11c>)
 800151e:	f007 f8fb 	bl	8008718 <HAL_TIM_PWM_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf14      	ite	ne
 8001528:	2301      	movne	r3, #1
 800152a:	2300      	moveq	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8001532:	f000 fd9b 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	4816      	ldr	r0, [pc, #88]	; (80015a0 <_ZL12MX_TIM3_Initv+0x11c>)
 8001546:	f008 f9df 	bl	8009908 <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 800155a:	f000 fd87 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155e:	2360      	movs	r3, #96	; 0x60
 8001560:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001562:	f240 1339 	movw	r3, #313	; 0x139
 8001566:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	480a      	ldr	r0, [pc, #40]	; (80015a0 <_ZL12MX_TIM3_Initv+0x11c>)
 8001578:	f007 fb5e 	bl	8008c38 <HAL_TIM_PWM_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf14      	ite	ne
 8001582:	2301      	movne	r3, #1
 8001584:	2300      	moveq	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 800158c:	f000 fd6e 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <_ZL12MX_TIM3_Initv+0x11c>)
 8001592:	f000 ff7f 	bl	8002494 <HAL_TIM_MspPostInit>

}
 8001596:	bf00      	nop
 8001598:	3738      	adds	r7, #56	; 0x38
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	24000340 	.word	0x24000340
 80015a4:	40000400 	.word	0x40000400

080015a8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	; 0x38
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015da:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <_ZL12MX_TIM4_Initv+0x11c>)
 80015dc:	4a3a      	ldr	r2, [pc, #232]	; (80016c8 <_ZL12MX_TIM4_Initv+0x120>)
 80015de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 80015e0:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <_ZL12MX_TIM4_Initv+0x11c>)
 80015e2:	22c7      	movs	r2, #199	; 0xc7
 80015e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <_ZL12MX_TIM4_Initv+0x11c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 80015ec:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <_ZL12MX_TIM4_Initv+0x11c>)
 80015ee:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80015f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <_ZL12MX_TIM4_Initv+0x11c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <_ZL12MX_TIM4_Initv+0x11c>)
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001600:	4830      	ldr	r0, [pc, #192]	; (80016c4 <_ZL12MX_TIM4_Initv+0x11c>)
 8001602:	f006 ffba 	bl	800857a <HAL_TIM_Base_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf14      	ite	ne
 800160c:	2301      	movne	r3, #1
 800160e:	2300      	moveq	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8001616:	f000 fd29 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001624:	4619      	mov	r1, r3
 8001626:	4827      	ldr	r0, [pc, #156]	; (80016c4 <_ZL12MX_TIM4_Initv+0x11c>)
 8001628:	f007 fc1a 	bl	8008e60 <HAL_TIM_ConfigClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	bf14      	ite	ne
 8001632:	2301      	movne	r3, #1
 8001634:	2300      	moveq	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 800163c:	f000 fd16 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001640:	4820      	ldr	r0, [pc, #128]	; (80016c4 <_ZL12MX_TIM4_Initv+0x11c>)
 8001642:	f007 f869 	bl	8008718 <HAL_TIM_PWM_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	bf14      	ite	ne
 800164c:	2301      	movne	r3, #1
 800164e:	2300      	moveq	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8001656:	f000 fd09 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	4816      	ldr	r0, [pc, #88]	; (80016c4 <_ZL12MX_TIM4_Initv+0x11c>)
 800166a:	f008 f94d 	bl	8009908 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 800167e:	f000 fcf5 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001682:	2360      	movs	r3, #96	; 0x60
 8001684:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001686:	f240 1339 	movw	r3, #313	; 0x139
 800168a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	2208      	movs	r2, #8
 8001698:	4619      	mov	r1, r3
 800169a:	480a      	ldr	r0, [pc, #40]	; (80016c4 <_ZL12MX_TIM4_Initv+0x11c>)
 800169c:	f007 facc 	bl	8008c38 <HAL_TIM_PWM_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	bf14      	ite	ne
 80016a6:	2301      	movne	r3, #1
 80016a8:	2300      	moveq	r3, #0
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <_ZL12MX_TIM4_Initv+0x10c>
  {
    Error_Handler();
 80016b0:	f000 fcdc 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016b4:	4803      	ldr	r0, [pc, #12]	; (80016c4 <_ZL12MX_TIM4_Initv+0x11c>)
 80016b6:	f000 feed 	bl	8002494 <HAL_TIM_MspPostInit>

}
 80016ba:	bf00      	nop
 80016bc:	3738      	adds	r7, #56	; 0x38
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2400038c 	.word	0x2400038c
 80016c8:	40000800 	.word	0x40000800

080016cc <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016ea:	4b25      	ldr	r3, [pc, #148]	; (8001780 <_ZL12MX_TIM5_Initv+0xb4>)
 80016ec:	4a25      	ldr	r2, [pc, #148]	; (8001784 <_ZL12MX_TIM5_Initv+0xb8>)
 80016ee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <_ZL12MX_TIM5_Initv+0xb4>)
 80016f2:	22c7      	movs	r2, #199	; 0xc7
 80016f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <_ZL12MX_TIM5_Initv+0xb4>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <_ZL12MX_TIM5_Initv+0xb4>)
 80016fe:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001702:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <_ZL12MX_TIM5_Initv+0xb4>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <_ZL12MX_TIM5_Initv+0xb4>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001710:	481b      	ldr	r0, [pc, #108]	; (8001780 <_ZL12MX_TIM5_Initv+0xb4>)
 8001712:	f006 ff32 	bl	800857a <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	bf14      	ite	ne
 800171c:	2301      	movne	r3, #1
 800171e:	2300      	moveq	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 8001726:	f000 fca1 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	4812      	ldr	r0, [pc, #72]	; (8001780 <_ZL12MX_TIM5_Initv+0xb4>)
 8001738:	f007 fb92 	bl	8008e60 <HAL_TIM_ConfigClockSource>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf14      	ite	ne
 8001742:	2301      	movne	r3, #1
 8001744:	2300      	moveq	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <_ZL12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 800174c:	f000 fc8e 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	4808      	ldr	r0, [pc, #32]	; (8001780 <_ZL12MX_TIM5_Initv+0xb4>)
 800175e:	f008 f8d3 	bl	8009908 <HAL_TIMEx_MasterConfigSynchronization>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <_ZL12MX_TIM5_Initv+0xaa>
  {
    Error_Handler();
 8001772:	f000 fc7b 	bl	800206c <Error_Handler>
  /* USER CODE BEGIN TIM5_Init 2 */
//  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE END TIM5_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	240003d8 	.word	0x240003d8
 8001784:	40000c00 	.word	0x40000c00

08001788 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <_ZL12MX_TIM6_Initv+0x78>)
 800179a:	4a1a      	ldr	r2, [pc, #104]	; (8001804 <_ZL12MX_TIM6_Initv+0x7c>)
 800179c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <_ZL12MX_TIM6_Initv+0x78>)
 80017a0:	22c7      	movs	r2, #199	; 0xc7
 80017a2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <_ZL12MX_TIM6_Initv+0x78>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1200-1;
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <_ZL12MX_TIM6_Initv+0x78>)
 80017ac:	f240 42af 	movw	r2, #1199	; 0x4af
 80017b0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <_ZL12MX_TIM6_Initv+0x78>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017b8:	4811      	ldr	r0, [pc, #68]	; (8001800 <_ZL12MX_TIM6_Initv+0x78>)
 80017ba:	f006 fede 	bl	800857a <HAL_TIM_Base_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf14      	ite	ne
 80017c4:	2301      	movne	r3, #1
 80017c6:	2300      	moveq	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 80017ce:	f000 fc4d 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	4619      	mov	r1, r3
 80017de:	4808      	ldr	r0, [pc, #32]	; (8001800 <_ZL12MX_TIM6_Initv+0x78>)
 80017e0:	f008 f892 	bl	8009908 <HAL_TIMEx_MasterConfigSynchronization>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf14      	ite	ne
 80017ea:	2301      	movne	r3, #1
 80017ec:	2300      	moveq	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 80017f4:	f000 fc3a 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	24000424 	.word	0x24000424
 8001804:	40001000 	.word	0x40001000

08001808 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <_ZL12MX_TIM7_Initv+0x78>)
 800181a:	4a1a      	ldr	r2, [pc, #104]	; (8001884 <_ZL12MX_TIM7_Initv+0x7c>)
 800181c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <_ZL12MX_TIM7_Initv+0x78>)
 8001820:	22c7      	movs	r2, #199	; 0xc7
 8001822:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <_ZL12MX_TIM7_Initv+0x78>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000-1;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_ZL12MX_TIM7_Initv+0x78>)
 800182c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001830:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_ZL12MX_TIM7_Initv+0x78>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001838:	4811      	ldr	r0, [pc, #68]	; (8001880 <_ZL12MX_TIM7_Initv+0x78>)
 800183a:	f006 fe9e 	bl	800857a <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800184e:	f000 fc0d 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	4619      	mov	r1, r3
 800185e:	4808      	ldr	r0, [pc, #32]	; (8001880 <_ZL12MX_TIM7_Initv+0x78>)
 8001860:	f008 f852 	bl	8009908 <HAL_TIMEx_MasterConfigSynchronization>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf14      	ite	ne
 800186a:	2301      	movne	r3, #1
 800186c:	2300      	moveq	r3, #0
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 8001874:	f000 fbfa 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	24000470 	.word	0x24000470
 8001884:	40001400 	.word	0x40001400

08001888 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188e:	463b      	mov	r3, r7
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <_ZL13MX_TIM12_Initv+0x80>)
 800189c:	4a1b      	ldr	r2, [pc, #108]	; (800190c <_ZL13MX_TIM12_Initv+0x84>)
 800189e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <_ZL13MX_TIM12_Initv+0x80>)
 80018a2:	22c7      	movs	r2, #199	; 0xc7
 80018a4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <_ZL13MX_TIM12_Initv+0x80>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 12000-1;
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <_ZL13MX_TIM12_Initv+0x80>)
 80018ae:	f642 62df 	movw	r2, #11999	; 0x2edf
 80018b2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <_ZL13MX_TIM12_Initv+0x80>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <_ZL13MX_TIM12_Initv+0x80>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80018c0:	4811      	ldr	r0, [pc, #68]	; (8001908 <_ZL13MX_TIM12_Initv+0x80>)
 80018c2:	f006 fe5a 	bl	800857a <HAL_TIM_Base_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf14      	ite	ne
 80018cc:	2301      	movne	r3, #1
 80018ce:	2300      	moveq	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <_ZL13MX_TIM12_Initv+0x52>
  {
    Error_Handler();
 80018d6:	f000 fbc9 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018de:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80018e0:	463b      	mov	r3, r7
 80018e2:	4619      	mov	r1, r3
 80018e4:	4808      	ldr	r0, [pc, #32]	; (8001908 <_ZL13MX_TIM12_Initv+0x80>)
 80018e6:	f007 fabb 	bl	8008e60 <HAL_TIM_ConfigClockSource>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf14      	ite	ne
 80018f0:	2301      	movne	r3, #1
 80018f2:	2300      	moveq	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <_ZL13MX_TIM12_Initv+0x76>
  {
    Error_Handler();
 80018fa:	f000 fbb7 	bl	800206c <Error_Handler>
  /* USER CODE BEGIN TIM12_Init 2 */
//  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE END TIM12_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	240004bc 	.word	0x240004bc
 800190c:	40001800 	.word	0x40001800

08001910 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b09a      	sub	sp, #104	; 0x68
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001930:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	615a      	str	r2, [r3, #20]
 8001942:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	222c      	movs	r2, #44	; 0x2c
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f009 ffc2 	bl	800b8d4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001950:	4b4e      	ldr	r3, [pc, #312]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 8001952:	4a4f      	ldr	r2, [pc, #316]	; (8001a90 <_ZL13MX_TIM15_Initv+0x180>)
 8001954:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8001956:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 8001958:	22ef      	movs	r2, #239	; 0xef
 800195a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8001962:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 8001964:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001968:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196a:	4b48      	ldr	r3, [pc, #288]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001970:	4b46      	ldr	r3, [pc, #280]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001976:	4b45      	ldr	r3, [pc, #276]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800197c:	4843      	ldr	r0, [pc, #268]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 800197e:	f006 fdfc 	bl	800857a <HAL_TIM_Base_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <_ZL13MX_TIM15_Initv+0x86>
  {
    Error_Handler();
 8001992:	f000 fb6b 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800199c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019a0:	4619      	mov	r1, r3
 80019a2:	483a      	ldr	r0, [pc, #232]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 80019a4:	f007 fa5c 	bl	8008e60 <HAL_TIM_ConfigClockSource>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf14      	ite	ne
 80019ae:	2301      	movne	r3, #1
 80019b0:	2300      	moveq	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <_ZL13MX_TIM15_Initv+0xac>
  {
    Error_Handler();
 80019b8:	f000 fb58 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80019bc:	4833      	ldr	r0, [pc, #204]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 80019be:	f006 feab 	bl	8008718 <HAL_TIM_PWM_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf14      	ite	ne
 80019c8:	2301      	movne	r3, #1
 80019ca:	2300      	moveq	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <_ZL13MX_TIM15_Initv+0xc6>
  {
    Error_Handler();
 80019d2:	f000 fb4b 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80019de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019e2:	4619      	mov	r1, r3
 80019e4:	4829      	ldr	r0, [pc, #164]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 80019e6:	f007 ff8f 	bl	8009908 <HAL_TIMEx_MasterConfigSynchronization>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf14      	ite	ne
 80019f0:	2301      	movne	r3, #1
 80019f2:	2300      	moveq	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <_ZL13MX_TIM15_Initv+0xee>
  {
    Error_Handler();
 80019fa:	f000 fb37 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fe:	2360      	movs	r3, #96	; 0x60
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001a02:	f240 1339 	movw	r3, #313	; 0x139
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a20:	2204      	movs	r2, #4
 8001a22:	4619      	mov	r1, r3
 8001a24:	4819      	ldr	r0, [pc, #100]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 8001a26:	f007 f907 	bl	8008c38 <HAL_TIM_PWM_ConfigChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <_ZL13MX_TIM15_Initv+0x12e>
  {
    Error_Handler();
 8001a3a:	f000 fb17 	bl	800206c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4809      	ldr	r0, [pc, #36]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 8001a66:	f007 ffdd 	bl	8009a24 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <_ZL13MX_TIM15_Initv+0x16e>
  {
    Error_Handler();
 8001a7a:	f000 faf7 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001a7e:	4803      	ldr	r0, [pc, #12]	; (8001a8c <_ZL13MX_TIM15_Initv+0x17c>)
 8001a80:	f000 fd08 	bl	8002494 <HAL_TIM_MspPostInit>

}
 8001a84:	bf00      	nop
 8001a86:	3768      	adds	r7, #104	; 0x68
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	24000508 	.word	0x24000508
 8001a90:	40014000 	.word	0x40014000

08001a94 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001a9a:	4a2e      	ldr	r2, [pc, #184]	; (8001b54 <_ZL13MX_UART4_Initv+0xc0>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8001a9e:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001aa0:	4a2d      	ldr	r2, [pc, #180]	; (8001b58 <_ZL13MX_UART4_Initv+0xc4>)
 8001aa2:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001aaa:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ab0:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001ab8:	220c      	movs	r2, #12
 8001aba:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ac8:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ada:	481d      	ldr	r0, [pc, #116]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001adc:	f008 f83e 	bl	8009b5c <HAL_UART_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	bf14      	ite	ne
 8001ae6:	2301      	movne	r3, #1
 8001ae8:	2300      	moveq	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <_ZL13MX_UART4_Initv+0x60>
  {
    Error_Handler();
 8001af0:	f000 fabc 	bl	800206c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001af4:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8001af8:	4815      	ldr	r0, [pc, #84]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001afa:	f009 fdf6 	bl	800b6ea <HAL_UARTEx_SetTxFifoThreshold>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8001b0e:	f000 faad 	bl	800206c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001b12:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001b16:	480e      	ldr	r0, [pc, #56]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001b18:	f009 fe25 	bl	800b766 <HAL_UARTEx_SetRxFifoThreshold>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <_ZL13MX_UART4_Initv+0x9c>
  {
    Error_Handler();
 8001b2c:	f000 fa9e 	bl	800206c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8001b30:	4807      	ldr	r0, [pc, #28]	; (8001b50 <_ZL13MX_UART4_Initv+0xbc>)
 8001b32:	f009 fd66 	bl	800b602 <HAL_UARTEx_EnableFifoMode>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf14      	ite	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	2300      	moveq	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <_ZL13MX_UART4_Initv+0xb6>
  {
    Error_Handler();
 8001b46:	f000 fa91 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	24000554 	.word	0x24000554
 8001b54:	40004c00 	.word	0x40004c00
 8001b58:	001e8480 	.word	0x001e8480

08001b5c <_ZL13MX_UART7_Initv>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001b60:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001b62:	4a2e      	ldr	r2, [pc, #184]	; (8001c1c <_ZL13MX_UART7_Initv+0xc0>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001b66:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b6c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001ba4:	481c      	ldr	r0, [pc, #112]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001ba6:	f007 ffd9 	bl	8009b5c <HAL_UART_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf14      	ite	ne
 8001bb0:	2301      	movne	r3, #1
 8001bb2:	2300      	moveq	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <_ZL13MX_UART7_Initv+0x62>
  {
    Error_Handler();
 8001bba:	f000 fa57 	bl	800206c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001bbe:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8001bc2:	4815      	ldr	r0, [pc, #84]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001bc4:	f009 fd91 	bl	800b6ea <HAL_UARTEx_SetTxFifoThreshold>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bf14      	ite	ne
 8001bce:	2301      	movne	r3, #1
 8001bd0:	2300      	moveq	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <_ZL13MX_UART7_Initv+0x80>
  {
    Error_Handler();
 8001bd8:	f000 fa48 	bl	800206c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001bdc:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001be0:	480d      	ldr	r0, [pc, #52]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001be2:	f009 fdc0 	bl	800b766 <HAL_UARTEx_SetRxFifoThreshold>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf14      	ite	ne
 8001bec:	2301      	movne	r3, #1
 8001bee:	2300      	moveq	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <_ZL13MX_UART7_Initv+0x9e>
  {
    Error_Handler();
 8001bf6:	f000 fa39 	bl	800206c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8001bfa:	4807      	ldr	r0, [pc, #28]	; (8001c18 <_ZL13MX_UART7_Initv+0xbc>)
 8001bfc:	f009 fd01 	bl	800b602 <HAL_UARTEx_EnableFifoMode>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf14      	ite	ne
 8001c06:	2301      	movne	r3, #1
 8001c08:	2300      	moveq	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <_ZL13MX_UART7_Initv+0xb8>
  {
    Error_Handler();
 8001c10:	f000 fa2c 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	240005e4 	.word	0x240005e4
 8001c1c:	40007800 	.word	0x40007800

08001c20 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c26:	4a2d      	ldr	r2, [pc, #180]	; (8001cdc <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001c28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c38:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c46:	220c      	movs	r2, #12
 8001c48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4a:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c68:	481b      	ldr	r0, [pc, #108]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c6a:	f007 ff77 	bl	8009b5c <HAL_UART_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf14      	ite	ne
 8001c74:	2301      	movne	r3, #1
 8001c76:	2300      	moveq	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001c7e:	f000 f9f5 	bl	800206c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c82:	2100      	movs	r1, #0
 8001c84:	4814      	ldr	r0, [pc, #80]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c86:	f009 fd30 	bl	800b6ea <HAL_UARTEx_SetTxFifoThreshold>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf14      	ite	ne
 8001c90:	2301      	movne	r3, #1
 8001c92:	2300      	moveq	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001c9a:	f000 f9e7 	bl	800206c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ca2:	f009 fd60 	bl	800b766 <HAL_UARTEx_SetRxFifoThreshold>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf14      	ite	ne
 8001cac:	2301      	movne	r3, #1
 8001cae:	2300      	moveq	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001cb6:	f000 f9d9 	bl	800206c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001cba:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cbc:	f009 fcdc 	bl	800b678 <HAL_UARTEx_DisableFifoMode>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bf14      	ite	ne
 8001cc6:	2301      	movne	r3, #1
 8001cc8:	2300      	moveq	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001cd0:	f000 f9cc 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	24000674 	.word	0x24000674
 8001cdc:	40004800 	.word	0x40004800

08001ce0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <_ZL11MX_DMA_Initv+0x7c>)
 8001ce8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cec:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <_ZL11MX_DMA_Initv+0x7c>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <_ZL11MX_DMA_Initv+0x7c>)
 8001cf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	200b      	movs	r0, #11
 8001d0a:	f001 fa8e 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d0e:	200b      	movs	r0, #11
 8001d10:	f001 faa5 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	200c      	movs	r0, #12
 8001d1a:	f001 fa86 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d1e:	200c      	movs	r0, #12
 8001d20:	f001 fa9d 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	200d      	movs	r0, #13
 8001d2a:	f001 fa7e 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d2e:	200d      	movs	r0, #13
 8001d30:	f001 fa95 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	200e      	movs	r0, #14
 8001d3a:	f001 fa76 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001d3e:	200e      	movs	r0, #14
 8001d40:	f001 fa8d 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	200f      	movs	r0, #15
 8001d4a:	f001 fa6e 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001d4e:	200f      	movs	r0, #15
 8001d50:	f001 fa85 	bl	800325e <HAL_NVIC_EnableIRQ>

}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	58024400 	.word	0x58024400

08001d60 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	; 0x30
 8001d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d66:	f107 031c 	add.w	r3, r7, #28
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
 8001d74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d76:	4b8e      	ldr	r3, [pc, #568]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7c:	4a8c      	ldr	r2, [pc, #560]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d86:	4b8a      	ldr	r3, [pc, #552]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d94:	4b86      	ldr	r3, [pc, #536]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9a:	4a85      	ldr	r2, [pc, #532]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da4:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db2:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db8:	4a7d      	ldr	r2, [pc, #500]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc2:	4b7b      	ldr	r3, [pc, #492]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4b77      	ldr	r3, [pc, #476]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd6:	4a76      	ldr	r2, [pc, #472]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de0:	4b73      	ldr	r3, [pc, #460]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	4b70      	ldr	r3, [pc, #448]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df4:	4a6e      	ldr	r2, [pc, #440]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001df6:	f043 0302 	orr.w	r3, r3, #2
 8001dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dfe:	4b6c      	ldr	r3, [pc, #432]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0c:	4b68      	ldr	r3, [pc, #416]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e12:	4a67      	ldr	r2, [pc, #412]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001e14:	f043 0308 	orr.w	r3, r3, #8
 8001e18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e1c:	4b64      	ldr	r3, [pc, #400]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e2a:	4b61      	ldr	r3, [pc, #388]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e30:	4a5f      	ldr	r2, [pc, #380]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e3a:	4b5d      	ldr	r3, [pc, #372]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x250>)
 8001e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001e4e:	4859      	ldr	r0, [pc, #356]	; (8001fb4 <_ZL12MX_GPIO_Initv+0x254>)
 8001e50:	f003 feea 	bl	8005c28 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001e5a:	4857      	ldr	r0, [pc, #348]	; (8001fb8 <_ZL12MX_GPIO_Initv+0x258>)
 8001e5c:	f003 fee4 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e66:	4855      	ldr	r0, [pc, #340]	; (8001fbc <_ZL12MX_GPIO_Initv+0x25c>)
 8001e68:	f003 fede 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e72:	4853      	ldr	r0, [pc, #332]	; (8001fc0 <_ZL12MX_GPIO_Initv+0x260>)
 8001e74:	f003 fed8 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e7e:	4851      	ldr	r0, [pc, #324]	; (8001fc4 <_ZL12MX_GPIO_Initv+0x264>)
 8001e80:	f003 fed2 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 8001e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4849      	ldr	r0, [pc, #292]	; (8001fc0 <_ZL12MX_GPIO_Initv+0x260>)
 8001e9c:	f003 fd14 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001ea0:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001ea4:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	483e      	ldr	r0, [pc, #248]	; (8001fb4 <_ZL12MX_GPIO_Initv+0x254>)
 8001eba:	f003 fd05 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001ebe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ec4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4838      	ldr	r0, [pc, #224]	; (8001fb8 <_ZL12MX_GPIO_Initv+0x258>)
 8001ed6:	f003 fcf7 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001eda:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4831      	ldr	r0, [pc, #196]	; (8001fb8 <_ZL12MX_GPIO_Initv+0x258>)
 8001ef4:	f003 fce8 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efe:	2301      	movs	r3, #1
 8001f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	482a      	ldr	r0, [pc, #168]	; (8001fbc <_ZL12MX_GPIO_Initv+0x25c>)
 8001f12:	f003 fcd9 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4824      	ldr	r0, [pc, #144]	; (8001fc0 <_ZL12MX_GPIO_Initv+0x260>)
 8001f30:	f003 fcca 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_DE_Pin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	481d      	ldr	r0, [pc, #116]	; (8001fc4 <_ZL12MX_GPIO_Initv+0x264>)
 8001f4e:	f003 fcbb 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001f52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	4817      	ldr	r0, [pc, #92]	; (8001fc8 <_ZL12MX_GPIO_Initv+0x268>)
 8001f6a:	f003 fcad 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001f6e:	23c0      	movs	r3, #192	; 0xc0
 8001f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <_ZL12MX_GPIO_Initv+0x254>)
 8001f84:	f003 fca0 	bl	80058c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2017      	movs	r0, #23
 8001f8e:	f001 f94c 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f92:	2017      	movs	r0, #23
 8001f94:	f001 f963 	bl	800325e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2028      	movs	r0, #40	; 0x28
 8001f9e:	f001 f944 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fa2:	2028      	movs	r0, #40	; 0x28
 8001fa4:	f001 f95b 	bl	800325e <HAL_NVIC_EnableIRQ>

}
 8001fa8:	bf00      	nop
 8001faa:	3730      	adds	r7, #48	; 0x30
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	58024400 	.word	0x58024400
 8001fb4:	58020400 	.word	0x58020400
 8001fb8:	58021000 	.word	0x58021000
 8001fbc:	58020c00 	.word	0x58020c00
 8001fc0:	58020800 	.word	0x58020800
 8001fc4:	58020000 	.word	0x58020000
 8001fc8:	58021800 	.word	0x58021800

08001fcc <HAL_GPIO_EXTI_Callback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//	if (huart == &huart3) {
//		HAL_UART_Transmit_DMA(&huart3, UART3_RXBUFFER, 9);
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	80fb      	strh	r3, [r7, #6]
//
//	}
//	if (GPIO_Pin == Blue_Button_Pin_Pin) {
//		HAL_GPIO_WritePin(LD1_GPIO_Port, GPIO_Pin, PinState)
//	}
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	 * HAL_TIM_Base_Start_IT(&htim5);
	 * HAL_TIM_Base_Stop_IT(&htim5);
	 *
	 */
	/* Timer5 Interrupt for PID Position Control.*/
	if (htim == &htim6) {
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d129      	bne.n	8002048 <HAL_TIM_PeriodElapsedCallback+0x64>
		encoderJ1.AMT21_Read();
 8001ff4:	4817      	ldr	r0, [pc, #92]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001ff6:	f7fe fb66 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8001ffa:	4816      	ldr	r0, [pc, #88]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001ffc:	f7fe fb92 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002006:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d106      	bne.n	800201e <HAL_TIM_PeriodElapsedCallback+0x3a>
			posJ1 = encoderJ1.getAngPos180();
 8002010:	4810      	ldr	r0, [pc, #64]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002012:	f7fe fbeb 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8002016:	4603      	mov	r3, r0
 8002018:	461a      	mov	r2, r3
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800201c:	801a      	strh	r2, [r3, #0]
		}
		encoderJ3.AMT21_Read();
 800201e:	4810      	ldr	r0, [pc, #64]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002020:	f7fe fb51 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8002024:	480e      	ldr	r0, [pc, #56]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002026:	f7fe fb7d 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800202a:	4603      	mov	r3, r0
 800202c:	461a      	mov	r2, r3
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002030:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_TIM_PeriodElapsedCallback+0x64>
			posJ3 = encoderJ3.getAngPos180();
 800203a:	4809      	ldr	r0, [pc, #36]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800203c:	f7fe fbd6 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002046:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	24000424 	.word	0x24000424
 8002054:	2400095c 	.word	0x2400095c
 8002058:	240009d4 	.word	0x240009d4
 800205c:	240009d6 	.word	0x240009d6
 8002060:	24000970 	.word	0x24000970
 8002064:	240009d5 	.word	0x240009d5
 8002068:	240009d8 	.word	0x240009d8

0800206c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	2101      	movs	r1, #1
 8002074:	4808      	ldr	r0, [pc, #32]	; (8002098 <Error_Handler+0x2c>)
 8002076:	f003 fdd7 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	2102      	movs	r1, #2
 800207e:	4807      	ldr	r0, [pc, #28]	; (800209c <Error_Handler+0x30>)
 8002080:	f003 fdd2 	bl	8005c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002084:	2201      	movs	r2, #1
 8002086:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800208a:	4803      	ldr	r0, [pc, #12]	; (8002098 <Error_Handler+0x2c>)
 800208c:	f003 fdcc 	bl	8005c28 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002090:	b672      	cpsid	i
}
 8002092:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002094:	e7fe      	b.n	8002094 <Error_Handler+0x28>
 8002096:	bf00      	nop
 8002098:	58020400 	.word	0x58020400
 800209c:	58021000 	.word	0x58021000

080020a0 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d11f      	bne.n	80020f0 <_Z41__static_initialization_and_destruction_0ii+0x50>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d11a      	bne.n	80020f0 <_Z41__static_initialization_and_destruction_0ii+0x50>
AMT21 encoderJ1(&huart4, 0xD4);
 80020ba:	22d4      	movs	r2, #212	; 0xd4
 80020bc:	4918      	ldr	r1, [pc, #96]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80020be:	4819      	ldr	r0, [pc, #100]	; (8002124 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80020c0:	f7fe fae2 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 80020c4:	22c4      	movs	r2, #196	; 0xc4
 80020c6:	4916      	ldr	r1, [pc, #88]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80020c8:	4817      	ldr	r0, [pc, #92]	; (8002128 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80020ca:	f7fe fadd 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 80020ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80020d6:	2204      	movs	r2, #4
 80020d8:	4915      	ldr	r1, [pc, #84]	; (8002130 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80020da:	4816      	ldr	r0, [pc, #88]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80020dc:	f7fe fbc8 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80020e0:	2320      	movs	r3, #32
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	4914      	ldr	r1, [pc, #80]	; (800213c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80020ea:	4815      	ldr	r0, [pc, #84]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80020ec:	f7fe fbc0 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d110      	bne.n	8002118 <_Z41__static_initialization_and_destruction_0ii+0x78>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d10b      	bne.n	8002118 <_Z41__static_initialization_and_destruction_0ii+0x78>
 8002100:	480f      	ldr	r0, [pc, #60]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002102:	f7fe fbf7 	bl	80008f4 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8002106:	480b      	ldr	r0, [pc, #44]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002108:	f7fe fbf4 	bl	80008f4 <_ZN7StepperD1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 800210c:	4806      	ldr	r0, [pc, #24]	; (8002128 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800210e:	f7fe facf 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8002112:	4804      	ldr	r0, [pc, #16]	; (8002124 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002114:	f7fe facc 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	24000554 	.word	0x24000554
 8002124:	2400095c 	.word	0x2400095c
 8002128:	24000970 	.word	0x24000970
 800212c:	58021000 	.word	0x58021000
 8002130:	240002a8 	.word	0x240002a8
 8002134:	24000984 	.word	0x24000984
 8002138:	58020400 	.word	0x58020400
 800213c:	24000340 	.word	0x24000340
 8002140:	240009ac 	.word	0x240009ac

08002144 <_GLOBAL__sub_I_hcrc>:
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
 8002148:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800214c:	2001      	movs	r0, #1
 800214e:	f7ff ffa7 	bl	80020a0 <_Z41__static_initialization_and_destruction_0ii>
 8002152:	bd80      	pop	{r7, pc}

08002154 <_GLOBAL__sub_D_hcrc>:
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
 8002158:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff ff9f 	bl	80020a0 <_Z41__static_initialization_and_destruction_0ii>
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_MspInit+0x30>)
 800216c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002170:	4a08      	ldr	r2, [pc, #32]	; (8002194 <HAL_MspInit+0x30>)
 8002172:	f043 0302 	orr.w	r3, r3, #2
 8002176:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_MspInit+0x30>)
 800217c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	58024400 	.word	0x58024400

08002198 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <HAL_CRC_MspInit+0x3c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10e      	bne.n	80021c8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_CRC_MspInit+0x40>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <HAL_CRC_MspInit+0x40>)
 80021b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_CRC_MspInit+0x40>)
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	58024c00 	.word	0x58024c00
 80021d8:	58024400 	.word	0x58024400

080021dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b0b8      	sub	sp, #224	; 0xe0
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	22bc      	movs	r2, #188	; 0xbc
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f009 fb69 	bl	800b8d4 <memset>
  if(hspi->Instance==SPI3)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a25      	ldr	r2, [pc, #148]	; (800229c <HAL_SPI_MspInit+0xc0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d142      	bne.n	8002292 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800220c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002210:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002212:	2300      	movs	r3, #0
 8002214:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002216:	f107 0310 	add.w	r3, r7, #16
 800221a:	4618      	mov	r0, r3
 800221c:	f004 fd2a 	bl	8006c74 <HAL_RCCEx_PeriphCLKConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002226:	f7ff ff21 	bl	800206c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800222a:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 800222c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002230:	4a1b      	ldr	r2, [pc, #108]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 8002232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002236:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 800223c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 800224a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224e:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 800225a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002266:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800226a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002280:	2306      	movs	r3, #6
 8002282:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002286:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800228a:	4619      	mov	r1, r3
 800228c:	4805      	ldr	r0, [pc, #20]	; (80022a4 <HAL_SPI_MspInit+0xc8>)
 800228e:	f003 fb1b 	bl	80058c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002292:	bf00      	nop
 8002294:	37e0      	adds	r7, #224	; 0xe0
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40003c00 	.word	0x40003c00
 80022a0:	58024400 	.word	0x58024400
 80022a4:	58020800 	.word	0x58020800

080022a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	; 0x30
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a6e      	ldr	r2, [pc, #440]	; (8002470 <HAL_TIM_Base_MspInit+0x1c8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10f      	bne.n	80022da <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ba:	4b6e      	ldr	r3, [pc, #440]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 80022bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022c0:	4a6c      	ldr	r2, [pc, #432]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022ca:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 80022cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80022d8:	e0c6      	b.n	8002468 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e2:	d10f      	bne.n	8002304 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022e4:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 80022e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ea:	4a62      	ldr	r2, [pc, #392]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022f4:	4b5f      	ldr	r3, [pc, #380]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 80022f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002302:	e0b1      	b.n	8002468 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM3)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a5b      	ldr	r2, [pc, #364]	; (8002478 <HAL_TIM_Base_MspInit+0x1d0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10f      	bne.n	800232e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800230e:	4b59      	ldr	r3, [pc, #356]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 8002310:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002314:	4a57      	ldr	r2, [pc, #348]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 8002316:	f043 0302 	orr.w	r3, r3, #2
 800231a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800231e:	4b55      	ldr	r3, [pc, #340]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 8002320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800232c:	e09c      	b.n	8002468 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM4)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a52      	ldr	r2, [pc, #328]	; (800247c <HAL_TIM_Base_MspInit+0x1d4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d10f      	bne.n	8002358 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002338:	4b4e      	ldr	r3, [pc, #312]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 800233a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800233e:	4a4d      	ldr	r2, [pc, #308]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002348:	4b4a      	ldr	r3, [pc, #296]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 800234a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	6a3b      	ldr	r3, [r7, #32]
}
 8002356:	e087      	b.n	8002468 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM5)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a48      	ldr	r2, [pc, #288]	; (8002480 <HAL_TIM_Base_MspInit+0x1d8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d117      	bne.n	8002392 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002362:	4b44      	ldr	r3, [pc, #272]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 8002364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002368:	4a42      	ldr	r2, [pc, #264]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 800236a:	f043 0308 	orr.w	r3, r3, #8
 800236e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002372:	4b40      	ldr	r3, [pc, #256]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 8002374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002380:	2200      	movs	r2, #0
 8002382:	2100      	movs	r1, #0
 8002384:	2032      	movs	r0, #50	; 0x32
 8002386:	f000 ff50 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800238a:	2032      	movs	r0, #50	; 0x32
 800238c:	f000 ff67 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 8002390:	e06a      	b.n	8002468 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM6)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a3b      	ldr	r2, [pc, #236]	; (8002484 <HAL_TIM_Base_MspInit+0x1dc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d117      	bne.n	80023cc <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800239c:	4b35      	ldr	r3, [pc, #212]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 800239e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023a2:	4a34      	ldr	r2, [pc, #208]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 80023a4:	f043 0310 	orr.w	r3, r3, #16
 80023a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 80023ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	2036      	movs	r0, #54	; 0x36
 80023c0:	f000 ff33 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023c4:	2036      	movs	r0, #54	; 0x36
 80023c6:	f000 ff4a 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 80023ca:	e04d      	b.n	8002468 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM7)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a2d      	ldr	r2, [pc, #180]	; (8002488 <HAL_TIM_Base_MspInit+0x1e0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d117      	bne.n	8002406 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023d6:	4b27      	ldr	r3, [pc, #156]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 80023d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023dc:	4a25      	ldr	r2, [pc, #148]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 80023de:	f043 0320 	orr.w	r3, r3, #32
 80023e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 80023e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	2037      	movs	r0, #55	; 0x37
 80023fa:	f000 ff16 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80023fe:	2037      	movs	r0, #55	; 0x37
 8002400:	f000 ff2d 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 8002404:	e030      	b.n	8002468 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM12)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a20      	ldr	r2, [pc, #128]	; (800248c <HAL_TIM_Base_MspInit+0x1e4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d117      	bne.n	8002440 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002410:	4b18      	ldr	r3, [pc, #96]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 8002412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002416:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 8002418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800241c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 8002422:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	202b      	movs	r0, #43	; 0x2b
 8002434:	f000 fef9 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002438:	202b      	movs	r0, #43	; 0x2b
 800243a:	f000 ff10 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 800243e:	e013      	b.n	8002468 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM15)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a12      	ldr	r2, [pc, #72]	; (8002490 <HAL_TIM_Base_MspInit+0x1e8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 800244c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002450:	4a08      	ldr	r2, [pc, #32]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 8002452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002456:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_TIM_Base_MspInit+0x1cc>)
 800245c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	bf00      	nop
 800246a:	3730      	adds	r7, #48	; 0x30
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40010000 	.word	0x40010000
 8002474:	58024400 	.word	0x58024400
 8002478:	40000400 	.word	0x40000400
 800247c:	40000800 	.word	0x40000800
 8002480:	40000c00 	.word	0x40000c00
 8002484:	40001000 	.word	0x40001000
 8002488:	40001400 	.word	0x40001400
 800248c:	40001800 	.word	0x40001800
 8002490:	40014000 	.word	0x40014000

08002494 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	; 0x30
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a5e      	ldr	r2, [pc, #376]	; (800262c <HAL_TIM_MspPostInit+0x198>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d120      	bne.n	80024f8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024b6:	4b5e      	ldr	r3, [pc, #376]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 80024b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024bc:	4a5c      	ldr	r2, [pc, #368]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 80024be:	f043 0310 	orr.w	r3, r3, #16
 80024c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c6:	4b5a      	ldr	r3, [pc, #360]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 80024d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 80024ea:	f107 031c 	add.w	r3, r7, #28
 80024ee:	4619      	mov	r1, r3
 80024f0:	4850      	ldr	r0, [pc, #320]	; (8002634 <HAL_TIM_MspPostInit+0x1a0>)
 80024f2:	f003 f9e9 	bl	80058c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80024f6:	e094      	b.n	8002622 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002500:	d120      	bne.n	8002544 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	4b4b      	ldr	r3, [pc, #300]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002508:	4a49      	ldr	r2, [pc, #292]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 8002514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8002520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002532:	2301      	movs	r3, #1
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	483e      	ldr	r0, [pc, #248]	; (8002638 <HAL_TIM_MspPostInit+0x1a4>)
 800253e:	f003 f9c3 	bl	80058c8 <HAL_GPIO_Init>
}
 8002542:	e06e      	b.n	8002622 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a3c      	ldr	r2, [pc, #240]	; (800263c <HAL_TIM_MspPostInit+0x1a8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d11f      	bne.n	800258e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b38      	ldr	r3, [pc, #224]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 8002550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002554:	4a36      	ldr	r2, [pc, #216]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800255e:	4b34      	ldr	r3, [pc, #208]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 8002560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 800256c:	2340      	movs	r3, #64	; 0x40
 800256e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800257c:	2302      	movs	r3, #2
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4619      	mov	r1, r3
 8002586:	482e      	ldr	r0, [pc, #184]	; (8002640 <HAL_TIM_MspPostInit+0x1ac>)
 8002588:	f003 f99e 	bl	80058c8 <HAL_GPIO_Init>
}
 800258c:	e049      	b.n	8002622 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2c      	ldr	r2, [pc, #176]	; (8002644 <HAL_TIM_MspPostInit+0x1b0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d120      	bne.n	80025da <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 800259a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259e:	4a24      	ldr	r2, [pc, #144]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025a8:	4b21      	ldr	r3, [pc, #132]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 80025aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 80025b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	2302      	movs	r3, #2
 80025be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025c8:	2302      	movs	r3, #2
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f107 031c 	add.w	r3, r7, #28
 80025d0:	4619      	mov	r1, r3
 80025d2:	4819      	ldr	r0, [pc, #100]	; (8002638 <HAL_TIM_MspPostInit+0x1a4>)
 80025d4:	f003 f978 	bl	80058c8 <HAL_GPIO_Init>
}
 80025d8:	e023      	b.n	8002622 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1a      	ldr	r2, [pc, #104]	; (8002648 <HAL_TIM_MspPostInit+0x1b4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d11e      	bne.n	8002622 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 80025e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ea:	4a11      	ldr	r2, [pc, #68]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 80025ec:	f043 0310 	orr.w	r3, r3, #16
 80025f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_TIM_MspPostInit+0x19c>)
 80025f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8002602:	2340      	movs	r3, #64	; 0x40
 8002604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002612:	2304      	movs	r3, #4
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8002616:	f107 031c 	add.w	r3, r7, #28
 800261a:	4619      	mov	r1, r3
 800261c:	4805      	ldr	r0, [pc, #20]	; (8002634 <HAL_TIM_MspPostInit+0x1a0>)
 800261e:	f003 f953 	bl	80058c8 <HAL_GPIO_Init>
}
 8002622:	bf00      	nop
 8002624:	3730      	adds	r7, #48	; 0x30
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40010000 	.word	0x40010000
 8002630:	58024400 	.word	0x58024400
 8002634:	58021000 	.word	0x58021000
 8002638:	58020400 	.word	0x58020400
 800263c:	40000400 	.word	0x40000400
 8002640:	58020000 	.word	0x58020000
 8002644:	40000800 	.word	0x40000800
 8002648:	40014000 	.word	0x40014000

0800264c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b0bc      	sub	sp, #240	; 0xf0
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002664:	f107 0320 	add.w	r3, r7, #32
 8002668:	22bc      	movs	r2, #188	; 0xbc
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f009 f931 	bl	800b8d4 <memset>
  if(huart->Instance==UART4)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4aa1      	ldr	r2, [pc, #644]	; (80028fc <HAL_UART_MspInit+0x2b0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	f040 80b7 	bne.w	80027ec <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800267e:	2302      	movs	r3, #2
 8002680:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002682:	2300      	movs	r3, #0
 8002684:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002688:	f107 0320 	add.w	r3, r7, #32
 800268c:	4618      	mov	r0, r3
 800268e:	f004 faf1 	bl	8006c74 <HAL_RCCEx_PeriphCLKConfig>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002698:	f7ff fce8 	bl	800206c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800269c:	4b98      	ldr	r3, [pc, #608]	; (8002900 <HAL_UART_MspInit+0x2b4>)
 800269e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026a2:	4a97      	ldr	r2, [pc, #604]	; (8002900 <HAL_UART_MspInit+0x2b4>)
 80026a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026ac:	4b94      	ldr	r3, [pc, #592]	; (8002900 <HAL_UART_MspInit+0x2b4>)
 80026ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ba:	4b91      	ldr	r3, [pc, #580]	; (8002900 <HAL_UART_MspInit+0x2b4>)
 80026bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c0:	4a8f      	ldr	r2, [pc, #572]	; (8002900 <HAL_UART_MspInit+0x2b4>)
 80026c2:	f043 0308 	orr.w	r3, r3, #8
 80026c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ca:	4b8d      	ldr	r3, [pc, #564]	; (8002900 <HAL_UART_MspInit+0x2b4>)
 80026cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026d8:	2303      	movs	r3, #3
 80026da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026f0:	2308      	movs	r3, #8
 80026f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026f6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026fa:	4619      	mov	r1, r3
 80026fc:	4881      	ldr	r0, [pc, #516]	; (8002904 <HAL_UART_MspInit+0x2b8>)
 80026fe:	f003 f8e3 	bl	80058c8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8002702:	4b81      	ldr	r3, [pc, #516]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 8002704:	4a81      	ldr	r2, [pc, #516]	; (800290c <HAL_UART_MspInit+0x2c0>)
 8002706:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002708:	4b7f      	ldr	r3, [pc, #508]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 800270a:	223f      	movs	r2, #63	; 0x3f
 800270c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800270e:	4b7e      	ldr	r3, [pc, #504]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002714:	4b7c      	ldr	r3, [pc, #496]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800271a:	4b7b      	ldr	r3, [pc, #492]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 800271c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002720:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002722:	4b79      	ldr	r3, [pc, #484]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002728:	4b77      	ldr	r3, [pc, #476]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800272e:	4b76      	ldr	r3, [pc, #472]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 8002730:	2200      	movs	r2, #0
 8002732:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002734:	4b74      	ldr	r3, [pc, #464]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 8002736:	2200      	movs	r2, #0
 8002738:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800273a:	4b73      	ldr	r3, [pc, #460]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 800273c:	2204      	movs	r2, #4
 800273e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002740:	4b71      	ldr	r3, [pc, #452]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 8002742:	2203      	movs	r2, #3
 8002744:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002746:	4b70      	ldr	r3, [pc, #448]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 8002748:	2200      	movs	r2, #0
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800274c:	4b6e      	ldr	r3, [pc, #440]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 800274e:	2200      	movs	r2, #0
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002752:	486d      	ldr	r0, [pc, #436]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 8002754:	f000 fe94 	bl	8003480 <HAL_DMA_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800275e:	f7ff fc85 	bl	800206c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a68      	ldr	r2, [pc, #416]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 8002766:	67da      	str	r2, [r3, #124]	; 0x7c
 8002768:	4a67      	ldr	r2, [pc, #412]	; (8002908 <HAL_UART_MspInit+0x2bc>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800276e:	4b68      	ldr	r3, [pc, #416]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 8002770:	4a68      	ldr	r2, [pc, #416]	; (8002914 <HAL_UART_MspInit+0x2c8>)
 8002772:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002774:	4b66      	ldr	r3, [pc, #408]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 8002776:	2240      	movs	r2, #64	; 0x40
 8002778:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800277a:	4b65      	ldr	r3, [pc, #404]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002780:	4b63      	ldr	r3, [pc, #396]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002786:	4b62      	ldr	r3, [pc, #392]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 8002788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800278c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800278e:	4b60      	ldr	r3, [pc, #384]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 8002790:	2200      	movs	r2, #0
 8002792:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002794:	4b5e      	ldr	r3, [pc, #376]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 8002796:	2200      	movs	r2, #0
 8002798:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800279a:	4b5d      	ldr	r3, [pc, #372]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 800279c:	2200      	movs	r2, #0
 800279e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027a0:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80027a6:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 80027a8:	2204      	movs	r2, #4
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80027ac:	4b58      	ldr	r3, [pc, #352]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 80027ae:	2203      	movs	r2, #3
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80027b2:	4b57      	ldr	r3, [pc, #348]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80027b8:	4b55      	ldr	r3, [pc, #340]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80027be:	4854      	ldr	r0, [pc, #336]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 80027c0:	f000 fe5e 	bl	8003480 <HAL_DMA_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 80027ca:	f7ff fc4f 	bl	800206c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4f      	ldr	r2, [pc, #316]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 80027d2:	679a      	str	r2, [r3, #120]	; 0x78
 80027d4:	4a4e      	ldr	r2, [pc, #312]	; (8002910 <HAL_UART_MspInit+0x2c4>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	2034      	movs	r0, #52	; 0x34
 80027e0:	f000 fd23 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80027e4:	2034      	movs	r0, #52	; 0x34
 80027e6:	f000 fd3a 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027ea:	e154      	b.n	8002a96 <HAL_UART_MspInit+0x44a>
  else if(huart->Instance==UART7)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a49      	ldr	r2, [pc, #292]	; (8002918 <HAL_UART_MspInit+0x2cc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	f040 8098 	bne.w	8002928 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80027f8:	2302      	movs	r3, #2
 80027fa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002802:	f107 0320 	add.w	r3, r7, #32
 8002806:	4618      	mov	r0, r3
 8002808:	f004 fa34 	bl	8006c74 <HAL_RCCEx_PeriphCLKConfig>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8002812:	f7ff fc2b 	bl	800206c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002816:	4b3a      	ldr	r3, [pc, #232]	; (8002900 <HAL_UART_MspInit+0x2b4>)
 8002818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800281c:	4a38      	ldr	r2, [pc, #224]	; (8002900 <HAL_UART_MspInit+0x2b4>)
 800281e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002822:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002826:	4b36      	ldr	r3, [pc, #216]	; (8002900 <HAL_UART_MspInit+0x2b4>)
 8002828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800282c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002834:	4b32      	ldr	r3, [pc, #200]	; (8002900 <HAL_UART_MspInit+0x2b4>)
 8002836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800283a:	4a31      	ldr	r2, [pc, #196]	; (8002900 <HAL_UART_MspInit+0x2b4>)
 800283c:	f043 0310 	orr.w	r3, r3, #16
 8002840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002844:	4b2e      	ldr	r3, [pc, #184]	; (8002900 <HAL_UART_MspInit+0x2b4>)
 8002846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002852:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002856:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800286c:	2307      	movs	r3, #7
 800286e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002872:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002876:	4619      	mov	r1, r3
 8002878:	4828      	ldr	r0, [pc, #160]	; (800291c <HAL_UART_MspInit+0x2d0>)
 800287a:	f003 f825 	bl	80058c8 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 800287e:	4b28      	ldr	r3, [pc, #160]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 8002880:	4a28      	ldr	r2, [pc, #160]	; (8002924 <HAL_UART_MspInit+0x2d8>)
 8002882:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8002884:	4b26      	ldr	r3, [pc, #152]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 8002886:	2250      	movs	r2, #80	; 0x50
 8002888:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800288a:	4b25      	ldr	r3, [pc, #148]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 800288c:	2240      	movs	r2, #64	; 0x40
 800288e:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002890:	4b23      	ldr	r3, [pc, #140]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002896:	4b22      	ldr	r3, [pc, #136]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 8002898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800289c:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800289e:	4b20      	ldr	r3, [pc, #128]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028a4:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80028aa:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 80028b8:	2204      	movs	r2, #4
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028bc:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 80028be:	2203      	movs	r2, #3
 80028c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80028c2:	4b17      	ldr	r3, [pc, #92]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80028c8:	4b15      	ldr	r3, [pc, #84]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80028ce:	4814      	ldr	r0, [pc, #80]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 80028d0:	f000 fdd6 	bl	8003480 <HAL_DMA_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_UART_MspInit+0x292>
      Error_Handler();
 80028da:	f7ff fbc7 	bl	800206c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 80028e2:	679a      	str	r2, [r3, #120]	; 0x78
 80028e4:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <HAL_UART_MspInit+0x2d4>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2100      	movs	r1, #0
 80028ee:	2052      	movs	r0, #82	; 0x52
 80028f0:	f000 fc9b 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80028f4:	2052      	movs	r0, #82	; 0x52
 80028f6:	f000 fcb2 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 80028fa:	e0cc      	b.n	8002a96 <HAL_UART_MspInit+0x44a>
 80028fc:	40004c00 	.word	0x40004c00
 8002900:	58024400 	.word	0x58024400
 8002904:	58020c00 	.word	0x58020c00
 8002908:	24000704 	.word	0x24000704
 800290c:	40020058 	.word	0x40020058
 8002910:	2400077c 	.word	0x2400077c
 8002914:	40020070 	.word	0x40020070
 8002918:	40007800 	.word	0x40007800
 800291c:	58021000 	.word	0x58021000
 8002920:	240007f4 	.word	0x240007f4
 8002924:	40020010 	.word	0x40020010
  else if(huart->Instance==USART3)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a5c      	ldr	r2, [pc, #368]	; (8002aa0 <HAL_UART_MspInit+0x454>)
 800292e:	4293      	cmp	r3, r2
 8002930:	f040 80b1 	bne.w	8002a96 <HAL_UART_MspInit+0x44a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002934:	2302      	movs	r3, #2
 8002936:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800293e:	f107 0320 	add.w	r3, r7, #32
 8002942:	4618      	mov	r0, r3
 8002944:	f004 f996 	bl	8006c74 <HAL_RCCEx_PeriphCLKConfig>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_UART_MspInit+0x306>
      Error_Handler();
 800294e:	f7ff fb8d 	bl	800206c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002952:	4b54      	ldr	r3, [pc, #336]	; (8002aa4 <HAL_UART_MspInit+0x458>)
 8002954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <HAL_UART_MspInit+0x458>)
 800295a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800295e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002962:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_UART_MspInit+0x458>)
 8002964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002970:	4b4c      	ldr	r3, [pc, #304]	; (8002aa4 <HAL_UART_MspInit+0x458>)
 8002972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002976:	4a4b      	ldr	r2, [pc, #300]	; (8002aa4 <HAL_UART_MspInit+0x458>)
 8002978:	f043 0308 	orr.w	r3, r3, #8
 800297c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002980:	4b48      	ldr	r3, [pc, #288]	; (8002aa4 <HAL_UART_MspInit+0x458>)
 8002982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800298e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029a8:	2307      	movs	r3, #7
 80029aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029b2:	4619      	mov	r1, r3
 80029b4:	483c      	ldr	r0, [pc, #240]	; (8002aa8 <HAL_UART_MspInit+0x45c>)
 80029b6:	f002 ff87 	bl	80058c8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80029ba:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <HAL_UART_MspInit+0x460>)
 80029bc:	4a3c      	ldr	r2, [pc, #240]	; (8002ab0 <HAL_UART_MspInit+0x464>)
 80029be:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80029c0:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_UART_MspInit+0x460>)
 80029c2:	222d      	movs	r2, #45	; 0x2d
 80029c4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029c6:	4b39      	ldr	r3, [pc, #228]	; (8002aac <HAL_UART_MspInit+0x460>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029cc:	4b37      	ldr	r3, [pc, #220]	; (8002aac <HAL_UART_MspInit+0x460>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029d2:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_UART_MspInit+0x460>)
 80029d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029da:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_UART_MspInit+0x460>)
 80029dc:	2200      	movs	r2, #0
 80029de:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e0:	4b32      	ldr	r3, [pc, #200]	; (8002aac <HAL_UART_MspInit+0x460>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80029e6:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_UART_MspInit+0x460>)
 80029e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ec:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_UART_MspInit+0x460>)
 80029f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029f4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029f6:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <HAL_UART_MspInit+0x460>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80029fc:	482b      	ldr	r0, [pc, #172]	; (8002aac <HAL_UART_MspInit+0x460>)
 80029fe:	f000 fd3f 	bl	8003480 <HAL_DMA_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8002a08:	f7ff fb30 	bl	800206c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a27      	ldr	r2, [pc, #156]	; (8002aac <HAL_UART_MspInit+0x460>)
 8002a10:	67da      	str	r2, [r3, #124]	; 0x7c
 8002a12:	4a26      	ldr	r2, [pc, #152]	; (8002aac <HAL_UART_MspInit+0x460>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8002a18:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a1a:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <HAL_UART_MspInit+0x46c>)
 8002a1c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002a1e:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a20:	222e      	movs	r2, #46	; 0x2e
 8002a22:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a24:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a2a:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a30:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a36:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a38:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002a44:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a50:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a54:	2204      	movs	r2, #4
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002a6a:	4812      	ldr	r0, [pc, #72]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a6c:	f000 fd08 	bl	8003480 <HAL_DMA_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_UART_MspInit+0x42e>
      Error_Handler();
 8002a76:	f7ff faf9 	bl	800206c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a0d      	ldr	r2, [pc, #52]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a7e:	679a      	str	r2, [r3, #120]	; 0x78
 8002a80:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <HAL_UART_MspInit+0x468>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2027      	movs	r0, #39	; 0x27
 8002a8c:	f000 fbcd 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a90:	2027      	movs	r0, #39	; 0x27
 8002a92:	f000 fbe4 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 8002a96:	bf00      	nop
 8002a98:	37f0      	adds	r7, #240	; 0xf0
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40004800 	.word	0x40004800
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	58020c00 	.word	0x58020c00
 8002aac:	2400086c 	.word	0x2400086c
 8002ab0:	40020028 	.word	0x40020028
 8002ab4:	240008e4 	.word	0x240008e4
 8002ab8:	40020040 	.word	0x40020040

08002abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <NMI_Handler+0x4>

08002ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ac6:	e7fe      	b.n	8002ac6 <HardFault_Handler+0x4>

08002ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002acc:	e7fe      	b.n	8002acc <MemManage_Handler+0x4>

08002ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ad2:	e7fe      	b.n	8002ad2 <BusFault_Handler+0x4>

08002ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad8:	e7fe      	b.n	8002ad8 <UsageFault_Handler+0x4>

08002ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b08:	f000 fa88 	bl	800301c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002b0c:	f000 fbc1 	bl	8003292 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <DMA1_Stream0_IRQHandler+0x10>)
 8002b1a:	f001 fd6f 	bl	80045fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	240007f4 	.word	0x240007f4

08002b28 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <DMA1_Stream1_IRQHandler+0x10>)
 8002b2e:	f001 fd65 	bl	80045fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	2400086c 	.word	0x2400086c

08002b3c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <DMA1_Stream2_IRQHandler+0x10>)
 8002b42:	f001 fd5b 	bl	80045fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	240008e4 	.word	0x240008e4

08002b50 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <DMA1_Stream3_IRQHandler+0x10>)
 8002b56:	f001 fd51 	bl	80045fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	24000704 	.word	0x24000704

08002b64 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002b68:	4802      	ldr	r0, [pc, #8]	; (8002b74 <DMA1_Stream4_IRQHandler+0x10>)
 8002b6a:	f001 fd47 	bl	80045fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2400077c 	.word	0x2400077c

08002b78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8002b7c:	2040      	movs	r0, #64	; 0x40
 8002b7e:	f003 f86c 	bl	8005c5a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 8002b82:	2080      	movs	r0, #128	; 0x80
 8002b84:	f003 f869 	bl	8005c5a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <USART3_IRQHandler+0x10>)
 8002b92:	f007 f99d 	bl	8009ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	24000674 	.word	0x24000674

08002ba0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8002ba4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ba8:	f003 f857 	bl	8005c5a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8002bac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002bb0:	f003 f853 	bl	8005c5a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8002bb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002bb8:	f003 f84f 	bl	8005c5a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8002bbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bc0:	f003 f84b 	bl	8005c5a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002bce:	f005 ff13 	bl	80089f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	240004bc 	.word	0x240004bc

08002bdc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <TIM5_IRQHandler+0x10>)
 8002be2:	f005 ff09 	bl	80089f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	240003d8 	.word	0x240003d8

08002bf0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <UART4_IRQHandler+0x10>)
 8002bf6:	f007 f96b 	bl	8009ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	24000554 	.word	0x24000554

08002c04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <TIM6_DAC_IRQHandler+0x10>)
 8002c0a:	f005 fef5 	bl	80089f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	24000424 	.word	0x24000424

08002c18 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <TIM7_IRQHandler+0x10>)
 8002c1e:	f005 feeb 	bl	80089f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	24000470 	.word	0x24000470

08002c2c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <UART7_IRQHandler+0x10>)
 8002c32:	f007 f94d 	bl	8009ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	240005e4 	.word	0x240005e4

08002c40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
	return 1;
 8002c44:	2301      	movs	r3, #1
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <_kill>:

int _kill(int pid, int sig)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c5a:	f008 fe11 	bl	800b880 <__errno>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2216      	movs	r2, #22
 8002c62:	601a      	str	r2, [r3, #0]
	return -1;
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_exit>:

void _exit (int status)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c78:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ffe7 	bl	8002c50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c82:	e7fe      	b.n	8002c82 <_exit+0x12>

08002c84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	e00a      	b.n	8002cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c96:	f3af 8000 	nop.w
 8002c9a:	4601      	mov	r1, r0
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	60ba      	str	r2, [r7, #8]
 8002ca2:	b2ca      	uxtb	r2, r1
 8002ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	dbf0      	blt.n	8002c96 <_read+0x12>
	}

return len;
 8002cb4:	687b      	ldr	r3, [r7, #4]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	e009      	b.n	8002ce4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	60ba      	str	r2, [r7, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	dbf1      	blt.n	8002cd0 <_write+0x12>
	}
	return len;
 8002cec:	687b      	ldr	r3, [r7, #4]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <_close>:

int _close(int file)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
	return -1;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d1e:	605a      	str	r2, [r3, #4]
	return 0;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <_isatty>:

int _isatty(int file)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
	return 1;
 8002d36:	2301      	movs	r3, #1
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
	return 0;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d68:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <_sbrk+0x5c>)
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <_sbrk+0x60>)
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <_sbrk+0x64>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <_sbrk+0x64>)
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <_sbrk+0x68>)
 8002d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <_sbrk+0x64>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d207      	bcs.n	8002da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d90:	f008 fd76 	bl	800b880 <__errno>
 8002d94:	4603      	mov	r3, r0
 8002d96:	220c      	movs	r2, #12
 8002d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	e009      	b.n	8002db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <_sbrk+0x64>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	4a05      	ldr	r2, [pc, #20]	; (8002dc4 <_sbrk+0x64>)
 8002db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	24001000 	.word	0x24001000
 8002dc0:	00000400 	.word	0x00000400
 8002dc4:	240009dc 	.word	0x240009dc
 8002dc8:	24000a00 	.word	0x24000a00

08002dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002dd0:	4b39      	ldr	r3, [pc, #228]	; (8002eb8 <SystemInit+0xec>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	4a38      	ldr	r2, [pc, #224]	; (8002eb8 <SystemInit+0xec>)
 8002dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002de0:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <SystemInit+0xf0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	2b06      	cmp	r3, #6
 8002dea:	d807      	bhi.n	8002dfc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002dec:	4b33      	ldr	r3, [pc, #204]	; (8002ebc <SystemInit+0xf0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f023 030f 	bic.w	r3, r3, #15
 8002df4:	4a31      	ldr	r2, [pc, #196]	; (8002ebc <SystemInit+0xf0>)
 8002df6:	f043 0307 	orr.w	r3, r3, #7
 8002dfa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002dfc:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <SystemInit+0xf4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a2f      	ldr	r2, [pc, #188]	; (8002ec0 <SystemInit+0xf4>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <SystemInit+0xf4>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <SystemInit+0xf4>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	492b      	ldr	r1, [pc, #172]	; (8002ec0 <SystemInit+0xf4>)
 8002e14:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <SystemInit+0xf8>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e1a:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <SystemInit+0xf0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d007      	beq.n	8002e36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e26:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <SystemInit+0xf0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 030f 	bic.w	r3, r3, #15
 8002e2e:	4a23      	ldr	r2, [pc, #140]	; (8002ebc <SystemInit+0xf0>)
 8002e30:	f043 0307 	orr.w	r3, r3, #7
 8002e34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <SystemInit+0xf4>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e3c:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <SystemInit+0xf4>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e42:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <SystemInit+0xf4>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <SystemInit+0xf4>)
 8002e4a:	4a1f      	ldr	r2, [pc, #124]	; (8002ec8 <SystemInit+0xfc>)
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <SystemInit+0xf4>)
 8002e50:	4a1e      	ldr	r2, [pc, #120]	; (8002ecc <SystemInit+0x100>)
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <SystemInit+0xf4>)
 8002e56:	4a1e      	ldr	r2, [pc, #120]	; (8002ed0 <SystemInit+0x104>)
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e5a:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <SystemInit+0xf4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e60:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <SystemInit+0xf4>)
 8002e62:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <SystemInit+0x104>)
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <SystemInit+0xf4>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <SystemInit+0xf4>)
 8002e6e:	4a18      	ldr	r2, [pc, #96]	; (8002ed0 <SystemInit+0x104>)
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <SystemInit+0xf4>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <SystemInit+0xf4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <SystemInit+0xf4>)
 8002e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <SystemInit+0xf4>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <SystemInit+0x108>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <SystemInit+0x10c>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e96:	d202      	bcs.n	8002e9e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002e98:	4b10      	ldr	r3, [pc, #64]	; (8002edc <SystemInit+0x110>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <SystemInit+0x114>)
 8002ea0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002ea4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ea6:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <SystemInit+0xec>)
 8002ea8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eac:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00
 8002ebc:	52002000 	.word	0x52002000
 8002ec0:	58024400 	.word	0x58024400
 8002ec4:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ec8:	02020200 	.word	0x02020200
 8002ecc:	01ff0000 	.word	0x01ff0000
 8002ed0:	01010280 	.word	0x01010280
 8002ed4:	5c001000 	.word	0x5c001000
 8002ed8:	ffff0000 	.word	0xffff0000
 8002edc:	51008108 	.word	0x51008108
 8002ee0:	52004000 	.word	0x52004000

08002ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ee8:	f7ff ff70 	bl	8002dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eec:	480c      	ldr	r0, [pc, #48]	; (8002f20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eee:	490d      	ldr	r1, [pc, #52]	; (8002f24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ef4:	e002      	b.n	8002efc <LoopCopyDataInit>

08002ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002efa:	3304      	adds	r3, #4

08002efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f00:	d3f9      	bcc.n	8002ef6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f04:	4c0a      	ldr	r4, [pc, #40]	; (8002f30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f08:	e001      	b.n	8002f0e <LoopFillZerobss>

08002f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f0c:	3204      	adds	r2, #4

08002f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f10:	d3fb      	bcc.n	8002f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f12:	f008 fcbb 	bl	800b88c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f16:	f7fd ffdb 	bl	8000ed0 <main>
  bx  lr
 8002f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f1c:	24001000 	.word	0x24001000
  ldr r0, =_sdata
 8002f20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f24:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8002f28:	0800e5bc 	.word	0x0800e5bc
  ldr r2, =_sbss
 8002f2c:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002f30:	240009fc 	.word	0x240009fc

08002f34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f34:	e7fe      	b.n	8002f34 <ADC3_IRQHandler>
	...

08002f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f3e:	2003      	movs	r0, #3
 8002f40:	f000 f968 	bl	8003214 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f44:	f003 fcc0 	bl	80068c8 <HAL_RCC_GetSysClockFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <HAL_Init+0x68>)
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	4913      	ldr	r1, [pc, #76]	; (8002fa4 <HAL_Init+0x6c>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f62:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <HAL_Init+0x68>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <HAL_Init+0x6c>)
 8002f6c:	5cd3      	ldrb	r3, [r2, r3]
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	4a0b      	ldr	r2, [pc, #44]	; (8002fa8 <HAL_Init+0x70>)
 8002f7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f7c:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <HAL_Init+0x74>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f82:	2000      	movs	r0, #0
 8002f84:	f000 f814 	bl	8002fb0 <HAL_InitTick>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e002      	b.n	8002f98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f92:	f7ff f8e7 	bl	8002164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	58024400 	.word	0x58024400
 8002fa4:	0800e180 	.word	0x0800e180
 8002fa8:	24000004 	.word	0x24000004
 8002fac:	24000000 	.word	0x24000000

08002fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002fb8:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_InitTick+0x60>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e021      	b.n	8003008 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <HAL_InitTick+0x64>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_InitTick+0x60>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f94d 	bl	800327a <HAL_SYSTICK_Config>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e00e      	b.n	8003008 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b0f      	cmp	r3, #15
 8002fee:	d80a      	bhi.n	8003006 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	f000 f917 	bl	800322a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ffc:	4a06      	ldr	r2, [pc, #24]	; (8003018 <HAL_InitTick+0x68>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	2400000c 	.word	0x2400000c
 8003014:	24000000 	.word	0x24000000
 8003018:	24000008 	.word	0x24000008

0800301c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_IncTick+0x20>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_IncTick+0x24>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4413      	add	r3, r2
 800302c:	4a04      	ldr	r2, [pc, #16]	; (8003040 <HAL_IncTick+0x24>)
 800302e:	6013      	str	r3, [r2, #0]
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	2400000c 	.word	0x2400000c
 8003040:	240009e8 	.word	0x240009e8

08003044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return uwTick;
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <HAL_GetTick+0x14>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	240009e8 	.word	0x240009e8

0800305c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_GetREVID+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0c1b      	lsrs	r3, r3, #16
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	5c001000 	.word	0x5c001000

08003074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <__NVIC_SetPriorityGrouping+0x40>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003090:	4013      	ands	r3, r2
 8003092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a2:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <__NVIC_SetPriorityGrouping+0x40>)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	60d3      	str	r3, [r2, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00
 80030b8:	05fa0000 	.word	0x05fa0000

080030bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <__NVIC_GetPriorityGrouping+0x18>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	f003 0307 	and.w	r3, r3, #7
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	db0b      	blt.n	8003102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	4907      	ldr	r1, [pc, #28]	; (8003110 <__NVIC_EnableIRQ+0x38>)
 80030f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2001      	movs	r0, #1
 80030fa:	fa00 f202 	lsl.w	r2, r0, r2
 80030fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000e100 	.word	0xe000e100

08003114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	6039      	str	r1, [r7, #0]
 800311e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003124:	2b00      	cmp	r3, #0
 8003126:	db0a      	blt.n	800313e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	490c      	ldr	r1, [pc, #48]	; (8003160 <__NVIC_SetPriority+0x4c>)
 800312e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	440b      	add	r3, r1
 8003138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800313c:	e00a      	b.n	8003154 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4908      	ldr	r1, [pc, #32]	; (8003164 <__NVIC_SetPriority+0x50>)
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	3b04      	subs	r3, #4
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	440b      	add	r3, r1
 8003152:	761a      	strb	r2, [r3, #24]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000e100 	.word	0xe000e100
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f1c3 0307 	rsb	r3, r3, #7
 8003182:	2b04      	cmp	r3, #4
 8003184:	bf28      	it	cs
 8003186:	2304      	movcs	r3, #4
 8003188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3304      	adds	r3, #4
 800318e:	2b06      	cmp	r3, #6
 8003190:	d902      	bls.n	8003198 <NVIC_EncodePriority+0x30>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3b03      	subs	r3, #3
 8003196:	e000      	b.n	800319a <NVIC_EncodePriority+0x32>
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	f04f 32ff 	mov.w	r2, #4294967295
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	401a      	ands	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	43d9      	mvns	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	4313      	orrs	r3, r2
         );
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3b01      	subs	r3, #1
 80031dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e0:	d301      	bcc.n	80031e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e2:	2301      	movs	r3, #1
 80031e4:	e00f      	b.n	8003206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <SysTick_Config+0x40>)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ee:	210f      	movs	r1, #15
 80031f0:	f04f 30ff 	mov.w	r0, #4294967295
 80031f4:	f7ff ff8e 	bl	8003114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <SysTick_Config+0x40>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fe:	4b04      	ldr	r3, [pc, #16]	; (8003210 <SysTick_Config+0x40>)
 8003200:	2207      	movs	r2, #7
 8003202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	e000e010 	.word	0xe000e010

08003214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ff29 	bl	8003074 <__NVIC_SetPriorityGrouping>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003238:	f7ff ff40 	bl	80030bc <__NVIC_GetPriorityGrouping>
 800323c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	6978      	ldr	r0, [r7, #20]
 8003244:	f7ff ff90 	bl	8003168 <NVIC_EncodePriority>
 8003248:	4602      	mov	r2, r0
 800324a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff5f 	bl	8003114 <__NVIC_SetPriority>
}
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff33 	bl	80030d8 <__NVIC_EnableIRQ>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ffa4 	bl	80031d0 <SysTick_Config>
 8003288:	4603      	mov	r3, r0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003296:	f000 f802 	bl	800329e <HAL_SYSTICK_Callback>
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e054      	b.n	8003368 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7f5b      	ldrb	r3, [r3, #29]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe ff62 	bl	8002198 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	791b      	ldrb	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10c      	bne.n	80032fc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a22      	ldr	r2, [pc, #136]	; (8003370 <HAL_CRC_Init+0xc4>)
 80032e8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0218 	bic.w	r2, r2, #24
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	e00c      	b.n	8003316 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6899      	ldr	r1, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	461a      	mov	r2, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f834 	bl	8003374 <HAL_CRCEx_Polynomial_Set>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e028      	b.n	8003368 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	795b      	ldrb	r3, [r3, #5]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d105      	bne.n	800332a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f04f 32ff 	mov.w	r2, #4294967295
 8003326:	611a      	str	r2, [r3, #16]
 8003328:	e004      	b.n	8003334 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6912      	ldr	r2, [r2, #16]
 8003332:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699a      	ldr	r2, [r3, #24]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	04c11db7 	.word	0x04c11db7

08003374 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003384:	231f      	movs	r3, #31
 8003386:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003388:	bf00      	nop
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1e5a      	subs	r2, r3, #1
 800338e:	613a      	str	r2, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <HAL_CRCEx_Polynomial_Set+0x34>
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	fa22 f303 	lsr.w	r3, r2, r3
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_CRCEx_Polynomial_Set+0x16>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b18      	cmp	r3, #24
 80033ac:	d846      	bhi.n	800343c <HAL_CRCEx_Polynomial_Set+0xc8>
 80033ae:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	08003443 	.word	0x08003443
 80033b8:	0800343d 	.word	0x0800343d
 80033bc:	0800343d 	.word	0x0800343d
 80033c0:	0800343d 	.word	0x0800343d
 80033c4:	0800343d 	.word	0x0800343d
 80033c8:	0800343d 	.word	0x0800343d
 80033cc:	0800343d 	.word	0x0800343d
 80033d0:	0800343d 	.word	0x0800343d
 80033d4:	08003431 	.word	0x08003431
 80033d8:	0800343d 	.word	0x0800343d
 80033dc:	0800343d 	.word	0x0800343d
 80033e0:	0800343d 	.word	0x0800343d
 80033e4:	0800343d 	.word	0x0800343d
 80033e8:	0800343d 	.word	0x0800343d
 80033ec:	0800343d 	.word	0x0800343d
 80033f0:	0800343d 	.word	0x0800343d
 80033f4:	08003425 	.word	0x08003425
 80033f8:	0800343d 	.word	0x0800343d
 80033fc:	0800343d 	.word	0x0800343d
 8003400:	0800343d 	.word	0x0800343d
 8003404:	0800343d 	.word	0x0800343d
 8003408:	0800343d 	.word	0x0800343d
 800340c:	0800343d 	.word	0x0800343d
 8003410:	0800343d 	.word	0x0800343d
 8003414:	08003419 	.word	0x08003419
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b06      	cmp	r3, #6
 800341c:	d913      	bls.n	8003446 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003422:	e010      	b.n	8003446 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	2b07      	cmp	r3, #7
 8003428:	d90f      	bls.n	800344a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800342e:	e00c      	b.n	800344a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	2b0f      	cmp	r3, #15
 8003434:	d90b      	bls.n	800344e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800343a:	e008      	b.n	800344e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	75fb      	strb	r3, [r7, #23]
      break;
 8003440:	e006      	b.n	8003450 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003442:	bf00      	nop
 8003444:	e004      	b.n	8003450 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003446:	bf00      	nop
 8003448:	e002      	b.n	8003450 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800344e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10d      	bne.n	8003472 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f023 0118 	bic.w	r1, r3, #24
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	430a      	orrs	r2, r1
 8003470:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003472:	7dfb      	ldrb	r3, [r7, #23]
}
 8003474:	4618      	mov	r0, r3
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003488:	f7ff fddc 	bl	8003044 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e316      	b.n	8003ac6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a66      	ldr	r2, [pc, #408]	; (8003638 <HAL_DMA_Init+0x1b8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d04a      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a65      	ldr	r2, [pc, #404]	; (800363c <HAL_DMA_Init+0x1bc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d045      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a63      	ldr	r2, [pc, #396]	; (8003640 <HAL_DMA_Init+0x1c0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d040      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a62      	ldr	r2, [pc, #392]	; (8003644 <HAL_DMA_Init+0x1c4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d03b      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a60      	ldr	r2, [pc, #384]	; (8003648 <HAL_DMA_Init+0x1c8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d036      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a5f      	ldr	r2, [pc, #380]	; (800364c <HAL_DMA_Init+0x1cc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d031      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a5d      	ldr	r2, [pc, #372]	; (8003650 <HAL_DMA_Init+0x1d0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d02c      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a5c      	ldr	r2, [pc, #368]	; (8003654 <HAL_DMA_Init+0x1d4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d027      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a5a      	ldr	r2, [pc, #360]	; (8003658 <HAL_DMA_Init+0x1d8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d022      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a59      	ldr	r2, [pc, #356]	; (800365c <HAL_DMA_Init+0x1dc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d01d      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a57      	ldr	r2, [pc, #348]	; (8003660 <HAL_DMA_Init+0x1e0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d018      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a56      	ldr	r2, [pc, #344]	; (8003664 <HAL_DMA_Init+0x1e4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a54      	ldr	r2, [pc, #336]	; (8003668 <HAL_DMA_Init+0x1e8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00e      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a53      	ldr	r2, [pc, #332]	; (800366c <HAL_DMA_Init+0x1ec>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a51      	ldr	r2, [pc, #324]	; (8003670 <HAL_DMA_Init+0x1f0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a50      	ldr	r2, [pc, #320]	; (8003674 <HAL_DMA_Init+0x1f4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_DMA_Init+0xbc>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_DMA_Init+0xbe>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 813b 	beq.w	80037ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a37      	ldr	r2, [pc, #220]	; (8003638 <HAL_DMA_Init+0x1b8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d04a      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a36      	ldr	r2, [pc, #216]	; (800363c <HAL_DMA_Init+0x1bc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d045      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a34      	ldr	r2, [pc, #208]	; (8003640 <HAL_DMA_Init+0x1c0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d040      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a33      	ldr	r2, [pc, #204]	; (8003644 <HAL_DMA_Init+0x1c4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d03b      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a31      	ldr	r2, [pc, #196]	; (8003648 <HAL_DMA_Init+0x1c8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d036      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a30      	ldr	r2, [pc, #192]	; (800364c <HAL_DMA_Init+0x1cc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d031      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a2e      	ldr	r2, [pc, #184]	; (8003650 <HAL_DMA_Init+0x1d0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d02c      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a2d      	ldr	r2, [pc, #180]	; (8003654 <HAL_DMA_Init+0x1d4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d027      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a2b      	ldr	r2, [pc, #172]	; (8003658 <HAL_DMA_Init+0x1d8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d022      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2a      	ldr	r2, [pc, #168]	; (800365c <HAL_DMA_Init+0x1dc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d01d      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a28      	ldr	r2, [pc, #160]	; (8003660 <HAL_DMA_Init+0x1e0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d018      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a27      	ldr	r2, [pc, #156]	; (8003664 <HAL_DMA_Init+0x1e4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a25      	ldr	r2, [pc, #148]	; (8003668 <HAL_DMA_Init+0x1e8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00e      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a24      	ldr	r2, [pc, #144]	; (800366c <HAL_DMA_Init+0x1ec>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d009      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a22      	ldr	r2, [pc, #136]	; (8003670 <HAL_DMA_Init+0x1f0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a21      	ldr	r2, [pc, #132]	; (8003674 <HAL_DMA_Init+0x1f4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d108      	bne.n	8003606 <HAL_DMA_Init+0x186>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e007      	b.n	8003616 <HAL_DMA_Init+0x196>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003616:	e02f      	b.n	8003678 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003618:	f7ff fd14 	bl	8003044 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b05      	cmp	r3, #5
 8003624:	d928      	bls.n	8003678 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2203      	movs	r2, #3
 8003630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e246      	b.n	8003ac6 <HAL_DMA_Init+0x646>
 8003638:	40020010 	.word	0x40020010
 800363c:	40020028 	.word	0x40020028
 8003640:	40020040 	.word	0x40020040
 8003644:	40020058 	.word	0x40020058
 8003648:	40020070 	.word	0x40020070
 800364c:	40020088 	.word	0x40020088
 8003650:	400200a0 	.word	0x400200a0
 8003654:	400200b8 	.word	0x400200b8
 8003658:	40020410 	.word	0x40020410
 800365c:	40020428 	.word	0x40020428
 8003660:	40020440 	.word	0x40020440
 8003664:	40020458 	.word	0x40020458
 8003668:	40020470 	.word	0x40020470
 800366c:	40020488 	.word	0x40020488
 8003670:	400204a0 	.word	0x400204a0
 8003674:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1c8      	bne.n	8003618 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4b83      	ldr	r3, [pc, #524]	; (80038a0 <HAL_DMA_Init+0x420>)
 8003692:	4013      	ands	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800369e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d107      	bne.n	80036dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	4313      	orrs	r3, r2
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80036dc:	4b71      	ldr	r3, [pc, #452]	; (80038a4 <HAL_DMA_Init+0x424>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b71      	ldr	r3, [pc, #452]	; (80038a8 <HAL_DMA_Init+0x428>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e8:	d328      	bcc.n	800373c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b28      	cmp	r3, #40	; 0x28
 80036f0:	d903      	bls.n	80036fa <HAL_DMA_Init+0x27a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b2e      	cmp	r3, #46	; 0x2e
 80036f8:	d917      	bls.n	800372a <HAL_DMA_Init+0x2aa>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b3e      	cmp	r3, #62	; 0x3e
 8003700:	d903      	bls.n	800370a <HAL_DMA_Init+0x28a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b42      	cmp	r3, #66	; 0x42
 8003708:	d90f      	bls.n	800372a <HAL_DMA_Init+0x2aa>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b46      	cmp	r3, #70	; 0x46
 8003710:	d903      	bls.n	800371a <HAL_DMA_Init+0x29a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b48      	cmp	r3, #72	; 0x48
 8003718:	d907      	bls.n	800372a <HAL_DMA_Init+0x2aa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b4e      	cmp	r3, #78	; 0x4e
 8003720:	d905      	bls.n	800372e <HAL_DMA_Init+0x2ae>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b52      	cmp	r3, #82	; 0x52
 8003728:	d801      	bhi.n	800372e <HAL_DMA_Init+0x2ae>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_DMA_Init+0x2b0>
 800372e:	2300      	movs	r3, #0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800373a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f023 0307 	bic.w	r3, r3, #7
 8003752:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2b04      	cmp	r3, #4
 8003764:	d117      	bne.n	8003796 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00e      	beq.n	8003796 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f001 ff1b 	bl	80055b4 <DMA_CheckFifoParam>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2240      	movs	r2, #64	; 0x40
 8003788:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e197      	b.n	8003ac6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f001 fe56 	bl	8005450 <DMA_CalcBaseAndBitshift>
 80037a4:	4603      	mov	r3, r0
 80037a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	223f      	movs	r2, #63	; 0x3f
 80037b2:	409a      	lsls	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	e0cd      	b.n	8003956 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a3b      	ldr	r2, [pc, #236]	; (80038ac <HAL_DMA_Init+0x42c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d022      	beq.n	800380a <HAL_DMA_Init+0x38a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a39      	ldr	r2, [pc, #228]	; (80038b0 <HAL_DMA_Init+0x430>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d01d      	beq.n	800380a <HAL_DMA_Init+0x38a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a38      	ldr	r2, [pc, #224]	; (80038b4 <HAL_DMA_Init+0x434>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d018      	beq.n	800380a <HAL_DMA_Init+0x38a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a36      	ldr	r2, [pc, #216]	; (80038b8 <HAL_DMA_Init+0x438>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_DMA_Init+0x38a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a35      	ldr	r2, [pc, #212]	; (80038bc <HAL_DMA_Init+0x43c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_DMA_Init+0x38a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a33      	ldr	r2, [pc, #204]	; (80038c0 <HAL_DMA_Init+0x440>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_DMA_Init+0x38a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a32      	ldr	r2, [pc, #200]	; (80038c4 <HAL_DMA_Init+0x444>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_DMA_Init+0x38a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a30      	ldr	r2, [pc, #192]	; (80038c8 <HAL_DMA_Init+0x448>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <HAL_DMA_Init+0x38e>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_DMA_Init+0x390>
 800380e:	2300      	movs	r3, #0
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8097 	beq.w	8003944 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a24      	ldr	r2, [pc, #144]	; (80038ac <HAL_DMA_Init+0x42c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d021      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a22      	ldr	r2, [pc, #136]	; (80038b0 <HAL_DMA_Init+0x430>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01c      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a21      	ldr	r2, [pc, #132]	; (80038b4 <HAL_DMA_Init+0x434>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d017      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1f      	ldr	r2, [pc, #124]	; (80038b8 <HAL_DMA_Init+0x438>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d012      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <HAL_DMA_Init+0x43c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00d      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <HAL_DMA_Init+0x440>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d008      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <HAL_DMA_Init+0x444>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d003      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <HAL_DMA_Init+0x448>)
 8003862:	4293      	cmp	r3, r2
 8003864:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_DMA_Init+0x44c>)
 8003882:	4013      	ands	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d020      	beq.n	80038d0 <HAL_DMA_Init+0x450>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b80      	cmp	r3, #128	; 0x80
 8003894:	d102      	bne.n	800389c <HAL_DMA_Init+0x41c>
 8003896:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800389a:	e01a      	b.n	80038d2 <HAL_DMA_Init+0x452>
 800389c:	2300      	movs	r3, #0
 800389e:	e018      	b.n	80038d2 <HAL_DMA_Init+0x452>
 80038a0:	fe10803f 	.word	0xfe10803f
 80038a4:	5c001000 	.word	0x5c001000
 80038a8:	ffff0000 	.word	0xffff0000
 80038ac:	58025408 	.word	0x58025408
 80038b0:	5802541c 	.word	0x5802541c
 80038b4:	58025430 	.word	0x58025430
 80038b8:	58025444 	.word	0x58025444
 80038bc:	58025458 	.word	0x58025458
 80038c0:	5802546c 	.word	0x5802546c
 80038c4:	58025480 	.word	0x58025480
 80038c8:	58025494 	.word	0x58025494
 80038cc:	fffe000f 	.word	0xfffe000f
 80038d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80038e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80038e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80038f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80038f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003900:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	4b6e      	ldr	r3, [pc, #440]	; (8003ad0 <HAL_DMA_Init+0x650>)
 8003918:	4413      	add	r3, r2
 800391a:	4a6e      	ldr	r2, [pc, #440]	; (8003ad4 <HAL_DMA_Init+0x654>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	009a      	lsls	r2, r3, #2
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f001 fd91 	bl	8005450 <DMA_CalcBaseAndBitshift>
 800392e:	4603      	mov	r3, r0
 8003930:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	2201      	movs	r2, #1
 800393c:	409a      	lsls	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	e008      	b.n	8003956 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2240      	movs	r2, #64	; 0x40
 8003948:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2203      	movs	r2, #3
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0b7      	b.n	8003ac6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a5f      	ldr	r2, [pc, #380]	; (8003ad8 <HAL_DMA_Init+0x658>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d072      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a5d      	ldr	r2, [pc, #372]	; (8003adc <HAL_DMA_Init+0x65c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d06d      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a5c      	ldr	r2, [pc, #368]	; (8003ae0 <HAL_DMA_Init+0x660>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d068      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a5a      	ldr	r2, [pc, #360]	; (8003ae4 <HAL_DMA_Init+0x664>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d063      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a59      	ldr	r2, [pc, #356]	; (8003ae8 <HAL_DMA_Init+0x668>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d05e      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a57      	ldr	r2, [pc, #348]	; (8003aec <HAL_DMA_Init+0x66c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d059      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a56      	ldr	r2, [pc, #344]	; (8003af0 <HAL_DMA_Init+0x670>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d054      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a54      	ldr	r2, [pc, #336]	; (8003af4 <HAL_DMA_Init+0x674>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d04f      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a53      	ldr	r2, [pc, #332]	; (8003af8 <HAL_DMA_Init+0x678>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d04a      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a51      	ldr	r2, [pc, #324]	; (8003afc <HAL_DMA_Init+0x67c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d045      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a50      	ldr	r2, [pc, #320]	; (8003b00 <HAL_DMA_Init+0x680>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d040      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a4e      	ldr	r2, [pc, #312]	; (8003b04 <HAL_DMA_Init+0x684>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d03b      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a4d      	ldr	r2, [pc, #308]	; (8003b08 <HAL_DMA_Init+0x688>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d036      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a4b      	ldr	r2, [pc, #300]	; (8003b0c <HAL_DMA_Init+0x68c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d031      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a4a      	ldr	r2, [pc, #296]	; (8003b10 <HAL_DMA_Init+0x690>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d02c      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a48      	ldr	r2, [pc, #288]	; (8003b14 <HAL_DMA_Init+0x694>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d027      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a47      	ldr	r2, [pc, #284]	; (8003b18 <HAL_DMA_Init+0x698>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d022      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a45      	ldr	r2, [pc, #276]	; (8003b1c <HAL_DMA_Init+0x69c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01d      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a44      	ldr	r2, [pc, #272]	; (8003b20 <HAL_DMA_Init+0x6a0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d018      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a42      	ldr	r2, [pc, #264]	; (8003b24 <HAL_DMA_Init+0x6a4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a41      	ldr	r2, [pc, #260]	; (8003b28 <HAL_DMA_Init+0x6a8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00e      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a3f      	ldr	r2, [pc, #252]	; (8003b2c <HAL_DMA_Init+0x6ac>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a3e      	ldr	r2, [pc, #248]	; (8003b30 <HAL_DMA_Init+0x6b0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a3c      	ldr	r2, [pc, #240]	; (8003b34 <HAL_DMA_Init+0x6b4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_DMA_Init+0x5ca>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_DMA_Init+0x5cc>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d032      	beq.n	8003ab6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f001 fe2b 	bl	80056ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b80      	cmp	r3, #128	; 0x80
 8003a5c:	d102      	bne.n	8003a64 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a78:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d010      	beq.n	8003aa4 <HAL_DMA_Init+0x624>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d80c      	bhi.n	8003aa4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f001 fea8 	bl	80057e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	e008      	b.n	8003ab6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	a7fdabf8 	.word	0xa7fdabf8
 8003ad4:	cccccccd 	.word	0xcccccccd
 8003ad8:	40020010 	.word	0x40020010
 8003adc:	40020028 	.word	0x40020028
 8003ae0:	40020040 	.word	0x40020040
 8003ae4:	40020058 	.word	0x40020058
 8003ae8:	40020070 	.word	0x40020070
 8003aec:	40020088 	.word	0x40020088
 8003af0:	400200a0 	.word	0x400200a0
 8003af4:	400200b8 	.word	0x400200b8
 8003af8:	40020410 	.word	0x40020410
 8003afc:	40020428 	.word	0x40020428
 8003b00:	40020440 	.word	0x40020440
 8003b04:	40020458 	.word	0x40020458
 8003b08:	40020470 	.word	0x40020470
 8003b0c:	40020488 	.word	0x40020488
 8003b10:	400204a0 	.word	0x400204a0
 8003b14:	400204b8 	.word	0x400204b8
 8003b18:	58025408 	.word	0x58025408
 8003b1c:	5802541c 	.word	0x5802541c
 8003b20:	58025430 	.word	0x58025430
 8003b24:	58025444 	.word	0x58025444
 8003b28:	58025458 	.word	0x58025458
 8003b2c:	5802546c 	.word	0x5802546c
 8003b30:	58025480 	.word	0x58025480
 8003b34:	58025494 	.word	0x58025494

08003b38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003b40:	f7ff fa80 	bl	8003044 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e2dc      	b.n	800410a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d008      	beq.n	8003b6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2280      	movs	r2, #128	; 0x80
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e2cd      	b.n	800410a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a76      	ldr	r2, [pc, #472]	; (8003d4c <HAL_DMA_Abort+0x214>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d04a      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a74      	ldr	r2, [pc, #464]	; (8003d50 <HAL_DMA_Abort+0x218>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d045      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a73      	ldr	r2, [pc, #460]	; (8003d54 <HAL_DMA_Abort+0x21c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d040      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a71      	ldr	r2, [pc, #452]	; (8003d58 <HAL_DMA_Abort+0x220>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d03b      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a70      	ldr	r2, [pc, #448]	; (8003d5c <HAL_DMA_Abort+0x224>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d036      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a6e      	ldr	r2, [pc, #440]	; (8003d60 <HAL_DMA_Abort+0x228>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d031      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6d      	ldr	r2, [pc, #436]	; (8003d64 <HAL_DMA_Abort+0x22c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d02c      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a6b      	ldr	r2, [pc, #428]	; (8003d68 <HAL_DMA_Abort+0x230>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d027      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6a      	ldr	r2, [pc, #424]	; (8003d6c <HAL_DMA_Abort+0x234>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d022      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a68      	ldr	r2, [pc, #416]	; (8003d70 <HAL_DMA_Abort+0x238>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01d      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a67      	ldr	r2, [pc, #412]	; (8003d74 <HAL_DMA_Abort+0x23c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d018      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a65      	ldr	r2, [pc, #404]	; (8003d78 <HAL_DMA_Abort+0x240>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a64      	ldr	r2, [pc, #400]	; (8003d7c <HAL_DMA_Abort+0x244>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00e      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a62      	ldr	r2, [pc, #392]	; (8003d80 <HAL_DMA_Abort+0x248>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a61      	ldr	r2, [pc, #388]	; (8003d84 <HAL_DMA_Abort+0x24c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a5f      	ldr	r2, [pc, #380]	; (8003d88 <HAL_DMA_Abort+0x250>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d101      	bne.n	8003c12 <HAL_DMA_Abort+0xda>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <HAL_DMA_Abort+0xdc>
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 021e 	bic.w	r2, r2, #30
 8003c26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e00a      	b.n	8003c56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 020e 	bic.w	r2, r2, #14
 8003c4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a3c      	ldr	r2, [pc, #240]	; (8003d4c <HAL_DMA_Abort+0x214>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d072      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a3a      	ldr	r2, [pc, #232]	; (8003d50 <HAL_DMA_Abort+0x218>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d06d      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a39      	ldr	r2, [pc, #228]	; (8003d54 <HAL_DMA_Abort+0x21c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d068      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a37      	ldr	r2, [pc, #220]	; (8003d58 <HAL_DMA_Abort+0x220>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d063      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a36      	ldr	r2, [pc, #216]	; (8003d5c <HAL_DMA_Abort+0x224>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d05e      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a34      	ldr	r2, [pc, #208]	; (8003d60 <HAL_DMA_Abort+0x228>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d059      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a33      	ldr	r2, [pc, #204]	; (8003d64 <HAL_DMA_Abort+0x22c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d054      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a31      	ldr	r2, [pc, #196]	; (8003d68 <HAL_DMA_Abort+0x230>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d04f      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a30      	ldr	r2, [pc, #192]	; (8003d6c <HAL_DMA_Abort+0x234>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d04a      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2e      	ldr	r2, [pc, #184]	; (8003d70 <HAL_DMA_Abort+0x238>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d045      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a2d      	ldr	r2, [pc, #180]	; (8003d74 <HAL_DMA_Abort+0x23c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d040      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a2b      	ldr	r2, [pc, #172]	; (8003d78 <HAL_DMA_Abort+0x240>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d03b      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a2a      	ldr	r2, [pc, #168]	; (8003d7c <HAL_DMA_Abort+0x244>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d036      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <HAL_DMA_Abort+0x248>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d031      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a27      	ldr	r2, [pc, #156]	; (8003d84 <HAL_DMA_Abort+0x24c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d02c      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a25      	ldr	r2, [pc, #148]	; (8003d88 <HAL_DMA_Abort+0x250>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d027      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a24      	ldr	r2, [pc, #144]	; (8003d8c <HAL_DMA_Abort+0x254>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d022      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <HAL_DMA_Abort+0x258>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01d      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <HAL_DMA_Abort+0x25c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d018      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1f      	ldr	r2, [pc, #124]	; (8003d98 <HAL_DMA_Abort+0x260>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1e      	ldr	r2, [pc, #120]	; (8003d9c <HAL_DMA_Abort+0x264>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <HAL_DMA_Abort+0x268>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <HAL_DMA_Abort+0x26c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <HAL_DMA_Abort+0x270>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d132      	bne.n	8003dac <HAL_DMA_Abort+0x274>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e031      	b.n	8003dae <HAL_DMA_Abort+0x276>
 8003d4a:	bf00      	nop
 8003d4c:	40020010 	.word	0x40020010
 8003d50:	40020028 	.word	0x40020028
 8003d54:	40020040 	.word	0x40020040
 8003d58:	40020058 	.word	0x40020058
 8003d5c:	40020070 	.word	0x40020070
 8003d60:	40020088 	.word	0x40020088
 8003d64:	400200a0 	.word	0x400200a0
 8003d68:	400200b8 	.word	0x400200b8
 8003d6c:	40020410 	.word	0x40020410
 8003d70:	40020428 	.word	0x40020428
 8003d74:	40020440 	.word	0x40020440
 8003d78:	40020458 	.word	0x40020458
 8003d7c:	40020470 	.word	0x40020470
 8003d80:	40020488 	.word	0x40020488
 8003d84:	400204a0 	.word	0x400204a0
 8003d88:	400204b8 	.word	0x400204b8
 8003d8c:	58025408 	.word	0x58025408
 8003d90:	5802541c 	.word	0x5802541c
 8003d94:	58025430 	.word	0x58025430
 8003d98:	58025444 	.word	0x58025444
 8003d9c:	58025458 	.word	0x58025458
 8003da0:	5802546c 	.word	0x5802546c
 8003da4:	58025480 	.word	0x58025480
 8003da8:	58025494 	.word	0x58025494
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a6d      	ldr	r2, [pc, #436]	; (8003f7c <HAL_DMA_Abort+0x444>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d04a      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a6b      	ldr	r2, [pc, #428]	; (8003f80 <HAL_DMA_Abort+0x448>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d045      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a6a      	ldr	r2, [pc, #424]	; (8003f84 <HAL_DMA_Abort+0x44c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d040      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a68      	ldr	r2, [pc, #416]	; (8003f88 <HAL_DMA_Abort+0x450>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d03b      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a67      	ldr	r2, [pc, #412]	; (8003f8c <HAL_DMA_Abort+0x454>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d036      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a65      	ldr	r2, [pc, #404]	; (8003f90 <HAL_DMA_Abort+0x458>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d031      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a64      	ldr	r2, [pc, #400]	; (8003f94 <HAL_DMA_Abort+0x45c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d02c      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a62      	ldr	r2, [pc, #392]	; (8003f98 <HAL_DMA_Abort+0x460>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d027      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a61      	ldr	r2, [pc, #388]	; (8003f9c <HAL_DMA_Abort+0x464>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d022      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a5f      	ldr	r2, [pc, #380]	; (8003fa0 <HAL_DMA_Abort+0x468>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01d      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a5e      	ldr	r2, [pc, #376]	; (8003fa4 <HAL_DMA_Abort+0x46c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d018      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a5c      	ldr	r2, [pc, #368]	; (8003fa8 <HAL_DMA_Abort+0x470>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a5b      	ldr	r2, [pc, #364]	; (8003fac <HAL_DMA_Abort+0x474>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a59      	ldr	r2, [pc, #356]	; (8003fb0 <HAL_DMA_Abort+0x478>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a58      	ldr	r2, [pc, #352]	; (8003fb4 <HAL_DMA_Abort+0x47c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a56      	ldr	r2, [pc, #344]	; (8003fb8 <HAL_DMA_Abort+0x480>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d108      	bne.n	8003e74 <HAL_DMA_Abort+0x33c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e007      	b.n	8003e84 <HAL_DMA_Abort+0x34c>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003e84:	e013      	b.n	8003eae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e86:	f7ff f8dd 	bl	8003044 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d90c      	bls.n	8003eae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e12d      	b.n	800410a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e5      	bne.n	8003e86 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2f      	ldr	r2, [pc, #188]	; (8003f7c <HAL_DMA_Abort+0x444>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d04a      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a2d      	ldr	r2, [pc, #180]	; (8003f80 <HAL_DMA_Abort+0x448>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d045      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2c      	ldr	r2, [pc, #176]	; (8003f84 <HAL_DMA_Abort+0x44c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d040      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a2a      	ldr	r2, [pc, #168]	; (8003f88 <HAL_DMA_Abort+0x450>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d03b      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a29      	ldr	r2, [pc, #164]	; (8003f8c <HAL_DMA_Abort+0x454>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d036      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a27      	ldr	r2, [pc, #156]	; (8003f90 <HAL_DMA_Abort+0x458>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d031      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <HAL_DMA_Abort+0x45c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d02c      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a24      	ldr	r2, [pc, #144]	; (8003f98 <HAL_DMA_Abort+0x460>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d027      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a23      	ldr	r2, [pc, #140]	; (8003f9c <HAL_DMA_Abort+0x464>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d022      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a21      	ldr	r2, [pc, #132]	; (8003fa0 <HAL_DMA_Abort+0x468>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01d      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a20      	ldr	r2, [pc, #128]	; (8003fa4 <HAL_DMA_Abort+0x46c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d018      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <HAL_DMA_Abort+0x470>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1d      	ldr	r2, [pc, #116]	; (8003fac <HAL_DMA_Abort+0x474>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00e      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1b      	ldr	r2, [pc, #108]	; (8003fb0 <HAL_DMA_Abort+0x478>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d009      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1a      	ldr	r2, [pc, #104]	; (8003fb4 <HAL_DMA_Abort+0x47c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <HAL_DMA_Abort+0x480>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d101      	bne.n	8003f5e <HAL_DMA_Abort+0x426>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_DMA_Abort+0x428>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d02b      	beq.n	8003fbc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	223f      	movs	r2, #63	; 0x3f
 8003f74:	409a      	lsls	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	609a      	str	r2, [r3, #8]
 8003f7a:	e02a      	b.n	8003fd2 <HAL_DMA_Abort+0x49a>
 8003f7c:	40020010 	.word	0x40020010
 8003f80:	40020028 	.word	0x40020028
 8003f84:	40020040 	.word	0x40020040
 8003f88:	40020058 	.word	0x40020058
 8003f8c:	40020070 	.word	0x40020070
 8003f90:	40020088 	.word	0x40020088
 8003f94:	400200a0 	.word	0x400200a0
 8003f98:	400200b8 	.word	0x400200b8
 8003f9c:	40020410 	.word	0x40020410
 8003fa0:	40020428 	.word	0x40020428
 8003fa4:	40020440 	.word	0x40020440
 8003fa8:	40020458 	.word	0x40020458
 8003fac:	40020470 	.word	0x40020470
 8003fb0:	40020488 	.word	0x40020488
 8003fb4:	400204a0 	.word	0x400204a0
 8003fb8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	2201      	movs	r2, #1
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a4f      	ldr	r2, [pc, #316]	; (8004114 <HAL_DMA_Abort+0x5dc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d072      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a4d      	ldr	r2, [pc, #308]	; (8004118 <HAL_DMA_Abort+0x5e0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d06d      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a4c      	ldr	r2, [pc, #304]	; (800411c <HAL_DMA_Abort+0x5e4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d068      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a4a      	ldr	r2, [pc, #296]	; (8004120 <HAL_DMA_Abort+0x5e8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d063      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a49      	ldr	r2, [pc, #292]	; (8004124 <HAL_DMA_Abort+0x5ec>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d05e      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a47      	ldr	r2, [pc, #284]	; (8004128 <HAL_DMA_Abort+0x5f0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d059      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a46      	ldr	r2, [pc, #280]	; (800412c <HAL_DMA_Abort+0x5f4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d054      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a44      	ldr	r2, [pc, #272]	; (8004130 <HAL_DMA_Abort+0x5f8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d04f      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a43      	ldr	r2, [pc, #268]	; (8004134 <HAL_DMA_Abort+0x5fc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d04a      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a41      	ldr	r2, [pc, #260]	; (8004138 <HAL_DMA_Abort+0x600>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d045      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a40      	ldr	r2, [pc, #256]	; (800413c <HAL_DMA_Abort+0x604>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d040      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a3e      	ldr	r2, [pc, #248]	; (8004140 <HAL_DMA_Abort+0x608>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d03b      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a3d      	ldr	r2, [pc, #244]	; (8004144 <HAL_DMA_Abort+0x60c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d036      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a3b      	ldr	r2, [pc, #236]	; (8004148 <HAL_DMA_Abort+0x610>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d031      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a3a      	ldr	r2, [pc, #232]	; (800414c <HAL_DMA_Abort+0x614>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d02c      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a38      	ldr	r2, [pc, #224]	; (8004150 <HAL_DMA_Abort+0x618>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d027      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a37      	ldr	r2, [pc, #220]	; (8004154 <HAL_DMA_Abort+0x61c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d022      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a35      	ldr	r2, [pc, #212]	; (8004158 <HAL_DMA_Abort+0x620>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01d      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a34      	ldr	r2, [pc, #208]	; (800415c <HAL_DMA_Abort+0x624>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d018      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a32      	ldr	r2, [pc, #200]	; (8004160 <HAL_DMA_Abort+0x628>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a31      	ldr	r2, [pc, #196]	; (8004164 <HAL_DMA_Abort+0x62c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00e      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a2f      	ldr	r2, [pc, #188]	; (8004168 <HAL_DMA_Abort+0x630>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d009      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2e      	ldr	r2, [pc, #184]	; (800416c <HAL_DMA_Abort+0x634>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a2c      	ldr	r2, [pc, #176]	; (8004170 <HAL_DMA_Abort+0x638>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d101      	bne.n	80040c6 <HAL_DMA_Abort+0x58e>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_DMA_Abort+0x590>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d015      	beq.n	80040f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40020010 	.word	0x40020010
 8004118:	40020028 	.word	0x40020028
 800411c:	40020040 	.word	0x40020040
 8004120:	40020058 	.word	0x40020058
 8004124:	40020070 	.word	0x40020070
 8004128:	40020088 	.word	0x40020088
 800412c:	400200a0 	.word	0x400200a0
 8004130:	400200b8 	.word	0x400200b8
 8004134:	40020410 	.word	0x40020410
 8004138:	40020428 	.word	0x40020428
 800413c:	40020440 	.word	0x40020440
 8004140:	40020458 	.word	0x40020458
 8004144:	40020470 	.word	0x40020470
 8004148:	40020488 	.word	0x40020488
 800414c:	400204a0 	.word	0x400204a0
 8004150:	400204b8 	.word	0x400204b8
 8004154:	58025408 	.word	0x58025408
 8004158:	5802541c 	.word	0x5802541c
 800415c:	58025430 	.word	0x58025430
 8004160:	58025444 	.word	0x58025444
 8004164:	58025458 	.word	0x58025458
 8004168:	5802546c 	.word	0x5802546c
 800416c:	58025480 	.word	0x58025480
 8004170:	58025494 	.word	0x58025494

08004174 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e205      	b.n	8004592 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d004      	beq.n	800419c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2280      	movs	r2, #128	; 0x80
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e1fa      	b.n	8004592 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a8c      	ldr	r2, [pc, #560]	; (80043d4 <HAL_DMA_Abort_IT+0x260>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d04a      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a8b      	ldr	r2, [pc, #556]	; (80043d8 <HAL_DMA_Abort_IT+0x264>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d045      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a89      	ldr	r2, [pc, #548]	; (80043dc <HAL_DMA_Abort_IT+0x268>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d040      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a88      	ldr	r2, [pc, #544]	; (80043e0 <HAL_DMA_Abort_IT+0x26c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d03b      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a86      	ldr	r2, [pc, #536]	; (80043e4 <HAL_DMA_Abort_IT+0x270>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d036      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a85      	ldr	r2, [pc, #532]	; (80043e8 <HAL_DMA_Abort_IT+0x274>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d031      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a83      	ldr	r2, [pc, #524]	; (80043ec <HAL_DMA_Abort_IT+0x278>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d02c      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a82      	ldr	r2, [pc, #520]	; (80043f0 <HAL_DMA_Abort_IT+0x27c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d027      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a80      	ldr	r2, [pc, #512]	; (80043f4 <HAL_DMA_Abort_IT+0x280>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d022      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7f      	ldr	r2, [pc, #508]	; (80043f8 <HAL_DMA_Abort_IT+0x284>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d01d      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a7d      	ldr	r2, [pc, #500]	; (80043fc <HAL_DMA_Abort_IT+0x288>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d018      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a7c      	ldr	r2, [pc, #496]	; (8004400 <HAL_DMA_Abort_IT+0x28c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d013      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a7a      	ldr	r2, [pc, #488]	; (8004404 <HAL_DMA_Abort_IT+0x290>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00e      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a79      	ldr	r2, [pc, #484]	; (8004408 <HAL_DMA_Abort_IT+0x294>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d009      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a77      	ldr	r2, [pc, #476]	; (800440c <HAL_DMA_Abort_IT+0x298>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a76      	ldr	r2, [pc, #472]	; (8004410 <HAL_DMA_Abort_IT+0x29c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <HAL_DMA_Abort_IT+0xcc>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <HAL_DMA_Abort_IT+0xce>
 8004240:	2300      	movs	r3, #0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d065      	beq.n	8004312 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2204      	movs	r2, #4
 800424a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a60      	ldr	r2, [pc, #384]	; (80043d4 <HAL_DMA_Abort_IT+0x260>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d04a      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a5e      	ldr	r2, [pc, #376]	; (80043d8 <HAL_DMA_Abort_IT+0x264>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d045      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a5d      	ldr	r2, [pc, #372]	; (80043dc <HAL_DMA_Abort_IT+0x268>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d040      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a5b      	ldr	r2, [pc, #364]	; (80043e0 <HAL_DMA_Abort_IT+0x26c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d03b      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a5a      	ldr	r2, [pc, #360]	; (80043e4 <HAL_DMA_Abort_IT+0x270>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d036      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a58      	ldr	r2, [pc, #352]	; (80043e8 <HAL_DMA_Abort_IT+0x274>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d031      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a57      	ldr	r2, [pc, #348]	; (80043ec <HAL_DMA_Abort_IT+0x278>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d02c      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a55      	ldr	r2, [pc, #340]	; (80043f0 <HAL_DMA_Abort_IT+0x27c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d027      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a54      	ldr	r2, [pc, #336]	; (80043f4 <HAL_DMA_Abort_IT+0x280>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a52      	ldr	r2, [pc, #328]	; (80043f8 <HAL_DMA_Abort_IT+0x284>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01d      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a51      	ldr	r2, [pc, #324]	; (80043fc <HAL_DMA_Abort_IT+0x288>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d018      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a4f      	ldr	r2, [pc, #316]	; (8004400 <HAL_DMA_Abort_IT+0x28c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a4e      	ldr	r2, [pc, #312]	; (8004404 <HAL_DMA_Abort_IT+0x290>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00e      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a4c      	ldr	r2, [pc, #304]	; (8004408 <HAL_DMA_Abort_IT+0x294>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d009      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a4b      	ldr	r2, [pc, #300]	; (800440c <HAL_DMA_Abort_IT+0x298>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_DMA_Abort_IT+0x17a>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a49      	ldr	r2, [pc, #292]	; (8004410 <HAL_DMA_Abort_IT+0x29c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d108      	bne.n	8004300 <HAL_DMA_Abort_IT+0x18c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e147      	b.n	8004590 <HAL_DMA_Abort_IT+0x41c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e13e      	b.n	8004590 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 020e 	bic.w	r2, r2, #14
 8004320:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2b      	ldr	r2, [pc, #172]	; (80043d4 <HAL_DMA_Abort_IT+0x260>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d04a      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a29      	ldr	r2, [pc, #164]	; (80043d8 <HAL_DMA_Abort_IT+0x264>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d045      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a28      	ldr	r2, [pc, #160]	; (80043dc <HAL_DMA_Abort_IT+0x268>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d040      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a26      	ldr	r2, [pc, #152]	; (80043e0 <HAL_DMA_Abort_IT+0x26c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d03b      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a25      	ldr	r2, [pc, #148]	; (80043e4 <HAL_DMA_Abort_IT+0x270>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d036      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a23      	ldr	r2, [pc, #140]	; (80043e8 <HAL_DMA_Abort_IT+0x274>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d031      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a22      	ldr	r2, [pc, #136]	; (80043ec <HAL_DMA_Abort_IT+0x278>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d02c      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a20      	ldr	r2, [pc, #128]	; (80043f0 <HAL_DMA_Abort_IT+0x27c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d027      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <HAL_DMA_Abort_IT+0x280>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d022      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <HAL_DMA_Abort_IT+0x284>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01d      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1c      	ldr	r2, [pc, #112]	; (80043fc <HAL_DMA_Abort_IT+0x288>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d018      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <HAL_DMA_Abort_IT+0x28c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a19      	ldr	r2, [pc, #100]	; (8004404 <HAL_DMA_Abort_IT+0x290>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00e      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a17      	ldr	r2, [pc, #92]	; (8004408 <HAL_DMA_Abort_IT+0x294>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a16      	ldr	r2, [pc, #88]	; (800440c <HAL_DMA_Abort_IT+0x298>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d004      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x24e>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a14      	ldr	r2, [pc, #80]	; (8004410 <HAL_DMA_Abort_IT+0x29c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d128      	bne.n	8004414 <HAL_DMA_Abort_IT+0x2a0>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e027      	b.n	8004424 <HAL_DMA_Abort_IT+0x2b0>
 80043d4:	40020010 	.word	0x40020010
 80043d8:	40020028 	.word	0x40020028
 80043dc:	40020040 	.word	0x40020040
 80043e0:	40020058 	.word	0x40020058
 80043e4:	40020070 	.word	0x40020070
 80043e8:	40020088 	.word	0x40020088
 80043ec:	400200a0 	.word	0x400200a0
 80043f0:	400200b8 	.word	0x400200b8
 80043f4:	40020410 	.word	0x40020410
 80043f8:	40020428 	.word	0x40020428
 80043fc:	40020440 	.word	0x40020440
 8004400:	40020458 	.word	0x40020458
 8004404:	40020470 	.word	0x40020470
 8004408:	40020488 	.word	0x40020488
 800440c:	400204a0 	.word	0x400204a0
 8004410:	400204b8 	.word	0x400204b8
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a5c      	ldr	r2, [pc, #368]	; (800459c <HAL_DMA_Abort_IT+0x428>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d072      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a5b      	ldr	r2, [pc, #364]	; (80045a0 <HAL_DMA_Abort_IT+0x42c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d06d      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a59      	ldr	r2, [pc, #356]	; (80045a4 <HAL_DMA_Abort_IT+0x430>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d068      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a58      	ldr	r2, [pc, #352]	; (80045a8 <HAL_DMA_Abort_IT+0x434>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d063      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a56      	ldr	r2, [pc, #344]	; (80045ac <HAL_DMA_Abort_IT+0x438>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d05e      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a55      	ldr	r2, [pc, #340]	; (80045b0 <HAL_DMA_Abort_IT+0x43c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d059      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a53      	ldr	r2, [pc, #332]	; (80045b4 <HAL_DMA_Abort_IT+0x440>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d054      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a52      	ldr	r2, [pc, #328]	; (80045b8 <HAL_DMA_Abort_IT+0x444>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d04f      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a50      	ldr	r2, [pc, #320]	; (80045bc <HAL_DMA_Abort_IT+0x448>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d04a      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a4f      	ldr	r2, [pc, #316]	; (80045c0 <HAL_DMA_Abort_IT+0x44c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d045      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a4d      	ldr	r2, [pc, #308]	; (80045c4 <HAL_DMA_Abort_IT+0x450>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d040      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a4c      	ldr	r2, [pc, #304]	; (80045c8 <HAL_DMA_Abort_IT+0x454>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d03b      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a4a      	ldr	r2, [pc, #296]	; (80045cc <HAL_DMA_Abort_IT+0x458>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d036      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a49      	ldr	r2, [pc, #292]	; (80045d0 <HAL_DMA_Abort_IT+0x45c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d031      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a47      	ldr	r2, [pc, #284]	; (80045d4 <HAL_DMA_Abort_IT+0x460>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d02c      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a46      	ldr	r2, [pc, #280]	; (80045d8 <HAL_DMA_Abort_IT+0x464>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d027      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a44      	ldr	r2, [pc, #272]	; (80045dc <HAL_DMA_Abort_IT+0x468>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d022      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a43      	ldr	r2, [pc, #268]	; (80045e0 <HAL_DMA_Abort_IT+0x46c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d01d      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a41      	ldr	r2, [pc, #260]	; (80045e4 <HAL_DMA_Abort_IT+0x470>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d018      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a40      	ldr	r2, [pc, #256]	; (80045e8 <HAL_DMA_Abort_IT+0x474>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d013      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a3e      	ldr	r2, [pc, #248]	; (80045ec <HAL_DMA_Abort_IT+0x478>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00e      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a3d      	ldr	r2, [pc, #244]	; (80045f0 <HAL_DMA_Abort_IT+0x47c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d009      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a3b      	ldr	r2, [pc, #236]	; (80045f4 <HAL_DMA_Abort_IT+0x480>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_DMA_Abort_IT+0x3a0>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a3a      	ldr	r2, [pc, #232]	; (80045f8 <HAL_DMA_Abort_IT+0x484>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d101      	bne.n	8004518 <HAL_DMA_Abort_IT+0x3a4>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_DMA_Abort_IT+0x3a6>
 8004518:	2300      	movs	r3, #0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d028      	beq.n	8004570 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800452c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004532:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	2201      	movs	r2, #1
 800453e:	409a      	lsls	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800454c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00c      	beq.n	8004570 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004560:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004564:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800456e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40020010 	.word	0x40020010
 80045a0:	40020028 	.word	0x40020028
 80045a4:	40020040 	.word	0x40020040
 80045a8:	40020058 	.word	0x40020058
 80045ac:	40020070 	.word	0x40020070
 80045b0:	40020088 	.word	0x40020088
 80045b4:	400200a0 	.word	0x400200a0
 80045b8:	400200b8 	.word	0x400200b8
 80045bc:	40020410 	.word	0x40020410
 80045c0:	40020428 	.word	0x40020428
 80045c4:	40020440 	.word	0x40020440
 80045c8:	40020458 	.word	0x40020458
 80045cc:	40020470 	.word	0x40020470
 80045d0:	40020488 	.word	0x40020488
 80045d4:	400204a0 	.word	0x400204a0
 80045d8:	400204b8 	.word	0x400204b8
 80045dc:	58025408 	.word	0x58025408
 80045e0:	5802541c 	.word	0x5802541c
 80045e4:	58025430 	.word	0x58025430
 80045e8:	58025444 	.word	0x58025444
 80045ec:	58025458 	.word	0x58025458
 80045f0:	5802546c 	.word	0x5802546c
 80045f4:	58025480 	.word	0x58025480
 80045f8:	58025494 	.word	0x58025494

080045fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004608:	4b67      	ldr	r3, [pc, #412]	; (80047a8 <HAL_DMA_IRQHandler+0x1ac>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a67      	ldr	r2, [pc, #412]	; (80047ac <HAL_DMA_IRQHandler+0x1b0>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	0a9b      	lsrs	r3, r3, #10
 8004614:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a5f      	ldr	r2, [pc, #380]	; (80047b0 <HAL_DMA_IRQHandler+0x1b4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d04a      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a5d      	ldr	r2, [pc, #372]	; (80047b4 <HAL_DMA_IRQHandler+0x1b8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d045      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a5c      	ldr	r2, [pc, #368]	; (80047b8 <HAL_DMA_IRQHandler+0x1bc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d040      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5a      	ldr	r2, [pc, #360]	; (80047bc <HAL_DMA_IRQHandler+0x1c0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d03b      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a59      	ldr	r2, [pc, #356]	; (80047c0 <HAL_DMA_IRQHandler+0x1c4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d036      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a57      	ldr	r2, [pc, #348]	; (80047c4 <HAL_DMA_IRQHandler+0x1c8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d031      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a56      	ldr	r2, [pc, #344]	; (80047c8 <HAL_DMA_IRQHandler+0x1cc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d02c      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a54      	ldr	r2, [pc, #336]	; (80047cc <HAL_DMA_IRQHandler+0x1d0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d027      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a53      	ldr	r2, [pc, #332]	; (80047d0 <HAL_DMA_IRQHandler+0x1d4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d022      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a51      	ldr	r2, [pc, #324]	; (80047d4 <HAL_DMA_IRQHandler+0x1d8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01d      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a50      	ldr	r2, [pc, #320]	; (80047d8 <HAL_DMA_IRQHandler+0x1dc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d018      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a4e      	ldr	r2, [pc, #312]	; (80047dc <HAL_DMA_IRQHandler+0x1e0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a4d      	ldr	r2, [pc, #308]	; (80047e0 <HAL_DMA_IRQHandler+0x1e4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00e      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a4b      	ldr	r2, [pc, #300]	; (80047e4 <HAL_DMA_IRQHandler+0x1e8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d009      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a4a      	ldr	r2, [pc, #296]	; (80047e8 <HAL_DMA_IRQHandler+0x1ec>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_DMA_IRQHandler+0xd2>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a48      	ldr	r2, [pc, #288]	; (80047ec <HAL_DMA_IRQHandler+0x1f0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d101      	bne.n	80046d2 <HAL_DMA_IRQHandler+0xd6>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <HAL_DMA_IRQHandler+0xd8>
 80046d2:	2300      	movs	r3, #0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 842b 	beq.w	8004f30 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	2208      	movs	r2, #8
 80046e4:	409a      	lsls	r2, r3
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 80a2 	beq.w	8004834 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2e      	ldr	r2, [pc, #184]	; (80047b0 <HAL_DMA_IRQHandler+0x1b4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d04a      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a2d      	ldr	r2, [pc, #180]	; (80047b4 <HAL_DMA_IRQHandler+0x1b8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d045      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a2b      	ldr	r2, [pc, #172]	; (80047b8 <HAL_DMA_IRQHandler+0x1bc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d040      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2a      	ldr	r2, [pc, #168]	; (80047bc <HAL_DMA_IRQHandler+0x1c0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d03b      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a28      	ldr	r2, [pc, #160]	; (80047c0 <HAL_DMA_IRQHandler+0x1c4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d036      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <HAL_DMA_IRQHandler+0x1c8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d031      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a25      	ldr	r2, [pc, #148]	; (80047c8 <HAL_DMA_IRQHandler+0x1cc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d02c      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a24      	ldr	r2, [pc, #144]	; (80047cc <HAL_DMA_IRQHandler+0x1d0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d027      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a22      	ldr	r2, [pc, #136]	; (80047d0 <HAL_DMA_IRQHandler+0x1d4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d022      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a21      	ldr	r2, [pc, #132]	; (80047d4 <HAL_DMA_IRQHandler+0x1d8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d01d      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1f      	ldr	r2, [pc, #124]	; (80047d8 <HAL_DMA_IRQHandler+0x1dc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d018      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1e      	ldr	r2, [pc, #120]	; (80047dc <HAL_DMA_IRQHandler+0x1e0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d013      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1c      	ldr	r2, [pc, #112]	; (80047e0 <HAL_DMA_IRQHandler+0x1e4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00e      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1b      	ldr	r2, [pc, #108]	; (80047e4 <HAL_DMA_IRQHandler+0x1e8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d009      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a19      	ldr	r2, [pc, #100]	; (80047e8 <HAL_DMA_IRQHandler+0x1ec>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d004      	beq.n	8004790 <HAL_DMA_IRQHandler+0x194>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a18      	ldr	r2, [pc, #96]	; (80047ec <HAL_DMA_IRQHandler+0x1f0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d12f      	bne.n	80047f0 <HAL_DMA_IRQHandler+0x1f4>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	bf14      	ite	ne
 800479e:	2301      	movne	r3, #1
 80047a0:	2300      	moveq	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	e02e      	b.n	8004804 <HAL_DMA_IRQHandler+0x208>
 80047a6:	bf00      	nop
 80047a8:	24000000 	.word	0x24000000
 80047ac:	1b4e81b5 	.word	0x1b4e81b5
 80047b0:	40020010 	.word	0x40020010
 80047b4:	40020028 	.word	0x40020028
 80047b8:	40020040 	.word	0x40020040
 80047bc:	40020058 	.word	0x40020058
 80047c0:	40020070 	.word	0x40020070
 80047c4:	40020088 	.word	0x40020088
 80047c8:	400200a0 	.word	0x400200a0
 80047cc:	400200b8 	.word	0x400200b8
 80047d0:	40020410 	.word	0x40020410
 80047d4:	40020428 	.word	0x40020428
 80047d8:	40020440 	.word	0x40020440
 80047dc:	40020458 	.word	0x40020458
 80047e0:	40020470 	.word	0x40020470
 80047e4:	40020488 	.word	0x40020488
 80047e8:	400204a0 	.word	0x400204a0
 80047ec:	400204b8 	.word	0x400204b8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	bf14      	ite	ne
 80047fe:	2301      	movne	r3, #1
 8004800:	2300      	moveq	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d015      	beq.n	8004834 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0204 	bic.w	r2, r2, #4
 8004816:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	2208      	movs	r2, #8
 8004822:	409a      	lsls	r2, r3
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482c:	f043 0201 	orr.w	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	fa22 f303 	lsr.w	r3, r2, r3
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d06e      	beq.n	8004928 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a69      	ldr	r2, [pc, #420]	; (80049f4 <HAL_DMA_IRQHandler+0x3f8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d04a      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a67      	ldr	r2, [pc, #412]	; (80049f8 <HAL_DMA_IRQHandler+0x3fc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d045      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a66      	ldr	r2, [pc, #408]	; (80049fc <HAL_DMA_IRQHandler+0x400>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d040      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a64      	ldr	r2, [pc, #400]	; (8004a00 <HAL_DMA_IRQHandler+0x404>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d03b      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a63      	ldr	r2, [pc, #396]	; (8004a04 <HAL_DMA_IRQHandler+0x408>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d036      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a61      	ldr	r2, [pc, #388]	; (8004a08 <HAL_DMA_IRQHandler+0x40c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d031      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a60      	ldr	r2, [pc, #384]	; (8004a0c <HAL_DMA_IRQHandler+0x410>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d02c      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a5e      	ldr	r2, [pc, #376]	; (8004a10 <HAL_DMA_IRQHandler+0x414>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d027      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a5d      	ldr	r2, [pc, #372]	; (8004a14 <HAL_DMA_IRQHandler+0x418>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d022      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a5b      	ldr	r2, [pc, #364]	; (8004a18 <HAL_DMA_IRQHandler+0x41c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01d      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a5a      	ldr	r2, [pc, #360]	; (8004a1c <HAL_DMA_IRQHandler+0x420>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d018      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a58      	ldr	r2, [pc, #352]	; (8004a20 <HAL_DMA_IRQHandler+0x424>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a57      	ldr	r2, [pc, #348]	; (8004a24 <HAL_DMA_IRQHandler+0x428>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00e      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a55      	ldr	r2, [pc, #340]	; (8004a28 <HAL_DMA_IRQHandler+0x42c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d009      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a54      	ldr	r2, [pc, #336]	; (8004a2c <HAL_DMA_IRQHandler+0x430>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d004      	beq.n	80048ea <HAL_DMA_IRQHandler+0x2ee>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a52      	ldr	r2, [pc, #328]	; (8004a30 <HAL_DMA_IRQHandler+0x434>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d10a      	bne.n	8004900 <HAL_DMA_IRQHandler+0x304>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	e003      	b.n	8004908 <HAL_DMA_IRQHandler+0x30c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2300      	movs	r3, #0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00d      	beq.n	8004928 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	2201      	movs	r2, #1
 8004916:	409a      	lsls	r2, r3
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	f043 0202 	orr.w	r2, r3, #2
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	2204      	movs	r2, #4
 8004932:	409a      	lsls	r2, r3
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	4013      	ands	r3, r2
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 808f 	beq.w	8004a5c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <HAL_DMA_IRQHandler+0x3f8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d04a      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2a      	ldr	r2, [pc, #168]	; (80049f8 <HAL_DMA_IRQHandler+0x3fc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d045      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a29      	ldr	r2, [pc, #164]	; (80049fc <HAL_DMA_IRQHandler+0x400>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d040      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a27      	ldr	r2, [pc, #156]	; (8004a00 <HAL_DMA_IRQHandler+0x404>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d03b      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a26      	ldr	r2, [pc, #152]	; (8004a04 <HAL_DMA_IRQHandler+0x408>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d036      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a24      	ldr	r2, [pc, #144]	; (8004a08 <HAL_DMA_IRQHandler+0x40c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d031      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a23      	ldr	r2, [pc, #140]	; (8004a0c <HAL_DMA_IRQHandler+0x410>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d02c      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a21      	ldr	r2, [pc, #132]	; (8004a10 <HAL_DMA_IRQHandler+0x414>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d027      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a20      	ldr	r2, [pc, #128]	; (8004a14 <HAL_DMA_IRQHandler+0x418>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d022      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <HAL_DMA_IRQHandler+0x41c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01d      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <HAL_DMA_IRQHandler+0x420>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d018      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <HAL_DMA_IRQHandler+0x424>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1a      	ldr	r2, [pc, #104]	; (8004a24 <HAL_DMA_IRQHandler+0x428>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <HAL_DMA_IRQHandler+0x42c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a17      	ldr	r2, [pc, #92]	; (8004a2c <HAL_DMA_IRQHandler+0x430>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_DMA_IRQHandler+0x3e2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <HAL_DMA_IRQHandler+0x434>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d12a      	bne.n	8004a34 <HAL_DMA_IRQHandler+0x438>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	e023      	b.n	8004a3c <HAL_DMA_IRQHandler+0x440>
 80049f4:	40020010 	.word	0x40020010
 80049f8:	40020028 	.word	0x40020028
 80049fc:	40020040 	.word	0x40020040
 8004a00:	40020058 	.word	0x40020058
 8004a04:	40020070 	.word	0x40020070
 8004a08:	40020088 	.word	0x40020088
 8004a0c:	400200a0 	.word	0x400200a0
 8004a10:	400200b8 	.word	0x400200b8
 8004a14:	40020410 	.word	0x40020410
 8004a18:	40020428 	.word	0x40020428
 8004a1c:	40020440 	.word	0x40020440
 8004a20:	40020458 	.word	0x40020458
 8004a24:	40020470 	.word	0x40020470
 8004a28:	40020488 	.word	0x40020488
 8004a2c:	400204a0 	.word	0x400204a0
 8004a30:	400204b8 	.word	0x400204b8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	2204      	movs	r2, #4
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a54:	f043 0204 	orr.w	r2, r3, #4
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2210      	movs	r2, #16
 8004a66:	409a      	lsls	r2, r3
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80a6 	beq.w	8004bbe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a85      	ldr	r2, [pc, #532]	; (8004c8c <HAL_DMA_IRQHandler+0x690>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d04a      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a83      	ldr	r2, [pc, #524]	; (8004c90 <HAL_DMA_IRQHandler+0x694>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d045      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a82      	ldr	r2, [pc, #520]	; (8004c94 <HAL_DMA_IRQHandler+0x698>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d040      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a80      	ldr	r2, [pc, #512]	; (8004c98 <HAL_DMA_IRQHandler+0x69c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d03b      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a7f      	ldr	r2, [pc, #508]	; (8004c9c <HAL_DMA_IRQHandler+0x6a0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d036      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a7d      	ldr	r2, [pc, #500]	; (8004ca0 <HAL_DMA_IRQHandler+0x6a4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d031      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a7c      	ldr	r2, [pc, #496]	; (8004ca4 <HAL_DMA_IRQHandler+0x6a8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d02c      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a7a      	ldr	r2, [pc, #488]	; (8004ca8 <HAL_DMA_IRQHandler+0x6ac>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d027      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a79      	ldr	r2, [pc, #484]	; (8004cac <HAL_DMA_IRQHandler+0x6b0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d022      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a77      	ldr	r2, [pc, #476]	; (8004cb0 <HAL_DMA_IRQHandler+0x6b4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d01d      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a76      	ldr	r2, [pc, #472]	; (8004cb4 <HAL_DMA_IRQHandler+0x6b8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d018      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a74      	ldr	r2, [pc, #464]	; (8004cb8 <HAL_DMA_IRQHandler+0x6bc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d013      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a73      	ldr	r2, [pc, #460]	; (8004cbc <HAL_DMA_IRQHandler+0x6c0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00e      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a71      	ldr	r2, [pc, #452]	; (8004cc0 <HAL_DMA_IRQHandler+0x6c4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d009      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a70      	ldr	r2, [pc, #448]	; (8004cc4 <HAL_DMA_IRQHandler+0x6c8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x516>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a6e      	ldr	r2, [pc, #440]	; (8004cc8 <HAL_DMA_IRQHandler+0x6cc>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d10a      	bne.n	8004b28 <HAL_DMA_IRQHandler+0x52c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bf14      	ite	ne
 8004b20:	2301      	movne	r3, #1
 8004b22:	2300      	moveq	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	e009      	b.n	8004b3c <HAL_DMA_IRQHandler+0x540>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	bf14      	ite	ne
 8004b36:	2301      	movne	r3, #1
 8004b38:	2300      	moveq	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d03e      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2210      	movs	r2, #16
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d018      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d108      	bne.n	8004b7e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d024      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	4798      	blx	r3
 8004b7c:	e01f      	b.n	8004bbe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d01b      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	4798      	blx	r3
 8004b8e:	e016      	b.n	8004bbe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d107      	bne.n	8004bae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0208 	bic.w	r2, r2, #8
 8004bac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 8110 	beq.w	8004df4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2c      	ldr	r2, [pc, #176]	; (8004c8c <HAL_DMA_IRQHandler+0x690>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d04a      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2b      	ldr	r2, [pc, #172]	; (8004c90 <HAL_DMA_IRQHandler+0x694>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d045      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a29      	ldr	r2, [pc, #164]	; (8004c94 <HAL_DMA_IRQHandler+0x698>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d040      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a28      	ldr	r2, [pc, #160]	; (8004c98 <HAL_DMA_IRQHandler+0x69c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d03b      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a26      	ldr	r2, [pc, #152]	; (8004c9c <HAL_DMA_IRQHandler+0x6a0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d036      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a25      	ldr	r2, [pc, #148]	; (8004ca0 <HAL_DMA_IRQHandler+0x6a4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d031      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a23      	ldr	r2, [pc, #140]	; (8004ca4 <HAL_DMA_IRQHandler+0x6a8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d02c      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a22      	ldr	r2, [pc, #136]	; (8004ca8 <HAL_DMA_IRQHandler+0x6ac>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d027      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a20      	ldr	r2, [pc, #128]	; (8004cac <HAL_DMA_IRQHandler+0x6b0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d022      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <HAL_DMA_IRQHandler+0x6b4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d01d      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <HAL_DMA_IRQHandler+0x6b8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d018      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <HAL_DMA_IRQHandler+0x6bc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d013      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1a      	ldr	r2, [pc, #104]	; (8004cbc <HAL_DMA_IRQHandler+0x6c0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00e      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a19      	ldr	r2, [pc, #100]	; (8004cc0 <HAL_DMA_IRQHandler+0x6c4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d009      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a17      	ldr	r2, [pc, #92]	; (8004cc4 <HAL_DMA_IRQHandler+0x6c8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x678>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a16      	ldr	r2, [pc, #88]	; (8004cc8 <HAL_DMA_IRQHandler+0x6cc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d12b      	bne.n	8004ccc <HAL_DMA_IRQHandler+0x6d0>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	bf14      	ite	ne
 8004c82:	2301      	movne	r3, #1
 8004c84:	2300      	moveq	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	e02a      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x6e4>
 8004c8a:	bf00      	nop
 8004c8c:	40020010 	.word	0x40020010
 8004c90:	40020028 	.word	0x40020028
 8004c94:	40020040 	.word	0x40020040
 8004c98:	40020058 	.word	0x40020058
 8004c9c:	40020070 	.word	0x40020070
 8004ca0:	40020088 	.word	0x40020088
 8004ca4:	400200a0 	.word	0x400200a0
 8004ca8:	400200b8 	.word	0x400200b8
 8004cac:	40020410 	.word	0x40020410
 8004cb0:	40020428 	.word	0x40020428
 8004cb4:	40020440 	.word	0x40020440
 8004cb8:	40020458 	.word	0x40020458
 8004cbc:	40020470 	.word	0x40020470
 8004cc0:	40020488 	.word	0x40020488
 8004cc4:	400204a0 	.word	0x400204a0
 8004cc8:	400204b8 	.word	0x400204b8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bf14      	ite	ne
 8004cda:	2301      	movne	r3, #1
 8004cdc:	2300      	moveq	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 8087 	beq.w	8004df4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	2220      	movs	r2, #32
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d139      	bne.n	8004d76 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0216 	bic.w	r2, r2, #22
 8004d10:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d20:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d103      	bne.n	8004d32 <HAL_DMA_IRQHandler+0x736>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0208 	bic.w	r2, r2, #8
 8004d40:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	223f      	movs	r2, #63	; 0x3f
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 834a 	beq.w	8005400 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
          }
          return;
 8004d74:	e344      	b.n	8005400 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d018      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d108      	bne.n	8004da4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d02c      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4798      	blx	r3
 8004da2:	e027      	b.n	8004df4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d023      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	4798      	blx	r3
 8004db4:	e01e      	b.n	8004df4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10f      	bne.n	8004de4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0210 	bic.w	r2, r2, #16
 8004dd2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8306 	beq.w	800540a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 8088 	beq.w	8004f1c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2204      	movs	r2, #4
 8004e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a7a      	ldr	r2, [pc, #488]	; (8005004 <HAL_DMA_IRQHandler+0xa08>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d04a      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a79      	ldr	r2, [pc, #484]	; (8005008 <HAL_DMA_IRQHandler+0xa0c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d045      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a77      	ldr	r2, [pc, #476]	; (800500c <HAL_DMA_IRQHandler+0xa10>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d040      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a76      	ldr	r2, [pc, #472]	; (8005010 <HAL_DMA_IRQHandler+0xa14>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d03b      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a74      	ldr	r2, [pc, #464]	; (8005014 <HAL_DMA_IRQHandler+0xa18>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d036      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a73      	ldr	r2, [pc, #460]	; (8005018 <HAL_DMA_IRQHandler+0xa1c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d031      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a71      	ldr	r2, [pc, #452]	; (800501c <HAL_DMA_IRQHandler+0xa20>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d02c      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a70      	ldr	r2, [pc, #448]	; (8005020 <HAL_DMA_IRQHandler+0xa24>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d027      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a6e      	ldr	r2, [pc, #440]	; (8005024 <HAL_DMA_IRQHandler+0xa28>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a6d      	ldr	r2, [pc, #436]	; (8005028 <HAL_DMA_IRQHandler+0xa2c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d01d      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a6b      	ldr	r2, [pc, #428]	; (800502c <HAL_DMA_IRQHandler+0xa30>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a6a      	ldr	r2, [pc, #424]	; (8005030 <HAL_DMA_IRQHandler+0xa34>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a68      	ldr	r2, [pc, #416]	; (8005034 <HAL_DMA_IRQHandler+0xa38>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a67      	ldr	r2, [pc, #412]	; (8005038 <HAL_DMA_IRQHandler+0xa3c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a65      	ldr	r2, [pc, #404]	; (800503c <HAL_DMA_IRQHandler+0xa40>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x8b8>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a64      	ldr	r2, [pc, #400]	; (8005040 <HAL_DMA_IRQHandler+0xa44>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d108      	bne.n	8004ec6 <HAL_DMA_IRQHandler+0x8ca>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0201 	bic.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	e007      	b.n	8004ed6 <HAL_DMA_IRQHandler+0x8da>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d307      	bcc.n	8004ef2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f2      	bne.n	8004ed6 <HAL_DMA_IRQHandler+0x8da>
 8004ef0:	e000      	b.n	8004ef4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004ef2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d004      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2203      	movs	r2, #3
 8004f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004f0a:	e003      	b.n	8004f14 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8272 	beq.w	800540a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	4798      	blx	r3
 8004f2e:	e26c      	b.n	800540a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a43      	ldr	r2, [pc, #268]	; (8005044 <HAL_DMA_IRQHandler+0xa48>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d022      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x984>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a42      	ldr	r2, [pc, #264]	; (8005048 <HAL_DMA_IRQHandler+0xa4c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d01d      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x984>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a40      	ldr	r2, [pc, #256]	; (800504c <HAL_DMA_IRQHandler+0xa50>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d018      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x984>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a3f      	ldr	r2, [pc, #252]	; (8005050 <HAL_DMA_IRQHandler+0xa54>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d013      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x984>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a3d      	ldr	r2, [pc, #244]	; (8005054 <HAL_DMA_IRQHandler+0xa58>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00e      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x984>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a3c      	ldr	r2, [pc, #240]	; (8005058 <HAL_DMA_IRQHandler+0xa5c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d009      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x984>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a3a      	ldr	r2, [pc, #232]	; (800505c <HAL_DMA_IRQHandler+0xa60>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d004      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x984>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a39      	ldr	r2, [pc, #228]	; (8005060 <HAL_DMA_IRQHandler+0xa64>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d101      	bne.n	8004f84 <HAL_DMA_IRQHandler+0x988>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <HAL_DMA_IRQHandler+0x98a>
 8004f84:	2300      	movs	r3, #0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 823f 	beq.w	800540a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80cd 	beq.w	8005144 <HAL_DMA_IRQHandler+0xb48>
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80c7 	beq.w	8005144 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d049      	beq.n	8005064 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 8210 	beq.w	8005404 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fec:	e20a      	b.n	8005404 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 8206 	beq.w	8005404 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005000:	e200      	b.n	8005404 <HAL_DMA_IRQHandler+0xe08>
 8005002:	bf00      	nop
 8005004:	40020010 	.word	0x40020010
 8005008:	40020028 	.word	0x40020028
 800500c:	40020040 	.word	0x40020040
 8005010:	40020058 	.word	0x40020058
 8005014:	40020070 	.word	0x40020070
 8005018:	40020088 	.word	0x40020088
 800501c:	400200a0 	.word	0x400200a0
 8005020:	400200b8 	.word	0x400200b8
 8005024:	40020410 	.word	0x40020410
 8005028:	40020428 	.word	0x40020428
 800502c:	40020440 	.word	0x40020440
 8005030:	40020458 	.word	0x40020458
 8005034:	40020470 	.word	0x40020470
 8005038:	40020488 	.word	0x40020488
 800503c:	400204a0 	.word	0x400204a0
 8005040:	400204b8 	.word	0x400204b8
 8005044:	58025408 	.word	0x58025408
 8005048:	5802541c 	.word	0x5802541c
 800504c:	58025430 	.word	0x58025430
 8005050:	58025444 	.word	0x58025444
 8005054:	58025458 	.word	0x58025458
 8005058:	5802546c 	.word	0x5802546c
 800505c:	58025480 	.word	0x58025480
 8005060:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b00      	cmp	r3, #0
 800506c:	d160      	bne.n	8005130 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a8c      	ldr	r2, [pc, #560]	; (80052a4 <HAL_DMA_IRQHandler+0xca8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d04a      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a8a      	ldr	r2, [pc, #552]	; (80052a8 <HAL_DMA_IRQHandler+0xcac>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d045      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a89      	ldr	r2, [pc, #548]	; (80052ac <HAL_DMA_IRQHandler+0xcb0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d040      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a87      	ldr	r2, [pc, #540]	; (80052b0 <HAL_DMA_IRQHandler+0xcb4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d03b      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a86      	ldr	r2, [pc, #536]	; (80052b4 <HAL_DMA_IRQHandler+0xcb8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d036      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a84      	ldr	r2, [pc, #528]	; (80052b8 <HAL_DMA_IRQHandler+0xcbc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d031      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a83      	ldr	r2, [pc, #524]	; (80052bc <HAL_DMA_IRQHandler+0xcc0>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d02c      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a81      	ldr	r2, [pc, #516]	; (80052c0 <HAL_DMA_IRQHandler+0xcc4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d027      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a80      	ldr	r2, [pc, #512]	; (80052c4 <HAL_DMA_IRQHandler+0xcc8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d022      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a7e      	ldr	r2, [pc, #504]	; (80052c8 <HAL_DMA_IRQHandler+0xccc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d01d      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a7d      	ldr	r2, [pc, #500]	; (80052cc <HAL_DMA_IRQHandler+0xcd0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d018      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a7b      	ldr	r2, [pc, #492]	; (80052d0 <HAL_DMA_IRQHandler+0xcd4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d013      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a7a      	ldr	r2, [pc, #488]	; (80052d4 <HAL_DMA_IRQHandler+0xcd8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00e      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a78      	ldr	r2, [pc, #480]	; (80052d8 <HAL_DMA_IRQHandler+0xcdc>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d009      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a77      	ldr	r2, [pc, #476]	; (80052dc <HAL_DMA_IRQHandler+0xce0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d004      	beq.n	800510e <HAL_DMA_IRQHandler+0xb12>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a75      	ldr	r2, [pc, #468]	; (80052e0 <HAL_DMA_IRQHandler+0xce4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d108      	bne.n	8005120 <HAL_DMA_IRQHandler+0xb24>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0208 	bic.w	r2, r2, #8
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e007      	b.n	8005130 <HAL_DMA_IRQHandler+0xb34>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0204 	bic.w	r2, r2, #4
 800512e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8165 	beq.w	8005404 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005142:	e15f      	b.n	8005404 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	2202      	movs	r2, #2
 800514e:	409a      	lsls	r2, r3
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80c5 	beq.w	80052e4 <HAL_DMA_IRQHandler+0xce8>
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 80bf 	beq.w	80052e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	2202      	movs	r2, #2
 8005170:	409a      	lsls	r2, r3
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d018      	beq.n	80051b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 813a 	beq.w	8005408 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800519c:	e134      	b.n	8005408 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 8130 	beq.w	8005408 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051b0:	e12a      	b.n	8005408 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d168      	bne.n	800528e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a38      	ldr	r2, [pc, #224]	; (80052a4 <HAL_DMA_IRQHandler+0xca8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d04a      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a37      	ldr	r2, [pc, #220]	; (80052a8 <HAL_DMA_IRQHandler+0xcac>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d045      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a35      	ldr	r2, [pc, #212]	; (80052ac <HAL_DMA_IRQHandler+0xcb0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d040      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a34      	ldr	r2, [pc, #208]	; (80052b0 <HAL_DMA_IRQHandler+0xcb4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d03b      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a32      	ldr	r2, [pc, #200]	; (80052b4 <HAL_DMA_IRQHandler+0xcb8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d036      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a31      	ldr	r2, [pc, #196]	; (80052b8 <HAL_DMA_IRQHandler+0xcbc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d031      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2f      	ldr	r2, [pc, #188]	; (80052bc <HAL_DMA_IRQHandler+0xcc0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d02c      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2e      	ldr	r2, [pc, #184]	; (80052c0 <HAL_DMA_IRQHandler+0xcc4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d027      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a2c      	ldr	r2, [pc, #176]	; (80052c4 <HAL_DMA_IRQHandler+0xcc8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d022      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2b      	ldr	r2, [pc, #172]	; (80052c8 <HAL_DMA_IRQHandler+0xccc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d01d      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a29      	ldr	r2, [pc, #164]	; (80052cc <HAL_DMA_IRQHandler+0xcd0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d018      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a28      	ldr	r2, [pc, #160]	; (80052d0 <HAL_DMA_IRQHandler+0xcd4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d013      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a26      	ldr	r2, [pc, #152]	; (80052d4 <HAL_DMA_IRQHandler+0xcd8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00e      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a25      	ldr	r2, [pc, #148]	; (80052d8 <HAL_DMA_IRQHandler+0xcdc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d009      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a23      	ldr	r2, [pc, #140]	; (80052dc <HAL_DMA_IRQHandler+0xce0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <HAL_DMA_IRQHandler+0xc60>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a22      	ldr	r2, [pc, #136]	; (80052e0 <HAL_DMA_IRQHandler+0xce4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d108      	bne.n	800526e <HAL_DMA_IRQHandler+0xc72>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0214 	bic.w	r2, r2, #20
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e007      	b.n	800527e <HAL_DMA_IRQHandler+0xc82>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 020a 	bic.w	r2, r2, #10
 800527c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 80b8 	beq.w	8005408 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052a0:	e0b2      	b.n	8005408 <HAL_DMA_IRQHandler+0xe0c>
 80052a2:	bf00      	nop
 80052a4:	40020010 	.word	0x40020010
 80052a8:	40020028 	.word	0x40020028
 80052ac:	40020040 	.word	0x40020040
 80052b0:	40020058 	.word	0x40020058
 80052b4:	40020070 	.word	0x40020070
 80052b8:	40020088 	.word	0x40020088
 80052bc:	400200a0 	.word	0x400200a0
 80052c0:	400200b8 	.word	0x400200b8
 80052c4:	40020410 	.word	0x40020410
 80052c8:	40020428 	.word	0x40020428
 80052cc:	40020440 	.word	0x40020440
 80052d0:	40020458 	.word	0x40020458
 80052d4:	40020470 	.word	0x40020470
 80052d8:	40020488 	.word	0x40020488
 80052dc:	400204a0 	.word	0x400204a0
 80052e0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	2208      	movs	r2, #8
 80052ee:	409a      	lsls	r2, r3
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8088 	beq.w	800540a <HAL_DMA_IRQHandler+0xe0e>
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 8082 	beq.w	800540a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a41      	ldr	r2, [pc, #260]	; (8005410 <HAL_DMA_IRQHandler+0xe14>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d04a      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a3f      	ldr	r2, [pc, #252]	; (8005414 <HAL_DMA_IRQHandler+0xe18>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d045      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a3e      	ldr	r2, [pc, #248]	; (8005418 <HAL_DMA_IRQHandler+0xe1c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d040      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a3c      	ldr	r2, [pc, #240]	; (800541c <HAL_DMA_IRQHandler+0xe20>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d03b      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a3b      	ldr	r2, [pc, #236]	; (8005420 <HAL_DMA_IRQHandler+0xe24>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d036      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a39      	ldr	r2, [pc, #228]	; (8005424 <HAL_DMA_IRQHandler+0xe28>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d031      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a38      	ldr	r2, [pc, #224]	; (8005428 <HAL_DMA_IRQHandler+0xe2c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d02c      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a36      	ldr	r2, [pc, #216]	; (800542c <HAL_DMA_IRQHandler+0xe30>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d027      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a35      	ldr	r2, [pc, #212]	; (8005430 <HAL_DMA_IRQHandler+0xe34>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d022      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a33      	ldr	r2, [pc, #204]	; (8005434 <HAL_DMA_IRQHandler+0xe38>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d01d      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a32      	ldr	r2, [pc, #200]	; (8005438 <HAL_DMA_IRQHandler+0xe3c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d018      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a30      	ldr	r2, [pc, #192]	; (800543c <HAL_DMA_IRQHandler+0xe40>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d013      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a2f      	ldr	r2, [pc, #188]	; (8005440 <HAL_DMA_IRQHandler+0xe44>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00e      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a2d      	ldr	r2, [pc, #180]	; (8005444 <HAL_DMA_IRQHandler+0xe48>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d009      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a2c      	ldr	r2, [pc, #176]	; (8005448 <HAL_DMA_IRQHandler+0xe4c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d004      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xdaa>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a2a      	ldr	r2, [pc, #168]	; (800544c <HAL_DMA_IRQHandler+0xe50>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d108      	bne.n	80053b8 <HAL_DMA_IRQHandler+0xdbc>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 021c 	bic.w	r2, r2, #28
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	e007      	b.n	80053c8 <HAL_DMA_IRQHandler+0xdcc>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 020e 	bic.w	r2, r2, #14
 80053c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	2201      	movs	r2, #1
 80053d2:	409a      	lsls	r2, r3
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	4798      	blx	r3
 80053fe:	e004      	b.n	800540a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005400:	bf00      	nop
 8005402:	e002      	b.n	800540a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005404:	bf00      	nop
 8005406:	e000      	b.n	800540a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005408:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800540a:	3728      	adds	r7, #40	; 0x28
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40020010 	.word	0x40020010
 8005414:	40020028 	.word	0x40020028
 8005418:	40020040 	.word	0x40020040
 800541c:	40020058 	.word	0x40020058
 8005420:	40020070 	.word	0x40020070
 8005424:	40020088 	.word	0x40020088
 8005428:	400200a0 	.word	0x400200a0
 800542c:	400200b8 	.word	0x400200b8
 8005430:	40020410 	.word	0x40020410
 8005434:	40020428 	.word	0x40020428
 8005438:	40020440 	.word	0x40020440
 800543c:	40020458 	.word	0x40020458
 8005440:	40020470 	.word	0x40020470
 8005444:	40020488 	.word	0x40020488
 8005448:	400204a0 	.word	0x400204a0
 800544c:	400204b8 	.word	0x400204b8

08005450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a42      	ldr	r2, [pc, #264]	; (8005568 <DMA_CalcBaseAndBitshift+0x118>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d04a      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a41      	ldr	r2, [pc, #260]	; (800556c <DMA_CalcBaseAndBitshift+0x11c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d045      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a3f      	ldr	r2, [pc, #252]	; (8005570 <DMA_CalcBaseAndBitshift+0x120>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d040      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a3e      	ldr	r2, [pc, #248]	; (8005574 <DMA_CalcBaseAndBitshift+0x124>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d03b      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a3c      	ldr	r2, [pc, #240]	; (8005578 <DMA_CalcBaseAndBitshift+0x128>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d036      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a3b      	ldr	r2, [pc, #236]	; (800557c <DMA_CalcBaseAndBitshift+0x12c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d031      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a39      	ldr	r2, [pc, #228]	; (8005580 <DMA_CalcBaseAndBitshift+0x130>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d02c      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a38      	ldr	r2, [pc, #224]	; (8005584 <DMA_CalcBaseAndBitshift+0x134>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d027      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a36      	ldr	r2, [pc, #216]	; (8005588 <DMA_CalcBaseAndBitshift+0x138>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d022      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a35      	ldr	r2, [pc, #212]	; (800558c <DMA_CalcBaseAndBitshift+0x13c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d01d      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a33      	ldr	r2, [pc, #204]	; (8005590 <DMA_CalcBaseAndBitshift+0x140>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d018      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a32      	ldr	r2, [pc, #200]	; (8005594 <DMA_CalcBaseAndBitshift+0x144>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a30      	ldr	r2, [pc, #192]	; (8005598 <DMA_CalcBaseAndBitshift+0x148>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00e      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2f      	ldr	r2, [pc, #188]	; (800559c <DMA_CalcBaseAndBitshift+0x14c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d009      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a2d      	ldr	r2, [pc, #180]	; (80055a0 <DMA_CalcBaseAndBitshift+0x150>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <DMA_CalcBaseAndBitshift+0xa8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a2c      	ldr	r2, [pc, #176]	; (80055a4 <DMA_CalcBaseAndBitshift+0x154>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d101      	bne.n	80054fc <DMA_CalcBaseAndBitshift+0xac>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <DMA_CalcBaseAndBitshift+0xae>
 80054fc:	2300      	movs	r3, #0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d024      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	3b10      	subs	r3, #16
 800550a:	4a27      	ldr	r2, [pc, #156]	; (80055a8 <DMA_CalcBaseAndBitshift+0x158>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	4a24      	ldr	r2, [pc, #144]	; (80055ac <DMA_CalcBaseAndBitshift+0x15c>)
 800551c:	5cd3      	ldrb	r3, [r2, r3]
 800551e:	461a      	mov	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b03      	cmp	r3, #3
 8005528:	d908      	bls.n	800553c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <DMA_CalcBaseAndBitshift+0x160>)
 8005532:	4013      	ands	r3, r2
 8005534:	1d1a      	adds	r2, r3, #4
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	659a      	str	r2, [r3, #88]	; 0x58
 800553a:	e00d      	b.n	8005558 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	4b1b      	ldr	r3, [pc, #108]	; (80055b0 <DMA_CalcBaseAndBitshift+0x160>)
 8005544:	4013      	ands	r3, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6593      	str	r3, [r2, #88]	; 0x58
 800554a:	e005      	b.n	8005558 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	40020010 	.word	0x40020010
 800556c:	40020028 	.word	0x40020028
 8005570:	40020040 	.word	0x40020040
 8005574:	40020058 	.word	0x40020058
 8005578:	40020070 	.word	0x40020070
 800557c:	40020088 	.word	0x40020088
 8005580:	400200a0 	.word	0x400200a0
 8005584:	400200b8 	.word	0x400200b8
 8005588:	40020410 	.word	0x40020410
 800558c:	40020428 	.word	0x40020428
 8005590:	40020440 	.word	0x40020440
 8005594:	40020458 	.word	0x40020458
 8005598:	40020470 	.word	0x40020470
 800559c:	40020488 	.word	0x40020488
 80055a0:	400204a0 	.word	0x400204a0
 80055a4:	400204b8 	.word	0x400204b8
 80055a8:	aaaaaaab 	.word	0xaaaaaaab
 80055ac:	0800e190 	.word	0x0800e190
 80055b0:	fffffc00 	.word	0xfffffc00

080055b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d120      	bne.n	800560a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d858      	bhi.n	8005682 <DMA_CheckFifoParam+0xce>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <DMA_CheckFifoParam+0x24>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	080055e9 	.word	0x080055e9
 80055dc:	080055fb 	.word	0x080055fb
 80055e0:	080055e9 	.word	0x080055e9
 80055e4:	08005683 	.word	0x08005683
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d048      	beq.n	8005686 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055f8:	e045      	b.n	8005686 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005602:	d142      	bne.n	800568a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005608:	e03f      	b.n	800568a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005612:	d123      	bne.n	800565c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	2b03      	cmp	r3, #3
 800561a:	d838      	bhi.n	800568e <DMA_CheckFifoParam+0xda>
 800561c:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <DMA_CheckFifoParam+0x70>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005635 	.word	0x08005635
 8005628:	0800563b 	.word	0x0800563b
 800562c:	08005635 	.word	0x08005635
 8005630:	0800564d 	.word	0x0800564d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
        break;
 8005638:	e030      	b.n	800569c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d025      	beq.n	8005692 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800564a:	e022      	b.n	8005692 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005654:	d11f      	bne.n	8005696 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800565a:	e01c      	b.n	8005696 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	2b02      	cmp	r3, #2
 8005662:	d902      	bls.n	800566a <DMA_CheckFifoParam+0xb6>
 8005664:	2b03      	cmp	r3, #3
 8005666:	d003      	beq.n	8005670 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005668:	e018      	b.n	800569c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
        break;
 800566e:	e015      	b.n	800569c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00e      	beq.n	800569a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	73fb      	strb	r3, [r7, #15]
    break;
 8005680:	e00b      	b.n	800569a <DMA_CheckFifoParam+0xe6>
        break;
 8005682:	bf00      	nop
 8005684:	e00a      	b.n	800569c <DMA_CheckFifoParam+0xe8>
        break;
 8005686:	bf00      	nop
 8005688:	e008      	b.n	800569c <DMA_CheckFifoParam+0xe8>
        break;
 800568a:	bf00      	nop
 800568c:	e006      	b.n	800569c <DMA_CheckFifoParam+0xe8>
        break;
 800568e:	bf00      	nop
 8005690:	e004      	b.n	800569c <DMA_CheckFifoParam+0xe8>
        break;
 8005692:	bf00      	nop
 8005694:	e002      	b.n	800569c <DMA_CheckFifoParam+0xe8>
        break;
 8005696:	bf00      	nop
 8005698:	e000      	b.n	800569c <DMA_CheckFifoParam+0xe8>
    break;
 800569a:	bf00      	nop
    }
  }

  return status;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop

080056ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a38      	ldr	r2, [pc, #224]	; (80057a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d022      	beq.n	800570a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a36      	ldr	r2, [pc, #216]	; (80057a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01d      	beq.n	800570a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a35      	ldr	r2, [pc, #212]	; (80057a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d018      	beq.n	800570a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a33      	ldr	r2, [pc, #204]	; (80057ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d013      	beq.n	800570a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a32      	ldr	r2, [pc, #200]	; (80057b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00e      	beq.n	800570a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a30      	ldr	r2, [pc, #192]	; (80057b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d009      	beq.n	800570a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a2f      	ldr	r2, [pc, #188]	; (80057b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a2d      	ldr	r2, [pc, #180]	; (80057bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d101      	bne.n	800570e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800570e:	2300      	movs	r3, #0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01a      	beq.n	800574a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	3b08      	subs	r3, #8
 800571c:	4a28      	ldr	r2, [pc, #160]	; (80057c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	091b      	lsrs	r3, r3, #4
 8005724:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4b26      	ldr	r3, [pc, #152]	; (80057c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a24      	ldr	r2, [pc, #144]	; (80057c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005738:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	2201      	movs	r2, #1
 8005742:	409a      	lsls	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005748:	e024      	b.n	8005794 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	3b10      	subs	r3, #16
 8005752:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005754:	fba2 2303 	umull	r2, r3, r2, r3
 8005758:	091b      	lsrs	r3, r3, #4
 800575a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4a1c      	ldr	r2, [pc, #112]	; (80057d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d806      	bhi.n	8005772 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4a1b      	ldr	r2, [pc, #108]	; (80057d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d902      	bls.n	8005772 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3308      	adds	r3, #8
 8005770:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4b18      	ldr	r3, [pc, #96]	; (80057d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	461a      	mov	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a16      	ldr	r2, [pc, #88]	; (80057dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005784:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	2201      	movs	r2, #1
 800578e:	409a      	lsls	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	58025408 	.word	0x58025408
 80057a4:	5802541c 	.word	0x5802541c
 80057a8:	58025430 	.word	0x58025430
 80057ac:	58025444 	.word	0x58025444
 80057b0:	58025458 	.word	0x58025458
 80057b4:	5802546c 	.word	0x5802546c
 80057b8:	58025480 	.word	0x58025480
 80057bc:	58025494 	.word	0x58025494
 80057c0:	cccccccd 	.word	0xcccccccd
 80057c4:	16009600 	.word	0x16009600
 80057c8:	58025880 	.word	0x58025880
 80057cc:	aaaaaaab 	.word	0xaaaaaaab
 80057d0:	400204b8 	.word	0x400204b8
 80057d4:	4002040f 	.word	0x4002040f
 80057d8:	10008200 	.word	0x10008200
 80057dc:	40020880 	.word	0x40020880

080057e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d04a      	beq.n	800588c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d847      	bhi.n	800588c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a25      	ldr	r2, [pc, #148]	; (8005898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d022      	beq.n	800584c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a24      	ldr	r2, [pc, #144]	; (800589c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d01d      	beq.n	800584c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d018      	beq.n	800584c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1f      	ldr	r2, [pc, #124]	; (80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00e      	beq.n	800584c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1e      	ldr	r2, [pc, #120]	; (80058ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d009      	beq.n	800584c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1c      	ldr	r2, [pc, #112]	; (80058b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1b      	ldr	r2, [pc, #108]	; (80058b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d101      	bne.n	8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005850:	2300      	movs	r3, #0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4b17      	ldr	r3, [pc, #92]	; (80058b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	461a      	mov	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a15      	ldr	r2, [pc, #84]	; (80058bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005868:	671a      	str	r2, [r3, #112]	; 0x70
 800586a:	e009      	b.n	8005880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	461a      	mov	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a11      	ldr	r2, [pc, #68]	; (80058c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800587e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	3b01      	subs	r3, #1
 8005884:	2201      	movs	r2, #1
 8005886:	409a      	lsls	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800588c:	bf00      	nop
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	58025408 	.word	0x58025408
 800589c:	5802541c 	.word	0x5802541c
 80058a0:	58025430 	.word	0x58025430
 80058a4:	58025444 	.word	0x58025444
 80058a8:	58025458 	.word	0x58025458
 80058ac:	5802546c 	.word	0x5802546c
 80058b0:	58025480 	.word	0x58025480
 80058b4:	58025494 	.word	0x58025494
 80058b8:	1600963f 	.word	0x1600963f
 80058bc:	58025940 	.word	0x58025940
 80058c0:	1000823f 	.word	0x1000823f
 80058c4:	40020940 	.word	0x40020940

080058c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b089      	sub	sp, #36	; 0x24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80058d6:	4b89      	ldr	r3, [pc, #548]	; (8005afc <HAL_GPIO_Init+0x234>)
 80058d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058da:	e194      	b.n	8005c06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	2101      	movs	r1, #1
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	fa01 f303 	lsl.w	r3, r1, r3
 80058e8:	4013      	ands	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8186 	beq.w	8005c00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d005      	beq.n	800590c <HAL_GPIO_Init+0x44>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d130      	bne.n	800596e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	2203      	movs	r2, #3
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	43db      	mvns	r3, r3
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	4013      	ands	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4313      	orrs	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005942:	2201      	movs	r2, #1
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4013      	ands	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	091b      	lsrs	r3, r3, #4
 8005958:	f003 0201 	and.w	r2, r3, #1
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4313      	orrs	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b03      	cmp	r3, #3
 8005978:	d017      	beq.n	80059aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	2203      	movs	r2, #3
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4013      	ands	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d123      	bne.n	80059fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	08da      	lsrs	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3208      	adds	r2, #8
 80059be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	220f      	movs	r2, #15
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	08da      	lsrs	r2, r3, #3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3208      	adds	r2, #8
 80059f8:	69b9      	ldr	r1, [r7, #24]
 80059fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	2203      	movs	r2, #3
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4013      	ands	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f003 0203 	and.w	r2, r3, #3
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80e0 	beq.w	8005c00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a40:	4b2f      	ldr	r3, [pc, #188]	; (8005b00 <HAL_GPIO_Init+0x238>)
 8005a42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a46:	4a2e      	ldr	r2, [pc, #184]	; (8005b00 <HAL_GPIO_Init+0x238>)
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a50:	4b2b      	ldr	r3, [pc, #172]	; (8005b00 <HAL_GPIO_Init+0x238>)
 8005a52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a5e:	4a29      	ldr	r2, [pc, #164]	; (8005b04 <HAL_GPIO_Init+0x23c>)
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	089b      	lsrs	r3, r3, #2
 8005a64:	3302      	adds	r3, #2
 8005a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	220f      	movs	r2, #15
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	43db      	mvns	r3, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a20      	ldr	r2, [pc, #128]	; (8005b08 <HAL_GPIO_Init+0x240>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d052      	beq.n	8005b30 <HAL_GPIO_Init+0x268>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <HAL_GPIO_Init+0x244>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d031      	beq.n	8005af6 <HAL_GPIO_Init+0x22e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a1e      	ldr	r2, [pc, #120]	; (8005b10 <HAL_GPIO_Init+0x248>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d02b      	beq.n	8005af2 <HAL_GPIO_Init+0x22a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <HAL_GPIO_Init+0x24c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d025      	beq.n	8005aee <HAL_GPIO_Init+0x226>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a1c      	ldr	r2, [pc, #112]	; (8005b18 <HAL_GPIO_Init+0x250>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d01f      	beq.n	8005aea <HAL_GPIO_Init+0x222>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a1b      	ldr	r2, [pc, #108]	; (8005b1c <HAL_GPIO_Init+0x254>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d019      	beq.n	8005ae6 <HAL_GPIO_Init+0x21e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a1a      	ldr	r2, [pc, #104]	; (8005b20 <HAL_GPIO_Init+0x258>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <HAL_GPIO_Init+0x21a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a19      	ldr	r2, [pc, #100]	; (8005b24 <HAL_GPIO_Init+0x25c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00d      	beq.n	8005ade <HAL_GPIO_Init+0x216>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a18      	ldr	r2, [pc, #96]	; (8005b28 <HAL_GPIO_Init+0x260>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d007      	beq.n	8005ada <HAL_GPIO_Init+0x212>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <HAL_GPIO_Init+0x264>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d101      	bne.n	8005ad6 <HAL_GPIO_Init+0x20e>
 8005ad2:	2309      	movs	r3, #9
 8005ad4:	e02d      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005ad6:	230a      	movs	r3, #10
 8005ad8:	e02b      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005ada:	2308      	movs	r3, #8
 8005adc:	e029      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005ade:	2307      	movs	r3, #7
 8005ae0:	e027      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005ae2:	2306      	movs	r3, #6
 8005ae4:	e025      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005ae6:	2305      	movs	r3, #5
 8005ae8:	e023      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005aea:	2304      	movs	r3, #4
 8005aec:	e021      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005aee:	2303      	movs	r3, #3
 8005af0:	e01f      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005af2:	2302      	movs	r3, #2
 8005af4:	e01d      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e01b      	b.n	8005b32 <HAL_GPIO_Init+0x26a>
 8005afa:	bf00      	nop
 8005afc:	58000080 	.word	0x58000080
 8005b00:	58024400 	.word	0x58024400
 8005b04:	58000400 	.word	0x58000400
 8005b08:	58020000 	.word	0x58020000
 8005b0c:	58020400 	.word	0x58020400
 8005b10:	58020800 	.word	0x58020800
 8005b14:	58020c00 	.word	0x58020c00
 8005b18:	58021000 	.word	0x58021000
 8005b1c:	58021400 	.word	0x58021400
 8005b20:	58021800 	.word	0x58021800
 8005b24:	58021c00 	.word	0x58021c00
 8005b28:	58022000 	.word	0x58022000
 8005b2c:	58022400 	.word	0x58022400
 8005b30:	2300      	movs	r3, #0
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	f002 0203 	and.w	r2, r2, #3
 8005b38:	0092      	lsls	r2, r2, #2
 8005b3a:	4093      	lsls	r3, r2
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b42:	4938      	ldr	r1, [pc, #224]	; (8005c24 <HAL_GPIO_Init+0x35c>)
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	089b      	lsrs	r3, r3, #2
 8005b48:	3302      	adds	r3, #2
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	43db      	mvns	r3, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	43db      	mvns	r3, r3
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	4013      	ands	r3, r2
 8005be4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	3301      	adds	r3, #1
 8005c04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f47f ae63 	bne.w	80058dc <HAL_GPIO_Init+0x14>
  }
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	3724      	adds	r7, #36	; 0x24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	58000400 	.word	0x58000400

08005c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]
 8005c34:	4613      	mov	r3, r2
 8005c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c38:	787b      	ldrb	r3, [r7, #1]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c3e:	887a      	ldrh	r2, [r7, #2]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005c44:	e003      	b.n	8005c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c46:	887b      	ldrh	r3, [r7, #2]
 8005c48:	041a      	lsls	r2, r3, #16
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	619a      	str	r2, [r3, #24]
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	4603      	mov	r3, r0
 8005c62:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c6c:	88fb      	ldrh	r3, [r7, #6]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c78:	88fb      	ldrh	r3, [r7, #6]
 8005c7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fc f9a3 	bl	8001fcc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c98:	4b19      	ldr	r3, [pc, #100]	; (8005d00 <HAL_PWREx_ConfigSupply+0x70>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d00a      	beq.n	8005cba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ca4:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <HAL_PWREx_ConfigSupply+0x70>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d001      	beq.n	8005cb6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e01f      	b.n	8005cf6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e01d      	b.n	8005cf6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005cba:	4b11      	ldr	r3, [pc, #68]	; (8005d00 <HAL_PWREx_ConfigSupply+0x70>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f023 0207 	bic.w	r2, r3, #7
 8005cc2:	490f      	ldr	r1, [pc, #60]	; (8005d00 <HAL_PWREx_ConfigSupply+0x70>)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005cca:	f7fd f9bb 	bl	8003044 <HAL_GetTick>
 8005cce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cd0:	e009      	b.n	8005ce6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cd2:	f7fd f9b7 	bl	8003044 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ce0:	d901      	bls.n	8005ce6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e007      	b.n	8005cf6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <HAL_PWREx_ConfigSupply+0x70>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf2:	d1ee      	bne.n	8005cd2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	58024800 	.word	0x58024800

08005d04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08c      	sub	sp, #48	; 0x30
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d102      	bne.n	8005d18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f000 bc1c 	b.w	8006550 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8087 	beq.w	8005e34 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d26:	4b9e      	ldr	r3, [pc, #632]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d30:	4b9b      	ldr	r3, [pc, #620]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	2b10      	cmp	r3, #16
 8005d3a:	d007      	beq.n	8005d4c <HAL_RCC_OscConfig+0x48>
 8005d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3e:	2b18      	cmp	r3, #24
 8005d40:	d110      	bne.n	8005d64 <HAL_RCC_OscConfig+0x60>
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	f003 0303 	and.w	r3, r3, #3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d10b      	bne.n	8005d64 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	4b94      	ldr	r3, [pc, #592]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d06c      	beq.n	8005e32 <HAL_RCC_OscConfig+0x12e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d168      	bne.n	8005e32 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e3f5      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6c:	d106      	bne.n	8005d7c <HAL_RCC_OscConfig+0x78>
 8005d6e:	4b8c      	ldr	r3, [pc, #560]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a8b      	ldr	r2, [pc, #556]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e02e      	b.n	8005dda <HAL_RCC_OscConfig+0xd6>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10c      	bne.n	8005d9e <HAL_RCC_OscConfig+0x9a>
 8005d84:	4b86      	ldr	r3, [pc, #536]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a85      	ldr	r2, [pc, #532]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	4b83      	ldr	r3, [pc, #524]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a82      	ldr	r2, [pc, #520]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	e01d      	b.n	8005dda <HAL_RCC_OscConfig+0xd6>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005da6:	d10c      	bne.n	8005dc2 <HAL_RCC_OscConfig+0xbe>
 8005da8:	4b7d      	ldr	r3, [pc, #500]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a7c      	ldr	r2, [pc, #496]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	4b7a      	ldr	r3, [pc, #488]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a79      	ldr	r2, [pc, #484]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	e00b      	b.n	8005dda <HAL_RCC_OscConfig+0xd6>
 8005dc2:	4b77      	ldr	r3, [pc, #476]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a76      	ldr	r2, [pc, #472]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	4b74      	ldr	r3, [pc, #464]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a73      	ldr	r2, [pc, #460]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dd8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d013      	beq.n	8005e0a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de2:	f7fd f92f 	bl	8003044 <HAL_GetTick>
 8005de6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dea:	f7fd f92b 	bl	8003044 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b64      	cmp	r3, #100	; 0x64
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e3a9      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dfc:	4b68      	ldr	r3, [pc, #416]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0f0      	beq.n	8005dea <HAL_RCC_OscConfig+0xe6>
 8005e08:	e014      	b.n	8005e34 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0a:	f7fd f91b 	bl	8003044 <HAL_GetTick>
 8005e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e12:	f7fd f917 	bl	8003044 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b64      	cmp	r3, #100	; 0x64
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e395      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e24:	4b5e      	ldr	r3, [pc, #376]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1f0      	bne.n	8005e12 <HAL_RCC_OscConfig+0x10e>
 8005e30:	e000      	b.n	8005e34 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80ca 	beq.w	8005fd6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e42:	4b57      	ldr	r3, [pc, #348]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e4a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e4c:	4b54      	ldr	r3, [pc, #336]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <HAL_RCC_OscConfig+0x164>
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	2b18      	cmp	r3, #24
 8005e5c:	d156      	bne.n	8005f0c <HAL_RCC_OscConfig+0x208>
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d151      	bne.n	8005f0c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e68:	4b4d      	ldr	r3, [pc, #308]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_RCC_OscConfig+0x17c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e367      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e80:	4b47      	ldr	r3, [pc, #284]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f023 0219 	bic.w	r2, r3, #25
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4944      	ldr	r1, [pc, #272]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e92:	f7fd f8d7 	bl	8003044 <HAL_GetTick>
 8005e96:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e9a:	f7fd f8d3 	bl	8003044 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e351      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eac:	4b3c      	ldr	r3, [pc, #240]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0f0      	beq.n	8005e9a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb8:	f7fd f8d0 	bl	800305c <HAL_GetREVID>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d817      	bhi.n	8005ef6 <HAL_RCC_OscConfig+0x1f2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b40      	cmp	r3, #64	; 0x40
 8005ecc:	d108      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x1dc>
 8005ece:	4b34      	ldr	r3, [pc, #208]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ed6:	4a32      	ldr	r2, [pc, #200]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005edc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ede:	e07a      	b.n	8005fd6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee0:	4b2f      	ldr	r3, [pc, #188]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	031b      	lsls	r3, r3, #12
 8005eee:	492c      	ldr	r1, [pc, #176]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ef4:	e06f      	b.n	8005fd6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef6:	4b2a      	ldr	r3, [pc, #168]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	061b      	lsls	r3, r3, #24
 8005f04:	4926      	ldr	r1, [pc, #152]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f0a:	e064      	b.n	8005fd6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d047      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f14:	4b22      	ldr	r3, [pc, #136]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f023 0219 	bic.w	r2, r3, #25
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	491f      	ldr	r1, [pc, #124]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f26:	f7fd f88d 	bl	8003044 <HAL_GetTick>
 8005f2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f2e:	f7fd f889 	bl	8003044 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e307      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f40:	4b17      	ldr	r3, [pc, #92]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f0      	beq.n	8005f2e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f4c:	f7fd f886 	bl	800305c <HAL_GetREVID>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d817      	bhi.n	8005f8a <HAL_RCC_OscConfig+0x286>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b40      	cmp	r3, #64	; 0x40
 8005f60:	d108      	bne.n	8005f74 <HAL_RCC_OscConfig+0x270>
 8005f62:	4b0f      	ldr	r3, [pc, #60]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f6a:	4a0d      	ldr	r2, [pc, #52]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f70:	6053      	str	r3, [r2, #4]
 8005f72:	e030      	b.n	8005fd6 <HAL_RCC_OscConfig+0x2d2>
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	031b      	lsls	r3, r3, #12
 8005f82:	4907      	ldr	r1, [pc, #28]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	604b      	str	r3, [r1, #4]
 8005f88:	e025      	b.n	8005fd6 <HAL_RCC_OscConfig+0x2d2>
 8005f8a:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	061b      	lsls	r3, r3, #24
 8005f98:	4901      	ldr	r1, [pc, #4]	; (8005fa0 <HAL_RCC_OscConfig+0x29c>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	604b      	str	r3, [r1, #4]
 8005f9e:	e01a      	b.n	8005fd6 <HAL_RCC_OscConfig+0x2d2>
 8005fa0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fa4:	4b9e      	ldr	r3, [pc, #632]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a9d      	ldr	r2, [pc, #628]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8005faa:	f023 0301 	bic.w	r3, r3, #1
 8005fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb0:	f7fd f848 	bl	8003044 <HAL_GetTick>
 8005fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fb8:	f7fd f844 	bl	8003044 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e2c2      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fca:	4b95      	ldr	r3, [pc, #596]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0304 	and.w	r3, r3, #4
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 80a9 	beq.w	8006136 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fe4:	4b8e      	ldr	r3, [pc, #568]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fee:	4b8c      	ldr	r3, [pc, #560]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d007      	beq.n	800600a <HAL_RCC_OscConfig+0x306>
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b18      	cmp	r3, #24
 8005ffe:	d13a      	bne.n	8006076 <HAL_RCC_OscConfig+0x372>
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	2b01      	cmp	r3, #1
 8006008:	d135      	bne.n	8006076 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800600a:	4b85      	ldr	r3, [pc, #532]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <HAL_RCC_OscConfig+0x31e>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	2b80      	cmp	r3, #128	; 0x80
 800601c:	d001      	beq.n	8006022 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e296      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006022:	f7fd f81b 	bl	800305c <HAL_GetREVID>
 8006026:	4603      	mov	r3, r0
 8006028:	f241 0203 	movw	r2, #4099	; 0x1003
 800602c:	4293      	cmp	r3, r2
 800602e:	d817      	bhi.n	8006060 <HAL_RCC_OscConfig+0x35c>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	2b20      	cmp	r3, #32
 8006036:	d108      	bne.n	800604a <HAL_RCC_OscConfig+0x346>
 8006038:	4b79      	ldr	r3, [pc, #484]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006040:	4a77      	ldr	r2, [pc, #476]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8006042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006046:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006048:	e075      	b.n	8006136 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800604a:	4b75      	ldr	r3, [pc, #468]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	069b      	lsls	r3, r3, #26
 8006058:	4971      	ldr	r1, [pc, #452]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 800605a:	4313      	orrs	r3, r2
 800605c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800605e:	e06a      	b.n	8006136 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006060:	4b6f      	ldr	r3, [pc, #444]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	061b      	lsls	r3, r3, #24
 800606e:	496c      	ldr	r1, [pc, #432]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8006070:	4313      	orrs	r3, r2
 8006072:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006074:	e05f      	b.n	8006136 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d042      	beq.n	8006104 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800607e:	4b68      	ldr	r3, [pc, #416]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a67      	ldr	r2, [pc, #412]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8006084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608a:	f7fc ffdb 	bl	8003044 <HAL_GetTick>
 800608e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006092:	f7fc ffd7 	bl	8003044 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e255      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060a4:	4b5e      	ldr	r3, [pc, #376]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060b0:	f7fc ffd4 	bl	800305c <HAL_GetREVID>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d817      	bhi.n	80060ee <HAL_RCC_OscConfig+0x3ea>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	2b20      	cmp	r3, #32
 80060c4:	d108      	bne.n	80060d8 <HAL_RCC_OscConfig+0x3d4>
 80060c6:	4b56      	ldr	r3, [pc, #344]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060ce:	4a54      	ldr	r2, [pc, #336]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 80060d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060d4:	6053      	str	r3, [r2, #4]
 80060d6:	e02e      	b.n	8006136 <HAL_RCC_OscConfig+0x432>
 80060d8:	4b51      	ldr	r3, [pc, #324]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	069b      	lsls	r3, r3, #26
 80060e6:	494e      	ldr	r1, [pc, #312]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	604b      	str	r3, [r1, #4]
 80060ec:	e023      	b.n	8006136 <HAL_RCC_OscConfig+0x432>
 80060ee:	4b4c      	ldr	r3, [pc, #304]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	061b      	lsls	r3, r3, #24
 80060fc:	4948      	ldr	r1, [pc, #288]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	60cb      	str	r3, [r1, #12]
 8006102:	e018      	b.n	8006136 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006104:	4b46      	ldr	r3, [pc, #280]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a45      	ldr	r2, [pc, #276]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 800610a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800610e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006110:	f7fc ff98 	bl	8003044 <HAL_GetTick>
 8006114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006118:	f7fc ff94 	bl	8003044 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e212      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800612a:	4b3d      	ldr	r3, [pc, #244]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1f0      	bne.n	8006118 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	2b00      	cmp	r3, #0
 8006140:	d036      	beq.n	80061b0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d019      	beq.n	800617e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800614a:	4b35      	ldr	r3, [pc, #212]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 800614c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614e:	4a34      	ldr	r2, [pc, #208]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8006150:	f043 0301 	orr.w	r3, r3, #1
 8006154:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006156:	f7fc ff75 	bl	8003044 <HAL_GetTick>
 800615a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800615e:	f7fc ff71 	bl	8003044 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e1ef      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006170:	4b2b      	ldr	r3, [pc, #172]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8006172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d0f0      	beq.n	800615e <HAL_RCC_OscConfig+0x45a>
 800617c:	e018      	b.n	80061b0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800617e:	4b28      	ldr	r3, [pc, #160]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8006180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006182:	4a27      	ldr	r2, [pc, #156]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618a:	f7fc ff5b 	bl	8003044 <HAL_GetTick>
 800618e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006192:	f7fc ff57 	bl	8003044 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e1d5      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061a4:	4b1e      	ldr	r3, [pc, #120]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 80061a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1f0      	bne.n	8006192 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0320 	and.w	r3, r3, #32
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d039      	beq.n	8006230 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d019      	beq.n	80061f8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061c4:	4b16      	ldr	r3, [pc, #88]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a15      	ldr	r2, [pc, #84]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 80061ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061d0:	f7fc ff38 	bl	8003044 <HAL_GetTick>
 80061d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061d8:	f7fc ff34 	bl	8003044 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e1b2      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061ea:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0f0      	beq.n	80061d8 <HAL_RCC_OscConfig+0x4d4>
 80061f6:	e01b      	b.n	8006230 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061f8:	4b09      	ldr	r3, [pc, #36]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a08      	ldr	r2, [pc, #32]	; (8006220 <HAL_RCC_OscConfig+0x51c>)
 80061fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006202:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006204:	f7fc ff1e 	bl	8003044 <HAL_GetTick>
 8006208:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800620a:	e00b      	b.n	8006224 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800620c:	f7fc ff1a 	bl	8003044 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d904      	bls.n	8006224 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e198      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
 800621e:	bf00      	nop
 8006220:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006224:	4ba3      	ldr	r3, [pc, #652]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1ed      	bne.n	800620c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8081 	beq.w	8006340 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800623e:	4b9e      	ldr	r3, [pc, #632]	; (80064b8 <HAL_RCC_OscConfig+0x7b4>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a9d      	ldr	r2, [pc, #628]	; (80064b8 <HAL_RCC_OscConfig+0x7b4>)
 8006244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006248:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800624a:	f7fc fefb 	bl	8003044 <HAL_GetTick>
 800624e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006250:	e008      	b.n	8006264 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006252:	f7fc fef7 	bl	8003044 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b64      	cmp	r3, #100	; 0x64
 800625e:	d901      	bls.n	8006264 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e175      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006264:	4b94      	ldr	r3, [pc, #592]	; (80064b8 <HAL_RCC_OscConfig+0x7b4>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0f0      	beq.n	8006252 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d106      	bne.n	8006286 <HAL_RCC_OscConfig+0x582>
 8006278:	4b8e      	ldr	r3, [pc, #568]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 800627a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627c:	4a8d      	ldr	r2, [pc, #564]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	6713      	str	r3, [r2, #112]	; 0x70
 8006284:	e02d      	b.n	80062e2 <HAL_RCC_OscConfig+0x5de>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10c      	bne.n	80062a8 <HAL_RCC_OscConfig+0x5a4>
 800628e:	4b89      	ldr	r3, [pc, #548]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	4a88      	ldr	r2, [pc, #544]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006294:	f023 0301 	bic.w	r3, r3, #1
 8006298:	6713      	str	r3, [r2, #112]	; 0x70
 800629a:	4b86      	ldr	r3, [pc, #536]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	4a85      	ldr	r2, [pc, #532]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80062a0:	f023 0304 	bic.w	r3, r3, #4
 80062a4:	6713      	str	r3, [r2, #112]	; 0x70
 80062a6:	e01c      	b.n	80062e2 <HAL_RCC_OscConfig+0x5de>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	2b05      	cmp	r3, #5
 80062ae:	d10c      	bne.n	80062ca <HAL_RCC_OscConfig+0x5c6>
 80062b0:	4b80      	ldr	r3, [pc, #512]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80062b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b4:	4a7f      	ldr	r2, [pc, #508]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80062b6:	f043 0304 	orr.w	r3, r3, #4
 80062ba:	6713      	str	r3, [r2, #112]	; 0x70
 80062bc:	4b7d      	ldr	r3, [pc, #500]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80062be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c0:	4a7c      	ldr	r2, [pc, #496]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80062c2:	f043 0301 	orr.w	r3, r3, #1
 80062c6:	6713      	str	r3, [r2, #112]	; 0x70
 80062c8:	e00b      	b.n	80062e2 <HAL_RCC_OscConfig+0x5de>
 80062ca:	4b7a      	ldr	r3, [pc, #488]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80062cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ce:	4a79      	ldr	r2, [pc, #484]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80062d0:	f023 0301 	bic.w	r3, r3, #1
 80062d4:	6713      	str	r3, [r2, #112]	; 0x70
 80062d6:	4b77      	ldr	r3, [pc, #476]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80062d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062da:	4a76      	ldr	r2, [pc, #472]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80062dc:	f023 0304 	bic.w	r3, r3, #4
 80062e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d015      	beq.n	8006316 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ea:	f7fc feab 	bl	8003044 <HAL_GetTick>
 80062ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062f0:	e00a      	b.n	8006308 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062f2:	f7fc fea7 	bl	8003044 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006300:	4293      	cmp	r3, r2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e123      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006308:	4b6a      	ldr	r3, [pc, #424]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 800630a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0ee      	beq.n	80062f2 <HAL_RCC_OscConfig+0x5ee>
 8006314:	e014      	b.n	8006340 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006316:	f7fc fe95 	bl	8003044 <HAL_GetTick>
 800631a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800631c:	e00a      	b.n	8006334 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800631e:	f7fc fe91 	bl	8003044 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	f241 3288 	movw	r2, #5000	; 0x1388
 800632c:	4293      	cmp	r3, r2
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e10d      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006334:	4b5f      	ldr	r3, [pc, #380]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1ee      	bne.n	800631e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8102 	beq.w	800654e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800634a:	4b5a      	ldr	r3, [pc, #360]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006352:	2b18      	cmp	r3, #24
 8006354:	f000 80bd 	beq.w	80064d2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	2b02      	cmp	r3, #2
 800635e:	f040 8095 	bne.w	800648c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006362:	4b54      	ldr	r3, [pc, #336]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a53      	ldr	r2, [pc, #332]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800636c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636e:	f7fc fe69 	bl	8003044 <HAL_GetTick>
 8006372:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006374:	e008      	b.n	8006388 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006376:	f7fc fe65 	bl	8003044 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e0e3      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006388:	4b4a      	ldr	r3, [pc, #296]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1f0      	bne.n	8006376 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006394:	4b47      	ldr	r3, [pc, #284]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006396:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006398:	4b48      	ldr	r3, [pc, #288]	; (80064bc <HAL_RCC_OscConfig+0x7b8>)
 800639a:	4013      	ands	r3, r2
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80063a4:	0112      	lsls	r2, r2, #4
 80063a6:	430a      	orrs	r2, r1
 80063a8:	4942      	ldr	r1, [pc, #264]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	628b      	str	r3, [r1, #40]	; 0x28
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	3b01      	subs	r3, #1
 80063b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	3b01      	subs	r3, #1
 80063be:	025b      	lsls	r3, r3, #9
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	3b01      	subs	r3, #1
 80063ca:	041b      	lsls	r3, r3, #16
 80063cc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d6:	3b01      	subs	r3, #1
 80063d8:	061b      	lsls	r3, r3, #24
 80063da:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063de:	4935      	ldr	r1, [pc, #212]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80063e4:	4b33      	ldr	r3, [pc, #204]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	4a32      	ldr	r2, [pc, #200]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80063ea:	f023 0301 	bic.w	r3, r3, #1
 80063ee:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063f0:	4b30      	ldr	r3, [pc, #192]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 80063f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f4:	4b32      	ldr	r3, [pc, #200]	; (80064c0 <HAL_RCC_OscConfig+0x7bc>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063fc:	00d2      	lsls	r2, r2, #3
 80063fe:	492d      	ldr	r1, [pc, #180]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006400:	4313      	orrs	r3, r2
 8006402:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006404:	4b2b      	ldr	r3, [pc, #172]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	f023 020c 	bic.w	r2, r3, #12
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006410:	4928      	ldr	r1, [pc, #160]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006412:	4313      	orrs	r3, r2
 8006414:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006416:	4b27      	ldr	r3, [pc, #156]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	f023 0202 	bic.w	r2, r3, #2
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006422:	4924      	ldr	r1, [pc, #144]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006424:	4313      	orrs	r3, r2
 8006426:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006428:	4b22      	ldr	r3, [pc, #136]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	4a21      	ldr	r2, [pc, #132]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 800642e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006432:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006434:	4b1f      	ldr	r3, [pc, #124]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	4a1e      	ldr	r2, [pc, #120]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 800643a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800643e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006440:	4b1c      	ldr	r3, [pc, #112]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006446:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800644a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800644c:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	4a18      	ldr	r2, [pc, #96]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006458:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a15      	ldr	r2, [pc, #84]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 800645e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006464:	f7fc fdee 	bl	8003044 <HAL_GetTick>
 8006468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800646c:	f7fc fdea 	bl	8003044 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e068      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800647e:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0f0      	beq.n	800646c <HAL_RCC_OscConfig+0x768>
 800648a:	e060      	b.n	800654e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648c:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <HAL_RCC_OscConfig+0x7b0>)
 8006492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006498:	f7fc fdd4 	bl	8003044 <HAL_GetTick>
 800649c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800649e:	e011      	b.n	80064c4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a0:	f7fc fdd0 	bl	8003044 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d90a      	bls.n	80064c4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e04e      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
 80064b2:	bf00      	nop
 80064b4:	58024400 	.word	0x58024400
 80064b8:	58024800 	.word	0x58024800
 80064bc:	fffffc0c 	.word	0xfffffc0c
 80064c0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064c4:	4b24      	ldr	r3, [pc, #144]	; (8006558 <HAL_RCC_OscConfig+0x854>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e7      	bne.n	80064a0 <HAL_RCC_OscConfig+0x79c>
 80064d0:	e03d      	b.n	800654e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064d2:	4b21      	ldr	r3, [pc, #132]	; (8006558 <HAL_RCC_OscConfig+0x854>)
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064d8:	4b1f      	ldr	r3, [pc, #124]	; (8006558 <HAL_RCC_OscConfig+0x854>)
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d031      	beq.n	800654a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f003 0203 	and.w	r2, r3, #3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d12a      	bne.n	800654a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006500:	429a      	cmp	r2, r3
 8006502:	d122      	bne.n	800654a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006510:	429a      	cmp	r2, r3
 8006512:	d11a      	bne.n	800654a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	0a5b      	lsrs	r3, r3, #9
 8006518:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006520:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006522:	429a      	cmp	r2, r3
 8006524:	d111      	bne.n	800654a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	0c1b      	lsrs	r3, r3, #16
 800652a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006534:	429a      	cmp	r2, r3
 8006536:	d108      	bne.n	800654a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	0e1b      	lsrs	r3, r3, #24
 800653c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006544:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006546:	429a      	cmp	r2, r3
 8006548:	d001      	beq.n	800654e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3730      	adds	r7, #48	; 0x30
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	58024400 	.word	0x58024400

0800655c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e19c      	b.n	80068aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006570:	4b8a      	ldr	r3, [pc, #552]	; (800679c <HAL_RCC_ClockConfig+0x240>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d910      	bls.n	80065a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657e:	4b87      	ldr	r3, [pc, #540]	; (800679c <HAL_RCC_ClockConfig+0x240>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f023 020f 	bic.w	r2, r3, #15
 8006586:	4985      	ldr	r1, [pc, #532]	; (800679c <HAL_RCC_ClockConfig+0x240>)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	4313      	orrs	r3, r2
 800658c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800658e:	4b83      	ldr	r3, [pc, #524]	; (800679c <HAL_RCC_ClockConfig+0x240>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	429a      	cmp	r2, r3
 800659a:	d001      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e184      	b.n	80068aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d010      	beq.n	80065ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	4b7b      	ldr	r3, [pc, #492]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d908      	bls.n	80065ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065bc:	4b78      	ldr	r3, [pc, #480]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	4975      	ldr	r1, [pc, #468]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d010      	beq.n	80065fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695a      	ldr	r2, [r3, #20]
 80065de:	4b70      	ldr	r3, [pc, #448]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d908      	bls.n	80065fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065ea:	4b6d      	ldr	r3, [pc, #436]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	496a      	ldr	r1, [pc, #424]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0310 	and.w	r3, r3, #16
 8006604:	2b00      	cmp	r3, #0
 8006606:	d010      	beq.n	800662a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699a      	ldr	r2, [r3, #24]
 800660c:	4b64      	ldr	r3, [pc, #400]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006614:	429a      	cmp	r2, r3
 8006616:	d908      	bls.n	800662a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006618:	4b61      	ldr	r3, [pc, #388]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	495e      	ldr	r1, [pc, #376]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 8006626:	4313      	orrs	r3, r2
 8006628:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	d010      	beq.n	8006658 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69da      	ldr	r2, [r3, #28]
 800663a:	4b59      	ldr	r3, [pc, #356]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006642:	429a      	cmp	r2, r3
 8006644:	d908      	bls.n	8006658 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006646:	4b56      	ldr	r3, [pc, #344]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	4953      	ldr	r1, [pc, #332]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 8006654:	4313      	orrs	r3, r2
 8006656:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d010      	beq.n	8006686 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	4b4d      	ldr	r3, [pc, #308]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	429a      	cmp	r2, r3
 8006672:	d908      	bls.n	8006686 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006674:	4b4a      	ldr	r3, [pc, #296]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	f023 020f 	bic.w	r2, r3, #15
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	4947      	ldr	r1, [pc, #284]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 8006682:	4313      	orrs	r3, r2
 8006684:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d055      	beq.n	800673e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006692:	4b43      	ldr	r3, [pc, #268]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	4940      	ldr	r1, [pc, #256]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d107      	bne.n	80066bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066ac:	4b3c      	ldr	r3, [pc, #240]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d121      	bne.n	80066fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e0f6      	b.n	80068aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d107      	bne.n	80066d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066c4:	4b36      	ldr	r3, [pc, #216]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d115      	bne.n	80066fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0ea      	b.n	80068aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d107      	bne.n	80066ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066dc:	4b30      	ldr	r3, [pc, #192]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d109      	bne.n	80066fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0de      	b.n	80068aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066ec:	4b2c      	ldr	r3, [pc, #176]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0d6      	b.n	80068aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066fc:	4b28      	ldr	r3, [pc, #160]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f023 0207 	bic.w	r2, r3, #7
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	4925      	ldr	r1, [pc, #148]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 800670a:	4313      	orrs	r3, r2
 800670c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670e:	f7fc fc99 	bl	8003044 <HAL_GetTick>
 8006712:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006714:	e00a      	b.n	800672c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006716:	f7fc fc95 	bl	8003044 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	f241 3288 	movw	r2, #5000	; 0x1388
 8006724:	4293      	cmp	r3, r2
 8006726:	d901      	bls.n	800672c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e0be      	b.n	80068aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800672c:	4b1c      	ldr	r3, [pc, #112]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	429a      	cmp	r2, r3
 800673c:	d1eb      	bne.n	8006716 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d010      	beq.n	800676c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	4b14      	ldr	r3, [pc, #80]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	429a      	cmp	r2, r3
 8006758:	d208      	bcs.n	800676c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800675a:	4b11      	ldr	r3, [pc, #68]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f023 020f 	bic.w	r2, r3, #15
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	490e      	ldr	r1, [pc, #56]	; (80067a0 <HAL_RCC_ClockConfig+0x244>)
 8006768:	4313      	orrs	r3, r2
 800676a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800676c:	4b0b      	ldr	r3, [pc, #44]	; (800679c <HAL_RCC_ClockConfig+0x240>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 030f 	and.w	r3, r3, #15
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d214      	bcs.n	80067a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677a:	4b08      	ldr	r3, [pc, #32]	; (800679c <HAL_RCC_ClockConfig+0x240>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f023 020f 	bic.w	r2, r3, #15
 8006782:	4906      	ldr	r1, [pc, #24]	; (800679c <HAL_RCC_ClockConfig+0x240>)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	4313      	orrs	r3, r2
 8006788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800678a:	4b04      	ldr	r3, [pc, #16]	; (800679c <HAL_RCC_ClockConfig+0x240>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d005      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e086      	b.n	80068aa <HAL_RCC_ClockConfig+0x34e>
 800679c:	52002000 	.word	0x52002000
 80067a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d010      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	4b3f      	ldr	r3, [pc, #252]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067bc:	429a      	cmp	r2, r3
 80067be:	d208      	bcs.n	80067d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067c0:	4b3c      	ldr	r3, [pc, #240]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	4939      	ldr	r1, [pc, #228]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d010      	beq.n	8006800 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695a      	ldr	r2, [r3, #20]
 80067e2:	4b34      	ldr	r3, [pc, #208]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d208      	bcs.n	8006800 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067ee:	4b31      	ldr	r3, [pc, #196]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	492e      	ldr	r1, [pc, #184]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b00      	cmp	r3, #0
 800680a:	d010      	beq.n	800682e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	4b28      	ldr	r3, [pc, #160]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006818:	429a      	cmp	r2, r3
 800681a:	d208      	bcs.n	800682e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800681c:	4b25      	ldr	r3, [pc, #148]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	4922      	ldr	r1, [pc, #136]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 800682a:	4313      	orrs	r3, r2
 800682c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d010      	beq.n	800685c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69da      	ldr	r2, [r3, #28]
 800683e:	4b1d      	ldr	r3, [pc, #116]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006846:	429a      	cmp	r2, r3
 8006848:	d208      	bcs.n	800685c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800684a:	4b1a      	ldr	r3, [pc, #104]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	4917      	ldr	r1, [pc, #92]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 8006858:	4313      	orrs	r3, r2
 800685a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800685c:	f000 f834 	bl	80068c8 <HAL_RCC_GetSysClockFreq>
 8006860:	4602      	mov	r2, r0
 8006862:	4b14      	ldr	r3, [pc, #80]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	4912      	ldr	r1, [pc, #72]	; (80068b8 <HAL_RCC_ClockConfig+0x35c>)
 800686e:	5ccb      	ldrb	r3, [r1, r3]
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
 8006878:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800687a:	4b0e      	ldr	r3, [pc, #56]	; (80068b4 <HAL_RCC_ClockConfig+0x358>)
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	4a0d      	ldr	r2, [pc, #52]	; (80068b8 <HAL_RCC_ClockConfig+0x35c>)
 8006884:	5cd3      	ldrb	r3, [r2, r3]
 8006886:	f003 031f 	and.w	r3, r3, #31
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	fa22 f303 	lsr.w	r3, r2, r3
 8006890:	4a0a      	ldr	r2, [pc, #40]	; (80068bc <HAL_RCC_ClockConfig+0x360>)
 8006892:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006894:	4a0a      	ldr	r2, [pc, #40]	; (80068c0 <HAL_RCC_ClockConfig+0x364>)
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800689a:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <HAL_RCC_ClockConfig+0x368>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fc fb86 	bl	8002fb0 <HAL_InitTick>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	58024400 	.word	0x58024400
 80068b8:	0800e180 	.word	0x0800e180
 80068bc:	24000004 	.word	0x24000004
 80068c0:	24000000 	.word	0x24000000
 80068c4:	24000008 	.word	0x24000008

080068c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b089      	sub	sp, #36	; 0x24
 80068cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068ce:	4bb3      	ldr	r3, [pc, #716]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068d6:	2b18      	cmp	r3, #24
 80068d8:	f200 8155 	bhi.w	8006b86 <HAL_RCC_GetSysClockFreq+0x2be>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	08006949 	.word	0x08006949
 80068e8:	08006b87 	.word	0x08006b87
 80068ec:	08006b87 	.word	0x08006b87
 80068f0:	08006b87 	.word	0x08006b87
 80068f4:	08006b87 	.word	0x08006b87
 80068f8:	08006b87 	.word	0x08006b87
 80068fc:	08006b87 	.word	0x08006b87
 8006900:	08006b87 	.word	0x08006b87
 8006904:	0800696f 	.word	0x0800696f
 8006908:	08006b87 	.word	0x08006b87
 800690c:	08006b87 	.word	0x08006b87
 8006910:	08006b87 	.word	0x08006b87
 8006914:	08006b87 	.word	0x08006b87
 8006918:	08006b87 	.word	0x08006b87
 800691c:	08006b87 	.word	0x08006b87
 8006920:	08006b87 	.word	0x08006b87
 8006924:	08006975 	.word	0x08006975
 8006928:	08006b87 	.word	0x08006b87
 800692c:	08006b87 	.word	0x08006b87
 8006930:	08006b87 	.word	0x08006b87
 8006934:	08006b87 	.word	0x08006b87
 8006938:	08006b87 	.word	0x08006b87
 800693c:	08006b87 	.word	0x08006b87
 8006940:	08006b87 	.word	0x08006b87
 8006944:	0800697b 	.word	0x0800697b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006948:	4b94      	ldr	r3, [pc, #592]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b00      	cmp	r3, #0
 8006952:	d009      	beq.n	8006968 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006954:	4b91      	ldr	r3, [pc, #580]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	08db      	lsrs	r3, r3, #3
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	4a90      	ldr	r2, [pc, #576]	; (8006ba0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006960:	fa22 f303 	lsr.w	r3, r2, r3
 8006964:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006966:	e111      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006968:	4b8d      	ldr	r3, [pc, #564]	; (8006ba0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800696a:	61bb      	str	r3, [r7, #24]
    break;
 800696c:	e10e      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800696e:	4b8d      	ldr	r3, [pc, #564]	; (8006ba4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006970:	61bb      	str	r3, [r7, #24]
    break;
 8006972:	e10b      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006974:	4b8c      	ldr	r3, [pc, #560]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006976:	61bb      	str	r3, [r7, #24]
    break;
 8006978:	e108      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800697a:	4b88      	ldr	r3, [pc, #544]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006984:	4b85      	ldr	r3, [pc, #532]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006988:	091b      	lsrs	r3, r3, #4
 800698a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800698e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006990:	4b82      	ldr	r3, [pc, #520]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800699a:	4b80      	ldr	r3, [pc, #512]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800699c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699e:	08db      	lsrs	r3, r3, #3
 80069a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	fb02 f303 	mul.w	r3, r2, r3
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 80e1 	beq.w	8006b80 <HAL_RCC_GetSysClockFreq+0x2b8>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	f000 8083 	beq.w	8006acc <HAL_RCC_GetSysClockFreq+0x204>
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	f200 80a1 	bhi.w	8006b10 <HAL_RCC_GetSysClockFreq+0x248>
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <HAL_RCC_GetSysClockFreq+0x114>
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d056      	beq.n	8006a88 <HAL_RCC_GetSysClockFreq+0x1c0>
 80069da:	e099      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069dc:	4b6f      	ldr	r3, [pc, #444]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d02d      	beq.n	8006a44 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069e8:	4b6c      	ldr	r3, [pc, #432]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	08db      	lsrs	r3, r3, #3
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	4a6b      	ldr	r2, [pc, #428]	; (8006ba0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069f4:	fa22 f303 	lsr.w	r3, r2, r3
 80069f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	ee07 3a90 	vmov	s15, r3
 8006a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a12:	4b62      	ldr	r3, [pc, #392]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006a42:	e087      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006bb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a56:	4b51      	ldr	r3, [pc, #324]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a86:	e065      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006bb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9a:	4b40      	ldr	r3, [pc, #256]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aca:	e043      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006bb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ade:	4b2f      	ldr	r3, [pc, #188]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006af2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b0e:	e021      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006bb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b22:	4b1e      	ldr	r3, [pc, #120]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b52:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006b54:	4b11      	ldr	r3, [pc, #68]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b58:	0a5b      	lsrs	r3, r3, #9
 8006b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b5e:	3301      	adds	r3, #1
 8006b60:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	ee07 3a90 	vmov	s15, r3
 8006b68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b78:	ee17 3a90 	vmov	r3, s15
 8006b7c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006b7e:	e005      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	61bb      	str	r3, [r7, #24]
    break;
 8006b84:	e002      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006b86:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b88:	61bb      	str	r3, [r7, #24]
    break;
 8006b8a:	bf00      	nop
  }

  return sysclockfreq;
 8006b8c:	69bb      	ldr	r3, [r7, #24]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3724      	adds	r7, #36	; 0x24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	58024400 	.word	0x58024400
 8006ba0:	03d09000 	.word	0x03d09000
 8006ba4:	003d0900 	.word	0x003d0900
 8006ba8:	02dc6c00 	.word	0x02dc6c00
 8006bac:	46000000 	.word	0x46000000
 8006bb0:	4c742400 	.word	0x4c742400
 8006bb4:	4a742400 	.word	0x4a742400
 8006bb8:	4c371b00 	.word	0x4c371b00

08006bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006bc2:	f7ff fe81 	bl	80068c8 <HAL_RCC_GetSysClockFreq>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	4b10      	ldr	r3, [pc, #64]	; (8006c0c <HAL_RCC_GetHCLKFreq+0x50>)
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	0a1b      	lsrs	r3, r3, #8
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	490f      	ldr	r1, [pc, #60]	; (8006c10 <HAL_RCC_GetHCLKFreq+0x54>)
 8006bd4:	5ccb      	ldrb	r3, [r1, r3]
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	fa22 f303 	lsr.w	r3, r2, r3
 8006bde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006be0:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <HAL_RCC_GetHCLKFreq+0x50>)
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	f003 030f 	and.w	r3, r3, #15
 8006be8:	4a09      	ldr	r2, [pc, #36]	; (8006c10 <HAL_RCC_GetHCLKFreq+0x54>)
 8006bea:	5cd3      	ldrb	r3, [r2, r3]
 8006bec:	f003 031f 	and.w	r3, r3, #31
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf6:	4a07      	ldr	r2, [pc, #28]	; (8006c14 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bf8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bfa:	4a07      	ldr	r2, [pc, #28]	; (8006c18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c00:	4b04      	ldr	r3, [pc, #16]	; (8006c14 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c02:	681b      	ldr	r3, [r3, #0]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	58024400 	.word	0x58024400
 8006c10:	0800e180 	.word	0x0800e180
 8006c14:	24000004 	.word	0x24000004
 8006c18:	24000000 	.word	0x24000000

08006c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c20:	f7ff ffcc 	bl	8006bbc <HAL_RCC_GetHCLKFreq>
 8006c24:	4602      	mov	r2, r0
 8006c26:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	091b      	lsrs	r3, r3, #4
 8006c2c:	f003 0307 	and.w	r3, r3, #7
 8006c30:	4904      	ldr	r1, [pc, #16]	; (8006c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c32:	5ccb      	ldrb	r3, [r1, r3]
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	58024400 	.word	0x58024400
 8006c44:	0800e180 	.word	0x0800e180

08006c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006c4c:	f7ff ffb6 	bl	8006bbc <HAL_RCC_GetHCLKFreq>
 8006c50:	4602      	mov	r2, r0
 8006c52:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	0a1b      	lsrs	r3, r3, #8
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	4904      	ldr	r1, [pc, #16]	; (8006c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c5e:	5ccb      	ldrb	r3, [r1, r3]
 8006c60:	f003 031f 	and.w	r3, r3, #31
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	58024400 	.word	0x58024400
 8006c70:	0800e180 	.word	0x0800e180

08006c74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c80:	2300      	movs	r3, #0
 8006c82:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d03f      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c98:	d02a      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006c9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c9e:	d824      	bhi.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ca4:	d018      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ca6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006caa:	d81e      	bhi.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cb4:	d007      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006cb6:	e018      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cb8:	4bab      	ldr	r3, [pc, #684]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	4aaa      	ldr	r2, [pc, #680]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cc4:	e015      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	2102      	movs	r1, #2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f001 f9cf 	bl	8008070 <RCCEx_PLL2_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cd6:	e00c      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3324      	adds	r3, #36	; 0x24
 8006cdc:	2102      	movs	r1, #2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f001 fa78 	bl	80081d4 <RCCEx_PLL3_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ce8:	e003      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75fb      	strb	r3, [r7, #23]
      break;
 8006cee:	e000      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d109      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006cf8:	4b9b      	ldr	r3, [pc, #620]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d04:	4998      	ldr	r1, [pc, #608]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	650b      	str	r3, [r1, #80]	; 0x50
 8006d0a:	e001      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d03d      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d826      	bhi.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006d24:	a201      	add	r2, pc, #4	; (adr r2, 8006d2c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2a:	bf00      	nop
 8006d2c:	08006d41 	.word	0x08006d41
 8006d30:	08006d4f 	.word	0x08006d4f
 8006d34:	08006d61 	.word	0x08006d61
 8006d38:	08006d79 	.word	0x08006d79
 8006d3c:	08006d79 	.word	0x08006d79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d40:	4b89      	ldr	r3, [pc, #548]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d44:	4a88      	ldr	r2, [pc, #544]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d4c:	e015      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3304      	adds	r3, #4
 8006d52:	2100      	movs	r1, #0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f001 f98b 	bl	8008070 <RCCEx_PLL2_Config>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d5e:	e00c      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3324      	adds	r3, #36	; 0x24
 8006d64:	2100      	movs	r1, #0
 8006d66:	4618      	mov	r0, r3
 8006d68:	f001 fa34 	bl	80081d4 <RCCEx_PLL3_Config>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d70:	e003      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	75fb      	strb	r3, [r7, #23]
      break;
 8006d76:	e000      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d109      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d80:	4b79      	ldr	r3, [pc, #484]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d84:	f023 0207 	bic.w	r2, r3, #7
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8c:	4976      	ldr	r1, [pc, #472]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	650b      	str	r3, [r1, #80]	; 0x50
 8006d92:	e001      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d042      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dac:	d02b      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db2:	d825      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006db4:	2bc0      	cmp	r3, #192	; 0xc0
 8006db6:	d028      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006db8:	2bc0      	cmp	r3, #192	; 0xc0
 8006dba:	d821      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006dbc:	2b80      	cmp	r3, #128	; 0x80
 8006dbe:	d016      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006dc0:	2b80      	cmp	r3, #128	; 0x80
 8006dc2:	d81d      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006dc8:	2b40      	cmp	r3, #64	; 0x40
 8006dca:	d007      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006dcc:	e018      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dce:	4b66      	ldr	r3, [pc, #408]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd2:	4a65      	ldr	r2, [pc, #404]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006dda:	e017      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3304      	adds	r3, #4
 8006de0:	2100      	movs	r1, #0
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 f944 	bl	8008070 <RCCEx_PLL2_Config>
 8006de8:	4603      	mov	r3, r0
 8006dea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006dec:	e00e      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3324      	adds	r3, #36	; 0x24
 8006df2:	2100      	movs	r1, #0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f001 f9ed 	bl	80081d4 <RCCEx_PLL3_Config>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006dfe:	e005      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	75fb      	strb	r3, [r7, #23]
      break;
 8006e04:	e002      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006e06:	bf00      	nop
 8006e08:	e000      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d109      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006e12:	4b55      	ldr	r3, [pc, #340]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e16:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e1e:	4952      	ldr	r1, [pc, #328]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	650b      	str	r3, [r1, #80]	; 0x50
 8006e24:	e001      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d049      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e40:	d030      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006e42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e46:	d82a      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006e48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006e4c:	d02c      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006e4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006e52:	d824      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e58:	d018      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e5e:	d81e      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e68:	d007      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006e6a:	e018      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e6c:	4b3e      	ldr	r3, [pc, #248]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	4a3d      	ldr	r2, [pc, #244]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e78:	e017      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	2100      	movs	r1, #0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 f8f5 	bl	8008070 <RCCEx_PLL2_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e8a:	e00e      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3324      	adds	r3, #36	; 0x24
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 f99e 	bl	80081d4 <RCCEx_PLL3_Config>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e9c:	e005      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea2:	e002      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006ea4:	bf00      	nop
 8006ea6:	e000      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006eb0:	4b2d      	ldr	r3, [pc, #180]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ebe:	492a      	ldr	r1, [pc, #168]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	658b      	str	r3, [r1, #88]	; 0x58
 8006ec4:	e001      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d04c      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006edc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ee0:	d030      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006ee2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ee6:	d82a      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ee8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006eec:	d02c      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006eee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ef2:	d824      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ef8:	d018      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006efa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006efe:	d81e      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f08:	d007      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006f0a:	e018      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f0c:	4b16      	ldr	r3, [pc, #88]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	4a15      	ldr	r2, [pc, #84]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f18:	e017      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	2100      	movs	r1, #0
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 f8a5 	bl	8008070 <RCCEx_PLL2_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f2a:	e00e      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3324      	adds	r3, #36	; 0x24
 8006f30:	2100      	movs	r1, #0
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 f94e 	bl	80081d4 <RCCEx_PLL3_Config>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f3c:	e005      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	75fb      	strb	r3, [r7, #23]
      break;
 8006f42:	e002      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006f44:	bf00      	nop
 8006f46:	e000      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10d      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f54:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f5e:	4902      	ldr	r1, [pc, #8]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	658b      	str	r3, [r1, #88]	; 0x58
 8006f64:	e004      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006f66:	bf00      	nop
 8006f68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6c:	7dfb      	ldrb	r3, [r7, #23]
 8006f6e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d032      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f80:	2b30      	cmp	r3, #48	; 0x30
 8006f82:	d01c      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006f84:	2b30      	cmp	r3, #48	; 0x30
 8006f86:	d817      	bhi.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d00c      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d813      	bhi.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d016      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006f94:	2b10      	cmp	r3, #16
 8006f96:	d10f      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f98:	4baf      	ldr	r3, [pc, #700]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	4aae      	ldr	r2, [pc, #696]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006fa4:	e00e      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	2102      	movs	r1, #2
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 f85f 	bl	8008070 <RCCEx_PLL2_Config>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006fb6:	e005      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	75fb      	strb	r3, [r7, #23]
      break;
 8006fbc:	e002      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006fbe:	bf00      	nop
 8006fc0:	e000      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006fca:	4ba3      	ldr	r3, [pc, #652]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd6:	49a0      	ldr	r1, [pc, #640]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fdc:	e001      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
 8006fe0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d047      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ff6:	d030      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006ff8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ffc:	d82a      	bhi.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006ffe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007002:	d02c      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007004:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007008:	d824      	bhi.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800700a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800700e:	d018      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007014:	d81e      	bhi.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701e:	d007      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007020:	e018      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007022:	4b8d      	ldr	r3, [pc, #564]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007026:	4a8c      	ldr	r2, [pc, #560]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800702c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800702e:	e017      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3304      	adds	r3, #4
 8007034:	2100      	movs	r1, #0
 8007036:	4618      	mov	r0, r3
 8007038:	f001 f81a 	bl	8008070 <RCCEx_PLL2_Config>
 800703c:	4603      	mov	r3, r0
 800703e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007040:	e00e      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3324      	adds	r3, #36	; 0x24
 8007046:	2100      	movs	r1, #0
 8007048:	4618      	mov	r0, r3
 800704a:	f001 f8c3 	bl	80081d4 <RCCEx_PLL3_Config>
 800704e:	4603      	mov	r3, r0
 8007050:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007052:	e005      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	75fb      	strb	r3, [r7, #23]
      break;
 8007058:	e002      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800705a:	bf00      	nop
 800705c:	e000      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800705e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007060:	7dfb      	ldrb	r3, [r7, #23]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d109      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007066:	4b7c      	ldr	r3, [pc, #496]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007072:	4979      	ldr	r1, [pc, #484]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007074:	4313      	orrs	r3, r2
 8007076:	650b      	str	r3, [r1, #80]	; 0x50
 8007078:	e001      	b.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d049      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800708e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007092:	d02e      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007098:	d828      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 800709a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800709e:	d02a      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80070a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070a4:	d822      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 80070a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070aa:	d026      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x486>
 80070ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070b0:	d81c      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 80070b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070b6:	d010      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x466>
 80070b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070bc:	d816      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d01d      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80070c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c6:	d111      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3304      	adds	r3, #4
 80070cc:	2101      	movs	r1, #1
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 ffce 	bl	8008070 <RCCEx_PLL2_Config>
 80070d4:	4603      	mov	r3, r0
 80070d6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80070d8:	e012      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3324      	adds	r3, #36	; 0x24
 80070de:	2101      	movs	r1, #1
 80070e0:	4618      	mov	r0, r3
 80070e2:	f001 f877 	bl	80081d4 <RCCEx_PLL3_Config>
 80070e6:	4603      	mov	r3, r0
 80070e8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80070ea:	e009      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	75fb      	strb	r3, [r7, #23]
      break;
 80070f0:	e006      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80070f2:	bf00      	nop
 80070f4:	e004      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80070f6:	bf00      	nop
 80070f8:	e002      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80070fa:	bf00      	nop
 80070fc:	e000      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80070fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007100:	7dfb      	ldrb	r3, [r7, #23]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007106:	4b54      	ldr	r3, [pc, #336]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007112:	4951      	ldr	r1, [pc, #324]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007114:	4313      	orrs	r3, r2
 8007116:	650b      	str	r3, [r1, #80]	; 0x50
 8007118:	e001      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d04b      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007134:	d02e      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800713a:	d828      	bhi.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800713c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007140:	d02a      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007146:	d822      	bhi.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007148:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800714c:	d026      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800714e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007152:	d81c      	bhi.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007158:	d010      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800715a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800715e:	d816      	bhi.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01d      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007168:	d111      	bne.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3304      	adds	r3, #4
 800716e:	2101      	movs	r1, #1
 8007170:	4618      	mov	r0, r3
 8007172:	f000 ff7d 	bl	8008070 <RCCEx_PLL2_Config>
 8007176:	4603      	mov	r3, r0
 8007178:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800717a:	e012      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3324      	adds	r3, #36	; 0x24
 8007180:	2101      	movs	r1, #1
 8007182:	4618      	mov	r0, r3
 8007184:	f001 f826 	bl	80081d4 <RCCEx_PLL3_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800718c:	e009      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	75fb      	strb	r3, [r7, #23]
      break;
 8007192:	e006      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007194:	bf00      	nop
 8007196:	e004      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007198:	bf00      	nop
 800719a:	e002      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800719c:	bf00      	nop
 800719e:	e000      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80071a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80071a8:	4b2b      	ldr	r3, [pc, #172]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ac:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071b6:	4928      	ldr	r1, [pc, #160]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	658b      	str	r3, [r1, #88]	; 0x58
 80071bc:	e001      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d02f      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071d6:	d00e      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80071d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071dc:	d814      	bhi.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d015      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80071e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071e6:	d10f      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e8:	4b1b      	ldr	r3, [pc, #108]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	4a1a      	ldr	r2, [pc, #104]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80071f4:	e00c      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3304      	adds	r3, #4
 80071fa:	2101      	movs	r1, #1
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 ff37 	bl	8008070 <RCCEx_PLL2_Config>
 8007202:	4603      	mov	r3, r0
 8007204:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007206:	e003      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	75fb      	strb	r3, [r7, #23]
      break;
 800720c:	e000      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800720e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007210:	7dfb      	ldrb	r3, [r7, #23]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d109      	bne.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007216:	4b10      	ldr	r3, [pc, #64]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007222:	490d      	ldr	r1, [pc, #52]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007224:	4313      	orrs	r3, r2
 8007226:	650b      	str	r3, [r1, #80]	; 0x50
 8007228:	e001      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d033      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	2b03      	cmp	r3, #3
 8007240:	d81c      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007242:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007248:	08007283 	.word	0x08007283
 800724c:	0800725d 	.word	0x0800725d
 8007250:	0800726b 	.word	0x0800726b
 8007254:	08007283 	.word	0x08007283
 8007258:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800725c:	4bb8      	ldr	r3, [pc, #736]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	4ab7      	ldr	r2, [pc, #732]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007266:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007268:	e00c      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3304      	adds	r3, #4
 800726e:	2102      	movs	r1, #2
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fefd 	bl	8008070 <RCCEx_PLL2_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800727a:	e003      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
      break;
 8007280:	e000      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d109      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800728a:	4bad      	ldr	r3, [pc, #692]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800728c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800728e:	f023 0203 	bic.w	r2, r3, #3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007296:	49aa      	ldr	r1, [pc, #680]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007298:	4313      	orrs	r3, r2
 800729a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800729c:	e001      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8086 	beq.w	80073bc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072b0:	4ba4      	ldr	r3, [pc, #656]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4aa3      	ldr	r2, [pc, #652]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80072b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072bc:	f7fb fec2 	bl	8003044 <HAL_GetTick>
 80072c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072c2:	e009      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072c4:	f7fb febe 	bl	8003044 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b64      	cmp	r3, #100	; 0x64
 80072d0:	d902      	bls.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	75fb      	strb	r3, [r7, #23]
        break;
 80072d6:	e005      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072d8:	4b9a      	ldr	r3, [pc, #616]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0ef      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d166      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80072ea:	4b95      	ldr	r3, [pc, #596]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072f4:	4053      	eors	r3, r2
 80072f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d013      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072fe:	4b90      	ldr	r3, [pc, #576]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007306:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007308:	4b8d      	ldr	r3, [pc, #564]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800730a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730c:	4a8c      	ldr	r2, [pc, #560]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800730e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007312:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007314:	4b8a      	ldr	r3, [pc, #552]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007318:	4a89      	ldr	r2, [pc, #548]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800731a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800731e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007320:	4a87      	ldr	r2, [pc, #540]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800732c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007330:	d115      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007332:	f7fb fe87 	bl	8003044 <HAL_GetTick>
 8007336:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007338:	e00b      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800733a:	f7fb fe83 	bl	8003044 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	f241 3288 	movw	r2, #5000	; 0x1388
 8007348:	4293      	cmp	r3, r2
 800734a:	d902      	bls.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	75fb      	strb	r3, [r7, #23]
            break;
 8007350:	e005      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007352:	4b7b      	ldr	r3, [pc, #492]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0ed      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d126      	bne.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800736a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800736e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007372:	d10d      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007374:	4b72      	ldr	r3, [pc, #456]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007382:	0919      	lsrs	r1, r3, #4
 8007384:	4b70      	ldr	r3, [pc, #448]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007386:	400b      	ands	r3, r1
 8007388:	496d      	ldr	r1, [pc, #436]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800738a:	4313      	orrs	r3, r2
 800738c:	610b      	str	r3, [r1, #16]
 800738e:	e005      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007390:	4b6b      	ldr	r3, [pc, #428]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	4a6a      	ldr	r2, [pc, #424]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007396:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800739a:	6113      	str	r3, [r2, #16]
 800739c:	4b68      	ldr	r3, [pc, #416]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800739e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073aa:	4965      	ldr	r1, [pc, #404]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	670b      	str	r3, [r1, #112]	; 0x70
 80073b0:	e004      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	75bb      	strb	r3, [r7, #22]
 80073b6:	e001      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d07e      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073cc:	2b28      	cmp	r3, #40	; 0x28
 80073ce:	d867      	bhi.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80073d0:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80073d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d6:	bf00      	nop
 80073d8:	080074a7 	.word	0x080074a7
 80073dc:	080074a1 	.word	0x080074a1
 80073e0:	080074a1 	.word	0x080074a1
 80073e4:	080074a1 	.word	0x080074a1
 80073e8:	080074a1 	.word	0x080074a1
 80073ec:	080074a1 	.word	0x080074a1
 80073f0:	080074a1 	.word	0x080074a1
 80073f4:	080074a1 	.word	0x080074a1
 80073f8:	0800747d 	.word	0x0800747d
 80073fc:	080074a1 	.word	0x080074a1
 8007400:	080074a1 	.word	0x080074a1
 8007404:	080074a1 	.word	0x080074a1
 8007408:	080074a1 	.word	0x080074a1
 800740c:	080074a1 	.word	0x080074a1
 8007410:	080074a1 	.word	0x080074a1
 8007414:	080074a1 	.word	0x080074a1
 8007418:	0800748f 	.word	0x0800748f
 800741c:	080074a1 	.word	0x080074a1
 8007420:	080074a1 	.word	0x080074a1
 8007424:	080074a1 	.word	0x080074a1
 8007428:	080074a1 	.word	0x080074a1
 800742c:	080074a1 	.word	0x080074a1
 8007430:	080074a1 	.word	0x080074a1
 8007434:	080074a1 	.word	0x080074a1
 8007438:	080074a7 	.word	0x080074a7
 800743c:	080074a1 	.word	0x080074a1
 8007440:	080074a1 	.word	0x080074a1
 8007444:	080074a1 	.word	0x080074a1
 8007448:	080074a1 	.word	0x080074a1
 800744c:	080074a1 	.word	0x080074a1
 8007450:	080074a1 	.word	0x080074a1
 8007454:	080074a1 	.word	0x080074a1
 8007458:	080074a7 	.word	0x080074a7
 800745c:	080074a1 	.word	0x080074a1
 8007460:	080074a1 	.word	0x080074a1
 8007464:	080074a1 	.word	0x080074a1
 8007468:	080074a1 	.word	0x080074a1
 800746c:	080074a1 	.word	0x080074a1
 8007470:	080074a1 	.word	0x080074a1
 8007474:	080074a1 	.word	0x080074a1
 8007478:	080074a7 	.word	0x080074a7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3304      	adds	r3, #4
 8007480:	2101      	movs	r1, #1
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fdf4 	bl	8008070 <RCCEx_PLL2_Config>
 8007488:	4603      	mov	r3, r0
 800748a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800748c:	e00c      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3324      	adds	r3, #36	; 0x24
 8007492:	2101      	movs	r1, #1
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fe9d 	bl	80081d4 <RCCEx_PLL3_Config>
 800749a:	4603      	mov	r3, r0
 800749c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800749e:	e003      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	75fb      	strb	r3, [r7, #23]
      break;
 80074a4:	e000      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80074a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d109      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80074ae:	4b24      	ldr	r3, [pc, #144]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074ba:	4921      	ldr	r1, [pc, #132]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	654b      	str	r3, [r1, #84]	; 0x54
 80074c0:	e001      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d03e      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074d6:	2b05      	cmp	r3, #5
 80074d8:	d820      	bhi.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	08007523 	.word	0x08007523
 80074e4:	080074f9 	.word	0x080074f9
 80074e8:	0800750b 	.word	0x0800750b
 80074ec:	08007523 	.word	0x08007523
 80074f0:	08007523 	.word	0x08007523
 80074f4:	08007523 	.word	0x08007523
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3304      	adds	r3, #4
 80074fc:	2101      	movs	r1, #1
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fdb6 	bl	8008070 <RCCEx_PLL2_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007508:	e00c      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3324      	adds	r3, #36	; 0x24
 800750e:	2101      	movs	r1, #1
 8007510:	4618      	mov	r0, r3
 8007512:	f000 fe5f 	bl	80081d4 <RCCEx_PLL3_Config>
 8007516:	4603      	mov	r3, r0
 8007518:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800751a:	e003      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	75fb      	strb	r3, [r7, #23]
      break;
 8007520:	e000      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007524:	7dfb      	ldrb	r3, [r7, #23]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d110      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800752a:	4b05      	ldr	r3, [pc, #20]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752e:	f023 0207 	bic.w	r2, r3, #7
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007536:	4902      	ldr	r1, [pc, #8]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007538:	4313      	orrs	r3, r2
 800753a:	654b      	str	r3, [r1, #84]	; 0x54
 800753c:	e008      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800753e:	bf00      	nop
 8007540:	58024400 	.word	0x58024400
 8007544:	58024800 	.word	0x58024800
 8007548:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754c:	7dfb      	ldrb	r3, [r7, #23]
 800754e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b00      	cmp	r3, #0
 800755a:	d039      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007562:	2b05      	cmp	r3, #5
 8007564:	d820      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007566:	a201      	add	r2, pc, #4	; (adr r2, 800756c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	080075af 	.word	0x080075af
 8007570:	08007585 	.word	0x08007585
 8007574:	08007597 	.word	0x08007597
 8007578:	080075af 	.word	0x080075af
 800757c:	080075af 	.word	0x080075af
 8007580:	080075af 	.word	0x080075af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	3304      	adds	r3, #4
 8007588:	2101      	movs	r1, #1
 800758a:	4618      	mov	r0, r3
 800758c:	f000 fd70 	bl	8008070 <RCCEx_PLL2_Config>
 8007590:	4603      	mov	r3, r0
 8007592:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007594:	e00c      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	3324      	adds	r3, #36	; 0x24
 800759a:	2101      	movs	r1, #1
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fe19 	bl	80081d4 <RCCEx_PLL3_Config>
 80075a2:	4603      	mov	r3, r0
 80075a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80075a6:	e003      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	75fb      	strb	r3, [r7, #23]
      break;
 80075ac:	e000      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80075ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10a      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075b6:	4bb7      	ldr	r3, [pc, #732]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80075b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ba:	f023 0207 	bic.w	r2, r3, #7
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c4:	49b3      	ldr	r1, [pc, #716]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	658b      	str	r3, [r1, #88]	; 0x58
 80075ca:	e001      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0320 	and.w	r3, r3, #32
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d04b      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075e6:	d02e      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80075e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075ec:	d828      	bhi.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80075ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f2:	d02a      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80075f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f8:	d822      	bhi.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80075fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075fe:	d026      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007600:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007604:	d81c      	bhi.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800760a:	d010      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800760c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007610:	d816      	bhi.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d01d      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800761a:	d111      	bne.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3304      	adds	r3, #4
 8007620:	2100      	movs	r1, #0
 8007622:	4618      	mov	r0, r3
 8007624:	f000 fd24 	bl	8008070 <RCCEx_PLL2_Config>
 8007628:	4603      	mov	r3, r0
 800762a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800762c:	e012      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3324      	adds	r3, #36	; 0x24
 8007632:	2102      	movs	r1, #2
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fdcd 	bl	80081d4 <RCCEx_PLL3_Config>
 800763a:	4603      	mov	r3, r0
 800763c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800763e:	e009      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	75fb      	strb	r3, [r7, #23]
      break;
 8007644:	e006      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007646:	bf00      	nop
 8007648:	e004      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800764a:	bf00      	nop
 800764c:	e002      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800764e:	bf00      	nop
 8007650:	e000      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007654:	7dfb      	ldrb	r3, [r7, #23]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800765a:	4b8e      	ldr	r3, [pc, #568]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800765c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007668:	498a      	ldr	r1, [pc, #552]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800766a:	4313      	orrs	r3, r2
 800766c:	654b      	str	r3, [r1, #84]	; 0x54
 800766e:	e001      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767c:	2b00      	cmp	r3, #0
 800767e:	d04b      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007686:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800768a:	d02e      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800768c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007690:	d828      	bhi.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007696:	d02a      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800769c:	d822      	bhi.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800769e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076a2:	d026      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80076a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076a8:	d81c      	bhi.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80076aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ae:	d010      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80076b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076b4:	d816      	bhi.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01d      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80076ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076be:	d111      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3304      	adds	r3, #4
 80076c4:	2100      	movs	r1, #0
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 fcd2 	bl	8008070 <RCCEx_PLL2_Config>
 80076cc:	4603      	mov	r3, r0
 80076ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80076d0:	e012      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3324      	adds	r3, #36	; 0x24
 80076d6:	2102      	movs	r1, #2
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fd7b 	bl	80081d4 <RCCEx_PLL3_Config>
 80076de:	4603      	mov	r3, r0
 80076e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80076e2:	e009      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	75fb      	strb	r3, [r7, #23]
      break;
 80076e8:	e006      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80076ea:	bf00      	nop
 80076ec:	e004      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80076ee:	bf00      	nop
 80076f0:	e002      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80076f2:	bf00      	nop
 80076f4:	e000      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80076f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10a      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076fe:	4b65      	ldr	r3, [pc, #404]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007702:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800770c:	4961      	ldr	r1, [pc, #388]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800770e:	4313      	orrs	r3, r2
 8007710:	658b      	str	r3, [r1, #88]	; 0x58
 8007712:	e001      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007720:	2b00      	cmp	r3, #0
 8007722:	d04b      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800772a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800772e:	d02e      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007730:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007734:	d828      	bhi.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800773a:	d02a      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800773c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007740:	d822      	bhi.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007742:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007746:	d026      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007748:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800774c:	d81c      	bhi.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800774e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007752:	d010      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007758:	d816      	bhi.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d01d      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800775e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007762:	d111      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3304      	adds	r3, #4
 8007768:	2100      	movs	r1, #0
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fc80 	bl	8008070 <RCCEx_PLL2_Config>
 8007770:	4603      	mov	r3, r0
 8007772:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007774:	e012      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3324      	adds	r3, #36	; 0x24
 800777a:	2102      	movs	r1, #2
 800777c:	4618      	mov	r0, r3
 800777e:	f000 fd29 	bl	80081d4 <RCCEx_PLL3_Config>
 8007782:	4603      	mov	r3, r0
 8007784:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007786:	e009      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	75fb      	strb	r3, [r7, #23]
      break;
 800778c:	e006      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800778e:	bf00      	nop
 8007790:	e004      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007792:	bf00      	nop
 8007794:	e002      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007796:	bf00      	nop
 8007798:	e000      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800779a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10a      	bne.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80077a2:	4b3c      	ldr	r3, [pc, #240]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077b0:	4938      	ldr	r1, [pc, #224]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	658b      	str	r3, [r1, #88]	; 0x58
 80077b6:	e001      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
 80077ba:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0308 	and.w	r3, r3, #8
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01a      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d2:	d10a      	bne.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3324      	adds	r3, #36	; 0x24
 80077d8:	2102      	movs	r1, #2
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 fcfa 	bl	80081d4 <RCCEx_PLL3_Config>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077ea:	4b2a      	ldr	r3, [pc, #168]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077f8:	4926      	ldr	r1, [pc, #152]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0310 	and.w	r3, r3, #16
 8007806:	2b00      	cmp	r3, #0
 8007808:	d01a      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007814:	d10a      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3324      	adds	r3, #36	; 0x24
 800781a:	2102      	movs	r1, #2
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fcd9 	bl	80081d4 <RCCEx_PLL3_Config>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800782c:	4b19      	ldr	r3, [pc, #100]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800782e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800783a:	4916      	ldr	r1, [pc, #88]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800783c:	4313      	orrs	r3, r2
 800783e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d036      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007856:	d01f      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800785c:	d817      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007866:	d009      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007868:	e011      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3304      	adds	r3, #4
 800786e:	2100      	movs	r1, #0
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fbfd 	bl	8008070 <RCCEx_PLL2_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800787a:	e00e      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	3324      	adds	r3, #36	; 0x24
 8007880:	2102      	movs	r1, #2
 8007882:	4618      	mov	r0, r3
 8007884:	f000 fca6 	bl	80081d4 <RCCEx_PLL3_Config>
 8007888:	4603      	mov	r3, r0
 800788a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800788c:	e005      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	75fb      	strb	r3, [r7, #23]
      break;
 8007892:	e002      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007894:	58024400 	.word	0x58024400
      break;
 8007898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10a      	bne.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078a0:	4b93      	ldr	r3, [pc, #588]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80078ae:	4990      	ldr	r1, [pc, #576]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	658b      	str	r3, [r1, #88]	; 0x58
 80078b4:	e001      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d033      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078d0:	d01c      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80078d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078d6:	d816      	bhi.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80078d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078dc:	d003      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80078de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078e2:	d007      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80078e4:	e00f      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e6:	4b82      	ldr	r3, [pc, #520]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ea:	4a81      	ldr	r2, [pc, #516]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80078f2:	e00c      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3324      	adds	r3, #36	; 0x24
 80078f8:	2101      	movs	r1, #1
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 fc6a 	bl	80081d4 <RCCEx_PLL3_Config>
 8007900:	4603      	mov	r3, r0
 8007902:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007904:	e003      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	75fb      	strb	r3, [r7, #23]
      break;
 800790a:	e000      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800790c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007914:	4b76      	ldr	r3, [pc, #472]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007922:	4973      	ldr	r1, [pc, #460]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007924:	4313      	orrs	r3, r2
 8007926:	654b      	str	r3, [r1, #84]	; 0x54
 8007928:	e001      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d029      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007946:	d007      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007948:	e00f      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800794a:	4b69      	ldr	r3, [pc, #420]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	4a68      	ldr	r2, [pc, #416]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007954:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007956:	e00b      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3304      	adds	r3, #4
 800795c:	2102      	movs	r1, #2
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fb86 	bl	8008070 <RCCEx_PLL2_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007968:	e002      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	75fb      	strb	r3, [r7, #23]
      break;
 800796e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007970:	7dfb      	ldrb	r3, [r7, #23]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d109      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007976:	4b5e      	ldr	r3, [pc, #376]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800797a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007982:	495b      	ldr	r1, [pc, #364]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007984:	4313      	orrs	r3, r2
 8007986:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007988:	e001      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3324      	adds	r3, #36	; 0x24
 800799e:	2102      	movs	r1, #2
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fc17 	bl	80081d4 <RCCEx_PLL3_Config>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d030      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079c4:	d017      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80079c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ca:	d811      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80079cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d0:	d013      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80079d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d6:	d80b      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d010      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80079dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e0:	d106      	bne.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079e2:	4b43      	ldr	r3, [pc, #268]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	4a42      	ldr	r2, [pc, #264]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80079ee:	e007      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	75fb      	strb	r3, [r7, #23]
      break;
 80079f4:	e004      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80079f6:	bf00      	nop
 80079f8:	e002      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80079fa:	bf00      	nop
 80079fc:	e000      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80079fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a00:	7dfb      	ldrb	r3, [r7, #23]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d109      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a06:	4b3a      	ldr	r3, [pc, #232]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a12:	4937      	ldr	r1, [pc, #220]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	654b      	str	r3, [r1, #84]	; 0x54
 8007a18:	e001      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d008      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a2a:	4b31      	ldr	r3, [pc, #196]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a36:	492e      	ldr	r1, [pc, #184]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d009      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007a48:	4b29      	ldr	r3, [pc, #164]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a56:	4926      	ldr	r1, [pc, #152]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d008      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a68:	4b21      	ldr	r3, [pc, #132]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a74:	491e      	ldr	r1, [pc, #120]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00d      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a86:	4b1a      	ldr	r3, [pc, #104]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	4a19      	ldr	r2, [pc, #100]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a90:	6113      	str	r3, [r2, #16]
 8007a92:	4b17      	ldr	r3, [pc, #92]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a94:	691a      	ldr	r2, [r3, #16]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a9c:	4914      	ldr	r1, [pc, #80]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	da08      	bge.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007aaa:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab6:	490e      	ldr	r1, [pc, #56]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d009      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ac8:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007acc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad6:	4906      	ldr	r1, [pc, #24]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007adc:	7dbb      	ldrb	r3, [r7, #22]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e000      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	58024400 	.word	0x58024400

08007af4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007af8:	f7ff f860 	bl	8006bbc <HAL_RCC_GetHCLKFreq>
 8007afc:	4602      	mov	r2, r0
 8007afe:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	091b      	lsrs	r3, r3, #4
 8007b04:	f003 0307 	and.w	r3, r3, #7
 8007b08:	4904      	ldr	r1, [pc, #16]	; (8007b1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b0a:	5ccb      	ldrb	r3, [r1, r3]
 8007b0c:	f003 031f 	and.w	r3, r3, #31
 8007b10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	58024400 	.word	0x58024400
 8007b1c:	0800e180 	.word	0x0800e180

08007b20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b089      	sub	sp, #36	; 0x24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b28:	4ba1      	ldr	r3, [pc, #644]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2c:	f003 0303 	and.w	r3, r3, #3
 8007b30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007b32:	4b9f      	ldr	r3, [pc, #636]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b36:	0b1b      	lsrs	r3, r3, #12
 8007b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007b3e:	4b9c      	ldr	r3, [pc, #624]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	091b      	lsrs	r3, r3, #4
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007b4a:	4b99      	ldr	r3, [pc, #612]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4e:	08db      	lsrs	r3, r3, #3
 8007b50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	fb02 f303 	mul.w	r3, r2, r3
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 8111 	beq.w	8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	f000 8083 	beq.w	8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	f200 80a1 	bhi.w	8007cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d056      	beq.n	8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007b8a:	e099      	b.n	8007cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b8c:	4b88      	ldr	r3, [pc, #544]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0320 	and.w	r3, r3, #32
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d02d      	beq.n	8007bf4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b98:	4b85      	ldr	r3, [pc, #532]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	08db      	lsrs	r3, r3, #3
 8007b9e:	f003 0303 	and.w	r3, r3, #3
 8007ba2:	4a84      	ldr	r2, [pc, #528]	; (8007db4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	ee07 3a90 	vmov	s15, r3
 8007bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc2:	4b7b      	ldr	r3, [pc, #492]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007bf2:	e087      	b.n	8007d04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	ee07 3a90 	vmov	s15, r3
 8007bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c06:	4b6a      	ldr	r3, [pc, #424]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c36:	e065      	b.n	8007d04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	ee07 3a90 	vmov	s15, r3
 8007c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c4a:	4b59      	ldr	r3, [pc, #356]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c52:	ee07 3a90 	vmov	s15, r3
 8007c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c7a:	e043      	b.n	8007d04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	ee07 3a90 	vmov	s15, r3
 8007c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c8e:	4b48      	ldr	r3, [pc, #288]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c96:	ee07 3a90 	vmov	s15, r3
 8007c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ca2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cbe:	e021      	b.n	8007d04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	ee07 3a90 	vmov	s15, r3
 8007cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd2:	4b37      	ldr	r3, [pc, #220]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cda:	ee07 3a90 	vmov	s15, r3
 8007cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ce6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007d04:	4b2a      	ldr	r3, [pc, #168]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d08:	0a5b      	lsrs	r3, r3, #9
 8007d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d2a:	ee17 2a90 	vmov	r2, s15
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007d32:	4b1f      	ldr	r3, [pc, #124]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d36:	0c1b      	lsrs	r3, r3, #16
 8007d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d3c:	ee07 3a90 	vmov	s15, r3
 8007d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d58:	ee17 2a90 	vmov	r2, s15
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007d60:	4b13      	ldr	r3, [pc, #76]	; (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	0e1b      	lsrs	r3, r3, #24
 8007d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d86:	ee17 2a90 	vmov	r2, s15
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d8e:	e008      	b.n	8007da2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	609a      	str	r2, [r3, #8]
}
 8007da2:	bf00      	nop
 8007da4:	3724      	adds	r7, #36	; 0x24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	58024400 	.word	0x58024400
 8007db4:	03d09000 	.word	0x03d09000
 8007db8:	46000000 	.word	0x46000000
 8007dbc:	4c742400 	.word	0x4c742400
 8007dc0:	4a742400 	.word	0x4a742400
 8007dc4:	4c371b00 	.word	0x4c371b00

08007dc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b089      	sub	sp, #36	; 0x24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dd0:	4ba1      	ldr	r3, [pc, #644]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd4:	f003 0303 	and.w	r3, r3, #3
 8007dd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007dda:	4b9f      	ldr	r3, [pc, #636]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	0d1b      	lsrs	r3, r3, #20
 8007de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007de4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007de6:	4b9c      	ldr	r3, [pc, #624]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dea:	0a1b      	lsrs	r3, r3, #8
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007df2:	4b99      	ldr	r3, [pc, #612]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df6:	08db      	lsrs	r3, r3, #3
 8007df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	fb02 f303 	mul.w	r3, r2, r3
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 8111 	beq.w	8008038 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	f000 8083 	beq.w	8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	f200 80a1 	bhi.w	8007f68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d056      	beq.n	8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007e32:	e099      	b.n	8007f68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e34:	4b88      	ldr	r3, [pc, #544]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0320 	and.w	r3, r3, #32
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d02d      	beq.n	8007e9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e40:	4b85      	ldr	r3, [pc, #532]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	08db      	lsrs	r3, r3, #3
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	4a84      	ldr	r2, [pc, #528]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e50:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	ee07 3a90 	vmov	s15, r3
 8007e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e6a:	4b7b      	ldr	r3, [pc, #492]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e9a:	e087      	b.n	8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	ee07 3a90 	vmov	s15, r3
 8007ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eae:	4b6a      	ldr	r3, [pc, #424]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb6:	ee07 3a90 	vmov	s15, r3
 8007eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ec2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ede:	e065      	b.n	8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ef2:	4b59      	ldr	r3, [pc, #356]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f22:	e043      	b.n	8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800806c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f36:	4b48      	ldr	r3, [pc, #288]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f66:	e021      	b.n	8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	ee07 3a90 	vmov	s15, r3
 8007f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f7a:	4b37      	ldr	r3, [pc, #220]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f82:	ee07 3a90 	vmov	s15, r3
 8007f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007faa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007fac:	4b2a      	ldr	r3, [pc, #168]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb0:	0a5b      	lsrs	r3, r3, #9
 8007fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb6:	ee07 3a90 	vmov	s15, r3
 8007fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fd2:	ee17 2a90 	vmov	r2, s15
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007fda:	4b1f      	ldr	r3, [pc, #124]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	0c1b      	lsrs	r3, r3, #16
 8007fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe4:	ee07 3a90 	vmov	s15, r3
 8007fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ff0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ff4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008000:	ee17 2a90 	vmov	r2, s15
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008008:	4b13      	ldr	r3, [pc, #76]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800c:	0e1b      	lsrs	r3, r3, #24
 800800e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800801e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008022:	edd7 6a07 	vldr	s13, [r7, #28]
 8008026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800802a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800802e:	ee17 2a90 	vmov	r2, s15
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008036:	e008      	b.n	800804a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	609a      	str	r2, [r3, #8]
}
 800804a:	bf00      	nop
 800804c:	3724      	adds	r7, #36	; 0x24
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	58024400 	.word	0x58024400
 800805c:	03d09000 	.word	0x03d09000
 8008060:	46000000 	.word	0x46000000
 8008064:	4c742400 	.word	0x4c742400
 8008068:	4a742400 	.word	0x4a742400
 800806c:	4c371b00 	.word	0x4c371b00

08008070 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800807e:	4b53      	ldr	r3, [pc, #332]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	2b03      	cmp	r3, #3
 8008088:	d101      	bne.n	800808e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e099      	b.n	80081c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800808e:	4b4f      	ldr	r3, [pc, #316]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a4e      	ldr	r2, [pc, #312]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008094:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800809a:	f7fa ffd3 	bl	8003044 <HAL_GetTick>
 800809e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080a0:	e008      	b.n	80080b4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080a2:	f7fa ffcf 	bl	8003044 <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d901      	bls.n	80080b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e086      	b.n	80081c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080b4:	4b45      	ldr	r3, [pc, #276]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1f0      	bne.n	80080a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80080c0:	4b42      	ldr	r3, [pc, #264]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 80080c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	031b      	lsls	r3, r3, #12
 80080ce:	493f      	ldr	r1, [pc, #252]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	628b      	str	r3, [r1, #40]	; 0x28
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	3b01      	subs	r3, #1
 80080da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	025b      	lsls	r3, r3, #9
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	431a      	orrs	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	041b      	lsls	r3, r3, #16
 80080f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	061b      	lsls	r3, r3, #24
 8008100:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008104:	4931      	ldr	r1, [pc, #196]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008106:	4313      	orrs	r3, r2
 8008108:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800810a:	4b30      	ldr	r3, [pc, #192]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 800810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	492d      	ldr	r1, [pc, #180]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008118:	4313      	orrs	r3, r2
 800811a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800811c:	4b2b      	ldr	r3, [pc, #172]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 800811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008120:	f023 0220 	bic.w	r2, r3, #32
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	4928      	ldr	r1, [pc, #160]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 800812a:	4313      	orrs	r3, r2
 800812c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800812e:	4b27      	ldr	r3, [pc, #156]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008132:	4a26      	ldr	r2, [pc, #152]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008134:	f023 0310 	bic.w	r3, r3, #16
 8008138:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800813a:	4b24      	ldr	r3, [pc, #144]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 800813c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800813e:	4b24      	ldr	r3, [pc, #144]	; (80081d0 <RCCEx_PLL2_Config+0x160>)
 8008140:	4013      	ands	r3, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	69d2      	ldr	r2, [r2, #28]
 8008146:	00d2      	lsls	r2, r2, #3
 8008148:	4920      	ldr	r1, [pc, #128]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 800814a:	4313      	orrs	r3, r2
 800814c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800814e:	4b1f      	ldr	r3, [pc, #124]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008152:	4a1e      	ldr	r2, [pc, #120]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008154:	f043 0310 	orr.w	r3, r3, #16
 8008158:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d106      	bne.n	800816e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008160:	4b1a      	ldr	r3, [pc, #104]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008164:	4a19      	ldr	r2, [pc, #100]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008166:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800816a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800816c:	e00f      	b.n	800818e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d106      	bne.n	8008182 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008174:	4b15      	ldr	r3, [pc, #84]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	4a14      	ldr	r2, [pc, #80]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 800817a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800817e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008180:	e005      	b.n	800818e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008182:	4b12      	ldr	r3, [pc, #72]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008186:	4a11      	ldr	r2, [pc, #68]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800818c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800818e:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a0e      	ldr	r2, [pc, #56]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 8008194:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800819a:	f7fa ff53 	bl	8003044 <HAL_GetTick>
 800819e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081a0:	e008      	b.n	80081b4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80081a2:	f7fa ff4f 	bl	8003044 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e006      	b.n	80081c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <RCCEx_PLL2_Config+0x15c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0f0      	beq.n	80081a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	58024400 	.word	0x58024400
 80081d0:	ffff0007 	.word	0xffff0007

080081d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081e2:	4b53      	ldr	r3, [pc, #332]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d101      	bne.n	80081f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e099      	b.n	8008326 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80081f2:	4b4f      	ldr	r3, [pc, #316]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a4e      	ldr	r2, [pc, #312]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80081f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081fe:	f7fa ff21 	bl	8003044 <HAL_GetTick>
 8008202:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008204:	e008      	b.n	8008218 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008206:	f7fa ff1d 	bl	8003044 <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	2b02      	cmp	r3, #2
 8008212:	d901      	bls.n	8008218 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e086      	b.n	8008326 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008218:	4b45      	ldr	r3, [pc, #276]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1f0      	bne.n	8008206 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008224:	4b42      	ldr	r3, [pc, #264]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 8008226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008228:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	051b      	lsls	r3, r3, #20
 8008232:	493f      	ldr	r1, [pc, #252]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 8008234:	4313      	orrs	r3, r2
 8008236:	628b      	str	r3, [r1, #40]	; 0x28
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	3b01      	subs	r3, #1
 800823e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	3b01      	subs	r3, #1
 8008248:	025b      	lsls	r3, r3, #9
 800824a:	b29b      	uxth	r3, r3
 800824c:	431a      	orrs	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	3b01      	subs	r3, #1
 8008254:	041b      	lsls	r3, r3, #16
 8008256:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	3b01      	subs	r3, #1
 8008262:	061b      	lsls	r3, r3, #24
 8008264:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008268:	4931      	ldr	r1, [pc, #196]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 800826a:	4313      	orrs	r3, r2
 800826c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800826e:	4b30      	ldr	r3, [pc, #192]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 8008270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008272:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	492d      	ldr	r1, [pc, #180]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 800827c:	4313      	orrs	r3, r2
 800827e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008280:	4b2b      	ldr	r3, [pc, #172]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	4928      	ldr	r1, [pc, #160]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 800828e:	4313      	orrs	r3, r2
 8008290:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008292:	4b27      	ldr	r3, [pc, #156]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 8008294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008296:	4a26      	ldr	r2, [pc, #152]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 8008298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800829c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800829e:	4b24      	ldr	r3, [pc, #144]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082a2:	4b24      	ldr	r3, [pc, #144]	; (8008334 <RCCEx_PLL3_Config+0x160>)
 80082a4:	4013      	ands	r3, r2
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	69d2      	ldr	r2, [r2, #28]
 80082aa:	00d2      	lsls	r2, r2, #3
 80082ac:	4920      	ldr	r1, [pc, #128]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80082b2:	4b1f      	ldr	r3, [pc, #124]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b6:	4a1e      	ldr	r2, [pc, #120]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d106      	bne.n	80082d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80082c4:	4b1a      	ldr	r3, [pc, #104]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	4a19      	ldr	r2, [pc, #100]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80082ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082d0:	e00f      	b.n	80082f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d106      	bne.n	80082e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80082d8:	4b15      	ldr	r3, [pc, #84]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082dc:	4a14      	ldr	r2, [pc, #80]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80082e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082e4:	e005      	b.n	80082f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80082e6:	4b12      	ldr	r3, [pc, #72]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ea:	4a11      	ldr	r2, [pc, #68]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80082f2:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a0e      	ldr	r2, [pc, #56]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 80082f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082fe:	f7fa fea1 	bl	8003044 <HAL_GetTick>
 8008302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008304:	e008      	b.n	8008318 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008306:	f7fa fe9d 	bl	8003044 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d901      	bls.n	8008318 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e006      	b.n	8008326 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008318:	4b05      	ldr	r3, [pc, #20]	; (8008330 <RCCEx_PLL3_Config+0x15c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0f0      	beq.n	8008306 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	58024400 	.word	0x58024400
 8008334:	ffff0007 	.word	0xffff0007

08008338 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e0f1      	b.n	800852e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a78      	ldr	r2, [pc, #480]	; (8008538 <HAL_SPI_Init+0x200>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d00f      	beq.n	800837a <HAL_SPI_Init+0x42>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a77      	ldr	r2, [pc, #476]	; (800853c <HAL_SPI_Init+0x204>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00a      	beq.n	800837a <HAL_SPI_Init+0x42>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a75      	ldr	r2, [pc, #468]	; (8008540 <HAL_SPI_Init+0x208>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d005      	beq.n	800837a <HAL_SPI_Init+0x42>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	2b0f      	cmp	r3, #15
 8008374:	d901      	bls.n	800837a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e0d9      	b.n	800852e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f8e2 	bl	8008544 <SPI_GetPacketSize>
 8008380:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a6c      	ldr	r2, [pc, #432]	; (8008538 <HAL_SPI_Init+0x200>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d00c      	beq.n	80083a6 <HAL_SPI_Init+0x6e>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a6a      	ldr	r2, [pc, #424]	; (800853c <HAL_SPI_Init+0x204>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d007      	beq.n	80083a6 <HAL_SPI_Init+0x6e>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a69      	ldr	r2, [pc, #420]	; (8008540 <HAL_SPI_Init+0x208>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d002      	beq.n	80083a6 <HAL_SPI_Init+0x6e>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b08      	cmp	r3, #8
 80083a4:	d811      	bhi.n	80083ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083aa:	4a63      	ldr	r2, [pc, #396]	; (8008538 <HAL_SPI_Init+0x200>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d009      	beq.n	80083c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a61      	ldr	r2, [pc, #388]	; (800853c <HAL_SPI_Init+0x204>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d004      	beq.n	80083c4 <HAL_SPI_Init+0x8c>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a60      	ldr	r2, [pc, #384]	; (8008540 <HAL_SPI_Init+0x208>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d104      	bne.n	80083ce <HAL_SPI_Init+0x96>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b10      	cmp	r3, #16
 80083c8:	d901      	bls.n	80083ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e0af      	b.n	800852e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d106      	bne.n	80083e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7f9 fefa 	bl	80021dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0201 	bic.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800840a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008414:	d119      	bne.n	800844a <HAL_SPI_Init+0x112>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800841e:	d103      	bne.n	8008428 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008424:	2b00      	cmp	r3, #0
 8008426:	d008      	beq.n	800843a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10c      	bne.n	800844a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008434:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008438:	d107      	bne.n	800844a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008448:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	69da      	ldr	r2, [r3, #28]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008452:	431a      	orrs	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	431a      	orrs	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845c:	ea42 0103 	orr.w	r1, r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	431a      	orrs	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	431a      	orrs	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	431a      	orrs	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	431a      	orrs	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	431a      	orrs	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	431a      	orrs	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800849e:	431a      	orrs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	431a      	orrs	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084aa:	ea42 0103 	orr.w	r1, r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d113      	bne.n	80084ea <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0201 	bic.w	r2, r2, #1
 80084f8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	40013000 	.word	0x40013000
 800853c:	40003800 	.word	0x40003800
 8008540:	40003c00 	.word	0x40003c00

08008544 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008550:	095b      	lsrs	r3, r3, #5
 8008552:	3301      	adds	r3, #1
 8008554:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	3301      	adds	r3, #1
 800855c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	3307      	adds	r3, #7
 8008562:	08db      	lsrs	r3, r3, #3
 8008564:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	fb02 f303 	mul.w	r3, r2, r3
}
 800856e:	4618      	mov	r0, r3
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e049      	b.n	8008620 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b00      	cmp	r3, #0
 8008596:	d106      	bne.n	80085a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7f9 fe81 	bl	80022a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2202      	movs	r2, #2
 80085aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3304      	adds	r3, #4
 80085b6:	4619      	mov	r1, r3
 80085b8:	4610      	mov	r0, r2
 80085ba:	f000 fd71 	bl	80090a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b01      	cmp	r3, #1
 800863a:	d001      	beq.n	8008640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e054      	b.n	80086ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f042 0201 	orr.w	r2, r2, #1
 8008656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a26      	ldr	r2, [pc, #152]	; (80086f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d022      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800866a:	d01d      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a22      	ldr	r2, [pc, #136]	; (80086fc <HAL_TIM_Base_Start_IT+0xd4>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d018      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a21      	ldr	r2, [pc, #132]	; (8008700 <HAL_TIM_Base_Start_IT+0xd8>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d013      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a1f      	ldr	r2, [pc, #124]	; (8008704 <HAL_TIM_Base_Start_IT+0xdc>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d00e      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a1e      	ldr	r2, [pc, #120]	; (8008708 <HAL_TIM_Base_Start_IT+0xe0>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d009      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a1c      	ldr	r2, [pc, #112]	; (800870c <HAL_TIM_Base_Start_IT+0xe4>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d004      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a1b      	ldr	r2, [pc, #108]	; (8008710 <HAL_TIM_Base_Start_IT+0xe8>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d115      	bne.n	80086d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689a      	ldr	r2, [r3, #8]
 80086ae:	4b19      	ldr	r3, [pc, #100]	; (8008714 <HAL_TIM_Base_Start_IT+0xec>)
 80086b0:	4013      	ands	r3, r2
 80086b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b06      	cmp	r3, #6
 80086b8:	d015      	beq.n	80086e6 <HAL_TIM_Base_Start_IT+0xbe>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c0:	d011      	beq.n	80086e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f042 0201 	orr.w	r2, r2, #1
 80086d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d2:	e008      	b.n	80086e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0201 	orr.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	e000      	b.n	80086e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	40010000 	.word	0x40010000
 80086fc:	40000400 	.word	0x40000400
 8008700:	40000800 	.word	0x40000800
 8008704:	40000c00 	.word	0x40000c00
 8008708:	40010400 	.word	0x40010400
 800870c:	40001800 	.word	0x40001800
 8008710:	40014000 	.word	0x40014000
 8008714:	00010007 	.word	0x00010007

08008718 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e049      	b.n	80087be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d106      	bne.n	8008744 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f841 	bl	80087c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3304      	adds	r3, #4
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f000 fca2 	bl	80090a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d109      	bne.n	8008800 <HAL_TIM_PWM_Start+0x24>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	bf14      	ite	ne
 80087f8:	2301      	movne	r3, #1
 80087fa:	2300      	moveq	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	e03c      	b.n	800887a <HAL_TIM_PWM_Start+0x9e>
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2b04      	cmp	r3, #4
 8008804:	d109      	bne.n	800881a <HAL_TIM_PWM_Start+0x3e>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b01      	cmp	r3, #1
 8008810:	bf14      	ite	ne
 8008812:	2301      	movne	r3, #1
 8008814:	2300      	moveq	r3, #0
 8008816:	b2db      	uxtb	r3, r3
 8008818:	e02f      	b.n	800887a <HAL_TIM_PWM_Start+0x9e>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b08      	cmp	r3, #8
 800881e:	d109      	bne.n	8008834 <HAL_TIM_PWM_Start+0x58>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b01      	cmp	r3, #1
 800882a:	bf14      	ite	ne
 800882c:	2301      	movne	r3, #1
 800882e:	2300      	moveq	r3, #0
 8008830:	b2db      	uxtb	r3, r3
 8008832:	e022      	b.n	800887a <HAL_TIM_PWM_Start+0x9e>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b0c      	cmp	r3, #12
 8008838:	d109      	bne.n	800884e <HAL_TIM_PWM_Start+0x72>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b01      	cmp	r3, #1
 8008844:	bf14      	ite	ne
 8008846:	2301      	movne	r3, #1
 8008848:	2300      	moveq	r3, #0
 800884a:	b2db      	uxtb	r3, r3
 800884c:	e015      	b.n	800887a <HAL_TIM_PWM_Start+0x9e>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b10      	cmp	r3, #16
 8008852:	d109      	bne.n	8008868 <HAL_TIM_PWM_Start+0x8c>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b01      	cmp	r3, #1
 800885e:	bf14      	ite	ne
 8008860:	2301      	movne	r3, #1
 8008862:	2300      	moveq	r3, #0
 8008864:	b2db      	uxtb	r3, r3
 8008866:	e008      	b.n	800887a <HAL_TIM_PWM_Start+0x9e>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800886e:	b2db      	uxtb	r3, r3
 8008870:	2b01      	cmp	r3, #1
 8008872:	bf14      	ite	ne
 8008874:	2301      	movne	r3, #1
 8008876:	2300      	moveq	r3, #0
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e0a1      	b.n	80089c6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d104      	bne.n	8008892 <HAL_TIM_PWM_Start+0xb6>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008890:	e023      	b.n	80088da <HAL_TIM_PWM_Start+0xfe>
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b04      	cmp	r3, #4
 8008896:	d104      	bne.n	80088a2 <HAL_TIM_PWM_Start+0xc6>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088a0:	e01b      	b.n	80088da <HAL_TIM_PWM_Start+0xfe>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d104      	bne.n	80088b2 <HAL_TIM_PWM_Start+0xd6>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088b0:	e013      	b.n	80088da <HAL_TIM_PWM_Start+0xfe>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b0c      	cmp	r3, #12
 80088b6:	d104      	bne.n	80088c2 <HAL_TIM_PWM_Start+0xe6>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2202      	movs	r2, #2
 80088bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088c0:	e00b      	b.n	80088da <HAL_TIM_PWM_Start+0xfe>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b10      	cmp	r3, #16
 80088c6:	d104      	bne.n	80088d2 <HAL_TIM_PWM_Start+0xf6>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088d0:	e003      	b.n	80088da <HAL_TIM_PWM_Start+0xfe>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2202      	movs	r2, #2
 80088d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2201      	movs	r2, #1
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 ffea 	bl	80098bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a38      	ldr	r2, [pc, #224]	; (80089d0 <HAL_TIM_PWM_Start+0x1f4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d013      	beq.n	800891a <HAL_TIM_PWM_Start+0x13e>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a37      	ldr	r2, [pc, #220]	; (80089d4 <HAL_TIM_PWM_Start+0x1f8>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d00e      	beq.n	800891a <HAL_TIM_PWM_Start+0x13e>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a35      	ldr	r2, [pc, #212]	; (80089d8 <HAL_TIM_PWM_Start+0x1fc>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d009      	beq.n	800891a <HAL_TIM_PWM_Start+0x13e>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a34      	ldr	r2, [pc, #208]	; (80089dc <HAL_TIM_PWM_Start+0x200>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d004      	beq.n	800891a <HAL_TIM_PWM_Start+0x13e>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a32      	ldr	r2, [pc, #200]	; (80089e0 <HAL_TIM_PWM_Start+0x204>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d101      	bne.n	800891e <HAL_TIM_PWM_Start+0x142>
 800891a:	2301      	movs	r3, #1
 800891c:	e000      	b.n	8008920 <HAL_TIM_PWM_Start+0x144>
 800891e:	2300      	movs	r3, #0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d007      	beq.n	8008934 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008932:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a25      	ldr	r2, [pc, #148]	; (80089d0 <HAL_TIM_PWM_Start+0x1f4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d022      	beq.n	8008984 <HAL_TIM_PWM_Start+0x1a8>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008946:	d01d      	beq.n	8008984 <HAL_TIM_PWM_Start+0x1a8>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a25      	ldr	r2, [pc, #148]	; (80089e4 <HAL_TIM_PWM_Start+0x208>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d018      	beq.n	8008984 <HAL_TIM_PWM_Start+0x1a8>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a24      	ldr	r2, [pc, #144]	; (80089e8 <HAL_TIM_PWM_Start+0x20c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d013      	beq.n	8008984 <HAL_TIM_PWM_Start+0x1a8>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a22      	ldr	r2, [pc, #136]	; (80089ec <HAL_TIM_PWM_Start+0x210>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d00e      	beq.n	8008984 <HAL_TIM_PWM_Start+0x1a8>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a1a      	ldr	r2, [pc, #104]	; (80089d4 <HAL_TIM_PWM_Start+0x1f8>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d009      	beq.n	8008984 <HAL_TIM_PWM_Start+0x1a8>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a1e      	ldr	r2, [pc, #120]	; (80089f0 <HAL_TIM_PWM_Start+0x214>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d004      	beq.n	8008984 <HAL_TIM_PWM_Start+0x1a8>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a16      	ldr	r2, [pc, #88]	; (80089d8 <HAL_TIM_PWM_Start+0x1fc>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d115      	bne.n	80089b0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689a      	ldr	r2, [r3, #8]
 800898a:	4b1a      	ldr	r3, [pc, #104]	; (80089f4 <HAL_TIM_PWM_Start+0x218>)
 800898c:	4013      	ands	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2b06      	cmp	r3, #6
 8008994:	d015      	beq.n	80089c2 <HAL_TIM_PWM_Start+0x1e6>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800899c:	d011      	beq.n	80089c2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f042 0201 	orr.w	r2, r2, #1
 80089ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ae:	e008      	b.n	80089c2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0201 	orr.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	e000      	b.n	80089c4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	40010000 	.word	0x40010000
 80089d4:	40010400 	.word	0x40010400
 80089d8:	40014000 	.word	0x40014000
 80089dc:	40014400 	.word	0x40014400
 80089e0:	40014800 	.word	0x40014800
 80089e4:	40000400 	.word	0x40000400
 80089e8:	40000800 	.word	0x40000800
 80089ec:	40000c00 	.word	0x40000c00
 80089f0:	40001800 	.word	0x40001800
 80089f4:	00010007 	.word	0x00010007

080089f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d122      	bne.n	8008a54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d11b      	bne.n	8008a54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f06f 0202 	mvn.w	r2, #2
 8008a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fb12 	bl	8009064 <HAL_TIM_IC_CaptureCallback>
 8008a40:	e005      	b.n	8008a4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fb04 	bl	8009050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fb15 	bl	8009078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	f003 0304 	and.w	r3, r3, #4
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d122      	bne.n	8008aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b04      	cmp	r3, #4
 8008a6e:	d11b      	bne.n	8008aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f06f 0204 	mvn.w	r2, #4
 8008a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2202      	movs	r2, #2
 8008a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fae8 	bl	8009064 <HAL_TIM_IC_CaptureCallback>
 8008a94:	e005      	b.n	8008aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fada 	bl	8009050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 faeb 	bl	8009078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	f003 0308 	and.w	r3, r3, #8
 8008ab2:	2b08      	cmp	r3, #8
 8008ab4:	d122      	bne.n	8008afc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	f003 0308 	and.w	r3, r3, #8
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d11b      	bne.n	8008afc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f06f 0208 	mvn.w	r2, #8
 8008acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2204      	movs	r2, #4
 8008ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	f003 0303 	and.w	r3, r3, #3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fabe 	bl	8009064 <HAL_TIM_IC_CaptureCallback>
 8008ae8:	e005      	b.n	8008af6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fab0 	bl	8009050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fac1 	bl	8009078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f003 0310 	and.w	r3, r3, #16
 8008b06:	2b10      	cmp	r3, #16
 8008b08:	d122      	bne.n	8008b50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	f003 0310 	and.w	r3, r3, #16
 8008b14:	2b10      	cmp	r3, #16
 8008b16:	d11b      	bne.n	8008b50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f06f 0210 	mvn.w	r2, #16
 8008b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2208      	movs	r2, #8
 8008b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fa94 	bl	8009064 <HAL_TIM_IC_CaptureCallback>
 8008b3c:	e005      	b.n	8008b4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fa86 	bl	8009050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fa97 	bl	8009078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d10e      	bne.n	8008b7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d107      	bne.n	8008b7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f06f 0201 	mvn.w	r2, #1
 8008b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7f9 fa34 	bl	8001fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b86:	2b80      	cmp	r3, #128	; 0x80
 8008b88:	d10e      	bne.n	8008ba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b94:	2b80      	cmp	r3, #128	; 0x80
 8008b96:	d107      	bne.n	8008ba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 ffc6 	bl	8009b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb6:	d10e      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d107      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 ffb9 	bl	8009b48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be0:	2b40      	cmp	r3, #64	; 0x40
 8008be2:	d10e      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bee:	2b40      	cmp	r3, #64	; 0x40
 8008bf0:	d107      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fa45 	bl	800908c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	f003 0320 	and.w	r3, r3, #32
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d10e      	bne.n	8008c2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	2b20      	cmp	r3, #32
 8008c1c:	d107      	bne.n	8008c2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f06f 0220 	mvn.w	r2, #32
 8008c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 ff79 	bl	8009b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
	...

08008c38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d101      	bne.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c52:	2302      	movs	r3, #2
 8008c54:	e0ff      	b.n	8008e56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b14      	cmp	r3, #20
 8008c62:	f200 80f0 	bhi.w	8008e46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008c66:	a201      	add	r2, pc, #4	; (adr r2, 8008c6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6c:	08008cc1 	.word	0x08008cc1
 8008c70:	08008e47 	.word	0x08008e47
 8008c74:	08008e47 	.word	0x08008e47
 8008c78:	08008e47 	.word	0x08008e47
 8008c7c:	08008d01 	.word	0x08008d01
 8008c80:	08008e47 	.word	0x08008e47
 8008c84:	08008e47 	.word	0x08008e47
 8008c88:	08008e47 	.word	0x08008e47
 8008c8c:	08008d43 	.word	0x08008d43
 8008c90:	08008e47 	.word	0x08008e47
 8008c94:	08008e47 	.word	0x08008e47
 8008c98:	08008e47 	.word	0x08008e47
 8008c9c:	08008d83 	.word	0x08008d83
 8008ca0:	08008e47 	.word	0x08008e47
 8008ca4:	08008e47 	.word	0x08008e47
 8008ca8:	08008e47 	.word	0x08008e47
 8008cac:	08008dc5 	.word	0x08008dc5
 8008cb0:	08008e47 	.word	0x08008e47
 8008cb4:	08008e47 	.word	0x08008e47
 8008cb8:	08008e47 	.word	0x08008e47
 8008cbc:	08008e05 	.word	0x08008e05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68b9      	ldr	r1, [r7, #8]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 fa84 	bl	80091d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	699a      	ldr	r2, [r3, #24]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f042 0208 	orr.w	r2, r2, #8
 8008cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	699a      	ldr	r2, [r3, #24]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0204 	bic.w	r2, r2, #4
 8008cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6999      	ldr	r1, [r3, #24]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	691a      	ldr	r2, [r3, #16]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	619a      	str	r2, [r3, #24]
      break;
 8008cfe:	e0a5      	b.n	8008e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68b9      	ldr	r1, [r7, #8]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 faf4 	bl	80092f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	699a      	ldr	r2, [r3, #24]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	699a      	ldr	r2, [r3, #24]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6999      	ldr	r1, [r3, #24]
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	021a      	lsls	r2, r3, #8
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	619a      	str	r2, [r3, #24]
      break;
 8008d40:	e084      	b.n	8008e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68b9      	ldr	r1, [r7, #8]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f000 fb5d 	bl	8009408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	69da      	ldr	r2, [r3, #28]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f042 0208 	orr.w	r2, r2, #8
 8008d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	69da      	ldr	r2, [r3, #28]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f022 0204 	bic.w	r2, r2, #4
 8008d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	69d9      	ldr	r1, [r3, #28]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	691a      	ldr	r2, [r3, #16]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	430a      	orrs	r2, r1
 8008d7e:	61da      	str	r2, [r3, #28]
      break;
 8008d80:	e064      	b.n	8008e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68b9      	ldr	r1, [r7, #8]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fbc5 	bl	8009518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	69da      	ldr	r2, [r3, #28]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	69da      	ldr	r2, [r3, #28]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69d9      	ldr	r1, [r3, #28]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	021a      	lsls	r2, r3, #8
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	61da      	str	r2, [r3, #28]
      break;
 8008dc2:	e043      	b.n	8008e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68b9      	ldr	r1, [r7, #8]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 fc0e 	bl	80095ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f042 0208 	orr.w	r2, r2, #8
 8008dde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f022 0204 	bic.w	r2, r2, #4
 8008dee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	691a      	ldr	r2, [r3, #16]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e02:	e023      	b.n	8008e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68b9      	ldr	r1, [r7, #8]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 fc52 	bl	80096b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	021a      	lsls	r2, r3, #8
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	430a      	orrs	r2, r1
 8008e42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e44:	e002      	b.n	8008e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	75fb      	strb	r3, [r7, #23]
      break;
 8008e4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop

08008e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d101      	bne.n	8008e7c <HAL_TIM_ConfigClockSource+0x1c>
 8008e78:	2302      	movs	r3, #2
 8008e7a:	e0dc      	b.n	8009036 <HAL_TIM_ConfigClockSource+0x1d6>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2202      	movs	r2, #2
 8008e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	4b6a      	ldr	r3, [pc, #424]	; (8009040 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008e98:	4013      	ands	r3, r2
 8008e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a64      	ldr	r2, [pc, #400]	; (8009044 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	f000 80a9 	beq.w	800900a <HAL_TIM_ConfigClockSource+0x1aa>
 8008eb8:	4a62      	ldr	r2, [pc, #392]	; (8009044 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	f200 80ae 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1bc>
 8008ec0:	4a61      	ldr	r2, [pc, #388]	; (8009048 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	f000 80a1 	beq.w	800900a <HAL_TIM_ConfigClockSource+0x1aa>
 8008ec8:	4a5f      	ldr	r2, [pc, #380]	; (8009048 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	f200 80a6 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1bc>
 8008ed0:	4a5e      	ldr	r2, [pc, #376]	; (800904c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	f000 8099 	beq.w	800900a <HAL_TIM_ConfigClockSource+0x1aa>
 8008ed8:	4a5c      	ldr	r2, [pc, #368]	; (800904c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	f200 809e 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1bc>
 8008ee0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008ee4:	f000 8091 	beq.w	800900a <HAL_TIM_ConfigClockSource+0x1aa>
 8008ee8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008eec:	f200 8096 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1bc>
 8008ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ef4:	f000 8089 	beq.w	800900a <HAL_TIM_ConfigClockSource+0x1aa>
 8008ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008efc:	f200 808e 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f04:	d03e      	beq.n	8008f84 <HAL_TIM_ConfigClockSource+0x124>
 8008f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f0a:	f200 8087 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f12:	f000 8086 	beq.w	8009022 <HAL_TIM_ConfigClockSource+0x1c2>
 8008f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f1a:	d87f      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f1c:	2b70      	cmp	r3, #112	; 0x70
 8008f1e:	d01a      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0xf6>
 8008f20:	2b70      	cmp	r3, #112	; 0x70
 8008f22:	d87b      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f24:	2b60      	cmp	r3, #96	; 0x60
 8008f26:	d050      	beq.n	8008fca <HAL_TIM_ConfigClockSource+0x16a>
 8008f28:	2b60      	cmp	r3, #96	; 0x60
 8008f2a:	d877      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f2c:	2b50      	cmp	r3, #80	; 0x50
 8008f2e:	d03c      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x14a>
 8008f30:	2b50      	cmp	r3, #80	; 0x50
 8008f32:	d873      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f34:	2b40      	cmp	r3, #64	; 0x40
 8008f36:	d058      	beq.n	8008fea <HAL_TIM_ConfigClockSource+0x18a>
 8008f38:	2b40      	cmp	r3, #64	; 0x40
 8008f3a:	d86f      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f3c:	2b30      	cmp	r3, #48	; 0x30
 8008f3e:	d064      	beq.n	800900a <HAL_TIM_ConfigClockSource+0x1aa>
 8008f40:	2b30      	cmp	r3, #48	; 0x30
 8008f42:	d86b      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f44:	2b20      	cmp	r3, #32
 8008f46:	d060      	beq.n	800900a <HAL_TIM_ConfigClockSource+0x1aa>
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	d867      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d05c      	beq.n	800900a <HAL_TIM_ConfigClockSource+0x1aa>
 8008f50:	2b10      	cmp	r3, #16
 8008f52:	d05a      	beq.n	800900a <HAL_TIM_ConfigClockSource+0x1aa>
 8008f54:	e062      	b.n	800901c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	6899      	ldr	r1, [r3, #8]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	685a      	ldr	r2, [r3, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	f000 fc89 	bl	800987c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	609a      	str	r2, [r3, #8]
      break;
 8008f82:	e04f      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6818      	ldr	r0, [r3, #0]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	6899      	ldr	r1, [r3, #8]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f000 fc72 	bl	800987c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fa6:	609a      	str	r2, [r3, #8]
      break;
 8008fa8:	e03c      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6818      	ldr	r0, [r3, #0]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	6859      	ldr	r1, [r3, #4]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f000 fbe2 	bl	8009780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2150      	movs	r1, #80	; 0x50
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 fc3c 	bl	8009840 <TIM_ITRx_SetConfig>
      break;
 8008fc8:	e02c      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6818      	ldr	r0, [r3, #0]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	6859      	ldr	r1, [r3, #4]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f000 fc01 	bl	80097de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2160      	movs	r1, #96	; 0x60
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 fc2c 	bl	8009840 <TIM_ITRx_SetConfig>
      break;
 8008fe8:	e01c      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	6859      	ldr	r1, [r3, #4]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f000 fbc2 	bl	8009780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2140      	movs	r1, #64	; 0x40
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fc1c 	bl	8009840 <TIM_ITRx_SetConfig>
      break;
 8009008:	e00c      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4619      	mov	r1, r3
 8009014:	4610      	mov	r0, r2
 8009016:	f000 fc13 	bl	8009840 <TIM_ITRx_SetConfig>
      break;
 800901a:	e003      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	73fb      	strb	r3, [r7, #15]
      break;
 8009020:	e000      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	ffceff88 	.word	0xffceff88
 8009044:	00100040 	.word	0x00100040
 8009048:	00100030 	.word	0x00100030
 800904c:	00100020 	.word	0x00100020

08009050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a40      	ldr	r2, [pc, #256]	; (80091b4 <TIM_Base_SetConfig+0x114>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d013      	beq.n	80090e0 <TIM_Base_SetConfig+0x40>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090be:	d00f      	beq.n	80090e0 <TIM_Base_SetConfig+0x40>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a3d      	ldr	r2, [pc, #244]	; (80091b8 <TIM_Base_SetConfig+0x118>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d00b      	beq.n	80090e0 <TIM_Base_SetConfig+0x40>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a3c      	ldr	r2, [pc, #240]	; (80091bc <TIM_Base_SetConfig+0x11c>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d007      	beq.n	80090e0 <TIM_Base_SetConfig+0x40>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a3b      	ldr	r2, [pc, #236]	; (80091c0 <TIM_Base_SetConfig+0x120>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d003      	beq.n	80090e0 <TIM_Base_SetConfig+0x40>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a3a      	ldr	r2, [pc, #232]	; (80091c4 <TIM_Base_SetConfig+0x124>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d108      	bne.n	80090f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a2f      	ldr	r2, [pc, #188]	; (80091b4 <TIM_Base_SetConfig+0x114>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d01f      	beq.n	800913a <TIM_Base_SetConfig+0x9a>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009100:	d01b      	beq.n	800913a <TIM_Base_SetConfig+0x9a>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a2c      	ldr	r2, [pc, #176]	; (80091b8 <TIM_Base_SetConfig+0x118>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d017      	beq.n	800913a <TIM_Base_SetConfig+0x9a>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a2b      	ldr	r2, [pc, #172]	; (80091bc <TIM_Base_SetConfig+0x11c>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d013      	beq.n	800913a <TIM_Base_SetConfig+0x9a>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a2a      	ldr	r2, [pc, #168]	; (80091c0 <TIM_Base_SetConfig+0x120>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d00f      	beq.n	800913a <TIM_Base_SetConfig+0x9a>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a29      	ldr	r2, [pc, #164]	; (80091c4 <TIM_Base_SetConfig+0x124>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d00b      	beq.n	800913a <TIM_Base_SetConfig+0x9a>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a28      	ldr	r2, [pc, #160]	; (80091c8 <TIM_Base_SetConfig+0x128>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d007      	beq.n	800913a <TIM_Base_SetConfig+0x9a>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a27      	ldr	r2, [pc, #156]	; (80091cc <TIM_Base_SetConfig+0x12c>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d003      	beq.n	800913a <TIM_Base_SetConfig+0x9a>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a26      	ldr	r2, [pc, #152]	; (80091d0 <TIM_Base_SetConfig+0x130>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d108      	bne.n	800914c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	4313      	orrs	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	4313      	orrs	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	689a      	ldr	r2, [r3, #8]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a10      	ldr	r2, [pc, #64]	; (80091b4 <TIM_Base_SetConfig+0x114>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d00f      	beq.n	8009198 <TIM_Base_SetConfig+0xf8>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a12      	ldr	r2, [pc, #72]	; (80091c4 <TIM_Base_SetConfig+0x124>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d00b      	beq.n	8009198 <TIM_Base_SetConfig+0xf8>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a11      	ldr	r2, [pc, #68]	; (80091c8 <TIM_Base_SetConfig+0x128>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d007      	beq.n	8009198 <TIM_Base_SetConfig+0xf8>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a10      	ldr	r2, [pc, #64]	; (80091cc <TIM_Base_SetConfig+0x12c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d003      	beq.n	8009198 <TIM_Base_SetConfig+0xf8>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a0f      	ldr	r2, [pc, #60]	; (80091d0 <TIM_Base_SetConfig+0x130>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d103      	bne.n	80091a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	691a      	ldr	r2, [r3, #16]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	615a      	str	r2, [r3, #20]
}
 80091a6:	bf00      	nop
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	40010000 	.word	0x40010000
 80091b8:	40000400 	.word	0x40000400
 80091bc:	40000800 	.word	0x40000800
 80091c0:	40000c00 	.word	0x40000c00
 80091c4:	40010400 	.word	0x40010400
 80091c8:	40014000 	.word	0x40014000
 80091cc:	40014400 	.word	0x40014400
 80091d0:	40014800 	.word	0x40014800

080091d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	f023 0201 	bic.w	r2, r3, #1
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4b37      	ldr	r3, [pc, #220]	; (80092dc <TIM_OC1_SetConfig+0x108>)
 8009200:	4013      	ands	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f023 0303 	bic.w	r3, r3, #3
 800920a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	4313      	orrs	r3, r2
 8009214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f023 0302 	bic.w	r3, r3, #2
 800921c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	4313      	orrs	r3, r2
 8009226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a2d      	ldr	r2, [pc, #180]	; (80092e0 <TIM_OC1_SetConfig+0x10c>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d00f      	beq.n	8009250 <TIM_OC1_SetConfig+0x7c>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a2c      	ldr	r2, [pc, #176]	; (80092e4 <TIM_OC1_SetConfig+0x110>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d00b      	beq.n	8009250 <TIM_OC1_SetConfig+0x7c>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a2b      	ldr	r2, [pc, #172]	; (80092e8 <TIM_OC1_SetConfig+0x114>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d007      	beq.n	8009250 <TIM_OC1_SetConfig+0x7c>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a2a      	ldr	r2, [pc, #168]	; (80092ec <TIM_OC1_SetConfig+0x118>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d003      	beq.n	8009250 <TIM_OC1_SetConfig+0x7c>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a29      	ldr	r2, [pc, #164]	; (80092f0 <TIM_OC1_SetConfig+0x11c>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d10c      	bne.n	800926a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f023 0308 	bic.w	r3, r3, #8
 8009256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	4313      	orrs	r3, r2
 8009260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f023 0304 	bic.w	r3, r3, #4
 8009268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a1c      	ldr	r2, [pc, #112]	; (80092e0 <TIM_OC1_SetConfig+0x10c>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d00f      	beq.n	8009292 <TIM_OC1_SetConfig+0xbe>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a1b      	ldr	r2, [pc, #108]	; (80092e4 <TIM_OC1_SetConfig+0x110>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d00b      	beq.n	8009292 <TIM_OC1_SetConfig+0xbe>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a1a      	ldr	r2, [pc, #104]	; (80092e8 <TIM_OC1_SetConfig+0x114>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d007      	beq.n	8009292 <TIM_OC1_SetConfig+0xbe>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a19      	ldr	r2, [pc, #100]	; (80092ec <TIM_OC1_SetConfig+0x118>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d003      	beq.n	8009292 <TIM_OC1_SetConfig+0xbe>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a18      	ldr	r2, [pc, #96]	; (80092f0 <TIM_OC1_SetConfig+0x11c>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d111      	bne.n	80092b6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	621a      	str	r2, [r3, #32]
}
 80092d0:	bf00      	nop
 80092d2:	371c      	adds	r7, #28
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	fffeff8f 	.word	0xfffeff8f
 80092e0:	40010000 	.word	0x40010000
 80092e4:	40010400 	.word	0x40010400
 80092e8:	40014000 	.word	0x40014000
 80092ec:	40014400 	.word	0x40014400
 80092f0:	40014800 	.word	0x40014800

080092f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b087      	sub	sp, #28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	f023 0210 	bic.w	r2, r3, #16
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	4b34      	ldr	r3, [pc, #208]	; (80093f0 <TIM_OC2_SetConfig+0xfc>)
 8009320:	4013      	ands	r3, r2
 8009322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800932a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	021b      	lsls	r3, r3, #8
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	4313      	orrs	r3, r2
 8009336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	f023 0320 	bic.w	r3, r3, #32
 800933e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	011b      	lsls	r3, r3, #4
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	4313      	orrs	r3, r2
 800934a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a29      	ldr	r2, [pc, #164]	; (80093f4 <TIM_OC2_SetConfig+0x100>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d003      	beq.n	800935c <TIM_OC2_SetConfig+0x68>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a28      	ldr	r2, [pc, #160]	; (80093f8 <TIM_OC2_SetConfig+0x104>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d10d      	bne.n	8009378 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	011b      	lsls	r3, r3, #4
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	4313      	orrs	r3, r2
 800936e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009376:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a1e      	ldr	r2, [pc, #120]	; (80093f4 <TIM_OC2_SetConfig+0x100>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d00f      	beq.n	80093a0 <TIM_OC2_SetConfig+0xac>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a1d      	ldr	r2, [pc, #116]	; (80093f8 <TIM_OC2_SetConfig+0x104>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d00b      	beq.n	80093a0 <TIM_OC2_SetConfig+0xac>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a1c      	ldr	r2, [pc, #112]	; (80093fc <TIM_OC2_SetConfig+0x108>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d007      	beq.n	80093a0 <TIM_OC2_SetConfig+0xac>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a1b      	ldr	r2, [pc, #108]	; (8009400 <TIM_OC2_SetConfig+0x10c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d003      	beq.n	80093a0 <TIM_OC2_SetConfig+0xac>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a1a      	ldr	r2, [pc, #104]	; (8009404 <TIM_OC2_SetConfig+0x110>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d113      	bne.n	80093c8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	693a      	ldr	r2, [r7, #16]
 80093cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685a      	ldr	r2, [r3, #4]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	621a      	str	r2, [r3, #32]
}
 80093e2:	bf00      	nop
 80093e4:	371c      	adds	r7, #28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	feff8fff 	.word	0xfeff8fff
 80093f4:	40010000 	.word	0x40010000
 80093f8:	40010400 	.word	0x40010400
 80093fc:	40014000 	.word	0x40014000
 8009400:	40014400 	.word	0x40014400
 8009404:	40014800 	.word	0x40014800

08009408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	4b33      	ldr	r3, [pc, #204]	; (8009500 <TIM_OC3_SetConfig+0xf8>)
 8009434:	4013      	ands	r3, r2
 8009436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f023 0303 	bic.w	r3, r3, #3
 800943e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	4313      	orrs	r3, r2
 8009448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a28      	ldr	r2, [pc, #160]	; (8009504 <TIM_OC3_SetConfig+0xfc>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d003      	beq.n	800946e <TIM_OC3_SetConfig+0x66>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a27      	ldr	r2, [pc, #156]	; (8009508 <TIM_OC3_SetConfig+0x100>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d10d      	bne.n	800948a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	021b      	lsls	r3, r3, #8
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	4313      	orrs	r3, r2
 8009480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a1d      	ldr	r2, [pc, #116]	; (8009504 <TIM_OC3_SetConfig+0xfc>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d00f      	beq.n	80094b2 <TIM_OC3_SetConfig+0xaa>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a1c      	ldr	r2, [pc, #112]	; (8009508 <TIM_OC3_SetConfig+0x100>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d00b      	beq.n	80094b2 <TIM_OC3_SetConfig+0xaa>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a1b      	ldr	r2, [pc, #108]	; (800950c <TIM_OC3_SetConfig+0x104>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d007      	beq.n	80094b2 <TIM_OC3_SetConfig+0xaa>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a1a      	ldr	r2, [pc, #104]	; (8009510 <TIM_OC3_SetConfig+0x108>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d003      	beq.n	80094b2 <TIM_OC3_SetConfig+0xaa>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a19      	ldr	r2, [pc, #100]	; (8009514 <TIM_OC3_SetConfig+0x10c>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d113      	bne.n	80094da <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	621a      	str	r2, [r3, #32]
}
 80094f4:	bf00      	nop
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	fffeff8f 	.word	0xfffeff8f
 8009504:	40010000 	.word	0x40010000
 8009508:	40010400 	.word	0x40010400
 800950c:	40014000 	.word	0x40014000
 8009510:	40014400 	.word	0x40014400
 8009514:	40014800 	.word	0x40014800

08009518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	4b24      	ldr	r3, [pc, #144]	; (80095d4 <TIM_OC4_SetConfig+0xbc>)
 8009544:	4013      	ands	r3, r2
 8009546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800954e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	021b      	lsls	r3, r3, #8
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	4313      	orrs	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	031b      	lsls	r3, r3, #12
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	4313      	orrs	r3, r2
 800956e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a19      	ldr	r2, [pc, #100]	; (80095d8 <TIM_OC4_SetConfig+0xc0>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d00f      	beq.n	8009598 <TIM_OC4_SetConfig+0x80>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a18      	ldr	r2, [pc, #96]	; (80095dc <TIM_OC4_SetConfig+0xc4>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d00b      	beq.n	8009598 <TIM_OC4_SetConfig+0x80>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a17      	ldr	r2, [pc, #92]	; (80095e0 <TIM_OC4_SetConfig+0xc8>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d007      	beq.n	8009598 <TIM_OC4_SetConfig+0x80>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a16      	ldr	r2, [pc, #88]	; (80095e4 <TIM_OC4_SetConfig+0xcc>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d003      	beq.n	8009598 <TIM_OC4_SetConfig+0x80>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a15      	ldr	r2, [pc, #84]	; (80095e8 <TIM_OC4_SetConfig+0xd0>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d109      	bne.n	80095ac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800959e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	695b      	ldr	r3, [r3, #20]
 80095a4:	019b      	lsls	r3, r3, #6
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	621a      	str	r2, [r3, #32]
}
 80095c6:	bf00      	nop
 80095c8:	371c      	adds	r7, #28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	feff8fff 	.word	0xfeff8fff
 80095d8:	40010000 	.word	0x40010000
 80095dc:	40010400 	.word	0x40010400
 80095e0:	40014000 	.word	0x40014000
 80095e4:	40014400 	.word	0x40014400
 80095e8:	40014800 	.word	0x40014800

080095ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	4b21      	ldr	r3, [pc, #132]	; (800969c <TIM_OC5_SetConfig+0xb0>)
 8009618:	4013      	ands	r3, r2
 800961a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800962c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	041b      	lsls	r3, r3, #16
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	4313      	orrs	r3, r2
 8009638:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a18      	ldr	r2, [pc, #96]	; (80096a0 <TIM_OC5_SetConfig+0xb4>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00f      	beq.n	8009662 <TIM_OC5_SetConfig+0x76>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a17      	ldr	r2, [pc, #92]	; (80096a4 <TIM_OC5_SetConfig+0xb8>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d00b      	beq.n	8009662 <TIM_OC5_SetConfig+0x76>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a16      	ldr	r2, [pc, #88]	; (80096a8 <TIM_OC5_SetConfig+0xbc>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d007      	beq.n	8009662 <TIM_OC5_SetConfig+0x76>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a15      	ldr	r2, [pc, #84]	; (80096ac <TIM_OC5_SetConfig+0xc0>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d003      	beq.n	8009662 <TIM_OC5_SetConfig+0x76>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a14      	ldr	r2, [pc, #80]	; (80096b0 <TIM_OC5_SetConfig+0xc4>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d109      	bne.n	8009676 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009668:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	021b      	lsls	r3, r3, #8
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	4313      	orrs	r3, r2
 8009674:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	621a      	str	r2, [r3, #32]
}
 8009690:	bf00      	nop
 8009692:	371c      	adds	r7, #28
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	fffeff8f 	.word	0xfffeff8f
 80096a0:	40010000 	.word	0x40010000
 80096a4:	40010400 	.word	0x40010400
 80096a8:	40014000 	.word	0x40014000
 80096ac:	40014400 	.word	0x40014400
 80096b0:	40014800 	.word	0x40014800

080096b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	4b22      	ldr	r3, [pc, #136]	; (8009768 <TIM_OC6_SetConfig+0xb4>)
 80096e0:	4013      	ands	r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	021b      	lsls	r3, r3, #8
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	051b      	lsls	r3, r3, #20
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	4313      	orrs	r3, r2
 8009702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a19      	ldr	r2, [pc, #100]	; (800976c <TIM_OC6_SetConfig+0xb8>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d00f      	beq.n	800972c <TIM_OC6_SetConfig+0x78>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a18      	ldr	r2, [pc, #96]	; (8009770 <TIM_OC6_SetConfig+0xbc>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d00b      	beq.n	800972c <TIM_OC6_SetConfig+0x78>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a17      	ldr	r2, [pc, #92]	; (8009774 <TIM_OC6_SetConfig+0xc0>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d007      	beq.n	800972c <TIM_OC6_SetConfig+0x78>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a16      	ldr	r2, [pc, #88]	; (8009778 <TIM_OC6_SetConfig+0xc4>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d003      	beq.n	800972c <TIM_OC6_SetConfig+0x78>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a15      	ldr	r2, [pc, #84]	; (800977c <TIM_OC6_SetConfig+0xc8>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d109      	bne.n	8009740 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009732:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	029b      	lsls	r3, r3, #10
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	4313      	orrs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	621a      	str	r2, [r3, #32]
}
 800975a:	bf00      	nop
 800975c:	371c      	adds	r7, #28
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	feff8fff 	.word	0xfeff8fff
 800976c:	40010000 	.word	0x40010000
 8009770:	40010400 	.word	0x40010400
 8009774:	40014000 	.word	0x40014000
 8009778:	40014400 	.word	0x40014400
 800977c:	40014800 	.word	0x40014800

08009780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	f023 0201 	bic.w	r2, r3, #1
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	011b      	lsls	r3, r3, #4
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	f023 030a 	bic.w	r3, r3, #10
 80097bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	621a      	str	r2, [r3, #32]
}
 80097d2:	bf00      	nop
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097de:	b480      	push	{r7}
 80097e0:	b087      	sub	sp, #28
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	60f8      	str	r0, [r7, #12]
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	f023 0210 	bic.w	r2, r3, #16
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009808:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	031b      	lsls	r3, r3, #12
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	4313      	orrs	r3, r2
 8009812:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800981a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	011b      	lsls	r3, r3, #4
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4313      	orrs	r3, r2
 8009824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	621a      	str	r2, [r3, #32]
}
 8009832:	bf00      	nop
 8009834:	371c      	adds	r7, #28
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
	...

08009840 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	4b09      	ldr	r3, [pc, #36]	; (8009878 <TIM_ITRx_SetConfig+0x38>)
 8009854:	4013      	ands	r3, r2
 8009856:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4313      	orrs	r3, r2
 800985e:	f043 0307 	orr.w	r3, r3, #7
 8009862:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	609a      	str	r2, [r3, #8]
}
 800986a:	bf00      	nop
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	ffcfff8f 	.word	0xffcfff8f

0800987c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	021a      	lsls	r2, r3, #8
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	431a      	orrs	r2, r3
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	609a      	str	r2, [r3, #8]
}
 80098b0:	bf00      	nop
 80098b2:	371c      	adds	r7, #28
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f003 031f 	and.w	r3, r3, #31
 80098ce:	2201      	movs	r2, #1
 80098d0:	fa02 f303 	lsl.w	r3, r2, r3
 80098d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6a1a      	ldr	r2, [r3, #32]
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	43db      	mvns	r3, r3
 80098de:	401a      	ands	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6a1a      	ldr	r2, [r3, #32]
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f003 031f 	and.w	r3, r3, #31
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	fa01 f303 	lsl.w	r3, r1, r3
 80098f4:	431a      	orrs	r2, r3
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	621a      	str	r2, [r3, #32]
}
 80098fa:	bf00      	nop
 80098fc:	371c      	adds	r7, #28
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
	...

08009908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009918:	2b01      	cmp	r3, #1
 800991a:	d101      	bne.n	8009920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800991c:	2302      	movs	r3, #2
 800991e:	e06d      	b.n	80099fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a30      	ldr	r2, [pc, #192]	; (8009a08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d004      	beq.n	8009954 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a2f      	ldr	r2, [pc, #188]	; (8009a0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d108      	bne.n	8009966 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800995a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	4313      	orrs	r3, r2
 8009964:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	4313      	orrs	r3, r2
 8009976:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a20      	ldr	r2, [pc, #128]	; (8009a08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d022      	beq.n	80099d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009992:	d01d      	beq.n	80099d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a1d      	ldr	r2, [pc, #116]	; (8009a10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d018      	beq.n	80099d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a1c      	ldr	r2, [pc, #112]	; (8009a14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d013      	beq.n	80099d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a1a      	ldr	r2, [pc, #104]	; (8009a18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d00e      	beq.n	80099d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a15      	ldr	r2, [pc, #84]	; (8009a0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d009      	beq.n	80099d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a16      	ldr	r2, [pc, #88]	; (8009a1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d004      	beq.n	80099d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a15      	ldr	r2, [pc, #84]	; (8009a20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d10c      	bne.n	80099ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	4313      	orrs	r3, r2
 80099e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	40010000 	.word	0x40010000
 8009a0c:	40010400 	.word	0x40010400
 8009a10:	40000400 	.word	0x40000400
 8009a14:	40000800 	.word	0x40000800
 8009a18:	40000c00 	.word	0x40000c00
 8009a1c:	40001800 	.word	0x40001800
 8009a20:	40014000 	.word	0x40014000

08009a24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d101      	bne.n	8009a40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	e065      	b.n	8009b0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	041b      	lsls	r3, r3, #16
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a16      	ldr	r2, [pc, #88]	; (8009b18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d004      	beq.n	8009ace <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a14      	ldr	r2, [pc, #80]	; (8009b1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d115      	bne.n	8009afa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	051b      	lsls	r3, r3, #20
 8009ada:	4313      	orrs	r3, r2
 8009adc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	69db      	ldr	r3, [r3, #28]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	40010000 	.word	0x40010000
 8009b1c:	40010400 	.word	0x40010400

08009b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e042      	b.n	8009bf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d106      	bne.n	8009b86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7f8 fd63 	bl	800264c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2224      	movs	r2, #36	; 0x24
 8009b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0201 	bic.w	r2, r2, #1
 8009b9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fd54 	bl	800a64c <UART_SetConfig>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d101      	bne.n	8009bae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e022      	b.n	8009bf4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d002      	beq.n	8009bbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f001 faa8 	bl	800b10c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689a      	ldr	r2, [r3, #8]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009bda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f042 0201 	orr.w	r2, r2, #1
 8009bea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f001 fb2f 	bl	800b250 <UART_CheckIdleState>
 8009bf2:	4603      	mov	r3, r0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08a      	sub	sp, #40	; 0x28
 8009c00:	af02      	add	r7, sp, #8
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	603b      	str	r3, [r7, #0]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c12:	2b20      	cmp	r3, #32
 8009c14:	f040 8083 	bne.w	8009d1e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <HAL_UART_Transmit+0x28>
 8009c1e:	88fb      	ldrh	r3, [r7, #6]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d101      	bne.n	8009c28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e07b      	b.n	8009d20 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <HAL_UART_Transmit+0x3a>
 8009c32:	2302      	movs	r3, #2
 8009c34:	e074      	b.n	8009d20 <HAL_UART_Transmit+0x124>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2221      	movs	r2, #33	; 0x21
 8009c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c4e:	f7f9 f9f9 	bl	8003044 <HAL_GetTick>
 8009c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	88fa      	ldrh	r2, [r7, #6]
 8009c58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	88fa      	ldrh	r2, [r7, #6]
 8009c60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c6c:	d108      	bne.n	8009c80 <HAL_UART_Transmit+0x84>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d104      	bne.n	8009c80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009c76:	2300      	movs	r3, #0
 8009c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	61bb      	str	r3, [r7, #24]
 8009c7e:	e003      	b.n	8009c88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c84:	2300      	movs	r3, #0
 8009c86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009c90:	e02c      	b.n	8009cec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2180      	movs	r1, #128	; 0x80
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f001 fb22 	bl	800b2e6 <UART_WaitOnFlagUntilTimeout>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	e039      	b.n	8009d20 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10b      	bne.n	8009cca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	881b      	ldrh	r3, [r3, #0]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	61bb      	str	r3, [r7, #24]
 8009cc8:	e007      	b.n	8009cda <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	781a      	ldrb	r2, [r3, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1cc      	bne.n	8009c92 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2140      	movs	r1, #64	; 0x40
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f001 faef 	bl	800b2e6 <UART_WaitOnFlagUntilTimeout>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e006      	b.n	8009d20 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2220      	movs	r2, #32
 8009d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	e000      	b.n	8009d20 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009d1e:	2302      	movs	r3, #2
  }
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3720      	adds	r7, #32
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	; 0x28
 8009d2c:	af02      	add	r7, sp, #8
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	4613      	mov	r3, r2
 8009d36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3e:	2b20      	cmp	r3, #32
 8009d40:	f040 80c0 	bne.w	8009ec4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d002      	beq.n	8009d50 <HAL_UART_Receive+0x28>
 8009d4a:	88fb      	ldrh	r3, [r7, #6]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e0b8      	b.n	8009ec6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d101      	bne.n	8009d62 <HAL_UART_Receive+0x3a>
 8009d5e:	2302      	movs	r3, #2
 8009d60:	e0b1      	b.n	8009ec6 <HAL_UART_Receive+0x19e>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2222      	movs	r2, #34	; 0x22
 8009d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d80:	f7f9 f960 	bl	8003044 <HAL_GetTick>
 8009d84:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	88fa      	ldrh	r2, [r7, #6]
 8009d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	88fa      	ldrh	r2, [r7, #6]
 8009d92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d9e:	d10e      	bne.n	8009dbe <HAL_UART_Receive+0x96>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d105      	bne.n	8009db4 <HAL_UART_Receive+0x8c>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009dae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009db2:	e02d      	b.n	8009e10 <HAL_UART_Receive+0xe8>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	22ff      	movs	r2, #255	; 0xff
 8009db8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009dbc:	e028      	b.n	8009e10 <HAL_UART_Receive+0xe8>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10d      	bne.n	8009de2 <HAL_UART_Receive+0xba>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d104      	bne.n	8009dd8 <HAL_UART_Receive+0xb0>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	22ff      	movs	r2, #255	; 0xff
 8009dd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009dd6:	e01b      	b.n	8009e10 <HAL_UART_Receive+0xe8>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	227f      	movs	r2, #127	; 0x7f
 8009ddc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009de0:	e016      	b.n	8009e10 <HAL_UART_Receive+0xe8>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dea:	d10d      	bne.n	8009e08 <HAL_UART_Receive+0xe0>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d104      	bne.n	8009dfe <HAL_UART_Receive+0xd6>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	227f      	movs	r2, #127	; 0x7f
 8009df8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009dfc:	e008      	b.n	8009e10 <HAL_UART_Receive+0xe8>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	223f      	movs	r2, #63	; 0x3f
 8009e02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e06:	e003      	b.n	8009e10 <HAL_UART_Receive+0xe8>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e16:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e20:	d108      	bne.n	8009e34 <HAL_UART_Receive+0x10c>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d104      	bne.n	8009e34 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	61bb      	str	r3, [r7, #24]
 8009e32:	e003      	b.n	8009e3c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009e44:	e032      	b.n	8009eac <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2120      	movs	r1, #32
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f001 fa48 	bl	800b2e6 <UART_WaitOnFlagUntilTimeout>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e032      	b.n	8009ec6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10c      	bne.n	8009e80 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	8a7b      	ldrh	r3, [r7, #18]
 8009e70:	4013      	ands	r3, r2
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	3302      	adds	r3, #2
 8009e7c:	61bb      	str	r3, [r7, #24]
 8009e7e:	e00c      	b.n	8009e9a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	8a7b      	ldrh	r3, [r7, #18]
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	3301      	adds	r3, #1
 8009e98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1c6      	bne.n	8009e46 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2220      	movs	r2, #32
 8009ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	e000      	b.n	8009ec6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8009ec4:	2302      	movs	r3, #2
  }
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3720      	adds	r7, #32
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b0ba      	sub	sp, #232	; 0xe8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	69db      	ldr	r3, [r3, #28]
 8009ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009ef6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009efa:	f640 030f 	movw	r3, #2063	; 0x80f
 8009efe:	4013      	ands	r3, r2
 8009f00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009f04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d11b      	bne.n	8009f44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f10:	f003 0320 	and.w	r3, r3, #32
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d015      	beq.n	8009f44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f1c:	f003 0320 	and.w	r3, r3, #32
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d105      	bne.n	8009f30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d009      	beq.n	8009f44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f000 835a 	beq.w	800a5ee <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	4798      	blx	r3
      }
      return;
 8009f42:	e354      	b.n	800a5ee <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 811f 	beq.w	800a18c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009f4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009f52:	4b8b      	ldr	r3, [pc, #556]	; (800a180 <HAL_UART_IRQHandler+0x2b0>)
 8009f54:	4013      	ands	r3, r2
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d106      	bne.n	8009f68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009f5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009f5e:	4b89      	ldr	r3, [pc, #548]	; (800a184 <HAL_UART_IRQHandler+0x2b4>)
 8009f60:	4013      	ands	r3, r2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f000 8112 	beq.w	800a18c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d011      	beq.n	8009f98 <HAL_UART_IRQHandler+0xc8>
 8009f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00b      	beq.n	8009f98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2201      	movs	r2, #1
 8009f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f8e:	f043 0201 	orr.w	r2, r3, #1
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f9c:	f003 0302 	and.w	r3, r3, #2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d011      	beq.n	8009fc8 <HAL_UART_IRQHandler+0xf8>
 8009fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00b      	beq.n	8009fc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fbe:	f043 0204 	orr.w	r2, r3, #4
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d011      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x128>
 8009fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fd8:	f003 0301 	and.w	r3, r3, #1
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00b      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2204      	movs	r2, #4
 8009fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fee:	f043 0202 	orr.w	r2, r3, #2
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ffc:	f003 0308 	and.w	r3, r3, #8
 800a000:	2b00      	cmp	r3, #0
 800a002:	d017      	beq.n	800a034 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a008:	f003 0320 	and.w	r3, r3, #32
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d105      	bne.n	800a01c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a010:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a014:	4b5a      	ldr	r3, [pc, #360]	; (800a180 <HAL_UART_IRQHandler+0x2b0>)
 800a016:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00b      	beq.n	800a034 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2208      	movs	r2, #8
 800a022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a02a:	f043 0208 	orr.w	r2, r3, #8
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d012      	beq.n	800a066 <HAL_UART_IRQHandler+0x196>
 800a040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00c      	beq.n	800a066 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a05c:	f043 0220 	orr.w	r2, r3, #32
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f000 82c0 	beq.w	800a5f2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a076:	f003 0320 	and.w	r3, r3, #32
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d013      	beq.n	800a0a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a07e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a082:	f003 0320 	and.w	r3, r3, #32
 800a086:	2b00      	cmp	r3, #0
 800a088:	d105      	bne.n	800a096 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a08a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a08e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d007      	beq.n	800a0a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d003      	beq.n	800a0a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ba:	2b40      	cmp	r3, #64	; 0x40
 800a0bc:	d005      	beq.n	800a0ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a0be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d04f      	beq.n	800a16a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f001 f9d4 	bl	800b478 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0da:	2b40      	cmp	r3, #64	; 0x40
 800a0dc:	d141      	bne.n	800a162 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0ec:	e853 3f00 	ldrex	r3, [r3]
 800a0f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a0f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3308      	adds	r3, #8
 800a106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a10a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a10e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a11a:	e841 2300 	strex	r3, r2, [r1]
 800a11e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1d9      	bne.n	800a0de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d013      	beq.n	800a15a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a136:	4a14      	ldr	r2, [pc, #80]	; (800a188 <HAL_UART_IRQHandler+0x2b8>)
 800a138:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fa f818 	bl	8004174 <HAL_DMA_Abort_IT>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d017      	beq.n	800a17a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a14e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a154:	4610      	mov	r0, r2
 800a156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a158:	e00f      	b.n	800a17a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fa60 	bl	800a620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a160:	e00b      	b.n	800a17a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fa5c 	bl	800a620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a168:	e007      	b.n	800a17a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fa58 	bl	800a620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a178:	e23b      	b.n	800a5f2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a17a:	bf00      	nop
    return;
 800a17c:	e239      	b.n	800a5f2 <HAL_UART_IRQHandler+0x722>
 800a17e:	bf00      	nop
 800a180:	10000001 	.word	0x10000001
 800a184:	04000120 	.word	0x04000120
 800a188:	0800b545 	.word	0x0800b545

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a190:	2b01      	cmp	r3, #1
 800a192:	f040 81ce 	bne.w	800a532 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a19a:	f003 0310 	and.w	r3, r3, #16
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 81c7 	beq.w	800a532 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a1a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1a8:	f003 0310 	and.w	r3, r3, #16
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 81c0 	beq.w	800a532 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2210      	movs	r2, #16
 800a1b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c4:	2b40      	cmp	r3, #64	; 0x40
 800a1c6:	f040 813b 	bne.w	800a440 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a8b      	ldr	r2, [pc, #556]	; (800a400 <HAL_UART_IRQHandler+0x530>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d059      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a89      	ldr	r2, [pc, #548]	; (800a404 <HAL_UART_IRQHandler+0x534>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d053      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a87      	ldr	r2, [pc, #540]	; (800a408 <HAL_UART_IRQHandler+0x538>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d04d      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a85      	ldr	r2, [pc, #532]	; (800a40c <HAL_UART_IRQHandler+0x53c>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d047      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a83      	ldr	r2, [pc, #524]	; (800a410 <HAL_UART_IRQHandler+0x540>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d041      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a81      	ldr	r2, [pc, #516]	; (800a414 <HAL_UART_IRQHandler+0x544>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d03b      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a7f      	ldr	r2, [pc, #508]	; (800a418 <HAL_UART_IRQHandler+0x548>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d035      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a7d      	ldr	r2, [pc, #500]	; (800a41c <HAL_UART_IRQHandler+0x54c>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d02f      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a7b      	ldr	r2, [pc, #492]	; (800a420 <HAL_UART_IRQHandler+0x550>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d029      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a79      	ldr	r2, [pc, #484]	; (800a424 <HAL_UART_IRQHandler+0x554>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d023      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a77      	ldr	r2, [pc, #476]	; (800a428 <HAL_UART_IRQHandler+0x558>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d01d      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a75      	ldr	r2, [pc, #468]	; (800a42c <HAL_UART_IRQHandler+0x55c>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d017      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a73      	ldr	r2, [pc, #460]	; (800a430 <HAL_UART_IRQHandler+0x560>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d011      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a71      	ldr	r2, [pc, #452]	; (800a434 <HAL_UART_IRQHandler+0x564>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d00b      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a6f      	ldr	r2, [pc, #444]	; (800a438 <HAL_UART_IRQHandler+0x568>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d005      	beq.n	800a28a <HAL_UART_IRQHandler+0x3ba>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a6d      	ldr	r2, [pc, #436]	; (800a43c <HAL_UART_IRQHandler+0x56c>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d105      	bne.n	800a296 <HAL_UART_IRQHandler+0x3c6>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	b29b      	uxth	r3, r3
 800a294:	e004      	b.n	800a2a0 <HAL_UART_IRQHandler+0x3d0>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f000 81a4 	beq.w	800a5f6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	f080 819c 	bcs.w	800a5f6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2d2:	f000 8086 	beq.w	800a3e2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a2ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a300:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a304:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a308:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a30c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a310:	e841 2300 	strex	r3, r2, [r1]
 800a314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1da      	bne.n	800a2d6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3308      	adds	r3, #8
 800a326:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a32a:	e853 3f00 	ldrex	r3, [r3]
 800a32e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a332:	f023 0301 	bic.w	r3, r3, #1
 800a336:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3308      	adds	r3, #8
 800a340:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a344:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a348:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a34c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a350:	e841 2300 	strex	r3, r2, [r1]
 800a354:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e1      	bne.n	800a320 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3308      	adds	r3, #8
 800a362:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a366:	e853 3f00 	ldrex	r3, [r3]
 800a36a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a36c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a36e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3308      	adds	r3, #8
 800a37c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a380:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a382:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a384:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a386:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a388:	e841 2300 	strex	r3, r2, [r1]
 800a38c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a38e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1e3      	bne.n	800a35c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2220      	movs	r2, #32
 800a398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3aa:	e853 3f00 	ldrex	r3, [r3]
 800a3ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a3b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3b2:	f023 0310 	bic.w	r3, r3, #16
 800a3b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a3c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3cc:	e841 2300 	strex	r3, r2, [r1]
 800a3d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e4      	bne.n	800a3a2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7f9 fbab 	bl	8003b38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f91c 	bl	800a634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3fc:	e0fb      	b.n	800a5f6 <HAL_UART_IRQHandler+0x726>
 800a3fe:	bf00      	nop
 800a400:	40020010 	.word	0x40020010
 800a404:	40020028 	.word	0x40020028
 800a408:	40020040 	.word	0x40020040
 800a40c:	40020058 	.word	0x40020058
 800a410:	40020070 	.word	0x40020070
 800a414:	40020088 	.word	0x40020088
 800a418:	400200a0 	.word	0x400200a0
 800a41c:	400200b8 	.word	0x400200b8
 800a420:	40020410 	.word	0x40020410
 800a424:	40020428 	.word	0x40020428
 800a428:	40020440 	.word	0x40020440
 800a42c:	40020458 	.word	0x40020458
 800a430:	40020470 	.word	0x40020470
 800a434:	40020488 	.word	0x40020488
 800a438:	400204a0 	.word	0x400204a0
 800a43c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f000 80cc 	beq.w	800a5fa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800a462:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 80c7 	beq.w	800a5fa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a474:	e853 3f00 	ldrex	r3, [r3]
 800a478:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	461a      	mov	r2, r3
 800a48a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a48e:	647b      	str	r3, [r7, #68]	; 0x44
 800a490:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a496:	e841 2300 	strex	r3, r2, [r1]
 800a49a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1e4      	bne.n	800a46c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	3308      	adds	r3, #8
 800a4a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	e853 3f00 	ldrex	r3, [r3]
 800a4b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a4b2:	6a3a      	ldr	r2, [r7, #32]
 800a4b4:	4b54      	ldr	r3, [pc, #336]	; (800a608 <HAL_UART_IRQHandler+0x738>)
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3308      	adds	r3, #8
 800a4c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a4c6:	633a      	str	r2, [r7, #48]	; 0x30
 800a4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ce:	e841 2300 	strex	r3, r2, [r1]
 800a4d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1e3      	bne.n	800a4a2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2220      	movs	r2, #32
 800a4de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	e853 3f00 	ldrex	r3, [r3]
 800a4fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f023 0310 	bic.w	r3, r3, #16
 800a502:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a510:	61fb      	str	r3, [r7, #28]
 800a512:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a514:	69b9      	ldr	r1, [r7, #24]
 800a516:	69fa      	ldr	r2, [r7, #28]
 800a518:	e841 2300 	strex	r3, r2, [r1]
 800a51c:	617b      	str	r3, [r7, #20]
   return(result);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1e4      	bne.n	800a4ee <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a528:	4619      	mov	r1, r3
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f882 	bl	800a634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a530:	e063      	b.n	800a5fa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00e      	beq.n	800a55c <HAL_UART_IRQHandler+0x68c>
 800a53e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a546:	2b00      	cmp	r3, #0
 800a548:	d008      	beq.n	800a55c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a552:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 f836 	bl	800b5c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a55a:	e051      	b.n	800a600 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a55c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a564:	2b00      	cmp	r3, #0
 800a566:	d014      	beq.n	800a592 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a56c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a570:	2b00      	cmp	r3, #0
 800a572:	d105      	bne.n	800a580 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d008      	beq.n	800a592 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a584:	2b00      	cmp	r3, #0
 800a586:	d03a      	beq.n	800a5fe <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	4798      	blx	r3
    }
    return;
 800a590:	e035      	b.n	800a5fe <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d009      	beq.n	800a5b2 <HAL_UART_IRQHandler+0x6e2>
 800a59e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d003      	beq.n	800a5b2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 ffe0 	bl	800b570 <UART_EndTransmit_IT>
    return;
 800a5b0:	e026      	b.n	800a600 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d009      	beq.n	800a5d2 <HAL_UART_IRQHandler+0x702>
 800a5be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d003      	beq.n	800a5d2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f001 f80f 	bl	800b5ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5d0:	e016      	b.n	800a600 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a5d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d010      	beq.n	800a600 <HAL_UART_IRQHandler+0x730>
 800a5de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	da0c      	bge.n	800a600 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fff7 	bl	800b5da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5ec:	e008      	b.n	800a600 <HAL_UART_IRQHandler+0x730>
      return;
 800a5ee:	bf00      	nop
 800a5f0:	e006      	b.n	800a600 <HAL_UART_IRQHandler+0x730>
    return;
 800a5f2:	bf00      	nop
 800a5f4:	e004      	b.n	800a600 <HAL_UART_IRQHandler+0x730>
      return;
 800a5f6:	bf00      	nop
 800a5f8:	e002      	b.n	800a600 <HAL_UART_IRQHandler+0x730>
      return;
 800a5fa:	bf00      	nop
 800a5fc:	e000      	b.n	800a600 <HAL_UART_IRQHandler+0x730>
    return;
 800a5fe:	bf00      	nop
  }
}
 800a600:	37e8      	adds	r7, #232	; 0xe8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	effffffe 	.word	0xeffffffe

0800a60c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a628:	bf00      	nop
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a64c:	b5b0      	push	{r4, r5, r7, lr}
 800a64e:	b08e      	sub	sp, #56	; 0x38
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	689a      	ldr	r2, [r3, #8]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	431a      	orrs	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	695b      	ldr	r3, [r3, #20]
 800a668:	431a      	orrs	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	69db      	ldr	r3, [r3, #28]
 800a66e:	4313      	orrs	r3, r2
 800a670:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	4bbf      	ldr	r3, [pc, #764]	; (800a978 <UART_SetConfig+0x32c>)
 800a67a:	4013      	ands	r3, r2
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	6812      	ldr	r2, [r2, #0]
 800a680:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a682:	430b      	orrs	r3, r1
 800a684:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68da      	ldr	r2, [r3, #12]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	430a      	orrs	r2, r1
 800a69a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4ab5      	ldr	r2, [pc, #724]	; (800a97c <UART_SetConfig+0x330>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d004      	beq.n	800a6b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a1b      	ldr	r3, [r3, #32]
 800a6b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	689a      	ldr	r2, [r3, #8]
 800a6bc:	4bb0      	ldr	r3, [pc, #704]	; (800a980 <UART_SetConfig+0x334>)
 800a6be:	4013      	ands	r3, r2
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	6812      	ldr	r2, [r2, #0]
 800a6c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d0:	f023 010f 	bic.w	r1, r3, #15
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	430a      	orrs	r2, r1
 800a6de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4aa7      	ldr	r2, [pc, #668]	; (800a984 <UART_SetConfig+0x338>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d176      	bne.n	800a7d8 <UART_SetConfig+0x18c>
 800a6ea:	4ba7      	ldr	r3, [pc, #668]	; (800a988 <UART_SetConfig+0x33c>)
 800a6ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6f2:	2b28      	cmp	r3, #40	; 0x28
 800a6f4:	d86c      	bhi.n	800a7d0 <UART_SetConfig+0x184>
 800a6f6:	a201      	add	r2, pc, #4	; (adr r2, 800a6fc <UART_SetConfig+0xb0>)
 800a6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fc:	0800a7a1 	.word	0x0800a7a1
 800a700:	0800a7d1 	.word	0x0800a7d1
 800a704:	0800a7d1 	.word	0x0800a7d1
 800a708:	0800a7d1 	.word	0x0800a7d1
 800a70c:	0800a7d1 	.word	0x0800a7d1
 800a710:	0800a7d1 	.word	0x0800a7d1
 800a714:	0800a7d1 	.word	0x0800a7d1
 800a718:	0800a7d1 	.word	0x0800a7d1
 800a71c:	0800a7a9 	.word	0x0800a7a9
 800a720:	0800a7d1 	.word	0x0800a7d1
 800a724:	0800a7d1 	.word	0x0800a7d1
 800a728:	0800a7d1 	.word	0x0800a7d1
 800a72c:	0800a7d1 	.word	0x0800a7d1
 800a730:	0800a7d1 	.word	0x0800a7d1
 800a734:	0800a7d1 	.word	0x0800a7d1
 800a738:	0800a7d1 	.word	0x0800a7d1
 800a73c:	0800a7b1 	.word	0x0800a7b1
 800a740:	0800a7d1 	.word	0x0800a7d1
 800a744:	0800a7d1 	.word	0x0800a7d1
 800a748:	0800a7d1 	.word	0x0800a7d1
 800a74c:	0800a7d1 	.word	0x0800a7d1
 800a750:	0800a7d1 	.word	0x0800a7d1
 800a754:	0800a7d1 	.word	0x0800a7d1
 800a758:	0800a7d1 	.word	0x0800a7d1
 800a75c:	0800a7b9 	.word	0x0800a7b9
 800a760:	0800a7d1 	.word	0x0800a7d1
 800a764:	0800a7d1 	.word	0x0800a7d1
 800a768:	0800a7d1 	.word	0x0800a7d1
 800a76c:	0800a7d1 	.word	0x0800a7d1
 800a770:	0800a7d1 	.word	0x0800a7d1
 800a774:	0800a7d1 	.word	0x0800a7d1
 800a778:	0800a7d1 	.word	0x0800a7d1
 800a77c:	0800a7c1 	.word	0x0800a7c1
 800a780:	0800a7d1 	.word	0x0800a7d1
 800a784:	0800a7d1 	.word	0x0800a7d1
 800a788:	0800a7d1 	.word	0x0800a7d1
 800a78c:	0800a7d1 	.word	0x0800a7d1
 800a790:	0800a7d1 	.word	0x0800a7d1
 800a794:	0800a7d1 	.word	0x0800a7d1
 800a798:	0800a7d1 	.word	0x0800a7d1
 800a79c:	0800a7c9 	.word	0x0800a7c9
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7a6:	e222      	b.n	800abee <UART_SetConfig+0x5a2>
 800a7a8:	2304      	movs	r3, #4
 800a7aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ae:	e21e      	b.n	800abee <UART_SetConfig+0x5a2>
 800a7b0:	2308      	movs	r3, #8
 800a7b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7b6:	e21a      	b.n	800abee <UART_SetConfig+0x5a2>
 800a7b8:	2310      	movs	r3, #16
 800a7ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7be:	e216      	b.n	800abee <UART_SetConfig+0x5a2>
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7c6:	e212      	b.n	800abee <UART_SetConfig+0x5a2>
 800a7c8:	2340      	movs	r3, #64	; 0x40
 800a7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ce:	e20e      	b.n	800abee <UART_SetConfig+0x5a2>
 800a7d0:	2380      	movs	r3, #128	; 0x80
 800a7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7d6:	e20a      	b.n	800abee <UART_SetConfig+0x5a2>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a6b      	ldr	r2, [pc, #428]	; (800a98c <UART_SetConfig+0x340>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d130      	bne.n	800a844 <UART_SetConfig+0x1f8>
 800a7e2:	4b69      	ldr	r3, [pc, #420]	; (800a988 <UART_SetConfig+0x33c>)
 800a7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7e6:	f003 0307 	and.w	r3, r3, #7
 800a7ea:	2b05      	cmp	r3, #5
 800a7ec:	d826      	bhi.n	800a83c <UART_SetConfig+0x1f0>
 800a7ee:	a201      	add	r2, pc, #4	; (adr r2, 800a7f4 <UART_SetConfig+0x1a8>)
 800a7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f4:	0800a80d 	.word	0x0800a80d
 800a7f8:	0800a815 	.word	0x0800a815
 800a7fc:	0800a81d 	.word	0x0800a81d
 800a800:	0800a825 	.word	0x0800a825
 800a804:	0800a82d 	.word	0x0800a82d
 800a808:	0800a835 	.word	0x0800a835
 800a80c:	2300      	movs	r3, #0
 800a80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a812:	e1ec      	b.n	800abee <UART_SetConfig+0x5a2>
 800a814:	2304      	movs	r3, #4
 800a816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a81a:	e1e8      	b.n	800abee <UART_SetConfig+0x5a2>
 800a81c:	2308      	movs	r3, #8
 800a81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a822:	e1e4      	b.n	800abee <UART_SetConfig+0x5a2>
 800a824:	2310      	movs	r3, #16
 800a826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a82a:	e1e0      	b.n	800abee <UART_SetConfig+0x5a2>
 800a82c:	2320      	movs	r3, #32
 800a82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a832:	e1dc      	b.n	800abee <UART_SetConfig+0x5a2>
 800a834:	2340      	movs	r3, #64	; 0x40
 800a836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83a:	e1d8      	b.n	800abee <UART_SetConfig+0x5a2>
 800a83c:	2380      	movs	r3, #128	; 0x80
 800a83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a842:	e1d4      	b.n	800abee <UART_SetConfig+0x5a2>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a51      	ldr	r2, [pc, #324]	; (800a990 <UART_SetConfig+0x344>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d130      	bne.n	800a8b0 <UART_SetConfig+0x264>
 800a84e:	4b4e      	ldr	r3, [pc, #312]	; (800a988 <UART_SetConfig+0x33c>)
 800a850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a852:	f003 0307 	and.w	r3, r3, #7
 800a856:	2b05      	cmp	r3, #5
 800a858:	d826      	bhi.n	800a8a8 <UART_SetConfig+0x25c>
 800a85a:	a201      	add	r2, pc, #4	; (adr r2, 800a860 <UART_SetConfig+0x214>)
 800a85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a860:	0800a879 	.word	0x0800a879
 800a864:	0800a881 	.word	0x0800a881
 800a868:	0800a889 	.word	0x0800a889
 800a86c:	0800a891 	.word	0x0800a891
 800a870:	0800a899 	.word	0x0800a899
 800a874:	0800a8a1 	.word	0x0800a8a1
 800a878:	2300      	movs	r3, #0
 800a87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a87e:	e1b6      	b.n	800abee <UART_SetConfig+0x5a2>
 800a880:	2304      	movs	r3, #4
 800a882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a886:	e1b2      	b.n	800abee <UART_SetConfig+0x5a2>
 800a888:	2308      	movs	r3, #8
 800a88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a88e:	e1ae      	b.n	800abee <UART_SetConfig+0x5a2>
 800a890:	2310      	movs	r3, #16
 800a892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a896:	e1aa      	b.n	800abee <UART_SetConfig+0x5a2>
 800a898:	2320      	movs	r3, #32
 800a89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a89e:	e1a6      	b.n	800abee <UART_SetConfig+0x5a2>
 800a8a0:	2340      	movs	r3, #64	; 0x40
 800a8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8a6:	e1a2      	b.n	800abee <UART_SetConfig+0x5a2>
 800a8a8:	2380      	movs	r3, #128	; 0x80
 800a8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ae:	e19e      	b.n	800abee <UART_SetConfig+0x5a2>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a37      	ldr	r2, [pc, #220]	; (800a994 <UART_SetConfig+0x348>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d130      	bne.n	800a91c <UART_SetConfig+0x2d0>
 800a8ba:	4b33      	ldr	r3, [pc, #204]	; (800a988 <UART_SetConfig+0x33c>)
 800a8bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8be:	f003 0307 	and.w	r3, r3, #7
 800a8c2:	2b05      	cmp	r3, #5
 800a8c4:	d826      	bhi.n	800a914 <UART_SetConfig+0x2c8>
 800a8c6:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <UART_SetConfig+0x280>)
 800a8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8cc:	0800a8e5 	.word	0x0800a8e5
 800a8d0:	0800a8ed 	.word	0x0800a8ed
 800a8d4:	0800a8f5 	.word	0x0800a8f5
 800a8d8:	0800a8fd 	.word	0x0800a8fd
 800a8dc:	0800a905 	.word	0x0800a905
 800a8e0:	0800a90d 	.word	0x0800a90d
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ea:	e180      	b.n	800abee <UART_SetConfig+0x5a2>
 800a8ec:	2304      	movs	r3, #4
 800a8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8f2:	e17c      	b.n	800abee <UART_SetConfig+0x5a2>
 800a8f4:	2308      	movs	r3, #8
 800a8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8fa:	e178      	b.n	800abee <UART_SetConfig+0x5a2>
 800a8fc:	2310      	movs	r3, #16
 800a8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a902:	e174      	b.n	800abee <UART_SetConfig+0x5a2>
 800a904:	2320      	movs	r3, #32
 800a906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a90a:	e170      	b.n	800abee <UART_SetConfig+0x5a2>
 800a90c:	2340      	movs	r3, #64	; 0x40
 800a90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a912:	e16c      	b.n	800abee <UART_SetConfig+0x5a2>
 800a914:	2380      	movs	r3, #128	; 0x80
 800a916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a91a:	e168      	b.n	800abee <UART_SetConfig+0x5a2>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a1d      	ldr	r2, [pc, #116]	; (800a998 <UART_SetConfig+0x34c>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d142      	bne.n	800a9ac <UART_SetConfig+0x360>
 800a926:	4b18      	ldr	r3, [pc, #96]	; (800a988 <UART_SetConfig+0x33c>)
 800a928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a92a:	f003 0307 	and.w	r3, r3, #7
 800a92e:	2b05      	cmp	r3, #5
 800a930:	d838      	bhi.n	800a9a4 <UART_SetConfig+0x358>
 800a932:	a201      	add	r2, pc, #4	; (adr r2, 800a938 <UART_SetConfig+0x2ec>)
 800a934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a938:	0800a951 	.word	0x0800a951
 800a93c:	0800a959 	.word	0x0800a959
 800a940:	0800a961 	.word	0x0800a961
 800a944:	0800a969 	.word	0x0800a969
 800a948:	0800a971 	.word	0x0800a971
 800a94c:	0800a99d 	.word	0x0800a99d
 800a950:	2300      	movs	r3, #0
 800a952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a956:	e14a      	b.n	800abee <UART_SetConfig+0x5a2>
 800a958:	2304      	movs	r3, #4
 800a95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a95e:	e146      	b.n	800abee <UART_SetConfig+0x5a2>
 800a960:	2308      	movs	r3, #8
 800a962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a966:	e142      	b.n	800abee <UART_SetConfig+0x5a2>
 800a968:	2310      	movs	r3, #16
 800a96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a96e:	e13e      	b.n	800abee <UART_SetConfig+0x5a2>
 800a970:	2320      	movs	r3, #32
 800a972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a976:	e13a      	b.n	800abee <UART_SetConfig+0x5a2>
 800a978:	cfff69f3 	.word	0xcfff69f3
 800a97c:	58000c00 	.word	0x58000c00
 800a980:	11fff4ff 	.word	0x11fff4ff
 800a984:	40011000 	.word	0x40011000
 800a988:	58024400 	.word	0x58024400
 800a98c:	40004400 	.word	0x40004400
 800a990:	40004800 	.word	0x40004800
 800a994:	40004c00 	.word	0x40004c00
 800a998:	40005000 	.word	0x40005000
 800a99c:	2340      	movs	r3, #64	; 0x40
 800a99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9a2:	e124      	b.n	800abee <UART_SetConfig+0x5a2>
 800a9a4:	2380      	movs	r3, #128	; 0x80
 800a9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9aa:	e120      	b.n	800abee <UART_SetConfig+0x5a2>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4acc      	ldr	r2, [pc, #816]	; (800ace4 <UART_SetConfig+0x698>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d176      	bne.n	800aaa4 <UART_SetConfig+0x458>
 800a9b6:	4bcc      	ldr	r3, [pc, #816]	; (800ace8 <UART_SetConfig+0x69c>)
 800a9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9be:	2b28      	cmp	r3, #40	; 0x28
 800a9c0:	d86c      	bhi.n	800aa9c <UART_SetConfig+0x450>
 800a9c2:	a201      	add	r2, pc, #4	; (adr r2, 800a9c8 <UART_SetConfig+0x37c>)
 800a9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c8:	0800aa6d 	.word	0x0800aa6d
 800a9cc:	0800aa9d 	.word	0x0800aa9d
 800a9d0:	0800aa9d 	.word	0x0800aa9d
 800a9d4:	0800aa9d 	.word	0x0800aa9d
 800a9d8:	0800aa9d 	.word	0x0800aa9d
 800a9dc:	0800aa9d 	.word	0x0800aa9d
 800a9e0:	0800aa9d 	.word	0x0800aa9d
 800a9e4:	0800aa9d 	.word	0x0800aa9d
 800a9e8:	0800aa75 	.word	0x0800aa75
 800a9ec:	0800aa9d 	.word	0x0800aa9d
 800a9f0:	0800aa9d 	.word	0x0800aa9d
 800a9f4:	0800aa9d 	.word	0x0800aa9d
 800a9f8:	0800aa9d 	.word	0x0800aa9d
 800a9fc:	0800aa9d 	.word	0x0800aa9d
 800aa00:	0800aa9d 	.word	0x0800aa9d
 800aa04:	0800aa9d 	.word	0x0800aa9d
 800aa08:	0800aa7d 	.word	0x0800aa7d
 800aa0c:	0800aa9d 	.word	0x0800aa9d
 800aa10:	0800aa9d 	.word	0x0800aa9d
 800aa14:	0800aa9d 	.word	0x0800aa9d
 800aa18:	0800aa9d 	.word	0x0800aa9d
 800aa1c:	0800aa9d 	.word	0x0800aa9d
 800aa20:	0800aa9d 	.word	0x0800aa9d
 800aa24:	0800aa9d 	.word	0x0800aa9d
 800aa28:	0800aa85 	.word	0x0800aa85
 800aa2c:	0800aa9d 	.word	0x0800aa9d
 800aa30:	0800aa9d 	.word	0x0800aa9d
 800aa34:	0800aa9d 	.word	0x0800aa9d
 800aa38:	0800aa9d 	.word	0x0800aa9d
 800aa3c:	0800aa9d 	.word	0x0800aa9d
 800aa40:	0800aa9d 	.word	0x0800aa9d
 800aa44:	0800aa9d 	.word	0x0800aa9d
 800aa48:	0800aa8d 	.word	0x0800aa8d
 800aa4c:	0800aa9d 	.word	0x0800aa9d
 800aa50:	0800aa9d 	.word	0x0800aa9d
 800aa54:	0800aa9d 	.word	0x0800aa9d
 800aa58:	0800aa9d 	.word	0x0800aa9d
 800aa5c:	0800aa9d 	.word	0x0800aa9d
 800aa60:	0800aa9d 	.word	0x0800aa9d
 800aa64:	0800aa9d 	.word	0x0800aa9d
 800aa68:	0800aa95 	.word	0x0800aa95
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa72:	e0bc      	b.n	800abee <UART_SetConfig+0x5a2>
 800aa74:	2304      	movs	r3, #4
 800aa76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa7a:	e0b8      	b.n	800abee <UART_SetConfig+0x5a2>
 800aa7c:	2308      	movs	r3, #8
 800aa7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa82:	e0b4      	b.n	800abee <UART_SetConfig+0x5a2>
 800aa84:	2310      	movs	r3, #16
 800aa86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa8a:	e0b0      	b.n	800abee <UART_SetConfig+0x5a2>
 800aa8c:	2320      	movs	r3, #32
 800aa8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa92:	e0ac      	b.n	800abee <UART_SetConfig+0x5a2>
 800aa94:	2340      	movs	r3, #64	; 0x40
 800aa96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa9a:	e0a8      	b.n	800abee <UART_SetConfig+0x5a2>
 800aa9c:	2380      	movs	r3, #128	; 0x80
 800aa9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaa2:	e0a4      	b.n	800abee <UART_SetConfig+0x5a2>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a90      	ldr	r2, [pc, #576]	; (800acec <UART_SetConfig+0x6a0>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d130      	bne.n	800ab10 <UART_SetConfig+0x4c4>
 800aaae:	4b8e      	ldr	r3, [pc, #568]	; (800ace8 <UART_SetConfig+0x69c>)
 800aab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab2:	f003 0307 	and.w	r3, r3, #7
 800aab6:	2b05      	cmp	r3, #5
 800aab8:	d826      	bhi.n	800ab08 <UART_SetConfig+0x4bc>
 800aaba:	a201      	add	r2, pc, #4	; (adr r2, 800aac0 <UART_SetConfig+0x474>)
 800aabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac0:	0800aad9 	.word	0x0800aad9
 800aac4:	0800aae1 	.word	0x0800aae1
 800aac8:	0800aae9 	.word	0x0800aae9
 800aacc:	0800aaf1 	.word	0x0800aaf1
 800aad0:	0800aaf9 	.word	0x0800aaf9
 800aad4:	0800ab01 	.word	0x0800ab01
 800aad8:	2300      	movs	r3, #0
 800aada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aade:	e086      	b.n	800abee <UART_SetConfig+0x5a2>
 800aae0:	2304      	movs	r3, #4
 800aae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aae6:	e082      	b.n	800abee <UART_SetConfig+0x5a2>
 800aae8:	2308      	movs	r3, #8
 800aaea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaee:	e07e      	b.n	800abee <UART_SetConfig+0x5a2>
 800aaf0:	2310      	movs	r3, #16
 800aaf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaf6:	e07a      	b.n	800abee <UART_SetConfig+0x5a2>
 800aaf8:	2320      	movs	r3, #32
 800aafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aafe:	e076      	b.n	800abee <UART_SetConfig+0x5a2>
 800ab00:	2340      	movs	r3, #64	; 0x40
 800ab02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab06:	e072      	b.n	800abee <UART_SetConfig+0x5a2>
 800ab08:	2380      	movs	r3, #128	; 0x80
 800ab0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab0e:	e06e      	b.n	800abee <UART_SetConfig+0x5a2>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a76      	ldr	r2, [pc, #472]	; (800acf0 <UART_SetConfig+0x6a4>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d130      	bne.n	800ab7c <UART_SetConfig+0x530>
 800ab1a:	4b73      	ldr	r3, [pc, #460]	; (800ace8 <UART_SetConfig+0x69c>)
 800ab1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab1e:	f003 0307 	and.w	r3, r3, #7
 800ab22:	2b05      	cmp	r3, #5
 800ab24:	d826      	bhi.n	800ab74 <UART_SetConfig+0x528>
 800ab26:	a201      	add	r2, pc, #4	; (adr r2, 800ab2c <UART_SetConfig+0x4e0>)
 800ab28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2c:	0800ab45 	.word	0x0800ab45
 800ab30:	0800ab4d 	.word	0x0800ab4d
 800ab34:	0800ab55 	.word	0x0800ab55
 800ab38:	0800ab5d 	.word	0x0800ab5d
 800ab3c:	0800ab65 	.word	0x0800ab65
 800ab40:	0800ab6d 	.word	0x0800ab6d
 800ab44:	2300      	movs	r3, #0
 800ab46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab4a:	e050      	b.n	800abee <UART_SetConfig+0x5a2>
 800ab4c:	2304      	movs	r3, #4
 800ab4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab52:	e04c      	b.n	800abee <UART_SetConfig+0x5a2>
 800ab54:	2308      	movs	r3, #8
 800ab56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab5a:	e048      	b.n	800abee <UART_SetConfig+0x5a2>
 800ab5c:	2310      	movs	r3, #16
 800ab5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab62:	e044      	b.n	800abee <UART_SetConfig+0x5a2>
 800ab64:	2320      	movs	r3, #32
 800ab66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab6a:	e040      	b.n	800abee <UART_SetConfig+0x5a2>
 800ab6c:	2340      	movs	r3, #64	; 0x40
 800ab6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab72:	e03c      	b.n	800abee <UART_SetConfig+0x5a2>
 800ab74:	2380      	movs	r3, #128	; 0x80
 800ab76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab7a:	e038      	b.n	800abee <UART_SetConfig+0x5a2>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a5c      	ldr	r2, [pc, #368]	; (800acf4 <UART_SetConfig+0x6a8>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d130      	bne.n	800abe8 <UART_SetConfig+0x59c>
 800ab86:	4b58      	ldr	r3, [pc, #352]	; (800ace8 <UART_SetConfig+0x69c>)
 800ab88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab8a:	f003 0307 	and.w	r3, r3, #7
 800ab8e:	2b05      	cmp	r3, #5
 800ab90:	d826      	bhi.n	800abe0 <UART_SetConfig+0x594>
 800ab92:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <UART_SetConfig+0x54c>)
 800ab94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab98:	0800abb1 	.word	0x0800abb1
 800ab9c:	0800abb9 	.word	0x0800abb9
 800aba0:	0800abc1 	.word	0x0800abc1
 800aba4:	0800abc9 	.word	0x0800abc9
 800aba8:	0800abd1 	.word	0x0800abd1
 800abac:	0800abd9 	.word	0x0800abd9
 800abb0:	2302      	movs	r3, #2
 800abb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abb6:	e01a      	b.n	800abee <UART_SetConfig+0x5a2>
 800abb8:	2304      	movs	r3, #4
 800abba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abbe:	e016      	b.n	800abee <UART_SetConfig+0x5a2>
 800abc0:	2308      	movs	r3, #8
 800abc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abc6:	e012      	b.n	800abee <UART_SetConfig+0x5a2>
 800abc8:	2310      	movs	r3, #16
 800abca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abce:	e00e      	b.n	800abee <UART_SetConfig+0x5a2>
 800abd0:	2320      	movs	r3, #32
 800abd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abd6:	e00a      	b.n	800abee <UART_SetConfig+0x5a2>
 800abd8:	2340      	movs	r3, #64	; 0x40
 800abda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abde:	e006      	b.n	800abee <UART_SetConfig+0x5a2>
 800abe0:	2380      	movs	r3, #128	; 0x80
 800abe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abe6:	e002      	b.n	800abee <UART_SetConfig+0x5a2>
 800abe8:	2380      	movs	r3, #128	; 0x80
 800abea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a40      	ldr	r2, [pc, #256]	; (800acf4 <UART_SetConfig+0x6a8>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	f040 80ef 	bne.w	800add8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800abfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800abfe:	2b20      	cmp	r3, #32
 800ac00:	dc46      	bgt.n	800ac90 <UART_SetConfig+0x644>
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	f2c0 8081 	blt.w	800ad0a <UART_SetConfig+0x6be>
 800ac08:	3b02      	subs	r3, #2
 800ac0a:	2b1e      	cmp	r3, #30
 800ac0c:	d87d      	bhi.n	800ad0a <UART_SetConfig+0x6be>
 800ac0e:	a201      	add	r2, pc, #4	; (adr r2, 800ac14 <UART_SetConfig+0x5c8>)
 800ac10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac14:	0800ac97 	.word	0x0800ac97
 800ac18:	0800ad0b 	.word	0x0800ad0b
 800ac1c:	0800ac9f 	.word	0x0800ac9f
 800ac20:	0800ad0b 	.word	0x0800ad0b
 800ac24:	0800ad0b 	.word	0x0800ad0b
 800ac28:	0800ad0b 	.word	0x0800ad0b
 800ac2c:	0800acaf 	.word	0x0800acaf
 800ac30:	0800ad0b 	.word	0x0800ad0b
 800ac34:	0800ad0b 	.word	0x0800ad0b
 800ac38:	0800ad0b 	.word	0x0800ad0b
 800ac3c:	0800ad0b 	.word	0x0800ad0b
 800ac40:	0800ad0b 	.word	0x0800ad0b
 800ac44:	0800ad0b 	.word	0x0800ad0b
 800ac48:	0800ad0b 	.word	0x0800ad0b
 800ac4c:	0800acbf 	.word	0x0800acbf
 800ac50:	0800ad0b 	.word	0x0800ad0b
 800ac54:	0800ad0b 	.word	0x0800ad0b
 800ac58:	0800ad0b 	.word	0x0800ad0b
 800ac5c:	0800ad0b 	.word	0x0800ad0b
 800ac60:	0800ad0b 	.word	0x0800ad0b
 800ac64:	0800ad0b 	.word	0x0800ad0b
 800ac68:	0800ad0b 	.word	0x0800ad0b
 800ac6c:	0800ad0b 	.word	0x0800ad0b
 800ac70:	0800ad0b 	.word	0x0800ad0b
 800ac74:	0800ad0b 	.word	0x0800ad0b
 800ac78:	0800ad0b 	.word	0x0800ad0b
 800ac7c:	0800ad0b 	.word	0x0800ad0b
 800ac80:	0800ad0b 	.word	0x0800ad0b
 800ac84:	0800ad0b 	.word	0x0800ad0b
 800ac88:	0800ad0b 	.word	0x0800ad0b
 800ac8c:	0800acfd 	.word	0x0800acfd
 800ac90:	2b40      	cmp	r3, #64	; 0x40
 800ac92:	d036      	beq.n	800ad02 <UART_SetConfig+0x6b6>
 800ac94:	e039      	b.n	800ad0a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ac96:	f7fc ff2d 	bl	8007af4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac9c:	e03b      	b.n	800ad16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac9e:	f107 0314 	add.w	r3, r7, #20
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fc ff3c 	bl	8007b20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acac:	e033      	b.n	800ad16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acae:	f107 0308 	add.w	r3, r7, #8
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fd f888 	bl	8007dc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acbc:	e02b      	b.n	800ad16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acbe:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <UART_SetConfig+0x69c>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 0320 	and.w	r3, r3, #32
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d009      	beq.n	800acde <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acca:	4b07      	ldr	r3, [pc, #28]	; (800ace8 <UART_SetConfig+0x69c>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	08db      	lsrs	r3, r3, #3
 800acd0:	f003 0303 	and.w	r3, r3, #3
 800acd4:	4a08      	ldr	r2, [pc, #32]	; (800acf8 <UART_SetConfig+0x6ac>)
 800acd6:	fa22 f303 	lsr.w	r3, r2, r3
 800acda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acdc:	e01b      	b.n	800ad16 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800acde:	4b06      	ldr	r3, [pc, #24]	; (800acf8 <UART_SetConfig+0x6ac>)
 800ace0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ace2:	e018      	b.n	800ad16 <UART_SetConfig+0x6ca>
 800ace4:	40011400 	.word	0x40011400
 800ace8:	58024400 	.word	0x58024400
 800acec:	40007800 	.word	0x40007800
 800acf0:	40007c00 	.word	0x40007c00
 800acf4:	58000c00 	.word	0x58000c00
 800acf8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acfc:	4bc4      	ldr	r3, [pc, #784]	; (800b010 <UART_SetConfig+0x9c4>)
 800acfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad00:	e009      	b.n	800ad16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad08:	e005      	b.n	800ad16 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ad14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f000 81da 	beq.w	800b0d2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	4abc      	ldr	r2, [pc, #752]	; (800b014 <UART_SetConfig+0x9c8>)
 800ad24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad30:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	4613      	mov	r3, r2
 800ad38:	005b      	lsls	r3, r3, #1
 800ad3a:	4413      	add	r3, r2
 800ad3c:	6a3a      	ldr	r2, [r7, #32]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d305      	bcc.n	800ad4e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad48:	6a3a      	ldr	r2, [r7, #32]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d903      	bls.n	800ad56 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ad54:	e1bd      	b.n	800b0d2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f04f 0100 	mov.w	r1, #0
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad62:	4aac      	ldr	r2, [pc, #688]	; (800b014 <UART_SetConfig+0x9c8>)
 800ad64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	f04f 0300 	mov.w	r3, #0
 800ad6e:	f7f5 fb0f 	bl	8000390 <__aeabi_uldivmod>
 800ad72:	4602      	mov	r2, r0
 800ad74:	460b      	mov	r3, r1
 800ad76:	4610      	mov	r0, r2
 800ad78:	4619      	mov	r1, r3
 800ad7a:	f04f 0200 	mov.w	r2, #0
 800ad7e:	f04f 0300 	mov.w	r3, #0
 800ad82:	020b      	lsls	r3, r1, #8
 800ad84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad88:	0202      	lsls	r2, r0, #8
 800ad8a:	6879      	ldr	r1, [r7, #4]
 800ad8c:	6849      	ldr	r1, [r1, #4]
 800ad8e:	0849      	lsrs	r1, r1, #1
 800ad90:	4608      	mov	r0, r1
 800ad92:	f04f 0100 	mov.w	r1, #0
 800ad96:	1814      	adds	r4, r2, r0
 800ad98:	eb43 0501 	adc.w	r5, r3, r1
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	461a      	mov	r2, r3
 800ada2:	f04f 0300 	mov.w	r3, #0
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 faf1 	bl	8000390 <__aeabi_uldivmod>
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	4613      	mov	r3, r2
 800adb4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adbc:	d308      	bcc.n	800add0 <UART_SetConfig+0x784>
 800adbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adc4:	d204      	bcs.n	800add0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adcc:	60da      	str	r2, [r3, #12]
 800adce:	e180      	b.n	800b0d2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800add6:	e17c      	b.n	800b0d2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	69db      	ldr	r3, [r3, #28]
 800addc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ade0:	f040 80be 	bne.w	800af60 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800ade4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ade8:	2b20      	cmp	r3, #32
 800adea:	dc49      	bgt.n	800ae80 <UART_SetConfig+0x834>
 800adec:	2b00      	cmp	r3, #0
 800adee:	db7c      	blt.n	800aeea <UART_SetConfig+0x89e>
 800adf0:	2b20      	cmp	r3, #32
 800adf2:	d87a      	bhi.n	800aeea <UART_SetConfig+0x89e>
 800adf4:	a201      	add	r2, pc, #4	; (adr r2, 800adfc <UART_SetConfig+0x7b0>)
 800adf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfa:	bf00      	nop
 800adfc:	0800ae87 	.word	0x0800ae87
 800ae00:	0800ae8f 	.word	0x0800ae8f
 800ae04:	0800aeeb 	.word	0x0800aeeb
 800ae08:	0800aeeb 	.word	0x0800aeeb
 800ae0c:	0800ae97 	.word	0x0800ae97
 800ae10:	0800aeeb 	.word	0x0800aeeb
 800ae14:	0800aeeb 	.word	0x0800aeeb
 800ae18:	0800aeeb 	.word	0x0800aeeb
 800ae1c:	0800aea7 	.word	0x0800aea7
 800ae20:	0800aeeb 	.word	0x0800aeeb
 800ae24:	0800aeeb 	.word	0x0800aeeb
 800ae28:	0800aeeb 	.word	0x0800aeeb
 800ae2c:	0800aeeb 	.word	0x0800aeeb
 800ae30:	0800aeeb 	.word	0x0800aeeb
 800ae34:	0800aeeb 	.word	0x0800aeeb
 800ae38:	0800aeeb 	.word	0x0800aeeb
 800ae3c:	0800aeb7 	.word	0x0800aeb7
 800ae40:	0800aeeb 	.word	0x0800aeeb
 800ae44:	0800aeeb 	.word	0x0800aeeb
 800ae48:	0800aeeb 	.word	0x0800aeeb
 800ae4c:	0800aeeb 	.word	0x0800aeeb
 800ae50:	0800aeeb 	.word	0x0800aeeb
 800ae54:	0800aeeb 	.word	0x0800aeeb
 800ae58:	0800aeeb 	.word	0x0800aeeb
 800ae5c:	0800aeeb 	.word	0x0800aeeb
 800ae60:	0800aeeb 	.word	0x0800aeeb
 800ae64:	0800aeeb 	.word	0x0800aeeb
 800ae68:	0800aeeb 	.word	0x0800aeeb
 800ae6c:	0800aeeb 	.word	0x0800aeeb
 800ae70:	0800aeeb 	.word	0x0800aeeb
 800ae74:	0800aeeb 	.word	0x0800aeeb
 800ae78:	0800aeeb 	.word	0x0800aeeb
 800ae7c:	0800aedd 	.word	0x0800aedd
 800ae80:	2b40      	cmp	r3, #64	; 0x40
 800ae82:	d02e      	beq.n	800aee2 <UART_SetConfig+0x896>
 800ae84:	e031      	b.n	800aeea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae86:	f7fb fec9 	bl	8006c1c <HAL_RCC_GetPCLK1Freq>
 800ae8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae8c:	e033      	b.n	800aef6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae8e:	f7fb fedb 	bl	8006c48 <HAL_RCC_GetPCLK2Freq>
 800ae92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae94:	e02f      	b.n	800aef6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae96:	f107 0314 	add.w	r3, r7, #20
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7fc fe40 	bl	8007b20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aea4:	e027      	b.n	800aef6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aea6:	f107 0308 	add.w	r3, r7, #8
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fc ff8c 	bl	8007dc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aeb4:	e01f      	b.n	800aef6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeb6:	4b58      	ldr	r3, [pc, #352]	; (800b018 <UART_SetConfig+0x9cc>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0320 	and.w	r3, r3, #32
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d009      	beq.n	800aed6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aec2:	4b55      	ldr	r3, [pc, #340]	; (800b018 <UART_SetConfig+0x9cc>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	08db      	lsrs	r3, r3, #3
 800aec8:	f003 0303 	and.w	r3, r3, #3
 800aecc:	4a53      	ldr	r2, [pc, #332]	; (800b01c <UART_SetConfig+0x9d0>)
 800aece:	fa22 f303 	lsr.w	r3, r2, r3
 800aed2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aed4:	e00f      	b.n	800aef6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800aed6:	4b51      	ldr	r3, [pc, #324]	; (800b01c <UART_SetConfig+0x9d0>)
 800aed8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aeda:	e00c      	b.n	800aef6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aedc:	4b4c      	ldr	r3, [pc, #304]	; (800b010 <UART_SetConfig+0x9c4>)
 800aede:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aee0:	e009      	b.n	800aef6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aee8:	e005      	b.n	800aef6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800aeea:	2300      	movs	r3, #0
 800aeec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aef4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 80ea 	beq.w	800b0d2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af02:	4a44      	ldr	r2, [pc, #272]	; (800b014 <UART_SetConfig+0x9c8>)
 800af04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af08:	461a      	mov	r2, r3
 800af0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af10:	005a      	lsls	r2, r3, #1
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	085b      	lsrs	r3, r3, #1
 800af18:	441a      	add	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af22:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	2b0f      	cmp	r3, #15
 800af28:	d916      	bls.n	800af58 <UART_SetConfig+0x90c>
 800af2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af30:	d212      	bcs.n	800af58 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af34:	b29b      	uxth	r3, r3
 800af36:	f023 030f 	bic.w	r3, r3, #15
 800af3a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3e:	085b      	lsrs	r3, r3, #1
 800af40:	b29b      	uxth	r3, r3
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	b29a      	uxth	r2, r3
 800af48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af4a:	4313      	orrs	r3, r2
 800af4c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800af54:	60da      	str	r2, [r3, #12]
 800af56:	e0bc      	b.n	800b0d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800af5e:	e0b8      	b.n	800b0d2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af64:	2b20      	cmp	r3, #32
 800af66:	dc4b      	bgt.n	800b000 <UART_SetConfig+0x9b4>
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f2c0 8087 	blt.w	800b07c <UART_SetConfig+0xa30>
 800af6e:	2b20      	cmp	r3, #32
 800af70:	f200 8084 	bhi.w	800b07c <UART_SetConfig+0xa30>
 800af74:	a201      	add	r2, pc, #4	; (adr r2, 800af7c <UART_SetConfig+0x930>)
 800af76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7a:	bf00      	nop
 800af7c:	0800b007 	.word	0x0800b007
 800af80:	0800b021 	.word	0x0800b021
 800af84:	0800b07d 	.word	0x0800b07d
 800af88:	0800b07d 	.word	0x0800b07d
 800af8c:	0800b029 	.word	0x0800b029
 800af90:	0800b07d 	.word	0x0800b07d
 800af94:	0800b07d 	.word	0x0800b07d
 800af98:	0800b07d 	.word	0x0800b07d
 800af9c:	0800b039 	.word	0x0800b039
 800afa0:	0800b07d 	.word	0x0800b07d
 800afa4:	0800b07d 	.word	0x0800b07d
 800afa8:	0800b07d 	.word	0x0800b07d
 800afac:	0800b07d 	.word	0x0800b07d
 800afb0:	0800b07d 	.word	0x0800b07d
 800afb4:	0800b07d 	.word	0x0800b07d
 800afb8:	0800b07d 	.word	0x0800b07d
 800afbc:	0800b049 	.word	0x0800b049
 800afc0:	0800b07d 	.word	0x0800b07d
 800afc4:	0800b07d 	.word	0x0800b07d
 800afc8:	0800b07d 	.word	0x0800b07d
 800afcc:	0800b07d 	.word	0x0800b07d
 800afd0:	0800b07d 	.word	0x0800b07d
 800afd4:	0800b07d 	.word	0x0800b07d
 800afd8:	0800b07d 	.word	0x0800b07d
 800afdc:	0800b07d 	.word	0x0800b07d
 800afe0:	0800b07d 	.word	0x0800b07d
 800afe4:	0800b07d 	.word	0x0800b07d
 800afe8:	0800b07d 	.word	0x0800b07d
 800afec:	0800b07d 	.word	0x0800b07d
 800aff0:	0800b07d 	.word	0x0800b07d
 800aff4:	0800b07d 	.word	0x0800b07d
 800aff8:	0800b07d 	.word	0x0800b07d
 800affc:	0800b06f 	.word	0x0800b06f
 800b000:	2b40      	cmp	r3, #64	; 0x40
 800b002:	d037      	beq.n	800b074 <UART_SetConfig+0xa28>
 800b004:	e03a      	b.n	800b07c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b006:	f7fb fe09 	bl	8006c1c <HAL_RCC_GetPCLK1Freq>
 800b00a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b00c:	e03c      	b.n	800b088 <UART_SetConfig+0xa3c>
 800b00e:	bf00      	nop
 800b010:	003d0900 	.word	0x003d0900
 800b014:	0800e198 	.word	0x0800e198
 800b018:	58024400 	.word	0x58024400
 800b01c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b020:	f7fb fe12 	bl	8006c48 <HAL_RCC_GetPCLK2Freq>
 800b024:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b026:	e02f      	b.n	800b088 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b028:	f107 0314 	add.w	r3, r7, #20
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fc fd77 	bl	8007b20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b036:	e027      	b.n	800b088 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b038:	f107 0308 	add.w	r3, r7, #8
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7fc fec3 	bl	8007dc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b046:	e01f      	b.n	800b088 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b048:	4b2c      	ldr	r3, [pc, #176]	; (800b0fc <UART_SetConfig+0xab0>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 0320 	and.w	r3, r3, #32
 800b050:	2b00      	cmp	r3, #0
 800b052:	d009      	beq.n	800b068 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b054:	4b29      	ldr	r3, [pc, #164]	; (800b0fc <UART_SetConfig+0xab0>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	08db      	lsrs	r3, r3, #3
 800b05a:	f003 0303 	and.w	r3, r3, #3
 800b05e:	4a28      	ldr	r2, [pc, #160]	; (800b100 <UART_SetConfig+0xab4>)
 800b060:	fa22 f303 	lsr.w	r3, r2, r3
 800b064:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b066:	e00f      	b.n	800b088 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b068:	4b25      	ldr	r3, [pc, #148]	; (800b100 <UART_SetConfig+0xab4>)
 800b06a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b06c:	e00c      	b.n	800b088 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b06e:	4b25      	ldr	r3, [pc, #148]	; (800b104 <UART_SetConfig+0xab8>)
 800b070:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b072:	e009      	b.n	800b088 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b078:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b07a:	e005      	b.n	800b088 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b07c:	2300      	movs	r3, #0
 800b07e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b086:	bf00      	nop
    }

    if (pclk != 0U)
 800b088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d021      	beq.n	800b0d2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b092:	4a1d      	ldr	r2, [pc, #116]	; (800b108 <UART_SetConfig+0xabc>)
 800b094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b098:	461a      	mov	r2, r3
 800b09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	085b      	lsrs	r3, r3, #1
 800b0a6:	441a      	add	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b4:	2b0f      	cmp	r3, #15
 800b0b6:	d909      	bls.n	800b0cc <UART_SetConfig+0xa80>
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0be:	d205      	bcs.n	800b0cc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	60da      	str	r2, [r3, #12]
 800b0ca:	e002      	b.n	800b0d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b0ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3738      	adds	r7, #56	; 0x38
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bdb0      	pop	{r4, r5, r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	58024400 	.word	0x58024400
 800b100:	03d09000 	.word	0x03d09000
 800b104:	003d0900 	.word	0x003d0900
 800b108:	0800e198 	.word	0x0800e198

0800b10c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00a      	beq.n	800b136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	430a      	orrs	r2, r1
 800b134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13a:	f003 0302 	and.w	r3, r3, #2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00a      	beq.n	800b158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	430a      	orrs	r2, r1
 800b156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15c:	f003 0304 	and.w	r3, r3, #4
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00a      	beq.n	800b17a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	430a      	orrs	r2, r1
 800b178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17e:	f003 0308 	and.w	r3, r3, #8
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00a      	beq.n	800b19c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	430a      	orrs	r2, r1
 800b19a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a0:	f003 0310 	and.w	r3, r3, #16
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d00a      	beq.n	800b1be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c2:	f003 0320 	and.w	r3, r3, #32
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	430a      	orrs	r2, r1
 800b1de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d01a      	beq.n	800b222 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	430a      	orrs	r2, r1
 800b200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b20a:	d10a      	bne.n	800b222 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	430a      	orrs	r2, r1
 800b220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00a      	beq.n	800b244 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	430a      	orrs	r2, r1
 800b242:	605a      	str	r2, [r3, #4]
  }
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af02      	add	r7, sp, #8
 800b256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b260:	f7f7 fef0 	bl	8003044 <HAL_GetTick>
 800b264:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 0308 	and.w	r3, r3, #8
 800b270:	2b08      	cmp	r3, #8
 800b272:	d10e      	bne.n	800b292 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f82f 	bl	800b2e6 <UART_WaitOnFlagUntilTimeout>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b28e:	2303      	movs	r3, #3
 800b290:	e025      	b.n	800b2de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f003 0304 	and.w	r3, r3, #4
 800b29c:	2b04      	cmp	r3, #4
 800b29e:	d10e      	bne.n	800b2be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f819 	bl	800b2e6 <UART_WaitOnFlagUntilTimeout>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	e00f      	b.n	800b2de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2220      	movs	r2, #32
 800b2c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2220      	movs	r2, #32
 800b2ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b09c      	sub	sp, #112	; 0x70
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	60f8      	str	r0, [r7, #12]
 800b2ee:	60b9      	str	r1, [r7, #8]
 800b2f0:	603b      	str	r3, [r7, #0]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2f6:	e0a9      	b.n	800b44c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fe:	f000 80a5 	beq.w	800b44c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b302:	f7f7 fe9f 	bl	8003044 <HAL_GetTick>
 800b306:	4602      	mov	r2, r0
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b30e:	429a      	cmp	r2, r3
 800b310:	d302      	bcc.n	800b318 <UART_WaitOnFlagUntilTimeout+0x32>
 800b312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b314:	2b00      	cmp	r3, #0
 800b316:	d140      	bne.n	800b39a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b320:	e853 3f00 	ldrex	r3, [r3]
 800b324:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b328:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b32c:	667b      	str	r3, [r7, #100]	; 0x64
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	461a      	mov	r2, r3
 800b334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b336:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b338:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b33c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b33e:	e841 2300 	strex	r3, r2, [r1]
 800b342:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1e6      	bne.n	800b318 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	3308      	adds	r3, #8
 800b350:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b354:	e853 3f00 	ldrex	r3, [r3]
 800b358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35c:	f023 0301 	bic.w	r3, r3, #1
 800b360:	663b      	str	r3, [r7, #96]	; 0x60
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	3308      	adds	r3, #8
 800b368:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b36a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b36c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b372:	e841 2300 	strex	r3, r2, [r1]
 800b376:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1e5      	bne.n	800b34a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2220      	movs	r2, #32
 800b382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2220      	movs	r2, #32
 800b38a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b396:	2303      	movs	r3, #3
 800b398:	e069      	b.n	800b46e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 0304 	and.w	r3, r3, #4
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d051      	beq.n	800b44c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	69db      	ldr	r3, [r3, #28]
 800b3ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3b6:	d149      	bne.n	800b44c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ca:	e853 3f00 	ldrex	r3, [r3]
 800b3ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b3d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	461a      	mov	r2, r3
 800b3de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3e0:	637b      	str	r3, [r7, #52]	; 0x34
 800b3e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3e8:	e841 2300 	strex	r3, r2, [r1]
 800b3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1e6      	bne.n	800b3c2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	3308      	adds	r3, #8
 800b3fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	e853 3f00 	ldrex	r3, [r3]
 800b402:	613b      	str	r3, [r7, #16]
   return(result);
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	f023 0301 	bic.w	r3, r3, #1
 800b40a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3308      	adds	r3, #8
 800b412:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b414:	623a      	str	r2, [r7, #32]
 800b416:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b418:	69f9      	ldr	r1, [r7, #28]
 800b41a:	6a3a      	ldr	r2, [r7, #32]
 800b41c:	e841 2300 	strex	r3, r2, [r1]
 800b420:	61bb      	str	r3, [r7, #24]
   return(result);
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1e5      	bne.n	800b3f4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2220      	movs	r2, #32
 800b42c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2220      	movs	r2, #32
 800b434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2220      	movs	r2, #32
 800b43c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b448:	2303      	movs	r3, #3
 800b44a:	e010      	b.n	800b46e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	69da      	ldr	r2, [r3, #28]
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	4013      	ands	r3, r2
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	429a      	cmp	r2, r3
 800b45a:	bf0c      	ite	eq
 800b45c:	2301      	moveq	r3, #1
 800b45e:	2300      	movne	r3, #0
 800b460:	b2db      	uxtb	r3, r3
 800b462:	461a      	mov	r2, r3
 800b464:	79fb      	ldrb	r3, [r7, #7]
 800b466:	429a      	cmp	r2, r3
 800b468:	f43f af46 	beq.w	800b2f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3770      	adds	r7, #112	; 0x70
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
	...

0800b478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b478:	b480      	push	{r7}
 800b47a:	b095      	sub	sp, #84	; 0x54
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b488:	e853 3f00 	ldrex	r3, [r3]
 800b48c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b494:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	461a      	mov	r2, r3
 800b49c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b49e:	643b      	str	r3, [r7, #64]	; 0x40
 800b4a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4a6:	e841 2300 	strex	r3, r2, [r1]
 800b4aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1e6      	bne.n	800b480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	3308      	adds	r3, #8
 800b4b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ba:	6a3b      	ldr	r3, [r7, #32]
 800b4bc:	e853 3f00 	ldrex	r3, [r3]
 800b4c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4c2:	69fa      	ldr	r2, [r7, #28]
 800b4c4:	4b1e      	ldr	r3, [pc, #120]	; (800b540 <UART_EndRxTransfer+0xc8>)
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	3308      	adds	r3, #8
 800b4d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b4d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4da:	e841 2300 	strex	r3, r2, [r1]
 800b4de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1e5      	bne.n	800b4b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d118      	bne.n	800b520 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	f023 0310 	bic.w	r3, r3, #16
 800b502:	647b      	str	r3, [r7, #68]	; 0x44
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	461a      	mov	r2, r3
 800b50a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b50c:	61bb      	str	r3, [r7, #24]
 800b50e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b510:	6979      	ldr	r1, [r7, #20]
 800b512:	69ba      	ldr	r2, [r7, #24]
 800b514:	e841 2300 	strex	r3, r2, [r1]
 800b518:	613b      	str	r3, [r7, #16]
   return(result);
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1e6      	bne.n	800b4ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2220      	movs	r2, #32
 800b524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b534:	bf00      	nop
 800b536:	3754      	adds	r7, #84	; 0x54
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	effffffe 	.word	0xeffffffe

0800b544 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b550:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2200      	movs	r2, #0
 800b556:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f7ff f85c 	bl	800a620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b568:	bf00      	nop
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b088      	sub	sp, #32
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	e853 3f00 	ldrex	r3, [r3]
 800b584:	60bb      	str	r3, [r7, #8]
   return(result);
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b58c:	61fb      	str	r3, [r7, #28]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	61bb      	str	r3, [r7, #24]
 800b598:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59a:	6979      	ldr	r1, [r7, #20]
 800b59c:	69ba      	ldr	r2, [r7, #24]
 800b59e:	e841 2300 	strex	r3, r2, [r1]
 800b5a2:	613b      	str	r3, [r7, #16]
   return(result);
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1e6      	bne.n	800b578 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff f827 	bl	800a60c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5be:	bf00      	nop
 800b5c0:	3720      	adds	r7, #32
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b083      	sub	sp, #12
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b5ce:	bf00      	nop
 800b5d0:	370c      	adds	r7, #12
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr

0800b5da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b5da:	b480      	push	{r7}
 800b5dc:	b083      	sub	sp, #12
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b5e2:	bf00      	nop
 800b5e4:	370c      	adds	r7, #12
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	b083      	sub	sp, #12
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b5f6:	bf00      	nop
 800b5f8:	370c      	adds	r7, #12
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr

0800b602 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b084      	sub	sp, #16
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b610:	2b01      	cmp	r3, #1
 800b612:	d101      	bne.n	800b618 <HAL_UARTEx_EnableFifoMode+0x16>
 800b614:	2302      	movs	r3, #2
 800b616:	e02b      	b.n	800b670 <HAL_UARTEx_EnableFifoMode+0x6e>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2224      	movs	r2, #36	; 0x24
 800b624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f022 0201 	bic.w	r2, r2, #1
 800b63e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b646:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b64e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f8c3 	bl	800b7e4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2220      	movs	r2, #32
 800b662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b686:	2b01      	cmp	r3, #1
 800b688:	d101      	bne.n	800b68e <HAL_UARTEx_DisableFifoMode+0x16>
 800b68a:	2302      	movs	r3, #2
 800b68c:	e027      	b.n	800b6de <HAL_UARTEx_DisableFifoMode+0x66>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2224      	movs	r2, #36	; 0x24
 800b69a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f022 0201 	bic.w	r2, r2, #1
 800b6b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b6bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3714      	adds	r7, #20
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b084      	sub	sp, #16
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d101      	bne.n	800b702 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b6fe:	2302      	movs	r3, #2
 800b700:	e02d      	b.n	800b75e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2224      	movs	r2, #36	; 0x24
 800b70e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f022 0201 	bic.w	r2, r2, #1
 800b728:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	430a      	orrs	r2, r1
 800b73c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f850 	bl	800b7e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2220      	movs	r2, #32
 800b750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b084      	sub	sp, #16
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b776:	2b01      	cmp	r3, #1
 800b778:	d101      	bne.n	800b77e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b77a:	2302      	movs	r3, #2
 800b77c:	e02d      	b.n	800b7da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2224      	movs	r2, #36	; 0x24
 800b78a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f022 0201 	bic.w	r2, r2, #1
 800b7a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	430a      	orrs	r2, r1
 800b7b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f812 	bl	800b7e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2220      	movs	r2, #32
 800b7cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
	...

0800b7e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d108      	bne.n	800b806 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b804:	e031      	b.n	800b86a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b806:	2310      	movs	r3, #16
 800b808:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b80a:	2310      	movs	r3, #16
 800b80c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	0e5b      	lsrs	r3, r3, #25
 800b816:	b2db      	uxtb	r3, r3
 800b818:	f003 0307 	and.w	r3, r3, #7
 800b81c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	0f5b      	lsrs	r3, r3, #29
 800b826:	b2db      	uxtb	r3, r3
 800b828:	f003 0307 	and.w	r3, r3, #7
 800b82c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b82e:	7bbb      	ldrb	r3, [r7, #14]
 800b830:	7b3a      	ldrb	r2, [r7, #12]
 800b832:	4911      	ldr	r1, [pc, #68]	; (800b878 <UARTEx_SetNbDataToProcess+0x94>)
 800b834:	5c8a      	ldrb	r2, [r1, r2]
 800b836:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b83a:	7b3a      	ldrb	r2, [r7, #12]
 800b83c:	490f      	ldr	r1, [pc, #60]	; (800b87c <UARTEx_SetNbDataToProcess+0x98>)
 800b83e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b840:	fb93 f3f2 	sdiv	r3, r3, r2
 800b844:	b29a      	uxth	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
 800b84e:	7b7a      	ldrb	r2, [r7, #13]
 800b850:	4909      	ldr	r1, [pc, #36]	; (800b878 <UARTEx_SetNbDataToProcess+0x94>)
 800b852:	5c8a      	ldrb	r2, [r1, r2]
 800b854:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b858:	7b7a      	ldrb	r2, [r7, #13]
 800b85a:	4908      	ldr	r1, [pc, #32]	; (800b87c <UARTEx_SetNbDataToProcess+0x98>)
 800b85c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b85e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b862:	b29a      	uxth	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b86a:	bf00      	nop
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	0800e1b0 	.word	0x0800e1b0
 800b87c:	0800e1b8 	.word	0x0800e1b8

0800b880 <__errno>:
 800b880:	4b01      	ldr	r3, [pc, #4]	; (800b888 <__errno+0x8>)
 800b882:	6818      	ldr	r0, [r3, #0]
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	24000010 	.word	0x24000010

0800b88c <__libc_init_array>:
 800b88c:	b570      	push	{r4, r5, r6, lr}
 800b88e:	4d0d      	ldr	r5, [pc, #52]	; (800b8c4 <__libc_init_array+0x38>)
 800b890:	4c0d      	ldr	r4, [pc, #52]	; (800b8c8 <__libc_init_array+0x3c>)
 800b892:	1b64      	subs	r4, r4, r5
 800b894:	10a4      	asrs	r4, r4, #2
 800b896:	2600      	movs	r6, #0
 800b898:	42a6      	cmp	r6, r4
 800b89a:	d109      	bne.n	800b8b0 <__libc_init_array+0x24>
 800b89c:	4d0b      	ldr	r5, [pc, #44]	; (800b8cc <__libc_init_array+0x40>)
 800b89e:	4c0c      	ldr	r4, [pc, #48]	; (800b8d0 <__libc_init_array+0x44>)
 800b8a0:	f002 fc62 	bl	800e168 <_init>
 800b8a4:	1b64      	subs	r4, r4, r5
 800b8a6:	10a4      	asrs	r4, r4, #2
 800b8a8:	2600      	movs	r6, #0
 800b8aa:	42a6      	cmp	r6, r4
 800b8ac:	d105      	bne.n	800b8ba <__libc_init_array+0x2e>
 800b8ae:	bd70      	pop	{r4, r5, r6, pc}
 800b8b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8b4:	4798      	blx	r3
 800b8b6:	3601      	adds	r6, #1
 800b8b8:	e7ee      	b.n	800b898 <__libc_init_array+0xc>
 800b8ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8be:	4798      	blx	r3
 800b8c0:	3601      	adds	r6, #1
 800b8c2:	e7f2      	b.n	800b8aa <__libc_init_array+0x1e>
 800b8c4:	0800e5ac 	.word	0x0800e5ac
 800b8c8:	0800e5ac 	.word	0x0800e5ac
 800b8cc:	0800e5ac 	.word	0x0800e5ac
 800b8d0:	0800e5b4 	.word	0x0800e5b4

0800b8d4 <memset>:
 800b8d4:	4402      	add	r2, r0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d100      	bne.n	800b8de <memset+0xa>
 800b8dc:	4770      	bx	lr
 800b8de:	f803 1b01 	strb.w	r1, [r3], #1
 800b8e2:	e7f9      	b.n	800b8d8 <memset+0x4>

0800b8e4 <__cvt>:
 800b8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8e6:	ed2d 8b02 	vpush	{d8}
 800b8ea:	eeb0 8b40 	vmov.f64	d8, d0
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	4617      	mov	r7, r2
 800b8f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b8f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b8f6:	ee18 2a90 	vmov	r2, s17
 800b8fa:	f025 0520 	bic.w	r5, r5, #32
 800b8fe:	2a00      	cmp	r2, #0
 800b900:	bfb6      	itet	lt
 800b902:	222d      	movlt	r2, #45	; 0x2d
 800b904:	2200      	movge	r2, #0
 800b906:	eeb1 8b40 	vneglt.f64	d8, d0
 800b90a:	2d46      	cmp	r5, #70	; 0x46
 800b90c:	460c      	mov	r4, r1
 800b90e:	701a      	strb	r2, [r3, #0]
 800b910:	d004      	beq.n	800b91c <__cvt+0x38>
 800b912:	2d45      	cmp	r5, #69	; 0x45
 800b914:	d100      	bne.n	800b918 <__cvt+0x34>
 800b916:	3401      	adds	r4, #1
 800b918:	2102      	movs	r1, #2
 800b91a:	e000      	b.n	800b91e <__cvt+0x3a>
 800b91c:	2103      	movs	r1, #3
 800b91e:	ab03      	add	r3, sp, #12
 800b920:	9301      	str	r3, [sp, #4]
 800b922:	ab02      	add	r3, sp, #8
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	4622      	mov	r2, r4
 800b928:	4633      	mov	r3, r6
 800b92a:	eeb0 0b48 	vmov.f64	d0, d8
 800b92e:	f000 fcab 	bl	800c288 <_dtoa_r>
 800b932:	2d47      	cmp	r5, #71	; 0x47
 800b934:	d109      	bne.n	800b94a <__cvt+0x66>
 800b936:	07fb      	lsls	r3, r7, #31
 800b938:	d407      	bmi.n	800b94a <__cvt+0x66>
 800b93a:	9b03      	ldr	r3, [sp, #12]
 800b93c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b93e:	1a1b      	subs	r3, r3, r0
 800b940:	6013      	str	r3, [r2, #0]
 800b942:	b005      	add	sp, #20
 800b944:	ecbd 8b02 	vpop	{d8}
 800b948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b94a:	2d46      	cmp	r5, #70	; 0x46
 800b94c:	eb00 0204 	add.w	r2, r0, r4
 800b950:	d10c      	bne.n	800b96c <__cvt+0x88>
 800b952:	7803      	ldrb	r3, [r0, #0]
 800b954:	2b30      	cmp	r3, #48	; 0x30
 800b956:	d107      	bne.n	800b968 <__cvt+0x84>
 800b958:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b960:	bf1c      	itt	ne
 800b962:	f1c4 0401 	rsbne	r4, r4, #1
 800b966:	6034      	strne	r4, [r6, #0]
 800b968:	6833      	ldr	r3, [r6, #0]
 800b96a:	441a      	add	r2, r3
 800b96c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b974:	bf08      	it	eq
 800b976:	9203      	streq	r2, [sp, #12]
 800b978:	2130      	movs	r1, #48	; 0x30
 800b97a:	9b03      	ldr	r3, [sp, #12]
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d2dc      	bcs.n	800b93a <__cvt+0x56>
 800b980:	1c5c      	adds	r4, r3, #1
 800b982:	9403      	str	r4, [sp, #12]
 800b984:	7019      	strb	r1, [r3, #0]
 800b986:	e7f8      	b.n	800b97a <__cvt+0x96>

0800b988 <__exponent>:
 800b988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b98a:	4603      	mov	r3, r0
 800b98c:	2900      	cmp	r1, #0
 800b98e:	bfb8      	it	lt
 800b990:	4249      	neglt	r1, r1
 800b992:	f803 2b02 	strb.w	r2, [r3], #2
 800b996:	bfb4      	ite	lt
 800b998:	222d      	movlt	r2, #45	; 0x2d
 800b99a:	222b      	movge	r2, #43	; 0x2b
 800b99c:	2909      	cmp	r1, #9
 800b99e:	7042      	strb	r2, [r0, #1]
 800b9a0:	dd2a      	ble.n	800b9f8 <__exponent+0x70>
 800b9a2:	f10d 0407 	add.w	r4, sp, #7
 800b9a6:	46a4      	mov	ip, r4
 800b9a8:	270a      	movs	r7, #10
 800b9aa:	46a6      	mov	lr, r4
 800b9ac:	460a      	mov	r2, r1
 800b9ae:	fb91 f6f7 	sdiv	r6, r1, r7
 800b9b2:	fb07 1516 	mls	r5, r7, r6, r1
 800b9b6:	3530      	adds	r5, #48	; 0x30
 800b9b8:	2a63      	cmp	r2, #99	; 0x63
 800b9ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800b9be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	dcf1      	bgt.n	800b9aa <__exponent+0x22>
 800b9c6:	3130      	adds	r1, #48	; 0x30
 800b9c8:	f1ae 0502 	sub.w	r5, lr, #2
 800b9cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b9d0:	1c44      	adds	r4, r0, #1
 800b9d2:	4629      	mov	r1, r5
 800b9d4:	4561      	cmp	r1, ip
 800b9d6:	d30a      	bcc.n	800b9ee <__exponent+0x66>
 800b9d8:	f10d 0209 	add.w	r2, sp, #9
 800b9dc:	eba2 020e 	sub.w	r2, r2, lr
 800b9e0:	4565      	cmp	r5, ip
 800b9e2:	bf88      	it	hi
 800b9e4:	2200      	movhi	r2, #0
 800b9e6:	4413      	add	r3, r2
 800b9e8:	1a18      	subs	r0, r3, r0
 800b9ea:	b003      	add	sp, #12
 800b9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b9f6:	e7ed      	b.n	800b9d4 <__exponent+0x4c>
 800b9f8:	2330      	movs	r3, #48	; 0x30
 800b9fa:	3130      	adds	r1, #48	; 0x30
 800b9fc:	7083      	strb	r3, [r0, #2]
 800b9fe:	70c1      	strb	r1, [r0, #3]
 800ba00:	1d03      	adds	r3, r0, #4
 800ba02:	e7f1      	b.n	800b9e8 <__exponent+0x60>
 800ba04:	0000      	movs	r0, r0
	...

0800ba08 <_printf_float>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	b08b      	sub	sp, #44	; 0x2c
 800ba0e:	460c      	mov	r4, r1
 800ba10:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ba14:	4616      	mov	r6, r2
 800ba16:	461f      	mov	r7, r3
 800ba18:	4605      	mov	r5, r0
 800ba1a:	f001 f9b7 	bl	800cd8c <_localeconv_r>
 800ba1e:	f8d0 b000 	ldr.w	fp, [r0]
 800ba22:	4658      	mov	r0, fp
 800ba24:	f7f4 fc5c 	bl	80002e0 <strlen>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	9308      	str	r3, [sp, #32]
 800ba2c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba30:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ba34:	6822      	ldr	r2, [r4, #0]
 800ba36:	3307      	adds	r3, #7
 800ba38:	f023 0307 	bic.w	r3, r3, #7
 800ba3c:	f103 0108 	add.w	r1, r3, #8
 800ba40:	f8c8 1000 	str.w	r1, [r8]
 800ba44:	4682      	mov	sl, r0
 800ba46:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba4a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ba4e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800bcb0 <_printf_float+0x2a8>
 800ba52:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ba56:	eeb0 6bc0 	vabs.f64	d6, d0
 800ba5a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ba5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba62:	dd24      	ble.n	800baae <_printf_float+0xa6>
 800ba64:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ba68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6c:	d502      	bpl.n	800ba74 <_printf_float+0x6c>
 800ba6e:	232d      	movs	r3, #45	; 0x2d
 800ba70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba74:	4b90      	ldr	r3, [pc, #576]	; (800bcb8 <_printf_float+0x2b0>)
 800ba76:	4891      	ldr	r0, [pc, #580]	; (800bcbc <_printf_float+0x2b4>)
 800ba78:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ba7c:	bf94      	ite	ls
 800ba7e:	4698      	movls	r8, r3
 800ba80:	4680      	movhi	r8, r0
 800ba82:	2303      	movs	r3, #3
 800ba84:	6123      	str	r3, [r4, #16]
 800ba86:	f022 0204 	bic.w	r2, r2, #4
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	6022      	str	r2, [r4, #0]
 800ba8e:	9304      	str	r3, [sp, #16]
 800ba90:	9700      	str	r7, [sp, #0]
 800ba92:	4633      	mov	r3, r6
 800ba94:	aa09      	add	r2, sp, #36	; 0x24
 800ba96:	4621      	mov	r1, r4
 800ba98:	4628      	mov	r0, r5
 800ba9a:	f000 f9d3 	bl	800be44 <_printf_common>
 800ba9e:	3001      	adds	r0, #1
 800baa0:	f040 808a 	bne.w	800bbb8 <_printf_float+0x1b0>
 800baa4:	f04f 30ff 	mov.w	r0, #4294967295
 800baa8:	b00b      	add	sp, #44	; 0x2c
 800baaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baae:	eeb4 0b40 	vcmp.f64	d0, d0
 800bab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab6:	d709      	bvc.n	800bacc <_printf_float+0xc4>
 800bab8:	ee10 3a90 	vmov	r3, s1
 800babc:	2b00      	cmp	r3, #0
 800babe:	bfbc      	itt	lt
 800bac0:	232d      	movlt	r3, #45	; 0x2d
 800bac2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bac6:	487e      	ldr	r0, [pc, #504]	; (800bcc0 <_printf_float+0x2b8>)
 800bac8:	4b7e      	ldr	r3, [pc, #504]	; (800bcc4 <_printf_float+0x2bc>)
 800baca:	e7d5      	b.n	800ba78 <_printf_float+0x70>
 800bacc:	6863      	ldr	r3, [r4, #4]
 800bace:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bad2:	9104      	str	r1, [sp, #16]
 800bad4:	1c59      	adds	r1, r3, #1
 800bad6:	d13c      	bne.n	800bb52 <_printf_float+0x14a>
 800bad8:	2306      	movs	r3, #6
 800bada:	6063      	str	r3, [r4, #4]
 800badc:	2300      	movs	r3, #0
 800bade:	9303      	str	r3, [sp, #12]
 800bae0:	ab08      	add	r3, sp, #32
 800bae2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bae6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800baea:	ab07      	add	r3, sp, #28
 800baec:	6861      	ldr	r1, [r4, #4]
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	6022      	str	r2, [r4, #0]
 800baf2:	f10d 031b 	add.w	r3, sp, #27
 800baf6:	4628      	mov	r0, r5
 800baf8:	f7ff fef4 	bl	800b8e4 <__cvt>
 800bafc:	9b04      	ldr	r3, [sp, #16]
 800bafe:	9907      	ldr	r1, [sp, #28]
 800bb00:	2b47      	cmp	r3, #71	; 0x47
 800bb02:	4680      	mov	r8, r0
 800bb04:	d108      	bne.n	800bb18 <_printf_float+0x110>
 800bb06:	1cc8      	adds	r0, r1, #3
 800bb08:	db02      	blt.n	800bb10 <_printf_float+0x108>
 800bb0a:	6863      	ldr	r3, [r4, #4]
 800bb0c:	4299      	cmp	r1, r3
 800bb0e:	dd41      	ble.n	800bb94 <_printf_float+0x18c>
 800bb10:	f1a9 0902 	sub.w	r9, r9, #2
 800bb14:	fa5f f989 	uxtb.w	r9, r9
 800bb18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bb1c:	d820      	bhi.n	800bb60 <_printf_float+0x158>
 800bb1e:	3901      	subs	r1, #1
 800bb20:	464a      	mov	r2, r9
 800bb22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb26:	9107      	str	r1, [sp, #28]
 800bb28:	f7ff ff2e 	bl	800b988 <__exponent>
 800bb2c:	9a08      	ldr	r2, [sp, #32]
 800bb2e:	9004      	str	r0, [sp, #16]
 800bb30:	1813      	adds	r3, r2, r0
 800bb32:	2a01      	cmp	r2, #1
 800bb34:	6123      	str	r3, [r4, #16]
 800bb36:	dc02      	bgt.n	800bb3e <_printf_float+0x136>
 800bb38:	6822      	ldr	r2, [r4, #0]
 800bb3a:	07d2      	lsls	r2, r2, #31
 800bb3c:	d501      	bpl.n	800bb42 <_printf_float+0x13a>
 800bb3e:	3301      	adds	r3, #1
 800bb40:	6123      	str	r3, [r4, #16]
 800bb42:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d0a2      	beq.n	800ba90 <_printf_float+0x88>
 800bb4a:	232d      	movs	r3, #45	; 0x2d
 800bb4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb50:	e79e      	b.n	800ba90 <_printf_float+0x88>
 800bb52:	9904      	ldr	r1, [sp, #16]
 800bb54:	2947      	cmp	r1, #71	; 0x47
 800bb56:	d1c1      	bne.n	800badc <_printf_float+0xd4>
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1bf      	bne.n	800badc <_printf_float+0xd4>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e7bc      	b.n	800bada <_printf_float+0xd2>
 800bb60:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bb64:	d118      	bne.n	800bb98 <_printf_float+0x190>
 800bb66:	2900      	cmp	r1, #0
 800bb68:	6863      	ldr	r3, [r4, #4]
 800bb6a:	dd0b      	ble.n	800bb84 <_printf_float+0x17c>
 800bb6c:	6121      	str	r1, [r4, #16]
 800bb6e:	b913      	cbnz	r3, 800bb76 <_printf_float+0x16e>
 800bb70:	6822      	ldr	r2, [r4, #0]
 800bb72:	07d0      	lsls	r0, r2, #31
 800bb74:	d502      	bpl.n	800bb7c <_printf_float+0x174>
 800bb76:	3301      	adds	r3, #1
 800bb78:	440b      	add	r3, r1
 800bb7a:	6123      	str	r3, [r4, #16]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	65a1      	str	r1, [r4, #88]	; 0x58
 800bb80:	9304      	str	r3, [sp, #16]
 800bb82:	e7de      	b.n	800bb42 <_printf_float+0x13a>
 800bb84:	b913      	cbnz	r3, 800bb8c <_printf_float+0x184>
 800bb86:	6822      	ldr	r2, [r4, #0]
 800bb88:	07d2      	lsls	r2, r2, #31
 800bb8a:	d501      	bpl.n	800bb90 <_printf_float+0x188>
 800bb8c:	3302      	adds	r3, #2
 800bb8e:	e7f4      	b.n	800bb7a <_printf_float+0x172>
 800bb90:	2301      	movs	r3, #1
 800bb92:	e7f2      	b.n	800bb7a <_printf_float+0x172>
 800bb94:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bb98:	9b08      	ldr	r3, [sp, #32]
 800bb9a:	4299      	cmp	r1, r3
 800bb9c:	db05      	blt.n	800bbaa <_printf_float+0x1a2>
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	6121      	str	r1, [r4, #16]
 800bba2:	07d8      	lsls	r0, r3, #31
 800bba4:	d5ea      	bpl.n	800bb7c <_printf_float+0x174>
 800bba6:	1c4b      	adds	r3, r1, #1
 800bba8:	e7e7      	b.n	800bb7a <_printf_float+0x172>
 800bbaa:	2900      	cmp	r1, #0
 800bbac:	bfd4      	ite	le
 800bbae:	f1c1 0202 	rsble	r2, r1, #2
 800bbb2:	2201      	movgt	r2, #1
 800bbb4:	4413      	add	r3, r2
 800bbb6:	e7e0      	b.n	800bb7a <_printf_float+0x172>
 800bbb8:	6823      	ldr	r3, [r4, #0]
 800bbba:	055a      	lsls	r2, r3, #21
 800bbbc:	d407      	bmi.n	800bbce <_printf_float+0x1c6>
 800bbbe:	6923      	ldr	r3, [r4, #16]
 800bbc0:	4642      	mov	r2, r8
 800bbc2:	4631      	mov	r1, r6
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	47b8      	blx	r7
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d12a      	bne.n	800bc22 <_printf_float+0x21a>
 800bbcc:	e76a      	b.n	800baa4 <_printf_float+0x9c>
 800bbce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bbd2:	f240 80e2 	bls.w	800bd9a <_printf_float+0x392>
 800bbd6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bbda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe2:	d133      	bne.n	800bc4c <_printf_float+0x244>
 800bbe4:	4a38      	ldr	r2, [pc, #224]	; (800bcc8 <_printf_float+0x2c0>)
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	4631      	mov	r1, r6
 800bbea:	4628      	mov	r0, r5
 800bbec:	47b8      	blx	r7
 800bbee:	3001      	adds	r0, #1
 800bbf0:	f43f af58 	beq.w	800baa4 <_printf_float+0x9c>
 800bbf4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	db02      	blt.n	800bc02 <_printf_float+0x1fa>
 800bbfc:	6823      	ldr	r3, [r4, #0]
 800bbfe:	07d8      	lsls	r0, r3, #31
 800bc00:	d50f      	bpl.n	800bc22 <_printf_float+0x21a>
 800bc02:	4653      	mov	r3, sl
 800bc04:	465a      	mov	r2, fp
 800bc06:	4631      	mov	r1, r6
 800bc08:	4628      	mov	r0, r5
 800bc0a:	47b8      	blx	r7
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	f43f af49 	beq.w	800baa4 <_printf_float+0x9c>
 800bc12:	f04f 0800 	mov.w	r8, #0
 800bc16:	f104 091a 	add.w	r9, r4, #26
 800bc1a:	9b08      	ldr	r3, [sp, #32]
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	4543      	cmp	r3, r8
 800bc20:	dc09      	bgt.n	800bc36 <_printf_float+0x22e>
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	079b      	lsls	r3, r3, #30
 800bc26:	f100 8108 	bmi.w	800be3a <_printf_float+0x432>
 800bc2a:	68e0      	ldr	r0, [r4, #12]
 800bc2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc2e:	4298      	cmp	r0, r3
 800bc30:	bfb8      	it	lt
 800bc32:	4618      	movlt	r0, r3
 800bc34:	e738      	b.n	800baa8 <_printf_float+0xa0>
 800bc36:	2301      	movs	r3, #1
 800bc38:	464a      	mov	r2, r9
 800bc3a:	4631      	mov	r1, r6
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	47b8      	blx	r7
 800bc40:	3001      	adds	r0, #1
 800bc42:	f43f af2f 	beq.w	800baa4 <_printf_float+0x9c>
 800bc46:	f108 0801 	add.w	r8, r8, #1
 800bc4a:	e7e6      	b.n	800bc1a <_printf_float+0x212>
 800bc4c:	9b07      	ldr	r3, [sp, #28]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	dc3c      	bgt.n	800bccc <_printf_float+0x2c4>
 800bc52:	4a1d      	ldr	r2, [pc, #116]	; (800bcc8 <_printf_float+0x2c0>)
 800bc54:	2301      	movs	r3, #1
 800bc56:	4631      	mov	r1, r6
 800bc58:	4628      	mov	r0, r5
 800bc5a:	47b8      	blx	r7
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	f43f af21 	beq.w	800baa4 <_printf_float+0x9c>
 800bc62:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	d102      	bne.n	800bc70 <_printf_float+0x268>
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	07d9      	lsls	r1, r3, #31
 800bc6e:	d5d8      	bpl.n	800bc22 <_printf_float+0x21a>
 800bc70:	4653      	mov	r3, sl
 800bc72:	465a      	mov	r2, fp
 800bc74:	4631      	mov	r1, r6
 800bc76:	4628      	mov	r0, r5
 800bc78:	47b8      	blx	r7
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	f43f af12 	beq.w	800baa4 <_printf_float+0x9c>
 800bc80:	f04f 0900 	mov.w	r9, #0
 800bc84:	f104 0a1a 	add.w	sl, r4, #26
 800bc88:	9b07      	ldr	r3, [sp, #28]
 800bc8a:	425b      	negs	r3, r3
 800bc8c:	454b      	cmp	r3, r9
 800bc8e:	dc01      	bgt.n	800bc94 <_printf_float+0x28c>
 800bc90:	9b08      	ldr	r3, [sp, #32]
 800bc92:	e795      	b.n	800bbc0 <_printf_float+0x1b8>
 800bc94:	2301      	movs	r3, #1
 800bc96:	4652      	mov	r2, sl
 800bc98:	4631      	mov	r1, r6
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	47b8      	blx	r7
 800bc9e:	3001      	adds	r0, #1
 800bca0:	f43f af00 	beq.w	800baa4 <_printf_float+0x9c>
 800bca4:	f109 0901 	add.w	r9, r9, #1
 800bca8:	e7ee      	b.n	800bc88 <_printf_float+0x280>
 800bcaa:	bf00      	nop
 800bcac:	f3af 8000 	nop.w
 800bcb0:	ffffffff 	.word	0xffffffff
 800bcb4:	7fefffff 	.word	0x7fefffff
 800bcb8:	0800e1c4 	.word	0x0800e1c4
 800bcbc:	0800e1c8 	.word	0x0800e1c8
 800bcc0:	0800e1d0 	.word	0x0800e1d0
 800bcc4:	0800e1cc 	.word	0x0800e1cc
 800bcc8:	0800e1d4 	.word	0x0800e1d4
 800bccc:	9a08      	ldr	r2, [sp, #32]
 800bcce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	bfa8      	it	ge
 800bcd4:	461a      	movge	r2, r3
 800bcd6:	2a00      	cmp	r2, #0
 800bcd8:	4691      	mov	r9, r2
 800bcda:	dc38      	bgt.n	800bd4e <_printf_float+0x346>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	9305      	str	r3, [sp, #20]
 800bce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bce4:	f104 021a 	add.w	r2, r4, #26
 800bce8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bcea:	9905      	ldr	r1, [sp, #20]
 800bcec:	9304      	str	r3, [sp, #16]
 800bcee:	eba3 0309 	sub.w	r3, r3, r9
 800bcf2:	428b      	cmp	r3, r1
 800bcf4:	dc33      	bgt.n	800bd5e <_printf_float+0x356>
 800bcf6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	db3c      	blt.n	800bd78 <_printf_float+0x370>
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	07da      	lsls	r2, r3, #31
 800bd02:	d439      	bmi.n	800bd78 <_printf_float+0x370>
 800bd04:	9a08      	ldr	r2, [sp, #32]
 800bd06:	9b04      	ldr	r3, [sp, #16]
 800bd08:	9907      	ldr	r1, [sp, #28]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	eba2 0901 	sub.w	r9, r2, r1
 800bd10:	4599      	cmp	r9, r3
 800bd12:	bfa8      	it	ge
 800bd14:	4699      	movge	r9, r3
 800bd16:	f1b9 0f00 	cmp.w	r9, #0
 800bd1a:	dc35      	bgt.n	800bd88 <_printf_float+0x380>
 800bd1c:	f04f 0800 	mov.w	r8, #0
 800bd20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd24:	f104 0a1a 	add.w	sl, r4, #26
 800bd28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bd2c:	1a9b      	subs	r3, r3, r2
 800bd2e:	eba3 0309 	sub.w	r3, r3, r9
 800bd32:	4543      	cmp	r3, r8
 800bd34:	f77f af75 	ble.w	800bc22 <_printf_float+0x21a>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	4652      	mov	r2, sl
 800bd3c:	4631      	mov	r1, r6
 800bd3e:	4628      	mov	r0, r5
 800bd40:	47b8      	blx	r7
 800bd42:	3001      	adds	r0, #1
 800bd44:	f43f aeae 	beq.w	800baa4 <_printf_float+0x9c>
 800bd48:	f108 0801 	add.w	r8, r8, #1
 800bd4c:	e7ec      	b.n	800bd28 <_printf_float+0x320>
 800bd4e:	4613      	mov	r3, r2
 800bd50:	4631      	mov	r1, r6
 800bd52:	4642      	mov	r2, r8
 800bd54:	4628      	mov	r0, r5
 800bd56:	47b8      	blx	r7
 800bd58:	3001      	adds	r0, #1
 800bd5a:	d1bf      	bne.n	800bcdc <_printf_float+0x2d4>
 800bd5c:	e6a2      	b.n	800baa4 <_printf_float+0x9c>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	4631      	mov	r1, r6
 800bd62:	4628      	mov	r0, r5
 800bd64:	9204      	str	r2, [sp, #16]
 800bd66:	47b8      	blx	r7
 800bd68:	3001      	adds	r0, #1
 800bd6a:	f43f ae9b 	beq.w	800baa4 <_printf_float+0x9c>
 800bd6e:	9b05      	ldr	r3, [sp, #20]
 800bd70:	9a04      	ldr	r2, [sp, #16]
 800bd72:	3301      	adds	r3, #1
 800bd74:	9305      	str	r3, [sp, #20]
 800bd76:	e7b7      	b.n	800bce8 <_printf_float+0x2e0>
 800bd78:	4653      	mov	r3, sl
 800bd7a:	465a      	mov	r2, fp
 800bd7c:	4631      	mov	r1, r6
 800bd7e:	4628      	mov	r0, r5
 800bd80:	47b8      	blx	r7
 800bd82:	3001      	adds	r0, #1
 800bd84:	d1be      	bne.n	800bd04 <_printf_float+0x2fc>
 800bd86:	e68d      	b.n	800baa4 <_printf_float+0x9c>
 800bd88:	9a04      	ldr	r2, [sp, #16]
 800bd8a:	464b      	mov	r3, r9
 800bd8c:	4442      	add	r2, r8
 800bd8e:	4631      	mov	r1, r6
 800bd90:	4628      	mov	r0, r5
 800bd92:	47b8      	blx	r7
 800bd94:	3001      	adds	r0, #1
 800bd96:	d1c1      	bne.n	800bd1c <_printf_float+0x314>
 800bd98:	e684      	b.n	800baa4 <_printf_float+0x9c>
 800bd9a:	9a08      	ldr	r2, [sp, #32]
 800bd9c:	2a01      	cmp	r2, #1
 800bd9e:	dc01      	bgt.n	800bda4 <_printf_float+0x39c>
 800bda0:	07db      	lsls	r3, r3, #31
 800bda2:	d537      	bpl.n	800be14 <_printf_float+0x40c>
 800bda4:	2301      	movs	r3, #1
 800bda6:	4642      	mov	r2, r8
 800bda8:	4631      	mov	r1, r6
 800bdaa:	4628      	mov	r0, r5
 800bdac:	47b8      	blx	r7
 800bdae:	3001      	adds	r0, #1
 800bdb0:	f43f ae78 	beq.w	800baa4 <_printf_float+0x9c>
 800bdb4:	4653      	mov	r3, sl
 800bdb6:	465a      	mov	r2, fp
 800bdb8:	4631      	mov	r1, r6
 800bdba:	4628      	mov	r0, r5
 800bdbc:	47b8      	blx	r7
 800bdbe:	3001      	adds	r0, #1
 800bdc0:	f43f ae70 	beq.w	800baa4 <_printf_float+0x9c>
 800bdc4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bdc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bdcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd0:	d01b      	beq.n	800be0a <_printf_float+0x402>
 800bdd2:	9b08      	ldr	r3, [sp, #32]
 800bdd4:	f108 0201 	add.w	r2, r8, #1
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	4631      	mov	r1, r6
 800bddc:	4628      	mov	r0, r5
 800bdde:	47b8      	blx	r7
 800bde0:	3001      	adds	r0, #1
 800bde2:	d10e      	bne.n	800be02 <_printf_float+0x3fa>
 800bde4:	e65e      	b.n	800baa4 <_printf_float+0x9c>
 800bde6:	2301      	movs	r3, #1
 800bde8:	464a      	mov	r2, r9
 800bdea:	4631      	mov	r1, r6
 800bdec:	4628      	mov	r0, r5
 800bdee:	47b8      	blx	r7
 800bdf0:	3001      	adds	r0, #1
 800bdf2:	f43f ae57 	beq.w	800baa4 <_printf_float+0x9c>
 800bdf6:	f108 0801 	add.w	r8, r8, #1
 800bdfa:	9b08      	ldr	r3, [sp, #32]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	4543      	cmp	r3, r8
 800be00:	dcf1      	bgt.n	800bde6 <_printf_float+0x3de>
 800be02:	9b04      	ldr	r3, [sp, #16]
 800be04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be08:	e6db      	b.n	800bbc2 <_printf_float+0x1ba>
 800be0a:	f04f 0800 	mov.w	r8, #0
 800be0e:	f104 091a 	add.w	r9, r4, #26
 800be12:	e7f2      	b.n	800bdfa <_printf_float+0x3f2>
 800be14:	2301      	movs	r3, #1
 800be16:	4642      	mov	r2, r8
 800be18:	e7df      	b.n	800bdda <_printf_float+0x3d2>
 800be1a:	2301      	movs	r3, #1
 800be1c:	464a      	mov	r2, r9
 800be1e:	4631      	mov	r1, r6
 800be20:	4628      	mov	r0, r5
 800be22:	47b8      	blx	r7
 800be24:	3001      	adds	r0, #1
 800be26:	f43f ae3d 	beq.w	800baa4 <_printf_float+0x9c>
 800be2a:	f108 0801 	add.w	r8, r8, #1
 800be2e:	68e3      	ldr	r3, [r4, #12]
 800be30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be32:	1a5b      	subs	r3, r3, r1
 800be34:	4543      	cmp	r3, r8
 800be36:	dcf0      	bgt.n	800be1a <_printf_float+0x412>
 800be38:	e6f7      	b.n	800bc2a <_printf_float+0x222>
 800be3a:	f04f 0800 	mov.w	r8, #0
 800be3e:	f104 0919 	add.w	r9, r4, #25
 800be42:	e7f4      	b.n	800be2e <_printf_float+0x426>

0800be44 <_printf_common>:
 800be44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be48:	4616      	mov	r6, r2
 800be4a:	4699      	mov	r9, r3
 800be4c:	688a      	ldr	r2, [r1, #8]
 800be4e:	690b      	ldr	r3, [r1, #16]
 800be50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be54:	4293      	cmp	r3, r2
 800be56:	bfb8      	it	lt
 800be58:	4613      	movlt	r3, r2
 800be5a:	6033      	str	r3, [r6, #0]
 800be5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be60:	4607      	mov	r7, r0
 800be62:	460c      	mov	r4, r1
 800be64:	b10a      	cbz	r2, 800be6a <_printf_common+0x26>
 800be66:	3301      	adds	r3, #1
 800be68:	6033      	str	r3, [r6, #0]
 800be6a:	6823      	ldr	r3, [r4, #0]
 800be6c:	0699      	lsls	r1, r3, #26
 800be6e:	bf42      	ittt	mi
 800be70:	6833      	ldrmi	r3, [r6, #0]
 800be72:	3302      	addmi	r3, #2
 800be74:	6033      	strmi	r3, [r6, #0]
 800be76:	6825      	ldr	r5, [r4, #0]
 800be78:	f015 0506 	ands.w	r5, r5, #6
 800be7c:	d106      	bne.n	800be8c <_printf_common+0x48>
 800be7e:	f104 0a19 	add.w	sl, r4, #25
 800be82:	68e3      	ldr	r3, [r4, #12]
 800be84:	6832      	ldr	r2, [r6, #0]
 800be86:	1a9b      	subs	r3, r3, r2
 800be88:	42ab      	cmp	r3, r5
 800be8a:	dc26      	bgt.n	800beda <_printf_common+0x96>
 800be8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be90:	1e13      	subs	r3, r2, #0
 800be92:	6822      	ldr	r2, [r4, #0]
 800be94:	bf18      	it	ne
 800be96:	2301      	movne	r3, #1
 800be98:	0692      	lsls	r2, r2, #26
 800be9a:	d42b      	bmi.n	800bef4 <_printf_common+0xb0>
 800be9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bea0:	4649      	mov	r1, r9
 800bea2:	4638      	mov	r0, r7
 800bea4:	47c0      	blx	r8
 800bea6:	3001      	adds	r0, #1
 800bea8:	d01e      	beq.n	800bee8 <_printf_common+0xa4>
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	68e5      	ldr	r5, [r4, #12]
 800beae:	6832      	ldr	r2, [r6, #0]
 800beb0:	f003 0306 	and.w	r3, r3, #6
 800beb4:	2b04      	cmp	r3, #4
 800beb6:	bf08      	it	eq
 800beb8:	1aad      	subeq	r5, r5, r2
 800beba:	68a3      	ldr	r3, [r4, #8]
 800bebc:	6922      	ldr	r2, [r4, #16]
 800bebe:	bf0c      	ite	eq
 800bec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bec4:	2500      	movne	r5, #0
 800bec6:	4293      	cmp	r3, r2
 800bec8:	bfc4      	itt	gt
 800beca:	1a9b      	subgt	r3, r3, r2
 800becc:	18ed      	addgt	r5, r5, r3
 800bece:	2600      	movs	r6, #0
 800bed0:	341a      	adds	r4, #26
 800bed2:	42b5      	cmp	r5, r6
 800bed4:	d11a      	bne.n	800bf0c <_printf_common+0xc8>
 800bed6:	2000      	movs	r0, #0
 800bed8:	e008      	b.n	800beec <_printf_common+0xa8>
 800beda:	2301      	movs	r3, #1
 800bedc:	4652      	mov	r2, sl
 800bede:	4649      	mov	r1, r9
 800bee0:	4638      	mov	r0, r7
 800bee2:	47c0      	blx	r8
 800bee4:	3001      	adds	r0, #1
 800bee6:	d103      	bne.n	800bef0 <_printf_common+0xac>
 800bee8:	f04f 30ff 	mov.w	r0, #4294967295
 800beec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bef0:	3501      	adds	r5, #1
 800bef2:	e7c6      	b.n	800be82 <_printf_common+0x3e>
 800bef4:	18e1      	adds	r1, r4, r3
 800bef6:	1c5a      	adds	r2, r3, #1
 800bef8:	2030      	movs	r0, #48	; 0x30
 800befa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800befe:	4422      	add	r2, r4
 800bf00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf08:	3302      	adds	r3, #2
 800bf0a:	e7c7      	b.n	800be9c <_printf_common+0x58>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	4622      	mov	r2, r4
 800bf10:	4649      	mov	r1, r9
 800bf12:	4638      	mov	r0, r7
 800bf14:	47c0      	blx	r8
 800bf16:	3001      	adds	r0, #1
 800bf18:	d0e6      	beq.n	800bee8 <_printf_common+0xa4>
 800bf1a:	3601      	adds	r6, #1
 800bf1c:	e7d9      	b.n	800bed2 <_printf_common+0x8e>
	...

0800bf20 <_printf_i>:
 800bf20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf24:	460c      	mov	r4, r1
 800bf26:	4691      	mov	r9, r2
 800bf28:	7e27      	ldrb	r7, [r4, #24]
 800bf2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf2c:	2f78      	cmp	r7, #120	; 0x78
 800bf2e:	4680      	mov	r8, r0
 800bf30:	469a      	mov	sl, r3
 800bf32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf36:	d807      	bhi.n	800bf48 <_printf_i+0x28>
 800bf38:	2f62      	cmp	r7, #98	; 0x62
 800bf3a:	d80a      	bhi.n	800bf52 <_printf_i+0x32>
 800bf3c:	2f00      	cmp	r7, #0
 800bf3e:	f000 80d8 	beq.w	800c0f2 <_printf_i+0x1d2>
 800bf42:	2f58      	cmp	r7, #88	; 0x58
 800bf44:	f000 80a3 	beq.w	800c08e <_printf_i+0x16e>
 800bf48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf50:	e03a      	b.n	800bfc8 <_printf_i+0xa8>
 800bf52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf56:	2b15      	cmp	r3, #21
 800bf58:	d8f6      	bhi.n	800bf48 <_printf_i+0x28>
 800bf5a:	a001      	add	r0, pc, #4	; (adr r0, 800bf60 <_printf_i+0x40>)
 800bf5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bf60:	0800bfb9 	.word	0x0800bfb9
 800bf64:	0800bfcd 	.word	0x0800bfcd
 800bf68:	0800bf49 	.word	0x0800bf49
 800bf6c:	0800bf49 	.word	0x0800bf49
 800bf70:	0800bf49 	.word	0x0800bf49
 800bf74:	0800bf49 	.word	0x0800bf49
 800bf78:	0800bfcd 	.word	0x0800bfcd
 800bf7c:	0800bf49 	.word	0x0800bf49
 800bf80:	0800bf49 	.word	0x0800bf49
 800bf84:	0800bf49 	.word	0x0800bf49
 800bf88:	0800bf49 	.word	0x0800bf49
 800bf8c:	0800c0d9 	.word	0x0800c0d9
 800bf90:	0800bffd 	.word	0x0800bffd
 800bf94:	0800c0bb 	.word	0x0800c0bb
 800bf98:	0800bf49 	.word	0x0800bf49
 800bf9c:	0800bf49 	.word	0x0800bf49
 800bfa0:	0800c0fb 	.word	0x0800c0fb
 800bfa4:	0800bf49 	.word	0x0800bf49
 800bfa8:	0800bffd 	.word	0x0800bffd
 800bfac:	0800bf49 	.word	0x0800bf49
 800bfb0:	0800bf49 	.word	0x0800bf49
 800bfb4:	0800c0c3 	.word	0x0800c0c3
 800bfb8:	680b      	ldr	r3, [r1, #0]
 800bfba:	1d1a      	adds	r2, r3, #4
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	600a      	str	r2, [r1, #0]
 800bfc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bfc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfc8:	2301      	movs	r3, #1
 800bfca:	e0a3      	b.n	800c114 <_printf_i+0x1f4>
 800bfcc:	6825      	ldr	r5, [r4, #0]
 800bfce:	6808      	ldr	r0, [r1, #0]
 800bfd0:	062e      	lsls	r6, r5, #24
 800bfd2:	f100 0304 	add.w	r3, r0, #4
 800bfd6:	d50a      	bpl.n	800bfee <_printf_i+0xce>
 800bfd8:	6805      	ldr	r5, [r0, #0]
 800bfda:	600b      	str	r3, [r1, #0]
 800bfdc:	2d00      	cmp	r5, #0
 800bfde:	da03      	bge.n	800bfe8 <_printf_i+0xc8>
 800bfe0:	232d      	movs	r3, #45	; 0x2d
 800bfe2:	426d      	negs	r5, r5
 800bfe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfe8:	485e      	ldr	r0, [pc, #376]	; (800c164 <_printf_i+0x244>)
 800bfea:	230a      	movs	r3, #10
 800bfec:	e019      	b.n	800c022 <_printf_i+0x102>
 800bfee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bff2:	6805      	ldr	r5, [r0, #0]
 800bff4:	600b      	str	r3, [r1, #0]
 800bff6:	bf18      	it	ne
 800bff8:	b22d      	sxthne	r5, r5
 800bffa:	e7ef      	b.n	800bfdc <_printf_i+0xbc>
 800bffc:	680b      	ldr	r3, [r1, #0]
 800bffe:	6825      	ldr	r5, [r4, #0]
 800c000:	1d18      	adds	r0, r3, #4
 800c002:	6008      	str	r0, [r1, #0]
 800c004:	0628      	lsls	r0, r5, #24
 800c006:	d501      	bpl.n	800c00c <_printf_i+0xec>
 800c008:	681d      	ldr	r5, [r3, #0]
 800c00a:	e002      	b.n	800c012 <_printf_i+0xf2>
 800c00c:	0669      	lsls	r1, r5, #25
 800c00e:	d5fb      	bpl.n	800c008 <_printf_i+0xe8>
 800c010:	881d      	ldrh	r5, [r3, #0]
 800c012:	4854      	ldr	r0, [pc, #336]	; (800c164 <_printf_i+0x244>)
 800c014:	2f6f      	cmp	r7, #111	; 0x6f
 800c016:	bf0c      	ite	eq
 800c018:	2308      	moveq	r3, #8
 800c01a:	230a      	movne	r3, #10
 800c01c:	2100      	movs	r1, #0
 800c01e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c022:	6866      	ldr	r6, [r4, #4]
 800c024:	60a6      	str	r6, [r4, #8]
 800c026:	2e00      	cmp	r6, #0
 800c028:	bfa2      	ittt	ge
 800c02a:	6821      	ldrge	r1, [r4, #0]
 800c02c:	f021 0104 	bicge.w	r1, r1, #4
 800c030:	6021      	strge	r1, [r4, #0]
 800c032:	b90d      	cbnz	r5, 800c038 <_printf_i+0x118>
 800c034:	2e00      	cmp	r6, #0
 800c036:	d04d      	beq.n	800c0d4 <_printf_i+0x1b4>
 800c038:	4616      	mov	r6, r2
 800c03a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c03e:	fb03 5711 	mls	r7, r3, r1, r5
 800c042:	5dc7      	ldrb	r7, [r0, r7]
 800c044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c048:	462f      	mov	r7, r5
 800c04a:	42bb      	cmp	r3, r7
 800c04c:	460d      	mov	r5, r1
 800c04e:	d9f4      	bls.n	800c03a <_printf_i+0x11a>
 800c050:	2b08      	cmp	r3, #8
 800c052:	d10b      	bne.n	800c06c <_printf_i+0x14c>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	07df      	lsls	r7, r3, #31
 800c058:	d508      	bpl.n	800c06c <_printf_i+0x14c>
 800c05a:	6923      	ldr	r3, [r4, #16]
 800c05c:	6861      	ldr	r1, [r4, #4]
 800c05e:	4299      	cmp	r1, r3
 800c060:	bfde      	ittt	le
 800c062:	2330      	movle	r3, #48	; 0x30
 800c064:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c068:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c06c:	1b92      	subs	r2, r2, r6
 800c06e:	6122      	str	r2, [r4, #16]
 800c070:	f8cd a000 	str.w	sl, [sp]
 800c074:	464b      	mov	r3, r9
 800c076:	aa03      	add	r2, sp, #12
 800c078:	4621      	mov	r1, r4
 800c07a:	4640      	mov	r0, r8
 800c07c:	f7ff fee2 	bl	800be44 <_printf_common>
 800c080:	3001      	adds	r0, #1
 800c082:	d14c      	bne.n	800c11e <_printf_i+0x1fe>
 800c084:	f04f 30ff 	mov.w	r0, #4294967295
 800c088:	b004      	add	sp, #16
 800c08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c08e:	4835      	ldr	r0, [pc, #212]	; (800c164 <_printf_i+0x244>)
 800c090:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	680e      	ldr	r6, [r1, #0]
 800c098:	061f      	lsls	r7, r3, #24
 800c09a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c09e:	600e      	str	r6, [r1, #0]
 800c0a0:	d514      	bpl.n	800c0cc <_printf_i+0x1ac>
 800c0a2:	07d9      	lsls	r1, r3, #31
 800c0a4:	bf44      	itt	mi
 800c0a6:	f043 0320 	orrmi.w	r3, r3, #32
 800c0aa:	6023      	strmi	r3, [r4, #0]
 800c0ac:	b91d      	cbnz	r5, 800c0b6 <_printf_i+0x196>
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	f023 0320 	bic.w	r3, r3, #32
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	2310      	movs	r3, #16
 800c0b8:	e7b0      	b.n	800c01c <_printf_i+0xfc>
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	f043 0320 	orr.w	r3, r3, #32
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	2378      	movs	r3, #120	; 0x78
 800c0c4:	4828      	ldr	r0, [pc, #160]	; (800c168 <_printf_i+0x248>)
 800c0c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c0ca:	e7e3      	b.n	800c094 <_printf_i+0x174>
 800c0cc:	065e      	lsls	r6, r3, #25
 800c0ce:	bf48      	it	mi
 800c0d0:	b2ad      	uxthmi	r5, r5
 800c0d2:	e7e6      	b.n	800c0a2 <_printf_i+0x182>
 800c0d4:	4616      	mov	r6, r2
 800c0d6:	e7bb      	b.n	800c050 <_printf_i+0x130>
 800c0d8:	680b      	ldr	r3, [r1, #0]
 800c0da:	6826      	ldr	r6, [r4, #0]
 800c0dc:	6960      	ldr	r0, [r4, #20]
 800c0de:	1d1d      	adds	r5, r3, #4
 800c0e0:	600d      	str	r5, [r1, #0]
 800c0e2:	0635      	lsls	r5, r6, #24
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	d501      	bpl.n	800c0ec <_printf_i+0x1cc>
 800c0e8:	6018      	str	r0, [r3, #0]
 800c0ea:	e002      	b.n	800c0f2 <_printf_i+0x1d2>
 800c0ec:	0671      	lsls	r1, r6, #25
 800c0ee:	d5fb      	bpl.n	800c0e8 <_printf_i+0x1c8>
 800c0f0:	8018      	strh	r0, [r3, #0]
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	6123      	str	r3, [r4, #16]
 800c0f6:	4616      	mov	r6, r2
 800c0f8:	e7ba      	b.n	800c070 <_printf_i+0x150>
 800c0fa:	680b      	ldr	r3, [r1, #0]
 800c0fc:	1d1a      	adds	r2, r3, #4
 800c0fe:	600a      	str	r2, [r1, #0]
 800c100:	681e      	ldr	r6, [r3, #0]
 800c102:	6862      	ldr	r2, [r4, #4]
 800c104:	2100      	movs	r1, #0
 800c106:	4630      	mov	r0, r6
 800c108:	f7f4 f8f2 	bl	80002f0 <memchr>
 800c10c:	b108      	cbz	r0, 800c112 <_printf_i+0x1f2>
 800c10e:	1b80      	subs	r0, r0, r6
 800c110:	6060      	str	r0, [r4, #4]
 800c112:	6863      	ldr	r3, [r4, #4]
 800c114:	6123      	str	r3, [r4, #16]
 800c116:	2300      	movs	r3, #0
 800c118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c11c:	e7a8      	b.n	800c070 <_printf_i+0x150>
 800c11e:	6923      	ldr	r3, [r4, #16]
 800c120:	4632      	mov	r2, r6
 800c122:	4649      	mov	r1, r9
 800c124:	4640      	mov	r0, r8
 800c126:	47d0      	blx	sl
 800c128:	3001      	adds	r0, #1
 800c12a:	d0ab      	beq.n	800c084 <_printf_i+0x164>
 800c12c:	6823      	ldr	r3, [r4, #0]
 800c12e:	079b      	lsls	r3, r3, #30
 800c130:	d413      	bmi.n	800c15a <_printf_i+0x23a>
 800c132:	68e0      	ldr	r0, [r4, #12]
 800c134:	9b03      	ldr	r3, [sp, #12]
 800c136:	4298      	cmp	r0, r3
 800c138:	bfb8      	it	lt
 800c13a:	4618      	movlt	r0, r3
 800c13c:	e7a4      	b.n	800c088 <_printf_i+0x168>
 800c13e:	2301      	movs	r3, #1
 800c140:	4632      	mov	r2, r6
 800c142:	4649      	mov	r1, r9
 800c144:	4640      	mov	r0, r8
 800c146:	47d0      	blx	sl
 800c148:	3001      	adds	r0, #1
 800c14a:	d09b      	beq.n	800c084 <_printf_i+0x164>
 800c14c:	3501      	adds	r5, #1
 800c14e:	68e3      	ldr	r3, [r4, #12]
 800c150:	9903      	ldr	r1, [sp, #12]
 800c152:	1a5b      	subs	r3, r3, r1
 800c154:	42ab      	cmp	r3, r5
 800c156:	dcf2      	bgt.n	800c13e <_printf_i+0x21e>
 800c158:	e7eb      	b.n	800c132 <_printf_i+0x212>
 800c15a:	2500      	movs	r5, #0
 800c15c:	f104 0619 	add.w	r6, r4, #25
 800c160:	e7f5      	b.n	800c14e <_printf_i+0x22e>
 800c162:	bf00      	nop
 800c164:	0800e1d6 	.word	0x0800e1d6
 800c168:	0800e1e7 	.word	0x0800e1e7

0800c16c <quorem>:
 800c16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c170:	6903      	ldr	r3, [r0, #16]
 800c172:	690c      	ldr	r4, [r1, #16]
 800c174:	42a3      	cmp	r3, r4
 800c176:	4607      	mov	r7, r0
 800c178:	f2c0 8081 	blt.w	800c27e <quorem+0x112>
 800c17c:	3c01      	subs	r4, #1
 800c17e:	f101 0814 	add.w	r8, r1, #20
 800c182:	f100 0514 	add.w	r5, r0, #20
 800c186:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c18a:	9301      	str	r3, [sp, #4]
 800c18c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c194:	3301      	adds	r3, #1
 800c196:	429a      	cmp	r2, r3
 800c198:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c19c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c1a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1a4:	d331      	bcc.n	800c20a <quorem+0x9e>
 800c1a6:	f04f 0e00 	mov.w	lr, #0
 800c1aa:	4640      	mov	r0, r8
 800c1ac:	46ac      	mov	ip, r5
 800c1ae:	46f2      	mov	sl, lr
 800c1b0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c1b4:	b293      	uxth	r3, r2
 800c1b6:	fb06 e303 	mla	r3, r6, r3, lr
 800c1ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	ebaa 0303 	sub.w	r3, sl, r3
 800c1c4:	0c12      	lsrs	r2, r2, #16
 800c1c6:	f8dc a000 	ldr.w	sl, [ip]
 800c1ca:	fb06 e202 	mla	r2, r6, r2, lr
 800c1ce:	fa13 f38a 	uxtah	r3, r3, sl
 800c1d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c1d6:	fa1f fa82 	uxth.w	sl, r2
 800c1da:	f8dc 2000 	ldr.w	r2, [ip]
 800c1de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c1e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1ec:	4581      	cmp	r9, r0
 800c1ee:	f84c 3b04 	str.w	r3, [ip], #4
 800c1f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c1f6:	d2db      	bcs.n	800c1b0 <quorem+0x44>
 800c1f8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c1fc:	b92b      	cbnz	r3, 800c20a <quorem+0x9e>
 800c1fe:	9b01      	ldr	r3, [sp, #4]
 800c200:	3b04      	subs	r3, #4
 800c202:	429d      	cmp	r5, r3
 800c204:	461a      	mov	r2, r3
 800c206:	d32e      	bcc.n	800c266 <quorem+0xfa>
 800c208:	613c      	str	r4, [r7, #16]
 800c20a:	4638      	mov	r0, r7
 800c20c:	f001 f856 	bl	800d2bc <__mcmp>
 800c210:	2800      	cmp	r0, #0
 800c212:	db24      	blt.n	800c25e <quorem+0xf2>
 800c214:	3601      	adds	r6, #1
 800c216:	4628      	mov	r0, r5
 800c218:	f04f 0c00 	mov.w	ip, #0
 800c21c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c220:	f8d0 e000 	ldr.w	lr, [r0]
 800c224:	b293      	uxth	r3, r2
 800c226:	ebac 0303 	sub.w	r3, ip, r3
 800c22a:	0c12      	lsrs	r2, r2, #16
 800c22c:	fa13 f38e 	uxtah	r3, r3, lr
 800c230:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c238:	b29b      	uxth	r3, r3
 800c23a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c23e:	45c1      	cmp	r9, r8
 800c240:	f840 3b04 	str.w	r3, [r0], #4
 800c244:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c248:	d2e8      	bcs.n	800c21c <quorem+0xb0>
 800c24a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c24e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c252:	b922      	cbnz	r2, 800c25e <quorem+0xf2>
 800c254:	3b04      	subs	r3, #4
 800c256:	429d      	cmp	r5, r3
 800c258:	461a      	mov	r2, r3
 800c25a:	d30a      	bcc.n	800c272 <quorem+0x106>
 800c25c:	613c      	str	r4, [r7, #16]
 800c25e:	4630      	mov	r0, r6
 800c260:	b003      	add	sp, #12
 800c262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c266:	6812      	ldr	r2, [r2, #0]
 800c268:	3b04      	subs	r3, #4
 800c26a:	2a00      	cmp	r2, #0
 800c26c:	d1cc      	bne.n	800c208 <quorem+0x9c>
 800c26e:	3c01      	subs	r4, #1
 800c270:	e7c7      	b.n	800c202 <quorem+0x96>
 800c272:	6812      	ldr	r2, [r2, #0]
 800c274:	3b04      	subs	r3, #4
 800c276:	2a00      	cmp	r2, #0
 800c278:	d1f0      	bne.n	800c25c <quorem+0xf0>
 800c27a:	3c01      	subs	r4, #1
 800c27c:	e7eb      	b.n	800c256 <quorem+0xea>
 800c27e:	2000      	movs	r0, #0
 800c280:	e7ee      	b.n	800c260 <quorem+0xf4>
 800c282:	0000      	movs	r0, r0
 800c284:	0000      	movs	r0, r0
	...

0800c288 <_dtoa_r>:
 800c288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28c:	ec59 8b10 	vmov	r8, r9, d0
 800c290:	b095      	sub	sp, #84	; 0x54
 800c292:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c294:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c296:	9107      	str	r1, [sp, #28]
 800c298:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c29c:	4606      	mov	r6, r0
 800c29e:	9209      	str	r2, [sp, #36]	; 0x24
 800c2a0:	9310      	str	r3, [sp, #64]	; 0x40
 800c2a2:	b975      	cbnz	r5, 800c2c2 <_dtoa_r+0x3a>
 800c2a4:	2010      	movs	r0, #16
 800c2a6:	f000 fd75 	bl	800cd94 <malloc>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	6270      	str	r0, [r6, #36]	; 0x24
 800c2ae:	b920      	cbnz	r0, 800c2ba <_dtoa_r+0x32>
 800c2b0:	4bab      	ldr	r3, [pc, #684]	; (800c560 <_dtoa_r+0x2d8>)
 800c2b2:	21ea      	movs	r1, #234	; 0xea
 800c2b4:	48ab      	ldr	r0, [pc, #684]	; (800c564 <_dtoa_r+0x2dc>)
 800c2b6:	f001 f9cb 	bl	800d650 <__assert_func>
 800c2ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c2be:	6005      	str	r5, [r0, #0]
 800c2c0:	60c5      	str	r5, [r0, #12]
 800c2c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c2c4:	6819      	ldr	r1, [r3, #0]
 800c2c6:	b151      	cbz	r1, 800c2de <_dtoa_r+0x56>
 800c2c8:	685a      	ldr	r2, [r3, #4]
 800c2ca:	604a      	str	r2, [r1, #4]
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	4093      	lsls	r3, r2
 800c2d0:	608b      	str	r3, [r1, #8]
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f000 fdb4 	bl	800ce40 <_Bfree>
 800c2d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c2da:	2200      	movs	r2, #0
 800c2dc:	601a      	str	r2, [r3, #0]
 800c2de:	f1b9 0300 	subs.w	r3, r9, #0
 800c2e2:	bfbb      	ittet	lt
 800c2e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c2e8:	9303      	strlt	r3, [sp, #12]
 800c2ea:	2300      	movge	r3, #0
 800c2ec:	2201      	movlt	r2, #1
 800c2ee:	bfac      	ite	ge
 800c2f0:	6023      	strge	r3, [r4, #0]
 800c2f2:	6022      	strlt	r2, [r4, #0]
 800c2f4:	4b9c      	ldr	r3, [pc, #624]	; (800c568 <_dtoa_r+0x2e0>)
 800c2f6:	9c03      	ldr	r4, [sp, #12]
 800c2f8:	43a3      	bics	r3, r4
 800c2fa:	d11a      	bne.n	800c332 <_dtoa_r+0xaa>
 800c2fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c2fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800c302:	6013      	str	r3, [r2, #0]
 800c304:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c308:	ea53 0308 	orrs.w	r3, r3, r8
 800c30c:	f000 8512 	beq.w	800cd34 <_dtoa_r+0xaac>
 800c310:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c312:	b953      	cbnz	r3, 800c32a <_dtoa_r+0xa2>
 800c314:	4b95      	ldr	r3, [pc, #596]	; (800c56c <_dtoa_r+0x2e4>)
 800c316:	e01f      	b.n	800c358 <_dtoa_r+0xd0>
 800c318:	4b95      	ldr	r3, [pc, #596]	; (800c570 <_dtoa_r+0x2e8>)
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	3308      	adds	r3, #8
 800c31e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c320:	6013      	str	r3, [r2, #0]
 800c322:	9800      	ldr	r0, [sp, #0]
 800c324:	b015      	add	sp, #84	; 0x54
 800c326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c32a:	4b90      	ldr	r3, [pc, #576]	; (800c56c <_dtoa_r+0x2e4>)
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	3303      	adds	r3, #3
 800c330:	e7f5      	b.n	800c31e <_dtoa_r+0x96>
 800c332:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c336:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c33e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c342:	d10b      	bne.n	800c35c <_dtoa_r+0xd4>
 800c344:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c346:	2301      	movs	r3, #1
 800c348:	6013      	str	r3, [r2, #0]
 800c34a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f000 84ee 	beq.w	800cd2e <_dtoa_r+0xaa6>
 800c352:	4888      	ldr	r0, [pc, #544]	; (800c574 <_dtoa_r+0x2ec>)
 800c354:	6018      	str	r0, [r3, #0]
 800c356:	1e43      	subs	r3, r0, #1
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	e7e2      	b.n	800c322 <_dtoa_r+0x9a>
 800c35c:	a913      	add	r1, sp, #76	; 0x4c
 800c35e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c362:	aa12      	add	r2, sp, #72	; 0x48
 800c364:	4630      	mov	r0, r6
 800c366:	f001 f84d 	bl	800d404 <__d2b>
 800c36a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800c36e:	4605      	mov	r5, r0
 800c370:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c372:	2900      	cmp	r1, #0
 800c374:	d047      	beq.n	800c406 <_dtoa_r+0x17e>
 800c376:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c378:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c37c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c380:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800c384:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c388:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c38c:	2400      	movs	r4, #0
 800c38e:	ec43 2b16 	vmov	d6, r2, r3
 800c392:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c396:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800c548 <_dtoa_r+0x2c0>
 800c39a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c39e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800c550 <_dtoa_r+0x2c8>
 800c3a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c3a6:	eeb0 7b46 	vmov.f64	d7, d6
 800c3aa:	ee06 1a90 	vmov	s13, r1
 800c3ae:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800c3b2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800c558 <_dtoa_r+0x2d0>
 800c3b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c3ba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c3be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c6:	ee16 ba90 	vmov	fp, s13
 800c3ca:	9411      	str	r4, [sp, #68]	; 0x44
 800c3cc:	d508      	bpl.n	800c3e0 <_dtoa_r+0x158>
 800c3ce:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c3d2:	eeb4 6b47 	vcmp.f64	d6, d7
 800c3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3da:	bf18      	it	ne
 800c3dc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c3e0:	f1bb 0f16 	cmp.w	fp, #22
 800c3e4:	d832      	bhi.n	800c44c <_dtoa_r+0x1c4>
 800c3e6:	4b64      	ldr	r3, [pc, #400]	; (800c578 <_dtoa_r+0x2f0>)
 800c3e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c3ec:	ed93 7b00 	vldr	d7, [r3]
 800c3f0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800c3f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3fc:	d501      	bpl.n	800c402 <_dtoa_r+0x17a>
 800c3fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c402:	2300      	movs	r3, #0
 800c404:	e023      	b.n	800c44e <_dtoa_r+0x1c6>
 800c406:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c408:	4401      	add	r1, r0
 800c40a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800c40e:	2b20      	cmp	r3, #32
 800c410:	bfc3      	ittte	gt
 800c412:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c416:	fa04 f303 	lslgt.w	r3, r4, r3
 800c41a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800c41e:	f1c3 0320 	rsble	r3, r3, #32
 800c422:	bfc6      	itte	gt
 800c424:	fa28 f804 	lsrgt.w	r8, r8, r4
 800c428:	ea43 0308 	orrgt.w	r3, r3, r8
 800c42c:	fa08 f303 	lslle.w	r3, r8, r3
 800c430:	ee07 3a90 	vmov	s15, r3
 800c434:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c438:	3901      	subs	r1, #1
 800c43a:	ed8d 7b00 	vstr	d7, [sp]
 800c43e:	9c01      	ldr	r4, [sp, #4]
 800c440:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c444:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800c448:	2401      	movs	r4, #1
 800c44a:	e7a0      	b.n	800c38e <_dtoa_r+0x106>
 800c44c:	2301      	movs	r3, #1
 800c44e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c450:	1a43      	subs	r3, r0, r1
 800c452:	1e5a      	subs	r2, r3, #1
 800c454:	bf45      	ittet	mi
 800c456:	f1c3 0301 	rsbmi	r3, r3, #1
 800c45a:	9305      	strmi	r3, [sp, #20]
 800c45c:	2300      	movpl	r3, #0
 800c45e:	2300      	movmi	r3, #0
 800c460:	9206      	str	r2, [sp, #24]
 800c462:	bf54      	ite	pl
 800c464:	9305      	strpl	r3, [sp, #20]
 800c466:	9306      	strmi	r3, [sp, #24]
 800c468:	f1bb 0f00 	cmp.w	fp, #0
 800c46c:	db18      	blt.n	800c4a0 <_dtoa_r+0x218>
 800c46e:	9b06      	ldr	r3, [sp, #24]
 800c470:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800c474:	445b      	add	r3, fp
 800c476:	9306      	str	r3, [sp, #24]
 800c478:	2300      	movs	r3, #0
 800c47a:	9a07      	ldr	r2, [sp, #28]
 800c47c:	2a09      	cmp	r2, #9
 800c47e:	d849      	bhi.n	800c514 <_dtoa_r+0x28c>
 800c480:	2a05      	cmp	r2, #5
 800c482:	bfc4      	itt	gt
 800c484:	3a04      	subgt	r2, #4
 800c486:	9207      	strgt	r2, [sp, #28]
 800c488:	9a07      	ldr	r2, [sp, #28]
 800c48a:	f1a2 0202 	sub.w	r2, r2, #2
 800c48e:	bfcc      	ite	gt
 800c490:	2400      	movgt	r4, #0
 800c492:	2401      	movle	r4, #1
 800c494:	2a03      	cmp	r2, #3
 800c496:	d848      	bhi.n	800c52a <_dtoa_r+0x2a2>
 800c498:	e8df f002 	tbb	[pc, r2]
 800c49c:	3a2c2e0b 	.word	0x3a2c2e0b
 800c4a0:	9b05      	ldr	r3, [sp, #20]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	eba3 030b 	sub.w	r3, r3, fp
 800c4a8:	9305      	str	r3, [sp, #20]
 800c4aa:	920e      	str	r2, [sp, #56]	; 0x38
 800c4ac:	f1cb 0300 	rsb	r3, fp, #0
 800c4b0:	e7e3      	b.n	800c47a <_dtoa_r+0x1f2>
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	9208      	str	r2, [sp, #32]
 800c4b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4b8:	2a00      	cmp	r2, #0
 800c4ba:	dc39      	bgt.n	800c530 <_dtoa_r+0x2a8>
 800c4bc:	f04f 0a01 	mov.w	sl, #1
 800c4c0:	46d1      	mov	r9, sl
 800c4c2:	4652      	mov	r2, sl
 800c4c4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c4c8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	6079      	str	r1, [r7, #4]
 800c4ce:	2004      	movs	r0, #4
 800c4d0:	f100 0c14 	add.w	ip, r0, #20
 800c4d4:	4594      	cmp	ip, r2
 800c4d6:	6879      	ldr	r1, [r7, #4]
 800c4d8:	d92f      	bls.n	800c53a <_dtoa_r+0x2b2>
 800c4da:	4630      	mov	r0, r6
 800c4dc:	930c      	str	r3, [sp, #48]	; 0x30
 800c4de:	f000 fc6f 	bl	800cdc0 <_Balloc>
 800c4e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4e4:	9000      	str	r0, [sp, #0]
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d149      	bne.n	800c580 <_dtoa_r+0x2f8>
 800c4ec:	4b23      	ldr	r3, [pc, #140]	; (800c57c <_dtoa_r+0x2f4>)
 800c4ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c4f2:	e6df      	b.n	800c2b4 <_dtoa_r+0x2c>
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	e7dd      	b.n	800c4b4 <_dtoa_r+0x22c>
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	9208      	str	r2, [sp, #32]
 800c4fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4fe:	eb0b 0a02 	add.w	sl, fp, r2
 800c502:	f10a 0901 	add.w	r9, sl, #1
 800c506:	464a      	mov	r2, r9
 800c508:	2a01      	cmp	r2, #1
 800c50a:	bfb8      	it	lt
 800c50c:	2201      	movlt	r2, #1
 800c50e:	e7db      	b.n	800c4c8 <_dtoa_r+0x240>
 800c510:	2201      	movs	r2, #1
 800c512:	e7f2      	b.n	800c4fa <_dtoa_r+0x272>
 800c514:	2401      	movs	r4, #1
 800c516:	2200      	movs	r2, #0
 800c518:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c51c:	f04f 3aff 	mov.w	sl, #4294967295
 800c520:	2100      	movs	r1, #0
 800c522:	46d1      	mov	r9, sl
 800c524:	2212      	movs	r2, #18
 800c526:	9109      	str	r1, [sp, #36]	; 0x24
 800c528:	e7ce      	b.n	800c4c8 <_dtoa_r+0x240>
 800c52a:	2201      	movs	r2, #1
 800c52c:	9208      	str	r2, [sp, #32]
 800c52e:	e7f5      	b.n	800c51c <_dtoa_r+0x294>
 800c530:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800c534:	46d1      	mov	r9, sl
 800c536:	4652      	mov	r2, sl
 800c538:	e7c6      	b.n	800c4c8 <_dtoa_r+0x240>
 800c53a:	3101      	adds	r1, #1
 800c53c:	6079      	str	r1, [r7, #4]
 800c53e:	0040      	lsls	r0, r0, #1
 800c540:	e7c6      	b.n	800c4d0 <_dtoa_r+0x248>
 800c542:	bf00      	nop
 800c544:	f3af 8000 	nop.w
 800c548:	636f4361 	.word	0x636f4361
 800c54c:	3fd287a7 	.word	0x3fd287a7
 800c550:	8b60c8b3 	.word	0x8b60c8b3
 800c554:	3fc68a28 	.word	0x3fc68a28
 800c558:	509f79fb 	.word	0x509f79fb
 800c55c:	3fd34413 	.word	0x3fd34413
 800c560:	0800e205 	.word	0x0800e205
 800c564:	0800e21c 	.word	0x0800e21c
 800c568:	7ff00000 	.word	0x7ff00000
 800c56c:	0800e201 	.word	0x0800e201
 800c570:	0800e1f8 	.word	0x0800e1f8
 800c574:	0800e1d5 	.word	0x0800e1d5
 800c578:	0800e318 	.word	0x0800e318
 800c57c:	0800e27b 	.word	0x0800e27b
 800c580:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c582:	9900      	ldr	r1, [sp, #0]
 800c584:	6011      	str	r1, [r2, #0]
 800c586:	f1b9 0f0e 	cmp.w	r9, #14
 800c58a:	d872      	bhi.n	800c672 <_dtoa_r+0x3ea>
 800c58c:	2c00      	cmp	r4, #0
 800c58e:	d070      	beq.n	800c672 <_dtoa_r+0x3ea>
 800c590:	f1bb 0f00 	cmp.w	fp, #0
 800c594:	f340 80a6 	ble.w	800c6e4 <_dtoa_r+0x45c>
 800c598:	49ca      	ldr	r1, [pc, #808]	; (800c8c4 <_dtoa_r+0x63c>)
 800c59a:	f00b 020f 	and.w	r2, fp, #15
 800c59e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c5a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c5a6:	ed92 7b00 	vldr	d7, [r2]
 800c5aa:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c5ae:	f000 808d 	beq.w	800c6cc <_dtoa_r+0x444>
 800c5b2:	4ac5      	ldr	r2, [pc, #788]	; (800c8c8 <_dtoa_r+0x640>)
 800c5b4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800c5b8:	ed92 6b08 	vldr	d6, [r2, #32]
 800c5bc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800c5c0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c5c4:	f001 010f 	and.w	r1, r1, #15
 800c5c8:	2203      	movs	r2, #3
 800c5ca:	48bf      	ldr	r0, [pc, #764]	; (800c8c8 <_dtoa_r+0x640>)
 800c5cc:	2900      	cmp	r1, #0
 800c5ce:	d17f      	bne.n	800c6d0 <_dtoa_r+0x448>
 800c5d0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c5d4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c5d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c5dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c5de:	2900      	cmp	r1, #0
 800c5e0:	f000 80b2 	beq.w	800c748 <_dtoa_r+0x4c0>
 800c5e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c5e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5f4:	f140 80a8 	bpl.w	800c748 <_dtoa_r+0x4c0>
 800c5f8:	f1b9 0f00 	cmp.w	r9, #0
 800c5fc:	f000 80a4 	beq.w	800c748 <_dtoa_r+0x4c0>
 800c600:	f1ba 0f00 	cmp.w	sl, #0
 800c604:	dd31      	ble.n	800c66a <_dtoa_r+0x3e2>
 800c606:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c60a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c60e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c612:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c616:	3201      	adds	r2, #1
 800c618:	4650      	mov	r0, sl
 800c61a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c61e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c622:	ee07 2a90 	vmov	s15, r2
 800c626:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c62a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c62e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800c632:	9c03      	ldr	r4, [sp, #12]
 800c634:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c638:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c63c:	2800      	cmp	r0, #0
 800c63e:	f040 8086 	bne.w	800c74e <_dtoa_r+0x4c6>
 800c642:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c646:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c64a:	ec42 1b17 	vmov	d7, r1, r2
 800c64e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c656:	f300 8272 	bgt.w	800cb3e <_dtoa_r+0x8b6>
 800c65a:	eeb1 7b47 	vneg.f64	d7, d7
 800c65e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c666:	f100 8267 	bmi.w	800cb38 <_dtoa_r+0x8b0>
 800c66a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800c66e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c672:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c674:	2a00      	cmp	r2, #0
 800c676:	f2c0 8129 	blt.w	800c8cc <_dtoa_r+0x644>
 800c67a:	f1bb 0f0e 	cmp.w	fp, #14
 800c67e:	f300 8125 	bgt.w	800c8cc <_dtoa_r+0x644>
 800c682:	4b90      	ldr	r3, [pc, #576]	; (800c8c4 <_dtoa_r+0x63c>)
 800c684:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c688:	ed93 6b00 	vldr	d6, [r3]
 800c68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f280 80c3 	bge.w	800c81a <_dtoa_r+0x592>
 800c694:	f1b9 0f00 	cmp.w	r9, #0
 800c698:	f300 80bf 	bgt.w	800c81a <_dtoa_r+0x592>
 800c69c:	f040 824c 	bne.w	800cb38 <_dtoa_r+0x8b0>
 800c6a0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c6a4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c6a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b4:	464c      	mov	r4, r9
 800c6b6:	464f      	mov	r7, r9
 800c6b8:	f280 8222 	bge.w	800cb00 <_dtoa_r+0x878>
 800c6bc:	f8dd 8000 	ldr.w	r8, [sp]
 800c6c0:	2331      	movs	r3, #49	; 0x31
 800c6c2:	f808 3b01 	strb.w	r3, [r8], #1
 800c6c6:	f10b 0b01 	add.w	fp, fp, #1
 800c6ca:	e21e      	b.n	800cb0a <_dtoa_r+0x882>
 800c6cc:	2202      	movs	r2, #2
 800c6ce:	e77c      	b.n	800c5ca <_dtoa_r+0x342>
 800c6d0:	07cc      	lsls	r4, r1, #31
 800c6d2:	d504      	bpl.n	800c6de <_dtoa_r+0x456>
 800c6d4:	ed90 6b00 	vldr	d6, [r0]
 800c6d8:	3201      	adds	r2, #1
 800c6da:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c6de:	1049      	asrs	r1, r1, #1
 800c6e0:	3008      	adds	r0, #8
 800c6e2:	e773      	b.n	800c5cc <_dtoa_r+0x344>
 800c6e4:	d02e      	beq.n	800c744 <_dtoa_r+0x4bc>
 800c6e6:	f1cb 0100 	rsb	r1, fp, #0
 800c6ea:	4a76      	ldr	r2, [pc, #472]	; (800c8c4 <_dtoa_r+0x63c>)
 800c6ec:	f001 000f 	and.w	r0, r1, #15
 800c6f0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c6f4:	ed92 7b00 	vldr	d7, [r2]
 800c6f8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800c6fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c700:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c704:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800c708:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800c70c:	486e      	ldr	r0, [pc, #440]	; (800c8c8 <_dtoa_r+0x640>)
 800c70e:	1109      	asrs	r1, r1, #4
 800c710:	2400      	movs	r4, #0
 800c712:	2202      	movs	r2, #2
 800c714:	b939      	cbnz	r1, 800c726 <_dtoa_r+0x49e>
 800c716:	2c00      	cmp	r4, #0
 800c718:	f43f af60 	beq.w	800c5dc <_dtoa_r+0x354>
 800c71c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c720:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c724:	e75a      	b.n	800c5dc <_dtoa_r+0x354>
 800c726:	07cf      	lsls	r7, r1, #31
 800c728:	d509      	bpl.n	800c73e <_dtoa_r+0x4b6>
 800c72a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800c72e:	ed90 7b00 	vldr	d7, [r0]
 800c732:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c736:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c73a:	3201      	adds	r2, #1
 800c73c:	2401      	movs	r4, #1
 800c73e:	1049      	asrs	r1, r1, #1
 800c740:	3008      	adds	r0, #8
 800c742:	e7e7      	b.n	800c714 <_dtoa_r+0x48c>
 800c744:	2202      	movs	r2, #2
 800c746:	e749      	b.n	800c5dc <_dtoa_r+0x354>
 800c748:	465f      	mov	r7, fp
 800c74a:	4648      	mov	r0, r9
 800c74c:	e765      	b.n	800c61a <_dtoa_r+0x392>
 800c74e:	ec42 1b17 	vmov	d7, r1, r2
 800c752:	4a5c      	ldr	r2, [pc, #368]	; (800c8c4 <_dtoa_r+0x63c>)
 800c754:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c758:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c75c:	9a00      	ldr	r2, [sp, #0]
 800c75e:	1814      	adds	r4, r2, r0
 800c760:	9a08      	ldr	r2, [sp, #32]
 800c762:	b352      	cbz	r2, 800c7ba <_dtoa_r+0x532>
 800c764:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c768:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c76c:	f8dd 8000 	ldr.w	r8, [sp]
 800c770:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c774:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c778:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c77c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c780:	ee14 2a90 	vmov	r2, s9
 800c784:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c788:	3230      	adds	r2, #48	; 0x30
 800c78a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c78e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c796:	f808 2b01 	strb.w	r2, [r8], #1
 800c79a:	d439      	bmi.n	800c810 <_dtoa_r+0x588>
 800c79c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c7a0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a8:	d472      	bmi.n	800c890 <_dtoa_r+0x608>
 800c7aa:	45a0      	cmp	r8, r4
 800c7ac:	f43f af5d 	beq.w	800c66a <_dtoa_r+0x3e2>
 800c7b0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c7b4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c7b8:	e7e0      	b.n	800c77c <_dtoa_r+0x4f4>
 800c7ba:	f8dd 8000 	ldr.w	r8, [sp]
 800c7be:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c7c8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c7cc:	ee14 2a90 	vmov	r2, s9
 800c7d0:	3230      	adds	r2, #48	; 0x30
 800c7d2:	f808 2b01 	strb.w	r2, [r8], #1
 800c7d6:	45a0      	cmp	r8, r4
 800c7d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c7dc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c7e0:	d118      	bne.n	800c814 <_dtoa_r+0x58c>
 800c7e2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c7e6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c7ea:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f2:	dc4d      	bgt.n	800c890 <_dtoa_r+0x608>
 800c7f4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c7f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c800:	f57f af33 	bpl.w	800c66a <_dtoa_r+0x3e2>
 800c804:	4688      	mov	r8, r1
 800c806:	3901      	subs	r1, #1
 800c808:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c80c:	2b30      	cmp	r3, #48	; 0x30
 800c80e:	d0f9      	beq.n	800c804 <_dtoa_r+0x57c>
 800c810:	46bb      	mov	fp, r7
 800c812:	e02a      	b.n	800c86a <_dtoa_r+0x5e2>
 800c814:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c818:	e7d6      	b.n	800c7c8 <_dtoa_r+0x540>
 800c81a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c81e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c822:	f8dd 8000 	ldr.w	r8, [sp]
 800c826:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c82a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c82e:	ee15 3a10 	vmov	r3, s10
 800c832:	3330      	adds	r3, #48	; 0x30
 800c834:	f808 3b01 	strb.w	r3, [r8], #1
 800c838:	9b00      	ldr	r3, [sp, #0]
 800c83a:	eba8 0303 	sub.w	r3, r8, r3
 800c83e:	4599      	cmp	r9, r3
 800c840:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c844:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c848:	d133      	bne.n	800c8b2 <_dtoa_r+0x62a>
 800c84a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c84e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c856:	dc1a      	bgt.n	800c88e <_dtoa_r+0x606>
 800c858:	eeb4 7b46 	vcmp.f64	d7, d6
 800c85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c860:	d103      	bne.n	800c86a <_dtoa_r+0x5e2>
 800c862:	ee15 3a10 	vmov	r3, s10
 800c866:	07d9      	lsls	r1, r3, #31
 800c868:	d411      	bmi.n	800c88e <_dtoa_r+0x606>
 800c86a:	4629      	mov	r1, r5
 800c86c:	4630      	mov	r0, r6
 800c86e:	f000 fae7 	bl	800ce40 <_Bfree>
 800c872:	2300      	movs	r3, #0
 800c874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c876:	f888 3000 	strb.w	r3, [r8]
 800c87a:	f10b 0301 	add.w	r3, fp, #1
 800c87e:	6013      	str	r3, [r2, #0]
 800c880:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c882:	2b00      	cmp	r3, #0
 800c884:	f43f ad4d 	beq.w	800c322 <_dtoa_r+0x9a>
 800c888:	f8c3 8000 	str.w	r8, [r3]
 800c88c:	e549      	b.n	800c322 <_dtoa_r+0x9a>
 800c88e:	465f      	mov	r7, fp
 800c890:	4643      	mov	r3, r8
 800c892:	4698      	mov	r8, r3
 800c894:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c898:	2a39      	cmp	r2, #57	; 0x39
 800c89a:	d106      	bne.n	800c8aa <_dtoa_r+0x622>
 800c89c:	9a00      	ldr	r2, [sp, #0]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d1f7      	bne.n	800c892 <_dtoa_r+0x60a>
 800c8a2:	9900      	ldr	r1, [sp, #0]
 800c8a4:	2230      	movs	r2, #48	; 0x30
 800c8a6:	3701      	adds	r7, #1
 800c8a8:	700a      	strb	r2, [r1, #0]
 800c8aa:	781a      	ldrb	r2, [r3, #0]
 800c8ac:	3201      	adds	r2, #1
 800c8ae:	701a      	strb	r2, [r3, #0]
 800c8b0:	e7ae      	b.n	800c810 <_dtoa_r+0x588>
 800c8b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c8b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8be:	d1b2      	bne.n	800c826 <_dtoa_r+0x59e>
 800c8c0:	e7d3      	b.n	800c86a <_dtoa_r+0x5e2>
 800c8c2:	bf00      	nop
 800c8c4:	0800e318 	.word	0x0800e318
 800c8c8:	0800e2f0 	.word	0x0800e2f0
 800c8cc:	9908      	ldr	r1, [sp, #32]
 800c8ce:	2900      	cmp	r1, #0
 800c8d0:	f000 80d1 	beq.w	800ca76 <_dtoa_r+0x7ee>
 800c8d4:	9907      	ldr	r1, [sp, #28]
 800c8d6:	2901      	cmp	r1, #1
 800c8d8:	f300 80b4 	bgt.w	800ca44 <_dtoa_r+0x7bc>
 800c8dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c8de:	2900      	cmp	r1, #0
 800c8e0:	f000 80ac 	beq.w	800ca3c <_dtoa_r+0x7b4>
 800c8e4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c8e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c8ec:	461c      	mov	r4, r3
 800c8ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c8f0:	9b05      	ldr	r3, [sp, #20]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	9305      	str	r3, [sp, #20]
 800c8f6:	9b06      	ldr	r3, [sp, #24]
 800c8f8:	2101      	movs	r1, #1
 800c8fa:	4413      	add	r3, r2
 800c8fc:	4630      	mov	r0, r6
 800c8fe:	9306      	str	r3, [sp, #24]
 800c900:	f000 fb5a 	bl	800cfb8 <__i2b>
 800c904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c906:	4607      	mov	r7, r0
 800c908:	f1b8 0f00 	cmp.w	r8, #0
 800c90c:	dd0d      	ble.n	800c92a <_dtoa_r+0x6a2>
 800c90e:	9a06      	ldr	r2, [sp, #24]
 800c910:	2a00      	cmp	r2, #0
 800c912:	dd0a      	ble.n	800c92a <_dtoa_r+0x6a2>
 800c914:	4542      	cmp	r2, r8
 800c916:	9905      	ldr	r1, [sp, #20]
 800c918:	bfa8      	it	ge
 800c91a:	4642      	movge	r2, r8
 800c91c:	1a89      	subs	r1, r1, r2
 800c91e:	9105      	str	r1, [sp, #20]
 800c920:	9906      	ldr	r1, [sp, #24]
 800c922:	eba8 0802 	sub.w	r8, r8, r2
 800c926:	1a8a      	subs	r2, r1, r2
 800c928:	9206      	str	r2, [sp, #24]
 800c92a:	b303      	cbz	r3, 800c96e <_dtoa_r+0x6e6>
 800c92c:	9a08      	ldr	r2, [sp, #32]
 800c92e:	2a00      	cmp	r2, #0
 800c930:	f000 80a6 	beq.w	800ca80 <_dtoa_r+0x7f8>
 800c934:	2c00      	cmp	r4, #0
 800c936:	dd13      	ble.n	800c960 <_dtoa_r+0x6d8>
 800c938:	4639      	mov	r1, r7
 800c93a:	4622      	mov	r2, r4
 800c93c:	4630      	mov	r0, r6
 800c93e:	930c      	str	r3, [sp, #48]	; 0x30
 800c940:	f000 fbf6 	bl	800d130 <__pow5mult>
 800c944:	462a      	mov	r2, r5
 800c946:	4601      	mov	r1, r0
 800c948:	4607      	mov	r7, r0
 800c94a:	4630      	mov	r0, r6
 800c94c:	f000 fb4a 	bl	800cfe4 <__multiply>
 800c950:	4629      	mov	r1, r5
 800c952:	900a      	str	r0, [sp, #40]	; 0x28
 800c954:	4630      	mov	r0, r6
 800c956:	f000 fa73 	bl	800ce40 <_Bfree>
 800c95a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c95c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c95e:	4615      	mov	r5, r2
 800c960:	1b1a      	subs	r2, r3, r4
 800c962:	d004      	beq.n	800c96e <_dtoa_r+0x6e6>
 800c964:	4629      	mov	r1, r5
 800c966:	4630      	mov	r0, r6
 800c968:	f000 fbe2 	bl	800d130 <__pow5mult>
 800c96c:	4605      	mov	r5, r0
 800c96e:	2101      	movs	r1, #1
 800c970:	4630      	mov	r0, r6
 800c972:	f000 fb21 	bl	800cfb8 <__i2b>
 800c976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c978:	2b00      	cmp	r3, #0
 800c97a:	4604      	mov	r4, r0
 800c97c:	f340 8082 	ble.w	800ca84 <_dtoa_r+0x7fc>
 800c980:	461a      	mov	r2, r3
 800c982:	4601      	mov	r1, r0
 800c984:	4630      	mov	r0, r6
 800c986:	f000 fbd3 	bl	800d130 <__pow5mult>
 800c98a:	9b07      	ldr	r3, [sp, #28]
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	4604      	mov	r4, r0
 800c990:	dd7b      	ble.n	800ca8a <_dtoa_r+0x802>
 800c992:	2300      	movs	r3, #0
 800c994:	930a      	str	r3, [sp, #40]	; 0x28
 800c996:	6922      	ldr	r2, [r4, #16]
 800c998:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c99c:	6910      	ldr	r0, [r2, #16]
 800c99e:	f000 fabb 	bl	800cf18 <__hi0bits>
 800c9a2:	f1c0 0020 	rsb	r0, r0, #32
 800c9a6:	9b06      	ldr	r3, [sp, #24]
 800c9a8:	4418      	add	r0, r3
 800c9aa:	f010 001f 	ands.w	r0, r0, #31
 800c9ae:	f000 808d 	beq.w	800cacc <_dtoa_r+0x844>
 800c9b2:	f1c0 0220 	rsb	r2, r0, #32
 800c9b6:	2a04      	cmp	r2, #4
 800c9b8:	f340 8086 	ble.w	800cac8 <_dtoa_r+0x840>
 800c9bc:	f1c0 001c 	rsb	r0, r0, #28
 800c9c0:	9b05      	ldr	r3, [sp, #20]
 800c9c2:	4403      	add	r3, r0
 800c9c4:	9305      	str	r3, [sp, #20]
 800c9c6:	9b06      	ldr	r3, [sp, #24]
 800c9c8:	4403      	add	r3, r0
 800c9ca:	4480      	add	r8, r0
 800c9cc:	9306      	str	r3, [sp, #24]
 800c9ce:	9b05      	ldr	r3, [sp, #20]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	dd05      	ble.n	800c9e0 <_dtoa_r+0x758>
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	4630      	mov	r0, r6
 800c9da:	f000 fc03 	bl	800d1e4 <__lshift>
 800c9de:	4605      	mov	r5, r0
 800c9e0:	9b06      	ldr	r3, [sp, #24]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	dd05      	ble.n	800c9f2 <_dtoa_r+0x76a>
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	f000 fbfa 	bl	800d1e4 <__lshift>
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d06b      	beq.n	800cad0 <_dtoa_r+0x848>
 800c9f8:	4621      	mov	r1, r4
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f000 fc5e 	bl	800d2bc <__mcmp>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	da65      	bge.n	800cad0 <_dtoa_r+0x848>
 800ca04:	2300      	movs	r3, #0
 800ca06:	4629      	mov	r1, r5
 800ca08:	220a      	movs	r2, #10
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	f000 fa3a 	bl	800ce84 <__multadd>
 800ca10:	9b08      	ldr	r3, [sp, #32]
 800ca12:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca16:	4605      	mov	r5, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f000 8192 	beq.w	800cd42 <_dtoa_r+0xaba>
 800ca1e:	4639      	mov	r1, r7
 800ca20:	2300      	movs	r3, #0
 800ca22:	220a      	movs	r2, #10
 800ca24:	4630      	mov	r0, r6
 800ca26:	f000 fa2d 	bl	800ce84 <__multadd>
 800ca2a:	f1ba 0f00 	cmp.w	sl, #0
 800ca2e:	4607      	mov	r7, r0
 800ca30:	f300 808e 	bgt.w	800cb50 <_dtoa_r+0x8c8>
 800ca34:	9b07      	ldr	r3, [sp, #28]
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	dc51      	bgt.n	800cade <_dtoa_r+0x856>
 800ca3a:	e089      	b.n	800cb50 <_dtoa_r+0x8c8>
 800ca3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ca42:	e751      	b.n	800c8e8 <_dtoa_r+0x660>
 800ca44:	f109 34ff 	add.w	r4, r9, #4294967295
 800ca48:	42a3      	cmp	r3, r4
 800ca4a:	bfbf      	itttt	lt
 800ca4c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800ca4e:	1ae3      	sublt	r3, r4, r3
 800ca50:	18d2      	addlt	r2, r2, r3
 800ca52:	4613      	movlt	r3, r2
 800ca54:	bfb7      	itett	lt
 800ca56:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ca58:	1b1c      	subge	r4, r3, r4
 800ca5a:	4623      	movlt	r3, r4
 800ca5c:	2400      	movlt	r4, #0
 800ca5e:	f1b9 0f00 	cmp.w	r9, #0
 800ca62:	bfb5      	itete	lt
 800ca64:	9a05      	ldrlt	r2, [sp, #20]
 800ca66:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800ca6a:	eba2 0809 	sublt.w	r8, r2, r9
 800ca6e:	464a      	movge	r2, r9
 800ca70:	bfb8      	it	lt
 800ca72:	2200      	movlt	r2, #0
 800ca74:	e73b      	b.n	800c8ee <_dtoa_r+0x666>
 800ca76:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ca7a:	9f08      	ldr	r7, [sp, #32]
 800ca7c:	461c      	mov	r4, r3
 800ca7e:	e743      	b.n	800c908 <_dtoa_r+0x680>
 800ca80:	461a      	mov	r2, r3
 800ca82:	e76f      	b.n	800c964 <_dtoa_r+0x6dc>
 800ca84:	9b07      	ldr	r3, [sp, #28]
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	dc18      	bgt.n	800cabc <_dtoa_r+0x834>
 800ca8a:	9b02      	ldr	r3, [sp, #8]
 800ca8c:	b9b3      	cbnz	r3, 800cabc <_dtoa_r+0x834>
 800ca8e:	9b03      	ldr	r3, [sp, #12]
 800ca90:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ca94:	b9a2      	cbnz	r2, 800cac0 <_dtoa_r+0x838>
 800ca96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ca9a:	0d12      	lsrs	r2, r2, #20
 800ca9c:	0512      	lsls	r2, r2, #20
 800ca9e:	b18a      	cbz	r2, 800cac4 <_dtoa_r+0x83c>
 800caa0:	9b05      	ldr	r3, [sp, #20]
 800caa2:	3301      	adds	r3, #1
 800caa4:	9305      	str	r3, [sp, #20]
 800caa6:	9b06      	ldr	r3, [sp, #24]
 800caa8:	3301      	adds	r3, #1
 800caaa:	9306      	str	r3, [sp, #24]
 800caac:	2301      	movs	r3, #1
 800caae:	930a      	str	r3, [sp, #40]	; 0x28
 800cab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f47f af6f 	bne.w	800c996 <_dtoa_r+0x70e>
 800cab8:	2001      	movs	r0, #1
 800caba:	e774      	b.n	800c9a6 <_dtoa_r+0x71e>
 800cabc:	2300      	movs	r3, #0
 800cabe:	e7f6      	b.n	800caae <_dtoa_r+0x826>
 800cac0:	9b02      	ldr	r3, [sp, #8]
 800cac2:	e7f4      	b.n	800caae <_dtoa_r+0x826>
 800cac4:	920a      	str	r2, [sp, #40]	; 0x28
 800cac6:	e7f3      	b.n	800cab0 <_dtoa_r+0x828>
 800cac8:	d081      	beq.n	800c9ce <_dtoa_r+0x746>
 800caca:	4610      	mov	r0, r2
 800cacc:	301c      	adds	r0, #28
 800cace:	e777      	b.n	800c9c0 <_dtoa_r+0x738>
 800cad0:	f1b9 0f00 	cmp.w	r9, #0
 800cad4:	dc37      	bgt.n	800cb46 <_dtoa_r+0x8be>
 800cad6:	9b07      	ldr	r3, [sp, #28]
 800cad8:	2b02      	cmp	r3, #2
 800cada:	dd34      	ble.n	800cb46 <_dtoa_r+0x8be>
 800cadc:	46ca      	mov	sl, r9
 800cade:	f1ba 0f00 	cmp.w	sl, #0
 800cae2:	d10d      	bne.n	800cb00 <_dtoa_r+0x878>
 800cae4:	4621      	mov	r1, r4
 800cae6:	4653      	mov	r3, sl
 800cae8:	2205      	movs	r2, #5
 800caea:	4630      	mov	r0, r6
 800caec:	f000 f9ca 	bl	800ce84 <__multadd>
 800caf0:	4601      	mov	r1, r0
 800caf2:	4604      	mov	r4, r0
 800caf4:	4628      	mov	r0, r5
 800caf6:	f000 fbe1 	bl	800d2bc <__mcmp>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	f73f adde 	bgt.w	800c6bc <_dtoa_r+0x434>
 800cb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb02:	f8dd 8000 	ldr.w	r8, [sp]
 800cb06:	ea6f 0b03 	mvn.w	fp, r3
 800cb0a:	f04f 0900 	mov.w	r9, #0
 800cb0e:	4621      	mov	r1, r4
 800cb10:	4630      	mov	r0, r6
 800cb12:	f000 f995 	bl	800ce40 <_Bfree>
 800cb16:	2f00      	cmp	r7, #0
 800cb18:	f43f aea7 	beq.w	800c86a <_dtoa_r+0x5e2>
 800cb1c:	f1b9 0f00 	cmp.w	r9, #0
 800cb20:	d005      	beq.n	800cb2e <_dtoa_r+0x8a6>
 800cb22:	45b9      	cmp	r9, r7
 800cb24:	d003      	beq.n	800cb2e <_dtoa_r+0x8a6>
 800cb26:	4649      	mov	r1, r9
 800cb28:	4630      	mov	r0, r6
 800cb2a:	f000 f989 	bl	800ce40 <_Bfree>
 800cb2e:	4639      	mov	r1, r7
 800cb30:	4630      	mov	r0, r6
 800cb32:	f000 f985 	bl	800ce40 <_Bfree>
 800cb36:	e698      	b.n	800c86a <_dtoa_r+0x5e2>
 800cb38:	2400      	movs	r4, #0
 800cb3a:	4627      	mov	r7, r4
 800cb3c:	e7e0      	b.n	800cb00 <_dtoa_r+0x878>
 800cb3e:	46bb      	mov	fp, r7
 800cb40:	4604      	mov	r4, r0
 800cb42:	4607      	mov	r7, r0
 800cb44:	e5ba      	b.n	800c6bc <_dtoa_r+0x434>
 800cb46:	9b08      	ldr	r3, [sp, #32]
 800cb48:	46ca      	mov	sl, r9
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f000 8100 	beq.w	800cd50 <_dtoa_r+0xac8>
 800cb50:	f1b8 0f00 	cmp.w	r8, #0
 800cb54:	dd05      	ble.n	800cb62 <_dtoa_r+0x8da>
 800cb56:	4639      	mov	r1, r7
 800cb58:	4642      	mov	r2, r8
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	f000 fb42 	bl	800d1e4 <__lshift>
 800cb60:	4607      	mov	r7, r0
 800cb62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d05d      	beq.n	800cc24 <_dtoa_r+0x99c>
 800cb68:	6879      	ldr	r1, [r7, #4]
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	f000 f928 	bl	800cdc0 <_Balloc>
 800cb70:	4680      	mov	r8, r0
 800cb72:	b928      	cbnz	r0, 800cb80 <_dtoa_r+0x8f8>
 800cb74:	4b82      	ldr	r3, [pc, #520]	; (800cd80 <_dtoa_r+0xaf8>)
 800cb76:	4602      	mov	r2, r0
 800cb78:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cb7c:	f7ff bb9a 	b.w	800c2b4 <_dtoa_r+0x2c>
 800cb80:	693a      	ldr	r2, [r7, #16]
 800cb82:	3202      	adds	r2, #2
 800cb84:	0092      	lsls	r2, r2, #2
 800cb86:	f107 010c 	add.w	r1, r7, #12
 800cb8a:	300c      	adds	r0, #12
 800cb8c:	f000 f90a 	bl	800cda4 <memcpy>
 800cb90:	2201      	movs	r2, #1
 800cb92:	4641      	mov	r1, r8
 800cb94:	4630      	mov	r0, r6
 800cb96:	f000 fb25 	bl	800d1e4 <__lshift>
 800cb9a:	9b00      	ldr	r3, [sp, #0]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	9305      	str	r3, [sp, #20]
 800cba0:	9b00      	ldr	r3, [sp, #0]
 800cba2:	4453      	add	r3, sl
 800cba4:	9309      	str	r3, [sp, #36]	; 0x24
 800cba6:	9b02      	ldr	r3, [sp, #8]
 800cba8:	f003 0301 	and.w	r3, r3, #1
 800cbac:	46b9      	mov	r9, r7
 800cbae:	9308      	str	r3, [sp, #32]
 800cbb0:	4607      	mov	r7, r0
 800cbb2:	9b05      	ldr	r3, [sp, #20]
 800cbb4:	4621      	mov	r1, r4
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	4628      	mov	r0, r5
 800cbba:	9302      	str	r3, [sp, #8]
 800cbbc:	f7ff fad6 	bl	800c16c <quorem>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	3330      	adds	r3, #48	; 0x30
 800cbc4:	9006      	str	r0, [sp, #24]
 800cbc6:	4649      	mov	r1, r9
 800cbc8:	4628      	mov	r0, r5
 800cbca:	930a      	str	r3, [sp, #40]	; 0x28
 800cbcc:	f000 fb76 	bl	800d2bc <__mcmp>
 800cbd0:	463a      	mov	r2, r7
 800cbd2:	4682      	mov	sl, r0
 800cbd4:	4621      	mov	r1, r4
 800cbd6:	4630      	mov	r0, r6
 800cbd8:	f000 fb8c 	bl	800d2f4 <__mdiff>
 800cbdc:	68c2      	ldr	r2, [r0, #12]
 800cbde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbe0:	4680      	mov	r8, r0
 800cbe2:	bb0a      	cbnz	r2, 800cc28 <_dtoa_r+0x9a0>
 800cbe4:	4601      	mov	r1, r0
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	f000 fb68 	bl	800d2bc <__mcmp>
 800cbec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbee:	4602      	mov	r2, r0
 800cbf0:	4641      	mov	r1, r8
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	920e      	str	r2, [sp, #56]	; 0x38
 800cbf6:	930a      	str	r3, [sp, #40]	; 0x28
 800cbf8:	f000 f922 	bl	800ce40 <_Bfree>
 800cbfc:	9b07      	ldr	r3, [sp, #28]
 800cbfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cc04:	ea43 0102 	orr.w	r1, r3, r2
 800cc08:	9b08      	ldr	r3, [sp, #32]
 800cc0a:	430b      	orrs	r3, r1
 800cc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc0e:	d10d      	bne.n	800cc2c <_dtoa_r+0x9a4>
 800cc10:	2b39      	cmp	r3, #57	; 0x39
 800cc12:	d029      	beq.n	800cc68 <_dtoa_r+0x9e0>
 800cc14:	f1ba 0f00 	cmp.w	sl, #0
 800cc18:	dd01      	ble.n	800cc1e <_dtoa_r+0x996>
 800cc1a:	9b06      	ldr	r3, [sp, #24]
 800cc1c:	3331      	adds	r3, #49	; 0x31
 800cc1e:	9a02      	ldr	r2, [sp, #8]
 800cc20:	7013      	strb	r3, [r2, #0]
 800cc22:	e774      	b.n	800cb0e <_dtoa_r+0x886>
 800cc24:	4638      	mov	r0, r7
 800cc26:	e7b8      	b.n	800cb9a <_dtoa_r+0x912>
 800cc28:	2201      	movs	r2, #1
 800cc2a:	e7e1      	b.n	800cbf0 <_dtoa_r+0x968>
 800cc2c:	f1ba 0f00 	cmp.w	sl, #0
 800cc30:	db06      	blt.n	800cc40 <_dtoa_r+0x9b8>
 800cc32:	9907      	ldr	r1, [sp, #28]
 800cc34:	ea41 0a0a 	orr.w	sl, r1, sl
 800cc38:	9908      	ldr	r1, [sp, #32]
 800cc3a:	ea5a 0101 	orrs.w	r1, sl, r1
 800cc3e:	d120      	bne.n	800cc82 <_dtoa_r+0x9fa>
 800cc40:	2a00      	cmp	r2, #0
 800cc42:	ddec      	ble.n	800cc1e <_dtoa_r+0x996>
 800cc44:	4629      	mov	r1, r5
 800cc46:	2201      	movs	r2, #1
 800cc48:	4630      	mov	r0, r6
 800cc4a:	9305      	str	r3, [sp, #20]
 800cc4c:	f000 faca 	bl	800d1e4 <__lshift>
 800cc50:	4621      	mov	r1, r4
 800cc52:	4605      	mov	r5, r0
 800cc54:	f000 fb32 	bl	800d2bc <__mcmp>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	9b05      	ldr	r3, [sp, #20]
 800cc5c:	dc02      	bgt.n	800cc64 <_dtoa_r+0x9dc>
 800cc5e:	d1de      	bne.n	800cc1e <_dtoa_r+0x996>
 800cc60:	07da      	lsls	r2, r3, #31
 800cc62:	d5dc      	bpl.n	800cc1e <_dtoa_r+0x996>
 800cc64:	2b39      	cmp	r3, #57	; 0x39
 800cc66:	d1d8      	bne.n	800cc1a <_dtoa_r+0x992>
 800cc68:	9a02      	ldr	r2, [sp, #8]
 800cc6a:	2339      	movs	r3, #57	; 0x39
 800cc6c:	7013      	strb	r3, [r2, #0]
 800cc6e:	4643      	mov	r3, r8
 800cc70:	4698      	mov	r8, r3
 800cc72:	3b01      	subs	r3, #1
 800cc74:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800cc78:	2a39      	cmp	r2, #57	; 0x39
 800cc7a:	d051      	beq.n	800cd20 <_dtoa_r+0xa98>
 800cc7c:	3201      	adds	r2, #1
 800cc7e:	701a      	strb	r2, [r3, #0]
 800cc80:	e745      	b.n	800cb0e <_dtoa_r+0x886>
 800cc82:	2a00      	cmp	r2, #0
 800cc84:	dd03      	ble.n	800cc8e <_dtoa_r+0xa06>
 800cc86:	2b39      	cmp	r3, #57	; 0x39
 800cc88:	d0ee      	beq.n	800cc68 <_dtoa_r+0x9e0>
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	e7c7      	b.n	800cc1e <_dtoa_r+0x996>
 800cc8e:	9a05      	ldr	r2, [sp, #20]
 800cc90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc92:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cc96:	428a      	cmp	r2, r1
 800cc98:	d02b      	beq.n	800ccf2 <_dtoa_r+0xa6a>
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	220a      	movs	r2, #10
 800cca0:	4630      	mov	r0, r6
 800cca2:	f000 f8ef 	bl	800ce84 <__multadd>
 800cca6:	45b9      	cmp	r9, r7
 800cca8:	4605      	mov	r5, r0
 800ccaa:	f04f 0300 	mov.w	r3, #0
 800ccae:	f04f 020a 	mov.w	r2, #10
 800ccb2:	4649      	mov	r1, r9
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	d107      	bne.n	800ccc8 <_dtoa_r+0xa40>
 800ccb8:	f000 f8e4 	bl	800ce84 <__multadd>
 800ccbc:	4681      	mov	r9, r0
 800ccbe:	4607      	mov	r7, r0
 800ccc0:	9b05      	ldr	r3, [sp, #20]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	9305      	str	r3, [sp, #20]
 800ccc6:	e774      	b.n	800cbb2 <_dtoa_r+0x92a>
 800ccc8:	f000 f8dc 	bl	800ce84 <__multadd>
 800cccc:	4639      	mov	r1, r7
 800ccce:	4681      	mov	r9, r0
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	220a      	movs	r2, #10
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f000 f8d5 	bl	800ce84 <__multadd>
 800ccda:	4607      	mov	r7, r0
 800ccdc:	e7f0      	b.n	800ccc0 <_dtoa_r+0xa38>
 800ccde:	f1ba 0f00 	cmp.w	sl, #0
 800cce2:	9a00      	ldr	r2, [sp, #0]
 800cce4:	bfcc      	ite	gt
 800cce6:	46d0      	movgt	r8, sl
 800cce8:	f04f 0801 	movle.w	r8, #1
 800ccec:	4490      	add	r8, r2
 800ccee:	f04f 0900 	mov.w	r9, #0
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	9302      	str	r3, [sp, #8]
 800ccfa:	f000 fa73 	bl	800d1e4 <__lshift>
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4605      	mov	r5, r0
 800cd02:	f000 fadb 	bl	800d2bc <__mcmp>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	dcb1      	bgt.n	800cc6e <_dtoa_r+0x9e6>
 800cd0a:	d102      	bne.n	800cd12 <_dtoa_r+0xa8a>
 800cd0c:	9b02      	ldr	r3, [sp, #8]
 800cd0e:	07db      	lsls	r3, r3, #31
 800cd10:	d4ad      	bmi.n	800cc6e <_dtoa_r+0x9e6>
 800cd12:	4643      	mov	r3, r8
 800cd14:	4698      	mov	r8, r3
 800cd16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd1a:	2a30      	cmp	r2, #48	; 0x30
 800cd1c:	d0fa      	beq.n	800cd14 <_dtoa_r+0xa8c>
 800cd1e:	e6f6      	b.n	800cb0e <_dtoa_r+0x886>
 800cd20:	9a00      	ldr	r2, [sp, #0]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d1a4      	bne.n	800cc70 <_dtoa_r+0x9e8>
 800cd26:	f10b 0b01 	add.w	fp, fp, #1
 800cd2a:	2331      	movs	r3, #49	; 0x31
 800cd2c:	e778      	b.n	800cc20 <_dtoa_r+0x998>
 800cd2e:	4b15      	ldr	r3, [pc, #84]	; (800cd84 <_dtoa_r+0xafc>)
 800cd30:	f7ff bb12 	b.w	800c358 <_dtoa_r+0xd0>
 800cd34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f47f aaee 	bne.w	800c318 <_dtoa_r+0x90>
 800cd3c:	4b12      	ldr	r3, [pc, #72]	; (800cd88 <_dtoa_r+0xb00>)
 800cd3e:	f7ff bb0b 	b.w	800c358 <_dtoa_r+0xd0>
 800cd42:	f1ba 0f00 	cmp.w	sl, #0
 800cd46:	dc03      	bgt.n	800cd50 <_dtoa_r+0xac8>
 800cd48:	9b07      	ldr	r3, [sp, #28]
 800cd4a:	2b02      	cmp	r3, #2
 800cd4c:	f73f aec7 	bgt.w	800cade <_dtoa_r+0x856>
 800cd50:	f8dd 8000 	ldr.w	r8, [sp]
 800cd54:	4621      	mov	r1, r4
 800cd56:	4628      	mov	r0, r5
 800cd58:	f7ff fa08 	bl	800c16c <quorem>
 800cd5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cd60:	f808 3b01 	strb.w	r3, [r8], #1
 800cd64:	9a00      	ldr	r2, [sp, #0]
 800cd66:	eba8 0202 	sub.w	r2, r8, r2
 800cd6a:	4592      	cmp	sl, r2
 800cd6c:	ddb7      	ble.n	800ccde <_dtoa_r+0xa56>
 800cd6e:	4629      	mov	r1, r5
 800cd70:	2300      	movs	r3, #0
 800cd72:	220a      	movs	r2, #10
 800cd74:	4630      	mov	r0, r6
 800cd76:	f000 f885 	bl	800ce84 <__multadd>
 800cd7a:	4605      	mov	r5, r0
 800cd7c:	e7ea      	b.n	800cd54 <_dtoa_r+0xacc>
 800cd7e:	bf00      	nop
 800cd80:	0800e27b 	.word	0x0800e27b
 800cd84:	0800e1d4 	.word	0x0800e1d4
 800cd88:	0800e1f8 	.word	0x0800e1f8

0800cd8c <_localeconv_r>:
 800cd8c:	4800      	ldr	r0, [pc, #0]	; (800cd90 <_localeconv_r+0x4>)
 800cd8e:	4770      	bx	lr
 800cd90:	24000164 	.word	0x24000164

0800cd94 <malloc>:
 800cd94:	4b02      	ldr	r3, [pc, #8]	; (800cda0 <malloc+0xc>)
 800cd96:	4601      	mov	r1, r0
 800cd98:	6818      	ldr	r0, [r3, #0]
 800cd9a:	f000 bbef 	b.w	800d57c <_malloc_r>
 800cd9e:	bf00      	nop
 800cda0:	24000010 	.word	0x24000010

0800cda4 <memcpy>:
 800cda4:	440a      	add	r2, r1
 800cda6:	4291      	cmp	r1, r2
 800cda8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdac:	d100      	bne.n	800cdb0 <memcpy+0xc>
 800cdae:	4770      	bx	lr
 800cdb0:	b510      	push	{r4, lr}
 800cdb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdba:	4291      	cmp	r1, r2
 800cdbc:	d1f9      	bne.n	800cdb2 <memcpy+0xe>
 800cdbe:	bd10      	pop	{r4, pc}

0800cdc0 <_Balloc>:
 800cdc0:	b570      	push	{r4, r5, r6, lr}
 800cdc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	460d      	mov	r5, r1
 800cdc8:	b976      	cbnz	r6, 800cde8 <_Balloc+0x28>
 800cdca:	2010      	movs	r0, #16
 800cdcc:	f7ff ffe2 	bl	800cd94 <malloc>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	6260      	str	r0, [r4, #36]	; 0x24
 800cdd4:	b920      	cbnz	r0, 800cde0 <_Balloc+0x20>
 800cdd6:	4b18      	ldr	r3, [pc, #96]	; (800ce38 <_Balloc+0x78>)
 800cdd8:	4818      	ldr	r0, [pc, #96]	; (800ce3c <_Balloc+0x7c>)
 800cdda:	2166      	movs	r1, #102	; 0x66
 800cddc:	f000 fc38 	bl	800d650 <__assert_func>
 800cde0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cde4:	6006      	str	r6, [r0, #0]
 800cde6:	60c6      	str	r6, [r0, #12]
 800cde8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cdea:	68f3      	ldr	r3, [r6, #12]
 800cdec:	b183      	cbz	r3, 800ce10 <_Balloc+0x50>
 800cdee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cdf6:	b9b8      	cbnz	r0, 800ce28 <_Balloc+0x68>
 800cdf8:	2101      	movs	r1, #1
 800cdfa:	fa01 f605 	lsl.w	r6, r1, r5
 800cdfe:	1d72      	adds	r2, r6, #5
 800ce00:	0092      	lsls	r2, r2, #2
 800ce02:	4620      	mov	r0, r4
 800ce04:	f000 fb5a 	bl	800d4bc <_calloc_r>
 800ce08:	b160      	cbz	r0, 800ce24 <_Balloc+0x64>
 800ce0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce0e:	e00e      	b.n	800ce2e <_Balloc+0x6e>
 800ce10:	2221      	movs	r2, #33	; 0x21
 800ce12:	2104      	movs	r1, #4
 800ce14:	4620      	mov	r0, r4
 800ce16:	f000 fb51 	bl	800d4bc <_calloc_r>
 800ce1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce1c:	60f0      	str	r0, [r6, #12]
 800ce1e:	68db      	ldr	r3, [r3, #12]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d1e4      	bne.n	800cdee <_Balloc+0x2e>
 800ce24:	2000      	movs	r0, #0
 800ce26:	bd70      	pop	{r4, r5, r6, pc}
 800ce28:	6802      	ldr	r2, [r0, #0]
 800ce2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce2e:	2300      	movs	r3, #0
 800ce30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce34:	e7f7      	b.n	800ce26 <_Balloc+0x66>
 800ce36:	bf00      	nop
 800ce38:	0800e205 	.word	0x0800e205
 800ce3c:	0800e28c 	.word	0x0800e28c

0800ce40 <_Bfree>:
 800ce40:	b570      	push	{r4, r5, r6, lr}
 800ce42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce44:	4605      	mov	r5, r0
 800ce46:	460c      	mov	r4, r1
 800ce48:	b976      	cbnz	r6, 800ce68 <_Bfree+0x28>
 800ce4a:	2010      	movs	r0, #16
 800ce4c:	f7ff ffa2 	bl	800cd94 <malloc>
 800ce50:	4602      	mov	r2, r0
 800ce52:	6268      	str	r0, [r5, #36]	; 0x24
 800ce54:	b920      	cbnz	r0, 800ce60 <_Bfree+0x20>
 800ce56:	4b09      	ldr	r3, [pc, #36]	; (800ce7c <_Bfree+0x3c>)
 800ce58:	4809      	ldr	r0, [pc, #36]	; (800ce80 <_Bfree+0x40>)
 800ce5a:	218a      	movs	r1, #138	; 0x8a
 800ce5c:	f000 fbf8 	bl	800d650 <__assert_func>
 800ce60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce64:	6006      	str	r6, [r0, #0]
 800ce66:	60c6      	str	r6, [r0, #12]
 800ce68:	b13c      	cbz	r4, 800ce7a <_Bfree+0x3a>
 800ce6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce6c:	6862      	ldr	r2, [r4, #4]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce74:	6021      	str	r1, [r4, #0]
 800ce76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce7a:	bd70      	pop	{r4, r5, r6, pc}
 800ce7c:	0800e205 	.word	0x0800e205
 800ce80:	0800e28c 	.word	0x0800e28c

0800ce84 <__multadd>:
 800ce84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce88:	690e      	ldr	r6, [r1, #16]
 800ce8a:	4607      	mov	r7, r0
 800ce8c:	4698      	mov	r8, r3
 800ce8e:	460c      	mov	r4, r1
 800ce90:	f101 0014 	add.w	r0, r1, #20
 800ce94:	2300      	movs	r3, #0
 800ce96:	6805      	ldr	r5, [r0, #0]
 800ce98:	b2a9      	uxth	r1, r5
 800ce9a:	fb02 8101 	mla	r1, r2, r1, r8
 800ce9e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cea2:	0c2d      	lsrs	r5, r5, #16
 800cea4:	fb02 c505 	mla	r5, r2, r5, ip
 800cea8:	b289      	uxth	r1, r1
 800ceaa:	3301      	adds	r3, #1
 800ceac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ceb0:	429e      	cmp	r6, r3
 800ceb2:	f840 1b04 	str.w	r1, [r0], #4
 800ceb6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ceba:	dcec      	bgt.n	800ce96 <__multadd+0x12>
 800cebc:	f1b8 0f00 	cmp.w	r8, #0
 800cec0:	d022      	beq.n	800cf08 <__multadd+0x84>
 800cec2:	68a3      	ldr	r3, [r4, #8]
 800cec4:	42b3      	cmp	r3, r6
 800cec6:	dc19      	bgt.n	800cefc <__multadd+0x78>
 800cec8:	6861      	ldr	r1, [r4, #4]
 800ceca:	4638      	mov	r0, r7
 800cecc:	3101      	adds	r1, #1
 800cece:	f7ff ff77 	bl	800cdc0 <_Balloc>
 800ced2:	4605      	mov	r5, r0
 800ced4:	b928      	cbnz	r0, 800cee2 <__multadd+0x5e>
 800ced6:	4602      	mov	r2, r0
 800ced8:	4b0d      	ldr	r3, [pc, #52]	; (800cf10 <__multadd+0x8c>)
 800ceda:	480e      	ldr	r0, [pc, #56]	; (800cf14 <__multadd+0x90>)
 800cedc:	21b5      	movs	r1, #181	; 0xb5
 800cede:	f000 fbb7 	bl	800d650 <__assert_func>
 800cee2:	6922      	ldr	r2, [r4, #16]
 800cee4:	3202      	adds	r2, #2
 800cee6:	f104 010c 	add.w	r1, r4, #12
 800ceea:	0092      	lsls	r2, r2, #2
 800ceec:	300c      	adds	r0, #12
 800ceee:	f7ff ff59 	bl	800cda4 <memcpy>
 800cef2:	4621      	mov	r1, r4
 800cef4:	4638      	mov	r0, r7
 800cef6:	f7ff ffa3 	bl	800ce40 <_Bfree>
 800cefa:	462c      	mov	r4, r5
 800cefc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cf00:	3601      	adds	r6, #1
 800cf02:	f8c3 8014 	str.w	r8, [r3, #20]
 800cf06:	6126      	str	r6, [r4, #16]
 800cf08:	4620      	mov	r0, r4
 800cf0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf0e:	bf00      	nop
 800cf10:	0800e27b 	.word	0x0800e27b
 800cf14:	0800e28c 	.word	0x0800e28c

0800cf18 <__hi0bits>:
 800cf18:	0c03      	lsrs	r3, r0, #16
 800cf1a:	041b      	lsls	r3, r3, #16
 800cf1c:	b9d3      	cbnz	r3, 800cf54 <__hi0bits+0x3c>
 800cf1e:	0400      	lsls	r0, r0, #16
 800cf20:	2310      	movs	r3, #16
 800cf22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cf26:	bf04      	itt	eq
 800cf28:	0200      	lsleq	r0, r0, #8
 800cf2a:	3308      	addeq	r3, #8
 800cf2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cf30:	bf04      	itt	eq
 800cf32:	0100      	lsleq	r0, r0, #4
 800cf34:	3304      	addeq	r3, #4
 800cf36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cf3a:	bf04      	itt	eq
 800cf3c:	0080      	lsleq	r0, r0, #2
 800cf3e:	3302      	addeq	r3, #2
 800cf40:	2800      	cmp	r0, #0
 800cf42:	db05      	blt.n	800cf50 <__hi0bits+0x38>
 800cf44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cf48:	f103 0301 	add.w	r3, r3, #1
 800cf4c:	bf08      	it	eq
 800cf4e:	2320      	moveq	r3, #32
 800cf50:	4618      	mov	r0, r3
 800cf52:	4770      	bx	lr
 800cf54:	2300      	movs	r3, #0
 800cf56:	e7e4      	b.n	800cf22 <__hi0bits+0xa>

0800cf58 <__lo0bits>:
 800cf58:	6803      	ldr	r3, [r0, #0]
 800cf5a:	f013 0207 	ands.w	r2, r3, #7
 800cf5e:	4601      	mov	r1, r0
 800cf60:	d00b      	beq.n	800cf7a <__lo0bits+0x22>
 800cf62:	07da      	lsls	r2, r3, #31
 800cf64:	d424      	bmi.n	800cfb0 <__lo0bits+0x58>
 800cf66:	0798      	lsls	r0, r3, #30
 800cf68:	bf49      	itett	mi
 800cf6a:	085b      	lsrmi	r3, r3, #1
 800cf6c:	089b      	lsrpl	r3, r3, #2
 800cf6e:	2001      	movmi	r0, #1
 800cf70:	600b      	strmi	r3, [r1, #0]
 800cf72:	bf5c      	itt	pl
 800cf74:	600b      	strpl	r3, [r1, #0]
 800cf76:	2002      	movpl	r0, #2
 800cf78:	4770      	bx	lr
 800cf7a:	b298      	uxth	r0, r3
 800cf7c:	b9b0      	cbnz	r0, 800cfac <__lo0bits+0x54>
 800cf7e:	0c1b      	lsrs	r3, r3, #16
 800cf80:	2010      	movs	r0, #16
 800cf82:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cf86:	bf04      	itt	eq
 800cf88:	0a1b      	lsreq	r3, r3, #8
 800cf8a:	3008      	addeq	r0, #8
 800cf8c:	071a      	lsls	r2, r3, #28
 800cf8e:	bf04      	itt	eq
 800cf90:	091b      	lsreq	r3, r3, #4
 800cf92:	3004      	addeq	r0, #4
 800cf94:	079a      	lsls	r2, r3, #30
 800cf96:	bf04      	itt	eq
 800cf98:	089b      	lsreq	r3, r3, #2
 800cf9a:	3002      	addeq	r0, #2
 800cf9c:	07da      	lsls	r2, r3, #31
 800cf9e:	d403      	bmi.n	800cfa8 <__lo0bits+0x50>
 800cfa0:	085b      	lsrs	r3, r3, #1
 800cfa2:	f100 0001 	add.w	r0, r0, #1
 800cfa6:	d005      	beq.n	800cfb4 <__lo0bits+0x5c>
 800cfa8:	600b      	str	r3, [r1, #0]
 800cfaa:	4770      	bx	lr
 800cfac:	4610      	mov	r0, r2
 800cfae:	e7e8      	b.n	800cf82 <__lo0bits+0x2a>
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	4770      	bx	lr
 800cfb4:	2020      	movs	r0, #32
 800cfb6:	4770      	bx	lr

0800cfb8 <__i2b>:
 800cfb8:	b510      	push	{r4, lr}
 800cfba:	460c      	mov	r4, r1
 800cfbc:	2101      	movs	r1, #1
 800cfbe:	f7ff feff 	bl	800cdc0 <_Balloc>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	b928      	cbnz	r0, 800cfd2 <__i2b+0x1a>
 800cfc6:	4b05      	ldr	r3, [pc, #20]	; (800cfdc <__i2b+0x24>)
 800cfc8:	4805      	ldr	r0, [pc, #20]	; (800cfe0 <__i2b+0x28>)
 800cfca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cfce:	f000 fb3f 	bl	800d650 <__assert_func>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	6144      	str	r4, [r0, #20]
 800cfd6:	6103      	str	r3, [r0, #16]
 800cfd8:	bd10      	pop	{r4, pc}
 800cfda:	bf00      	nop
 800cfdc:	0800e27b 	.word	0x0800e27b
 800cfe0:	0800e28c 	.word	0x0800e28c

0800cfe4 <__multiply>:
 800cfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe8:	4614      	mov	r4, r2
 800cfea:	690a      	ldr	r2, [r1, #16]
 800cfec:	6923      	ldr	r3, [r4, #16]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	bfb8      	it	lt
 800cff2:	460b      	movlt	r3, r1
 800cff4:	460d      	mov	r5, r1
 800cff6:	bfbc      	itt	lt
 800cff8:	4625      	movlt	r5, r4
 800cffa:	461c      	movlt	r4, r3
 800cffc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d000:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d004:	68ab      	ldr	r3, [r5, #8]
 800d006:	6869      	ldr	r1, [r5, #4]
 800d008:	eb0a 0709 	add.w	r7, sl, r9
 800d00c:	42bb      	cmp	r3, r7
 800d00e:	b085      	sub	sp, #20
 800d010:	bfb8      	it	lt
 800d012:	3101      	addlt	r1, #1
 800d014:	f7ff fed4 	bl	800cdc0 <_Balloc>
 800d018:	b930      	cbnz	r0, 800d028 <__multiply+0x44>
 800d01a:	4602      	mov	r2, r0
 800d01c:	4b42      	ldr	r3, [pc, #264]	; (800d128 <__multiply+0x144>)
 800d01e:	4843      	ldr	r0, [pc, #268]	; (800d12c <__multiply+0x148>)
 800d020:	f240 115d 	movw	r1, #349	; 0x15d
 800d024:	f000 fb14 	bl	800d650 <__assert_func>
 800d028:	f100 0614 	add.w	r6, r0, #20
 800d02c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d030:	4633      	mov	r3, r6
 800d032:	2200      	movs	r2, #0
 800d034:	4543      	cmp	r3, r8
 800d036:	d31e      	bcc.n	800d076 <__multiply+0x92>
 800d038:	f105 0c14 	add.w	ip, r5, #20
 800d03c:	f104 0314 	add.w	r3, r4, #20
 800d040:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d044:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d048:	9202      	str	r2, [sp, #8]
 800d04a:	ebac 0205 	sub.w	r2, ip, r5
 800d04e:	3a15      	subs	r2, #21
 800d050:	f022 0203 	bic.w	r2, r2, #3
 800d054:	3204      	adds	r2, #4
 800d056:	f105 0115 	add.w	r1, r5, #21
 800d05a:	458c      	cmp	ip, r1
 800d05c:	bf38      	it	cc
 800d05e:	2204      	movcc	r2, #4
 800d060:	9201      	str	r2, [sp, #4]
 800d062:	9a02      	ldr	r2, [sp, #8]
 800d064:	9303      	str	r3, [sp, #12]
 800d066:	429a      	cmp	r2, r3
 800d068:	d808      	bhi.n	800d07c <__multiply+0x98>
 800d06a:	2f00      	cmp	r7, #0
 800d06c:	dc55      	bgt.n	800d11a <__multiply+0x136>
 800d06e:	6107      	str	r7, [r0, #16]
 800d070:	b005      	add	sp, #20
 800d072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d076:	f843 2b04 	str.w	r2, [r3], #4
 800d07a:	e7db      	b.n	800d034 <__multiply+0x50>
 800d07c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d080:	f1ba 0f00 	cmp.w	sl, #0
 800d084:	d020      	beq.n	800d0c8 <__multiply+0xe4>
 800d086:	f105 0e14 	add.w	lr, r5, #20
 800d08a:	46b1      	mov	r9, r6
 800d08c:	2200      	movs	r2, #0
 800d08e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d092:	f8d9 b000 	ldr.w	fp, [r9]
 800d096:	b2a1      	uxth	r1, r4
 800d098:	fa1f fb8b 	uxth.w	fp, fp
 800d09c:	fb0a b101 	mla	r1, sl, r1, fp
 800d0a0:	4411      	add	r1, r2
 800d0a2:	f8d9 2000 	ldr.w	r2, [r9]
 800d0a6:	0c24      	lsrs	r4, r4, #16
 800d0a8:	0c12      	lsrs	r2, r2, #16
 800d0aa:	fb0a 2404 	mla	r4, sl, r4, r2
 800d0ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d0b2:	b289      	uxth	r1, r1
 800d0b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d0b8:	45f4      	cmp	ip, lr
 800d0ba:	f849 1b04 	str.w	r1, [r9], #4
 800d0be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d0c2:	d8e4      	bhi.n	800d08e <__multiply+0xaa>
 800d0c4:	9901      	ldr	r1, [sp, #4]
 800d0c6:	5072      	str	r2, [r6, r1]
 800d0c8:	9a03      	ldr	r2, [sp, #12]
 800d0ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d0ce:	3304      	adds	r3, #4
 800d0d0:	f1b9 0f00 	cmp.w	r9, #0
 800d0d4:	d01f      	beq.n	800d116 <__multiply+0x132>
 800d0d6:	6834      	ldr	r4, [r6, #0]
 800d0d8:	f105 0114 	add.w	r1, r5, #20
 800d0dc:	46b6      	mov	lr, r6
 800d0de:	f04f 0a00 	mov.w	sl, #0
 800d0e2:	880a      	ldrh	r2, [r1, #0]
 800d0e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d0e8:	fb09 b202 	mla	r2, r9, r2, fp
 800d0ec:	4492      	add	sl, r2
 800d0ee:	b2a4      	uxth	r4, r4
 800d0f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d0f4:	f84e 4b04 	str.w	r4, [lr], #4
 800d0f8:	f851 4b04 	ldr.w	r4, [r1], #4
 800d0fc:	f8be 2000 	ldrh.w	r2, [lr]
 800d100:	0c24      	lsrs	r4, r4, #16
 800d102:	fb09 2404 	mla	r4, r9, r4, r2
 800d106:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d10a:	458c      	cmp	ip, r1
 800d10c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d110:	d8e7      	bhi.n	800d0e2 <__multiply+0xfe>
 800d112:	9a01      	ldr	r2, [sp, #4]
 800d114:	50b4      	str	r4, [r6, r2]
 800d116:	3604      	adds	r6, #4
 800d118:	e7a3      	b.n	800d062 <__multiply+0x7e>
 800d11a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d1a5      	bne.n	800d06e <__multiply+0x8a>
 800d122:	3f01      	subs	r7, #1
 800d124:	e7a1      	b.n	800d06a <__multiply+0x86>
 800d126:	bf00      	nop
 800d128:	0800e27b 	.word	0x0800e27b
 800d12c:	0800e28c 	.word	0x0800e28c

0800d130 <__pow5mult>:
 800d130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d134:	4615      	mov	r5, r2
 800d136:	f012 0203 	ands.w	r2, r2, #3
 800d13a:	4606      	mov	r6, r0
 800d13c:	460f      	mov	r7, r1
 800d13e:	d007      	beq.n	800d150 <__pow5mult+0x20>
 800d140:	4c25      	ldr	r4, [pc, #148]	; (800d1d8 <__pow5mult+0xa8>)
 800d142:	3a01      	subs	r2, #1
 800d144:	2300      	movs	r3, #0
 800d146:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d14a:	f7ff fe9b 	bl	800ce84 <__multadd>
 800d14e:	4607      	mov	r7, r0
 800d150:	10ad      	asrs	r5, r5, #2
 800d152:	d03d      	beq.n	800d1d0 <__pow5mult+0xa0>
 800d154:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d156:	b97c      	cbnz	r4, 800d178 <__pow5mult+0x48>
 800d158:	2010      	movs	r0, #16
 800d15a:	f7ff fe1b 	bl	800cd94 <malloc>
 800d15e:	4602      	mov	r2, r0
 800d160:	6270      	str	r0, [r6, #36]	; 0x24
 800d162:	b928      	cbnz	r0, 800d170 <__pow5mult+0x40>
 800d164:	4b1d      	ldr	r3, [pc, #116]	; (800d1dc <__pow5mult+0xac>)
 800d166:	481e      	ldr	r0, [pc, #120]	; (800d1e0 <__pow5mult+0xb0>)
 800d168:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d16c:	f000 fa70 	bl	800d650 <__assert_func>
 800d170:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d174:	6004      	str	r4, [r0, #0]
 800d176:	60c4      	str	r4, [r0, #12]
 800d178:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d17c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d180:	b94c      	cbnz	r4, 800d196 <__pow5mult+0x66>
 800d182:	f240 2171 	movw	r1, #625	; 0x271
 800d186:	4630      	mov	r0, r6
 800d188:	f7ff ff16 	bl	800cfb8 <__i2b>
 800d18c:	2300      	movs	r3, #0
 800d18e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d192:	4604      	mov	r4, r0
 800d194:	6003      	str	r3, [r0, #0]
 800d196:	f04f 0900 	mov.w	r9, #0
 800d19a:	07eb      	lsls	r3, r5, #31
 800d19c:	d50a      	bpl.n	800d1b4 <__pow5mult+0x84>
 800d19e:	4639      	mov	r1, r7
 800d1a0:	4622      	mov	r2, r4
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	f7ff ff1e 	bl	800cfe4 <__multiply>
 800d1a8:	4639      	mov	r1, r7
 800d1aa:	4680      	mov	r8, r0
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	f7ff fe47 	bl	800ce40 <_Bfree>
 800d1b2:	4647      	mov	r7, r8
 800d1b4:	106d      	asrs	r5, r5, #1
 800d1b6:	d00b      	beq.n	800d1d0 <__pow5mult+0xa0>
 800d1b8:	6820      	ldr	r0, [r4, #0]
 800d1ba:	b938      	cbnz	r0, 800d1cc <__pow5mult+0x9c>
 800d1bc:	4622      	mov	r2, r4
 800d1be:	4621      	mov	r1, r4
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	f7ff ff0f 	bl	800cfe4 <__multiply>
 800d1c6:	6020      	str	r0, [r4, #0]
 800d1c8:	f8c0 9000 	str.w	r9, [r0]
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	e7e4      	b.n	800d19a <__pow5mult+0x6a>
 800d1d0:	4638      	mov	r0, r7
 800d1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1d6:	bf00      	nop
 800d1d8:	0800e3e0 	.word	0x0800e3e0
 800d1dc:	0800e205 	.word	0x0800e205
 800d1e0:	0800e28c 	.word	0x0800e28c

0800d1e4 <__lshift>:
 800d1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1e8:	460c      	mov	r4, r1
 800d1ea:	6849      	ldr	r1, [r1, #4]
 800d1ec:	6923      	ldr	r3, [r4, #16]
 800d1ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1f2:	68a3      	ldr	r3, [r4, #8]
 800d1f4:	4607      	mov	r7, r0
 800d1f6:	4691      	mov	r9, r2
 800d1f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1fc:	f108 0601 	add.w	r6, r8, #1
 800d200:	42b3      	cmp	r3, r6
 800d202:	db0b      	blt.n	800d21c <__lshift+0x38>
 800d204:	4638      	mov	r0, r7
 800d206:	f7ff fddb 	bl	800cdc0 <_Balloc>
 800d20a:	4605      	mov	r5, r0
 800d20c:	b948      	cbnz	r0, 800d222 <__lshift+0x3e>
 800d20e:	4602      	mov	r2, r0
 800d210:	4b28      	ldr	r3, [pc, #160]	; (800d2b4 <__lshift+0xd0>)
 800d212:	4829      	ldr	r0, [pc, #164]	; (800d2b8 <__lshift+0xd4>)
 800d214:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d218:	f000 fa1a 	bl	800d650 <__assert_func>
 800d21c:	3101      	adds	r1, #1
 800d21e:	005b      	lsls	r3, r3, #1
 800d220:	e7ee      	b.n	800d200 <__lshift+0x1c>
 800d222:	2300      	movs	r3, #0
 800d224:	f100 0114 	add.w	r1, r0, #20
 800d228:	f100 0210 	add.w	r2, r0, #16
 800d22c:	4618      	mov	r0, r3
 800d22e:	4553      	cmp	r3, sl
 800d230:	db33      	blt.n	800d29a <__lshift+0xb6>
 800d232:	6920      	ldr	r0, [r4, #16]
 800d234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d238:	f104 0314 	add.w	r3, r4, #20
 800d23c:	f019 091f 	ands.w	r9, r9, #31
 800d240:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d244:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d248:	d02b      	beq.n	800d2a2 <__lshift+0xbe>
 800d24a:	f1c9 0e20 	rsb	lr, r9, #32
 800d24e:	468a      	mov	sl, r1
 800d250:	2200      	movs	r2, #0
 800d252:	6818      	ldr	r0, [r3, #0]
 800d254:	fa00 f009 	lsl.w	r0, r0, r9
 800d258:	4302      	orrs	r2, r0
 800d25a:	f84a 2b04 	str.w	r2, [sl], #4
 800d25e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d262:	459c      	cmp	ip, r3
 800d264:	fa22 f20e 	lsr.w	r2, r2, lr
 800d268:	d8f3      	bhi.n	800d252 <__lshift+0x6e>
 800d26a:	ebac 0304 	sub.w	r3, ip, r4
 800d26e:	3b15      	subs	r3, #21
 800d270:	f023 0303 	bic.w	r3, r3, #3
 800d274:	3304      	adds	r3, #4
 800d276:	f104 0015 	add.w	r0, r4, #21
 800d27a:	4584      	cmp	ip, r0
 800d27c:	bf38      	it	cc
 800d27e:	2304      	movcc	r3, #4
 800d280:	50ca      	str	r2, [r1, r3]
 800d282:	b10a      	cbz	r2, 800d288 <__lshift+0xa4>
 800d284:	f108 0602 	add.w	r6, r8, #2
 800d288:	3e01      	subs	r6, #1
 800d28a:	4638      	mov	r0, r7
 800d28c:	612e      	str	r6, [r5, #16]
 800d28e:	4621      	mov	r1, r4
 800d290:	f7ff fdd6 	bl	800ce40 <_Bfree>
 800d294:	4628      	mov	r0, r5
 800d296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d29a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d29e:	3301      	adds	r3, #1
 800d2a0:	e7c5      	b.n	800d22e <__lshift+0x4a>
 800d2a2:	3904      	subs	r1, #4
 800d2a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2ac:	459c      	cmp	ip, r3
 800d2ae:	d8f9      	bhi.n	800d2a4 <__lshift+0xc0>
 800d2b0:	e7ea      	b.n	800d288 <__lshift+0xa4>
 800d2b2:	bf00      	nop
 800d2b4:	0800e27b 	.word	0x0800e27b
 800d2b8:	0800e28c 	.word	0x0800e28c

0800d2bc <__mcmp>:
 800d2bc:	b530      	push	{r4, r5, lr}
 800d2be:	6902      	ldr	r2, [r0, #16]
 800d2c0:	690c      	ldr	r4, [r1, #16]
 800d2c2:	1b12      	subs	r2, r2, r4
 800d2c4:	d10e      	bne.n	800d2e4 <__mcmp+0x28>
 800d2c6:	f100 0314 	add.w	r3, r0, #20
 800d2ca:	3114      	adds	r1, #20
 800d2cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d2d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d2d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d2d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d2dc:	42a5      	cmp	r5, r4
 800d2de:	d003      	beq.n	800d2e8 <__mcmp+0x2c>
 800d2e0:	d305      	bcc.n	800d2ee <__mcmp+0x32>
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	4610      	mov	r0, r2
 800d2e6:	bd30      	pop	{r4, r5, pc}
 800d2e8:	4283      	cmp	r3, r0
 800d2ea:	d3f3      	bcc.n	800d2d4 <__mcmp+0x18>
 800d2ec:	e7fa      	b.n	800d2e4 <__mcmp+0x28>
 800d2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f2:	e7f7      	b.n	800d2e4 <__mcmp+0x28>

0800d2f4 <__mdiff>:
 800d2f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	4606      	mov	r6, r0
 800d2fc:	4611      	mov	r1, r2
 800d2fe:	4620      	mov	r0, r4
 800d300:	4617      	mov	r7, r2
 800d302:	f7ff ffdb 	bl	800d2bc <__mcmp>
 800d306:	1e05      	subs	r5, r0, #0
 800d308:	d110      	bne.n	800d32c <__mdiff+0x38>
 800d30a:	4629      	mov	r1, r5
 800d30c:	4630      	mov	r0, r6
 800d30e:	f7ff fd57 	bl	800cdc0 <_Balloc>
 800d312:	b930      	cbnz	r0, 800d322 <__mdiff+0x2e>
 800d314:	4b39      	ldr	r3, [pc, #228]	; (800d3fc <__mdiff+0x108>)
 800d316:	4602      	mov	r2, r0
 800d318:	f240 2132 	movw	r1, #562	; 0x232
 800d31c:	4838      	ldr	r0, [pc, #224]	; (800d400 <__mdiff+0x10c>)
 800d31e:	f000 f997 	bl	800d650 <__assert_func>
 800d322:	2301      	movs	r3, #1
 800d324:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32c:	bfa4      	itt	ge
 800d32e:	463b      	movge	r3, r7
 800d330:	4627      	movge	r7, r4
 800d332:	4630      	mov	r0, r6
 800d334:	6879      	ldr	r1, [r7, #4]
 800d336:	bfa6      	itte	ge
 800d338:	461c      	movge	r4, r3
 800d33a:	2500      	movge	r5, #0
 800d33c:	2501      	movlt	r5, #1
 800d33e:	f7ff fd3f 	bl	800cdc0 <_Balloc>
 800d342:	b920      	cbnz	r0, 800d34e <__mdiff+0x5a>
 800d344:	4b2d      	ldr	r3, [pc, #180]	; (800d3fc <__mdiff+0x108>)
 800d346:	4602      	mov	r2, r0
 800d348:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d34c:	e7e6      	b.n	800d31c <__mdiff+0x28>
 800d34e:	693e      	ldr	r6, [r7, #16]
 800d350:	60c5      	str	r5, [r0, #12]
 800d352:	6925      	ldr	r5, [r4, #16]
 800d354:	f107 0114 	add.w	r1, r7, #20
 800d358:	f104 0914 	add.w	r9, r4, #20
 800d35c:	f100 0e14 	add.w	lr, r0, #20
 800d360:	f107 0210 	add.w	r2, r7, #16
 800d364:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d368:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d36c:	46f2      	mov	sl, lr
 800d36e:	2700      	movs	r7, #0
 800d370:	f859 3b04 	ldr.w	r3, [r9], #4
 800d374:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d378:	fa1f f883 	uxth.w	r8, r3
 800d37c:	fa17 f78b 	uxtah	r7, r7, fp
 800d380:	0c1b      	lsrs	r3, r3, #16
 800d382:	eba7 0808 	sub.w	r8, r7, r8
 800d386:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d38a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d38e:	fa1f f888 	uxth.w	r8, r8
 800d392:	141f      	asrs	r7, r3, #16
 800d394:	454d      	cmp	r5, r9
 800d396:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d39a:	f84a 3b04 	str.w	r3, [sl], #4
 800d39e:	d8e7      	bhi.n	800d370 <__mdiff+0x7c>
 800d3a0:	1b2b      	subs	r3, r5, r4
 800d3a2:	3b15      	subs	r3, #21
 800d3a4:	f023 0303 	bic.w	r3, r3, #3
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	3415      	adds	r4, #21
 800d3ac:	42a5      	cmp	r5, r4
 800d3ae:	bf38      	it	cc
 800d3b0:	2304      	movcc	r3, #4
 800d3b2:	4419      	add	r1, r3
 800d3b4:	4473      	add	r3, lr
 800d3b6:	469e      	mov	lr, r3
 800d3b8:	460d      	mov	r5, r1
 800d3ba:	4565      	cmp	r5, ip
 800d3bc:	d30e      	bcc.n	800d3dc <__mdiff+0xe8>
 800d3be:	f10c 0203 	add.w	r2, ip, #3
 800d3c2:	1a52      	subs	r2, r2, r1
 800d3c4:	f022 0203 	bic.w	r2, r2, #3
 800d3c8:	3903      	subs	r1, #3
 800d3ca:	458c      	cmp	ip, r1
 800d3cc:	bf38      	it	cc
 800d3ce:	2200      	movcc	r2, #0
 800d3d0:	441a      	add	r2, r3
 800d3d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d3d6:	b17b      	cbz	r3, 800d3f8 <__mdiff+0x104>
 800d3d8:	6106      	str	r6, [r0, #16]
 800d3da:	e7a5      	b.n	800d328 <__mdiff+0x34>
 800d3dc:	f855 8b04 	ldr.w	r8, [r5], #4
 800d3e0:	fa17 f488 	uxtah	r4, r7, r8
 800d3e4:	1422      	asrs	r2, r4, #16
 800d3e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d3ea:	b2a4      	uxth	r4, r4
 800d3ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d3f0:	f84e 4b04 	str.w	r4, [lr], #4
 800d3f4:	1417      	asrs	r7, r2, #16
 800d3f6:	e7e0      	b.n	800d3ba <__mdiff+0xc6>
 800d3f8:	3e01      	subs	r6, #1
 800d3fa:	e7ea      	b.n	800d3d2 <__mdiff+0xde>
 800d3fc:	0800e27b 	.word	0x0800e27b
 800d400:	0800e28c 	.word	0x0800e28c

0800d404 <__d2b>:
 800d404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d408:	4689      	mov	r9, r1
 800d40a:	2101      	movs	r1, #1
 800d40c:	ec57 6b10 	vmov	r6, r7, d0
 800d410:	4690      	mov	r8, r2
 800d412:	f7ff fcd5 	bl	800cdc0 <_Balloc>
 800d416:	4604      	mov	r4, r0
 800d418:	b930      	cbnz	r0, 800d428 <__d2b+0x24>
 800d41a:	4602      	mov	r2, r0
 800d41c:	4b25      	ldr	r3, [pc, #148]	; (800d4b4 <__d2b+0xb0>)
 800d41e:	4826      	ldr	r0, [pc, #152]	; (800d4b8 <__d2b+0xb4>)
 800d420:	f240 310a 	movw	r1, #778	; 0x30a
 800d424:	f000 f914 	bl	800d650 <__assert_func>
 800d428:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d42c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d430:	bb35      	cbnz	r5, 800d480 <__d2b+0x7c>
 800d432:	2e00      	cmp	r6, #0
 800d434:	9301      	str	r3, [sp, #4]
 800d436:	d028      	beq.n	800d48a <__d2b+0x86>
 800d438:	4668      	mov	r0, sp
 800d43a:	9600      	str	r6, [sp, #0]
 800d43c:	f7ff fd8c 	bl	800cf58 <__lo0bits>
 800d440:	9900      	ldr	r1, [sp, #0]
 800d442:	b300      	cbz	r0, 800d486 <__d2b+0x82>
 800d444:	9a01      	ldr	r2, [sp, #4]
 800d446:	f1c0 0320 	rsb	r3, r0, #32
 800d44a:	fa02 f303 	lsl.w	r3, r2, r3
 800d44e:	430b      	orrs	r3, r1
 800d450:	40c2      	lsrs	r2, r0
 800d452:	6163      	str	r3, [r4, #20]
 800d454:	9201      	str	r2, [sp, #4]
 800d456:	9b01      	ldr	r3, [sp, #4]
 800d458:	61a3      	str	r3, [r4, #24]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	bf14      	ite	ne
 800d45e:	2202      	movne	r2, #2
 800d460:	2201      	moveq	r2, #1
 800d462:	6122      	str	r2, [r4, #16]
 800d464:	b1d5      	cbz	r5, 800d49c <__d2b+0x98>
 800d466:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d46a:	4405      	add	r5, r0
 800d46c:	f8c9 5000 	str.w	r5, [r9]
 800d470:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d474:	f8c8 0000 	str.w	r0, [r8]
 800d478:	4620      	mov	r0, r4
 800d47a:	b003      	add	sp, #12
 800d47c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d484:	e7d5      	b.n	800d432 <__d2b+0x2e>
 800d486:	6161      	str	r1, [r4, #20]
 800d488:	e7e5      	b.n	800d456 <__d2b+0x52>
 800d48a:	a801      	add	r0, sp, #4
 800d48c:	f7ff fd64 	bl	800cf58 <__lo0bits>
 800d490:	9b01      	ldr	r3, [sp, #4]
 800d492:	6163      	str	r3, [r4, #20]
 800d494:	2201      	movs	r2, #1
 800d496:	6122      	str	r2, [r4, #16]
 800d498:	3020      	adds	r0, #32
 800d49a:	e7e3      	b.n	800d464 <__d2b+0x60>
 800d49c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4a4:	f8c9 0000 	str.w	r0, [r9]
 800d4a8:	6918      	ldr	r0, [r3, #16]
 800d4aa:	f7ff fd35 	bl	800cf18 <__hi0bits>
 800d4ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4b2:	e7df      	b.n	800d474 <__d2b+0x70>
 800d4b4:	0800e27b 	.word	0x0800e27b
 800d4b8:	0800e28c 	.word	0x0800e28c

0800d4bc <_calloc_r>:
 800d4bc:	b513      	push	{r0, r1, r4, lr}
 800d4be:	434a      	muls	r2, r1
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	9201      	str	r2, [sp, #4]
 800d4c4:	f000 f85a 	bl	800d57c <_malloc_r>
 800d4c8:	4604      	mov	r4, r0
 800d4ca:	b118      	cbz	r0, 800d4d4 <_calloc_r+0x18>
 800d4cc:	9a01      	ldr	r2, [sp, #4]
 800d4ce:	2100      	movs	r1, #0
 800d4d0:	f7fe fa00 	bl	800b8d4 <memset>
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	b002      	add	sp, #8
 800d4d8:	bd10      	pop	{r4, pc}
	...

0800d4dc <_free_r>:
 800d4dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4de:	2900      	cmp	r1, #0
 800d4e0:	d048      	beq.n	800d574 <_free_r+0x98>
 800d4e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4e6:	9001      	str	r0, [sp, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	f1a1 0404 	sub.w	r4, r1, #4
 800d4ee:	bfb8      	it	lt
 800d4f0:	18e4      	addlt	r4, r4, r3
 800d4f2:	f000 f8ef 	bl	800d6d4 <__malloc_lock>
 800d4f6:	4a20      	ldr	r2, [pc, #128]	; (800d578 <_free_r+0x9c>)
 800d4f8:	9801      	ldr	r0, [sp, #4]
 800d4fa:	6813      	ldr	r3, [r2, #0]
 800d4fc:	4615      	mov	r5, r2
 800d4fe:	b933      	cbnz	r3, 800d50e <_free_r+0x32>
 800d500:	6063      	str	r3, [r4, #4]
 800d502:	6014      	str	r4, [r2, #0]
 800d504:	b003      	add	sp, #12
 800d506:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d50a:	f000 b8e9 	b.w	800d6e0 <__malloc_unlock>
 800d50e:	42a3      	cmp	r3, r4
 800d510:	d90b      	bls.n	800d52a <_free_r+0x4e>
 800d512:	6821      	ldr	r1, [r4, #0]
 800d514:	1862      	adds	r2, r4, r1
 800d516:	4293      	cmp	r3, r2
 800d518:	bf04      	itt	eq
 800d51a:	681a      	ldreq	r2, [r3, #0]
 800d51c:	685b      	ldreq	r3, [r3, #4]
 800d51e:	6063      	str	r3, [r4, #4]
 800d520:	bf04      	itt	eq
 800d522:	1852      	addeq	r2, r2, r1
 800d524:	6022      	streq	r2, [r4, #0]
 800d526:	602c      	str	r4, [r5, #0]
 800d528:	e7ec      	b.n	800d504 <_free_r+0x28>
 800d52a:	461a      	mov	r2, r3
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	b10b      	cbz	r3, 800d534 <_free_r+0x58>
 800d530:	42a3      	cmp	r3, r4
 800d532:	d9fa      	bls.n	800d52a <_free_r+0x4e>
 800d534:	6811      	ldr	r1, [r2, #0]
 800d536:	1855      	adds	r5, r2, r1
 800d538:	42a5      	cmp	r5, r4
 800d53a:	d10b      	bne.n	800d554 <_free_r+0x78>
 800d53c:	6824      	ldr	r4, [r4, #0]
 800d53e:	4421      	add	r1, r4
 800d540:	1854      	adds	r4, r2, r1
 800d542:	42a3      	cmp	r3, r4
 800d544:	6011      	str	r1, [r2, #0]
 800d546:	d1dd      	bne.n	800d504 <_free_r+0x28>
 800d548:	681c      	ldr	r4, [r3, #0]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	6053      	str	r3, [r2, #4]
 800d54e:	4421      	add	r1, r4
 800d550:	6011      	str	r1, [r2, #0]
 800d552:	e7d7      	b.n	800d504 <_free_r+0x28>
 800d554:	d902      	bls.n	800d55c <_free_r+0x80>
 800d556:	230c      	movs	r3, #12
 800d558:	6003      	str	r3, [r0, #0]
 800d55a:	e7d3      	b.n	800d504 <_free_r+0x28>
 800d55c:	6825      	ldr	r5, [r4, #0]
 800d55e:	1961      	adds	r1, r4, r5
 800d560:	428b      	cmp	r3, r1
 800d562:	bf04      	itt	eq
 800d564:	6819      	ldreq	r1, [r3, #0]
 800d566:	685b      	ldreq	r3, [r3, #4]
 800d568:	6063      	str	r3, [r4, #4]
 800d56a:	bf04      	itt	eq
 800d56c:	1949      	addeq	r1, r1, r5
 800d56e:	6021      	streq	r1, [r4, #0]
 800d570:	6054      	str	r4, [r2, #4]
 800d572:	e7c7      	b.n	800d504 <_free_r+0x28>
 800d574:	b003      	add	sp, #12
 800d576:	bd30      	pop	{r4, r5, pc}
 800d578:	240009e0 	.word	0x240009e0

0800d57c <_malloc_r>:
 800d57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57e:	1ccd      	adds	r5, r1, #3
 800d580:	f025 0503 	bic.w	r5, r5, #3
 800d584:	3508      	adds	r5, #8
 800d586:	2d0c      	cmp	r5, #12
 800d588:	bf38      	it	cc
 800d58a:	250c      	movcc	r5, #12
 800d58c:	2d00      	cmp	r5, #0
 800d58e:	4606      	mov	r6, r0
 800d590:	db01      	blt.n	800d596 <_malloc_r+0x1a>
 800d592:	42a9      	cmp	r1, r5
 800d594:	d903      	bls.n	800d59e <_malloc_r+0x22>
 800d596:	230c      	movs	r3, #12
 800d598:	6033      	str	r3, [r6, #0]
 800d59a:	2000      	movs	r0, #0
 800d59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d59e:	f000 f899 	bl	800d6d4 <__malloc_lock>
 800d5a2:	4921      	ldr	r1, [pc, #132]	; (800d628 <_malloc_r+0xac>)
 800d5a4:	680a      	ldr	r2, [r1, #0]
 800d5a6:	4614      	mov	r4, r2
 800d5a8:	b99c      	cbnz	r4, 800d5d2 <_malloc_r+0x56>
 800d5aa:	4f20      	ldr	r7, [pc, #128]	; (800d62c <_malloc_r+0xb0>)
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	b923      	cbnz	r3, 800d5ba <_malloc_r+0x3e>
 800d5b0:	4621      	mov	r1, r4
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	f000 f83c 	bl	800d630 <_sbrk_r>
 800d5b8:	6038      	str	r0, [r7, #0]
 800d5ba:	4629      	mov	r1, r5
 800d5bc:	4630      	mov	r0, r6
 800d5be:	f000 f837 	bl	800d630 <_sbrk_r>
 800d5c2:	1c43      	adds	r3, r0, #1
 800d5c4:	d123      	bne.n	800d60e <_malloc_r+0x92>
 800d5c6:	230c      	movs	r3, #12
 800d5c8:	6033      	str	r3, [r6, #0]
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	f000 f888 	bl	800d6e0 <__malloc_unlock>
 800d5d0:	e7e3      	b.n	800d59a <_malloc_r+0x1e>
 800d5d2:	6823      	ldr	r3, [r4, #0]
 800d5d4:	1b5b      	subs	r3, r3, r5
 800d5d6:	d417      	bmi.n	800d608 <_malloc_r+0x8c>
 800d5d8:	2b0b      	cmp	r3, #11
 800d5da:	d903      	bls.n	800d5e4 <_malloc_r+0x68>
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	441c      	add	r4, r3
 800d5e0:	6025      	str	r5, [r4, #0]
 800d5e2:	e004      	b.n	800d5ee <_malloc_r+0x72>
 800d5e4:	6863      	ldr	r3, [r4, #4]
 800d5e6:	42a2      	cmp	r2, r4
 800d5e8:	bf0c      	ite	eq
 800d5ea:	600b      	streq	r3, [r1, #0]
 800d5ec:	6053      	strne	r3, [r2, #4]
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	f000 f876 	bl	800d6e0 <__malloc_unlock>
 800d5f4:	f104 000b 	add.w	r0, r4, #11
 800d5f8:	1d23      	adds	r3, r4, #4
 800d5fa:	f020 0007 	bic.w	r0, r0, #7
 800d5fe:	1ac2      	subs	r2, r0, r3
 800d600:	d0cc      	beq.n	800d59c <_malloc_r+0x20>
 800d602:	1a1b      	subs	r3, r3, r0
 800d604:	50a3      	str	r3, [r4, r2]
 800d606:	e7c9      	b.n	800d59c <_malloc_r+0x20>
 800d608:	4622      	mov	r2, r4
 800d60a:	6864      	ldr	r4, [r4, #4]
 800d60c:	e7cc      	b.n	800d5a8 <_malloc_r+0x2c>
 800d60e:	1cc4      	adds	r4, r0, #3
 800d610:	f024 0403 	bic.w	r4, r4, #3
 800d614:	42a0      	cmp	r0, r4
 800d616:	d0e3      	beq.n	800d5e0 <_malloc_r+0x64>
 800d618:	1a21      	subs	r1, r4, r0
 800d61a:	4630      	mov	r0, r6
 800d61c:	f000 f808 	bl	800d630 <_sbrk_r>
 800d620:	3001      	adds	r0, #1
 800d622:	d1dd      	bne.n	800d5e0 <_malloc_r+0x64>
 800d624:	e7cf      	b.n	800d5c6 <_malloc_r+0x4a>
 800d626:	bf00      	nop
 800d628:	240009e0 	.word	0x240009e0
 800d62c:	240009e4 	.word	0x240009e4

0800d630 <_sbrk_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	4d06      	ldr	r5, [pc, #24]	; (800d64c <_sbrk_r+0x1c>)
 800d634:	2300      	movs	r3, #0
 800d636:	4604      	mov	r4, r0
 800d638:	4608      	mov	r0, r1
 800d63a:	602b      	str	r3, [r5, #0]
 800d63c:	f7f5 fb90 	bl	8002d60 <_sbrk>
 800d640:	1c43      	adds	r3, r0, #1
 800d642:	d102      	bne.n	800d64a <_sbrk_r+0x1a>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	b103      	cbz	r3, 800d64a <_sbrk_r+0x1a>
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	240009ec 	.word	0x240009ec

0800d650 <__assert_func>:
 800d650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d652:	4614      	mov	r4, r2
 800d654:	461a      	mov	r2, r3
 800d656:	4b09      	ldr	r3, [pc, #36]	; (800d67c <__assert_func+0x2c>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4605      	mov	r5, r0
 800d65c:	68d8      	ldr	r0, [r3, #12]
 800d65e:	b14c      	cbz	r4, 800d674 <__assert_func+0x24>
 800d660:	4b07      	ldr	r3, [pc, #28]	; (800d680 <__assert_func+0x30>)
 800d662:	9100      	str	r1, [sp, #0]
 800d664:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d668:	4906      	ldr	r1, [pc, #24]	; (800d684 <__assert_func+0x34>)
 800d66a:	462b      	mov	r3, r5
 800d66c:	f000 f80e 	bl	800d68c <fiprintf>
 800d670:	f000 fa64 	bl	800db3c <abort>
 800d674:	4b04      	ldr	r3, [pc, #16]	; (800d688 <__assert_func+0x38>)
 800d676:	461c      	mov	r4, r3
 800d678:	e7f3      	b.n	800d662 <__assert_func+0x12>
 800d67a:	bf00      	nop
 800d67c:	24000010 	.word	0x24000010
 800d680:	0800e3ec 	.word	0x0800e3ec
 800d684:	0800e3f9 	.word	0x0800e3f9
 800d688:	0800e427 	.word	0x0800e427

0800d68c <fiprintf>:
 800d68c:	b40e      	push	{r1, r2, r3}
 800d68e:	b503      	push	{r0, r1, lr}
 800d690:	4601      	mov	r1, r0
 800d692:	ab03      	add	r3, sp, #12
 800d694:	4805      	ldr	r0, [pc, #20]	; (800d6ac <fiprintf+0x20>)
 800d696:	f853 2b04 	ldr.w	r2, [r3], #4
 800d69a:	6800      	ldr	r0, [r0, #0]
 800d69c:	9301      	str	r3, [sp, #4]
 800d69e:	f000 f84f 	bl	800d740 <_vfiprintf_r>
 800d6a2:	b002      	add	sp, #8
 800d6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6a8:	b003      	add	sp, #12
 800d6aa:	4770      	bx	lr
 800d6ac:	24000010 	.word	0x24000010

0800d6b0 <__ascii_mbtowc>:
 800d6b0:	b082      	sub	sp, #8
 800d6b2:	b901      	cbnz	r1, 800d6b6 <__ascii_mbtowc+0x6>
 800d6b4:	a901      	add	r1, sp, #4
 800d6b6:	b142      	cbz	r2, 800d6ca <__ascii_mbtowc+0x1a>
 800d6b8:	b14b      	cbz	r3, 800d6ce <__ascii_mbtowc+0x1e>
 800d6ba:	7813      	ldrb	r3, [r2, #0]
 800d6bc:	600b      	str	r3, [r1, #0]
 800d6be:	7812      	ldrb	r2, [r2, #0]
 800d6c0:	1e10      	subs	r0, r2, #0
 800d6c2:	bf18      	it	ne
 800d6c4:	2001      	movne	r0, #1
 800d6c6:	b002      	add	sp, #8
 800d6c8:	4770      	bx	lr
 800d6ca:	4610      	mov	r0, r2
 800d6cc:	e7fb      	b.n	800d6c6 <__ascii_mbtowc+0x16>
 800d6ce:	f06f 0001 	mvn.w	r0, #1
 800d6d2:	e7f8      	b.n	800d6c6 <__ascii_mbtowc+0x16>

0800d6d4 <__malloc_lock>:
 800d6d4:	4801      	ldr	r0, [pc, #4]	; (800d6dc <__malloc_lock+0x8>)
 800d6d6:	f000 bbf1 	b.w	800debc <__retarget_lock_acquire_recursive>
 800d6da:	bf00      	nop
 800d6dc:	240009f4 	.word	0x240009f4

0800d6e0 <__malloc_unlock>:
 800d6e0:	4801      	ldr	r0, [pc, #4]	; (800d6e8 <__malloc_unlock+0x8>)
 800d6e2:	f000 bbec 	b.w	800debe <__retarget_lock_release_recursive>
 800d6e6:	bf00      	nop
 800d6e8:	240009f4 	.word	0x240009f4

0800d6ec <__sfputc_r>:
 800d6ec:	6893      	ldr	r3, [r2, #8]
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	b410      	push	{r4}
 800d6f4:	6093      	str	r3, [r2, #8]
 800d6f6:	da08      	bge.n	800d70a <__sfputc_r+0x1e>
 800d6f8:	6994      	ldr	r4, [r2, #24]
 800d6fa:	42a3      	cmp	r3, r4
 800d6fc:	db01      	blt.n	800d702 <__sfputc_r+0x16>
 800d6fe:	290a      	cmp	r1, #10
 800d700:	d103      	bne.n	800d70a <__sfputc_r+0x1e>
 800d702:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d706:	f000 b94b 	b.w	800d9a0 <__swbuf_r>
 800d70a:	6813      	ldr	r3, [r2, #0]
 800d70c:	1c58      	adds	r0, r3, #1
 800d70e:	6010      	str	r0, [r2, #0]
 800d710:	7019      	strb	r1, [r3, #0]
 800d712:	4608      	mov	r0, r1
 800d714:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d718:	4770      	bx	lr

0800d71a <__sfputs_r>:
 800d71a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d71c:	4606      	mov	r6, r0
 800d71e:	460f      	mov	r7, r1
 800d720:	4614      	mov	r4, r2
 800d722:	18d5      	adds	r5, r2, r3
 800d724:	42ac      	cmp	r4, r5
 800d726:	d101      	bne.n	800d72c <__sfputs_r+0x12>
 800d728:	2000      	movs	r0, #0
 800d72a:	e007      	b.n	800d73c <__sfputs_r+0x22>
 800d72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d730:	463a      	mov	r2, r7
 800d732:	4630      	mov	r0, r6
 800d734:	f7ff ffda 	bl	800d6ec <__sfputc_r>
 800d738:	1c43      	adds	r3, r0, #1
 800d73a:	d1f3      	bne.n	800d724 <__sfputs_r+0xa>
 800d73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d740 <_vfiprintf_r>:
 800d740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d744:	460d      	mov	r5, r1
 800d746:	b09d      	sub	sp, #116	; 0x74
 800d748:	4614      	mov	r4, r2
 800d74a:	4698      	mov	r8, r3
 800d74c:	4606      	mov	r6, r0
 800d74e:	b118      	cbz	r0, 800d758 <_vfiprintf_r+0x18>
 800d750:	6983      	ldr	r3, [r0, #24]
 800d752:	b90b      	cbnz	r3, 800d758 <_vfiprintf_r+0x18>
 800d754:	f000 fb14 	bl	800dd80 <__sinit>
 800d758:	4b89      	ldr	r3, [pc, #548]	; (800d980 <_vfiprintf_r+0x240>)
 800d75a:	429d      	cmp	r5, r3
 800d75c:	d11b      	bne.n	800d796 <_vfiprintf_r+0x56>
 800d75e:	6875      	ldr	r5, [r6, #4]
 800d760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d762:	07d9      	lsls	r1, r3, #31
 800d764:	d405      	bmi.n	800d772 <_vfiprintf_r+0x32>
 800d766:	89ab      	ldrh	r3, [r5, #12]
 800d768:	059a      	lsls	r2, r3, #22
 800d76a:	d402      	bmi.n	800d772 <_vfiprintf_r+0x32>
 800d76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d76e:	f000 fba5 	bl	800debc <__retarget_lock_acquire_recursive>
 800d772:	89ab      	ldrh	r3, [r5, #12]
 800d774:	071b      	lsls	r3, r3, #28
 800d776:	d501      	bpl.n	800d77c <_vfiprintf_r+0x3c>
 800d778:	692b      	ldr	r3, [r5, #16]
 800d77a:	b9eb      	cbnz	r3, 800d7b8 <_vfiprintf_r+0x78>
 800d77c:	4629      	mov	r1, r5
 800d77e:	4630      	mov	r0, r6
 800d780:	f000 f96e 	bl	800da60 <__swsetup_r>
 800d784:	b1c0      	cbz	r0, 800d7b8 <_vfiprintf_r+0x78>
 800d786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d788:	07dc      	lsls	r4, r3, #31
 800d78a:	d50e      	bpl.n	800d7aa <_vfiprintf_r+0x6a>
 800d78c:	f04f 30ff 	mov.w	r0, #4294967295
 800d790:	b01d      	add	sp, #116	; 0x74
 800d792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d796:	4b7b      	ldr	r3, [pc, #492]	; (800d984 <_vfiprintf_r+0x244>)
 800d798:	429d      	cmp	r5, r3
 800d79a:	d101      	bne.n	800d7a0 <_vfiprintf_r+0x60>
 800d79c:	68b5      	ldr	r5, [r6, #8]
 800d79e:	e7df      	b.n	800d760 <_vfiprintf_r+0x20>
 800d7a0:	4b79      	ldr	r3, [pc, #484]	; (800d988 <_vfiprintf_r+0x248>)
 800d7a2:	429d      	cmp	r5, r3
 800d7a4:	bf08      	it	eq
 800d7a6:	68f5      	ldreq	r5, [r6, #12]
 800d7a8:	e7da      	b.n	800d760 <_vfiprintf_r+0x20>
 800d7aa:	89ab      	ldrh	r3, [r5, #12]
 800d7ac:	0598      	lsls	r0, r3, #22
 800d7ae:	d4ed      	bmi.n	800d78c <_vfiprintf_r+0x4c>
 800d7b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7b2:	f000 fb84 	bl	800debe <__retarget_lock_release_recursive>
 800d7b6:	e7e9      	b.n	800d78c <_vfiprintf_r+0x4c>
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d7bc:	2320      	movs	r3, #32
 800d7be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7c6:	2330      	movs	r3, #48	; 0x30
 800d7c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d98c <_vfiprintf_r+0x24c>
 800d7cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7d0:	f04f 0901 	mov.w	r9, #1
 800d7d4:	4623      	mov	r3, r4
 800d7d6:	469a      	mov	sl, r3
 800d7d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7dc:	b10a      	cbz	r2, 800d7e2 <_vfiprintf_r+0xa2>
 800d7de:	2a25      	cmp	r2, #37	; 0x25
 800d7e0:	d1f9      	bne.n	800d7d6 <_vfiprintf_r+0x96>
 800d7e2:	ebba 0b04 	subs.w	fp, sl, r4
 800d7e6:	d00b      	beq.n	800d800 <_vfiprintf_r+0xc0>
 800d7e8:	465b      	mov	r3, fp
 800d7ea:	4622      	mov	r2, r4
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	f7ff ff93 	bl	800d71a <__sfputs_r>
 800d7f4:	3001      	adds	r0, #1
 800d7f6:	f000 80aa 	beq.w	800d94e <_vfiprintf_r+0x20e>
 800d7fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7fc:	445a      	add	r2, fp
 800d7fe:	9209      	str	r2, [sp, #36]	; 0x24
 800d800:	f89a 3000 	ldrb.w	r3, [sl]
 800d804:	2b00      	cmp	r3, #0
 800d806:	f000 80a2 	beq.w	800d94e <_vfiprintf_r+0x20e>
 800d80a:	2300      	movs	r3, #0
 800d80c:	f04f 32ff 	mov.w	r2, #4294967295
 800d810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d814:	f10a 0a01 	add.w	sl, sl, #1
 800d818:	9304      	str	r3, [sp, #16]
 800d81a:	9307      	str	r3, [sp, #28]
 800d81c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d820:	931a      	str	r3, [sp, #104]	; 0x68
 800d822:	4654      	mov	r4, sl
 800d824:	2205      	movs	r2, #5
 800d826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d82a:	4858      	ldr	r0, [pc, #352]	; (800d98c <_vfiprintf_r+0x24c>)
 800d82c:	f7f2 fd60 	bl	80002f0 <memchr>
 800d830:	9a04      	ldr	r2, [sp, #16]
 800d832:	b9d8      	cbnz	r0, 800d86c <_vfiprintf_r+0x12c>
 800d834:	06d1      	lsls	r1, r2, #27
 800d836:	bf44      	itt	mi
 800d838:	2320      	movmi	r3, #32
 800d83a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d83e:	0713      	lsls	r3, r2, #28
 800d840:	bf44      	itt	mi
 800d842:	232b      	movmi	r3, #43	; 0x2b
 800d844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d848:	f89a 3000 	ldrb.w	r3, [sl]
 800d84c:	2b2a      	cmp	r3, #42	; 0x2a
 800d84e:	d015      	beq.n	800d87c <_vfiprintf_r+0x13c>
 800d850:	9a07      	ldr	r2, [sp, #28]
 800d852:	4654      	mov	r4, sl
 800d854:	2000      	movs	r0, #0
 800d856:	f04f 0c0a 	mov.w	ip, #10
 800d85a:	4621      	mov	r1, r4
 800d85c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d860:	3b30      	subs	r3, #48	; 0x30
 800d862:	2b09      	cmp	r3, #9
 800d864:	d94e      	bls.n	800d904 <_vfiprintf_r+0x1c4>
 800d866:	b1b0      	cbz	r0, 800d896 <_vfiprintf_r+0x156>
 800d868:	9207      	str	r2, [sp, #28]
 800d86a:	e014      	b.n	800d896 <_vfiprintf_r+0x156>
 800d86c:	eba0 0308 	sub.w	r3, r0, r8
 800d870:	fa09 f303 	lsl.w	r3, r9, r3
 800d874:	4313      	orrs	r3, r2
 800d876:	9304      	str	r3, [sp, #16]
 800d878:	46a2      	mov	sl, r4
 800d87a:	e7d2      	b.n	800d822 <_vfiprintf_r+0xe2>
 800d87c:	9b03      	ldr	r3, [sp, #12]
 800d87e:	1d19      	adds	r1, r3, #4
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	9103      	str	r1, [sp, #12]
 800d884:	2b00      	cmp	r3, #0
 800d886:	bfbb      	ittet	lt
 800d888:	425b      	neglt	r3, r3
 800d88a:	f042 0202 	orrlt.w	r2, r2, #2
 800d88e:	9307      	strge	r3, [sp, #28]
 800d890:	9307      	strlt	r3, [sp, #28]
 800d892:	bfb8      	it	lt
 800d894:	9204      	strlt	r2, [sp, #16]
 800d896:	7823      	ldrb	r3, [r4, #0]
 800d898:	2b2e      	cmp	r3, #46	; 0x2e
 800d89a:	d10c      	bne.n	800d8b6 <_vfiprintf_r+0x176>
 800d89c:	7863      	ldrb	r3, [r4, #1]
 800d89e:	2b2a      	cmp	r3, #42	; 0x2a
 800d8a0:	d135      	bne.n	800d90e <_vfiprintf_r+0x1ce>
 800d8a2:	9b03      	ldr	r3, [sp, #12]
 800d8a4:	1d1a      	adds	r2, r3, #4
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	9203      	str	r2, [sp, #12]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	bfb8      	it	lt
 800d8ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8b2:	3402      	adds	r4, #2
 800d8b4:	9305      	str	r3, [sp, #20]
 800d8b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d99c <_vfiprintf_r+0x25c>
 800d8ba:	7821      	ldrb	r1, [r4, #0]
 800d8bc:	2203      	movs	r2, #3
 800d8be:	4650      	mov	r0, sl
 800d8c0:	f7f2 fd16 	bl	80002f0 <memchr>
 800d8c4:	b140      	cbz	r0, 800d8d8 <_vfiprintf_r+0x198>
 800d8c6:	2340      	movs	r3, #64	; 0x40
 800d8c8:	eba0 000a 	sub.w	r0, r0, sl
 800d8cc:	fa03 f000 	lsl.w	r0, r3, r0
 800d8d0:	9b04      	ldr	r3, [sp, #16]
 800d8d2:	4303      	orrs	r3, r0
 800d8d4:	3401      	adds	r4, #1
 800d8d6:	9304      	str	r3, [sp, #16]
 800d8d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8dc:	482c      	ldr	r0, [pc, #176]	; (800d990 <_vfiprintf_r+0x250>)
 800d8de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8e2:	2206      	movs	r2, #6
 800d8e4:	f7f2 fd04 	bl	80002f0 <memchr>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	d03f      	beq.n	800d96c <_vfiprintf_r+0x22c>
 800d8ec:	4b29      	ldr	r3, [pc, #164]	; (800d994 <_vfiprintf_r+0x254>)
 800d8ee:	bb1b      	cbnz	r3, 800d938 <_vfiprintf_r+0x1f8>
 800d8f0:	9b03      	ldr	r3, [sp, #12]
 800d8f2:	3307      	adds	r3, #7
 800d8f4:	f023 0307 	bic.w	r3, r3, #7
 800d8f8:	3308      	adds	r3, #8
 800d8fa:	9303      	str	r3, [sp, #12]
 800d8fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8fe:	443b      	add	r3, r7
 800d900:	9309      	str	r3, [sp, #36]	; 0x24
 800d902:	e767      	b.n	800d7d4 <_vfiprintf_r+0x94>
 800d904:	fb0c 3202 	mla	r2, ip, r2, r3
 800d908:	460c      	mov	r4, r1
 800d90a:	2001      	movs	r0, #1
 800d90c:	e7a5      	b.n	800d85a <_vfiprintf_r+0x11a>
 800d90e:	2300      	movs	r3, #0
 800d910:	3401      	adds	r4, #1
 800d912:	9305      	str	r3, [sp, #20]
 800d914:	4619      	mov	r1, r3
 800d916:	f04f 0c0a 	mov.w	ip, #10
 800d91a:	4620      	mov	r0, r4
 800d91c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d920:	3a30      	subs	r2, #48	; 0x30
 800d922:	2a09      	cmp	r2, #9
 800d924:	d903      	bls.n	800d92e <_vfiprintf_r+0x1ee>
 800d926:	2b00      	cmp	r3, #0
 800d928:	d0c5      	beq.n	800d8b6 <_vfiprintf_r+0x176>
 800d92a:	9105      	str	r1, [sp, #20]
 800d92c:	e7c3      	b.n	800d8b6 <_vfiprintf_r+0x176>
 800d92e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d932:	4604      	mov	r4, r0
 800d934:	2301      	movs	r3, #1
 800d936:	e7f0      	b.n	800d91a <_vfiprintf_r+0x1da>
 800d938:	ab03      	add	r3, sp, #12
 800d93a:	9300      	str	r3, [sp, #0]
 800d93c:	462a      	mov	r2, r5
 800d93e:	4b16      	ldr	r3, [pc, #88]	; (800d998 <_vfiprintf_r+0x258>)
 800d940:	a904      	add	r1, sp, #16
 800d942:	4630      	mov	r0, r6
 800d944:	f7fe f860 	bl	800ba08 <_printf_float>
 800d948:	4607      	mov	r7, r0
 800d94a:	1c78      	adds	r0, r7, #1
 800d94c:	d1d6      	bne.n	800d8fc <_vfiprintf_r+0x1bc>
 800d94e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d950:	07d9      	lsls	r1, r3, #31
 800d952:	d405      	bmi.n	800d960 <_vfiprintf_r+0x220>
 800d954:	89ab      	ldrh	r3, [r5, #12]
 800d956:	059a      	lsls	r2, r3, #22
 800d958:	d402      	bmi.n	800d960 <_vfiprintf_r+0x220>
 800d95a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d95c:	f000 faaf 	bl	800debe <__retarget_lock_release_recursive>
 800d960:	89ab      	ldrh	r3, [r5, #12]
 800d962:	065b      	lsls	r3, r3, #25
 800d964:	f53f af12 	bmi.w	800d78c <_vfiprintf_r+0x4c>
 800d968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d96a:	e711      	b.n	800d790 <_vfiprintf_r+0x50>
 800d96c:	ab03      	add	r3, sp, #12
 800d96e:	9300      	str	r3, [sp, #0]
 800d970:	462a      	mov	r2, r5
 800d972:	4b09      	ldr	r3, [pc, #36]	; (800d998 <_vfiprintf_r+0x258>)
 800d974:	a904      	add	r1, sp, #16
 800d976:	4630      	mov	r0, r6
 800d978:	f7fe fad2 	bl	800bf20 <_printf_i>
 800d97c:	e7e4      	b.n	800d948 <_vfiprintf_r+0x208>
 800d97e:	bf00      	nop
 800d980:	0800e564 	.word	0x0800e564
 800d984:	0800e584 	.word	0x0800e584
 800d988:	0800e544 	.word	0x0800e544
 800d98c:	0800e432 	.word	0x0800e432
 800d990:	0800e43c 	.word	0x0800e43c
 800d994:	0800ba09 	.word	0x0800ba09
 800d998:	0800d71b 	.word	0x0800d71b
 800d99c:	0800e438 	.word	0x0800e438

0800d9a0 <__swbuf_r>:
 800d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a2:	460e      	mov	r6, r1
 800d9a4:	4614      	mov	r4, r2
 800d9a6:	4605      	mov	r5, r0
 800d9a8:	b118      	cbz	r0, 800d9b2 <__swbuf_r+0x12>
 800d9aa:	6983      	ldr	r3, [r0, #24]
 800d9ac:	b90b      	cbnz	r3, 800d9b2 <__swbuf_r+0x12>
 800d9ae:	f000 f9e7 	bl	800dd80 <__sinit>
 800d9b2:	4b21      	ldr	r3, [pc, #132]	; (800da38 <__swbuf_r+0x98>)
 800d9b4:	429c      	cmp	r4, r3
 800d9b6:	d12b      	bne.n	800da10 <__swbuf_r+0x70>
 800d9b8:	686c      	ldr	r4, [r5, #4]
 800d9ba:	69a3      	ldr	r3, [r4, #24]
 800d9bc:	60a3      	str	r3, [r4, #8]
 800d9be:	89a3      	ldrh	r3, [r4, #12]
 800d9c0:	071a      	lsls	r2, r3, #28
 800d9c2:	d52f      	bpl.n	800da24 <__swbuf_r+0x84>
 800d9c4:	6923      	ldr	r3, [r4, #16]
 800d9c6:	b36b      	cbz	r3, 800da24 <__swbuf_r+0x84>
 800d9c8:	6923      	ldr	r3, [r4, #16]
 800d9ca:	6820      	ldr	r0, [r4, #0]
 800d9cc:	1ac0      	subs	r0, r0, r3
 800d9ce:	6963      	ldr	r3, [r4, #20]
 800d9d0:	b2f6      	uxtb	r6, r6
 800d9d2:	4283      	cmp	r3, r0
 800d9d4:	4637      	mov	r7, r6
 800d9d6:	dc04      	bgt.n	800d9e2 <__swbuf_r+0x42>
 800d9d8:	4621      	mov	r1, r4
 800d9da:	4628      	mov	r0, r5
 800d9dc:	f000 f93c 	bl	800dc58 <_fflush_r>
 800d9e0:	bb30      	cbnz	r0, 800da30 <__swbuf_r+0x90>
 800d9e2:	68a3      	ldr	r3, [r4, #8]
 800d9e4:	3b01      	subs	r3, #1
 800d9e6:	60a3      	str	r3, [r4, #8]
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	1c5a      	adds	r2, r3, #1
 800d9ec:	6022      	str	r2, [r4, #0]
 800d9ee:	701e      	strb	r6, [r3, #0]
 800d9f0:	6963      	ldr	r3, [r4, #20]
 800d9f2:	3001      	adds	r0, #1
 800d9f4:	4283      	cmp	r3, r0
 800d9f6:	d004      	beq.n	800da02 <__swbuf_r+0x62>
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	07db      	lsls	r3, r3, #31
 800d9fc:	d506      	bpl.n	800da0c <__swbuf_r+0x6c>
 800d9fe:	2e0a      	cmp	r6, #10
 800da00:	d104      	bne.n	800da0c <__swbuf_r+0x6c>
 800da02:	4621      	mov	r1, r4
 800da04:	4628      	mov	r0, r5
 800da06:	f000 f927 	bl	800dc58 <_fflush_r>
 800da0a:	b988      	cbnz	r0, 800da30 <__swbuf_r+0x90>
 800da0c:	4638      	mov	r0, r7
 800da0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da10:	4b0a      	ldr	r3, [pc, #40]	; (800da3c <__swbuf_r+0x9c>)
 800da12:	429c      	cmp	r4, r3
 800da14:	d101      	bne.n	800da1a <__swbuf_r+0x7a>
 800da16:	68ac      	ldr	r4, [r5, #8]
 800da18:	e7cf      	b.n	800d9ba <__swbuf_r+0x1a>
 800da1a:	4b09      	ldr	r3, [pc, #36]	; (800da40 <__swbuf_r+0xa0>)
 800da1c:	429c      	cmp	r4, r3
 800da1e:	bf08      	it	eq
 800da20:	68ec      	ldreq	r4, [r5, #12]
 800da22:	e7ca      	b.n	800d9ba <__swbuf_r+0x1a>
 800da24:	4621      	mov	r1, r4
 800da26:	4628      	mov	r0, r5
 800da28:	f000 f81a 	bl	800da60 <__swsetup_r>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d0cb      	beq.n	800d9c8 <__swbuf_r+0x28>
 800da30:	f04f 37ff 	mov.w	r7, #4294967295
 800da34:	e7ea      	b.n	800da0c <__swbuf_r+0x6c>
 800da36:	bf00      	nop
 800da38:	0800e564 	.word	0x0800e564
 800da3c:	0800e584 	.word	0x0800e584
 800da40:	0800e544 	.word	0x0800e544

0800da44 <__ascii_wctomb>:
 800da44:	b149      	cbz	r1, 800da5a <__ascii_wctomb+0x16>
 800da46:	2aff      	cmp	r2, #255	; 0xff
 800da48:	bf85      	ittet	hi
 800da4a:	238a      	movhi	r3, #138	; 0x8a
 800da4c:	6003      	strhi	r3, [r0, #0]
 800da4e:	700a      	strbls	r2, [r1, #0]
 800da50:	f04f 30ff 	movhi.w	r0, #4294967295
 800da54:	bf98      	it	ls
 800da56:	2001      	movls	r0, #1
 800da58:	4770      	bx	lr
 800da5a:	4608      	mov	r0, r1
 800da5c:	4770      	bx	lr
	...

0800da60 <__swsetup_r>:
 800da60:	4b32      	ldr	r3, [pc, #200]	; (800db2c <__swsetup_r+0xcc>)
 800da62:	b570      	push	{r4, r5, r6, lr}
 800da64:	681d      	ldr	r5, [r3, #0]
 800da66:	4606      	mov	r6, r0
 800da68:	460c      	mov	r4, r1
 800da6a:	b125      	cbz	r5, 800da76 <__swsetup_r+0x16>
 800da6c:	69ab      	ldr	r3, [r5, #24]
 800da6e:	b913      	cbnz	r3, 800da76 <__swsetup_r+0x16>
 800da70:	4628      	mov	r0, r5
 800da72:	f000 f985 	bl	800dd80 <__sinit>
 800da76:	4b2e      	ldr	r3, [pc, #184]	; (800db30 <__swsetup_r+0xd0>)
 800da78:	429c      	cmp	r4, r3
 800da7a:	d10f      	bne.n	800da9c <__swsetup_r+0x3c>
 800da7c:	686c      	ldr	r4, [r5, #4]
 800da7e:	89a3      	ldrh	r3, [r4, #12]
 800da80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da84:	0719      	lsls	r1, r3, #28
 800da86:	d42c      	bmi.n	800dae2 <__swsetup_r+0x82>
 800da88:	06dd      	lsls	r5, r3, #27
 800da8a:	d411      	bmi.n	800dab0 <__swsetup_r+0x50>
 800da8c:	2309      	movs	r3, #9
 800da8e:	6033      	str	r3, [r6, #0]
 800da90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da94:	81a3      	strh	r3, [r4, #12]
 800da96:	f04f 30ff 	mov.w	r0, #4294967295
 800da9a:	e03e      	b.n	800db1a <__swsetup_r+0xba>
 800da9c:	4b25      	ldr	r3, [pc, #148]	; (800db34 <__swsetup_r+0xd4>)
 800da9e:	429c      	cmp	r4, r3
 800daa0:	d101      	bne.n	800daa6 <__swsetup_r+0x46>
 800daa2:	68ac      	ldr	r4, [r5, #8]
 800daa4:	e7eb      	b.n	800da7e <__swsetup_r+0x1e>
 800daa6:	4b24      	ldr	r3, [pc, #144]	; (800db38 <__swsetup_r+0xd8>)
 800daa8:	429c      	cmp	r4, r3
 800daaa:	bf08      	it	eq
 800daac:	68ec      	ldreq	r4, [r5, #12]
 800daae:	e7e6      	b.n	800da7e <__swsetup_r+0x1e>
 800dab0:	0758      	lsls	r0, r3, #29
 800dab2:	d512      	bpl.n	800dada <__swsetup_r+0x7a>
 800dab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dab6:	b141      	cbz	r1, 800daca <__swsetup_r+0x6a>
 800dab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dabc:	4299      	cmp	r1, r3
 800dabe:	d002      	beq.n	800dac6 <__swsetup_r+0x66>
 800dac0:	4630      	mov	r0, r6
 800dac2:	f7ff fd0b 	bl	800d4dc <_free_r>
 800dac6:	2300      	movs	r3, #0
 800dac8:	6363      	str	r3, [r4, #52]	; 0x34
 800daca:	89a3      	ldrh	r3, [r4, #12]
 800dacc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dad0:	81a3      	strh	r3, [r4, #12]
 800dad2:	2300      	movs	r3, #0
 800dad4:	6063      	str	r3, [r4, #4]
 800dad6:	6923      	ldr	r3, [r4, #16]
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	89a3      	ldrh	r3, [r4, #12]
 800dadc:	f043 0308 	orr.w	r3, r3, #8
 800dae0:	81a3      	strh	r3, [r4, #12]
 800dae2:	6923      	ldr	r3, [r4, #16]
 800dae4:	b94b      	cbnz	r3, 800dafa <__swsetup_r+0x9a>
 800dae6:	89a3      	ldrh	r3, [r4, #12]
 800dae8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800daec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800daf0:	d003      	beq.n	800dafa <__swsetup_r+0x9a>
 800daf2:	4621      	mov	r1, r4
 800daf4:	4630      	mov	r0, r6
 800daf6:	f000 fa07 	bl	800df08 <__smakebuf_r>
 800dafa:	89a0      	ldrh	r0, [r4, #12]
 800dafc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db00:	f010 0301 	ands.w	r3, r0, #1
 800db04:	d00a      	beq.n	800db1c <__swsetup_r+0xbc>
 800db06:	2300      	movs	r3, #0
 800db08:	60a3      	str	r3, [r4, #8]
 800db0a:	6963      	ldr	r3, [r4, #20]
 800db0c:	425b      	negs	r3, r3
 800db0e:	61a3      	str	r3, [r4, #24]
 800db10:	6923      	ldr	r3, [r4, #16]
 800db12:	b943      	cbnz	r3, 800db26 <__swsetup_r+0xc6>
 800db14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db18:	d1ba      	bne.n	800da90 <__swsetup_r+0x30>
 800db1a:	bd70      	pop	{r4, r5, r6, pc}
 800db1c:	0781      	lsls	r1, r0, #30
 800db1e:	bf58      	it	pl
 800db20:	6963      	ldrpl	r3, [r4, #20]
 800db22:	60a3      	str	r3, [r4, #8]
 800db24:	e7f4      	b.n	800db10 <__swsetup_r+0xb0>
 800db26:	2000      	movs	r0, #0
 800db28:	e7f7      	b.n	800db1a <__swsetup_r+0xba>
 800db2a:	bf00      	nop
 800db2c:	24000010 	.word	0x24000010
 800db30:	0800e564 	.word	0x0800e564
 800db34:	0800e584 	.word	0x0800e584
 800db38:	0800e544 	.word	0x0800e544

0800db3c <abort>:
 800db3c:	b508      	push	{r3, lr}
 800db3e:	2006      	movs	r0, #6
 800db40:	f000 fa4a 	bl	800dfd8 <raise>
 800db44:	2001      	movs	r0, #1
 800db46:	f7f5 f893 	bl	8002c70 <_exit>
	...

0800db4c <__sflush_r>:
 800db4c:	898a      	ldrh	r2, [r1, #12]
 800db4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db52:	4605      	mov	r5, r0
 800db54:	0710      	lsls	r0, r2, #28
 800db56:	460c      	mov	r4, r1
 800db58:	d458      	bmi.n	800dc0c <__sflush_r+0xc0>
 800db5a:	684b      	ldr	r3, [r1, #4]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	dc05      	bgt.n	800db6c <__sflush_r+0x20>
 800db60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db62:	2b00      	cmp	r3, #0
 800db64:	dc02      	bgt.n	800db6c <__sflush_r+0x20>
 800db66:	2000      	movs	r0, #0
 800db68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db6e:	2e00      	cmp	r6, #0
 800db70:	d0f9      	beq.n	800db66 <__sflush_r+0x1a>
 800db72:	2300      	movs	r3, #0
 800db74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db78:	682f      	ldr	r7, [r5, #0]
 800db7a:	602b      	str	r3, [r5, #0]
 800db7c:	d032      	beq.n	800dbe4 <__sflush_r+0x98>
 800db7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db80:	89a3      	ldrh	r3, [r4, #12]
 800db82:	075a      	lsls	r2, r3, #29
 800db84:	d505      	bpl.n	800db92 <__sflush_r+0x46>
 800db86:	6863      	ldr	r3, [r4, #4]
 800db88:	1ac0      	subs	r0, r0, r3
 800db8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db8c:	b10b      	cbz	r3, 800db92 <__sflush_r+0x46>
 800db8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db90:	1ac0      	subs	r0, r0, r3
 800db92:	2300      	movs	r3, #0
 800db94:	4602      	mov	r2, r0
 800db96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db98:	6a21      	ldr	r1, [r4, #32]
 800db9a:	4628      	mov	r0, r5
 800db9c:	47b0      	blx	r6
 800db9e:	1c43      	adds	r3, r0, #1
 800dba0:	89a3      	ldrh	r3, [r4, #12]
 800dba2:	d106      	bne.n	800dbb2 <__sflush_r+0x66>
 800dba4:	6829      	ldr	r1, [r5, #0]
 800dba6:	291d      	cmp	r1, #29
 800dba8:	d82c      	bhi.n	800dc04 <__sflush_r+0xb8>
 800dbaa:	4a2a      	ldr	r2, [pc, #168]	; (800dc54 <__sflush_r+0x108>)
 800dbac:	40ca      	lsrs	r2, r1
 800dbae:	07d6      	lsls	r6, r2, #31
 800dbb0:	d528      	bpl.n	800dc04 <__sflush_r+0xb8>
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	6062      	str	r2, [r4, #4]
 800dbb6:	04d9      	lsls	r1, r3, #19
 800dbb8:	6922      	ldr	r2, [r4, #16]
 800dbba:	6022      	str	r2, [r4, #0]
 800dbbc:	d504      	bpl.n	800dbc8 <__sflush_r+0x7c>
 800dbbe:	1c42      	adds	r2, r0, #1
 800dbc0:	d101      	bne.n	800dbc6 <__sflush_r+0x7a>
 800dbc2:	682b      	ldr	r3, [r5, #0]
 800dbc4:	b903      	cbnz	r3, 800dbc8 <__sflush_r+0x7c>
 800dbc6:	6560      	str	r0, [r4, #84]	; 0x54
 800dbc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbca:	602f      	str	r7, [r5, #0]
 800dbcc:	2900      	cmp	r1, #0
 800dbce:	d0ca      	beq.n	800db66 <__sflush_r+0x1a>
 800dbd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbd4:	4299      	cmp	r1, r3
 800dbd6:	d002      	beq.n	800dbde <__sflush_r+0x92>
 800dbd8:	4628      	mov	r0, r5
 800dbda:	f7ff fc7f 	bl	800d4dc <_free_r>
 800dbde:	2000      	movs	r0, #0
 800dbe0:	6360      	str	r0, [r4, #52]	; 0x34
 800dbe2:	e7c1      	b.n	800db68 <__sflush_r+0x1c>
 800dbe4:	6a21      	ldr	r1, [r4, #32]
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	4628      	mov	r0, r5
 800dbea:	47b0      	blx	r6
 800dbec:	1c41      	adds	r1, r0, #1
 800dbee:	d1c7      	bne.n	800db80 <__sflush_r+0x34>
 800dbf0:	682b      	ldr	r3, [r5, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d0c4      	beq.n	800db80 <__sflush_r+0x34>
 800dbf6:	2b1d      	cmp	r3, #29
 800dbf8:	d001      	beq.n	800dbfe <__sflush_r+0xb2>
 800dbfa:	2b16      	cmp	r3, #22
 800dbfc:	d101      	bne.n	800dc02 <__sflush_r+0xb6>
 800dbfe:	602f      	str	r7, [r5, #0]
 800dc00:	e7b1      	b.n	800db66 <__sflush_r+0x1a>
 800dc02:	89a3      	ldrh	r3, [r4, #12]
 800dc04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc08:	81a3      	strh	r3, [r4, #12]
 800dc0a:	e7ad      	b.n	800db68 <__sflush_r+0x1c>
 800dc0c:	690f      	ldr	r7, [r1, #16]
 800dc0e:	2f00      	cmp	r7, #0
 800dc10:	d0a9      	beq.n	800db66 <__sflush_r+0x1a>
 800dc12:	0793      	lsls	r3, r2, #30
 800dc14:	680e      	ldr	r6, [r1, #0]
 800dc16:	bf08      	it	eq
 800dc18:	694b      	ldreq	r3, [r1, #20]
 800dc1a:	600f      	str	r7, [r1, #0]
 800dc1c:	bf18      	it	ne
 800dc1e:	2300      	movne	r3, #0
 800dc20:	eba6 0807 	sub.w	r8, r6, r7
 800dc24:	608b      	str	r3, [r1, #8]
 800dc26:	f1b8 0f00 	cmp.w	r8, #0
 800dc2a:	dd9c      	ble.n	800db66 <__sflush_r+0x1a>
 800dc2c:	6a21      	ldr	r1, [r4, #32]
 800dc2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc30:	4643      	mov	r3, r8
 800dc32:	463a      	mov	r2, r7
 800dc34:	4628      	mov	r0, r5
 800dc36:	47b0      	blx	r6
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	dc06      	bgt.n	800dc4a <__sflush_r+0xfe>
 800dc3c:	89a3      	ldrh	r3, [r4, #12]
 800dc3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc42:	81a3      	strh	r3, [r4, #12]
 800dc44:	f04f 30ff 	mov.w	r0, #4294967295
 800dc48:	e78e      	b.n	800db68 <__sflush_r+0x1c>
 800dc4a:	4407      	add	r7, r0
 800dc4c:	eba8 0800 	sub.w	r8, r8, r0
 800dc50:	e7e9      	b.n	800dc26 <__sflush_r+0xda>
 800dc52:	bf00      	nop
 800dc54:	20400001 	.word	0x20400001

0800dc58 <_fflush_r>:
 800dc58:	b538      	push	{r3, r4, r5, lr}
 800dc5a:	690b      	ldr	r3, [r1, #16]
 800dc5c:	4605      	mov	r5, r0
 800dc5e:	460c      	mov	r4, r1
 800dc60:	b913      	cbnz	r3, 800dc68 <_fflush_r+0x10>
 800dc62:	2500      	movs	r5, #0
 800dc64:	4628      	mov	r0, r5
 800dc66:	bd38      	pop	{r3, r4, r5, pc}
 800dc68:	b118      	cbz	r0, 800dc72 <_fflush_r+0x1a>
 800dc6a:	6983      	ldr	r3, [r0, #24]
 800dc6c:	b90b      	cbnz	r3, 800dc72 <_fflush_r+0x1a>
 800dc6e:	f000 f887 	bl	800dd80 <__sinit>
 800dc72:	4b14      	ldr	r3, [pc, #80]	; (800dcc4 <_fflush_r+0x6c>)
 800dc74:	429c      	cmp	r4, r3
 800dc76:	d11b      	bne.n	800dcb0 <_fflush_r+0x58>
 800dc78:	686c      	ldr	r4, [r5, #4]
 800dc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d0ef      	beq.n	800dc62 <_fflush_r+0xa>
 800dc82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc84:	07d0      	lsls	r0, r2, #31
 800dc86:	d404      	bmi.n	800dc92 <_fflush_r+0x3a>
 800dc88:	0599      	lsls	r1, r3, #22
 800dc8a:	d402      	bmi.n	800dc92 <_fflush_r+0x3a>
 800dc8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc8e:	f000 f915 	bl	800debc <__retarget_lock_acquire_recursive>
 800dc92:	4628      	mov	r0, r5
 800dc94:	4621      	mov	r1, r4
 800dc96:	f7ff ff59 	bl	800db4c <__sflush_r>
 800dc9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc9c:	07da      	lsls	r2, r3, #31
 800dc9e:	4605      	mov	r5, r0
 800dca0:	d4e0      	bmi.n	800dc64 <_fflush_r+0xc>
 800dca2:	89a3      	ldrh	r3, [r4, #12]
 800dca4:	059b      	lsls	r3, r3, #22
 800dca6:	d4dd      	bmi.n	800dc64 <_fflush_r+0xc>
 800dca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcaa:	f000 f908 	bl	800debe <__retarget_lock_release_recursive>
 800dcae:	e7d9      	b.n	800dc64 <_fflush_r+0xc>
 800dcb0:	4b05      	ldr	r3, [pc, #20]	; (800dcc8 <_fflush_r+0x70>)
 800dcb2:	429c      	cmp	r4, r3
 800dcb4:	d101      	bne.n	800dcba <_fflush_r+0x62>
 800dcb6:	68ac      	ldr	r4, [r5, #8]
 800dcb8:	e7df      	b.n	800dc7a <_fflush_r+0x22>
 800dcba:	4b04      	ldr	r3, [pc, #16]	; (800dccc <_fflush_r+0x74>)
 800dcbc:	429c      	cmp	r4, r3
 800dcbe:	bf08      	it	eq
 800dcc0:	68ec      	ldreq	r4, [r5, #12]
 800dcc2:	e7da      	b.n	800dc7a <_fflush_r+0x22>
 800dcc4:	0800e564 	.word	0x0800e564
 800dcc8:	0800e584 	.word	0x0800e584
 800dccc:	0800e544 	.word	0x0800e544

0800dcd0 <std>:
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	b510      	push	{r4, lr}
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	e9c0 3300 	strd	r3, r3, [r0]
 800dcda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcde:	6083      	str	r3, [r0, #8]
 800dce0:	8181      	strh	r1, [r0, #12]
 800dce2:	6643      	str	r3, [r0, #100]	; 0x64
 800dce4:	81c2      	strh	r2, [r0, #14]
 800dce6:	6183      	str	r3, [r0, #24]
 800dce8:	4619      	mov	r1, r3
 800dcea:	2208      	movs	r2, #8
 800dcec:	305c      	adds	r0, #92	; 0x5c
 800dcee:	f7fd fdf1 	bl	800b8d4 <memset>
 800dcf2:	4b05      	ldr	r3, [pc, #20]	; (800dd08 <std+0x38>)
 800dcf4:	6263      	str	r3, [r4, #36]	; 0x24
 800dcf6:	4b05      	ldr	r3, [pc, #20]	; (800dd0c <std+0x3c>)
 800dcf8:	62a3      	str	r3, [r4, #40]	; 0x28
 800dcfa:	4b05      	ldr	r3, [pc, #20]	; (800dd10 <std+0x40>)
 800dcfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dcfe:	4b05      	ldr	r3, [pc, #20]	; (800dd14 <std+0x44>)
 800dd00:	6224      	str	r4, [r4, #32]
 800dd02:	6323      	str	r3, [r4, #48]	; 0x30
 800dd04:	bd10      	pop	{r4, pc}
 800dd06:	bf00      	nop
 800dd08:	0800e011 	.word	0x0800e011
 800dd0c:	0800e033 	.word	0x0800e033
 800dd10:	0800e06b 	.word	0x0800e06b
 800dd14:	0800e08f 	.word	0x0800e08f

0800dd18 <_cleanup_r>:
 800dd18:	4901      	ldr	r1, [pc, #4]	; (800dd20 <_cleanup_r+0x8>)
 800dd1a:	f000 b8af 	b.w	800de7c <_fwalk_reent>
 800dd1e:	bf00      	nop
 800dd20:	0800dc59 	.word	0x0800dc59

0800dd24 <__sfmoreglue>:
 800dd24:	b570      	push	{r4, r5, r6, lr}
 800dd26:	1e4a      	subs	r2, r1, #1
 800dd28:	2568      	movs	r5, #104	; 0x68
 800dd2a:	4355      	muls	r5, r2
 800dd2c:	460e      	mov	r6, r1
 800dd2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd32:	f7ff fc23 	bl	800d57c <_malloc_r>
 800dd36:	4604      	mov	r4, r0
 800dd38:	b140      	cbz	r0, 800dd4c <__sfmoreglue+0x28>
 800dd3a:	2100      	movs	r1, #0
 800dd3c:	e9c0 1600 	strd	r1, r6, [r0]
 800dd40:	300c      	adds	r0, #12
 800dd42:	60a0      	str	r0, [r4, #8]
 800dd44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd48:	f7fd fdc4 	bl	800b8d4 <memset>
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	bd70      	pop	{r4, r5, r6, pc}

0800dd50 <__sfp_lock_acquire>:
 800dd50:	4801      	ldr	r0, [pc, #4]	; (800dd58 <__sfp_lock_acquire+0x8>)
 800dd52:	f000 b8b3 	b.w	800debc <__retarget_lock_acquire_recursive>
 800dd56:	bf00      	nop
 800dd58:	240009f8 	.word	0x240009f8

0800dd5c <__sfp_lock_release>:
 800dd5c:	4801      	ldr	r0, [pc, #4]	; (800dd64 <__sfp_lock_release+0x8>)
 800dd5e:	f000 b8ae 	b.w	800debe <__retarget_lock_release_recursive>
 800dd62:	bf00      	nop
 800dd64:	240009f8 	.word	0x240009f8

0800dd68 <__sinit_lock_acquire>:
 800dd68:	4801      	ldr	r0, [pc, #4]	; (800dd70 <__sinit_lock_acquire+0x8>)
 800dd6a:	f000 b8a7 	b.w	800debc <__retarget_lock_acquire_recursive>
 800dd6e:	bf00      	nop
 800dd70:	240009f3 	.word	0x240009f3

0800dd74 <__sinit_lock_release>:
 800dd74:	4801      	ldr	r0, [pc, #4]	; (800dd7c <__sinit_lock_release+0x8>)
 800dd76:	f000 b8a2 	b.w	800debe <__retarget_lock_release_recursive>
 800dd7a:	bf00      	nop
 800dd7c:	240009f3 	.word	0x240009f3

0800dd80 <__sinit>:
 800dd80:	b510      	push	{r4, lr}
 800dd82:	4604      	mov	r4, r0
 800dd84:	f7ff fff0 	bl	800dd68 <__sinit_lock_acquire>
 800dd88:	69a3      	ldr	r3, [r4, #24]
 800dd8a:	b11b      	cbz	r3, 800dd94 <__sinit+0x14>
 800dd8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd90:	f7ff bff0 	b.w	800dd74 <__sinit_lock_release>
 800dd94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dd98:	6523      	str	r3, [r4, #80]	; 0x50
 800dd9a:	4b13      	ldr	r3, [pc, #76]	; (800dde8 <__sinit+0x68>)
 800dd9c:	4a13      	ldr	r2, [pc, #76]	; (800ddec <__sinit+0x6c>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	62a2      	str	r2, [r4, #40]	; 0x28
 800dda2:	42a3      	cmp	r3, r4
 800dda4:	bf04      	itt	eq
 800dda6:	2301      	moveq	r3, #1
 800dda8:	61a3      	streq	r3, [r4, #24]
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f000 f820 	bl	800ddf0 <__sfp>
 800ddb0:	6060      	str	r0, [r4, #4]
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	f000 f81c 	bl	800ddf0 <__sfp>
 800ddb8:	60a0      	str	r0, [r4, #8]
 800ddba:	4620      	mov	r0, r4
 800ddbc:	f000 f818 	bl	800ddf0 <__sfp>
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	60e0      	str	r0, [r4, #12]
 800ddc4:	2104      	movs	r1, #4
 800ddc6:	6860      	ldr	r0, [r4, #4]
 800ddc8:	f7ff ff82 	bl	800dcd0 <std>
 800ddcc:	68a0      	ldr	r0, [r4, #8]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	2109      	movs	r1, #9
 800ddd2:	f7ff ff7d 	bl	800dcd0 <std>
 800ddd6:	68e0      	ldr	r0, [r4, #12]
 800ddd8:	2202      	movs	r2, #2
 800ddda:	2112      	movs	r1, #18
 800dddc:	f7ff ff78 	bl	800dcd0 <std>
 800dde0:	2301      	movs	r3, #1
 800dde2:	61a3      	str	r3, [r4, #24]
 800dde4:	e7d2      	b.n	800dd8c <__sinit+0xc>
 800dde6:	bf00      	nop
 800dde8:	0800e1c0 	.word	0x0800e1c0
 800ddec:	0800dd19 	.word	0x0800dd19

0800ddf0 <__sfp>:
 800ddf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf2:	4607      	mov	r7, r0
 800ddf4:	f7ff ffac 	bl	800dd50 <__sfp_lock_acquire>
 800ddf8:	4b1e      	ldr	r3, [pc, #120]	; (800de74 <__sfp+0x84>)
 800ddfa:	681e      	ldr	r6, [r3, #0]
 800ddfc:	69b3      	ldr	r3, [r6, #24]
 800ddfe:	b913      	cbnz	r3, 800de06 <__sfp+0x16>
 800de00:	4630      	mov	r0, r6
 800de02:	f7ff ffbd 	bl	800dd80 <__sinit>
 800de06:	3648      	adds	r6, #72	; 0x48
 800de08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de0c:	3b01      	subs	r3, #1
 800de0e:	d503      	bpl.n	800de18 <__sfp+0x28>
 800de10:	6833      	ldr	r3, [r6, #0]
 800de12:	b30b      	cbz	r3, 800de58 <__sfp+0x68>
 800de14:	6836      	ldr	r6, [r6, #0]
 800de16:	e7f7      	b.n	800de08 <__sfp+0x18>
 800de18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de1c:	b9d5      	cbnz	r5, 800de54 <__sfp+0x64>
 800de1e:	4b16      	ldr	r3, [pc, #88]	; (800de78 <__sfp+0x88>)
 800de20:	60e3      	str	r3, [r4, #12]
 800de22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de26:	6665      	str	r5, [r4, #100]	; 0x64
 800de28:	f000 f847 	bl	800deba <__retarget_lock_init_recursive>
 800de2c:	f7ff ff96 	bl	800dd5c <__sfp_lock_release>
 800de30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de38:	6025      	str	r5, [r4, #0]
 800de3a:	61a5      	str	r5, [r4, #24]
 800de3c:	2208      	movs	r2, #8
 800de3e:	4629      	mov	r1, r5
 800de40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de44:	f7fd fd46 	bl	800b8d4 <memset>
 800de48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de50:	4620      	mov	r0, r4
 800de52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de54:	3468      	adds	r4, #104	; 0x68
 800de56:	e7d9      	b.n	800de0c <__sfp+0x1c>
 800de58:	2104      	movs	r1, #4
 800de5a:	4638      	mov	r0, r7
 800de5c:	f7ff ff62 	bl	800dd24 <__sfmoreglue>
 800de60:	4604      	mov	r4, r0
 800de62:	6030      	str	r0, [r6, #0]
 800de64:	2800      	cmp	r0, #0
 800de66:	d1d5      	bne.n	800de14 <__sfp+0x24>
 800de68:	f7ff ff78 	bl	800dd5c <__sfp_lock_release>
 800de6c:	230c      	movs	r3, #12
 800de6e:	603b      	str	r3, [r7, #0]
 800de70:	e7ee      	b.n	800de50 <__sfp+0x60>
 800de72:	bf00      	nop
 800de74:	0800e1c0 	.word	0x0800e1c0
 800de78:	ffff0001 	.word	0xffff0001

0800de7c <_fwalk_reent>:
 800de7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de80:	4606      	mov	r6, r0
 800de82:	4688      	mov	r8, r1
 800de84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800de88:	2700      	movs	r7, #0
 800de8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de8e:	f1b9 0901 	subs.w	r9, r9, #1
 800de92:	d505      	bpl.n	800dea0 <_fwalk_reent+0x24>
 800de94:	6824      	ldr	r4, [r4, #0]
 800de96:	2c00      	cmp	r4, #0
 800de98:	d1f7      	bne.n	800de8a <_fwalk_reent+0xe>
 800de9a:	4638      	mov	r0, r7
 800de9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dea0:	89ab      	ldrh	r3, [r5, #12]
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d907      	bls.n	800deb6 <_fwalk_reent+0x3a>
 800dea6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800deaa:	3301      	adds	r3, #1
 800deac:	d003      	beq.n	800deb6 <_fwalk_reent+0x3a>
 800deae:	4629      	mov	r1, r5
 800deb0:	4630      	mov	r0, r6
 800deb2:	47c0      	blx	r8
 800deb4:	4307      	orrs	r7, r0
 800deb6:	3568      	adds	r5, #104	; 0x68
 800deb8:	e7e9      	b.n	800de8e <_fwalk_reent+0x12>

0800deba <__retarget_lock_init_recursive>:
 800deba:	4770      	bx	lr

0800debc <__retarget_lock_acquire_recursive>:
 800debc:	4770      	bx	lr

0800debe <__retarget_lock_release_recursive>:
 800debe:	4770      	bx	lr

0800dec0 <__swhatbuf_r>:
 800dec0:	b570      	push	{r4, r5, r6, lr}
 800dec2:	460e      	mov	r6, r1
 800dec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dec8:	2900      	cmp	r1, #0
 800deca:	b096      	sub	sp, #88	; 0x58
 800decc:	4614      	mov	r4, r2
 800dece:	461d      	mov	r5, r3
 800ded0:	da07      	bge.n	800dee2 <__swhatbuf_r+0x22>
 800ded2:	2300      	movs	r3, #0
 800ded4:	602b      	str	r3, [r5, #0]
 800ded6:	89b3      	ldrh	r3, [r6, #12]
 800ded8:	061a      	lsls	r2, r3, #24
 800deda:	d410      	bmi.n	800defe <__swhatbuf_r+0x3e>
 800dedc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dee0:	e00e      	b.n	800df00 <__swhatbuf_r+0x40>
 800dee2:	466a      	mov	r2, sp
 800dee4:	f000 f8fa 	bl	800e0dc <_fstat_r>
 800dee8:	2800      	cmp	r0, #0
 800deea:	dbf2      	blt.n	800ded2 <__swhatbuf_r+0x12>
 800deec:	9a01      	ldr	r2, [sp, #4]
 800deee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800def2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800def6:	425a      	negs	r2, r3
 800def8:	415a      	adcs	r2, r3
 800defa:	602a      	str	r2, [r5, #0]
 800defc:	e7ee      	b.n	800dedc <__swhatbuf_r+0x1c>
 800defe:	2340      	movs	r3, #64	; 0x40
 800df00:	2000      	movs	r0, #0
 800df02:	6023      	str	r3, [r4, #0]
 800df04:	b016      	add	sp, #88	; 0x58
 800df06:	bd70      	pop	{r4, r5, r6, pc}

0800df08 <__smakebuf_r>:
 800df08:	898b      	ldrh	r3, [r1, #12]
 800df0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df0c:	079d      	lsls	r5, r3, #30
 800df0e:	4606      	mov	r6, r0
 800df10:	460c      	mov	r4, r1
 800df12:	d507      	bpl.n	800df24 <__smakebuf_r+0x1c>
 800df14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	6123      	str	r3, [r4, #16]
 800df1c:	2301      	movs	r3, #1
 800df1e:	6163      	str	r3, [r4, #20]
 800df20:	b002      	add	sp, #8
 800df22:	bd70      	pop	{r4, r5, r6, pc}
 800df24:	ab01      	add	r3, sp, #4
 800df26:	466a      	mov	r2, sp
 800df28:	f7ff ffca 	bl	800dec0 <__swhatbuf_r>
 800df2c:	9900      	ldr	r1, [sp, #0]
 800df2e:	4605      	mov	r5, r0
 800df30:	4630      	mov	r0, r6
 800df32:	f7ff fb23 	bl	800d57c <_malloc_r>
 800df36:	b948      	cbnz	r0, 800df4c <__smakebuf_r+0x44>
 800df38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df3c:	059a      	lsls	r2, r3, #22
 800df3e:	d4ef      	bmi.n	800df20 <__smakebuf_r+0x18>
 800df40:	f023 0303 	bic.w	r3, r3, #3
 800df44:	f043 0302 	orr.w	r3, r3, #2
 800df48:	81a3      	strh	r3, [r4, #12]
 800df4a:	e7e3      	b.n	800df14 <__smakebuf_r+0xc>
 800df4c:	4b0d      	ldr	r3, [pc, #52]	; (800df84 <__smakebuf_r+0x7c>)
 800df4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800df50:	89a3      	ldrh	r3, [r4, #12]
 800df52:	6020      	str	r0, [r4, #0]
 800df54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df58:	81a3      	strh	r3, [r4, #12]
 800df5a:	9b00      	ldr	r3, [sp, #0]
 800df5c:	6163      	str	r3, [r4, #20]
 800df5e:	9b01      	ldr	r3, [sp, #4]
 800df60:	6120      	str	r0, [r4, #16]
 800df62:	b15b      	cbz	r3, 800df7c <__smakebuf_r+0x74>
 800df64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df68:	4630      	mov	r0, r6
 800df6a:	f000 f8c9 	bl	800e100 <_isatty_r>
 800df6e:	b128      	cbz	r0, 800df7c <__smakebuf_r+0x74>
 800df70:	89a3      	ldrh	r3, [r4, #12]
 800df72:	f023 0303 	bic.w	r3, r3, #3
 800df76:	f043 0301 	orr.w	r3, r3, #1
 800df7a:	81a3      	strh	r3, [r4, #12]
 800df7c:	89a0      	ldrh	r0, [r4, #12]
 800df7e:	4305      	orrs	r5, r0
 800df80:	81a5      	strh	r5, [r4, #12]
 800df82:	e7cd      	b.n	800df20 <__smakebuf_r+0x18>
 800df84:	0800dd19 	.word	0x0800dd19

0800df88 <_raise_r>:
 800df88:	291f      	cmp	r1, #31
 800df8a:	b538      	push	{r3, r4, r5, lr}
 800df8c:	4604      	mov	r4, r0
 800df8e:	460d      	mov	r5, r1
 800df90:	d904      	bls.n	800df9c <_raise_r+0x14>
 800df92:	2316      	movs	r3, #22
 800df94:	6003      	str	r3, [r0, #0]
 800df96:	f04f 30ff 	mov.w	r0, #4294967295
 800df9a:	bd38      	pop	{r3, r4, r5, pc}
 800df9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800df9e:	b112      	cbz	r2, 800dfa6 <_raise_r+0x1e>
 800dfa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dfa4:	b94b      	cbnz	r3, 800dfba <_raise_r+0x32>
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f000 f830 	bl	800e00c <_getpid_r>
 800dfac:	462a      	mov	r2, r5
 800dfae:	4601      	mov	r1, r0
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfb6:	f000 b817 	b.w	800dfe8 <_kill_r>
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	d00a      	beq.n	800dfd4 <_raise_r+0x4c>
 800dfbe:	1c59      	adds	r1, r3, #1
 800dfc0:	d103      	bne.n	800dfca <_raise_r+0x42>
 800dfc2:	2316      	movs	r3, #22
 800dfc4:	6003      	str	r3, [r0, #0]
 800dfc6:	2001      	movs	r0, #1
 800dfc8:	e7e7      	b.n	800df9a <_raise_r+0x12>
 800dfca:	2400      	movs	r4, #0
 800dfcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	4798      	blx	r3
 800dfd4:	2000      	movs	r0, #0
 800dfd6:	e7e0      	b.n	800df9a <_raise_r+0x12>

0800dfd8 <raise>:
 800dfd8:	4b02      	ldr	r3, [pc, #8]	; (800dfe4 <raise+0xc>)
 800dfda:	4601      	mov	r1, r0
 800dfdc:	6818      	ldr	r0, [r3, #0]
 800dfde:	f7ff bfd3 	b.w	800df88 <_raise_r>
 800dfe2:	bf00      	nop
 800dfe4:	24000010 	.word	0x24000010

0800dfe8 <_kill_r>:
 800dfe8:	b538      	push	{r3, r4, r5, lr}
 800dfea:	4d07      	ldr	r5, [pc, #28]	; (800e008 <_kill_r+0x20>)
 800dfec:	2300      	movs	r3, #0
 800dfee:	4604      	mov	r4, r0
 800dff0:	4608      	mov	r0, r1
 800dff2:	4611      	mov	r1, r2
 800dff4:	602b      	str	r3, [r5, #0]
 800dff6:	f7f4 fe2b 	bl	8002c50 <_kill>
 800dffa:	1c43      	adds	r3, r0, #1
 800dffc:	d102      	bne.n	800e004 <_kill_r+0x1c>
 800dffe:	682b      	ldr	r3, [r5, #0]
 800e000:	b103      	cbz	r3, 800e004 <_kill_r+0x1c>
 800e002:	6023      	str	r3, [r4, #0]
 800e004:	bd38      	pop	{r3, r4, r5, pc}
 800e006:	bf00      	nop
 800e008:	240009ec 	.word	0x240009ec

0800e00c <_getpid_r>:
 800e00c:	f7f4 be18 	b.w	8002c40 <_getpid>

0800e010 <__sread>:
 800e010:	b510      	push	{r4, lr}
 800e012:	460c      	mov	r4, r1
 800e014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e018:	f000 f894 	bl	800e144 <_read_r>
 800e01c:	2800      	cmp	r0, #0
 800e01e:	bfab      	itete	ge
 800e020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e022:	89a3      	ldrhlt	r3, [r4, #12]
 800e024:	181b      	addge	r3, r3, r0
 800e026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e02a:	bfac      	ite	ge
 800e02c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e02e:	81a3      	strhlt	r3, [r4, #12]
 800e030:	bd10      	pop	{r4, pc}

0800e032 <__swrite>:
 800e032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e036:	461f      	mov	r7, r3
 800e038:	898b      	ldrh	r3, [r1, #12]
 800e03a:	05db      	lsls	r3, r3, #23
 800e03c:	4605      	mov	r5, r0
 800e03e:	460c      	mov	r4, r1
 800e040:	4616      	mov	r6, r2
 800e042:	d505      	bpl.n	800e050 <__swrite+0x1e>
 800e044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e048:	2302      	movs	r3, #2
 800e04a:	2200      	movs	r2, #0
 800e04c:	f000 f868 	bl	800e120 <_lseek_r>
 800e050:	89a3      	ldrh	r3, [r4, #12]
 800e052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e05a:	81a3      	strh	r3, [r4, #12]
 800e05c:	4632      	mov	r2, r6
 800e05e:	463b      	mov	r3, r7
 800e060:	4628      	mov	r0, r5
 800e062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e066:	f000 b817 	b.w	800e098 <_write_r>

0800e06a <__sseek>:
 800e06a:	b510      	push	{r4, lr}
 800e06c:	460c      	mov	r4, r1
 800e06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e072:	f000 f855 	bl	800e120 <_lseek_r>
 800e076:	1c43      	adds	r3, r0, #1
 800e078:	89a3      	ldrh	r3, [r4, #12]
 800e07a:	bf15      	itete	ne
 800e07c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e07e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e086:	81a3      	strheq	r3, [r4, #12]
 800e088:	bf18      	it	ne
 800e08a:	81a3      	strhne	r3, [r4, #12]
 800e08c:	bd10      	pop	{r4, pc}

0800e08e <__sclose>:
 800e08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e092:	f000 b813 	b.w	800e0bc <_close_r>
	...

0800e098 <_write_r>:
 800e098:	b538      	push	{r3, r4, r5, lr}
 800e09a:	4d07      	ldr	r5, [pc, #28]	; (800e0b8 <_write_r+0x20>)
 800e09c:	4604      	mov	r4, r0
 800e09e:	4608      	mov	r0, r1
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	602a      	str	r2, [r5, #0]
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	f7f4 fe09 	bl	8002cbe <_write>
 800e0ac:	1c43      	adds	r3, r0, #1
 800e0ae:	d102      	bne.n	800e0b6 <_write_r+0x1e>
 800e0b0:	682b      	ldr	r3, [r5, #0]
 800e0b2:	b103      	cbz	r3, 800e0b6 <_write_r+0x1e>
 800e0b4:	6023      	str	r3, [r4, #0]
 800e0b6:	bd38      	pop	{r3, r4, r5, pc}
 800e0b8:	240009ec 	.word	0x240009ec

0800e0bc <_close_r>:
 800e0bc:	b538      	push	{r3, r4, r5, lr}
 800e0be:	4d06      	ldr	r5, [pc, #24]	; (800e0d8 <_close_r+0x1c>)
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	4608      	mov	r0, r1
 800e0c6:	602b      	str	r3, [r5, #0]
 800e0c8:	f7f4 fe15 	bl	8002cf6 <_close>
 800e0cc:	1c43      	adds	r3, r0, #1
 800e0ce:	d102      	bne.n	800e0d6 <_close_r+0x1a>
 800e0d0:	682b      	ldr	r3, [r5, #0]
 800e0d2:	b103      	cbz	r3, 800e0d6 <_close_r+0x1a>
 800e0d4:	6023      	str	r3, [r4, #0]
 800e0d6:	bd38      	pop	{r3, r4, r5, pc}
 800e0d8:	240009ec 	.word	0x240009ec

0800e0dc <_fstat_r>:
 800e0dc:	b538      	push	{r3, r4, r5, lr}
 800e0de:	4d07      	ldr	r5, [pc, #28]	; (800e0fc <_fstat_r+0x20>)
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	4604      	mov	r4, r0
 800e0e4:	4608      	mov	r0, r1
 800e0e6:	4611      	mov	r1, r2
 800e0e8:	602b      	str	r3, [r5, #0]
 800e0ea:	f7f4 fe10 	bl	8002d0e <_fstat>
 800e0ee:	1c43      	adds	r3, r0, #1
 800e0f0:	d102      	bne.n	800e0f8 <_fstat_r+0x1c>
 800e0f2:	682b      	ldr	r3, [r5, #0]
 800e0f4:	b103      	cbz	r3, 800e0f8 <_fstat_r+0x1c>
 800e0f6:	6023      	str	r3, [r4, #0]
 800e0f8:	bd38      	pop	{r3, r4, r5, pc}
 800e0fa:	bf00      	nop
 800e0fc:	240009ec 	.word	0x240009ec

0800e100 <_isatty_r>:
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	4d06      	ldr	r5, [pc, #24]	; (800e11c <_isatty_r+0x1c>)
 800e104:	2300      	movs	r3, #0
 800e106:	4604      	mov	r4, r0
 800e108:	4608      	mov	r0, r1
 800e10a:	602b      	str	r3, [r5, #0]
 800e10c:	f7f4 fe0f 	bl	8002d2e <_isatty>
 800e110:	1c43      	adds	r3, r0, #1
 800e112:	d102      	bne.n	800e11a <_isatty_r+0x1a>
 800e114:	682b      	ldr	r3, [r5, #0]
 800e116:	b103      	cbz	r3, 800e11a <_isatty_r+0x1a>
 800e118:	6023      	str	r3, [r4, #0]
 800e11a:	bd38      	pop	{r3, r4, r5, pc}
 800e11c:	240009ec 	.word	0x240009ec

0800e120 <_lseek_r>:
 800e120:	b538      	push	{r3, r4, r5, lr}
 800e122:	4d07      	ldr	r5, [pc, #28]	; (800e140 <_lseek_r+0x20>)
 800e124:	4604      	mov	r4, r0
 800e126:	4608      	mov	r0, r1
 800e128:	4611      	mov	r1, r2
 800e12a:	2200      	movs	r2, #0
 800e12c:	602a      	str	r2, [r5, #0]
 800e12e:	461a      	mov	r2, r3
 800e130:	f7f4 fe08 	bl	8002d44 <_lseek>
 800e134:	1c43      	adds	r3, r0, #1
 800e136:	d102      	bne.n	800e13e <_lseek_r+0x1e>
 800e138:	682b      	ldr	r3, [r5, #0]
 800e13a:	b103      	cbz	r3, 800e13e <_lseek_r+0x1e>
 800e13c:	6023      	str	r3, [r4, #0]
 800e13e:	bd38      	pop	{r3, r4, r5, pc}
 800e140:	240009ec 	.word	0x240009ec

0800e144 <_read_r>:
 800e144:	b538      	push	{r3, r4, r5, lr}
 800e146:	4d07      	ldr	r5, [pc, #28]	; (800e164 <_read_r+0x20>)
 800e148:	4604      	mov	r4, r0
 800e14a:	4608      	mov	r0, r1
 800e14c:	4611      	mov	r1, r2
 800e14e:	2200      	movs	r2, #0
 800e150:	602a      	str	r2, [r5, #0]
 800e152:	461a      	mov	r2, r3
 800e154:	f7f4 fd96 	bl	8002c84 <_read>
 800e158:	1c43      	adds	r3, r0, #1
 800e15a:	d102      	bne.n	800e162 <_read_r+0x1e>
 800e15c:	682b      	ldr	r3, [r5, #0]
 800e15e:	b103      	cbz	r3, 800e162 <_read_r+0x1e>
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	bd38      	pop	{r3, r4, r5, pc}
 800e164:	240009ec 	.word	0x240009ec

0800e168 <_init>:
 800e168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16a:	bf00      	nop
 800e16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e16e:	bc08      	pop	{r3}
 800e170:	469e      	mov	lr, r3
 800e172:	4770      	bx	lr

0800e174 <_fini>:
 800e174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e176:	bf00      	nop
 800e178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e17a:	bc08      	pop	{r3}
 800e17c:	469e      	mov	lr, r3
 800e17e:	4770      	bx	lr
