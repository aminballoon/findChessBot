
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001421c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f3c  080144c0  080144c0  000244c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080163fc  080163fc  000263fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08016404  08016404  00026404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801640c  0801640c  0002640c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000410  24000000  08016414  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000011fc  24000410  08016824  00030410  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400160c  08016824  0003160c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002961f  00000000  00000000  0003043e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046a6  00000000  00000000  00059a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001748  00000000  00000000  0005e108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001590  00000000  00000000  0005f850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e1cd  00000000  00000000  00060de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002406b  00000000  00000000  0009efad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016da69  00000000  00000000  000c3018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00230a81  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000073a0  00000000  00000000  00230ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000410 	.word	0x24000410
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080144a4 	.word	0x080144a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000414 	.word	0x24000414
 80002dc:	080144a4 	.word	0x080144a4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	601a      	str	r2, [r3, #0]
	this->address = _address;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	729a      	strb	r2, [r3, #10]
}
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4618      	mov	r0, r3
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

}
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f103 010a 	add.w	r1, r3, #10
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	2201      	movs	r2, #1
 80006e8:	f00d fd74 	bl	800e1d4 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f103 010c 	add.w	r1, r3, #12
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2202      	movs	r2, #2
 80006fa:	f00d fe01 	bl	800e300 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	899b      	ldrh	r3, [r3, #12]
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	899b      	ldrh	r3, [r3, #12]
 800071a:	b21b      	sxth	r3, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	0bdb      	lsrs	r3, r3, #15
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	765a      	strb	r2, [r3, #25]
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	899b      	ldrh	r3, [r3, #12]
 800073c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000740:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	899b      	ldrh	r3, [r3, #12]
 8000752:	085b      	lsrs	r3, r3, #1
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	737b      	strb	r3, [r7, #13]
 8000762:	7b7b      	ldrb	r3, [r7, #13]
 8000764:	2b05      	cmp	r3, #5
 8000766:	d821      	bhi.n	80007ac <_ZN5AMT2117AMT21_Check_ValueEv+0x7c>
		this->uart_buf = this->uart_buf >> 2;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	899b      	ldrh	r3, [r3, #12]
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b25a      	sxtb	r2, r3
 8000780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000784:	4053      	eors	r3, r2
 8000786:	b25b      	sxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	899b      	ldrh	r3, [r3, #12]
 800078e:	085b      	lsrs	r3, r3, #1
 8000790:	b29b      	uxth	r3, r3
 8000792:	b25b      	sxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	b25a      	sxtb	r2, r3
 800079a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800079e:	4053      	eors	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	3301      	adds	r3, #1
 80007a8:	737b      	strb	r3, [r7, #13]
 80007aa:	e7da      	b.n	8000762 <_ZN5AMT2117AMT21_Check_ValueEv+0x32>
	}
	k0_check = !k0_check;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf0c      	ite	eq
 80007b2:	2301      	moveq	r3, #1
 80007b4:	2300      	movne	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf0c      	ite	eq
 80007c0:	2301      	moveq	r3, #1
 80007c2:	2300      	movne	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7e1b      	ldrb	r3, [r3, #24]
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d10a      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7e5b      	ldrb	r3, [r3, #25]
 80007d6:	7bba      	ldrb	r2, [r7, #14]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d105      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
		this->raw_value = raw_value_temp;
 80007dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e003      	b.n	80007f0 <_ZN5AMT2117AMT21_Check_ValueEv+0xc0>
	} else {
		this->raw_value = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
	}
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800080a:	135b      	asrs	r3, r3, #13
 800080c:	b21b      	sxth	r3, r3
 800080e:	b29b      	uxth	r3, r3
			+ (this->raw_value & 0x3FFF)) * -1;
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	b29b      	uxth	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	0392      	lsls	r2, r2, #14
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000824:	b29b      	uxth	r3, r3
 8000826:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800082a:	b29b      	uxth	r3, r3
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29b      	uxth	r3, r3
 8000830:	b21b      	sxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000852:	461a      	mov	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	db0b      	blt.n	800087a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000870:	1ad2      	subs	r2, r2, r3
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <_ZN5AMT216unwarpEv+0xa0>)
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e020      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800088e:	dc0c      	bgt.n	80008aa <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800089e:	1ad2      	subs	r2, r2, r3
 80008a0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e008      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008b0:	461a      	mov	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	441a      	add	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	615a      	str	r2, [r3, #20]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	ffffc001 	.word	0xffffc001

080008e4 <_ZN5AMT2113setUnwarpZeroEv>:
void AMT21::setUnwarpZero(){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	this->unwarp_value = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	695b      	ldr	r3, [r3, #20]
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	ed87 0a01 	vstr	s0, [r7, #4]
 8000920:	edc7 0a00 	vstr	s1, [r7]
 8000924:	edd7 0a00 	vldr	s1, [r7]
 8000928:	ed97 0a01 	vldr	s0, [r7, #4]
 800092c:	f010 f8ec 	bl	8010b08 <atan2f>
 8000930:	eef0 7a40 	vmov.f32	s15, s0
 8000934:	eeb0 0a67 	vmov.f32	s0, s15
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	ed87 0a01 	vstr	s0, [r7, #4]
 8000948:	ed97 0a01 	vldr	s0, [r7, #4]
 800094c:	f010 f8de 	bl	8010b0c <sqrtf>
 8000950:	eef0 7a40 	vmov.f32	s15, s0
 8000954:	eeb0 0a67 	vmov.f32	s0, s15
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a32      	ldr	r2, [pc, #200]	; (8000a34 <_ZN10RobotJointC1Ev+0xd4>)
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	edd3 7a00 	vldr	s15, [r3]
 8000974:	2002      	movs	r0, #2
 8000976:	eeb0 0a67 	vmov.f32	s0, s15
 800097a:	f000 fecd 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800097e:	eeb0 7b40 	vmov.f64	d7, d0
 8000982:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	edc3 7a01 	vstr	s15, [r3, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	edd3 7a00 	vldr	s15, [r3]
 8000992:	2003      	movs	r0, #3
 8000994:	eeb0 0a67 	vmov.f32	s0, s15
 8000998:	f000 febe 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800099c:	eeb0 7b40 	vmov.f64	d7, d0
 80009a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	edc3 7a02 	vstr	s15, [r3, #8]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	edd3 7a00 	vldr	s15, [r3]
 80009b0:	2004      	movs	r0, #4
 80009b2:	eeb0 0a67 	vmov.f32	s0, s15
 80009b6:	f000 feaf 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80009ba:	eeb0 7b40 	vmov.f64	d7, d0
 80009be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	edc3 7a03 	vstr	s15, [r3, #12]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f04f 0200 	mov.w	r2, #0
 80009ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f04f 0200 	mov.w	r2, #0
 80009d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009e2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f04f 0200 	mov.w	r2, #0
 80009ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f04f 0200 	mov.w	r2, #0
 8000a00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f04f 0200 	mov.w	r2, #0
 8000a0a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <_ZN10RobotJointC1Ev+0xd8>)
 8000a1c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <_ZN10RobotJointC1Ev+0xd4>)
 8000a24:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	3a83126f 	.word	0x3a83126f
 8000a38:	3dcccccd 	.word	0x3dcccccd

08000a3c <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

}
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	0000      	movs	r0, r0
 8000a54:	0000      	movs	r0, r0
	...

08000a58 <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b090      	sub	sp, #64	; 0x40
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6278      	str	r0, [r7, #36]	; 0x24
 8000a60:	ed87 0a08 	vstr	s0, [r7, #32]
 8000a64:	edc7 0a07 	vstr	s1, [r7, #28]
 8000a68:	ed87 1a06 	vstr	s2, [r7, #24]
 8000a6c:	edc7 1a05 	vstr	s3, [r7, #20]
 8000a70:	ed87 2a04 	vstr	s4, [r7, #16]
 8000a74:	edc7 2a03 	vstr	s5, [r7, #12]
 8000a78:	ed87 3a02 	vstr	s6, [r7, #8]
 8000a7c:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin((_q1 + _q3)/1000.0);
 8000a80:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a84:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a90:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000a94:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000a98:	eeb0 0b46 	vmov.f64	d0, d6
 8000a9c:	f00f ffe8 	bl	8010a70 <sin>
 8000aa0:	eeb0 7b40 	vmov.f64	d7, d0
 8000aa4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float C13 = cos((_q1 + _q3)/1000.0);
 8000aac:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ab0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ab8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000abc:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000ac0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ac4:	eeb0 0b46 	vmov.f64	d0, d6
 8000ac8:	f00f ff86 	bl	80109d8 <cos>
 8000acc:	eeb0 7b40 	vmov.f64	d7, d0
 8000ad0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ad4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float S3 = sin(_q3/1000.0);
 8000ad8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000adc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae0:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000ae4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ae8:	eeb0 0b46 	vmov.f64	d0, d6
 8000aec:	f00f ffc0 	bl	8010a70 <sin>
 8000af0:	eeb0 7b40 	vmov.f64	d7, d0
 8000af4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000af8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S1 = sin(_q1/1000.0);
 8000afc:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b04:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000b08:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b0c:	eeb0 0b46 	vmov.f64	d0, d6
 8000b10:	f00f ffae 	bl	8010a70 <sin>
 8000b14:	eeb0 7b40 	vmov.f64	d7, d0
 8000b18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b1c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float C1 = cos(_q1/1000.0);
 8000b20:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b28:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8000c90 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000b2c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b30:	eeb0 0b46 	vmov.f64	d0, d6
 8000b34:	f00f ff50 	bl	80109d8 <cos>
 8000b38:	eeb0 7b40 	vmov.f64	d7, d0
 8000b3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b40:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 8000b44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b48:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b50:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = ((Vx * C13 + Vy * S13) / (S3 * this->L12)) * 1000.0;
 8000b54:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b58:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b60:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b64:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b6c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000b70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b74:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000c9c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000b78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b80:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000ca0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000b84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz * 1000.0;
 8000b8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b92:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000ca0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000ba0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000ba4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000ba8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000bb0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000ca4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000bb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bbc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000bc0:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000ca8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000bc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bd4:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000bd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000bdc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000c9c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000be8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000bec:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000bf0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000bf4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000bf8:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8000ca4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000bfc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000c00:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c04:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000c08:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8000ca8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000c0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000c10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c14:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c18:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000c1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000c20:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000c9c <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000c24:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000c28:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000c30:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000ca0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c34:	ee67 7a87 	vmul.f32	s15, s15, s14
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
 8000c3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c42:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c4a:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c4e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c5e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000c98 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000c62:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000c66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c6e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000c72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c7a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000ca0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8000c88:	bf00      	nop
 8000c8a:	3740      	adds	r7, #64	; 0x40
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	00000000 	.word	0x00000000
 8000c94:	408f4000 	.word	0x408f4000
 8000c98:	439d8000 	.word	0x439d8000
 8000c9c:	43bfa000 	.word	0x43bfa000
 8000ca0:	447a0000 	.word	0x447a0000
 8000ca4:	41540000 	.word	0x41540000
 8000ca8:	43b90000 	.word	0x43b90000

08000cac <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000cac:	b480      	push	{r7}
 8000cae:	b091      	sub	sp, #68	; 0x44
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	61f8      	str	r0, [r7, #28]
 8000cb4:	ed87 0a06 	vstr	s0, [r7, #24]
 8000cb8:	edc7 0a05 	vstr	s1, [r7, #20]
 8000cbc:	ed87 1a04 	vstr	s2, [r7, #16]
 8000cc0:	edc7 1a03 	vstr	s3, [r7, #12]
 8000cc4:	ed87 2a02 	vstr	s4, [r7, #8]
 8000cc8:	edc7 2a01 	vstr	s5, [r7, #4]
 8000ccc:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000ce0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ce4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000cf2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cf6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d02:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000d06:	edd7 6a01 	vldr	s13, [r7, #4]
 8000d0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d12:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d1a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000d1e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000d22:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000d26:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d2e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000d32:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d36:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d42:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000d46:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d4e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000d52:	ed97 7a00 	vldr	s14, [r7]
 8000d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d5e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000d62:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d6a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000d6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d76:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d7e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000d82:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d86:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000d8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d92:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d9a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000d9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000da2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000da6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000daa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dae:	edd7 7a06 	vldr	s15, [r7, #24]
 8000db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dbe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000dc2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000dc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000dce:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000dd2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000dd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dda:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dde:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000de2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000de6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000dea:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000dee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000df2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000df6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dfa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000dfe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000e02:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000e06:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e0e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000e12:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000e24:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e2c:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000e30:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000e34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e3c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e40:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e48:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000e4c:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000e50:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e54:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e58:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e5c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e60:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000e64:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e68:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000e6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000e7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e86:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000e8a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000e8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e96:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e9a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ea2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000ea6:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000eaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000eae:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000eb2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000eb6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000eba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000ebe:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000ec2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000ec6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eca:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000ece:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ed2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ed6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8000ee8:	bf00      	nop
 8000eea:	3744      	adds	r7, #68	; 0x44
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	ed2d 8b08 	vpush	{d8-d11}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f12:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f1a:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000f22:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000f2a:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000f32:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000f3a:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000f42:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8000f5e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000f62:	edd7 7a00 	vldr	s15, [r7]
 8000f66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	edd3 6a00 	vldr	s13, [r3]
 8000f70:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	ed93 7a00 	vldr	s14, [r3]
 8000f86:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f96:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000f9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f9e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	2004      	movs	r0, #4
 8000faa:	eeb0 0a67 	vmov.f32	s0, s15
 8000fae:	f000 fbb3 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000fb2:	eeb0 7b40 	vmov.f64	d7, d0
 8000fb6:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000fba:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000fbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fc2:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	ed93 7a00 	vldr	s14, [r3]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	edd3 5a00 	vldr	s11, [r3]
 8000fd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000fda:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fde:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fea:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fee:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000ff2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ff6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ffa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	edd3 6a00 	vldr	s13, [r3]
 8001004:	edd7 7a05 	vldr	s15, [r7, #20]
 8001008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800100c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001010:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001014:	edd7 7a03 	vldr	s15, [r7, #12]
 8001018:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	edd3 7a00 	vldr	s15, [r3]
 8001022:	2004      	movs	r0, #4
 8001024:	eeb0 0a67 	vmov.f32	s0, s15
 8001028:	f000 fb76 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800102c:	eeb0 7b40 	vmov.f64	d7, d0
 8001030:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001034:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001038:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800103c:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	ed93 7a00 	vldr	s14, [r3]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	edd3 5a00 	vldr	s11, [r3]
 800104c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001050:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001054:	edd7 7a06 	vldr	s15, [r7, #24]
 8001058:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800105c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001060:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001064:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001068:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 800106c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001070:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 800107a:	edd7 7a08 	vldr	s15, [r7, #32]
 800107e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001082:	edd7 7a03 	vldr	s15, [r7, #12]
 8001086:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	2003      	movs	r0, #3
 8001092:	eeb0 0a67 	vmov.f32	s0, s15
 8001096:	f000 fb3f 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800109a:	eeb0 7b40 	vmov.f64	d7, d0
 800109e:	ee29 7b07 	vmul.f64	d7, d9, d7
 80010a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80010a6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	ed93 7a00 	vldr	s14, [r3]
 80010b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010bc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80010c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c8:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 80010cc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010d0:	edd7 7a00 	vldr	s15, [r7]
 80010d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	edd3 5a00 	vldr	s11, [r3]
 80010de:	edd7 7a08 	vldr	s15, [r7, #32]
 80010e2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80010e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ee:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80010f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	edd3 6a00 	vldr	s13, [r3]
 8001104:	edd7 7a05 	vldr	s15, [r7, #20]
 8001108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001114:	edd7 7a03 	vldr	s15, [r7, #12]
 8001118:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	2004      	movs	r0, #4
 8001124:	eeb0 0a67 	vmov.f32	s0, s15
 8001128:	f000 faf6 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800112c:	eeb0 7b40 	vmov.f64	d7, d0
 8001130:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001134:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001138:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800113c:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	ed93 7a00 	vldr	s14, [r3]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	edd3 5a00 	vldr	s11, [r3]
 800114c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001150:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001154:	edd7 7a06 	vldr	s15, [r7, #24]
 8001158:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800115c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001160:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001164:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001168:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800116c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001170:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	ed93 7a00 	vldr	s14, [r3]
 8001180:	edd7 7a05 	vldr	s15, [r7, #20]
 8001184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001188:	edd7 7a07 	vldr	s15, [r7, #28]
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001194:	edd7 7a03 	vldr	s15, [r7, #12]
 8001198:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	2004      	movs	r0, #4
 80011a4:	eeb0 0a67 	vmov.f32	s0, s15
 80011a8:	f000 fab6 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011ac:	eeb0 7b40 	vmov.f64	d7, d0
 80011b0:	ee29 6b07 	vmul.f64	d6, d9, d7
 80011b4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011bc:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	ed93 7a00 	vldr	s14, [r3]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edd3 5a00 	vldr	s11, [r3]
 80011cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011d0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80011d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e4:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80011ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	edd3 6a00 	vldr	s13, [r3]
 80011fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800120a:	edd7 7a03 	vldr	s15, [r7, #12]
 800120e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	edd3 7a00 	vldr	s15, [r3]
 8001218:	2004      	movs	r0, #4
 800121a:	eeb0 0a67 	vmov.f32	s0, s15
 800121e:	f000 fa7b 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001222:	eeb0 7b40 	vmov.f64	d7, d0
 8001226:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800122a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800122e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001232:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	ed93 7a00 	vldr	s14, [r3]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edd3 5a00 	vldr	s11, [r3]
 8001242:	edd7 7a04 	vldr	s15, [r7, #16]
 8001246:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800124a:	edd7 7a06 	vldr	s15, [r7, #24]
 800124e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001256:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800125a:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800125e:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001262:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001266:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800126a:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	ed93 7a00 	vldr	s14, [r3]
 8001274:	edd7 7a05 	vldr	s15, [r7, #20]
 8001278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001284:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001288:	edd7 7a03 	vldr	s15, [r7, #12]
 800128c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	2004      	movs	r0, #4
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	f000 fa3c 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012a0:	eeb0 7b40 	vmov.f64	d7, d0
 80012a4:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80012a8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80012ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012b0:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	ed93 7a00 	vldr	s14, [r3]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	edd3 5a00 	vldr	s11, [r3]
 80012c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80012c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012cc:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80012d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012d8:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80012e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001300:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001304:	edd7 7a03 	vldr	s15, [r7, #12]
 8001308:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	2004      	movs	r0, #4
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	f000 f9fe 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800131c:	eeb0 7b40 	vmov.f64	d7, d0
 8001320:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001324:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001328:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800132c:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	ed93 7a00 	vldr	s14, [r3]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	edd3 5a00 	vldr	s11, [r3]
 800133c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001340:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001344:	edd7 7a06 	vldr	s15, [r7, #24]
 8001348:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800134c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001350:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001354:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001358:	ed97 7a07 	vldr	s14, [r7, #28]
 800135c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	edd3 6a00 	vldr	s13, [r3]
 800136a:	edd7 7a05 	vldr	s15, [r7, #20]
 800136e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001376:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800137a:	edd7 7a03 	vldr	s15, [r7, #12]
 800137e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	2004      	movs	r0, #4
 800138a:	eeb0 0a67 	vmov.f32	s0, s15
 800138e:	f000 f9c3 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001392:	eeb0 7b40 	vmov.f64	d7, d0
 8001396:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800139a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800139e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013a2:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	ed93 7a00 	vldr	s14, [r3]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 5a00 	vldr	s11, [r3]
 80013b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80013be:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80013c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ca:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013ce:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80013d2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013d6:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013da:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80013de:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	2003      	movs	r0, #3
 80013ee:	eeb0 0a67 	vmov.f32	s0, s15
 80013f2:	f000 f991 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013f6:	eeb0 7b40 	vmov.f64	d7, d0
 80013fa:	ee29 7b07 	vmul.f64	d7, d9, d7
 80013fe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001402:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	ed93 7a00 	vldr	s14, [r3]
 800140c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001414:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001418:	ee36 6b07 	vadd.f64	d6, d6, d7
 800141c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001420:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001424:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001428:	ee28 7b07 	vmul.f64	d7, d8, d7
 800142c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	ed93 7a00 	vldr	s14, [r3]
 800143c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001440:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001444:	edd7 7a05 	vldr	s15, [r7, #20]
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001450:	edd7 7a03 	vldr	s15, [r7, #12]
 8001454:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	2003      	movs	r0, #3
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	f000 f958 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001468:	eeb0 7b40 	vmov.f64	d7, d0
 800146c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001470:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001474:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001478:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800147c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001480:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	2003      	movs	r0, #3
 800148c:	eeb0 0a67 	vmov.f32	s0, s15
 8001490:	f000 f942 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001494:	eeb0 7b40 	vmov.f64	d7, d0
 8001498:	ee29 7b07 	vmul.f64	d7, d9, d7
 800149c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014a0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80014be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014c2:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	ed93 7a00 	vldr	s14, [r3]
 80014cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80014e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e4:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	2004      	movs	r0, #4
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	f000 f910 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014f8:	eeb0 7b40 	vmov.f64	d7, d0
 80014fc:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001500:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001504:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001508:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed93 7a00 	vldr	s14, [r3]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	edd3 5a00 	vldr	s11, [r3]
 8001518:	edd7 7a04 	vldr	s15, [r7, #16]
 800151c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001520:	edd7 7a06 	vldr	s15, [r7, #24]
 8001524:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001530:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001534:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001538:	ed97 7a07 	vldr	s14, [r7, #28]
 800153c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	edd3 6a00 	vldr	s13, [r3]
 800154a:	edd7 7a05 	vldr	s15, [r7, #20]
 800154e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001556:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800155a:	edd7 7a03 	vldr	s15, [r7, #12]
 800155e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	2004      	movs	r0, #4
 800156a:	eeb0 0a67 	vmov.f32	s0, s15
 800156e:	f000 f8d3 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001572:	eeb0 7b40 	vmov.f64	d7, d0
 8001576:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800157a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800157e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001582:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	ed93 7a00 	vldr	s14, [r3]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	edd3 5a00 	vldr	s11, [r3]
 8001592:	edd7 7a04 	vldr	s15, [r7, #16]
 8001596:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800159a:	edd7 7a06 	vldr	s15, [r7, #24]
 800159e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80015a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015aa:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80015ae:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80015b2:	ee38 7b47 	vsub.f64	d7, d8, d7
 80015b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 80015c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	2002      	movs	r0, #2
 80015d8:	eeb0 0a67 	vmov.f32	s0, s15
 80015dc:	f000 f89c 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015e0:	eeb0 7b40 	vmov.f64	d7, d0
 80015e4:	ee29 7b07 	vmul.f64	d7, d9, d7
 80015e8:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80015ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	2003      	movs	r0, #3
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	f000 f88a 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001604:	eeb0 7b40 	vmov.f64	d7, d0
 8001608:	ee29 7b07 	vmul.f64	d7, d9, d7
 800160c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001610:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	ed93 7a00 	vldr	s14, [r3]
 800161a:	edd7 7a04 	vldr	s15, [r7, #16]
 800161e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001622:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001626:	ee36 6b07 	vadd.f64	d6, d6, d7
 800162a:	edd7 7a06 	vldr	s15, [r7, #24]
 800162e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001632:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 8001636:	edd7 7a03 	vldr	s15, [r7, #12]
 800163a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	2003      	movs	r0, #3
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	f000 f865 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800164e:	eeb0 7b40 	vmov.f64	d7, d0
 8001652:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001656:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800165a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	edd7 7a04 	vldr	s15, [r7, #16]
 8001668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001670:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001674:	edd7 7a05 	vldr	s15, [r7, #20]
 8001678:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800167c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001680:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001684:	ed97 7a07 	vldr	s14, [r7, #28]
 8001688:	edd7 7a02 	vldr	s15, [r7, #8]
 800168c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	edd3 6a00 	vldr	s13, [r3]
 8001696:	edd7 7a05 	vldr	s15, [r7, #20]
 800169a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80016a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016aa:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	2004      	movs	r0, #4
 80016b6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ba:	f000 f82d 	bl	8001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016be:	eeb0 7b40 	vmov.f64	d7, d0
 80016c2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80016c6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80016ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016ce:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	ed93 7a00 	vldr	s14, [r3]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edd3 5a00 	vldr	s11, [r3]
 80016de:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80016e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ea:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80016ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f6:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80016fa:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80016fe:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001702:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	ecbd 8b08 	vpop	{d8-d11}
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001722:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8001724:	edd7 7a01 	vldr	s15, [r7, #4]
 8001728:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	ee06 3a90 	vmov	s13, r3
 8001732:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8001736:	eeb0 1b46 	vmov.f64	d1, d6
 800173a:	eeb0 0b47 	vmov.f64	d0, d7
 800173e:	f00e fef7 	bl	8010530 <pow>
 8001742:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8001746:	eeb0 0b47 	vmov.f64	d0, d7
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	ed87 0a01 	vstr	s0, [r7, #4]
 800175a:	edd7 7a01 	vldr	s15, [r7, #4]
 800175e:	fefb 7a67 	vrintm.f32	s15, s15
 8001762:	eeb0 0a67 	vmov.f32	s0, s15
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	ed87 0a01 	vstr	s0, [r7, #4]
 800177a:	edd7 7a01 	vldr	s15, [r7, #4]
 800177e:	fef8 7a67 	vrinta.f32	s15, s15
 8001782:	eeb0 0a67 	vmov.f32	s0, s15
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	22b4      	movs	r2, #180	; 0xb4
 80017b2:	615a      	str	r2, [r3, #20]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	761a      	strb	r2, [r3, #24]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	22ef      	movs	r2, #239	; 0xef
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
}
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4619      	mov	r1, r3
 8001818:	4610      	mov	r0, r2
 800181a:	f00b facb 	bl	800cdb4 <HAL_TIM_PWM_Start>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8001828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182a:	b085      	sub	sp, #20
 800182c:	af02      	add	r7, sp, #8
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d13f      	bne.n	80018ba <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691c      	ldr	r4, [r3, #16]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	3301      	adds	r3, #1
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001854:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001adc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185c:	eeb0 0a67 	vmov.f32	s0, s15
 8001860:	f7ff ff86 	bl	8001770 <_ZSt5roundf>
 8001864:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	3301      	adds	r3, #1
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001882:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001ae0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188a:	eeb0 0a67 	vmov.f32	s0, s15
 800188e:	f7ff ff5f 	bl	8001750 <_ZSt5floorf>
 8001892:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800189a:	ee17 3a90 	vmov	r3, s15
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	9600      	str	r6, [sp, #0]
 80018a2:	462b      	mov	r3, r5
 80018a4:	4622      	mov	r2, r4
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f9cf 	bl	8001c4c <_ZN10ServoMotor10GripperMapElllll>
 80018ae:	4602      	mov	r2, r0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 80018b8:	e176      	b.n	8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d13f      	bne.n	8001942 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691c      	ldr	r4, [r3, #16]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	3301      	adds	r3, #1
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018dc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001adc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80018e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e4:	eeb0 0a67 	vmov.f32	s0, s15
 80018e8:	f7ff ff42 	bl	8001770 <_ZSt5roundf>
 80018ec:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80018f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	3301      	adds	r3, #1
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800190a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001ae0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 800190e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	f7ff ff1b 	bl	8001750 <_ZSt5floorf>
 800191a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 800191e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001922:	ee17 3a90 	vmov	r3, s15
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	9600      	str	r6, [sp, #0]
 800192a:	462b      	mov	r3, r5
 800192c:	4622      	mov	r2, r4
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f98b 	bl	8001c4c <_ZN10ServoMotor10GripperMapElllll>
 8001936:	4602      	mov	r2, r0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001940:	e132      	b.n	8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b08      	cmp	r3, #8
 8001948:	d13f      	bne.n	80019ca <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691c      	ldr	r4, [r3, #16]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	3301      	adds	r3, #1
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001964:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001adc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196c:	eeb0 0a67 	vmov.f32	s0, s15
 8001970:	f7ff fefe 	bl	8001770 <_ZSt5roundf>
 8001974:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800197c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	3301      	adds	r3, #1
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001992:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001ae0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199a:	eeb0 0a67 	vmov.f32	s0, s15
 800199e:	f7ff fed7 	bl	8001750 <_ZSt5floorf>
 80019a2:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 80019a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019aa:	ee17 3a90 	vmov	r3, s15
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	9600      	str	r6, [sp, #0]
 80019b2:	462b      	mov	r3, r5
 80019b4:	4622      	mov	r2, r4
 80019b6:	6839      	ldr	r1, [r7, #0]
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f947 	bl	8001c4c <_ZN10ServoMotor10GripperMapElllll>
 80019be:	4602      	mov	r2, r0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80019c8:	e0ee      	b.n	8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d13f      	bne.n	8001a52 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691c      	ldr	r4, [r3, #16]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	3301      	adds	r3, #1
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ec:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001adc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80019f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f4:	eeb0 0a67 	vmov.f32	s0, s15
 80019f8:	f7ff feba 	bl	8001770 <_ZSt5roundf>
 80019fc:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a04:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	3301      	adds	r3, #1
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a1a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001ae0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a22:	eeb0 0a67 	vmov.f32	s0, s15
 8001a26:	f7ff fe93 	bl	8001750 <_ZSt5floorf>
 8001a2a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a32:	ee17 3a90 	vmov	r3, s15
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	9600      	str	r6, [sp, #0]
 8001a3a:	462b      	mov	r3, r5
 8001a3c:	4622      	mov	r2, r4
 8001a3e:	6839      	ldr	r1, [r7, #0]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f903 	bl	8001c4c <_ZN10ServoMotor10GripperMapElllll>
 8001a46:	4602      	mov	r2, r0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a50:	e0aa      	b.n	8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d144      	bne.n	8001ae4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691c      	ldr	r4, [r3, #16]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a74:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001adc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a80:	f7ff fe76 	bl	8001770 <_ZSt5roundf>
 8001a84:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	3301      	adds	r3, #1
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001ae0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001aae:	f7ff fe4f 	bl	8001750 <_ZSt5floorf>
 8001ab2:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aba:	ee17 3a90 	vmov	r3, s15
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	9600      	str	r6, [sp, #0]
 8001ac2:	462b      	mov	r3, r5
 8001ac4:	4622      	mov	r2, r4
 8001ac6:	6839      	ldr	r1, [r7, #0]
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f8bf 	bl	8001c4c <_ZN10ServoMotor10GripperMapElllll>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001ad8:	e066      	b.n	8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8001ada:	bf00      	nop
 8001adc:	3d4ccccd 	.word	0x3d4ccccd
 8001ae0:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b14      	cmp	r3, #20
 8001aea:	d13f      	bne.n	8001b6c <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691c      	ldr	r4, [r3, #16]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	3301      	adds	r3, #1
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b06:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001adc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b12:	f7ff fe2d 	bl	8001770 <_ZSt5roundf>
 8001b16:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1e:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b34:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8001ae0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b40:	f7ff fe06 	bl	8001750 <_ZSt5floorf>
 8001b44:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4c:	ee17 3a90 	vmov	r3, s15
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	9600      	str	r6, [sp, #0]
 8001b54:	462b      	mov	r3, r5
 8001b56:	4622      	mov	r2, r4
 8001b58:	6839      	ldr	r1, [r7, #0]
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f876 	bl	8001c4c <_ZN10ServoMotor10GripperMapElllll>
 8001b60:	4602      	mov	r2, r0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b6a:	e01d      	b.n	8001ba8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2200      	movs	r2, #0
 8001b88:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2200      	movs	r2, #0
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bb0 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	761a      	strb	r2, [r3, #24]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	765a      	strb	r2, [r3, #25]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7e5b      	ldrb	r3, [r3, #25]
 8001c00:	f083 0301 	eor.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fe09 	bl	8001828 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001c16:	e000      	b.n	8001c1a <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001c18:	bf00      	nop
}
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7e1b      	ldrb	r3, [r3, #24]
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fdf3 	bl	8001828 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001c42:	e000      	b.n	8001c46 <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001c44:	bf00      	nop
}
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	69f9      	ldr	r1, [r7, #28]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	1a8a      	subs	r2, r1, r2
 8001c66:	fb03 f202 	mul.w	r2, r3, r2
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1acb      	subs	r3, r1, r3
 8001c70:	fb92 f2f3 	sdiv	r2, r2, r3
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	4413      	add	r3, r2
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c92:	eef0 7ae7 	vabs.f32	s15, s15
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001cb6:	615a      	str	r2, [r3, #20]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001cbc:	619a      	str	r2, [r3, #24]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cc4:	61da      	str	r2, [r3, #28]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001cca:	621a      	str	r2, [r3, #32]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	22c7      	movs	r2, #199	; 0xc7
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cf0:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001cf6:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001cf8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001d24 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 f82f 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	60da      	str	r2, [r3, #12]
}
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	41a00000 	.word	0x41a00000
 8001d1c:	469c4000 	.word	0x469c4000
 8001d20:	43480000 	.word	0x43480000
 8001d24:	00000000 	.word	0x00000000

08001d28 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
}
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4610      	mov	r0, r2
 8001d52:	f00b f82f 	bl	800cdb4 <HAL_TIM_PWM_Start>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	ed2d 8b02 	vpush	{d8}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d80:	f7ff ff80 	bl	8001c84 <_ZSt4fabsf>
 8001d84:	eeb0 7a40 	vmov.f32	s14, s0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	bf94      	ite	ls
 8001d98:	2301      	movls	r3, #1
 8001d9a:	2300      	movhi	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	e01b      	b.n	8001de2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	edd3 7a04 	vldr	s15, [r3, #16]
 8001db0:	eeb0 0a67 	vmov.f32	s0, s15
 8001db4:	f7ff ff66 	bl	8001c84 <_ZSt4fabsf>
 8001db8:	eeb0 7a40 	vmov.f32	s14, s0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	bfac      	ite	ge
 8001dcc:	2301      	movge	r3, #1
 8001dce:	2300      	movlt	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	e001      	b.n	8001de2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001de8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002084 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	f2c0 80db 	blt.w	8001fae <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6898      	ldr	r0, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2201      	movs	r2, #1
 8001e04:	4619      	mov	r1, r3
 8001e06:	f008 f9c5 	bl	800a194 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	3301      	adds	r3, #1
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e24:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002088 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001e2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e34:	eeb0 0a67 	vmov.f32	s0, s15
 8001e38:	f7ff fc9a 	bl	8001770 <_ZSt5roundf>
 8001e3c:	eef0 7a40 	vmov.f32	s15, s0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e4a:	ee17 2a90 	vmov	r2, s15
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d113      	bne.n	8001e80 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fa5b 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e6a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e78:	ee17 2a90 	vmov	r2, s15
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001e7e:	e1e0      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d113      	bne.n	8001eb0 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001e92:	085b      	lsrs	r3, r3, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fa43 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e9a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ea8:	ee17 2a90 	vmov	r2, s15
 8001eac:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001eae:	e1c8      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d113      	bne.n	8001ee0 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fa2b 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001eca:	eeb0 7b40 	vmov.f64	d7, d0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ed8:	ee17 2a90 	vmov	r2, s15
 8001edc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ede:	e1b0      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	d113      	bne.n	8001f10 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001ef2:	085b      	lsrs	r3, r3, #1
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fa13 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001efa:	eeb0 7b40 	vmov.f64	d7, d0
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f08:	ee17 2a90 	vmov	r2, s15
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f0e:	e198      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d113      	bne.n	8001f40 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 f9fb 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f2a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f38:	ee17 2a90 	vmov	r2, s15
 8001f3c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f3e:	e180      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b14      	cmp	r3, #20
 8001f46:	d113      	bne.n	8001f70 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001f52:	085b      	lsrs	r3, r3, #1
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 f9e3 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f5a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f68:	ee17 2a90 	vmov	r2, s15
 8001f6c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f6e:	e168      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2200      	movs	r2, #0
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001fac:	e149      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fb4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800208c <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc0:	f200 80e5 	bhi.w	800218e <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6898      	ldr	r0, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f008 f8df 	bl	800a194 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	3301      	adds	r3, #1
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001fe8:	ed97 0a03 	vldr	s0, [r7, #12]
 8001fec:	f7ff fe4a 	bl	8001c84 <_ZSt4fabsf>
 8001ff0:	eef0 7a40 	vmov.f32	s15, s0
 8001ff4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001ff8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002088 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8002000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002008:	eeb0 0a67 	vmov.f32	s0, s15
 800200c:	f7ff fbb0 	bl	8001770 <_ZSt5roundf>
 8002010:	eef0 7a40 	vmov.f32	s15, s0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201e:	ee17 2a90 	vmov	r2, s15
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d113      	bne.n	8002054 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f971 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800203e:	eeb0 7b40 	vmov.f64	d7, d0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800204c:	ee17 2a90 	vmov	r2, s15
 8002050:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002052:	e0f6      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d119      	bne.n	8002090 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	4618      	mov	r0, r3
 800206a:	f000 f959 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800206e:	eeb0 7b40 	vmov.f64	d7, d0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800207c:	ee17 2a90 	vmov	r2, s15
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002082:	e0de      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8002084:	3a83126f 	.word	0x3a83126f
 8002088:	4d64e1c0 	.word	0x4d64e1c0
 800208c:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d113      	bne.n	80020c0 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 f93b 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80020aa:	eeb0 7b40 	vmov.f64	d7, d0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020b8:	ee17 2a90 	vmov	r2, s15
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020be:	e0c0      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b0c      	cmp	r3, #12
 80020c6:	d113      	bne.n	80020f0 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 f923 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80020da:	eeb0 7b40 	vmov.f64	d7, d0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020e8:	ee17 2a90 	vmov	r2, s15
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020ee:	e0a8      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b10      	cmp	r3, #16
 80020f6:	d113      	bne.n	8002120 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	4618      	mov	r0, r3
 8002106:	f000 f90b 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800210a:	eeb0 7b40 	vmov.f64	d7, d0
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002118:	ee17 2a90 	vmov	r2, s15
 800211c:	659a      	str	r2, [r3, #88]	; 0x58
}
 800211e:	e090      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b14      	cmp	r3, #20
 8002126:	d113      	bne.n	8002150 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8002132:	085b      	lsrs	r3, r3, #1
 8002134:	4618      	mov	r0, r3
 8002136:	f000 f8f3 	bl	8002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800213a:	eeb0 7b40 	vmov.f64	d7, d0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002148:	ee17 2a90 	vmov	r2, s15
 800214c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800214e:	e078      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2200      	movs	r2, #0
 8002158:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2200      	movs	r2, #0
 8002162:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2200      	movs	r2, #0
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2200      	movs	r2, #0
 8002180:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2200      	movs	r2, #0
 800218a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800218c:	e059      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2200      	movs	r2, #0
 800219e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021a0:	e04f      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d105      	bne.n	80021b6 <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021b4:	e045      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d105      	bne.n	80021ca <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2200      	movs	r2, #0
 80021c6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021c8:	e03b      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d105      	bne.n	80021de <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2200      	movs	r2, #0
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021dc:	e031      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d105      	bne.n	80021f2 <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2200      	movs	r2, #0
 80021ee:	659a      	str	r2, [r3, #88]	; 0x58
}
 80021f0:	e027      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b14      	cmp	r3, #20
 80021f8:	d105      	bne.n	8002206 <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2200      	movs	r2, #0
 8002202:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002204:	e01d      	b.n	8002242 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2200      	movs	r2, #0
 800220e:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2200      	movs	r2, #0
 8002218:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2200      	movs	r2, #0
 8002222:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2200      	movs	r2, #0
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	ecbd 8b02 	vpop	{d8}
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop

08002250 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 800225c:	ed97 0a00 	vldr	s0, [r7]
 8002260:	f7ff fd10 	bl	8001c84 <_ZSt4fabsf>
 8002264:	eef0 7a40 	vmov.f32	s15, s0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800228a:	eeb0 0b47 	vmov.f64	d0, d7
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ffe5 	bl	8002276 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80022ac:	eeb0 7b40 	vmov.f64	d7, d0
 80022b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	0000      	movs	r0, r0
 80022c4:	0000      	movs	r0, r0
	...

080022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	ed93 7a07 	vldr	s14, [r3, #28]
 80022da:	edd7 7a00 	vldr	s15, [r7]
 80022de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80022e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	edd3 7a08 	vldr	s15, [r3, #32]
 80022f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 80022fa:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8002318 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 80022fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 8002302:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002306:	eeb0 0a67 	vmov.f32	s0, s15
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fd28 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	704a95d1 	.word	0x704a95d1
 800231c:	40b88b2f 	.word	0x40b88b2f

08002320 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002332:	eeb0 0b47 	vmov.f64	d0, d7
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <MX_CRC_Init+0x54>)
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <MX_CRC_Init+0x58>)
 8002348:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <MX_CRC_Init+0x54>)
 800234c:	2201      	movs	r2, #1
 800234e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <MX_CRC_Init+0x54>)
 8002352:	2201      	movs	r2, #1
 8002354:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <MX_CRC_Init+0x54>)
 8002358:	f248 0205 	movw	r2, #32773	; 0x8005
 800235c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <MX_CRC_Init+0x54>)
 8002360:	2208      	movs	r2, #8
 8002362:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <MX_CRC_Init+0x54>)
 8002366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800236a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_CRC_Init+0x54>)
 800236e:	2220      	movs	r2, #32
 8002370:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <MX_CRC_Init+0x54>)
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <MX_CRC_Init+0x54>)
 800237a:	2201      	movs	r2, #1
 800237c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800237e:	4805      	ldr	r0, [pc, #20]	; (8002394 <MX_CRC_Init+0x54>)
 8002380:	f004 fd1e 	bl	8006dc0 <HAL_CRC_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 800238a:	f002 fc3b 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2400042c 	.word	0x2400042c
 8002398:	58024c00 	.word	0x58024c00

0800239c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <HAL_CRC_MspInit+0x3c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10e      	bne.n	80023cc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_CRC_MspInit+0x40>)
 80023b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b4:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_CRC_MspInit+0x40>)
 80023b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_CRC_MspInit+0x40>)
 80023c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	58024c00 	.word	0x58024c00
 80023dc:	58024400 	.word	0x58024400

080023e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <MX_DMA_Init+0x9c>)
 80023e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023ec:	4a23      	ldr	r2, [pc, #140]	; (800247c <MX_DMA_Init+0x9c>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023f6:	4b21      	ldr	r3, [pc, #132]	; (800247c <MX_DMA_Init+0x9c>)
 80023f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	200b      	movs	r0, #11
 800240a:	f004 fc98 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800240e:	200b      	movs	r0, #11
 8002410:	f004 fcaf 	bl	8006d72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2100      	movs	r1, #0
 8002418:	200c      	movs	r0, #12
 800241a:	f004 fc90 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800241e:	200c      	movs	r0, #12
 8002420:	f004 fca7 	bl	8006d72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	200d      	movs	r0, #13
 800242a:	f004 fc88 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800242e:	200d      	movs	r0, #13
 8002430:	f004 fc9f 	bl	8006d72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	2100      	movs	r1, #0
 8002438:	200e      	movs	r0, #14
 800243a:	f004 fc80 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800243e:	200e      	movs	r0, #14
 8002440:	f004 fc97 	bl	8006d72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002444:	2200      	movs	r2, #0
 8002446:	2100      	movs	r1, #0
 8002448:	200f      	movs	r0, #15
 800244a:	f004 fc78 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800244e:	200f      	movs	r0, #15
 8002450:	f004 fc8f 	bl	8006d72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	2010      	movs	r0, #16
 800245a:	f004 fc70 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800245e:	2010      	movs	r0, #16
 8002460:	f004 fc87 	bl	8006d72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	2011      	movs	r0, #17
 800246a:	f004 fc68 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800246e:	2011      	movs	r0, #17
 8002470:	f004 fc7f 	bl	8006d72 <HAL_NVIC_EnableIRQ>

}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	58024400 	.word	0x58024400

08002480 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	; 0x30
 8002484:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002496:	4b87      	ldr	r3, [pc, #540]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249c:	4a85      	ldr	r2, [pc, #532]	; (80026b4 <MX_GPIO_Init+0x234>)
 800249e:	f043 0310 	orr.w	r3, r3, #16
 80024a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a6:	4b83      	ldr	r3, [pc, #524]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b4:	4b7f      	ldr	r3, [pc, #508]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ba:	4a7e      	ldr	r2, [pc, #504]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c4:	4b7b      	ldr	r3, [pc, #492]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024d2:	4b78      	ldr	r3, [pc, #480]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d8:	4a76      	ldr	r2, [pc, #472]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e2:	4b74      	ldr	r3, [pc, #464]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	4b70      	ldr	r3, [pc, #448]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f6:	4a6f      	ldr	r2, [pc, #444]	; (80026b4 <MX_GPIO_Init+0x234>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002500:	4b6c      	ldr	r3, [pc, #432]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	4b69      	ldr	r3, [pc, #420]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002514:	4a67      	ldr	r2, [pc, #412]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251e:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800252c:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <MX_GPIO_Init+0x234>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002532:	4a60      	ldr	r2, [pc, #384]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800253c:	4b5d      	ldr	r3, [pc, #372]	; (80026b4 <MX_GPIO_Init+0x234>)
 800253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800254a:	4b5a      	ldr	r3, [pc, #360]	; (80026b4 <MX_GPIO_Init+0x234>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002550:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <MX_GPIO_Init+0x234>)
 8002552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002556:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800255a:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <MX_GPIO_Init+0x234>)
 800255c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002568:	2200      	movs	r2, #0
 800256a:	f644 2121 	movw	r1, #18977	; 0x4a21
 800256e:	4852      	ldr	r0, [pc, #328]	; (80026b8 <MX_GPIO_Init+0x238>)
 8002570:	f007 fe10 	bl	800a194 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002574:	2200      	movs	r2, #0
 8002576:	f24c 0102 	movw	r1, #49154	; 0xc002
 800257a:	4850      	ldr	r0, [pc, #320]	; (80026bc <MX_GPIO_Init+0x23c>)
 800257c:	f007 fe0a 	bl	800a194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002580:	2200      	movs	r2, #0
 8002582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002586:	484e      	ldr	r0, [pc, #312]	; (80026c0 <MX_GPIO_Init+0x240>)
 8002588:	f007 fe04 	bl	800a194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800258c:	2200      	movs	r2, #0
 800258e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002592:	484c      	ldr	r0, [pc, #304]	; (80026c4 <MX_GPIO_Init+0x244>)
 8002594:	f007 fdfe 	bl	800a194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8002598:	2200      	movs	r2, #0
 800259a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800259e:	484a      	ldr	r0, [pc, #296]	; (80026c8 <MX_GPIO_Init+0x248>)
 80025a0:	f007 fdf8 	bl	800a194 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80025a4:	f644 2321 	movw	r3, #18977	; 0x4a21
 80025a8:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025aa:	2301      	movs	r3, #1
 80025ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	4619      	mov	r1, r3
 80025bc:	483e      	ldr	r0, [pc, #248]	; (80026b8 <MX_GPIO_Init+0x238>)
 80025be:	f007 fc39 	bl	8009e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 80025c2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80025c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025d2:	f107 031c 	add.w	r3, r7, #28
 80025d6:	4619      	mov	r1, r3
 80025d8:	4838      	ldr	r0, [pc, #224]	; (80026bc <MX_GPIO_Init+0x23c>)
 80025da:	f007 fc2b 	bl	8009e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80025de:	f24c 0302 	movw	r3, #49154	; 0xc002
 80025e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e4:	2301      	movs	r3, #1
 80025e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025f0:	f107 031c 	add.w	r3, r7, #28
 80025f4:	4619      	mov	r1, r3
 80025f6:	4831      	ldr	r0, [pc, #196]	; (80026bc <MX_GPIO_Init+0x23c>)
 80025f8:	f007 fc1c 	bl	8009e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80025fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800260e:	f107 031c 	add.w	r3, r7, #28
 8002612:	4619      	mov	r1, r3
 8002614:	482a      	ldr	r0, [pc, #168]	; (80026c0 <MX_GPIO_Init+0x240>)
 8002616:	f007 fc0d 	bl	8009e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800261a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002620:	2301      	movs	r3, #1
 8002622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	4619      	mov	r1, r3
 8002632:	4824      	ldr	r0, [pc, #144]	; (80026c4 <MX_GPIO_Init+0x244>)
 8002634:	f007 fbfe 	bl	8009e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800263c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263e:	2301      	movs	r3, #1
 8002640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	4619      	mov	r1, r3
 8002650:	481d      	ldr	r0, [pc, #116]	; (80026c8 <MX_GPIO_Init+0x248>)
 8002652:	f007 fbef 	bl	8009e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 8002656:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800265a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800265c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4619      	mov	r1, r3
 800266c:	4817      	ldr	r0, [pc, #92]	; (80026cc <MX_GPIO_Init+0x24c>)
 800266e:	f007 fbe1 	bl	8009e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 8002672:	23c0      	movs	r3, #192	; 0xc0
 8002674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002676:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800267a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002680:	f107 031c 	add.w	r3, r7, #28
 8002684:	4619      	mov	r1, r3
 8002686:	480c      	ldr	r0, [pc, #48]	; (80026b8 <MX_GPIO_Init+0x238>)
 8002688:	f007 fbd4 	bl	8009e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	2017      	movs	r0, #23
 8002692:	f004 fb54 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002696:	2017      	movs	r0, #23
 8002698:	f004 fb6b 	bl	8006d72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	2028      	movs	r0, #40	; 0x28
 80026a2:	f004 fb4c 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026a6:	2028      	movs	r0, #40	; 0x28
 80026a8:	f004 fb63 	bl	8006d72 <HAL_NVIC_EnableIRQ>

}
 80026ac:	bf00      	nop
 80026ae:	3730      	adds	r7, #48	; 0x30
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	58024400 	.word	0x58024400
 80026b8:	58020400 	.word	0x58020400
 80026bc:	58021000 	.word	0x58021000
 80026c0:	58020c00 	.word	0x58020c00
 80026c4:	58020800 	.word	0x58020800
 80026c8:	58020000 	.word	0x58020000
 80026cc:	58021800 	.word	0x58021800

080026d0 <_Z12Insert_queueii>:

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value, int gripper_value)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
    if (bot == LIMIT - 1)
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <_Z12Insert_queueii+0x6c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b13      	cmp	r3, #19
 80026e0:	bf0c      	ite	eq
 80026e2:	2301      	moveq	r3, #1
 80026e4:	2300      	movne	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <_Z12Insert_queueii+0x20>
    {
        return false;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e01e      	b.n	800272e <_Z12Insert_queueii+0x5e>
    }
    else
    {
        if (first == - 1)
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <_Z12Insert_queueii+0x70>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <_Z12Insert_queueii+0x3a>
        {
            first = 0;
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <_Z12Insert_queueii+0x70>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
        }
		bot++;
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <_Z12Insert_queueii+0x6c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <_Z12Insert_queueii+0x6c>)
 8002712:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <_Z12Insert_queueii+0x6c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	490a      	ldr	r1, [pc, #40]	; (8002744 <_Z12Insert_queueii+0x74>)
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Gripper_State[bot] = gripper_value;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <_Z12Insert_queueii+0x6c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4908      	ldr	r1, [pc, #32]	; (8002748 <_Z12Insert_queueii+0x78>)
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 800272c:	2301      	movs	r3, #1
    }
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	2400000c 	.word	0x2400000c
 8002740:	24000008 	.word	0x24000008
 8002744:	24000b30 	.word	0x24000b30
 8002748:	24000b80 	.word	0x24000b80

0800274c <_Z10Call_queuev>:

int Call_queue()
    {
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
    int output;
    if (first == - 1 || first > bot)
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <_Z10Call_queuev+0x94>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800275a:	d005      	beq.n	8002768 <_Z10Call_queuev+0x1c>
 800275c:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <_Z10Call_queuev+0x94>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <_Z10Call_queuev+0x98>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	dd01      	ble.n	800276c <_Z10Call_queuev+0x20>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <_Z10Call_queuev+0x22>
 800276c:	2300      	movs	r3, #0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d026      	beq.n	80027c0 <_Z10Call_queuev+0x74>
    {
        printf("Don't have stack in queue \n");
 8002772:	481d      	ldr	r0, [pc, #116]	; (80027e8 <_Z10Call_queuev+0x9c>)
 8002774:	f00f fe64 	bl	8012440 <puts>
        for (int num = 0; num <= bot+1; num++)
 8002778:	2300      	movs	r3, #0
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <_Z10Call_queuev+0x98>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3301      	adds	r3, #1
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	bfd4      	ite	le
 8002788:	2301      	movle	r3, #1
 800278a:	2300      	movgt	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <_Z10Call_queuev+0x58>
        {
        	queue[num] = 0;
 8002792:	4a16      	ldr	r2, [pc, #88]	; (80027ec <_Z10Call_queuev+0xa0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2100      	movs	r1, #0
 8002798:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int num = 0; num <= bot+1; num++)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	e7eb      	b.n	800277c <_Z10Call_queuev+0x30>
        }
        first = -1;
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <_Z10Call_queuev+0x94>)
 80027a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027aa:	601a      	str	r2, [r3, #0]
        bot = -1;
 80027ac:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <_Z10Call_queuev+0x98>)
 80027ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027b2:	601a      	str	r2, [r3, #0]
        printf("Clear queue \n");
 80027b4:	480e      	ldr	r0, [pc, #56]	; (80027f0 <_Z10Call_queuev+0xa4>)
 80027b6:	f00f fe43 	bl	8012440 <puts>
        output = 255;
 80027ba:	23ff      	movs	r3, #255	; 0xff
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	e00a      	b.n	80027d6 <_Z10Call_queuev+0x8a>
    }
    else
    {
    	output = queue[first];
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <_Z10Call_queuev+0x94>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a09      	ldr	r2, [pc, #36]	; (80027ec <_Z10Call_queuev+0xa0>)
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	607b      	str	r3, [r7, #4]
        first++;
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <_Z10Call_queuev+0x94>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	4a03      	ldr	r2, [pc, #12]	; (80027e0 <_Z10Call_queuev+0x94>)
 80027d4:	6013      	str	r3, [r2, #0]
    }
    return output;
 80027d6:	687b      	ldr	r3, [r7, #4]

}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	24000008 	.word	0x24000008
 80027e4:	2400000c 	.word	0x2400000c
 80027e8:	080144c0 	.word	0x080144c0
 80027ec:	24000b30 	.word	0x24000b30
 80027f0:	080144dc 	.word	0x080144dc

080027f4 <_Z6fcb_IKffff>:
	Robot_Yaw = (J_q1 + J_q3 + J_q4)/1000.0;

}

void fcb_IK(float gripper_linear_x, float gripper_linear_y, float gripper_linear_z, float gripper_angular_yaw)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b092      	sub	sp, #72	; 0x48
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80027fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8002802:	ed87 1a01 	vstr	s2, [r7, #4]
 8002806:	edc7 1a00 	vstr	s3, [r7]
	float x = gripper_linear_x/1000.0;
 800280a:	ed97 7a03 	vldr	s14, [r7, #12]
 800280e:	eddf 6a78 	vldr	s13, [pc, #480]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 8002812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002816:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float y = gripper_linear_y/1000.0;
 800281a:	ed97 7a02 	vldr	s14, [r7, #8]
 800281e:	eddf 6a74 	vldr	s13, [pc, #464]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 8002822:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002826:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float z = gripper_linear_z/1000.0;
 800282a:	ed97 7a01 	vldr	s14, [r7, #4]
 800282e:	eddf 6a70 	vldr	s13, [pc, #448]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 8002832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002836:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float yaw = gripper_angular_yaw/1000.0;
 800283a:	ed97 7a00 	vldr	s14, [r7]
 800283e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 8002842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002846:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static float L12 = 0.38325;
	static float H1 = 0.125;
	static float H3 = 0.065;
	static float H4 = 0.190;

	float C3 = ((x*x)+(y*y)-(L12*L12)-(L3*L3)) / (2*L12*L3);
 800284a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800284e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002852:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002856:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800285a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800285e:	4b65      	ldr	r3, [pc, #404]	; (80029f4 <_Z6fcb_IKffff+0x200>)
 8002860:	edd3 6a00 	vldr	s13, [r3]
 8002864:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <_Z6fcb_IKffff+0x200>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800286e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002872:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <_Z6fcb_IKffff+0x204>)
 8002874:	edd3 6a00 	vldr	s13, [r3]
 8002878:	4b5f      	ldr	r3, [pc, #380]	; (80029f8 <_Z6fcb_IKffff+0x204>)
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002882:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002886:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <_Z6fcb_IKffff+0x200>)
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002890:	4b59      	ldr	r3, [pc, #356]	; (80029f8 <_Z6fcb_IKffff+0x204>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800289a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S3 = -1.0 * sqrt(1-(C3*C3));
 80028a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b2:	eeb0 0a67 	vmov.f32	s0, s15
 80028b6:	f7fe f842 	bl	800093e <_ZSt4sqrtf>
 80028ba:	eef0 7a40 	vmov.f32	s15, s0
 80028be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028c2:	eeb1 7b47 	vneg.f64	d7, d7
 80028c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028ca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q3 = atan2(S3,C3);
 80028ce:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80028d2:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80028d6:	f7fe f81e 	bl	8000916 <_ZSt5atan2ff>
 80028da:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	float L3S3 = L3*S3;
 80028de:	4b46      	ldr	r3, [pc, #280]	; (80029f8 <_Z6fcb_IKffff+0x204>)
 80028e0:	edd3 7a00 	vldr	s15, [r3]
 80028e4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80028e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L123C3 = L12 + (L3*C3);
 80028f0:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <_Z6fcb_IKffff+0x204>)
 80028f2:	ed93 7a00 	vldr	s14, [r3]
 80028f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028fe:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <_Z6fcb_IKffff+0x200>)
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002908:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float S1 = (-L3S3*x) + (L123C3*y);
 800290c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002910:	eeb1 7a67 	vneg.f32	s14, s15
 8002914:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002920:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800292c:	edc7 7a08 	vstr	s15, [r7, #32]
	float C1 = (L3S3*y) + (L123C3*x);
 8002930:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002934:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002940:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294c:	edc7 7a07 	vstr	s15, [r7, #28]
	float q1 = atan2(S1,C1);
 8002950:	edd7 0a07 	vldr	s1, [r7, #28]
 8002954:	ed97 0a08 	vldr	s0, [r7, #32]
 8002958:	f7fd ffdd 	bl	8000916 <_ZSt5atan2ff>
 800295c:	ed87 0a06 	vstr	s0, [r7, #24]
	float q4 = yaw - q1 - q3;
 8002960:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002964:	edd7 7a06 	vldr	s15, [r7, #24]
 8002968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800296c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002974:	edc7 7a05 	vstr	s15, [r7, #20]
	float q2 = z + H4 - H3 - H1;
 8002978:	4b20      	ldr	r3, [pc, #128]	; (80029fc <_Z6fcb_IKffff+0x208>)
 800297a:	ed93 7a00 	vldr	s14, [r3]
 800297e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002982:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <_Z6fcb_IKffff+0x20c>)
 8002988:	edd3 7a00 	vldr	s15, [r3]
 800298c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <_Z6fcb_IKffff+0x210>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299a:	edc7 7a04 	vstr	s15, [r7, #16]

	Planning_q1 = q1*1000.0;
 800299e:	edd7 7a06 	vldr	s15, [r7, #24]
 80029a2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 80029a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029aa:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <_Z6fcb_IKffff+0x214>)
 80029ac:	edc3 7a00 	vstr	s15, [r3]
	Planning_q2 = q2*1000.0;
 80029b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80029b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 80029b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <_Z6fcb_IKffff+0x218>)
 80029be:	edc3 7a00 	vstr	s15, [r3]
	Planning_q3 = q3*1000.0;
 80029c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029c6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 80029ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <_Z6fcb_IKffff+0x21c>)
 80029d0:	edc3 7a00 	vstr	s15, [r3]
	Planning_q4 = q4*1000.0;
 80029d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029d8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80029f0 <_Z6fcb_IKffff+0x1fc>
 80029dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <_Z6fcb_IKffff+0x220>)
 80029e2:	edc3 7a00 	vstr	s15, [r3]

}
 80029e6:	bf00      	nop
 80029e8:	3748      	adds	r7, #72	; 0x48
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	447a0000 	.word	0x447a0000
 80029f4:	24000218 	.word	0x24000218
 80029f8:	24000214 	.word	0x24000214
 80029fc:	24000224 	.word	0x24000224
 8002a00:	24000220 	.word	0x24000220
 8002a04:	2400021c 	.word	0x2400021c
 8002a08:	24000be4 	.word	0x24000be4
 8002a0c:	24000be8 	.word	0x24000be8
 8002a10:	24000bec 	.word	0x24000bec
 8002a14:	24000bf0 	.word	0x24000bf0

08002a18 <_Z20Update_State_Machinev>:
float offset_x_new = 0;
float offset_y_new = 0;
int indexy;
float pos_x,pos_y;
void Update_State_Machine()
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	ed2d 8b02 	vpush	{d8}
 8002a1e:	af00      	add	r7, sp, #0

    switch (control_state)
 8002a20:	4bbf      	ldr	r3, [pc, #764]	; (8002d20 <_Z20Update_State_Machinev+0x308>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	3b29      	subs	r3, #41	; 0x29
 8002a28:	2b0f      	cmp	r3, #15
 8002a2a:	f200 838c 	bhi.w	8003146 <_Z20Update_State_Machinev+0x72e>
 8002a2e:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <_Z20Update_State_Machinev+0x1c>)
 8002a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a34:	08002a75 	.word	0x08002a75
 8002a38:	08002d81 	.word	0x08002d81
 8002a3c:	08002ddd 	.word	0x08002ddd
 8002a40:	08003147 	.word	0x08003147
 8002a44:	08003147 	.word	0x08003147
 8002a48:	08003147 	.word	0x08003147
 8002a4c:	08003147 	.word	0x08003147
 8002a50:	08003147 	.word	0x08003147
 8002a54:	08003147 	.word	0x08003147
 8002a58:	08003147 	.word	0x08003147
 8002a5c:	08003155 	.word	0x08003155
 8002a60:	08002e39 	.word	0x08002e39
 8002a64:	08003155 	.word	0x08003155
 8002a68:	08002f5b 	.word	0x08002f5b
 8002a6c:	08003155 	.word	0x08003155
 8002a70:	080030a1 	.word	0x080030a1
    {
	case 41: // Update Trajectory
		indexy = Call_queue();
 8002a74:	f7ff fe6a 	bl	800274c <_Z10Call_queuev>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4aaa      	ldr	r2, [pc, #680]	; (8002d24 <_Z20Update_State_Machinev+0x30c>)
 8002a7c:	6013      	str	r3, [r2, #0]
		if (indexy != 255)
 8002a7e:	4ba9      	ldr	r3, [pc, #676]	; (8002d24 <_Z20Update_State_Machinev+0x30c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2bff      	cmp	r3, #255	; 0xff
 8002a84:	f000 8131 	beq.w	8002cea <_Z20Update_State_Machinev+0x2d2>
			{
				test_value_r = radias[indexy];
 8002a88:	4ba6      	ldr	r3, [pc, #664]	; (8002d24 <_Z20Update_State_Machinev+0x30c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4aa6      	ldr	r2, [pc, #664]	; (8002d28 <_Z20Update_State_Machinev+0x310>)
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a9a:	ee17 2a90 	vmov	r2, s15
 8002a9e:	4ba3      	ldr	r3, [pc, #652]	; (8002d2c <_Z20Update_State_Machinev+0x314>)
 8002aa0:	601a      	str	r2, [r3, #0]
				test_value_theta = theta[indexy];
 8002aa2:	4ba0      	ldr	r3, [pc, #640]	; (8002d24 <_Z20Update_State_Machinev+0x30c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4aa2      	ldr	r2, [pc, #648]	; (8002d30 <_Z20Update_State_Machinev+0x318>)
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab4:	ee17 2a90 	vmov	r2, s15
 8002ab8:	4b9e      	ldr	r3, [pc, #632]	; (8002d34 <_Z20Update_State_Machinev+0x31c>)
 8002aba:	601a      	str	r2, [r3, #0]
				offset_x_new = ((0.16075 * (test_value_r*cos((test_value_theta)/1000.0))) + 0.02289)/10.0 ;
 8002abc:	4b9b      	ldr	r3, [pc, #620]	; (8002d2c <_Z20Update_State_Machinev+0x314>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002ac8:	4b9a      	ldr	r3, [pc, #616]	; (8002d34 <_Z20Update_State_Machinev+0x31c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ad4:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8002cf8 <_Z20Update_State_Machinev+0x2e0>
 8002ad8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002adc:	eeb0 0b46 	vmov.f64	d0, d6
 8002ae0:	f00d ff7a 	bl	80109d8 <cos>
 8002ae4:	eeb0 7b40 	vmov.f64	d7, d0
 8002ae8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002aec:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8002d00 <_Z20Update_State_Machinev+0x2e8>
 8002af0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002af4:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8002d08 <_Z20Update_State_Machinev+0x2f0>
 8002af8:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002afc:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002b00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b08:	4b8b      	ldr	r3, [pc, #556]	; (8002d38 <_Z20Update_State_Machinev+0x320>)
 8002b0a:	edc3 7a00 	vstr	s15, [r3]
				offset_y_new = ((0.29560 * (test_value_r*sin((test_value_theta)/1000.0))) + 1.05911)/10.0 ;
 8002b0e:	4b87      	ldr	r3, [pc, #540]	; (8002d2c <_Z20Update_State_Machinev+0x314>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002b1a:	4b86      	ldr	r3, [pc, #536]	; (8002d34 <_Z20Update_State_Machinev+0x31c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b26:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8002cf8 <_Z20Update_State_Machinev+0x2e0>
 8002b2a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b2e:	eeb0 0b46 	vmov.f64	d0, d6
 8002b32:	f00d ff9d 	bl	8010a70 <sin>
 8002b36:	eeb0 7b40 	vmov.f64	d7, d0
 8002b3a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002b3e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8002d10 <_Z20Update_State_Machinev+0x2f8>
 8002b42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b46:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8002d18 <_Z20Update_State_Machinev+0x300>
 8002b4a:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002b4e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002b52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b5a:	4b78      	ldr	r3, [pc, #480]	; (8002d3c <_Z20Update_State_Machinev+0x324>)
 8002b5c:	edc3 7a00 	vstr	s15, [r3]
				pos_x = (test_value_r*cos((test_value_theta)/1000.0)) + offset_x + offset_x_new;
 8002b60:	4b72      	ldr	r3, [pc, #456]	; (8002d2c <_Z20Update_State_Machinev+0x314>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002b6c:	4b71      	ldr	r3, [pc, #452]	; (8002d34 <_Z20Update_State_Machinev+0x31c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b78:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8002cf8 <_Z20Update_State_Machinev+0x2e0>
 8002b7c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b80:	eeb0 0b46 	vmov.f64	d0, d6
 8002b84:	f00d ff28 	bl	80109d8 <cos>
 8002b88:	eeb0 7b40 	vmov.f64	d7, d0
 8002b8c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002b90:	4b6b      	ldr	r3, [pc, #428]	; (8002d40 <_Z20Update_State_Machinev+0x328>)
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b9a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b9e:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <_Z20Update_State_Machinev+0x320>)
 8002ba0:	edd3 7a00 	vldr	s15, [r3]
 8002ba4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ba8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002bac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bb0:	4b64      	ldr	r3, [pc, #400]	; (8002d44 <_Z20Update_State_Machinev+0x32c>)
 8002bb2:	edc3 7a00 	vstr	s15, [r3]
				pos_y = (test_value_r*sin((test_value_theta)/1000.0)) + offset_y + offset_y_new;
 8002bb6:	4b5d      	ldr	r3, [pc, #372]	; (8002d2c <_Z20Update_State_Machinev+0x314>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002bc2:	4b5c      	ldr	r3, [pc, #368]	; (8002d34 <_Z20Update_State_Machinev+0x31c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bce:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8002cf8 <_Z20Update_State_Machinev+0x2e0>
 8002bd2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002bd6:	eeb0 0b46 	vmov.f64	d0, d6
 8002bda:	f00d ff49 	bl	8010a70 <sin>
 8002bde:	eeb0 7b40 	vmov.f64	d7, d0
 8002be2:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002be6:	4b58      	ldr	r3, [pc, #352]	; (8002d48 <_Z20Update_State_Machinev+0x330>)
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bf0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002bf4:	4b51      	ldr	r3, [pc, #324]	; (8002d3c <_Z20Update_State_Machinev+0x324>)
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bfe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c06:	4b51      	ldr	r3, [pc, #324]	; (8002d4c <_Z20Update_State_Machinev+0x334>)
 8002c08:	edc3 7a00 	vstr	s15, [r3]
				fcb_IK(pos_x, pos_y, 0, 0);
 8002c0c:	4b4d      	ldr	r3, [pc, #308]	; (8002d44 <_Z20Update_State_Machinev+0x32c>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	4b4e      	ldr	r3, [pc, #312]	; (8002d4c <_Z20Update_State_Machinev+0x334>)
 8002c14:	ed93 7a00 	vldr	s14, [r3]
 8002c18:	eddf 1a4d 	vldr	s3, [pc, #308]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002c1c:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002c20:	eef0 0a47 	vmov.f32	s1, s14
 8002c24:	eeb0 0a67 	vmov.f32	s0, s15
 8002c28:	f7ff fde4 	bl	80027f4 <_Z6fcb_IKffff>
				Max_Time = 7;
 8002c2c:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <_Z20Update_State_Machinev+0x33c>)
 8002c2e:	4a4a      	ldr	r2, [pc, #296]	; (8002d58 <_Z20Update_State_Machinev+0x340>)
 8002c30:	601a      	str	r2, [r3, #0]
				fcb_joint1.UpdateQuinticCoff(Max_Time, fcb_joint1.Encoder, Planning_q1, 0.0, 0.0, 0.0, 0.0);
 8002c32:	4b48      	ldr	r3, [pc, #288]	; (8002d54 <_Z20Update_State_Machinev+0x33c>)
 8002c34:	edd3 7a00 	vldr	s15, [r3]
 8002c38:	4b48      	ldr	r3, [pc, #288]	; (8002d5c <_Z20Update_State_Machinev+0x344>)
 8002c3a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c3e:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <_Z20Update_State_Machinev+0x348>)
 8002c40:	edd3 6a00 	vldr	s13, [r3]
 8002c44:	ed9f 3a42 	vldr	s6, [pc, #264]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002c48:	eddf 2a41 	vldr	s5, [pc, #260]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002c4c:	ed9f 2a40 	vldr	s4, [pc, #256]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002c50:	eddf 1a3f 	vldr	s3, [pc, #252]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002c54:	eeb0 1a66 	vmov.f32	s2, s13
 8002c58:	eef0 0a47 	vmov.f32	s1, s14
 8002c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c60:	483e      	ldr	r0, [pc, #248]	; (8002d5c <_Z20Update_State_Machinev+0x344>)
 8002c62:	f7fe f823 	bl	8000cac <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(Max_Time, fcb_joint3.Encoder, Planning_q3, 0.0, 0.0, 0.0, 0.0);
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <_Z20Update_State_Machinev+0x33c>)
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <_Z20Update_State_Machinev+0x34c>)
 8002c6e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c72:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <_Z20Update_State_Machinev+0x350>)
 8002c74:	edd3 6a00 	vldr	s13, [r3]
 8002c78:	ed9f 3a35 	vldr	s6, [pc, #212]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002c7c:	eddf 2a34 	vldr	s5, [pc, #208]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002c80:	ed9f 2a33 	vldr	s4, [pc, #204]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002c84:	eddf 1a32 	vldr	s3, [pc, #200]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002c88:	eeb0 1a66 	vmov.f32	s2, s13
 8002c8c:	eef0 0a47 	vmov.f32	s1, s14
 8002c90:	eeb0 0a67 	vmov.f32	s0, s15
 8002c94:	4833      	ldr	r0, [pc, #204]	; (8002d64 <_Z20Update_State_Machinev+0x34c>)
 8002c96:	f7fe f809 	bl	8000cac <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint4.UpdateQuinticCoff(Max_Time, fcb_joint4.Encoder, Planning_q4, 0.0, 0.0, 0.0, 0.0);
 8002c9a:	4b2e      	ldr	r3, [pc, #184]	; (8002d54 <_Z20Update_State_Machinev+0x33c>)
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	4b32      	ldr	r3, [pc, #200]	; (8002d6c <_Z20Update_State_Machinev+0x354>)
 8002ca2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002ca6:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <_Z20Update_State_Machinev+0x358>)
 8002ca8:	edd3 6a00 	vldr	s13, [r3]
 8002cac:	ed9f 3a28 	vldr	s6, [pc, #160]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002cb0:	eddf 2a27 	vldr	s5, [pc, #156]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002cb4:	ed9f 2a26 	vldr	s4, [pc, #152]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002cb8:	eddf 1a25 	vldr	s3, [pc, #148]	; 8002d50 <_Z20Update_State_Machinev+0x338>
 8002cbc:	eeb0 1a66 	vmov.f32	s2, s13
 8002cc0:	eef0 0a47 	vmov.f32	s1, s14
 8002cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc8:	4828      	ldr	r0, [pc, #160]	; (8002d6c <_Z20Update_State_Machinev+0x354>)
 8002cca:	f7fd ffef 	bl	8000cac <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				t = 0;
 8002cce:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <_Z20Update_State_Machinev+0x35c>)
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
				joint13_on = true;
 8002cd6:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <_Z20Update_State_Machinev+0x360>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim14);
 8002cdc:	4827      	ldr	r0, [pc, #156]	; (8002d7c <_Z20Update_State_Machinev+0x364>)
 8002cde:	f009 ff61 	bl	800cba4 <HAL_TIM_Base_Start_IT>
				control_state = 52;
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <_Z20Update_State_Machinev+0x308>)
 8002ce4:	2234      	movs	r2, #52	; 0x34
 8002ce6:	701a      	strb	r2, [r3, #0]
			}

//		Planning_q1
//		Planning_q3

		break;
 8002ce8:	e235      	b.n	8003156 <_Z20Update_State_Machinev+0x73e>
				control_state = 0;
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <_Z20Update_State_Machinev+0x308>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
		break;
 8002cf0:	e231      	b.n	8003156 <_Z20Update_State_Machinev+0x73e>
 8002cf2:	bf00      	nop
 8002cf4:	f3af 8000 	nop.w
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	408f4000 	.word	0x408f4000
 8002d00:	bc6a7efa 	.word	0xbc6a7efa
 8002d04:	3fc49374 	.word	0x3fc49374
 8002d08:	e59f2baa 	.word	0xe59f2baa
 8002d0c:	3f977079 	.word	0x3f977079
 8002d10:	432ca57a 	.word	0x432ca57a
 8002d14:	3fd2eb1c 	.word	0x3fd2eb1c
 8002d18:	53cddd6e 	.word	0x53cddd6e
 8002d1c:	3ff0f21d 	.word	0x3ff0f21d
 8002d20:	24000bd8 	.word	0x24000bd8
 8002d24:	24000bfc 	.word	0x24000bfc
 8002d28:	24000110 	.word	0x24000110
 8002d2c:	24000bd0 	.word	0x24000bd0
 8002d30:	24000010 	.word	0x24000010
 8002d34:	24000bd4 	.word	0x24000bd4
 8002d38:	24000bf4 	.word	0x24000bf4
 8002d3c:	24000bf8 	.word	0x24000bf8
 8002d40:	24000228 	.word	0x24000228
 8002d44:	24000c00 	.word	0x24000c00
 8002d48:	2400022c 	.word	0x2400022c
 8002d4c:	24000c04 	.word	0x24000c04
 8002d50:	00000000 	.word	0x00000000
 8002d54:	24000adc 	.word	0x24000adc
 8002d58:	40e00000 	.word	0x40e00000
 8002d5c:	24000560 	.word	0x24000560
 8002d60:	24000be4 	.word	0x24000be4
 8002d64:	24000728 	.word	0x24000728
 8002d68:	24000bec 	.word	0x24000bec
 8002d6c:	2400080c 	.word	0x2400080c
 8002d70:	24000bf0 	.word	0x24000bf0
 8002d74:	24000be0 	.word	0x24000be0
 8002d78:	24000b2e 	.word	0x24000b2e
 8002d7c:	24000f40 	.word	0x24000f40

	case 42:
		Max_Time = 12;
 8002d80:	4bb2      	ldr	r3, [pc, #712]	; (800304c <_Z20Update_State_Machinev+0x634>)
 8002d82:	4ab3      	ldr	r2, [pc, #716]	; (8003050 <_Z20Update_State_Machinev+0x638>)
 8002d84:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002d86:	4bb3      	ldr	r3, [pc, #716]	; (8003054 <_Z20Update_State_Machinev+0x63c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder, Setpoint_J2_Down, 0.0, 0.0, 0.0, 0.0);
 8002d8c:	4baf      	ldr	r3, [pc, #700]	; (800304c <_Z20Update_State_Machinev+0x634>)
 8002d8e:	edd3 7a00 	vldr	s15, [r3]
 8002d92:	4bb1      	ldr	r3, [pc, #708]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002d94:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002d98:	4bb0      	ldr	r3, [pc, #704]	; (800305c <_Z20Update_State_Machinev+0x644>)
 8002d9a:	edd3 6a00 	vldr	s13, [r3]
 8002d9e:	ed9f 3ab0 	vldr	s6, [pc, #704]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002da2:	eddf 2aaf 	vldr	s5, [pc, #700]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002da6:	ed9f 2aae 	vldr	s4, [pc, #696]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002daa:	eddf 1aad 	vldr	s3, [pc, #692]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002dae:	eeb0 1a66 	vmov.f32	s2, s13
 8002db2:	eef0 0a47 	vmov.f32	s1, s14
 8002db6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dba:	48a7      	ldr	r0, [pc, #668]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002dbc:	f7fd ff76 	bl	8000cac <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
		t = 0;
 8002dc0:	4ba8      	ldr	r3, [pc, #672]	; (8003064 <_Z20Update_State_Machinev+0x64c>)
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002dc8:	48a7      	ldr	r0, [pc, #668]	; (8003068 <_Z20Update_State_Machinev+0x650>)
 8002dca:	f009 feeb 	bl	800cba4 <HAL_TIM_Base_Start_IT>
		control_state = 54;
 8002dce:	4ba7      	ldr	r3, [pc, #668]	; (800306c <_Z20Update_State_Machinev+0x654>)
 8002dd0:	2236      	movs	r2, #54	; 0x36
 8002dd2:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002dd4:	4ba6      	ldr	r3, [pc, #664]	; (8003070 <_Z20Update_State_Machinev+0x658>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	701a      	strb	r2, [r3, #0]
		break;
 8002dda:	e1bc      	b.n	8003156 <_Z20Update_State_Machinev+0x73e>

	case 43:
		Max_Time = 12;
 8002ddc:	4b9b      	ldr	r3, [pc, #620]	; (800304c <_Z20Update_State_Machinev+0x634>)
 8002dde:	4a9c      	ldr	r2, [pc, #624]	; (8003050 <_Z20Update_State_Machinev+0x638>)
 8002de0:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002de2:	4b9c      	ldr	r3, [pc, #624]	; (8003054 <_Z20Update_State_Machinev+0x63c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder, Setpoint_J2_Up, 0.0, 0.0, 0.0, 0.0);
 8002de8:	4b98      	ldr	r3, [pc, #608]	; (800304c <_Z20Update_State_Machinev+0x634>)
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	4b9a      	ldr	r3, [pc, #616]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002df0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002df4:	4b9f      	ldr	r3, [pc, #636]	; (8003074 <_Z20Update_State_Machinev+0x65c>)
 8002df6:	edd3 6a00 	vldr	s13, [r3]
 8002dfa:	ed9f 3a99 	vldr	s6, [pc, #612]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002dfe:	eddf 2a98 	vldr	s5, [pc, #608]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002e02:	ed9f 2a97 	vldr	s4, [pc, #604]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002e06:	eddf 1a96 	vldr	s3, [pc, #600]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002e0a:	eeb0 1a66 	vmov.f32	s2, s13
 8002e0e:	eef0 0a47 	vmov.f32	s1, s14
 8002e12:	eeb0 0a67 	vmov.f32	s0, s15
 8002e16:	4890      	ldr	r0, [pc, #576]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002e18:	f7fd ff48 	bl	8000cac <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
		t = 0;
 8002e1c:	4b91      	ldr	r3, [pc, #580]	; (8003064 <_Z20Update_State_Machinev+0x64c>)
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002e24:	4890      	ldr	r0, [pc, #576]	; (8003068 <_Z20Update_State_Machinev+0x650>)
 8002e26:	f009 febd 	bl	800cba4 <HAL_TIM_Base_Start_IT>
		control_state = 56;
 8002e2a:	4b90      	ldr	r3, [pc, #576]	; (800306c <_Z20Update_State_Machinev+0x654>)
 8002e2c:	2238      	movs	r2, #56	; 0x38
 8002e2e:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002e30:	4b8f      	ldr	r3, [pc, #572]	; (8003070 <_Z20Update_State_Machinev+0x658>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
		break;
 8002e36:	e18e      	b.n	8003156 <_Z20Update_State_Machinev+0x73e>

//		State_FIN = true;
		break;

	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8002e38:	488b      	ldr	r0, [pc, #556]	; (8003068 <_Z20Update_State_Machinev+0x650>)
 8002e3a:	f009 ff2b 	bl	800cc94 <HAL_TIM_Base_Stop_IT>
		fcb_joint1.Goal_Velocity = 0;
 8002e3e:	4b8e      	ldr	r3, [pc, #568]	; (8003078 <_Z20Update_State_Machinev+0x660>)
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Velocity = 0;
 8002e46:	4b8d      	ldr	r3, [pc, #564]	; (800307c <_Z20Update_State_Machinev+0x664>)
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Velocity = 0;
 8002e4e:	4b8c      	ldr	r3, [pc, #560]	; (8003080 <_Z20Update_State_Machinev+0x668>)
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint1.Output_Joint_W = 0;
 8002e56:	4b88      	ldr	r3, [pc, #544]	; (8003078 <_Z20Update_State_Machinev+0x660>)
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8002e60:	4b87      	ldr	r3, [pc, #540]	; (8003080 <_Z20Update_State_Machinev+0x668>)
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8002e6a:	4b84      	ldr	r3, [pc, #528]	; (800307c <_Z20Update_State_Machinev+0x664>)
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8002e74:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002e78:	4882      	ldr	r0, [pc, #520]	; (8003084 <_Z20Update_State_Machinev+0x66c>)
 8002e7a:	f7ff fa25 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8002e7e:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002e82:	4881      	ldr	r0, [pc, #516]	; (8003088 <_Z20Update_State_Machinev+0x670>)
 8002e84:	f7ff fa20 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8002e88:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002e8c:	487f      	ldr	r0, [pc, #508]	; (800308c <_Z20Update_State_Machinev+0x674>)
 8002e8e:	f7ff fa1b 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint1.C0 = fcb_joint1.kalman_pos;
 8002e92:	4b79      	ldr	r3, [pc, #484]	; (8003078 <_Z20Update_State_Machinev+0x660>)
 8002e94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002e98:	4a77      	ldr	r2, [pc, #476]	; (8003078 <_Z20Update_State_Machinev+0x660>)
 8002e9a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint4.C0 = fcb_joint4.kalman_pos;
 8002e9e:	4b77      	ldr	r3, [pc, #476]	; (800307c <_Z20Update_State_Machinev+0x664>)
 8002ea0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002ea4:	4a75      	ldr	r2, [pc, #468]	; (800307c <_Z20Update_State_Machinev+0x664>)
 8002ea6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint3.C0 = fcb_joint3.kalman_pos;
 8002eaa:	4b75      	ldr	r3, [pc, #468]	; (8003080 <_Z20Update_State_Machinev+0x668>)
 8002eac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002eb0:	4a73      	ldr	r2, [pc, #460]	; (8003080 <_Z20Update_State_Machinev+0x668>)
 8002eb2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
//		fcb_joint1.C0 = fcb_joint1.Goal_Position;
//		fcb_joint4.C0 = fcb_joint4.Goal_Position;
//		fcb_joint3.C0 = fcb_joint3.Goal_Position;

		fcb_joint1.C1 = 0;
 8002eb6:	4b70      	ldr	r3, [pc, #448]	; (8003078 <_Z20Update_State_Machinev+0x660>)
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint3.C1 = 0;
 8002ec0:	4b6f      	ldr	r3, [pc, #444]	; (8003080 <_Z20Update_State_Machinev+0x668>)
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint1.C2 = 0;
 8002eca:	4b6b      	ldr	r3, [pc, #428]	; (8003078 <_Z20Update_State_Machinev+0x660>)
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint3.C2 = 0;
 8002ed4:	4b6a      	ldr	r3, [pc, #424]	; (8003080 <_Z20Update_State_Machinev+0x668>)
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint1.C3 = 0;
 8002ede:	4b66      	ldr	r3, [pc, #408]	; (8003078 <_Z20Update_State_Machinev+0x660>)
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint3.C3 = 0;
 8002ee8:	4b65      	ldr	r3, [pc, #404]	; (8003080 <_Z20Update_State_Machinev+0x668>)
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint1.C4 = 0;
 8002ef2:	4b61      	ldr	r3, [pc, #388]	; (8003078 <_Z20Update_State_Machinev+0x660>)
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint3.C4 = 0;
 8002efc:	4b60      	ldr	r3, [pc, #384]	; (8003080 <_Z20Update_State_Machinev+0x668>)
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint1.C5 = 0;
 8002f06:	4b5c      	ldr	r3, [pc, #368]	; (8003078 <_Z20Update_State_Machinev+0x660>)
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint3.C5 = 0;
 8002f10:	4b5b      	ldr	r3, [pc, #364]	; (8003080 <_Z20Update_State_Machinev+0x668>)
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint4.C1 = 0;
 8002f1a:	4b58      	ldr	r3, [pc, #352]	; (800307c <_Z20Update_State_Machinev+0x664>)
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint4.C2 = 0;
 8002f24:	4b55      	ldr	r3, [pc, #340]	; (800307c <_Z20Update_State_Machinev+0x664>)
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint4.C3 = 0;
 8002f2e:	4b53      	ldr	r3, [pc, #332]	; (800307c <_Z20Update_State_Machinev+0x664>)
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint4.C4 = 0;
 8002f38:	4b50      	ldr	r3, [pc, #320]	; (800307c <_Z20Update_State_Machinev+0x664>)
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint4.C5 = 0;
 8002f42:	4b4e      	ldr	r3, [pc, #312]	; (800307c <_Z20Update_State_Machinev+0x664>)
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

		control_state = 42;
 8002f4c:	4b47      	ldr	r3, [pc, #284]	; (800306c <_Z20Update_State_Machinev+0x654>)
 8002f4e:	222a      	movs	r2, #42	; 0x2a
 8002f50:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <_Z20Update_State_Machinev+0x658>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]
		break;
 8002f58:	e0fd      	b.n	8003156 <_Z20Update_State_Machinev+0x73e>

//		State_FIN = true;
		break;

	case 54:
		HAL_TIM_Base_Stop_IT(&htim14);
 8002f5a:	4843      	ldr	r0, [pc, #268]	; (8003068 <_Z20Update_State_Machinev+0x650>)
 8002f5c:	f009 fe9a 	bl	800cc94 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.Goal_Velocity = 0;
 8002f60:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 8002f68:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002f6c:	4848      	ldr	r0, [pc, #288]	; (8003090 <_Z20Update_State_Machinev+0x678>)
 8002f6e:	f7ff f9ab 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8002f72:	4b39      	ldr	r3, [pc, #228]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	4a38      	ldr	r2, [pc, #224]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002f78:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 8002f7c:	4b3e      	ldr	r3, [pc, #248]	; (8003078 <_Z20Update_State_Machinev+0x660>)
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8002f86:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <_Z20Update_State_Machinev+0x668>)
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8002f90:	4b3a      	ldr	r3, [pc, #232]	; (800307c <_Z20Update_State_Machinev+0x664>)
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8002f9a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002f9e:	4839      	ldr	r0, [pc, #228]	; (8003084 <_Z20Update_State_Machinev+0x66c>)
 8002fa0:	f7ff f992 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8002fa4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002fa8:	4837      	ldr	r0, [pc, #220]	; (8003088 <_Z20Update_State_Machinev+0x670>)
 8002faa:	f7ff f98d 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8002fae:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003060 <_Z20Update_State_Machinev+0x648>
 8002fb2:	4836      	ldr	r0, [pc, #216]	; (800308c <_Z20Update_State_Machinev+0x674>)
 8002fb4:	f7ff f988 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		if (Gripper_State[first-1] == 1)
 8002fb8:	4b36      	ldr	r3, [pc, #216]	; (8003094 <_Z20Update_State_Machinev+0x67c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	4a36      	ldr	r2, [pc, #216]	; (8003098 <_Z20Update_State_Machinev+0x680>)
 8002fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <_Z20Update_State_Machinev+0x5c2>
		{
			gripper.GripperClose();
 8002fd2:	4832      	ldr	r0, [pc, #200]	; (800309c <_Z20Update_State_Machinev+0x684>)
 8002fd4:	f7fe fe0e 	bl	8001bf4 <_ZN10ServoMotor12GripperCloseEv>
 8002fd8:	e00f      	b.n	8002ffa <_Z20Update_State_Machinev+0x5e2>
		}
		else if (Gripper_State[first-1] == 2)
 8002fda:	4b2e      	ldr	r3, [pc, #184]	; (8003094 <_Z20Update_State_Machinev+0x67c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	4a2d      	ldr	r2, [pc, #180]	; (8003098 <_Z20Update_State_Machinev+0x680>)
 8002fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <_Z20Update_State_Machinev+0x5e2>
		{
			gripper.GripperOpen();
 8002ff4:	4829      	ldr	r0, [pc, #164]	; (800309c <_Z20Update_State_Machinev+0x684>)
 8002ff6:	f7fe fe13 	bl	8001c20 <_ZN10ServoMotor11GripperOpenEv>
		}
//		for (int i =0 ;i <1000000;i++) {}
		fcb_joint2.C0 = 0;
 8002ffa:	4b17      	ldr	r3, [pc, #92]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <_Z20Update_State_Machinev+0x640>)
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 43;
 800303e:	4b0b      	ldr	r3, [pc, #44]	; (800306c <_Z20Update_State_Machinev+0x654>)
 8003040:	222b      	movs	r2, #43	; 0x2b
 8003042:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <_Z20Update_State_Machinev+0x658>)
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
		break;
 800304a:	e084      	b.n	8003156 <_Z20Update_State_Machinev+0x73e>
 800304c:	24000adc 	.word	0x24000adc
 8003050:	41400000 	.word	0x41400000
 8003054:	24000b2e 	.word	0x24000b2e
 8003058:	24000644 	.word	0x24000644
 800305c:	24000004 	.word	0x24000004
 8003060:	00000000 	.word	0x00000000
 8003064:	24000be0 	.word	0x24000be0
 8003068:	24000f40 	.word	0x24000f40
 800306c:	24000bd8 	.word	0x24000bd8
 8003070:	24000ad8 	.word	0x24000ad8
 8003074:	24000000 	.word	0x24000000
 8003078:	24000560 	.word	0x24000560
 800307c:	2400080c 	.word	0x2400080c
 8003080:	24000728 	.word	0x24000728
 8003084:	240004c0 	.word	0x240004c0
 8003088:	24000538 	.word	0x24000538
 800308c:	24000510 	.word	0x24000510
 8003090:	240004e8 	.word	0x240004e8
 8003094:	24000008 	.word	0x24000008
 8003098:	24000b80 	.word	0x24000b80
 800309c:	24000ab8 	.word	0x24000ab8
	case 55:

		break;

	case 56:
		fcb_joint2.Goal_Velocity = 0;
 80030a0:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <_Z20Update_State_Machinev+0x748>)
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 80030a8:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003164 <_Z20Update_State_Machinev+0x74c>
 80030ac:	482e      	ldr	r0, [pc, #184]	; (8003168 <_Z20Update_State_Machinev+0x750>)
 80030ae:	f7ff f90b 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 80030b2:	4b2b      	ldr	r3, [pc, #172]	; (8003160 <_Z20Update_State_Machinev+0x748>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <_Z20Update_State_Machinev+0x748>)
 80030b8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <_Z20Update_State_Machinev+0x754>)
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 80030c6:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <_Z20Update_State_Machinev+0x758>)
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 80030d0:	4b28      	ldr	r3, [pc, #160]	; (8003174 <_Z20Update_State_Machinev+0x75c>)
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 80030da:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8003164 <_Z20Update_State_Machinev+0x74c>
 80030de:	4826      	ldr	r0, [pc, #152]	; (8003178 <_Z20Update_State_Machinev+0x760>)
 80030e0:	f7ff f8f2 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 80030e4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003164 <_Z20Update_State_Machinev+0x74c>
 80030e8:	4824      	ldr	r0, [pc, #144]	; (800317c <_Z20Update_State_Machinev+0x764>)
 80030ea:	f7ff f8ed 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 80030ee:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8003164 <_Z20Update_State_Machinev+0x74c>
 80030f2:	4823      	ldr	r0, [pc, #140]	; (8003180 <_Z20Update_State_Machinev+0x768>)
 80030f4:	f7ff f8e8 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		HAL_TIM_Base_Stop_IT(&htim14);
 80030f8:	4822      	ldr	r0, [pc, #136]	; (8003184 <_Z20Update_State_Machinev+0x76c>)
 80030fa:	f009 fdcb 	bl	800cc94 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.C1 = 0;
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <_Z20Update_State_Machinev+0x748>)
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8003108:	4b15      	ldr	r3, [pc, #84]	; (8003160 <_Z20Update_State_Machinev+0x748>)
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <_Z20Update_State_Machinev+0x748>)
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 800311c:	4b10      	ldr	r3, [pc, #64]	; (8003160 <_Z20Update_State_Machinev+0x748>)
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <_Z20Update_State_Machinev+0x748>)
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <_Z20Update_State_Machinev+0x748>)
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 41;
 8003138:	4b13      	ldr	r3, [pc, #76]	; (8003188 <_Z20Update_State_Machinev+0x770>)
 800313a:	2229      	movs	r2, #41	; 0x29
 800313c:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <_Z20Update_State_Machinev+0x774>)
 8003140:	2201      	movs	r2, #1
 8003142:	701a      	strb	r2, [r3, #0]
		break;
 8003144:	e007      	b.n	8003156 <_Z20Update_State_Machinev+0x73e>

	default:
		control_state = 0;
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <_Z20Update_State_Machinev+0x770>)
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
		State_FIN = false;
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <_Z20Update_State_Machinev+0x774>)
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
		break;
 8003152:	e000      	b.n	8003156 <_Z20Update_State_Machinev+0x73e>
		break;
 8003154:	bf00      	nop
    }
}
 8003156:	bf00      	nop
 8003158:	46bd      	mov	sp, r7
 800315a:	ecbd 8b02 	vpop	{d8}
 800315e:	bd80      	pop	{r7, pc}
 8003160:	24000644 	.word	0x24000644
 8003164:	00000000 	.word	0x00000000
 8003168:	240004e8 	.word	0x240004e8
 800316c:	24000560 	.word	0x24000560
 8003170:	24000728 	.word	0x24000728
 8003174:	2400080c 	.word	0x2400080c
 8003178:	240004c0 	.word	0x240004c0
 800317c:	24000538 	.word	0x24000538
 8003180:	24000510 	.word	0x24000510
 8003184:	24000f40 	.word	0x24000f40
 8003188:	24000bd8 	.word	0x24000bd8
 800318c:	24000ad8 	.word	0x24000ad8

08003190 <HAL_UARTEx_RxEventCallback>:

#endif



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003190:	b5b0      	push	{r4, r5, r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a8f      	ldr	r2, [pc, #572]	; (80033dc <HAL_UARTEx_RxEventCallback+0x24c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	f040 8188 	bne.w	80034b6 <HAL_UARTEx_RxEventCallback+0x326>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 80031a6:	4a8e      	ldr	r2, [pc, #568]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80031a8:	4b8e      	ldr	r3, [pc, #568]	; (80033e4 <HAL_UARTEx_RxEventCallback+0x254>)
 80031aa:	4614      	mov	r4, r2
 80031ac:	461d      	mov	r5, r3
 80031ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b2:	682b      	ldr	r3, [r5, #0]
 80031b4:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 80031b6:	2214      	movs	r2, #20
 80031b8:	2100      	movs	r1, #0
 80031ba:	488a      	ldr	r0, [pc, #552]	; (80033e4 <HAL_UARTEx_RxEventCallback+0x254>)
 80031bc:	f00e fc88 	bl	8011ad0 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 80031c0:	887b      	ldrh	r3, [r7, #2]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	f240 8166 	bls.w	8003494 <HAL_UARTEx_RxEventCallback+0x304>
 80031c8:	887b      	ldrh	r3, [r7, #2]
 80031ca:	2b14      	cmp	r3, #20
 80031cc:	f200 8162 	bhi.w	8003494 <HAL_UARTEx_RxEventCallback+0x304>
			cmdDataSize = Size - 2;	// Calculate data length.
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	3b02      	subs	r3, #2
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	4b84      	ldr	r3, [pc, #528]	; (80033e8 <HAL_UARTEx_RxEventCallback+0x258>)
 80031d8:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 80031da:	4b83      	ldr	r3, [pc, #524]	; (80033e8 <HAL_UARTEx_RxEventCallback+0x258>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	497f      	ldr	r1, [pc, #508]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80031e4:	4881      	ldr	r0, [pc, #516]	; (80033ec <HAL_UARTEx_RxEventCallback+0x25c>)
 80031e6:	f003 fe4f 	bl	8006e88 <HAL_CRC_Calculate>
 80031ea:	4603      	mov	r3, r0
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	4b80      	ldr	r3, [pc, #512]	; (80033f0 <HAL_UARTEx_RxEventCallback+0x260>)
 80031f0:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80031f2:	4b7d      	ldr	r3, [pc, #500]	; (80033e8 <HAL_UARTEx_RxEventCallback+0x258>)
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b79      	ldr	r3, [pc, #484]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80031fc:	5c9b      	ldrb	r3, [r3, r2]
 80031fe:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8003200:	b21a      	sxth	r2, r3
 8003202:	4b79      	ldr	r3, [pc, #484]	; (80033e8 <HAL_UARTEx_RxEventCallback+0x258>)
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	3301      	adds	r3, #1
 800320a:	4975      	ldr	r1, [pc, #468]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800320c:	5ccb      	ldrb	r3, [r1, r3]
 800320e:	b21b      	sxth	r3, r3
 8003210:	4313      	orrs	r3, r2
 8003212:	b21b      	sxth	r3, r3
 8003214:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8003216:	4b77      	ldr	r3, [pc, #476]	; (80033f4 <HAL_UARTEx_RxEventCallback+0x264>)
 8003218:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800321a:	4b75      	ldr	r3, [pc, #468]	; (80033f0 <HAL_UARTEx_RxEventCallback+0x260>)
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29a      	uxth	r2, r3
 8003220:	4b74      	ldr	r3, [pc, #464]	; (80033f4 <HAL_UARTEx_RxEventCallback+0x264>)
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	429a      	cmp	r2, r3
 8003228:	bf0c      	ite	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	2300      	movne	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8151 	beq.w	80034d8 <HAL_UARTEx_RxEventCallback+0x348>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003236:	2201      	movs	r2, #1
 8003238:	2102      	movs	r1, #2
 800323a:	486f      	ldr	r0, [pc, #444]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x268>)
 800323c:	f006 ffaa 	bl	800a194 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003240:	2200      	movs	r2, #0
 8003242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003246:	486d      	ldr	r0, [pc, #436]	; (80033fc <HAL_UARTEx_RxEventCallback+0x26c>)
 8003248:	f006 ffa4 	bl	800a194 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 800324c:	4b64      	ldr	r3, [pc, #400]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b61      	cmp	r3, #97	; 0x61
 8003252:	d106      	bne.n	8003262 <HAL_UARTEx_RxEventCallback+0xd2>
 8003254:	4b64      	ldr	r3, [pc, #400]	; (80033e8 <HAL_UARTEx_RxEventCallback+0x258>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b05      	cmp	r3, #5
 800325c:	d101      	bne.n	8003262 <HAL_UARTEx_RxEventCallback+0xd2>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_UARTEx_RxEventCallback+0xd4>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d014      	beq.n	8003292 <HAL_UARTEx_RxEventCallback+0x102>
				{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8003268:	4b5d      	ldr	r3, [pc, #372]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800326a:	785b      	ldrb	r3, [r3, #1]
 800326c:	b25a      	sxtb	r2, r3
 800326e:	4b64      	ldr	r3, [pc, #400]	; (8003400 <HAL_UARTEx_RxEventCallback+0x270>)
 8003270:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8003272:	4b5b      	ldr	r3, [pc, #364]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 8003274:	789b      	ldrb	r3, [r3, #2]
 8003276:	b25a      	sxtb	r2, r3
 8003278:	4b62      	ldr	r3, [pc, #392]	; (8003404 <HAL_UARTEx_RxEventCallback+0x274>)
 800327a:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 800327c:	4b58      	ldr	r3, [pc, #352]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800327e:	78db      	ldrb	r3, [r3, #3]
 8003280:	b25a      	sxtb	r2, r3
 8003282:	4b61      	ldr	r3, [pc, #388]	; (8003408 <HAL_UARTEx_RxEventCallback+0x278>)
 8003284:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8003286:	4b56      	ldr	r3, [pc, #344]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 8003288:	791b      	ldrb	r3, [r3, #4]
 800328a:	b25a      	sxtb	r2, r3
 800328c:	4b5f      	ldr	r3, [pc, #380]	; (800340c <HAL_UARTEx_RxEventCallback+0x27c>)
 800328e:	701a      	strb	r2, [r3, #0]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
					pyaw = Old_Rx_Buffer[7];
				}

			}
 8003290:	e122      	b.n	80034d8 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 8003292:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b71      	cmp	r3, #113	; 0x71
 8003298:	d106      	bne.n	80032a8 <HAL_UARTEx_RxEventCallback+0x118>
 800329a:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_UARTEx_RxEventCallback+0x258>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d101      	bne.n	80032a8 <HAL_UARTEx_RxEventCallback+0x118>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <HAL_UARTEx_RxEventCallback+0x11a>
 80032a8:	2300      	movs	r3, #0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d014      	beq.n	80032d8 <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 80032ae:	4b4c      	ldr	r3, [pc, #304]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80032b0:	785b      	ldrb	r3, [r3, #1]
 80032b2:	b25a      	sxtb	r2, r3
 80032b4:	4b56      	ldr	r3, [pc, #344]	; (8003410 <HAL_UARTEx_RxEventCallback+0x280>)
 80032b6:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 80032b8:	4b49      	ldr	r3, [pc, #292]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80032ba:	789b      	ldrb	r3, [r3, #2]
 80032bc:	b25a      	sxtb	r2, r3
 80032be:	4b55      	ldr	r3, [pc, #340]	; (8003414 <HAL_UARTEx_RxEventCallback+0x284>)
 80032c0:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 80032c2:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80032c4:	78db      	ldrb	r3, [r3, #3]
 80032c6:	b25a      	sxtb	r2, r3
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_UARTEx_RxEventCallback+0x288>)
 80032ca:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 80032cc:	4b44      	ldr	r3, [pc, #272]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80032ce:	791b      	ldrb	r3, [r3, #4]
 80032d0:	b25a      	sxtb	r2, r3
 80032d2:	4b52      	ldr	r3, [pc, #328]	; (800341c <HAL_UARTEx_RxEventCallback+0x28c>)
 80032d4:	701a      	strb	r2, [r3, #0]
			}
 80032d6:	e0ff      	b.n	80034d8 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2)
 80032d8:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b85      	cmp	r3, #133	; 0x85
 80032de:	d106      	bne.n	80032ee <HAL_UARTEx_RxEventCallback+0x15e>
 80032e0:	4b41      	ldr	r3, [pc, #260]	; (80033e8 <HAL_UARTEx_RxEventCallback+0x258>)
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d101      	bne.n	80032ee <HAL_UARTEx_RxEventCallback+0x15e>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_UARTEx_RxEventCallback+0x160>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_UARTEx_RxEventCallback+0x16c>
					control_state = 51;
 80032f4:	4b4a      	ldr	r3, [pc, #296]	; (8003420 <HAL_UARTEx_RxEventCallback+0x290>)
 80032f6:	2233      	movs	r2, #51	; 0x33
 80032f8:	701a      	strb	r2, [r3, #0]
			}
 80032fa:	e0ed      	b.n	80034d8 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 3) //
 80032fc:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b86      	cmp	r3, #134	; 0x86
 8003302:	d106      	bne.n	8003312 <HAL_UARTEx_RxEventCallback+0x182>
 8003304:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <HAL_UARTEx_RxEventCallback+0x258>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b03      	cmp	r3, #3
 800330c:	d101      	bne.n	8003312 <HAL_UARTEx_RxEventCallback+0x182>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_UARTEx_RxEventCallback+0x184>
 8003312:	2300      	movs	r3, #0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_UARTEx_RxEventCallback+0x19e>
					int value_input = Old_Rx_Buffer[1];
 8003318:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800331a:	785b      	ldrb	r3, [r3, #1]
 800331c:	613b      	str	r3, [r7, #16]
					int value_gripper = Old_Rx_Buffer[2];
 800331e:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 8003320:	789b      	ldrb	r3, [r3, #2]
 8003322:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input, value_gripper);
 8003324:	68f9      	ldr	r1, [r7, #12]
 8003326:	6938      	ldr	r0, [r7, #16]
 8003328:	f7ff f9d2 	bl	80026d0 <_Z12Insert_queueii>
			}
 800332c:	e0d4      	b.n	80034d8 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2)
 800332e:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b87      	cmp	r3, #135	; 0x87
 8003334:	d106      	bne.n	8003344 <HAL_UARTEx_RxEventCallback+0x1b4>
 8003336:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <HAL_UARTEx_RxEventCallback+0x258>)
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d101      	bne.n	8003344 <HAL_UARTEx_RxEventCallback+0x1b4>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <HAL_UARTEx_RxEventCallback+0x1b6>
 8003344:	2300      	movs	r3, #0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <HAL_UARTEx_RxEventCallback+0x1cc>
					char state_input = Old_Rx_Buffer[1];
 800334a:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	75fb      	strb	r3, [r7, #23]
					control_state = state_input;
 8003350:	4a33      	ldr	r2, [pc, #204]	; (8003420 <HAL_UARTEx_RxEventCallback+0x290>)
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	7013      	strb	r3, [r2, #0]
					Update_State_Machine();
 8003356:	f7ff fb5f 	bl	8002a18 <_Z20Update_State_Machinev>
			}
 800335a:	e0bd      	b.n	80034d8 <HAL_UARTEx_RxEventCallback+0x348>
				else if(Old_Rx_Buffer[0] == 0x89 && cmdDataSize == 2)
 800335c:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b89      	cmp	r3, #137	; 0x89
 8003362:	d106      	bne.n	8003372 <HAL_UARTEx_RxEventCallback+0x1e2>
 8003364:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_UARTEx_RxEventCallback+0x258>)
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d101      	bne.n	8003372 <HAL_UARTEx_RxEventCallback+0x1e2>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_UARTEx_RxEventCallback+0x1e4>
 8003372:	2300      	movs	r3, #0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_UARTEx_RxEventCallback+0x1ee>
					Update_State_Machine();
 8003378:	f7ff fb4e 	bl	8002a18 <_Z20Update_State_Machinev>
			}
 800337c:	e0ac      	b.n	80034d8 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 800337e:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b81      	cmp	r3, #129	; 0x81
 8003384:	d106      	bne.n	8003394 <HAL_UARTEx_RxEventCallback+0x204>
 8003386:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_UARTEx_RxEventCallback+0x258>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d101      	bne.n	8003394 <HAL_UARTEx_RxEventCallback+0x204>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_UARTEx_RxEventCallback+0x206>
 8003394:	2300      	movs	r3, #0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d015      	beq.n	80033c6 <HAL_UARTEx_RxEventCallback+0x236>
					gripperstate = Old_Rx_Buffer[1];
 800339a:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 800339c:	785b      	ldrb	r3, [r3, #1]
 800339e:	461a      	mov	r2, r3
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_UARTEx_RxEventCallback+0x294>)
 80033a2:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0)
 80033a4:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <HAL_UARTEx_RxEventCallback+0x294>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_UARTEx_RxEventCallback+0x22e>
						gripper.GripperOpen();
 80033b6:	481c      	ldr	r0, [pc, #112]	; (8003428 <HAL_UARTEx_RxEventCallback+0x298>)
 80033b8:	f7fe fc32 	bl	8001c20 <_ZN10ServoMotor11GripperOpenEv>
			}
 80033bc:	e08c      	b.n	80034d8 <HAL_UARTEx_RxEventCallback+0x348>
						gripper.GripperClose();
 80033be:	481a      	ldr	r0, [pc, #104]	; (8003428 <HAL_UARTEx_RxEventCallback+0x298>)
 80033c0:	f7fe fc18 	bl	8001bf4 <_ZN10ServoMotor12GripperCloseEv>
			}
 80033c4:	e088      	b.n	80034d8 <HAL_UARTEx_RxEventCallback+0x348>
				else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8)
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_UARTEx_RxEventCallback+0x250>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b91      	cmp	r3, #145	; 0x91
 80033cc:	d12e      	bne.n	800342c <HAL_UARTEx_RxEventCallback+0x29c>
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_UARTEx_RxEventCallback+0x258>)
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d129      	bne.n	800342c <HAL_UARTEx_RxEventCallback+0x29c>
 80033d8:	2301      	movs	r3, #1
 80033da:	e028      	b.n	800342e <HAL_UARTEx_RxEventCallback+0x29e>
 80033dc:	24001220 	.word	0x24001220
 80033e0:	24000b00 	.word	0x24000b00
 80033e4:	24000b14 	.word	0x24000b14
 80033e8:	24000b28 	.word	0x24000b28
 80033ec:	2400042c 	.word	0x2400042c
 80033f0:	24000af8 	.word	0x24000af8
 80033f4:	24000afa 	.word	0x24000afa
 80033f8:	58021000 	.word	0x58021000
 80033fc:	58020400 	.word	0x58020400
 8003400:	24000ae0 	.word	0x24000ae0
 8003404:	24000ae1 	.word	0x24000ae1
 8003408:	24000ae2 	.word	0x24000ae2
 800340c:	24000ae3 	.word	0x24000ae3
 8003410:	24000ae4 	.word	0x24000ae4
 8003414:	24000ae5 	.word	0x24000ae5
 8003418:	24000ae6 	.word	0x24000ae6
 800341c:	24000ae7 	.word	0x24000ae7
 8003420:	24000bd8 	.word	0x24000bd8
 8003424:	24000afc 	.word	0x24000afc
 8003428:	24000ab8 	.word	0x24000ab8
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d052      	beq.n	80034d8 <HAL_UARTEx_RxEventCallback+0x348>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 8003432:	4b5f      	ldr	r3, [pc, #380]	; (80035b0 <HAL_UARTEx_RxEventCallback+0x420>)
 8003434:	785b      	ldrb	r3, [r3, #1]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	4a5d      	ldr	r2, [pc, #372]	; (80035b0 <HAL_UARTEx_RxEventCallback+0x420>)
 800343a:	7892      	ldrb	r2, [r2, #2]
 800343c:	4313      	orrs	r3, r2
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003446:	4b5b      	ldr	r3, [pc, #364]	; (80035b4 <HAL_UARTEx_RxEventCallback+0x424>)
 8003448:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 800344c:	4b58      	ldr	r3, [pc, #352]	; (80035b0 <HAL_UARTEx_RxEventCallback+0x420>)
 800344e:	78db      	ldrb	r3, [r3, #3]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	4a57      	ldr	r2, [pc, #348]	; (80035b0 <HAL_UARTEx_RxEventCallback+0x420>)
 8003454:	7912      	ldrb	r2, [r2, #4]
 8003456:	4313      	orrs	r3, r2
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003460:	4b55      	ldr	r3, [pc, #340]	; (80035b8 <HAL_UARTEx_RxEventCallback+0x428>)
 8003462:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 8003466:	4b52      	ldr	r3, [pc, #328]	; (80035b0 <HAL_UARTEx_RxEventCallback+0x420>)
 8003468:	795b      	ldrb	r3, [r3, #5]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	4a50      	ldr	r2, [pc, #320]	; (80035b0 <HAL_UARTEx_RxEventCallback+0x420>)
 800346e:	7992      	ldrb	r2, [r2, #6]
 8003470:	4313      	orrs	r3, r2
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800347a:	4b50      	ldr	r3, [pc, #320]	; (80035bc <HAL_UARTEx_RxEventCallback+0x42c>)
 800347c:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 8003480:	4b4b      	ldr	r3, [pc, #300]	; (80035b0 <HAL_UARTEx_RxEventCallback+0x420>)
 8003482:	79db      	ldrb	r3, [r3, #7]
 8003484:	ee07 3a90 	vmov	s15, r3
 8003488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348c:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <HAL_UARTEx_RxEventCallback+0x430>)
 800348e:	edc3 7a00 	vstr	s15, [r3]
			}
 8003492:	e021      	b.n	80034d8 <HAL_UARTEx_RxEventCallback+0x348>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003494:	2200      	movs	r2, #0
 8003496:	2102      	movs	r1, #2
 8003498:	484a      	ldr	r0, [pc, #296]	; (80035c4 <HAL_UARTEx_RxEventCallback+0x434>)
 800349a:	f006 fe7b 	bl	800a194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800349e:	2201      	movs	r2, #1
 80034a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034a4:	4848      	ldr	r0, [pc, #288]	; (80035c8 <HAL_UARTEx_RxEventCallback+0x438>)
 80034a6:	f006 fe75 	bl	800a194 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 80034aa:	220c      	movs	r2, #12
 80034ac:	4947      	ldr	r1, [pc, #284]	; (80035cc <HAL_UARTEx_RxEventCallback+0x43c>)
 80034ae:	4848      	ldr	r0, [pc, #288]	; (80035d0 <HAL_UARTEx_RxEventCallback+0x440>)
 80034b0:	f00a fffa 	bl	800e4a8 <HAL_UART_Transmit_DMA>
 80034b4:	e011      	b.n	80034da <HAL_UARTEx_RxEventCallback+0x34a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80034b6:	2200      	movs	r2, #0
 80034b8:	2102      	movs	r1, #2
 80034ba:	4842      	ldr	r0, [pc, #264]	; (80035c4 <HAL_UARTEx_RxEventCallback+0x434>)
 80034bc:	f006 fe6a 	bl	800a194 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80034c0:	2201      	movs	r2, #1
 80034c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034c6:	4840      	ldr	r0, [pc, #256]	; (80035c8 <HAL_UARTEx_RxEventCallback+0x438>)
 80034c8:	f006 fe64 	bl	800a194 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 80034cc:	2215      	movs	r2, #21
 80034ce:	4941      	ldr	r1, [pc, #260]	; (80035d4 <HAL_UARTEx_RxEventCallback+0x444>)
 80034d0:	483f      	ldr	r0, [pc, #252]	; (80035d0 <HAL_UARTEx_RxEventCallback+0x440>)
 80034d2:	f00a ffe9 	bl	800e4a8 <HAL_UART_Transmit_DMA>
 80034d6:	e000      	b.n	80034da <HAL_UARTEx_RxEventCallback+0x34a>
			}
 80034d8:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 80034da:	2214      	movs	r2, #20
 80034dc:	493e      	ldr	r1, [pc, #248]	; (80035d8 <HAL_UARTEx_RxEventCallback+0x448>)
 80034de:	483c      	ldr	r0, [pc, #240]	; (80035d0 <HAL_UARTEx_RxEventCallback+0x440>)
 80034e0:	f00c ff47 	bl	8010372 <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80034e4:	4b3d      	ldr	r3, [pc, #244]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3d      	ldr	r2, [pc, #244]	; (80035e0 <HAL_UARTEx_RxEventCallback+0x450>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d04a      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 80034ee:	4b3b      	ldr	r3, [pc, #236]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a3c      	ldr	r2, [pc, #240]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x454>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d045      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 80034f8:	4b38      	ldr	r3, [pc, #224]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a3a      	ldr	r2, [pc, #232]	; (80035e8 <HAL_UARTEx_RxEventCallback+0x458>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d040      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003502:	4b36      	ldr	r3, [pc, #216]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a39      	ldr	r2, [pc, #228]	; (80035ec <HAL_UARTEx_RxEventCallback+0x45c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d03b      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 800350c:	4b33      	ldr	r3, [pc, #204]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a37      	ldr	r2, [pc, #220]	; (80035f0 <HAL_UARTEx_RxEventCallback+0x460>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d036      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003516:	4b31      	ldr	r3, [pc, #196]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a36      	ldr	r2, [pc, #216]	; (80035f4 <HAL_UARTEx_RxEventCallback+0x464>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d031      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003520:	4b2e      	ldr	r3, [pc, #184]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a34      	ldr	r2, [pc, #208]	; (80035f8 <HAL_UARTEx_RxEventCallback+0x468>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d02c      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 800352a:	4b2c      	ldr	r3, [pc, #176]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a33      	ldr	r2, [pc, #204]	; (80035fc <HAL_UARTEx_RxEventCallback+0x46c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d027      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003534:	4b29      	ldr	r3, [pc, #164]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a31      	ldr	r2, [pc, #196]	; (8003600 <HAL_UARTEx_RxEventCallback+0x470>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d022      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 800353e:	4b27      	ldr	r3, [pc, #156]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a30      	ldr	r2, [pc, #192]	; (8003604 <HAL_UARTEx_RxEventCallback+0x474>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d01d      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003548:	4b24      	ldr	r3, [pc, #144]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2e      	ldr	r2, [pc, #184]	; (8003608 <HAL_UARTEx_RxEventCallback+0x478>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d018      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003552:	4b22      	ldr	r3, [pc, #136]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2d      	ldr	r2, [pc, #180]	; (800360c <HAL_UARTEx_RxEventCallback+0x47c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d013      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 800355c:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2b      	ldr	r2, [pc, #172]	; (8003610 <HAL_UARTEx_RxEventCallback+0x480>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00e      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <HAL_UARTEx_RxEventCallback+0x484>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d009      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a28      	ldr	r2, [pc, #160]	; (8003618 <HAL_UARTEx_RxEventCallback+0x488>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d004      	beq.n	8003584 <HAL_UARTEx_RxEventCallback+0x3f4>
 800357a:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a27      	ldr	r2, [pc, #156]	; (800361c <HAL_UARTEx_RxEventCallback+0x48c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d108      	bne.n	8003596 <HAL_UARTEx_RxEventCallback+0x406>
 8003584:	4b15      	ldr	r3, [pc, #84]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b14      	ldr	r3, [pc, #80]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0208 	bic.w	r2, r2, #8
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e008      	b.n	80035a8 <HAL_UARTEx_RxEventCallback+0x418>
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <HAL_UARTEx_RxEventCallback+0x44c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0204 	bic.w	r2, r2, #4
 80035a4:	601a      	str	r2, [r3, #0]
}
 80035a6:	bf00      	nop
 80035a8:	bf00      	nop
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bdb0      	pop	{r4, r5, r7, pc}
 80035b0:	24000b00 	.word	0x24000b00
 80035b4:	24000ae8 	.word	0x24000ae8
 80035b8:	24000aec 	.word	0x24000aec
 80035bc:	24000af0 	.word	0x24000af0
 80035c0:	24000af4 	.word	0x24000af4
 80035c4:	58021000 	.word	0x58021000
 80035c8:	58020400 	.word	0x58020400
 80035cc:	080144ec 	.word	0x080144ec
 80035d0:	24001220 	.word	0x24001220
 80035d4:	080144fc 	.word	0x080144fc
 80035d8:	24000b14 	.word	0x24000b14
 80035dc:	24001508 	.word	0x24001508
 80035e0:	40020010 	.word	0x40020010
 80035e4:	40020028 	.word	0x40020028
 80035e8:	40020040 	.word	0x40020040
 80035ec:	40020058 	.word	0x40020058
 80035f0:	40020070 	.word	0x40020070
 80035f4:	40020088 	.word	0x40020088
 80035f8:	400200a0 	.word	0x400200a0
 80035fc:	400200b8 	.word	0x400200b8
 8003600:	40020410 	.word	0x40020410
 8003604:	40020428 	.word	0x40020428
 8003608:	40020440 	.word	0x40020440
 800360c:	40020458 	.word	0x40020458
 8003610:	40020470 	.word	0x40020470
 8003614:	40020488 	.word	0x40020488
 8003618:	400204a0 	.word	0x400204a0
 800361c:	400204b8 	.word	0x400204b8

08003620 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	; 0x28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4ac5      	ldr	r2, [pc, #788]	; (8003940 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800362c:	4293      	cmp	r3, r2
 800362e:	f040 80bc 	bne.w	80037aa <HAL_TIM_PeriodElapsedCallback+0x18a>
		encoderJ1.AMT21_Read();
 8003632:	48c4      	ldr	r0, [pc, #784]	; (8003944 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003634:	f7fd f84d 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003638:	48c2      	ldr	r0, [pc, #776]	; (8003944 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800363a:	f7fd f879 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800363e:	4603      	mov	r3, r0
 8003640:	461a      	mov	r2, r3
 8003642:	4bc1      	ldr	r3, [pc, #772]	; (8003948 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003644:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8003646:	4bc0      	ldr	r3, [pc, #768]	; (8003948 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d110      	bne.n	8003670 <HAL_TIM_PeriodElapsedCallback+0x50>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 800364e:	48bd      	ldr	r0, [pc, #756]	; (8003944 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003650:	f7fd f8d4 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003654:	4603      	mov	r3, r0
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800365e:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8003938 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003662:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003666:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800366a:	4bb8      	ldr	r3, [pc, #736]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800366c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003670:	48b7      	ldr	r0, [pc, #732]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003672:	f7fd f82e 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8003676:	48b6      	ldr	r0, [pc, #728]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003678:	f7fd f85a 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800367c:	4603      	mov	r3, r0
 800367e:	461a      	mov	r2, r3
 8003680:	4bb4      	ldr	r3, [pc, #720]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003682:	701a      	strb	r2, [r3, #0]
		if(HALENCJ2OK == HAL_OK){
 8003684:	4bb3      	ldr	r3, [pc, #716]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d112      	bne.n	80036b2 <HAL_TIM_PeriodElapsedCallback+0x92>
			encoderJ2.unwarp();
 800368c:	48b0      	ldr	r0, [pc, #704]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800368e:	f7fd f8d7 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;
 8003692:	48af      	ldr	r0, [pc, #700]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003694:	f7fd f933 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8003698:	ee07 0a90 	vmov	s15, r0
 800369c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80036a0:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 8003938 <HAL_TIM_PeriodElapsedCallback+0x318>
 80036a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80036a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036ac:	4baa      	ldr	r3, [pc, #680]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80036ae:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}


		encoderJ3.AMT21_Read();
 80036b2:	48aa      	ldr	r0, [pc, #680]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80036b4:	f7fd f80d 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80036b8:	48a8      	ldr	r0, [pc, #672]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80036ba:	f7fd f839 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80036be:	4603      	mov	r3, r0
 80036c0:	461a      	mov	r2, r3
 80036c2:	4ba7      	ldr	r3, [pc, #668]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80036c4:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 80036c6:	4ba6      	ldr	r3, [pc, #664]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d110      	bne.n	80036f0 <HAL_TIM_PeriodElapsedCallback+0xd0>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;
 80036ce:	48a3      	ldr	r0, [pc, #652]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80036d0:	f7fd f894 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80036d4:	4603      	mov	r3, r0
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80036de:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8003938 <HAL_TIM_PeriodElapsedCallback+0x318>
 80036e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80036e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036ea:	4b9e      	ldr	r3, [pc, #632]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80036ec:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 80036f0:	489d      	ldr	r0, [pc, #628]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80036f2:	f7fc ffee 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80036f6:	489c      	ldr	r0, [pc, #624]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80036f8:	f7fd f81a 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	4b9a      	ldr	r3, [pc, #616]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003702:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 8003704:	4b99      	ldr	r3, [pc, #612]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d110      	bne.n	800372e <HAL_TIM_PeriodElapsedCallback+0x10e>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
 800370c:	4896      	ldr	r0, [pc, #600]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800370e:	f7fd f875 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003712:	4603      	mov	r3, r0
 8003714:	ee07 3a90 	vmov	s15, r3
 8003718:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800371c:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8003938 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003720:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003724:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003728:	4b91      	ldr	r3, [pc, #580]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800372a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//			stepperJ2.StepperSetFrequency(dq2*10.0);
//			stepperJ3.StepperSetFrequency(dq3);
//			stepperJ4.StepperSetFrequency(dq4);


			fcb_X.UpdateIVK(fcb_joint1.Encoder , 0.0,fcb_joint3.Encoder, 0.0, dx, dy, dz, 0.0);
 800372e:	4b87      	ldr	r3, [pc, #540]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003730:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003734:	4b8b      	ldr	r3, [pc, #556]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003736:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800373a:	4b8e      	ldr	r3, [pc, #568]	; (8003974 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	b25b      	sxtb	r3, r3
 8003740:	ee06 3a90 	vmov	s13, r3
 8003744:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003748:	4b8b      	ldr	r3, [pc, #556]	; (8003978 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	b25b      	sxtb	r3, r3
 800374e:	ee06 3a10 	vmov	s12, r3
 8003752:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003756:	4b89      	ldr	r3, [pc, #548]	; (800397c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	b25b      	sxtb	r3, r3
 800375c:	ee05 3a90 	vmov	s11, r3
 8003760:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003764:	eddf 3a86 	vldr	s7, [pc, #536]	; 8003980 <HAL_TIM_PeriodElapsedCallback+0x360>
 8003768:	eeb0 3a65 	vmov.f32	s6, s11
 800376c:	eef0 2a46 	vmov.f32	s5, s12
 8003770:	eeb0 2a66 	vmov.f32	s4, s13
 8003774:	eddf 1a82 	vldr	s3, [pc, #520]	; 8003980 <HAL_TIM_PeriodElapsedCallback+0x360>
 8003778:	eeb0 1a47 	vmov.f32	s2, s14
 800377c:	eddf 0a80 	vldr	s1, [pc, #512]	; 8003980 <HAL_TIM_PeriodElapsedCallback+0x360>
 8003780:	eeb0 0a67 	vmov.f32	s0, s15
 8003784:	487f      	ldr	r0, [pc, #508]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8003786:	f7fd f967 	bl	8000a58 <_ZN10RobotJoint9UpdateIVKEffffffff>

			stepperJ1.StepperOpenLoopSpeedM(fcb_X.w_q1);
 800378a:	4b7e      	ldr	r3, [pc, #504]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800378c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003790:	eeb0 0a67 	vmov.f32	s0, s15
 8003794:	487c      	ldr	r0, [pc, #496]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003796:	f7fe fd97 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
			stepperJ3.StepperOpenLoopSpeedM(fcb_X.w_q3);
 800379a:	4b7a      	ldr	r3, [pc, #488]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800379c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80037a0:	eeb0 0a67 	vmov.f32	s0, s15
 80037a4:	4879      	ldr	r0, [pc, #484]	; (800398c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80037a6:	f7fe fd8f 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//					stepperJ3.StepperOpenLoopSpeed(u_q3/num);
//					stepperJ4.StepperOpenLoopSpeed(u_q4/num);

	}

	if (htim == &htim16)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a78      	ldr	r2, [pc, #480]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	f040 80fe 	bne.w	80039b0 <HAL_TIM_PeriodElapsedCallback+0x390>
	{
		encoderJ1.AMT21_Read();
 80037b4:	4863      	ldr	r0, [pc, #396]	; (8003944 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80037b6:	f7fc ff8c 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80037ba:	4862      	ldr	r0, [pc, #392]	; (8003944 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80037bc:	f7fc ffb8 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	4b60      	ldr	r3, [pc, #384]	; (8003948 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80037c6:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80037c8:	4b5f      	ldr	r3, [pc, #380]	; (8003948 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d110      	bne.n	80037f2 <HAL_TIM_PeriodElapsedCallback+0x1d2>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 80037d0:	485c      	ldr	r0, [pc, #368]	; (8003944 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80037d2:	f7fd f813 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80037d6:	4603      	mov	r3, r0
 80037d8:	ee07 3a90 	vmov	s15, r3
 80037dc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80037e0:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8003938 <HAL_TIM_PeriodElapsedCallback+0x318>
 80037e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80037e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037ec:	4b57      	ldr	r3, [pc, #348]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80037ee:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 80037f2:	4857      	ldr	r0, [pc, #348]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80037f4:	f7fc ff6d 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 80037f8:	4855      	ldr	r0, [pc, #340]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80037fa:	f7fc ff99 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80037fe:	4603      	mov	r3, r0
 8003800:	461a      	mov	r2, r3
 8003802:	4b54      	ldr	r3, [pc, #336]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003804:	701a      	strb	r2, [r3, #0]
		if(HALENCJ2OK == HAL_OK){
 8003806:	4b53      	ldr	r3, [pc, #332]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d112      	bne.n	8003834 <HAL_TIM_PeriodElapsedCallback+0x214>
			encoderJ2.unwarp();
 800380e:	4850      	ldr	r0, [pc, #320]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003810:	f7fd f816 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;
 8003814:	484e      	ldr	r0, [pc, #312]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003816:	f7fd f872 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 800381a:	ee07 0a90 	vmov	s15, r0
 800381e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003822:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8003938 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003826:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800382a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800382e:	4b4a      	ldr	r3, [pc, #296]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003830:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}


		encoderJ3.AMT21_Read();
 8003834:	4849      	ldr	r0, [pc, #292]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003836:	f7fc ff4c 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 800383a:	4848      	ldr	r0, [pc, #288]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800383c:	f7fc ff78 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003840:	4603      	mov	r3, r0
 8003842:	461a      	mov	r2, r3
 8003844:	4b46      	ldr	r3, [pc, #280]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003846:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003848:	4b45      	ldr	r3, [pc, #276]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d110      	bne.n	8003872 <HAL_TIM_PeriodElapsedCallback+0x252>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;
 8003850:	4842      	ldr	r0, [pc, #264]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003852:	f7fc ffd3 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003856:	4603      	mov	r3, r0
 8003858:	ee07 3a90 	vmov	s15, r3
 800385c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003860:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8003938 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003864:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003868:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800386c:	4b3d      	ldr	r3, [pc, #244]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800386e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003872:	483d      	ldr	r0, [pc, #244]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003874:	f7fc ff2d 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003878:	483b      	ldr	r0, [pc, #236]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800387a:	f7fc ff59 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	4b3a      	ldr	r3, [pc, #232]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003884:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 8003886:	4b39      	ldr	r3, [pc, #228]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d110      	bne.n	80038b0 <HAL_TIM_PeriodElapsedCallback+0x290>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
 800388e:	4836      	ldr	r0, [pc, #216]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003890:	f7fc ffb4 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003894:	4603      	mov	r3, r0
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800389e:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8003938 <HAL_TIM_PeriodElapsedCallback+0x318>
 80038a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038aa:	4b31      	ldr	r3, [pc, #196]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80038ac:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 80038b0:	4b26      	ldr	r3, [pc, #152]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80038b2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80038b6:	eeb0 0a67 	vmov.f32	s0, s15
 80038ba:	4824      	ldr	r0, [pc, #144]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80038bc:	f7fd fb1a 	bl	8000ef4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 80038c0:	4b22      	ldr	r3, [pc, #136]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80038c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038c6:	4a21      	ldr	r2, [pc, #132]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80038c8:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 80038cc:	4b1f      	ldr	r3, [pc, #124]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80038ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038d2:	4a1e      	ldr	r2, [pc, #120]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80038d4:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint2.KalmanFillter(fcb_joint2.Encoder);
 80038d8:	4b1f      	ldr	r3, [pc, #124]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80038da:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80038de:	eeb0 0a67 	vmov.f32	s0, s15
 80038e2:	481d      	ldr	r0, [pc, #116]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80038e4:	f7fd fb06 	bl	8000ef4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint2.kalman_pos = fcb_joint2.X11;
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80038ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038ee:	4a1a      	ldr	r2, [pc, #104]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80038f0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint2.kalman_velo = fcb_joint2.X21;
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80038f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038fa:	4a17      	ldr	r2, [pc, #92]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80038fc:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8003900:	4b18      	ldr	r3, [pc, #96]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003902:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003906:	eeb0 0a67 	vmov.f32	s0, s15
 800390a:	4816      	ldr	r0, [pc, #88]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800390c:	f7fd faf2 	bl	8000ef4 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8003910:	4b14      	ldr	r3, [pc, #80]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003912:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003916:	4a13      	ldr	r2, [pc, #76]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003918:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800391e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003922:	4a10      	ldr	r2, [pc, #64]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003924:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		if (State_FIN)
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d03e      	beq.n	80039b0 <HAL_TIM_PeriodElapsedCallback+0x390>
 8003932:	e031      	b.n	8003998 <HAL_TIM_PeriodElapsedCallback+0x378>
 8003934:	f3af 8000 	nop.w
 8003938:	645a1cac 	.word	0x645a1cac
 800393c:	4004df3b 	.word	0x4004df3b
 8003940:	24000dc4 	.word	0x24000dc4
 8003944:	24000450 	.word	0x24000450
 8003948:	24000ad4 	.word	0x24000ad4
 800394c:	24000560 	.word	0x24000560
 8003950:	2400046c 	.word	0x2400046c
 8003954:	24000ad5 	.word	0x24000ad5
 8003958:	24000644 	.word	0x24000644
 800395c:	24000488 	.word	0x24000488
 8003960:	24000ad6 	.word	0x24000ad6
 8003964:	24000728 	.word	0x24000728
 8003968:	240004a4 	.word	0x240004a4
 800396c:	24000ad7 	.word	0x24000ad7
 8003970:	2400080c 	.word	0x2400080c
 8003974:	24000ae4 	.word	0x24000ae4
 8003978:	24000ae5 	.word	0x24000ae5
 800397c:	24000ae6 	.word	0x24000ae6
 8003980:	00000000 	.word	0x00000000
 8003984:	240009d4 	.word	0x240009d4
 8003988:	240004c0 	.word	0x240004c0
 800398c:	24000510 	.word	0x24000510
 8003990:	24000fd8 	.word	0x24000fd8
 8003994:	24000ad8 	.word	0x24000ad8
		 {
			Balloon++;
 8003998:	4bdd      	ldr	r3, [pc, #884]	; (8003d10 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	4adc      	ldr	r2, [pc, #880]	; (8003d10 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 80039a0:	6013      	str	r3, [r2, #0]
			Update_State_Machine();
 80039a2:	f7ff f839 	bl	8002a18 <_Z20Update_State_Machinev>
			Update_State_Machine();
 80039a6:	f7ff f837 	bl	8002a18 <_Z20Update_State_Machinev>
			State_FIN = false;
 80039aa:	4bda      	ldr	r3, [pc, #872]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
		 }

	}

	if (htim == &htim14) {
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4ad9      	ldr	r2, [pc, #868]	; (8003d18 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	f040 8515 	bne.w	80043e4 <HAL_TIM_PeriodElapsedCallback+0xdc4>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 80039ba:	4bd8      	ldr	r3, [pc, #864]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80039bc:	ed93 7a00 	vldr	s14, [r3]
 80039c0:	4bd6      	ldr	r3, [pc, #856]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80039c2:	edd3 7a00 	vldr	s15, [r3]
 80039c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float t3 = t * t * t;
 80039ce:	4bd3      	ldr	r3, [pc, #844]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80039d0:	ed93 7a00 	vldr	s14, [r3]
 80039d4:	4bd1      	ldr	r3, [pc, #836]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80039d6:	edd3 7a00 	vldr	s15, [r3]
 80039da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039de:	4bcf      	ldr	r3, [pc, #828]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80039e0:	edd3 7a00 	vldr	s15, [r3]
 80039e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e8:	edc7 7a08 	vstr	s15, [r7, #32]
		float t4 = t * t * t * t;
 80039ec:	4bcb      	ldr	r3, [pc, #812]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80039ee:	ed93 7a00 	vldr	s14, [r3]
 80039f2:	4bca      	ldr	r3, [pc, #808]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80039f4:	edd3 7a00 	vldr	s15, [r3]
 80039f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039fc:	4bc7      	ldr	r3, [pc, #796]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80039fe:	edd3 7a00 	vldr	s15, [r3]
 8003a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a06:	4bc5      	ldr	r3, [pc, #788]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003a08:	edd3 7a00 	vldr	s15, [r3]
 8003a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a10:	edc7 7a07 	vstr	s15, [r7, #28]
		float t5 = t * t * t * t * t;
 8003a14:	4bc1      	ldr	r3, [pc, #772]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003a16:	ed93 7a00 	vldr	s14, [r3]
 8003a1a:	4bc0      	ldr	r3, [pc, #768]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003a1c:	edd3 7a00 	vldr	s15, [r3]
 8003a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a24:	4bbd      	ldr	r3, [pc, #756]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003a26:	edd3 7a00 	vldr	s15, [r3]
 8003a2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a2e:	4bbb      	ldr	r3, [pc, #748]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003a30:	edd3 7a00 	vldr	s15, [r3]
 8003a34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a38:	4bb8      	ldr	r3, [pc, #736]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a42:	edc7 7a06 	vstr	s15, [r7, #24]
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;


		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0*fcb_joint1.C2*t) + (3.0*fcb_joint1.C3*t2) + (4.0*fcb_joint1.C4*t3) + (5.0*fcb_joint1.C5*t4);
 8003a46:	4bb6      	ldr	r3, [pc, #728]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003a48:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003a4c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003a50:	4bb3      	ldr	r3, [pc, #716]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003a52:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003a56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a5a:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003a5e:	4baf      	ldr	r3, [pc, #700]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003a60:	edd3 7a00 	vldr	s15, [r3]
 8003a64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a68:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a6c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003a70:	4bab      	ldr	r3, [pc, #684]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003a72:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003a76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a7a:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003a7e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003a82:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a8e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003a92:	4ba3      	ldr	r3, [pc, #652]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003a94:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003a98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a9c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003aa0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003aa4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003aa8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aac:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ab0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ab4:	4b9a      	ldr	r3, [pc, #616]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003ab6:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003aba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003abe:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003ac2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ac6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003aca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ace:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ad2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ad6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ada:	4b91      	ldr	r3, [pc, #580]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003adc:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1*t) + (fcb_joint1.C2*t2) + (fcb_joint1.C3*t3) + (fcb_joint1.C4*t4) + (fcb_joint1.C5*t5));
 8003ae0:	4b8f      	ldr	r3, [pc, #572]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003ae2:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003ae6:	4b8e      	ldr	r3, [pc, #568]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003ae8:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003aec:	4b8b      	ldr	r3, [pc, #556]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003aee:	edd3 7a00 	vldr	s15, [r3]
 8003af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003af6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003afa:	4b89      	ldr	r3, [pc, #548]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003afc:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003b00:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b0c:	4b84      	ldr	r3, [pc, #528]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003b0e:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003b12:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b1e:	4b80      	ldr	r3, [pc, #512]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003b20:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003b24:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b30:	4b7b      	ldr	r3, [pc, #492]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003b32:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003b36:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b42:	4b77      	ldr	r3, [pc, #476]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003b44:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0*fcb_joint2.C2*t) + (3.0*fcb_joint2.C3*t2) + (4.0*fcb_joint2.C4*t3) + (5.0*fcb_joint2.C5*t4);
 8003b48:	4b76      	ldr	r3, [pc, #472]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003b4a:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003b4e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b52:	4b74      	ldr	r3, [pc, #464]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003b54:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003b58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b5c:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003b60:	4b6e      	ldr	r3, [pc, #440]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b6a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b6e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003b72:	4b6c      	ldr	r3, [pc, #432]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003b74:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003b78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b7c:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003b80:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003b84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b90:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003b94:	4b63      	ldr	r3, [pc, #396]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003b96:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003b9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b9e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003ba2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ba6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003baa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bae:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bb2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003bb8:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003bbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bc0:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003bc4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bd0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bd4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003bd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bdc:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003bde:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1*t) + (fcb_joint2.C2*t2) + (fcb_joint2.C3*t3) + (fcb_joint2.C4*t4) + (fcb_joint2.C5*t5));
 8003be2:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003be4:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003be8:	4b4e      	ldr	r3, [pc, #312]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003bea:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003bee:	4b4b      	ldr	r3, [pc, #300]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bfc:	4b49      	ldr	r3, [pc, #292]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003bfe:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003c02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c0e:	4b45      	ldr	r3, [pc, #276]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003c10:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003c14:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c20:	4b40      	ldr	r3, [pc, #256]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003c22:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003c26:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c32:	4b3c      	ldr	r3, [pc, #240]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003c34:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003c38:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c44:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003c46:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0*fcb_joint3.C2*t) + (3.0*fcb_joint3.C3*t2) + (4.0*fcb_joint3.C4*t3) + (5.0*fcb_joint3.C5*t4);
 8003c4a:	4b37      	ldr	r3, [pc, #220]	; (8003d28 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8003c4c:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003c50:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c54:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8003c56:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003c5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c5e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003c62:	4b2e      	ldr	r3, [pc, #184]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c64:	edd3 7a00 	vldr	s15, [r3]
 8003c68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c6c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c70:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003c74:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8003c76:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003c7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c7e:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003c82:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003c86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c8e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c92:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003c96:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8003c98:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003c9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ca0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003ca4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ca8:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cb0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cb4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8003cba:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003cbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cc2:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003cc6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cca:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cd2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cd6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003cda:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8003ce0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1*t) + (fcb_joint3.C2*t2) + (fcb_joint3.C3*t3) + (fcb_joint3.C4*t4) + (fcb_joint3.C5*t5));
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8003ce6:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003cea:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8003cec:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003cf2:	edd3 7a00 	vldr	s15, [r3]
 8003cf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8003d00:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003d04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d0c:	e00e      	b.n	8003d2c <HAL_TIM_PeriodElapsedCallback+0x70c>
 8003d0e:	bf00      	nop
 8003d10:	24000bdc 	.word	0x24000bdc
 8003d14:	24000ad8 	.word	0x24000ad8
 8003d18:	24000f40 	.word	0x24000f40
 8003d1c:	24000be0 	.word	0x24000be0
 8003d20:	24000560 	.word	0x24000560
 8003d24:	24000644 	.word	0x24000644
 8003d28:	24000728 	.word	0x24000728
 8003d2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d30:	4bc8      	ldr	r3, [pc, #800]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003d32:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003d36:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d42:	4bc4      	ldr	r3, [pc, #784]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003d44:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003d48:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d54:	4bbf      	ldr	r3, [pc, #764]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003d56:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003d5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d66:	4bbb      	ldr	r3, [pc, #748]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003d68:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0*fcb_joint4.C2*t) + (3.0*fcb_joint4.C3*t2) + (4.0*fcb_joint4.C4*t3) + (5.0*fcb_joint4.C5*t4);
 8003d6c:	4bba      	ldr	r3, [pc, #744]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003d6e:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003d72:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003d76:	4bb8      	ldr	r3, [pc, #736]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003d78:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003d7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d80:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003d84:	4bb5      	ldr	r3, [pc, #724]	; (800405c <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8003d86:	edd3 7a00 	vldr	s15, [r3]
 8003d8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d8e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d92:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003d96:	4bb0      	ldr	r3, [pc, #704]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003d98:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003d9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003da0:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003da4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003da8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003db0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003db4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003db8:	4ba7      	ldr	r3, [pc, #668]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003dba:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003dbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dc2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003dc6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003dca:	edd7 7a08 	vldr	s15, [r7, #32]
 8003dce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dd2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003dd6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003dda:	4b9f      	ldr	r3, [pc, #636]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003ddc:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003de0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003de4:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003de8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003dec:	edd7 7a07 	vldr	s15, [r7, #28]
 8003df0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003df4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003df8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003dfc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e00:	4b95      	ldr	r3, [pc, #596]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003e02:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1*t) + (fcb_joint4.C2*t2) + (fcb_joint4.C3*t3) + (fcb_joint4.C4*t4) + (fcb_joint4.C5*t5));
 8003e06:	4b94      	ldr	r3, [pc, #592]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003e08:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003e0c:	4b92      	ldr	r3, [pc, #584]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003e0e:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003e12:	4b92      	ldr	r3, [pc, #584]	; (800405c <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8003e14:	edd3 7a00 	vldr	s15, [r3]
 8003e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e20:	4b8d      	ldr	r3, [pc, #564]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003e22:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003e26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e32:	4b89      	ldr	r3, [pc, #548]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003e34:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003e38:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e44:	4b84      	ldr	r3, [pc, #528]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003e46:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003e4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e56:	4b80      	ldr	r3, [pc, #512]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003e58:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003e5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e68:	4b7b      	ldr	r3, [pc, #492]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003e6a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;


		fcb_joint1.Kp_p = 0.4;
 8003e6e:	4b7c      	ldr	r3, [pc, #496]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003e70:	4a7c      	ldr	r2, [pc, #496]	; (8004064 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8003e72:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 8003e74:	4b7a      	ldr	r3, [pc, #488]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 8003e7c:	4b78      	ldr	r3, [pc, #480]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint2.Kp_p = 0.03;
 8003e84:	4b78      	ldr	r3, [pc, #480]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003e86:	4a79      	ldr	r2, [pc, #484]	; (800406c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003e88:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint2.Ki_p = 0.0;
 8003e8a:	4b77      	ldr	r3, [pc, #476]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint2.Kd_p = 0.0;
 8003e92:	4b75      	ldr	r3, [pc, #468]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint3.Kp_p = 0.15;
 8003e9a:	4b6e      	ldr	r3, [pc, #440]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003e9c:	4a74      	ldr	r2, [pc, #464]	; (8004070 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e9e:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 8003ea0:	4b6c      	ldr	r3, [pc, #432]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 8003ea8:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	669a      	str	r2, [r3, #104]	; 0x68
//		fcb_joint1.Kd_p = 0.0;
//		fcb_joint3.Kp_p = 0.0;
//		fcb_joint3.Ki_p = 0.0;
//		fcb_joint3.Kd_p = 0.0;

		fcb_joint1.Kp_v = 0.0; // 3.2
 8003eb0:	4b6b      	ldr	r3, [pc, #428]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 8003eb8:	4b69      	ldr	r3, [pc, #420]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 8003ec0:	4b67      	ldr	r3, [pc, #412]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint2.Kp_v = 0.0; // 3.2
 8003ec8:	4b67      	ldr	r3, [pc, #412]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint2.Ki_v = 0.0;
 8003ed0:	4b65      	ldr	r3, [pc, #404]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint2.Kd_v = 0.0;
 8003ed8:	4b63      	ldr	r3, [pc, #396]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint3.Kp_v = 0.0; // 3.2
 8003ee0:	4b5c      	ldr	r3, [pc, #368]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 8003ee8:	4b5a      	ldr	r3, [pc, #360]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 8003ef0:	4b58      	ldr	r3, [pc, #352]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.kalman_pos;
 8003ef8:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003efa:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003efe:	4b58      	ldr	r3, [pc, #352]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003f00:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f08:	4b55      	ldr	r3, [pc, #340]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003f0a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.kalman_pos;
 8003f0e:	4b51      	ldr	r3, [pc, #324]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003f10:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003f14:	4b4f      	ldr	r3, [pc, #316]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003f16:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f1e:	4b4d      	ldr	r3, [pc, #308]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003f20:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 8003f24:	4b4e      	ldr	r3, [pc, #312]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003f26:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003f2a:	4b4d      	ldr	r3, [pc, #308]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003f2c:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f34:	4b4a      	ldr	r3, [pc, #296]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003f36:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 8003f3a:	4b46      	ldr	r3, [pc, #280]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003f3c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003f40:	4b44      	ldr	r3, [pc, #272]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003f42:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f4a:	4b42      	ldr	r3, [pc, #264]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003f4c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint2.Error_p = fcb_joint2.Goal_Position - fcb_joint2.kalman_pos;
 8003f50:	4b45      	ldr	r3, [pc, #276]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f52:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003f56:	4b44      	ldr	r3, [pc, #272]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f58:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f60:	4b41      	ldr	r3, [pc, #260]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f62:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint2.Error_v = fcb_joint2.Goal_Velocity - fcb_joint2.kalman_velo;
 8003f66:	4b40      	ldr	r3, [pc, #256]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f68:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003f6c:	4b3e      	ldr	r3, [pc, #248]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f6e:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f76:	4b3c      	ldr	r3, [pc, #240]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f78:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84


		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8003f7c:	4b38      	ldr	r3, [pc, #224]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003f7e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003f82:	4b37      	ldr	r3, [pc, #220]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003f84:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f8c:	4b34      	ldr	r3, [pc, #208]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003f8e:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8003f92:	4b30      	ldr	r3, [pc, #192]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003f94:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003f98:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003f9a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fa2:	4b2c      	ldr	r3, [pc, #176]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003fa4:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003faa:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003fae:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003fb0:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb8:	4b29      	ldr	r3, [pc, #164]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003fba:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 8003fbe:	4b25      	ldr	r3, [pc, #148]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003fc0:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003fc4:	4b23      	ldr	r3, [pc, #140]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003fc6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fce:	4b21      	ldr	r3, [pc, #132]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8003fd0:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint2.Sum_Error_p += fcb_joint2.Error_p;
 8003fd4:	4b24      	ldr	r3, [pc, #144]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003fd6:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003fdc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe4:	4b20      	ldr	r3, [pc, #128]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003fe6:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint2.Sum_Error_v += fcb_joint2.Error_v;
 8003fea:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003fec:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003ff0:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003ff2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003ffc:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8004000:	4b17      	ldr	r3, [pc, #92]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8004002:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 8004006:	4b16      	ldr	r3, [pc, #88]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8004008:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800400c:	4b14      	ldr	r3, [pc, #80]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 800400e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8004012:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8004016:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 800401a:	4b11      	ldr	r3, [pc, #68]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 800401c:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8004022:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004026:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 800402a:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 800402e:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8004030:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8004036:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 800403c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004040:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004044:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 8004048:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 800404e:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8004052:	e00f      	b.n	8004074 <HAL_TIM_PeriodElapsedCallback+0xa54>
 8004054:	24000728 	.word	0x24000728
 8004058:	2400080c 	.word	0x2400080c
 800405c:	24000be0 	.word	0x24000be0
 8004060:	24000560 	.word	0x24000560
 8004064:	3ecccccd 	.word	0x3ecccccd
 8004068:	24000644 	.word	0x24000644
 800406c:	3cf5c28f 	.word	0x3cf5c28f
 8004070:	3e19999a 	.word	0x3e19999a
 8004074:	4b6a      	ldr	r3, [pc, #424]	; (8004220 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 8004076:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800407a:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 800407e:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 8004082:	4b67      	ldr	r3, [pc, #412]	; (8004220 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 8004084:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8004088:	4b65      	ldr	r3, [pc, #404]	; (8004220 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 800408a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800408e:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 8004092:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v) ) ;
 8004096:	4b62      	ldr	r3, [pc, #392]	; (8004220 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 8004098:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800409c:	4b60      	ldr	r3, [pc, #384]	; (8004220 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 800409e:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80040a2:	4b5f      	ldr	r3, [pc, #380]	; (8004220 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 80040a4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80040a8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80040ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 80040b0:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 80040b4:	4b5a      	ldr	r3, [pc, #360]	; (8004220 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 80040b6:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity) +
 80040ba:	4b5a      	ldr	r3, [pc, #360]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80040bc:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint2.Kp_p * fcb_joint2.Error_p ) +
 80040c0:	4b58      	ldr	r3, [pc, #352]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80040c2:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80040c6:	4b57      	ldr	r3, [pc, #348]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80040c8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80040cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity) +
 80040d0:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint2.Ki_p * fcb_joint2.Sum_Error_p ) +
 80040d4:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80040d6:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80040da:	4b52      	ldr	r3, [pc, #328]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80040dc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80040e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint2.Kp_p * fcb_joint2.Error_p ) +
 80040e4:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint2.Kd_p * (fcb_joint2.Error_p - fcb_joint2.Old_p) ) +
 80040e8:	4b4e      	ldr	r3, [pc, #312]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80040ea:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80040ee:	4b4d      	ldr	r3, [pc, #308]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80040f0:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 80040f4:	4b4b      	ldr	r3, [pc, #300]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80040f6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80040fa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80040fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint2.Ki_p * fcb_joint2.Sum_Error_p ) +
 8004102:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint2.Kp_v * fcb_joint2.Error_v) +
 8004106:	4b47      	ldr	r3, [pc, #284]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 8004108:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800410c:	4b45      	ldr	r3, [pc, #276]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 800410e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004112:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint2.Kd_p * (fcb_joint2.Error_p - fcb_joint2.Old_p) ) +
 8004116:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint2.Ki_v * fcb_joint2.Sum_Error_v ) +
 800411a:	4b42      	ldr	r3, [pc, #264]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 800411c:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8004120:	4b40      	ldr	r3, [pc, #256]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 8004122:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004126:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint2.Kp_v * fcb_joint2.Error_v) +
 800412a:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint2.Kd_v * (fcb_joint2.Error_v - fcb_joint2.Old_v) ) ;
 800412e:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 8004130:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8004134:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 8004136:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 800413a:	4b3a      	ldr	r3, [pc, #232]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 800413c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004140:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004144:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint2.Ki_v * fcb_joint2.Sum_Error_v ) +
 8004148:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity) +
 800414c:	4b35      	ldr	r3, [pc, #212]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 800414e:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8004152:	4b35      	ldr	r3, [pc, #212]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004154:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8004158:	4b33      	ldr	r3, [pc, #204]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800415a:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800415e:	4b32      	ldr	r3, [pc, #200]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004160:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8004164:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8004168:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 800416c:	4b2e      	ldr	r3, [pc, #184]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800416e:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004172:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004174:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004178:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 800417c:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 8004180:	4b29      	ldr	r3, [pc, #164]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004182:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8004186:	4b28      	ldr	r3, [pc, #160]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004188:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 800418c:	4b26      	ldr	r3, [pc, #152]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800418e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004192:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004196:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 800419a:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 800419e:	4b22      	ldr	r3, [pc, #136]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041a0:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80041a4:	4b20      	ldr	r3, [pc, #128]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041a6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80041aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 80041ae:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 80041b2:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041b4:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 80041b8:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041ba:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80041be:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 80041c2:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v) ) ;
 80041c6:	4b18      	ldr	r3, [pc, #96]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041c8:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80041cc:	4b16      	ldr	r3, [pc, #88]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041ce:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041d4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80041d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80041dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 80041e0:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 80041e4:	4b10      	ldr	r3, [pc, #64]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80041e6:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
		if (joint13_on)
 80041ea:	4b10      	ldr	r3, [pc, #64]	; (800422c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d025      	beq.n	8004240 <HAL_TIM_PeriodElapsedCallback+0xc20>
		{
			stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Output_Joint_W);
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 80041f6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80041fa:	eeb0 0a67 	vmov.f32	s0, s15
 80041fe:	480c      	ldr	r0, [pc, #48]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 8004200:	f7fe f862 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(0.0);
 8004204:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800423c <HAL_TIM_PeriodElapsedCallback+0xc1c>
 8004208:	480a      	ldr	r0, [pc, #40]	; (8004234 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 800420a:	f7fe f85d 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004210:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004214:	eeb0 0a67 	vmov.f32	s0, s15
 8004218:	4807      	ldr	r0, [pc, #28]	; (8004238 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800421a:	f7fe f855 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
 800421e:	e021      	b.n	8004264 <HAL_TIM_PeriodElapsedCallback+0xc44>
 8004220:	24000560 	.word	0x24000560
 8004224:	24000644 	.word	0x24000644
 8004228:	24000728 	.word	0x24000728
 800422c:	24000b2e 	.word	0x24000b2e
 8004230:	240004c0 	.word	0x240004c0
 8004234:	240004e8 	.word	0x240004e8
 8004238:	24000510 	.word	0x24000510
 800423c:	00000000 	.word	0x00000000
		}
		else
		{
			stepperJ1.StepperOpenLoopSpeedM(0.0);
 8004240:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 800423c <HAL_TIM_PeriodElapsedCallback+0xc1c>
 8004244:	48ae      	ldr	r0, [pc, #696]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xee0>)
 8004246:	f7fe f83f 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(0.0);
 800424a:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8004504 <HAL_TIM_PeriodElapsedCallback+0xee4>
 800424e:	48ae      	ldr	r0, [pc, #696]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0xee8>)
 8004250:	f7fe f83a 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
 8004254:	4bad      	ldr	r3, [pc, #692]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004256:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800425a:	eeb0 0a67 	vmov.f32	s0, s15
 800425e:	48ac      	ldr	r0, [pc, #688]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xef0>)
 8004260:	f7fe f832 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ4.StepperOpenLoopSpeedM(fcb_joint4.Goal_Velocity);
//
//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(0);
		stepperJ4.StepperOpenLoopSpeedM(0);
 8004264:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8004504 <HAL_TIM_PeriodElapsedCallback+0xee4>
 8004268:	48aa      	ldr	r0, [pc, #680]	; (8004514 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 800426a:	f7fe f82d 	bl	80022c8 <_ZN7Stepper21StepperOpenLoopSpeedMEf>

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 800426e:	4baa      	ldr	r3, [pc, #680]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004272:	4aa9      	ldr	r2, [pc, #676]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004274:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint2.Old_Error_p = fcb_joint2.Error_p;
 8004276:	4ba5      	ldr	r3, [pc, #660]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800427a:	4aa4      	ldr	r2, [pc, #656]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800427c:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 800427e:	4ba7      	ldr	r3, [pc, #668]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004282:	4aa6      	ldr	r2, [pc, #664]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004284:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 8004286:	4ba4      	ldr	r3, [pc, #656]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428c:	4aa2      	ldr	r2, [pc, #648]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 800428e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint2.Old_Error_v = fcb_joint2.Error_v;
 8004292:	4b9e      	ldr	r3, [pc, #632]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004298:	4a9c      	ldr	r2, [pc, #624]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800429a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 800429e:	4b9f      	ldr	r3, [pc, #636]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80042a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a4:	4a9d      	ldr	r2, [pc, #628]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80042a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.kalman_pos;
 80042aa:	4b9b      	ldr	r3, [pc, #620]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80042ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042b0:	4a99      	ldr	r2, [pc, #612]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80042b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.kalman_pos;
 80042b6:	4b99      	ldr	r3, [pc, #612]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80042b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042bc:	4a97      	ldr	r2, [pc, #604]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80042be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_p = fcb_joint2.kalman_pos;
 80042c2:	4b92      	ldr	r3, [pc, #584]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80042c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042c8:	4a90      	ldr	r2, [pc, #576]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80042ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_v = fcb_joint2.kalman_velo;
 80042ce:	4b8f      	ldr	r3, [pc, #572]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80042d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80042d4:	4a8d      	ldr	r2, [pc, #564]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80042d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 80042da:	4b8f      	ldr	r3, [pc, #572]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80042dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80042e0:	4a8d      	ldr	r2, [pc, #564]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80042e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 80042e6:	4b8c      	ldr	r3, [pc, #560]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80042e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80042ec:	4a8b      	ldr	r2, [pc, #556]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80042ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94


		t = t + sample_time_500;
 80042f2:	4b8b      	ldr	r3, [pc, #556]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 80042f4:	ed93 7a00 	vldr	s14, [r3]
 80042f8:	4b8a      	ldr	r3, [pc, #552]	; (8004524 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 80042fa:	edd3 7a00 	vldr	s15, [r3]
 80042fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004302:	4b87      	ldr	r3, [pc, #540]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8004304:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Max_Time )
 8004308:	4b85      	ldr	r3, [pc, #532]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 800430a:	ed93 7a00 	vldr	s14, [r3]
 800430e:	4b86      	ldr	r3, [pc, #536]	; (8004528 <HAL_TIM_PeriodElapsedCallback+0xf08>)
 8004310:	edd3 7a00 	vldr	s15, [r3]
 8004314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431c:	bfac      	ite	ge
 800431e:	2301      	movge	r3, #1
 8004320:	2300      	movlt	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d05d      	beq.n	80043e4 <HAL_TIM_PeriodElapsedCallback+0xdc4>
			{
			t = (int)0;
 8004328:	4b7d      	ldr	r3, [pc, #500]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
			fcb_joint1.Sum_Error_p = 0;
 8004330:	4b79      	ldr	r3, [pc, #484]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint2.Sum_Error_p = 0;
 800433a:	4b74      	ldr	r3, [pc, #464]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 8004344:	4b75      	ldr	r3, [pc, #468]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			fcb_joint1.Sum_Error_v = 0;
 800434e:	4b72      	ldr	r3, [pc, #456]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint2.Sum_Error_v = 0;
 8004358:	4b6c      	ldr	r3, [pc, #432]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 8004362:	4b6e      	ldr	r3, [pc, #440]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

			fcb_joint1.Old_Error_p = 0;
 800436c:	4b6a      	ldr	r3, [pc, #424]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint2.Old_Error_p = 0;
 8004374:	4b65      	ldr	r3, [pc, #404]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 800437c:	4b67      	ldr	r3, [pc, #412]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	67da      	str	r2, [r3, #124]	; 0x7c

			fcb_joint1.Old_Error_v = 0;
 8004384:	4b64      	ldr	r3, [pc, #400]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint2.Old_Error_v = 0;
 800438e:	4b5f      	ldr	r3, [pc, #380]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 8004398:	4b60      	ldr	r3, [pc, #384]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			fcb_joint1.Old_p = 0;
 80043a2:	4b5d      	ldr	r3, [pc, #372]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint2.Old_p = 0;
 80043ac:	4b57      	ldr	r3, [pc, #348]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 80043b6:	4b59      	ldr	r3, [pc, #356]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

			fcb_joint1.Old_v = 0;
 80043c0:	4b55      	ldr	r3, [pc, #340]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint2.Old_v = 0;
 80043ca:	4b50      	ldr	r3, [pc, #320]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 80043d4:	4b51      	ldr	r3, [pc, #324]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			State_FIN = true;
 80043de:	4b53      	ldr	r3, [pc, #332]	; (800452c <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 80043e0:	2201      	movs	r2, #1
 80043e2:	701a      	strb	r2, [r3, #0]
			}


	}
	if(htim == &htim17){
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a52      	ldr	r2, [pc, #328]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0xf10>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	f040 8085 	bne.w	80044f8 <HAL_TIM_PeriodElapsedCallback+0xed8>
		uint8_t encoder_state[12] = {
				(uint8_t)(((int16_t)fcb_joint1.Encoder >> 16) & 0xFF),
 80043ee:	4b4a      	ldr	r3, [pc, #296]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80043f0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80043f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043f8:	ee17 3a90 	vmov	r3, s15
 80043fc:	b21b      	sxth	r3, r3
 80043fe:	141b      	asrs	r3, r3, #16
				(uint8_t)(((int16_t)fcb_joint3.Encoder >> 8) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint3.Encoder) & 0xFF),
				(uint8_t)(((int32_t)fcb_joint4.Encoder >> 16) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint4.Encoder >> 8) & 0xFF),
				(uint8_t)(((int16_t)fcb_joint4.Encoder) & 0xFF),
		};
 8004400:	b2db      	uxtb	r3, r3
 8004402:	733b      	strb	r3, [r7, #12]
				(uint8_t)(((int16_t)fcb_joint1.Encoder >> 8) & 0xFF),
 8004404:	4b44      	ldr	r3, [pc, #272]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8004406:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800440a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800440e:	ee17 3a90 	vmov	r3, s15
 8004412:	b21b      	sxth	r3, r3
 8004414:	121b      	asrs	r3, r3, #8
 8004416:	b21b      	sxth	r3, r3
		};
 8004418:	b2db      	uxtb	r3, r3
 800441a:	737b      	strb	r3, [r7, #13]
				(uint8_t)(((int16_t)fcb_joint1.Encoder) & 0xFF),
 800441c:	4b3e      	ldr	r3, [pc, #248]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 800441e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004426:	ee17 3a90 	vmov	r3, s15
 800442a:	b21b      	sxth	r3, r3
		};
 800442c:	b2db      	uxtb	r3, r3
 800442e:	73bb      	strb	r3, [r7, #14]
				(uint8_t)(((int32_t)fcb_joint2.Encoder >> 16) & 0xFF),
 8004430:	4b36      	ldr	r3, [pc, #216]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004432:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800443a:	ee17 3a90 	vmov	r3, s15
 800443e:	141b      	asrs	r3, r3, #16
		};
 8004440:	b2db      	uxtb	r3, r3
 8004442:	73fb      	strb	r3, [r7, #15]
				(uint8_t)(((int32_t)fcb_joint2.Encoder >> 8) & 0xFF),
 8004444:	4b31      	ldr	r3, [pc, #196]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8004446:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800444a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800444e:	ee17 3a90 	vmov	r3, s15
 8004452:	121b      	asrs	r3, r3, #8
		};
 8004454:	b2db      	uxtb	r3, r3
 8004456:	743b      	strb	r3, [r7, #16]
				(uint8_t)(((int32_t)fcb_joint2.Encoder) & 0xFF),
 8004458:	4b2c      	ldr	r3, [pc, #176]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800445a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800445e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004462:	edc7 7a00 	vstr	s15, [r7]
		};
 8004466:	783b      	ldrb	r3, [r7, #0]
 8004468:	747b      	strb	r3, [r7, #17]
				(uint8_t)(((int32_t)fcb_joint3.Encoder >> 16) & 0xFF),
 800446a:	4b2c      	ldr	r3, [pc, #176]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800446c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004474:	ee17 3a90 	vmov	r3, s15
 8004478:	141b      	asrs	r3, r3, #16
		};
 800447a:	b2db      	uxtb	r3, r3
 800447c:	74bb      	strb	r3, [r7, #18]
				(uint8_t)(((int16_t)fcb_joint3.Encoder >> 8) & 0xFF),
 800447e:	4b27      	ldr	r3, [pc, #156]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004480:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004488:	ee17 3a90 	vmov	r3, s15
 800448c:	b21b      	sxth	r3, r3
 800448e:	121b      	asrs	r3, r3, #8
 8004490:	b21b      	sxth	r3, r3
		};
 8004492:	b2db      	uxtb	r3, r3
 8004494:	74fb      	strb	r3, [r7, #19]
				(uint8_t)(((int16_t)fcb_joint3.Encoder) & 0xFF),
 8004496:	4b21      	ldr	r3, [pc, #132]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8004498:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800449c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044a0:	ee17 3a90 	vmov	r3, s15
 80044a4:	b21b      	sxth	r3, r3
		};
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	753b      	strb	r3, [r7, #20]
				(uint8_t)(((int32_t)fcb_joint4.Encoder >> 16) & 0xFF),
 80044aa:	4b22      	ldr	r3, [pc, #136]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xf14>)
 80044ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80044b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044b4:	ee17 3a90 	vmov	r3, s15
 80044b8:	141b      	asrs	r3, r3, #16
		};
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	757b      	strb	r3, [r7, #21]
				(uint8_t)(((int16_t)fcb_joint4.Encoder >> 8) & 0xFF),
 80044be:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xf14>)
 80044c0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80044c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044c8:	ee17 3a90 	vmov	r3, s15
 80044cc:	b21b      	sxth	r3, r3
 80044ce:	121b      	asrs	r3, r3, #8
 80044d0:	b21b      	sxth	r3, r3
		};
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	75bb      	strb	r3, [r7, #22]
				(uint8_t)(((int16_t)fcb_joint4.Encoder) & 0xFF),
 80044d6:	4b17      	ldr	r3, [pc, #92]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xf14>)
 80044d8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80044dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044e0:	ee17 3a90 	vmov	r3, s15
 80044e4:	b21b      	sxth	r3, r3
		};
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	75fb      	strb	r3, [r7, #23]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&encoder_state, 12);
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	220c      	movs	r2, #12
 80044f0:	4619      	mov	r1, r3
 80044f2:	4811      	ldr	r0, [pc, #68]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0xf18>)
 80044f4:	f009 ffd8 	bl	800e4a8 <HAL_UART_Transmit_DMA>
	}
}
 80044f8:	bf00      	nop
 80044fa:	3728      	adds	r7, #40	; 0x28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	240004c0 	.word	0x240004c0
 8004504:	00000000 	.word	0x00000000
 8004508:	24000510 	.word	0x24000510
 800450c:	24000644 	.word	0x24000644
 8004510:	240004e8 	.word	0x240004e8
 8004514:	24000538 	.word	0x24000538
 8004518:	24000560 	.word	0x24000560
 800451c:	24000728 	.word	0x24000728
 8004520:	24000be0 	.word	0x24000be0
 8004524:	24000210 	.word	0x24000210
 8004528:	24000adc 	.word	0x24000adc
 800452c:	24000ad8 	.word	0x24000ad8
 8004530:	24001024 	.word	0x24001024
 8004534:	2400080c 	.word	0x2400080c
 8004538:	24001190 	.word	0x24001190
 800453c:	00000000 	.word	0x00000000

08004540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004544:	f002 fa5e 	bl	8006a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004548:	f000 faa4 	bl	8004a94 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800454c:	f7fd ff98 	bl	8002480 <MX_GPIO_Init>
  MX_DMA_Init();
 8004550:	f7fd ff46 	bl	80023e0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8004554:	f001 fef0 	bl	8006338 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8004558:	f001 f81e 	bl	8005598 <MX_TIM2_Init>
  MX_UART4_Init();
 800455c:	f001 fdfe 	bl	800615c <MX_UART4_Init>
  MX_TIM4_Init();
 8004560:	f001 f90a 	bl	8005778 <MX_TIM4_Init>
  MX_SPI3_Init();
 8004564:	f000 fc3a 	bl	8004ddc <MX_SPI3_Init>
  MX_TIM1_Init();
 8004568:	f000 ff68 	bl	800543c <MX_TIM1_Init>
  MX_TIM3_Init();
 800456c:	f001 f88c 	bl	8005688 <MX_TIM3_Init>
  MX_TIM5_Init();
 8004570:	f001 f97a 	bl	8005868 <MX_TIM5_Init>
  MX_TIM15_Init();
 8004574:	f001 fab4 	bl	8005ae0 <MX_TIM15_Init>
  MX_CRC_Init();
 8004578:	f7fd fee2 	bl	8002340 <MX_CRC_Init>
  MX_UART7_Init();
 800457c:	f001 fe42 	bl	8006204 <MX_UART7_Init>
  MX_TIM6_Init();
 8004580:	f001 f9c0 	bl	8005904 <MX_TIM6_Init>
  MX_TIM7_Init();
 8004584:	f001 f9f4 	bl	8005970 <MX_TIM7_Init>
  MX_TIM12_Init();
 8004588:	f001 fa28 	bl	80059dc <MX_TIM12_Init>
  MX_TIM13_Init();
 800458c:	f001 fa60 	bl	8005a50 <MX_TIM13_Init>
  MX_TIM14_Init();
 8004590:	f001 fa82 	bl	8005a98 <MX_TIM14_Init>
  MX_TIM16_Init();
 8004594:	f001 fb48 	bl	8005c28 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8004598:	f001 fe82 	bl	80062a0 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800459c:	f001 fb6a 	bl	8005c74 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 80045a0:	2214      	movs	r2, #20
 80045a2:	496a      	ldr	r1, [pc, #424]	; (800474c <main+0x20c>)
 80045a4:	486a      	ldr	r0, [pc, #424]	; (8004750 <main+0x210>)
 80045a6:	f00b fee4 	bl	8010372 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80045aa:	4b6a      	ldr	r3, [pc, #424]	; (8004754 <main+0x214>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a6a      	ldr	r2, [pc, #424]	; (8004758 <main+0x218>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d04a      	beq.n	800464a <main+0x10a>
 80045b4:	4b67      	ldr	r3, [pc, #412]	; (8004754 <main+0x214>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a68      	ldr	r2, [pc, #416]	; (800475c <main+0x21c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d045      	beq.n	800464a <main+0x10a>
 80045be:	4b65      	ldr	r3, [pc, #404]	; (8004754 <main+0x214>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a67      	ldr	r2, [pc, #412]	; (8004760 <main+0x220>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d040      	beq.n	800464a <main+0x10a>
 80045c8:	4b62      	ldr	r3, [pc, #392]	; (8004754 <main+0x214>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a65      	ldr	r2, [pc, #404]	; (8004764 <main+0x224>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d03b      	beq.n	800464a <main+0x10a>
 80045d2:	4b60      	ldr	r3, [pc, #384]	; (8004754 <main+0x214>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a64      	ldr	r2, [pc, #400]	; (8004768 <main+0x228>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d036      	beq.n	800464a <main+0x10a>
 80045dc:	4b5d      	ldr	r3, [pc, #372]	; (8004754 <main+0x214>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a62      	ldr	r2, [pc, #392]	; (800476c <main+0x22c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d031      	beq.n	800464a <main+0x10a>
 80045e6:	4b5b      	ldr	r3, [pc, #364]	; (8004754 <main+0x214>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a61      	ldr	r2, [pc, #388]	; (8004770 <main+0x230>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d02c      	beq.n	800464a <main+0x10a>
 80045f0:	4b58      	ldr	r3, [pc, #352]	; (8004754 <main+0x214>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5f      	ldr	r2, [pc, #380]	; (8004774 <main+0x234>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d027      	beq.n	800464a <main+0x10a>
 80045fa:	4b56      	ldr	r3, [pc, #344]	; (8004754 <main+0x214>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a5e      	ldr	r2, [pc, #376]	; (8004778 <main+0x238>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d022      	beq.n	800464a <main+0x10a>
 8004604:	4b53      	ldr	r3, [pc, #332]	; (8004754 <main+0x214>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a5c      	ldr	r2, [pc, #368]	; (800477c <main+0x23c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01d      	beq.n	800464a <main+0x10a>
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <main+0x214>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a5b      	ldr	r2, [pc, #364]	; (8004780 <main+0x240>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d018      	beq.n	800464a <main+0x10a>
 8004618:	4b4e      	ldr	r3, [pc, #312]	; (8004754 <main+0x214>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a59      	ldr	r2, [pc, #356]	; (8004784 <main+0x244>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d013      	beq.n	800464a <main+0x10a>
 8004622:	4b4c      	ldr	r3, [pc, #304]	; (8004754 <main+0x214>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a58      	ldr	r2, [pc, #352]	; (8004788 <main+0x248>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00e      	beq.n	800464a <main+0x10a>
 800462c:	4b49      	ldr	r3, [pc, #292]	; (8004754 <main+0x214>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a56      	ldr	r2, [pc, #344]	; (800478c <main+0x24c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d009      	beq.n	800464a <main+0x10a>
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <main+0x214>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a55      	ldr	r2, [pc, #340]	; (8004790 <main+0x250>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d004      	beq.n	800464a <main+0x10a>
 8004640:	4b44      	ldr	r3, [pc, #272]	; (8004754 <main+0x214>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a53      	ldr	r2, [pc, #332]	; (8004794 <main+0x254>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d108      	bne.n	800465c <main+0x11c>
 800464a:	4b42      	ldr	r3, [pc, #264]	; (8004754 <main+0x214>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b40      	ldr	r3, [pc, #256]	; (8004754 <main+0x214>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0208 	bic.w	r2, r2, #8
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e007      	b.n	800466c <main+0x12c>
 800465c:	4b3d      	ldr	r3, [pc, #244]	; (8004754 <main+0x214>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4b3c      	ldr	r3, [pc, #240]	; (8004754 <main+0x214>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0204 	bic.w	r2, r2, #4
 800466a:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800466c:	2201      	movs	r2, #1
 800466e:	2101      	movs	r1, #1
 8004670:	4849      	ldr	r0, [pc, #292]	; (8004798 <main+0x258>)
 8004672:	f005 fd8f 	bl	800a194 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8004676:	2201      	movs	r2, #1
 8004678:	2102      	movs	r1, #2
 800467a:	4848      	ldr	r0, [pc, #288]	; (800479c <main+0x25c>)
 800467c:	f005 fd8a 	bl	800a194 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004680:	2200      	movs	r2, #0
 8004682:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004686:	4844      	ldr	r0, [pc, #272]	; (8004798 <main+0x258>)
 8004688:	f005 fd84 	bl	800a194 <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 800468c:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80047c0 <main+0x280>
 8004690:	4843      	ldr	r0, [pc, #268]	; (80047a0 <main+0x260>)
 8004692:	f7fd fb65 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 8004696:	2108      	movs	r1, #8
 8004698:	4841      	ldr	r0, [pc, #260]	; (80047a0 <main+0x260>)
 800469a:	f7fd fdfd 	bl	8002298 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 800469e:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80047a4 <main+0x264>
 80046a2:	483f      	ldr	r0, [pc, #252]	; (80047a0 <main+0x260>)
 80046a4:	f7fd fdd4 	bl	8002250 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80046a8:	483d      	ldr	r0, [pc, #244]	; (80047a0 <main+0x260>)
 80046aa:	f7fd fb48 	bl	8001d3e <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 80046ae:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80047c0 <main+0x280>
 80046b2:	483d      	ldr	r0, [pc, #244]	; (80047a8 <main+0x268>)
 80046b4:	f7fd fb54 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(16);
 80046b8:	2110      	movs	r1, #16
 80046ba:	483b      	ldr	r0, [pc, #236]	; (80047a8 <main+0x268>)
 80046bc:	f7fd fdec 	bl	8002298 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 80046c0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80046c4:	4838      	ldr	r0, [pc, #224]	; (80047a8 <main+0x268>)
 80046c6:	f7fd fdc3 	bl	8002250 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 80046ca:	4837      	ldr	r0, [pc, #220]	; (80047a8 <main+0x268>)
 80046cc:	f7fd fb37 	bl	8001d3e <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 80046d0:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80047c0 <main+0x280>
 80046d4:	4835      	ldr	r0, [pc, #212]	; (80047ac <main+0x26c>)
 80046d6:	f7fd fb43 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 80046da:	2110      	movs	r1, #16
 80046dc:	4833      	ldr	r0, [pc, #204]	; (80047ac <main+0x26c>)
 80046de:	f7fd fddb 	bl	8002298 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 80046e2:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 80046e6:	4831      	ldr	r0, [pc, #196]	; (80047ac <main+0x26c>)
 80046e8:	f7fd fdb2 	bl	8002250 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80046ec:	482f      	ldr	r0, [pc, #188]	; (80047ac <main+0x26c>)
 80046ee:	f7fd fb26 	bl	8001d3e <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 80046f2:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80047c0 <main+0x280>
 80046f6:	482e      	ldr	r0, [pc, #184]	; (80047b0 <main+0x270>)
 80046f8:	f7fd fb32 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(1);
 80046fc:	2101      	movs	r1, #1
 80046fe:	482c      	ldr	r0, [pc, #176]	; (80047b0 <main+0x270>)
 8004700:	f7fd fdca 	bl	8002298 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 8004704:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004708:	4829      	ldr	r0, [pc, #164]	; (80047b0 <main+0x270>)
 800470a:	f7fd fda1 	bl	8002250 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 800470e:	4828      	ldr	r0, [pc, #160]	; (80047b0 <main+0x270>)
 8004710:	f7fd fb15 	bl	8001d3e <_ZN7Stepper13StepperEnableEv>

//	gripper.setDegreeGripperClose(80);
	gripper.setDegreeGripperClose(145);
 8004714:	2191      	movs	r1, #145	; 0x91
 8004716:	4827      	ldr	r0, [pc, #156]	; (80047b4 <main+0x274>)
 8004718:	f7fd fa5b 	bl	8001bd2 <_ZN10ServoMotor21setDegreeGripperCloseEl>
//	gripper.setDegreeGripperClose(40);
	gripper.setDegreeGripperOpen(57);
 800471c:	2139      	movs	r1, #57	; 0x39
 800471e:	4825      	ldr	r0, [pc, #148]	; (80047b4 <main+0x274>)
 8004720:	f7fd fa46 	bl	8001bb0 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 8004724:	4823      	ldr	r0, [pc, #140]	; (80047b4 <main+0x274>)
 8004726:	f7fd f86e 	bl	8001806 <_ZN10ServoMotor11ServoEnableEv>
	gripper.GripperClose();
 800472a:	4822      	ldr	r0, [pc, #136]	; (80047b4 <main+0x274>)
 800472c:	f7fd fa62 	bl	8001bf4 <_ZN10ServoMotor12GripperCloseEv>
	while(!Limit_sw_Z_Top)
 8004730:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <main+0x278>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f083 0301 	eor.w	r3, r3, #1
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d041      	beq.n	80047c4 <main+0x284>
	{
		stepperJ2.StepperSetFrequency(1200.0f);
 8004740:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80047bc <main+0x27c>
 8004744:	4818      	ldr	r0, [pc, #96]	; (80047a8 <main+0x268>)
 8004746:	f7fd fb0b 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	while(!Limit_sw_Z_Top)
 800474a:	e7f1      	b.n	8004730 <main+0x1f0>
 800474c:	24000b14 	.word	0x24000b14
 8004750:	24001220 	.word	0x24001220
 8004754:	24001508 	.word	0x24001508
 8004758:	40020010 	.word	0x40020010
 800475c:	40020028 	.word	0x40020028
 8004760:	40020040 	.word	0x40020040
 8004764:	40020058 	.word	0x40020058
 8004768:	40020070 	.word	0x40020070
 800476c:	40020088 	.word	0x40020088
 8004770:	400200a0 	.word	0x400200a0
 8004774:	400200b8 	.word	0x400200b8
 8004778:	40020410 	.word	0x40020410
 800477c:	40020428 	.word	0x40020428
 8004780:	40020440 	.word	0x40020440
 8004784:	40020458 	.word	0x40020458
 8004788:	40020470 	.word	0x40020470
 800478c:	40020488 	.word	0x40020488
 8004790:	400204a0 	.word	0x400204a0
 8004794:	400204b8 	.word	0x400204b8
 8004798:	58020400 	.word	0x58020400
 800479c:	58021000 	.word	0x58021000
 80047a0:	240004c0 	.word	0x240004c0
 80047a4:	42280000 	.word	0x42280000
 80047a8:	240004e8 	.word	0x240004e8
 80047ac:	24000510 	.word	0x24000510
 80047b0:	24000538 	.word	0x24000538
 80047b4:	24000ab8 	.word	0x24000ab8
 80047b8:	24000b2b 	.word	0x24000b2b
 80047bc:	44960000 	.word	0x44960000
 80047c0:	00000000 	.word	0x00000000
	}
	stepperJ2.StepperSetFrequency(0.0f);
 80047c4:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80047c0 <main+0x280>
 80047c8:	4897      	ldr	r0, [pc, #604]	; (8004a28 <main+0x4e8>)
 80047ca:	f7fd fac9 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(200);
 80047ce:	20c8      	movs	r0, #200	; 0xc8
 80047d0:	f002 f9aa 	bl	8006b28 <HAL_Delay>
	stepperJ2.StepperSetFrequency(-800.0f);
 80047d4:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8004a2c <main+0x4ec>
 80047d8:	4893      	ldr	r0, [pc, #588]	; (8004a28 <main+0x4e8>)
 80047da:	f7fd fac1 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(2000);
 80047de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80047e2:	f002 f9a1 	bl	8006b28 <HAL_Delay>
	stepperJ2.StepperSetFrequency(0.0f);
 80047e6:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8004a30 <main+0x4f0>
 80047ea:	488f      	ldr	r0, [pc, #572]	; (8004a28 <main+0x4e8>)
 80047ec:	f7fd fab8 	bl	8001d60 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(1000);
 80047f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047f4:	f002 f998 	bl	8006b28 <HAL_Delay>
	gripper.GripperOpen();
 80047f8:	488e      	ldr	r0, [pc, #568]	; (8004a34 <main+0x4f4>)
 80047fa:	f7fd fa11 	bl	8001c20 <_ZN10ServoMotor11GripperOpenEv>
	Limit_sw_Z_Top = false;
 80047fe:	4b8e      	ldr	r3, [pc, #568]	; (8004a38 <main+0x4f8>)
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]



	encoderJ1.AMT21_Read();
 8004804:	488d      	ldr	r0, [pc, #564]	; (8004a3c <main+0x4fc>)
 8004806:	f7fb ff64 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 800480a:	488c      	ldr	r0, [pc, #560]	; (8004a3c <main+0x4fc>)
 800480c:	f7fb ff90 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004810:	4603      	mov	r3, r0
 8004812:	461a      	mov	r2, r3
 8004814:	4b8a      	ldr	r3, [pc, #552]	; (8004a40 <main+0x500>)
 8004816:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 8004818:	4b89      	ldr	r3, [pc, #548]	; (8004a40 <main+0x500>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d110      	bne.n	8004842 <main+0x302>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;}
 8004820:	4886      	ldr	r0, [pc, #536]	; (8004a3c <main+0x4fc>)
 8004822:	f7fb ffeb 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004826:	4603      	mov	r3, r0
 8004828:	ee07 3a90 	vmov	s15, r3
 800482c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004830:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 8004a20 <main+0x4e0>
 8004834:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004838:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800483c:	4b81      	ldr	r3, [pc, #516]	; (8004a44 <main+0x504>)
 800483e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ2.AMT21_Read();
 8004842:	4881      	ldr	r0, [pc, #516]	; (8004a48 <main+0x508>)
 8004844:	f7fb ff45 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8004848:	487f      	ldr	r0, [pc, #508]	; (8004a48 <main+0x508>)
 800484a:	f7fb ff71 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800484e:	4603      	mov	r3, r0
 8004850:	461a      	mov	r2, r3
 8004852:	4b7e      	ldr	r3, [pc, #504]	; (8004a4c <main+0x50c>)
 8004854:	701a      	strb	r2, [r3, #0]
	if (HALENCJ2OK == HAL_OK) {
 8004856:	4b7d      	ldr	r3, [pc, #500]	; (8004a4c <main+0x50c>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d115      	bne.n	800488a <main+0x34a>
		encoderJ2.unwarp();
 800485e:	487a      	ldr	r0, [pc, #488]	; (8004a48 <main+0x508>)
 8004860:	f7fb ffee 	bl	8000840 <_ZN5AMT216unwarpEv>
		encoderJ2.setUnwarpZero();
 8004864:	4878      	ldr	r0, [pc, #480]	; (8004a48 <main+0x508>)
 8004866:	f7fc f83d 	bl	80008e4 <_ZN5AMT2113setUnwarpZeroEv>
		fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;}
 800486a:	4877      	ldr	r0, [pc, #476]	; (8004a48 <main+0x508>)
 800486c:	f7fc f847 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8004870:	ee07 0a90 	vmov	s15, r0
 8004874:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004878:	ed9f 5b69 	vldr	d5, [pc, #420]	; 8004a20 <main+0x4e0>
 800487c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004880:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004884:	4b72      	ldr	r3, [pc, #456]	; (8004a50 <main+0x510>)
 8004886:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ3.AMT21_Read();
 800488a:	4872      	ldr	r0, [pc, #456]	; (8004a54 <main+0x514>)
 800488c:	f7fb ff21 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8004890:	4870      	ldr	r0, [pc, #448]	; (8004a54 <main+0x514>)
 8004892:	f7fb ff4d 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004896:	4603      	mov	r3, r0
 8004898:	461a      	mov	r2, r3
 800489a:	4b6f      	ldr	r3, [pc, #444]	; (8004a58 <main+0x518>)
 800489c:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 800489e:	4b6e      	ldr	r3, [pc, #440]	; (8004a58 <main+0x518>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d110      	bne.n	80048c8 <main+0x388>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;}
 80048a6:	486b      	ldr	r0, [pc, #428]	; (8004a54 <main+0x514>)
 80048a8:	f7fb ffa8 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80048ac:	4603      	mov	r3, r0
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80048b6:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8004a20 <main+0x4e0>
 80048ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80048be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80048c2:	4b66      	ldr	r3, [pc, #408]	; (8004a5c <main+0x51c>)
 80048c4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	encoderJ4.AMT21_Read();
 80048c8:	4865      	ldr	r0, [pc, #404]	; (8004a60 <main+0x520>)
 80048ca:	f7fb ff02 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80048ce:	4864      	ldr	r0, [pc, #400]	; (8004a60 <main+0x520>)
 80048d0:	f7fb ff2e 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80048d4:	4603      	mov	r3, r0
 80048d6:	461a      	mov	r2, r3
 80048d8:	4b62      	ldr	r3, [pc, #392]	; (8004a64 <main+0x524>)
 80048da:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 80048dc:	4b61      	ldr	r3, [pc, #388]	; (8004a64 <main+0x524>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d110      	bne.n	8004906 <main+0x3c6>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;}
 80048e4:	485e      	ldr	r0, [pc, #376]	; (8004a60 <main+0x520>)
 80048e6:	f7fb ff89 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80048ea:	4603      	mov	r3, r0
 80048ec:	ee07 3a90 	vmov	s15, r3
 80048f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80048f4:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8004a20 <main+0x4e0>
 80048f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80048fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004900:	4b59      	ldr	r3, [pc, #356]	; (8004a68 <main+0x528>)
 8004902:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	fcb_joint1.p11 = 3.60381982 / 100000000.0 ;
 8004906:	4b4f      	ldr	r3, [pc, #316]	; (8004a44 <main+0x504>)
 8004908:	4a58      	ldr	r2, [pc, #352]	; (8004a6c <main+0x52c>)
 800490a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint1.p12 = 1.08884194 / 10000000.0;
 800490e:	4b4d      	ldr	r3, [pc, #308]	; (8004a44 <main+0x504>)
 8004910:	4a57      	ldr	r2, [pc, #348]	; (8004a70 <main+0x530>)
 8004912:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint1.p21 = 1.0888423 / 10000000.0;
 8004916:	4b4b      	ldr	r3, [pc, #300]	; (8004a44 <main+0x504>)
 8004918:	4a56      	ldr	r2, [pc, #344]	; (8004a74 <main+0x534>)
 800491a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint1.p22 = 6.59951866 / 10000000.0;
 800491e:	4b49      	ldr	r3, [pc, #292]	; (8004a44 <main+0x504>)
 8004920:	4a55      	ldr	r2, [pc, #340]	; (8004a78 <main+0x538>)
 8004922:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint3.p11 = 3.60381982 / 100000000.0;
 8004926:	4b4d      	ldr	r3, [pc, #308]	; (8004a5c <main+0x51c>)
 8004928:	4a50      	ldr	r2, [pc, #320]	; (8004a6c <main+0x52c>)
 800492a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint3.p12 = 1.08884194 / 10000000.0;
 800492e:	4b4b      	ldr	r3, [pc, #300]	; (8004a5c <main+0x51c>)
 8004930:	4a4f      	ldr	r2, [pc, #316]	; (8004a70 <main+0x530>)
 8004932:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint3.p21 = 1.0888423 / 10000000.0;
 8004936:	4b49      	ldr	r3, [pc, #292]	; (8004a5c <main+0x51c>)
 8004938:	4a4e      	ldr	r2, [pc, #312]	; (8004a74 <main+0x534>)
 800493a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint3.p22 = 6.59951866 / 10000000.0;
 800493e:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <main+0x51c>)
 8004940:	4a4d      	ldr	r2, [pc, #308]	; (8004a78 <main+0x538>)
 8004942:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4


	fcb_joint1.Q = 0.001;
 8004946:	4b3f      	ldr	r3, [pc, #252]	; (8004a44 <main+0x504>)
 8004948:	4a4c      	ldr	r2, [pc, #304]	; (8004a7c <main+0x53c>)
 800494a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint1.R = 0.0000003;
 800494e:	4b3d      	ldr	r3, [pc, #244]	; (8004a44 <main+0x504>)
 8004950:	4a4b      	ldr	r2, [pc, #300]	; (8004a80 <main+0x540>)
 8004952:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint2.Q = 0.001;
 8004956:	4b3e      	ldr	r3, [pc, #248]	; (8004a50 <main+0x510>)
 8004958:	4a48      	ldr	r2, [pc, #288]	; (8004a7c <main+0x53c>)
 800495a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint2.R = 0.00003;
 800495e:	4b3c      	ldr	r3, [pc, #240]	; (8004a50 <main+0x510>)
 8004960:	4a48      	ldr	r2, [pc, #288]	; (8004a84 <main+0x544>)
 8004962:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint3.Q = 0.001;
 8004966:	4b3d      	ldr	r3, [pc, #244]	; (8004a5c <main+0x51c>)
 8004968:	4a44      	ldr	r2, [pc, #272]	; (8004a7c <main+0x53c>)
 800496a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint3.R = 0.000001;
 800496e:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <main+0x51c>)
 8004970:	4a45      	ldr	r2, [pc, #276]	; (8004a88 <main+0x548>)
 8004972:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

//	fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
	fcb_joint1.X11 = fcb_joint1.Encoder;
 8004976:	4b33      	ldr	r3, [pc, #204]	; (8004a44 <main+0x504>)
 8004978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497a:	4a32      	ldr	r2, [pc, #200]	; (8004a44 <main+0x504>)
 800497c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint1.X21 = 0.0;
 8004980:	4b30      	ldr	r3, [pc, #192]	; (8004a44 <main+0x504>)
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint1.kalman_pos = fcb_joint1.X11;
 800498a:	4b2e      	ldr	r3, [pc, #184]	; (8004a44 <main+0x504>)
 800498c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004990:	4a2c      	ldr	r2, [pc, #176]	; (8004a44 <main+0x504>)
 8004992:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint1.kalman_velo = 0.0;
 8004996:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <main+0x504>)
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint1.Goal_Position = fcb_joint1.Encoder;
 80049a0:	4b28      	ldr	r3, [pc, #160]	; (8004a44 <main+0x504>)
 80049a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a4:	4a27      	ldr	r2, [pc, #156]	; (8004a44 <main+0x504>)
 80049a6:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint2.X11 = fcb_joint2.Encoder;
 80049a8:	4b29      	ldr	r3, [pc, #164]	; (8004a50 <main+0x510>)
 80049aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ac:	4a28      	ldr	r2, [pc, #160]	; (8004a50 <main+0x510>)
 80049ae:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint2.X21 = 0.0;
 80049b2:	4b27      	ldr	r3, [pc, #156]	; (8004a50 <main+0x510>)
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint2.kalman_pos = fcb_joint2.X11;
 80049bc:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <main+0x510>)
 80049be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049c2:	4a23      	ldr	r2, [pc, #140]	; (8004a50 <main+0x510>)
 80049c4:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint2.kalman_velo = 0.0;
 80049c8:	4b21      	ldr	r3, [pc, #132]	; (8004a50 <main+0x510>)
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint2.Goal_Position = fcb_joint2.Encoder;
 80049d2:	4b1f      	ldr	r3, [pc, #124]	; (8004a50 <main+0x510>)
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <main+0x510>)
 80049d8:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint3.X11 = fcb_joint3.Encoder;
 80049da:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <main+0x51c>)
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <main+0x51c>)
 80049e0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint3.X21 = 0.0;
 80049e4:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <main+0x51c>)
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint3.kalman_pos = fcb_joint3.X11;
 80049ee:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <main+0x51c>)
 80049f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049f4:	4a19      	ldr	r2, [pc, #100]	; (8004a5c <main+0x51c>)
 80049f6:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint3.kalman_velo = 0.0;
 80049fa:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <main+0x51c>)
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint3.Goal_Position = fcb_joint3.Encoder;
 8004a04:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <main+0x51c>)
 8004a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a08:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <main+0x51c>)
 8004a0a:	6493      	str	r3, [r2, #72]	; 0x48
//		HAL_TIM_Base_Start_IT(&htim5); // Jog 		100 Hz
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz
		HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
 8004a0c:	481f      	ldr	r0, [pc, #124]	; (8004a8c <main+0x54c>)
 8004a0e:	f008 f8c9 	bl	800cba4 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);	// Joint State 50Hz
 8004a12:	481f      	ldr	r0, [pc, #124]	; (8004a90 <main+0x550>)
 8004a14:	f008 f8c6 	bl	800cba4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 while (1)
 8004a18:	e7fe      	b.n	8004a18 <main+0x4d8>
 8004a1a:	bf00      	nop
 8004a1c:	f3af 8000 	nop.w
 8004a20:	645a1cac 	.word	0x645a1cac
 8004a24:	4004df3b 	.word	0x4004df3b
 8004a28:	240004e8 	.word	0x240004e8
 8004a2c:	c4480000 	.word	0xc4480000
 8004a30:	00000000 	.word	0x00000000
 8004a34:	24000ab8 	.word	0x24000ab8
 8004a38:	24000b2b 	.word	0x24000b2b
 8004a3c:	24000450 	.word	0x24000450
 8004a40:	24000ad4 	.word	0x24000ad4
 8004a44:	24000560 	.word	0x24000560
 8004a48:	2400046c 	.word	0x2400046c
 8004a4c:	24000ad5 	.word	0x24000ad5
 8004a50:	24000644 	.word	0x24000644
 8004a54:	24000488 	.word	0x24000488
 8004a58:	24000ad6 	.word	0x24000ad6
 8004a5c:	24000728 	.word	0x24000728
 8004a60:	240004a4 	.word	0x240004a4
 8004a64:	24000ad7 	.word	0x24000ad7
 8004a68:	2400080c 	.word	0x2400080c
 8004a6c:	331ac86b 	.word	0x331ac86b
 8004a70:	33e9d3b8 	.word	0x33e9d3b8
 8004a74:	33e9d3bd 	.word	0x33e9d3bd
 8004a78:	3531278c 	.word	0x3531278c
 8004a7c:	3a83126f 	.word	0x3a83126f
 8004a80:	34a10fb0 	.word	0x34a10fb0
 8004a84:	37fba882 	.word	0x37fba882
 8004a88:	358637bd 	.word	0x358637bd
 8004a8c:	24000fd8 	.word	0x24000fd8
 8004a90:	24001024 	.word	0x24001024

08004a94 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b09c      	sub	sp, #112	; 0x70
 8004a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a9e:	224c      	movs	r2, #76	; 0x4c
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f00d f814 	bl	8011ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004aa8:	1d3b      	adds	r3, r7, #4
 8004aaa:	2220      	movs	r2, #32
 8004aac:	2100      	movs	r1, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f00d f80e 	bl	8011ad0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004ab4:	2002      	movs	r0, #2
 8004ab6:	f005 fba1 	bl	800a1fc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004aba:	2300      	movs	r3, #0
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	4b38      	ldr	r3, [pc, #224]	; (8004ba0 <_Z18SystemClock_Configv+0x10c>)
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	4a37      	ldr	r2, [pc, #220]	; (8004ba0 <_Z18SystemClock_Configv+0x10c>)
 8004ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac8:	6193      	str	r3, [r2, #24]
 8004aca:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <_Z18SystemClock_Configv+0x10c>)
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4b33      	ldr	r3, [pc, #204]	; (8004ba4 <_Z18SystemClock_Configv+0x110>)
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	4a32      	ldr	r2, [pc, #200]	; (8004ba4 <_Z18SystemClock_Configv+0x110>)
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ae0:	4b30      	ldr	r3, [pc, #192]	; (8004ba4 <_Z18SystemClock_Configv+0x110>)
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004aec:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <_Z18SystemClock_Configv+0x10c>)
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af8:	bf14      	ite	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	2300      	moveq	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d000      	beq.n	8004b06 <_Z18SystemClock_Configv+0x72>
 8004b04:	e7f2      	b.n	8004aec <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b06:	2302      	movs	r3, #2
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b0e:	2340      	movs	r3, #64	; 0x40
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b12:	2302      	movs	r3, #2
 8004b14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b16:	2300      	movs	r3, #0
 8004b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004b1a:	2304      	movs	r3, #4
 8004b1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004b1e:	233c      	movs	r3, #60	; 0x3c
 8004b20:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004b22:	2302      	movs	r3, #2
 8004b24:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8004b26:	2306      	movs	r3, #6
 8004b28:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004b2e:	230c      	movs	r3, #12
 8004b30:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004b32:	2300      	movs	r3, #0
 8004b34:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f005 fb96 	bl	800a270 <HAL_RCC_OscConfig>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bf14      	ite	ne
 8004b4a:	2301      	movne	r3, #1
 8004b4c:	2300      	moveq	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8004b54:	f000 f856 	bl	8004c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b58:	233f      	movs	r3, #63	; 0x3f
 8004b5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004b64:	2308      	movs	r3, #8
 8004b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004b68:	2340      	movs	r3, #64	; 0x40
 8004b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004b6c:	2340      	movs	r3, #64	; 0x40
 8004b6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b74:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004b76:	2340      	movs	r3, #64	; 0x40
 8004b78:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004b7a:	1d3b      	adds	r3, r7, #4
 8004b7c:	2104      	movs	r1, #4
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f005 ffa4 	bl	800aacc <HAL_RCC_ClockConfig>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf14      	ite	ne
 8004b8a:	2301      	movne	r3, #1
 8004b8c:	2300      	moveq	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8004b94:	f000 f836 	bl	8004c04 <Error_Handler>
  }
}
 8004b98:	bf00      	nop
 8004b9a:	3770      	adds	r7, #112	; 0x70
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	58024800 	.word	0x58024800
 8004ba4:	58000400 	.word	0x58000400

08004ba8 <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//
//}
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LM_Z_BOTTOM_Pin){	// Limit Switch Bottom Z-axis
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb8:	d102      	bne.n	8004bc0 <HAL_GPIO_EXTI_Callback+0x18>
		Limit_sw_Z_Bot = true;
 8004bba:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_Z_TOP_Pin){	// Limit Switch Top Z-axis
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc6:	d102      	bne.n	8004bce <HAL_GPIO_EXTI_Callback+0x26>
		Limit_sw_Z_Top = true;
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_GPIO_EXTI_Callback+0x50>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_SERVO_Pin){	// Limit Switch Servo
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	2b80      	cmp	r3, #128	; 0x80
 8004bd2:	d102      	bne.n	8004bda <HAL_GPIO_EXTI_Callback+0x32>
		Limit_sw_Gripper = true;
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_GPIO_EXTI_Callback+0x54>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == LM_LED_Pin){	// Limit Switch LED on Cabinet
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d102      	bne.n	8004be6 <HAL_GPIO_EXTI_Callback+0x3e>
		Limit_sw_Emergancy = true;
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <HAL_GPIO_EXTI_Callback+0x58>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
	}


}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	24000b2a 	.word	0x24000b2a
 8004bf8:	24000b2b 	.word	0x24000b2b
 8004bfc:	24000b2c 	.word	0x24000b2c
 8004c00:	24000b2d 	.word	0x24000b2d

08004c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	4808      	ldr	r0, [pc, #32]	; (8004c30 <Error_Handler+0x2c>)
 8004c0e:	f005 fac1 	bl	800a194 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004c12:	2200      	movs	r2, #0
 8004c14:	2102      	movs	r1, #2
 8004c16:	4807      	ldr	r0, [pc, #28]	; (8004c34 <Error_Handler+0x30>)
 8004c18:	f005 fabc 	bl	800a194 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c22:	4803      	ldr	r0, [pc, #12]	; (8004c30 <Error_Handler+0x2c>)
 8004c24:	f005 fab6 	bl	800a194 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c28:	b672      	cpsid	i
}
 8004c2a:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8004c2c:	e7fe      	b.n	8004c2c <Error_Handler+0x28>
 8004c2e:	bf00      	nop
 8004c30:	58020400 	.word	0x58020400
 8004c34:	58021000 	.word	0x58021000

08004c38 <_Z41__static_initialization_and_destruction_0ii>:
}
  /* USER CODE END Error_Handler_Debug */
}
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d152      	bne.n	8004cee <_Z41__static_initialization_and_destruction_0ii+0xb6>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d14d      	bne.n	8004cee <_Z41__static_initialization_and_destruction_0ii+0xb6>
AMT21 encoderJ1(&huart4, 0xD4);
 8004c52:	22d4      	movs	r2, #212	; 0xd4
 8004c54:	4942      	ldr	r1, [pc, #264]	; (8004d60 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004c56:	4843      	ldr	r0, [pc, #268]	; (8004d64 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004c58:	f7fb fd1c 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 8004c5c:	22b4      	movs	r2, #180	; 0xb4
 8004c5e:	4940      	ldr	r1, [pc, #256]	; (8004d60 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004c60:	4841      	ldr	r0, [pc, #260]	; (8004d68 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8004c62:	f7fb fd17 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8004c66:	22c4      	movs	r2, #196	; 0xc4
 8004c68:	493d      	ldr	r1, [pc, #244]	; (8004d60 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004c6a:	4840      	ldr	r0, [pc, #256]	; (8004d6c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8004c6c:	f7fb fd12 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 8004c70:	22a4      	movs	r2, #164	; 0xa4
 8004c72:	493b      	ldr	r1, [pc, #236]	; (8004d60 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004c74:	483e      	ldr	r0, [pc, #248]	; (8004d70 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004c76:	f7fb fd0d 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004c7a:	2320      	movs	r3, #32
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	4b3d      	ldr	r3, [pc, #244]	; (8004d74 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	493d      	ldr	r1, [pc, #244]	; (8004d78 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004c84:	483d      	ldr	r0, [pc, #244]	; (8004d7c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004c86:	f7fd f80d 	bl	8001ca4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004c8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	4b3b      	ldr	r3, [pc, #236]	; (8004d80 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004c92:	2204      	movs	r2, #4
 8004c94:	493b      	ldr	r1, [pc, #236]	; (8004d84 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004c96:	483c      	ldr	r0, [pc, #240]	; (8004d88 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004c98:	f7fd f804 	bl	8001ca4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	4b37      	ldr	r3, [pc, #220]	; (8004d80 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	4939      	ldr	r1, [pc, #228]	; (8004d8c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004ca8:	4839      	ldr	r0, [pc, #228]	; (8004d90 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004caa:	f7fc fffb 	bl	8001ca4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004cae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	4b2f      	ldr	r3, [pc, #188]	; (8004d74 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004cb6:	2208      	movs	r2, #8
 8004cb8:	4936      	ldr	r1, [pc, #216]	; (8004d94 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004cba:	4837      	ldr	r0, [pc, #220]	; (8004d98 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004cbc:	f7fc fff2 	bl	8001ca4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8004cc0:	4836      	ldr	r0, [pc, #216]	; (8004d9c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004cc2:	f7fb fe4d 	bl	8000960 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8004cc6:	4836      	ldr	r0, [pc, #216]	; (8004da0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004cc8:	f7fb fe4a 	bl	8000960 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8004ccc:	4835      	ldr	r0, [pc, #212]	; (8004da4 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004cce:	f7fb fe47 	bl	8000960 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8004cd2:	4835      	ldr	r0, [pc, #212]	; (8004da8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004cd4:	f7fb fe44 	bl	8000960 <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8004cd8:	4834      	ldr	r0, [pc, #208]	; (8004dac <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004cda:	f7fb fe41 	bl	8000960 <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 8004cde:	4834      	ldr	r0, [pc, #208]	; (8004db0 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004ce0:	f7fb fe3e 	bl	8000960 <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	4933      	ldr	r1, [pc, #204]	; (8004db4 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004ce8:	4833      	ldr	r0, [pc, #204]	; (8004db8 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004cea:	f7fc fd51 	bl	8001790 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d131      	bne.n	8004d58 <_Z41__static_initialization_and_destruction_0ii+0x120>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d12c      	bne.n	8004d58 <_Z41__static_initialization_and_destruction_0ii+0x120>
 8004cfe:	482e      	ldr	r0, [pc, #184]	; (8004db8 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004d00:	f7fc fd76 	bl	80017f0 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 8004d04:	482a      	ldr	r0, [pc, #168]	; (8004db0 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004d06:	f7fb fe99 	bl	8000a3c <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 8004d0a:	4828      	ldr	r0, [pc, #160]	; (8004dac <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004d0c:	f7fb fe96 	bl	8000a3c <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 8004d10:	4825      	ldr	r0, [pc, #148]	; (8004da8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004d12:	f7fb fe93 	bl	8000a3c <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8004d16:	4823      	ldr	r0, [pc, #140]	; (8004da4 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004d18:	f7fb fe90 	bl	8000a3c <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 8004d1c:	4820      	ldr	r0, [pc, #128]	; (8004da0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004d1e:	f7fb fe8d 	bl	8000a3c <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 8004d22:	481e      	ldr	r0, [pc, #120]	; (8004d9c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004d24:	f7fb fe8a 	bl	8000a3c <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004d28:	481b      	ldr	r0, [pc, #108]	; (8004d98 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004d2a:	f7fc fffd 	bl	8001d28 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004d2e:	4818      	ldr	r0, [pc, #96]	; (8004d90 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004d30:	f7fc fffa 	bl	8001d28 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004d34:	4814      	ldr	r0, [pc, #80]	; (8004d88 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004d36:	f7fc fff7 	bl	8001d28 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004d3a:	4810      	ldr	r0, [pc, #64]	; (8004d7c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004d3c:	f7fc fff4 	bl	8001d28 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 8004d40:	480b      	ldr	r0, [pc, #44]	; (8004d70 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004d42:	f7fb fcbb 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8004d46:	4809      	ldr	r0, [pc, #36]	; (8004d6c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8004d48:	f7fb fcb8 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 8004d4c:	4806      	ldr	r0, [pc, #24]	; (8004d68 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8004d4e:	f7fb fcb5 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8004d52:	4804      	ldr	r0, [pc, #16]	; (8004d64 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004d54:	f7fb fcb2 	bl	80006bc <_ZN5AMT21D1Ev>
}
 8004d58:	bf00      	nop
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	24001070 	.word	0x24001070
 8004d64:	24000450 	.word	0x24000450
 8004d68:	2400046c 	.word	0x2400046c
 8004d6c:	24000488 	.word	0x24000488
 8004d70:	240004a4 	.word	0x240004a4
 8004d74:	58020400 	.word	0x58020400
 8004d78:	24000d2c 	.word	0x24000d2c
 8004d7c:	240004c0 	.word	0x240004c0
 8004d80:	58021000 	.word	0x58021000
 8004d84:	24000c94 	.word	0x24000c94
 8004d88:	240004e8 	.word	0x240004e8
 8004d8c:	24000f8c 	.word	0x24000f8c
 8004d90:	24000510 	.word	0x24000510
 8004d94:	24000ce0 	.word	0x24000ce0
 8004d98:	24000538 	.word	0x24000538
 8004d9c:	24000560 	.word	0x24000560
 8004da0:	24000644 	.word	0x24000644
 8004da4:	24000728 	.word	0x24000728
 8004da8:	2400080c 	.word	0x2400080c
 8004dac:	240008f0 	.word	0x240008f0
 8004db0:	240009d4 	.word	0x240009d4
 8004db4:	24000d78 	.word	0x24000d78
 8004db8:	24000ab8 	.word	0x24000ab8

08004dbc <_GLOBAL__sub_I_TIM_MS>:
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	f7ff ff37 	bl	8004c38 <_Z41__static_initialization_and_destruction_0ii>
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <_GLOBAL__sub_D_TIM_MS>:
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	f7ff ff2f 	bl	8004c38 <_Z41__static_initialization_and_destruction_0ii>
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004de0:	4b27      	ldr	r3, [pc, #156]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004de2:	4a28      	ldr	r2, [pc, #160]	; (8004e84 <MX_SPI3_Init+0xa8>)
 8004de4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004de6:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004de8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004dec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004dee:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004df4:	4b22      	ldr	r3, [pc, #136]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004df6:	2203      	movs	r2, #3
 8004df8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dfa:	4b21      	ldr	r3, [pc, #132]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e00:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004e06:	4b1e      	ldr	r3, [pc, #120]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004e0c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e0e:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e14:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e1a:	4b19      	ldr	r3, [pc, #100]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e20:	4b17      	ldr	r3, [pc, #92]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004e26:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004e2c:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e32:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004e34:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004e3a:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004e40:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004e46:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004e52:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004e5e:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004e6a:	4805      	ldr	r0, [pc, #20]	; (8004e80 <MX_SPI3_Init+0xa4>)
 8004e6c:	f007 fd22 	bl	800c8b4 <HAL_SPI_Init>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8004e76:	f7ff fec5 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	24000c08 	.word	0x24000c08
 8004e84:	40003c00 	.word	0x40003c00

08004e88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b0b8      	sub	sp, #224	; 0xe0
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	605a      	str	r2, [r3, #4]
 8004e9a:	609a      	str	r2, [r3, #8]
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ea0:	f107 0310 	add.w	r3, r7, #16
 8004ea4:	22bc      	movs	r2, #188	; 0xbc
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f00c fe11 	bl	8011ad0 <memset>
  if(spiHandle->Instance==SPI3)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a25      	ldr	r2, [pc, #148]	; (8004f48 <HAL_SPI_MspInit+0xc0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d142      	bne.n	8004f3e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ebc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ec2:	f107 0310 	add.w	r3, r7, #16
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f006 f98c 	bl	800b1e4 <HAL_RCCEx_PeriphCLKConfig>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8004ed2:	f7ff fe97 	bl	8004c04 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	; (8004f4c <HAL_SPI_MspInit+0xc4>)
 8004ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004edc:	4a1b      	ldr	r2, [pc, #108]	; (8004f4c <HAL_SPI_MspInit+0xc4>)
 8004ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ee6:	4b19      	ldr	r3, [pc, #100]	; (8004f4c <HAL_SPI_MspInit+0xc4>)
 8004ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ef4:	4b15      	ldr	r3, [pc, #84]	; (8004f4c <HAL_SPI_MspInit+0xc4>)
 8004ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004efa:	4a14      	ldr	r2, [pc, #80]	; (8004f4c <HAL_SPI_MspInit+0xc4>)
 8004efc:	f043 0304 	orr.w	r3, r3, #4
 8004f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f04:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <HAL_SPI_MspInit+0xc4>)
 8004f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004f12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004f16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f26:	2300      	movs	r3, #0
 8004f28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004f2c:	2306      	movs	r3, #6
 8004f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004f36:	4619      	mov	r1, r3
 8004f38:	4805      	ldr	r0, [pc, #20]	; (8004f50 <HAL_SPI_MspInit+0xc8>)
 8004f3a:	f004 ff7b 	bl	8009e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004f3e:	bf00      	nop
 8004f40:	37e0      	adds	r7, #224	; 0xe0
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40003c00 	.word	0x40003c00
 8004f4c:	58024400 	.word	0x58024400
 8004f50:	58020800 	.word	0x58020800

08004f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <HAL_MspInit+0x30>)
 8004f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f60:	4a08      	ldr	r2, [pc, #32]	; (8004f84 <HAL_MspInit+0x30>)
 8004f62:	f043 0302 	orr.w	r3, r3, #2
 8004f66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <HAL_MspInit+0x30>)
 8004f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	607b      	str	r3, [r7, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	58024400 	.word	0x58024400

08004f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f8c:	e7fe      	b.n	8004f8c <NMI_Handler+0x4>

08004f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f92:	e7fe      	b.n	8004f92 <HardFault_Handler+0x4>

08004f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f98:	e7fe      	b.n	8004f98 <MemManage_Handler+0x4>

08004f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f9e:	e7fe      	b.n	8004f9e <BusFault_Handler+0x4>

08004fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fa4:	e7fe      	b.n	8004fa4 <UsageFault_Handler+0x4>

08004fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004faa:	bf00      	nop
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fb8:	bf00      	nop
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fc6:	bf00      	nop
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fd4:	f001 fd88 	bl	8006ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8004fd8:	f001 fee5 	bl	8006da6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004fdc:	bf00      	nop
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8004fe4:	4802      	ldr	r0, [pc, #8]	; (8004ff0 <DMA1_Stream0_IRQHandler+0x10>)
 8004fe6:	f003 fc13 	bl	8008810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004fea:	bf00      	nop
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	240013a0 	.word	0x240013a0

08004ff4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004ff8:	4802      	ldr	r0, [pc, #8]	; (8005004 <DMA1_Stream1_IRQHandler+0x10>)
 8004ffa:	f003 fc09 	bl	8008810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004ffe:	bf00      	nop
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	24001508 	.word	0x24001508

08005008 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800500c:	4802      	ldr	r0, [pc, #8]	; (8005018 <DMA1_Stream2_IRQHandler+0x10>)
 800500e:	f003 fbff 	bl	8008810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	24001580 	.word	0x24001580

0800501c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005020:	4802      	ldr	r0, [pc, #8]	; (800502c <DMA1_Stream3_IRQHandler+0x10>)
 8005022:	f003 fbf5 	bl	8008810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	240012b0 	.word	0x240012b0

08005030 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005034:	4802      	ldr	r0, [pc, #8]	; (8005040 <DMA1_Stream4_IRQHandler+0x10>)
 8005036:	f003 fbeb 	bl	8008810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800503a:	bf00      	nop
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	24001328 	.word	0x24001328

08005044 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005048:	4802      	ldr	r0, [pc, #8]	; (8005054 <DMA1_Stream5_IRQHandler+0x10>)
 800504a:	f003 fbe1 	bl	8008810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	24001418 	.word	0x24001418

08005058 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800505c:	4802      	ldr	r0, [pc, #8]	; (8005068 <DMA1_Stream6_IRQHandler+0x10>)
 800505e:	f003 fbd7 	bl	8008810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	24001490 	.word	0x24001490

0800506c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8005070:	2040      	movs	r0, #64	; 0x40
 8005072:	f005 f8a8 	bl	800a1c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 8005076:	2080      	movs	r0, #128	; 0x80
 8005078:	f005 f8a5 	bl	800a1c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800507c:	bf00      	nop
 800507e:	bd80      	pop	{r7, pc}

08005080 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005084:	4802      	ldr	r0, [pc, #8]	; (8005090 <USART2_IRQHandler+0x10>)
 8005086:	f009 faa1 	bl	800e5cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	24001190 	.word	0x24001190

08005094 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005098:	4802      	ldr	r0, [pc, #8]	; (80050a4 <USART3_IRQHandler+0x10>)
 800509a:	f009 fa97 	bl	800e5cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800509e:	bf00      	nop
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	24001220 	.word	0x24001220

080050a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 80050ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80050b0:	f005 f889 	bl	800a1c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 80050b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80050b8:	f005 f885 	bl	800a1c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 80050bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80050c0:	f005 f881 	bl	800a1c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 80050c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80050c8:	f005 f87d 	bl	800a1c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80050cc:	bf00      	nop
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80050d4:	4802      	ldr	r0, [pc, #8]	; (80050e0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80050d6:	f007 ff7b 	bl	800cfd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80050da:	bf00      	nop
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	24000ea8 	.word	0x24000ea8

080050e4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80050e8:	4802      	ldr	r0, [pc, #8]	; (80050f4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80050ea:	f007 ff71 	bl	800cfd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80050ee:	bf00      	nop
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	24000ef4 	.word	0x24000ef4

080050f8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80050fc:	4802      	ldr	r0, [pc, #8]	; (8005108 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80050fe:	f007 ff67 	bl	800cfd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005102:	bf00      	nop
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	24000f40 	.word	0x24000f40

0800510c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005110:	4802      	ldr	r0, [pc, #8]	; (800511c <TIM5_IRQHandler+0x10>)
 8005112:	f007 ff5d 	bl	800cfd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	24000dc4 	.word	0x24000dc4

08005120 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005124:	4802      	ldr	r0, [pc, #8]	; (8005130 <UART4_IRQHandler+0x10>)
 8005126:	f009 fa51 	bl	800e5cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	24001070 	.word	0x24001070

08005134 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005138:	4802      	ldr	r0, [pc, #8]	; (8005144 <TIM6_DAC_IRQHandler+0x10>)
 800513a:	f007 ff49 	bl	800cfd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	24000e10 	.word	0x24000e10

08005148 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800514c:	4802      	ldr	r0, [pc, #8]	; (8005158 <TIM7_IRQHandler+0x10>)
 800514e:	f007 ff3f 	bl	800cfd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	24000e5c 	.word	0x24000e5c

0800515c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005160:	4802      	ldr	r0, [pc, #8]	; (800516c <UART7_IRQHandler+0x10>)
 8005162:	f009 fa33 	bl	800e5cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005166:	bf00      	nop
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	24001100 	.word	0x24001100

08005170 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005174:	4802      	ldr	r0, [pc, #8]	; (8005180 <TIM16_IRQHandler+0x10>)
 8005176:	f007 ff2b 	bl	800cfd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800517a:	bf00      	nop
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	24000fd8 	.word	0x24000fd8

08005184 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005188:	4802      	ldr	r0, [pc, #8]	; (8005194 <TIM17_IRQHandler+0x10>)
 800518a:	f007 ff21 	bl	800cfd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	24001024 	.word	0x24001024

08005198 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
	return 1;
 800519c:	2301      	movs	r3, #1
}
 800519e:	4618      	mov	r0, r3
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <_kill>:

int _kill(int pid, int sig)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80051b2:	f00c fc63 	bl	8011a7c <__errno>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2216      	movs	r2, #22
 80051ba:	601a      	str	r2, [r3, #0]
	return -1;
 80051bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <_exit>:

void _exit (int status)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff ffe7 	bl	80051a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80051da:	e7fe      	b.n	80051da <_exit+0x12>

080051dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e00a      	b.n	8005204 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80051ee:	f3af 8000 	nop.w
 80051f2:	4601      	mov	r1, r0
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	60ba      	str	r2, [r7, #8]
 80051fa:	b2ca      	uxtb	r2, r1
 80051fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	3301      	adds	r3, #1
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	dbf0      	blt.n	80051ee <_read+0x12>
	}

return len;
 800520c:	687b      	ldr	r3, [r7, #4]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b086      	sub	sp, #24
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	e009      	b.n	800523c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	60ba      	str	r2, [r7, #8]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	3301      	adds	r3, #1
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	dbf1      	blt.n	8005228 <_write+0x12>
	}
	return len;
 8005244:	687b      	ldr	r3, [r7, #4]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <_close>:

int _close(int file)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
	return -1;
 8005256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005276:	605a      	str	r2, [r3, #4]
	return 0;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <_isatty>:

int _isatty(int file)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
	return 1;
 800528e:	2301      	movs	r3, #1
}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
	return 0;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052c0:	4a14      	ldr	r2, [pc, #80]	; (8005314 <_sbrk+0x5c>)
 80052c2:	4b15      	ldr	r3, [pc, #84]	; (8005318 <_sbrk+0x60>)
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052cc:	4b13      	ldr	r3, [pc, #76]	; (800531c <_sbrk+0x64>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d102      	bne.n	80052da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052d4:	4b11      	ldr	r3, [pc, #68]	; (800531c <_sbrk+0x64>)
 80052d6:	4a12      	ldr	r2, [pc, #72]	; (8005320 <_sbrk+0x68>)
 80052d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052da:	4b10      	ldr	r3, [pc, #64]	; (800531c <_sbrk+0x64>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4413      	add	r3, r2
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d207      	bcs.n	80052f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052e8:	f00c fbc8 	bl	8011a7c <__errno>
 80052ec:	4603      	mov	r3, r0
 80052ee:	220c      	movs	r2, #12
 80052f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052f6:	e009      	b.n	800530c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052f8:	4b08      	ldr	r3, [pc, #32]	; (800531c <_sbrk+0x64>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052fe:	4b07      	ldr	r3, [pc, #28]	; (800531c <_sbrk+0x64>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4413      	add	r3, r2
 8005306:	4a05      	ldr	r2, [pc, #20]	; (800531c <_sbrk+0x64>)
 8005308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800530a:	68fb      	ldr	r3, [r7, #12]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	24001c10 	.word	0x24001c10
 8005318:	00000400 	.word	0x00000400
 800531c:	24000c90 	.word	0x24000c90
 8005320:	24001610 	.word	0x24001610

08005324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005328:	4b39      	ldr	r3, [pc, #228]	; (8005410 <SystemInit+0xec>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532e:	4a38      	ldr	r2, [pc, #224]	; (8005410 <SystemInit+0xec>)
 8005330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005338:	4b36      	ldr	r3, [pc, #216]	; (8005414 <SystemInit+0xf0>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	2b06      	cmp	r3, #6
 8005342:	d807      	bhi.n	8005354 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005344:	4b33      	ldr	r3, [pc, #204]	; (8005414 <SystemInit+0xf0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f023 030f 	bic.w	r3, r3, #15
 800534c:	4a31      	ldr	r2, [pc, #196]	; (8005414 <SystemInit+0xf0>)
 800534e:	f043 0307 	orr.w	r3, r3, #7
 8005352:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005354:	4b30      	ldr	r3, [pc, #192]	; (8005418 <SystemInit+0xf4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a2f      	ldr	r2, [pc, #188]	; (8005418 <SystemInit+0xf4>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005360:	4b2d      	ldr	r3, [pc, #180]	; (8005418 <SystemInit+0xf4>)
 8005362:	2200      	movs	r2, #0
 8005364:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005366:	4b2c      	ldr	r3, [pc, #176]	; (8005418 <SystemInit+0xf4>)
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	492b      	ldr	r1, [pc, #172]	; (8005418 <SystemInit+0xf4>)
 800536c:	4b2b      	ldr	r3, [pc, #172]	; (800541c <SystemInit+0xf8>)
 800536e:	4013      	ands	r3, r2
 8005370:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005372:	4b28      	ldr	r3, [pc, #160]	; (8005414 <SystemInit+0xf0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800537e:	4b25      	ldr	r3, [pc, #148]	; (8005414 <SystemInit+0xf0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f023 030f 	bic.w	r3, r3, #15
 8005386:	4a23      	ldr	r2, [pc, #140]	; (8005414 <SystemInit+0xf0>)
 8005388:	f043 0307 	orr.w	r3, r3, #7
 800538c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800538e:	4b22      	ldr	r3, [pc, #136]	; (8005418 <SystemInit+0xf4>)
 8005390:	2200      	movs	r2, #0
 8005392:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005394:	4b20      	ldr	r3, [pc, #128]	; (8005418 <SystemInit+0xf4>)
 8005396:	2200      	movs	r2, #0
 8005398:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800539a:	4b1f      	ldr	r3, [pc, #124]	; (8005418 <SystemInit+0xf4>)
 800539c:	2200      	movs	r2, #0
 800539e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80053a0:	4b1d      	ldr	r3, [pc, #116]	; (8005418 <SystemInit+0xf4>)
 80053a2:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <SystemInit+0xfc>)
 80053a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80053a6:	4b1c      	ldr	r3, [pc, #112]	; (8005418 <SystemInit+0xf4>)
 80053a8:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <SystemInit+0x100>)
 80053aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80053ac:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <SystemInit+0xf4>)
 80053ae:	4a1e      	ldr	r2, [pc, #120]	; (8005428 <SystemInit+0x104>)
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80053b2:	4b19      	ldr	r3, [pc, #100]	; (8005418 <SystemInit+0xf4>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80053b8:	4b17      	ldr	r3, [pc, #92]	; (8005418 <SystemInit+0xf4>)
 80053ba:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <SystemInit+0x104>)
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80053be:	4b16      	ldr	r3, [pc, #88]	; (8005418 <SystemInit+0xf4>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80053c4:	4b14      	ldr	r3, [pc, #80]	; (8005418 <SystemInit+0xf4>)
 80053c6:	4a18      	ldr	r2, [pc, #96]	; (8005428 <SystemInit+0x104>)
 80053c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80053ca:	4b13      	ldr	r3, [pc, #76]	; (8005418 <SystemInit+0xf4>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80053d0:	4b11      	ldr	r3, [pc, #68]	; (8005418 <SystemInit+0xf4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a10      	ldr	r2, [pc, #64]	; (8005418 <SystemInit+0xf4>)
 80053d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80053dc:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <SystemInit+0xf4>)
 80053de:	2200      	movs	r2, #0
 80053e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80053e2:	4b12      	ldr	r3, [pc, #72]	; (800542c <SystemInit+0x108>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	4b12      	ldr	r3, [pc, #72]	; (8005430 <SystemInit+0x10c>)
 80053e8:	4013      	ands	r3, r2
 80053ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ee:	d202      	bcs.n	80053f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80053f0:	4b10      	ldr	r3, [pc, #64]	; (8005434 <SystemInit+0x110>)
 80053f2:	2201      	movs	r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80053f6:	4b10      	ldr	r3, [pc, #64]	; (8005438 <SystemInit+0x114>)
 80053f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80053fc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80053fe:	4b04      	ldr	r3, [pc, #16]	; (8005410 <SystemInit+0xec>)
 8005400:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005404:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005406:	bf00      	nop
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	e000ed00 	.word	0xe000ed00
 8005414:	52002000 	.word	0x52002000
 8005418:	58024400 	.word	0x58024400
 800541c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005420:	02020200 	.word	0x02020200
 8005424:	01ff0000 	.word	0x01ff0000
 8005428:	01010280 	.word	0x01010280
 800542c:	5c001000 	.word	0x5c001000
 8005430:	ffff0000 	.word	0xffff0000
 8005434:	51008108 	.word	0x51008108
 8005438:	52004000 	.word	0x52004000

0800543c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b09a      	sub	sp, #104	; 0x68
 8005440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005442:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	605a      	str	r2, [r3, #4]
 800544c:	609a      	str	r2, [r3, #8]
 800544e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005450:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	605a      	str	r2, [r3, #4]
 800545a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800545c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	609a      	str	r2, [r3, #8]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	611a      	str	r2, [r3, #16]
 800546c:	615a      	str	r2, [r3, #20]
 800546e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005470:	1d3b      	adds	r3, r7, #4
 8005472:	222c      	movs	r2, #44	; 0x2c
 8005474:	2100      	movs	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f00c fb2a 	bl	8011ad0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800547c:	4b44      	ldr	r3, [pc, #272]	; (8005590 <MX_TIM1_Init+0x154>)
 800547e:	4a45      	ldr	r2, [pc, #276]	; (8005594 <MX_TIM1_Init+0x158>)
 8005480:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8005482:	4b43      	ldr	r3, [pc, #268]	; (8005590 <MX_TIM1_Init+0x154>)
 8005484:	22c7      	movs	r2, #199	; 0xc7
 8005486:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005488:	4b41      	ldr	r3, [pc, #260]	; (8005590 <MX_TIM1_Init+0x154>)
 800548a:	2200      	movs	r2, #0
 800548c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800548e:	4b40      	ldr	r3, [pc, #256]	; (8005590 <MX_TIM1_Init+0x154>)
 8005490:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005494:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005496:	4b3e      	ldr	r3, [pc, #248]	; (8005590 <MX_TIM1_Init+0x154>)
 8005498:	2200      	movs	r2, #0
 800549a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800549c:	4b3c      	ldr	r3, [pc, #240]	; (8005590 <MX_TIM1_Init+0x154>)
 800549e:	2200      	movs	r2, #0
 80054a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80054a2:	4b3b      	ldr	r3, [pc, #236]	; (8005590 <MX_TIM1_Init+0x154>)
 80054a4:	2280      	movs	r2, #128	; 0x80
 80054a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80054a8:	4839      	ldr	r0, [pc, #228]	; (8005590 <MX_TIM1_Init+0x154>)
 80054aa:	f007 fb24 	bl	800caf6 <HAL_TIM_Base_Init>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80054b4:	f7ff fba6 	bl	8004c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054bc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80054be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80054c2:	4619      	mov	r1, r3
 80054c4:	4832      	ldr	r0, [pc, #200]	; (8005590 <MX_TIM1_Init+0x154>)
 80054c6:	f007 ffb7 	bl	800d438 <HAL_TIM_ConfigClockSource>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80054d0:	f7ff fb98 	bl	8004c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80054d4:	482e      	ldr	r0, [pc, #184]	; (8005590 <MX_TIM1_Init+0x154>)
 80054d6:	f007 fc0c 	bl	800ccf2 <HAL_TIM_PWM_Init>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80054e0:	f7ff fb90 	bl	8004c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054e4:	2300      	movs	r3, #0
 80054e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80054e8:	2300      	movs	r3, #0
 80054ea:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054ec:	2300      	movs	r3, #0
 80054ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80054f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80054f4:	4619      	mov	r1, r3
 80054f6:	4826      	ldr	r0, [pc, #152]	; (8005590 <MX_TIM1_Init+0x154>)
 80054f8:	f008 fcf2 	bl	800dee0 <HAL_TIMEx_MasterConfigSynchronization>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005502:	f7ff fb7f 	bl	8004c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005506:	2360      	movs	r3, #96	; 0x60
 8005508:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800550a:	f240 1339 	movw	r3, #313	; 0x139
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005510:	2300      	movs	r3, #0
 8005512:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005514:	2300      	movs	r3, #0
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005518:	2300      	movs	r3, #0
 800551a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800551c:	2300      	movs	r3, #0
 800551e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005520:	2300      	movs	r3, #0
 8005522:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005524:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005528:	2204      	movs	r2, #4
 800552a:	4619      	mov	r1, r3
 800552c:	4818      	ldr	r0, [pc, #96]	; (8005590 <MX_TIM1_Init+0x154>)
 800552e:	f007 fe6f 	bl	800d210 <HAL_TIM_PWM_ConfigChannel>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8005538:	f7ff fb64 	bl	8004c04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800553c:	2300      	movs	r3, #0
 800553e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005540:	2300      	movs	r3, #0
 8005542:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005554:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800555a:	2300      	movs	r3, #0
 800555c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800555e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005568:	2300      	movs	r3, #0
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	4619      	mov	r1, r3
 8005570:	4807      	ldr	r0, [pc, #28]	; (8005590 <MX_TIM1_Init+0x154>)
 8005572:	f008 fd43 	bl	800dffc <HAL_TIMEx_ConfigBreakDeadTime>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800557c:	f7ff fb42 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005580:	4803      	ldr	r0, [pc, #12]	; (8005590 <MX_TIM1_Init+0x154>)
 8005582:	f000 fd0f 	bl	8005fa4 <HAL_TIM_MspPostInit>

}
 8005586:	bf00      	nop
 8005588:	3768      	adds	r7, #104	; 0x68
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	24000c94 	.word	0x24000c94
 8005594:	40010000 	.word	0x40010000

08005598 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08e      	sub	sp, #56	; 0x38
 800559c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800559e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	605a      	str	r2, [r3, #4]
 80055a8:	609a      	str	r2, [r3, #8]
 80055aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055ac:	f107 031c 	add.w	r3, r7, #28
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055b8:	463b      	mov	r3, r7
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	609a      	str	r2, [r3, #8]
 80055c2:	60da      	str	r2, [r3, #12]
 80055c4:	611a      	str	r2, [r3, #16]
 80055c6:	615a      	str	r2, [r3, #20]
 80055c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80055ca:	4b2e      	ldr	r3, [pc, #184]	; (8005684 <MX_TIM2_Init+0xec>)
 80055cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 80055d2:	4b2c      	ldr	r3, [pc, #176]	; (8005684 <MX_TIM2_Init+0xec>)
 80055d4:	22c7      	movs	r2, #199	; 0xc7
 80055d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055d8:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <MX_TIM2_Init+0xec>)
 80055da:	2200      	movs	r2, #0
 80055dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 80055de:	4b29      	ldr	r3, [pc, #164]	; (8005684 <MX_TIM2_Init+0xec>)
 80055e0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80055e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055e6:	4b27      	ldr	r3, [pc, #156]	; (8005684 <MX_TIM2_Init+0xec>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055ec:	4b25      	ldr	r3, [pc, #148]	; (8005684 <MX_TIM2_Init+0xec>)
 80055ee:	2280      	movs	r2, #128	; 0x80
 80055f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80055f2:	4824      	ldr	r0, [pc, #144]	; (8005684 <MX_TIM2_Init+0xec>)
 80055f4:	f007 fa7f 	bl	800caf6 <HAL_TIM_Base_Init>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80055fe:	f7ff fb01 	bl	8004c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005608:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800560c:	4619      	mov	r1, r3
 800560e:	481d      	ldr	r0, [pc, #116]	; (8005684 <MX_TIM2_Init+0xec>)
 8005610:	f007 ff12 	bl	800d438 <HAL_TIM_ConfigClockSource>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800561a:	f7ff faf3 	bl	8004c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800561e:	4819      	ldr	r0, [pc, #100]	; (8005684 <MX_TIM2_Init+0xec>)
 8005620:	f007 fb67 	bl	800ccf2 <HAL_TIM_PWM_Init>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800562a:	f7ff faeb 	bl	8004c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005632:	2300      	movs	r3, #0
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005636:	f107 031c 	add.w	r3, r7, #28
 800563a:	4619      	mov	r1, r3
 800563c:	4811      	ldr	r0, [pc, #68]	; (8005684 <MX_TIM2_Init+0xec>)
 800563e:	f008 fc4f 	bl	800dee0 <HAL_TIMEx_MasterConfigSynchronization>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005648:	f7ff fadc 	bl	8004c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800564c:	2360      	movs	r3, #96	; 0x60
 800564e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8005650:	f240 1339 	movw	r3, #313	; 0x139
 8005654:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800565e:	463b      	mov	r3, r7
 8005660:	2208      	movs	r2, #8
 8005662:	4619      	mov	r1, r3
 8005664:	4807      	ldr	r0, [pc, #28]	; (8005684 <MX_TIM2_Init+0xec>)
 8005666:	f007 fdd3 	bl	800d210 <HAL_TIM_PWM_ConfigChannel>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8005670:	f7ff fac8 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005674:	4803      	ldr	r0, [pc, #12]	; (8005684 <MX_TIM2_Init+0xec>)
 8005676:	f000 fc95 	bl	8005fa4 <HAL_TIM_MspPostInit>

}
 800567a:	bf00      	nop
 800567c:	3738      	adds	r7, #56	; 0x38
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	24000ce0 	.word	0x24000ce0

08005688 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08e      	sub	sp, #56	; 0x38
 800568c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800568e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	605a      	str	r2, [r3, #4]
 8005698:	609a      	str	r2, [r3, #8]
 800569a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800569c:	f107 031c 	add.w	r3, r7, #28
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	605a      	str	r2, [r3, #4]
 80056a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056a8:	463b      	mov	r3, r7
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	605a      	str	r2, [r3, #4]
 80056b0:	609a      	str	r2, [r3, #8]
 80056b2:	60da      	str	r2, [r3, #12]
 80056b4:	611a      	str	r2, [r3, #16]
 80056b6:	615a      	str	r2, [r3, #20]
 80056b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80056ba:	4b2d      	ldr	r3, [pc, #180]	; (8005770 <MX_TIM3_Init+0xe8>)
 80056bc:	4a2d      	ldr	r2, [pc, #180]	; (8005774 <MX_TIM3_Init+0xec>)
 80056be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 80056c0:	4b2b      	ldr	r3, [pc, #172]	; (8005770 <MX_TIM3_Init+0xe8>)
 80056c2:	22c7      	movs	r2, #199	; 0xc7
 80056c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056c6:	4b2a      	ldr	r3, [pc, #168]	; (8005770 <MX_TIM3_Init+0xe8>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 80056cc:	4b28      	ldr	r3, [pc, #160]	; (8005770 <MX_TIM3_Init+0xe8>)
 80056ce:	f640 125f 	movw	r2, #2399	; 0x95f
 80056d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056d4:	4b26      	ldr	r3, [pc, #152]	; (8005770 <MX_TIM3_Init+0xe8>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80056da:	4b25      	ldr	r3, [pc, #148]	; (8005770 <MX_TIM3_Init+0xe8>)
 80056dc:	2280      	movs	r2, #128	; 0x80
 80056de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80056e0:	4823      	ldr	r0, [pc, #140]	; (8005770 <MX_TIM3_Init+0xe8>)
 80056e2:	f007 fa08 	bl	800caf6 <HAL_TIM_Base_Init>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80056ec:	f7ff fa8a 	bl	8004c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80056f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056fa:	4619      	mov	r1, r3
 80056fc:	481c      	ldr	r0, [pc, #112]	; (8005770 <MX_TIM3_Init+0xe8>)
 80056fe:	f007 fe9b 	bl	800d438 <HAL_TIM_ConfigClockSource>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005708:	f7ff fa7c 	bl	8004c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800570c:	4818      	ldr	r0, [pc, #96]	; (8005770 <MX_TIM3_Init+0xe8>)
 800570e:	f007 faf0 	bl	800ccf2 <HAL_TIM_PWM_Init>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005718:	f7ff fa74 	bl	8004c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800571c:	2300      	movs	r3, #0
 800571e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005720:	2300      	movs	r3, #0
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005724:	f107 031c 	add.w	r3, r7, #28
 8005728:	4619      	mov	r1, r3
 800572a:	4811      	ldr	r0, [pc, #68]	; (8005770 <MX_TIM3_Init+0xe8>)
 800572c:	f008 fbd8 	bl	800dee0 <HAL_TIMEx_MasterConfigSynchronization>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005736:	f7ff fa65 	bl	8004c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800573a:	2360      	movs	r3, #96	; 0x60
 800573c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005742:	2300      	movs	r3, #0
 8005744:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005746:	2300      	movs	r3, #0
 8005748:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800574a:	463b      	mov	r3, r7
 800574c:	2200      	movs	r2, #0
 800574e:	4619      	mov	r1, r3
 8005750:	4807      	ldr	r0, [pc, #28]	; (8005770 <MX_TIM3_Init+0xe8>)
 8005752:	f007 fd5d 	bl	800d210 <HAL_TIM_PWM_ConfigChannel>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800575c:	f7ff fa52 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005760:	4803      	ldr	r0, [pc, #12]	; (8005770 <MX_TIM3_Init+0xe8>)
 8005762:	f000 fc1f 	bl	8005fa4 <HAL_TIM_MspPostInit>

}
 8005766:	bf00      	nop
 8005768:	3738      	adds	r7, #56	; 0x38
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	24000d2c 	.word	0x24000d2c
 8005774:	40000400 	.word	0x40000400

08005778 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08e      	sub	sp, #56	; 0x38
 800577c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800577e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	605a      	str	r2, [r3, #4]
 8005788:	609a      	str	r2, [r3, #8]
 800578a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800578c:	f107 031c 	add.w	r3, r7, #28
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005798:	463b      	mov	r3, r7
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	605a      	str	r2, [r3, #4]
 80057a0:	609a      	str	r2, [r3, #8]
 80057a2:	60da      	str	r2, [r3, #12]
 80057a4:	611a      	str	r2, [r3, #16]
 80057a6:	615a      	str	r2, [r3, #20]
 80057a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80057aa:	4b2d      	ldr	r3, [pc, #180]	; (8005860 <MX_TIM4_Init+0xe8>)
 80057ac:	4a2d      	ldr	r2, [pc, #180]	; (8005864 <MX_TIM4_Init+0xec>)
 80057ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 80057b0:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <MX_TIM4_Init+0xe8>)
 80057b2:	22ef      	movs	r2, #239	; 0xef
 80057b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057b6:	4b2a      	ldr	r3, [pc, #168]	; (8005860 <MX_TIM4_Init+0xe8>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80057bc:	4b28      	ldr	r3, [pc, #160]	; (8005860 <MX_TIM4_Init+0xe8>)
 80057be:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80057c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057c4:	4b26      	ldr	r3, [pc, #152]	; (8005860 <MX_TIM4_Init+0xe8>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057ca:	4b25      	ldr	r3, [pc, #148]	; (8005860 <MX_TIM4_Init+0xe8>)
 80057cc:	2280      	movs	r2, #128	; 0x80
 80057ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80057d0:	4823      	ldr	r0, [pc, #140]	; (8005860 <MX_TIM4_Init+0xe8>)
 80057d2:	f007 f990 	bl	800caf6 <HAL_TIM_Base_Init>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80057dc:	f7ff fa12 	bl	8004c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80057e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ea:	4619      	mov	r1, r3
 80057ec:	481c      	ldr	r0, [pc, #112]	; (8005860 <MX_TIM4_Init+0xe8>)
 80057ee:	f007 fe23 	bl	800d438 <HAL_TIM_ConfigClockSource>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80057f8:	f7ff fa04 	bl	8004c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80057fc:	4818      	ldr	r0, [pc, #96]	; (8005860 <MX_TIM4_Init+0xe8>)
 80057fe:	f007 fa78 	bl	800ccf2 <HAL_TIM_PWM_Init>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005808:	f7ff f9fc 	bl	8004c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800580c:	2300      	movs	r3, #0
 800580e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005810:	2300      	movs	r3, #0
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005814:	f107 031c 	add.w	r3, r7, #28
 8005818:	4619      	mov	r1, r3
 800581a:	4811      	ldr	r0, [pc, #68]	; (8005860 <MX_TIM4_Init+0xe8>)
 800581c:	f008 fb60 	bl	800dee0 <HAL_TIMEx_MasterConfigSynchronization>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005826:	f7ff f9ed 	bl	8004c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800582a:	2360      	movs	r3, #96	; 0x60
 800582c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005832:	2300      	movs	r3, #0
 8005834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800583a:	463b      	mov	r3, r7
 800583c:	2208      	movs	r2, #8
 800583e:	4619      	mov	r1, r3
 8005840:	4807      	ldr	r0, [pc, #28]	; (8005860 <MX_TIM4_Init+0xe8>)
 8005842:	f007 fce5 	bl	800d210 <HAL_TIM_PWM_ConfigChannel>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800584c:	f7ff f9da 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005850:	4803      	ldr	r0, [pc, #12]	; (8005860 <MX_TIM4_Init+0xe8>)
 8005852:	f000 fba7 	bl	8005fa4 <HAL_TIM_MspPostInit>

}
 8005856:	bf00      	nop
 8005858:	3738      	adds	r7, #56	; 0x38
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	24000d78 	.word	0x24000d78
 8005864:	40000800 	.word	0x40000800

08005868 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800586e:	f107 0310 	add.w	r3, r7, #16
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	605a      	str	r2, [r3, #4]
 8005878:	609a      	str	r2, [r3, #8]
 800587a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800587c:	1d3b      	adds	r3, r7, #4
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]
 8005884:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005886:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <MX_TIM5_Init+0x94>)
 8005888:	4a1d      	ldr	r2, [pc, #116]	; (8005900 <MX_TIM5_Init+0x98>)
 800588a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 800588c:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <MX_TIM5_Init+0x94>)
 800588e:	22c7      	movs	r2, #199	; 0xc7
 8005890:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005892:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <MX_TIM5_Init+0x94>)
 8005894:	2200      	movs	r2, #0
 8005896:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8005898:	4b18      	ldr	r3, [pc, #96]	; (80058fc <MX_TIM5_Init+0x94>)
 800589a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800589e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058a0:	4b16      	ldr	r3, [pc, #88]	; (80058fc <MX_TIM5_Init+0x94>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058a6:	4b15      	ldr	r3, [pc, #84]	; (80058fc <MX_TIM5_Init+0x94>)
 80058a8:	2280      	movs	r2, #128	; 0x80
 80058aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80058ac:	4813      	ldr	r0, [pc, #76]	; (80058fc <MX_TIM5_Init+0x94>)
 80058ae:	f007 f922 	bl	800caf6 <HAL_TIM_Base_Init>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80058b8:	f7ff f9a4 	bl	8004c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80058c2:	f107 0310 	add.w	r3, r7, #16
 80058c6:	4619      	mov	r1, r3
 80058c8:	480c      	ldr	r0, [pc, #48]	; (80058fc <MX_TIM5_Init+0x94>)
 80058ca:	f007 fdb5 	bl	800d438 <HAL_TIM_ConfigClockSource>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80058d4:	f7ff f996 	bl	8004c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058d8:	2300      	movs	r3, #0
 80058da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80058e0:	1d3b      	adds	r3, r7, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4805      	ldr	r0, [pc, #20]	; (80058fc <MX_TIM5_Init+0x94>)
 80058e6:	f008 fafb 	bl	800dee0 <HAL_TIMEx_MasterConfigSynchronization>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80058f0:	f7ff f988 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80058f4:	bf00      	nop
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	24000dc4 	.word	0x24000dc4
 8005900:	40000c00 	.word	0x40000c00

08005904 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800590a:	1d3b      	adds	r3, r7, #4
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005914:	4b14      	ldr	r3, [pc, #80]	; (8005968 <MX_TIM6_Init+0x64>)
 8005916:	4a15      	ldr	r2, [pc, #84]	; (800596c <MX_TIM6_Init+0x68>)
 8005918:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 800591a:	4b13      	ldr	r3, [pc, #76]	; (8005968 <MX_TIM6_Init+0x64>)
 800591c:	22c7      	movs	r2, #199	; 0xc7
 800591e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005920:	4b11      	ldr	r3, [pc, #68]	; (8005968 <MX_TIM6_Init+0x64>)
 8005922:	2200      	movs	r2, #0
 8005924:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8005926:	4b10      	ldr	r3, [pc, #64]	; (8005968 <MX_TIM6_Init+0x64>)
 8005928:	f241 726f 	movw	r2, #5999	; 0x176f
 800592c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800592e:	4b0e      	ldr	r3, [pc, #56]	; (8005968 <MX_TIM6_Init+0x64>)
 8005930:	2280      	movs	r2, #128	; 0x80
 8005932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005934:	480c      	ldr	r0, [pc, #48]	; (8005968 <MX_TIM6_Init+0x64>)
 8005936:	f007 f8de 	bl	800caf6 <HAL_TIM_Base_Init>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005940:	f7ff f960 	bl	8004c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005944:	2300      	movs	r3, #0
 8005946:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800594c:	1d3b      	adds	r3, r7, #4
 800594e:	4619      	mov	r1, r3
 8005950:	4805      	ldr	r0, [pc, #20]	; (8005968 <MX_TIM6_Init+0x64>)
 8005952:	f008 fac5 	bl	800dee0 <HAL_TIMEx_MasterConfigSynchronization>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800595c:	f7ff f952 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	24000e10 	.word	0x24000e10
 800596c:	40001000 	.word	0x40001000

08005970 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005976:	1d3b      	adds	r3, r7, #4
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005980:	4b14      	ldr	r3, [pc, #80]	; (80059d4 <MX_TIM7_Init+0x64>)
 8005982:	4a15      	ldr	r2, [pc, #84]	; (80059d8 <MX_TIM7_Init+0x68>)
 8005984:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8005986:	4b13      	ldr	r3, [pc, #76]	; (80059d4 <MX_TIM7_Init+0x64>)
 8005988:	22c7      	movs	r2, #199	; 0xc7
 800598a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800598c:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <MX_TIM7_Init+0x64>)
 800598e:	2200      	movs	r2, #0
 8005990:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8005992:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <MX_TIM7_Init+0x64>)
 8005994:	f240 42af 	movw	r2, #1199	; 0x4af
 8005998:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800599a:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <MX_TIM7_Init+0x64>)
 800599c:	2280      	movs	r2, #128	; 0x80
 800599e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80059a0:	480c      	ldr	r0, [pc, #48]	; (80059d4 <MX_TIM7_Init+0x64>)
 80059a2:	f007 f8a8 	bl	800caf6 <HAL_TIM_Base_Init>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80059ac:	f7ff f92a 	bl	8004c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059b0:	2300      	movs	r3, #0
 80059b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	4619      	mov	r1, r3
 80059bc:	4805      	ldr	r0, [pc, #20]	; (80059d4 <MX_TIM7_Init+0x64>)
 80059be:	f008 fa8f 	bl	800dee0 <HAL_TIMEx_MasterConfigSynchronization>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80059c8:	f7ff f91c 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	24000e5c 	.word	0x24000e5c
 80059d8:	40001400 	.word	0x40001400

080059dc <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059e2:	463b      	mov	r3, r7
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	605a      	str	r2, [r3, #4]
 80059ea:	609a      	str	r2, [r3, #8]
 80059ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80059ee:	4b16      	ldr	r3, [pc, #88]	; (8005a48 <MX_TIM12_Init+0x6c>)
 80059f0:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <MX_TIM12_Init+0x70>)
 80059f2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 80059f4:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <MX_TIM12_Init+0x6c>)
 80059f6:	22c7      	movs	r2, #199	; 0xc7
 80059f8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059fa:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <MX_TIM12_Init+0x6c>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8005a00:	4b11      	ldr	r3, [pc, #68]	; (8005a48 <MX_TIM12_Init+0x6c>)
 8005a02:	f240 2257 	movw	r2, #599	; 0x257
 8005a06:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a08:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <MX_TIM12_Init+0x6c>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a0e:	4b0e      	ldr	r3, [pc, #56]	; (8005a48 <MX_TIM12_Init+0x6c>)
 8005a10:	2280      	movs	r2, #128	; 0x80
 8005a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005a14:	480c      	ldr	r0, [pc, #48]	; (8005a48 <MX_TIM12_Init+0x6c>)
 8005a16:	f007 f86e 	bl	800caf6 <HAL_TIM_Base_Init>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8005a20:	f7ff f8f0 	bl	8004c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a28:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4806      	ldr	r0, [pc, #24]	; (8005a48 <MX_TIM12_Init+0x6c>)
 8005a30:	f007 fd02 	bl	800d438 <HAL_TIM_ConfigClockSource>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8005a3a:	f7ff f8e3 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8005a3e:	bf00      	nop
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	24000ea8 	.word	0x24000ea8
 8005a4c:	40001800 	.word	0x40001800

08005a50 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005a54:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <MX_TIM13_Init+0x40>)
 8005a56:	4a0f      	ldr	r2, [pc, #60]	; (8005a94 <MX_TIM13_Init+0x44>)
 8005a58:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <MX_TIM13_Init+0x40>)
 8005a5c:	22c7      	movs	r2, #199	; 0xc7
 8005a5e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a60:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <MX_TIM13_Init+0x40>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8005a66:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <MX_TIM13_Init+0x40>)
 8005a68:	f240 2257 	movw	r2, #599	; 0x257
 8005a6c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a6e:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <MX_TIM13_Init+0x40>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a74:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <MX_TIM13_Init+0x40>)
 8005a76:	2280      	movs	r2, #128	; 0x80
 8005a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005a7a:	4805      	ldr	r0, [pc, #20]	; (8005a90 <MX_TIM13_Init+0x40>)
 8005a7c:	f007 f83b 	bl	800caf6 <HAL_TIM_Base_Init>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005a86:	f7ff f8bd 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	24000ef4 	.word	0x24000ef4
 8005a94:	40001c00 	.word	0x40001c00

08005a98 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005a9c:	4b0e      	ldr	r3, [pc, #56]	; (8005ad8 <MX_TIM14_Init+0x40>)
 8005a9e:	4a0f      	ldr	r2, [pc, #60]	; (8005adc <MX_TIM14_Init+0x44>)
 8005aa0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <MX_TIM14_Init+0x40>)
 8005aa4:	22c7      	movs	r2, #199	; 0xc7
 8005aa6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <MX_TIM14_Init+0x40>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8005aae:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <MX_TIM14_Init+0x40>)
 8005ab0:	f640 125f 	movw	r2, #2399	; 0x95f
 8005ab4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ab6:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <MX_TIM14_Init+0x40>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005abc:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <MX_TIM14_Init+0x40>)
 8005abe:	2280      	movs	r2, #128	; 0x80
 8005ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005ac2:	4805      	ldr	r0, [pc, #20]	; (8005ad8 <MX_TIM14_Init+0x40>)
 8005ac4:	f007 f817 	bl	800caf6 <HAL_TIM_Base_Init>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8005ace:	f7ff f899 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005ad2:	bf00      	nop
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	24000f40 	.word	0x24000f40
 8005adc:	40002000 	.word	0x40002000

08005ae0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b09a      	sub	sp, #104	; 0x68
 8005ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ae6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	605a      	str	r2, [r3, #4]
 8005af0:	609a      	str	r2, [r3, #8]
 8005af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005af4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	605a      	str	r2, [r3, #4]
 8005afe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	605a      	str	r2, [r3, #4]
 8005b0a:	609a      	str	r2, [r3, #8]
 8005b0c:	60da      	str	r2, [r3, #12]
 8005b0e:	611a      	str	r2, [r3, #16]
 8005b10:	615a      	str	r2, [r3, #20]
 8005b12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005b14:	1d3b      	adds	r3, r7, #4
 8005b16:	222c      	movs	r2, #44	; 0x2c
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f00b ffd8 	bl	8011ad0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005b20:	4b3f      	ldr	r3, [pc, #252]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005b22:	4a40      	ldr	r2, [pc, #256]	; (8005c24 <MX_TIM15_Init+0x144>)
 8005b24:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8005b26:	4b3e      	ldr	r3, [pc, #248]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005b28:	22ef      	movs	r2, #239	; 0xef
 8005b2a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b2c:	4b3c      	ldr	r3, [pc, #240]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8005b32:	4b3b      	ldr	r3, [pc, #236]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005b34:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005b38:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b3a:	4b39      	ldr	r3, [pc, #228]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005b40:	4b37      	ldr	r3, [pc, #220]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b46:	4b36      	ldr	r3, [pc, #216]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005b48:	2280      	movs	r2, #128	; 0x80
 8005b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005b4c:	4834      	ldr	r0, [pc, #208]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005b4e:	f006 ffd2 	bl	800caf6 <HAL_TIM_Base_Init>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8005b58:	f7ff f854 	bl	8004c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b60:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005b62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b66:	4619      	mov	r1, r3
 8005b68:	482d      	ldr	r0, [pc, #180]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005b6a:	f007 fc65 	bl	800d438 <HAL_TIM_ConfigClockSource>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8005b74:	f7ff f846 	bl	8004c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005b78:	4829      	ldr	r0, [pc, #164]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005b7a:	f007 f8ba 	bl	800ccf2 <HAL_TIM_PWM_Init>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8005b84:	f7ff f83e 	bl	8004c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005b90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b94:	4619      	mov	r1, r3
 8005b96:	4822      	ldr	r0, [pc, #136]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005b98:	f008 f9a2 	bl	800dee0 <HAL_TIMEx_MasterConfigSynchronization>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8005ba2:	f7ff f82f 	bl	8004c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ba6:	2360      	movs	r3, #96	; 0x60
 8005ba8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8005baa:	f240 1339 	movw	r3, #313	; 0x139
 8005bae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005bc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bc8:	2204      	movs	r2, #4
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4814      	ldr	r0, [pc, #80]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005bce:	f007 fb1f 	bl	800d210 <HAL_TIM_PWM_ConfigChannel>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8005bd8:	f7ff f814 	bl	8004c04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bf4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005bfe:	1d3b      	adds	r3, r7, #4
 8005c00:	4619      	mov	r1, r3
 8005c02:	4807      	ldr	r0, [pc, #28]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005c04:	f008 f9fa 	bl	800dffc <HAL_TIMEx_ConfigBreakDeadTime>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8005c0e:	f7fe fff9 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8005c12:	4803      	ldr	r0, [pc, #12]	; (8005c20 <MX_TIM15_Init+0x140>)
 8005c14:	f000 f9c6 	bl	8005fa4 <HAL_TIM_MspPostInit>

}
 8005c18:	bf00      	nop
 8005c1a:	3768      	adds	r7, #104	; 0x68
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	24000f8c 	.word	0x24000f8c
 8005c24:	40014000 	.word	0x40014000

08005c28 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005c2c:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <MX_TIM16_Init+0x44>)
 8005c2e:	4a10      	ldr	r2, [pc, #64]	; (8005c70 <MX_TIM16_Init+0x48>)
 8005c30:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 8005c32:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <MX_TIM16_Init+0x44>)
 8005c34:	22ef      	movs	r2, #239	; 0xef
 8005c36:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c38:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <MX_TIM16_Init+0x44>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <MX_TIM16_Init+0x44>)
 8005c40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c44:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c46:	4b09      	ldr	r3, [pc, #36]	; (8005c6c <MX_TIM16_Init+0x44>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005c4c:	4b07      	ldr	r3, [pc, #28]	; (8005c6c <MX_TIM16_Init+0x44>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c52:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <MX_TIM16_Init+0x44>)
 8005c54:	2280      	movs	r2, #128	; 0x80
 8005c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005c58:	4804      	ldr	r0, [pc, #16]	; (8005c6c <MX_TIM16_Init+0x44>)
 8005c5a:	f006 ff4c 	bl	800caf6 <HAL_TIM_Base_Init>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005c64:	f7fe ffce 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005c68:	bf00      	nop
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	24000fd8 	.word	0x24000fd8
 8005c70:	40014400 	.word	0x40014400

08005c74 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005c78:	4b0f      	ldr	r3, [pc, #60]	; (8005cb8 <MX_TIM17_Init+0x44>)
 8005c7a:	4a10      	ldr	r2, [pc, #64]	; (8005cbc <MX_TIM17_Init+0x48>)
 8005c7c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 240-1;
 8005c7e:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <MX_TIM17_Init+0x44>)
 8005c80:	22ef      	movs	r2, #239	; 0xef
 8005c82:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c84:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <MX_TIM17_Init+0x44>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 8005c8a:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <MX_TIM17_Init+0x44>)
 8005c8c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005c90:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c92:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <MX_TIM17_Init+0x44>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005c98:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <MX_TIM17_Init+0x44>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c9e:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <MX_TIM17_Init+0x44>)
 8005ca0:	2280      	movs	r2, #128	; 0x80
 8005ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005ca4:	4804      	ldr	r0, [pc, #16]	; (8005cb8 <MX_TIM17_Init+0x44>)
 8005ca6:	f006 ff26 	bl	800caf6 <HAL_TIM_Base_Init>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8005cb0:	f7fe ffa8 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8005cb4:	bf00      	nop
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	24001024 	.word	0x24001024
 8005cbc:	40014800 	.word	0x40014800

08005cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b090      	sub	sp, #64	; 0x40
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4aa8      	ldr	r2, [pc, #672]	; (8005f70 <HAL_TIM_Base_MspInit+0x2b0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d10f      	bne.n	8005cf2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005cd2:	4ba8      	ldr	r3, [pc, #672]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cd8:	4aa6      	ldr	r2, [pc, #664]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005ce2:	4ba4      	ldr	r3, [pc, #656]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8005cf0:	e13a      	b.n	8005f68 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM2)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfa:	d10f      	bne.n	8005d1c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005cfc:	4b9d      	ldr	r3, [pc, #628]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005cfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d02:	4a9c      	ldr	r2, [pc, #624]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005d04:	f043 0301 	orr.w	r3, r3, #1
 8005d08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d0c:	4b99      	ldr	r3, [pc, #612]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d1a:	e125      	b.n	8005f68 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a95      	ldr	r2, [pc, #596]	; (8005f78 <HAL_TIM_Base_MspInit+0x2b8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d10f      	bne.n	8005d46 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d26:	4b93      	ldr	r3, [pc, #588]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d2c:	4a91      	ldr	r2, [pc, #580]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005d2e:	f043 0302 	orr.w	r3, r3, #2
 8005d32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d36:	4b8f      	ldr	r3, [pc, #572]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
 8005d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d44:	e110      	b.n	8005f68 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM4)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a8c      	ldr	r2, [pc, #560]	; (8005f7c <HAL_TIM_Base_MspInit+0x2bc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d10f      	bne.n	8005d70 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d50:	4b88      	ldr	r3, [pc, #544]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005d52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d56:	4a87      	ldr	r2, [pc, #540]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005d58:	f043 0304 	orr.w	r3, r3, #4
 8005d5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d60:	4b84      	ldr	r3, [pc, #528]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005d62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005d6e:	e0fb      	b.n	8005f68 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM5)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a82      	ldr	r2, [pc, #520]	; (8005f80 <HAL_TIM_Base_MspInit+0x2c0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d117      	bne.n	8005daa <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005d7a:	4b7e      	ldr	r3, [pc, #504]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d80:	4a7c      	ldr	r2, [pc, #496]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005d82:	f043 0308 	orr.w	r3, r3, #8
 8005d86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d8a:	4b7a      	ldr	r3, [pc, #488]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	2032      	movs	r0, #50	; 0x32
 8005d9e:	f000 ffce 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005da2:	2032      	movs	r0, #50	; 0x32
 8005da4:	f000 ffe5 	bl	8006d72 <HAL_NVIC_EnableIRQ>
}
 8005da8:	e0de      	b.n	8005f68 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM6)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a75      	ldr	r2, [pc, #468]	; (8005f84 <HAL_TIM_Base_MspInit+0x2c4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d117      	bne.n	8005de4 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005db4:	4b6f      	ldr	r3, [pc, #444]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005dba:	4a6e      	ldr	r2, [pc, #440]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005dbc:	f043 0310 	orr.w	r3, r3, #16
 8005dc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005dc4:	4b6b      	ldr	r3, [pc, #428]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	2036      	movs	r0, #54	; 0x36
 8005dd8:	f000 ffb1 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005ddc:	2036      	movs	r0, #54	; 0x36
 8005dde:	f000 ffc8 	bl	8006d72 <HAL_NVIC_EnableIRQ>
}
 8005de2:	e0c1      	b.n	8005f68 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM7)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a67      	ldr	r2, [pc, #412]	; (8005f88 <HAL_TIM_Base_MspInit+0x2c8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d117      	bne.n	8005e1e <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005dee:	4b61      	ldr	r3, [pc, #388]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005df4:	4a5f      	ldr	r2, [pc, #380]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005df6:	f043 0320 	orr.w	r3, r3, #32
 8005dfa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005dfe:	4b5d      	ldr	r3, [pc, #372]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2100      	movs	r1, #0
 8005e10:	2037      	movs	r0, #55	; 0x37
 8005e12:	f000 ff94 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005e16:	2037      	movs	r0, #55	; 0x37
 8005e18:	f000 ffab 	bl	8006d72 <HAL_NVIC_EnableIRQ>
}
 8005e1c:	e0a4      	b.n	8005f68 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM12)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a5a      	ldr	r2, [pc, #360]	; (8005f8c <HAL_TIM_Base_MspInit+0x2cc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d117      	bne.n	8005e58 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005e28:	4b52      	ldr	r3, [pc, #328]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e2e:	4a51      	ldr	r2, [pc, #324]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e38:	4b4e      	ldr	r3, [pc, #312]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	623b      	str	r3, [r7, #32]
 8005e44:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005e46:	2200      	movs	r2, #0
 8005e48:	2100      	movs	r1, #0
 8005e4a:	202b      	movs	r0, #43	; 0x2b
 8005e4c:	f000 ff77 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005e50:	202b      	movs	r0, #43	; 0x2b
 8005e52:	f000 ff8e 	bl	8006d72 <HAL_NVIC_EnableIRQ>
}
 8005e56:	e087      	b.n	8005f68 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM13)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a4c      	ldr	r2, [pc, #304]	; (8005f90 <HAL_TIM_Base_MspInit+0x2d0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d117      	bne.n	8005e92 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005e62:	4b44      	ldr	r3, [pc, #272]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e68:	4a42      	ldr	r2, [pc, #264]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e72:	4b40      	ldr	r3, [pc, #256]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7c:	61fb      	str	r3, [r7, #28]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005e80:	2200      	movs	r2, #0
 8005e82:	2100      	movs	r1, #0
 8005e84:	202c      	movs	r0, #44	; 0x2c
 8005e86:	f000 ff5a 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005e8a:	202c      	movs	r0, #44	; 0x2c
 8005e8c:	f000 ff71 	bl	8006d72 <HAL_NVIC_EnableIRQ>
}
 8005e90:	e06a      	b.n	8005f68 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM14)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a3f      	ldr	r2, [pc, #252]	; (8005f94 <HAL_TIM_Base_MspInit+0x2d4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d117      	bne.n	8005ecc <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005e9c:	4b35      	ldr	r3, [pc, #212]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ea2:	4a34      	ldr	r2, [pc, #208]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005eac:	4b31      	ldr	r3, [pc, #196]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	202d      	movs	r0, #45	; 0x2d
 8005ec0:	f000 ff3d 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005ec4:	202d      	movs	r0, #45	; 0x2d
 8005ec6:	f000 ff54 	bl	8006d72 <HAL_NVIC_EnableIRQ>
}
 8005eca:	e04d      	b.n	8005f68 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM15)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a31      	ldr	r2, [pc, #196]	; (8005f98 <HAL_TIM_Base_MspInit+0x2d8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d10f      	bne.n	8005ef6 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005ed6:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005edc:	4a25      	ldr	r2, [pc, #148]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005ee6:	4b23      	ldr	r3, [pc, #140]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	697b      	ldr	r3, [r7, #20]
}
 8005ef4:	e038      	b.n	8005f68 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM16)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a28      	ldr	r2, [pc, #160]	; (8005f9c <HAL_TIM_Base_MspInit+0x2dc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d117      	bne.n	8005f30 <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005f00:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f06:	4a1b      	ldr	r2, [pc, #108]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005f10:	4b18      	ldr	r3, [pc, #96]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2100      	movs	r1, #0
 8005f22:	2075      	movs	r0, #117	; 0x75
 8005f24:	f000 ff0b 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005f28:	2075      	movs	r0, #117	; 0x75
 8005f2a:	f000 ff22 	bl	8006d72 <HAL_NVIC_EnableIRQ>
}
 8005f2e:	e01b      	b.n	8005f68 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM17)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1a      	ldr	r2, [pc, #104]	; (8005fa0 <HAL_TIM_Base_MspInit+0x2e0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d116      	bne.n	8005f68 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005f3a:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f40:	4a0c      	ldr	r2, [pc, #48]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005f42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <HAL_TIM_Base_MspInit+0x2b4>)
 8005f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	2076      	movs	r0, #118	; 0x76
 8005f5e:	f000 feee 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005f62:	2076      	movs	r0, #118	; 0x76
 8005f64:	f000 ff05 	bl	8006d72 <HAL_NVIC_EnableIRQ>
}
 8005f68:	bf00      	nop
 8005f6a:	3740      	adds	r7, #64	; 0x40
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	40010000 	.word	0x40010000
 8005f74:	58024400 	.word	0x58024400
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40001000 	.word	0x40001000
 8005f88:	40001400 	.word	0x40001400
 8005f8c:	40001800 	.word	0x40001800
 8005f90:	40001c00 	.word	0x40001c00
 8005f94:	40002000 	.word	0x40002000
 8005f98:	40014000 	.word	0x40014000
 8005f9c:	40014400 	.word	0x40014400
 8005fa0:	40014800 	.word	0x40014800

08005fa4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08c      	sub	sp, #48	; 0x30
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fac:	f107 031c 	add.w	r3, r7, #28
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	605a      	str	r2, [r3, #4]
 8005fb6:	609a      	str	r2, [r3, #8]
 8005fb8:	60da      	str	r2, [r3, #12]
 8005fba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a5e      	ldr	r2, [pc, #376]	; (800613c <HAL_TIM_MspPostInit+0x198>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d120      	bne.n	8006008 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005fc6:	4b5e      	ldr	r3, [pc, #376]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 8005fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fcc:	4a5c      	ldr	r2, [pc, #368]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 8005fce:	f043 0310 	orr.w	r3, r3, #16
 8005fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005fd6:	4b5a      	ldr	r3, [pc, #360]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 8005fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8005fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fea:	2302      	movs	r3, #2
 8005fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8005ffa:	f107 031c 	add.w	r3, r7, #28
 8005ffe:	4619      	mov	r1, r3
 8006000:	4850      	ldr	r0, [pc, #320]	; (8006144 <HAL_TIM_MspPostInit+0x1a0>)
 8006002:	f003 ff17 	bl	8009e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8006006:	e094      	b.n	8006132 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006010:	d120      	bne.n	8006054 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006012:	4b4b      	ldr	r3, [pc, #300]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 8006014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006018:	4a49      	ldr	r2, [pc, #292]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 800601a:	f043 0302 	orr.w	r3, r3, #2
 800601e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006022:	4b47      	ldr	r3, [pc, #284]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 8006024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8006030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006036:	2302      	movs	r3, #2
 8006038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800603a:	2300      	movs	r3, #0
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800603e:	2300      	movs	r3, #0
 8006040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006042:	2301      	movs	r3, #1
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8006046:	f107 031c 	add.w	r3, r7, #28
 800604a:	4619      	mov	r1, r3
 800604c:	483e      	ldr	r0, [pc, #248]	; (8006148 <HAL_TIM_MspPostInit+0x1a4>)
 800604e:	f003 fef1 	bl	8009e34 <HAL_GPIO_Init>
}
 8006052:	e06e      	b.n	8006132 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a3c      	ldr	r2, [pc, #240]	; (800614c <HAL_TIM_MspPostInit+0x1a8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d11f      	bne.n	800609e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800605e:	4b38      	ldr	r3, [pc, #224]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 8006060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006064:	4a36      	ldr	r2, [pc, #216]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 8006066:	f043 0301 	orr.w	r3, r3, #1
 800606a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800606e:	4b34      	ldr	r3, [pc, #208]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 8006070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	613b      	str	r3, [r7, #16]
 800607a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 800607c:	2340      	movs	r3, #64	; 0x40
 800607e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006080:	2302      	movs	r3, #2
 8006082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006084:	2300      	movs	r3, #0
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006088:	2300      	movs	r3, #0
 800608a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800608c:	2302      	movs	r3, #2
 800608e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8006090:	f107 031c 	add.w	r3, r7, #28
 8006094:	4619      	mov	r1, r3
 8006096:	482e      	ldr	r0, [pc, #184]	; (8006150 <HAL_TIM_MspPostInit+0x1ac>)
 8006098:	f003 fecc 	bl	8009e34 <HAL_GPIO_Init>
}
 800609c:	e049      	b.n	8006132 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a2c      	ldr	r2, [pc, #176]	; (8006154 <HAL_TIM_MspPostInit+0x1b0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d120      	bne.n	80060ea <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060a8:	4b25      	ldr	r3, [pc, #148]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 80060aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060ae:	4a24      	ldr	r2, [pc, #144]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 80060b0:	f043 0302 	orr.w	r3, r3, #2
 80060b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060b8:	4b21      	ldr	r3, [pc, #132]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 80060ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 80060c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060cc:	2302      	movs	r3, #2
 80060ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060d4:	2300      	movs	r3, #0
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80060d8:	2302      	movs	r3, #2
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80060dc:	f107 031c 	add.w	r3, r7, #28
 80060e0:	4619      	mov	r1, r3
 80060e2:	4819      	ldr	r0, [pc, #100]	; (8006148 <HAL_TIM_MspPostInit+0x1a4>)
 80060e4:	f003 fea6 	bl	8009e34 <HAL_GPIO_Init>
}
 80060e8:	e023      	b.n	8006132 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a1a      	ldr	r2, [pc, #104]	; (8006158 <HAL_TIM_MspPostInit+0x1b4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d11e      	bne.n	8006132 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80060f4:	4b12      	ldr	r3, [pc, #72]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 80060f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060fa:	4a11      	ldr	r2, [pc, #68]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 80060fc:	f043 0310 	orr.w	r3, r3, #16
 8006100:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006104:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <HAL_TIM_MspPostInit+0x19c>)
 8006106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800610a:	f003 0310 	and.w	r3, r3, #16
 800610e:	60bb      	str	r3, [r7, #8]
 8006110:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8006112:	2340      	movs	r3, #64	; 0x40
 8006114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006116:	2302      	movs	r3, #2
 8006118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800611a:	2300      	movs	r3, #0
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800611e:	2300      	movs	r3, #0
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006122:	2304      	movs	r3, #4
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8006126:	f107 031c 	add.w	r3, r7, #28
 800612a:	4619      	mov	r1, r3
 800612c:	4805      	ldr	r0, [pc, #20]	; (8006144 <HAL_TIM_MspPostInit+0x1a0>)
 800612e:	f003 fe81 	bl	8009e34 <HAL_GPIO_Init>
}
 8006132:	bf00      	nop
 8006134:	3730      	adds	r7, #48	; 0x30
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40010000 	.word	0x40010000
 8006140:	58024400 	.word	0x58024400
 8006144:	58021000 	.word	0x58021000
 8006148:	58020400 	.word	0x58020400
 800614c:	40000400 	.word	0x40000400
 8006150:	58020000 	.word	0x58020000
 8006154:	40000800 	.word	0x40000800
 8006158:	40014000 	.word	0x40014000

0800615c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8006160:	4b25      	ldr	r3, [pc, #148]	; (80061f8 <MX_UART4_Init+0x9c>)
 8006162:	4a26      	ldr	r2, [pc, #152]	; (80061fc <MX_UART4_Init+0xa0>)
 8006164:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8006166:	4b24      	ldr	r3, [pc, #144]	; (80061f8 <MX_UART4_Init+0x9c>)
 8006168:	4a25      	ldr	r2, [pc, #148]	; (8006200 <MX_UART4_Init+0xa4>)
 800616a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800616c:	4b22      	ldr	r3, [pc, #136]	; (80061f8 <MX_UART4_Init+0x9c>)
 800616e:	2200      	movs	r2, #0
 8006170:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006172:	4b21      	ldr	r3, [pc, #132]	; (80061f8 <MX_UART4_Init+0x9c>)
 8006174:	2200      	movs	r2, #0
 8006176:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006178:	4b1f      	ldr	r3, [pc, #124]	; (80061f8 <MX_UART4_Init+0x9c>)
 800617a:	2200      	movs	r2, #0
 800617c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800617e:	4b1e      	ldr	r3, [pc, #120]	; (80061f8 <MX_UART4_Init+0x9c>)
 8006180:	220c      	movs	r2, #12
 8006182:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006184:	4b1c      	ldr	r3, [pc, #112]	; (80061f8 <MX_UART4_Init+0x9c>)
 8006186:	2200      	movs	r2, #0
 8006188:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800618a:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <MX_UART4_Init+0x9c>)
 800618c:	2200      	movs	r2, #0
 800618e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006190:	4b19      	ldr	r3, [pc, #100]	; (80061f8 <MX_UART4_Init+0x9c>)
 8006192:	2200      	movs	r2, #0
 8006194:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006196:	4b18      	ldr	r3, [pc, #96]	; (80061f8 <MX_UART4_Init+0x9c>)
 8006198:	2200      	movs	r2, #0
 800619a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800619c:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <MX_UART4_Init+0x9c>)
 800619e:	2208      	movs	r2, #8
 80061a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80061a2:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <MX_UART4_Init+0x9c>)
 80061a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80061aa:	4813      	ldr	r0, [pc, #76]	; (80061f8 <MX_UART4_Init+0x9c>)
 80061ac:	f007 ffc2 	bl	800e134 <HAL_UART_Init>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 80061b6:	f7fe fd25 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80061ba:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80061be:	480e      	ldr	r0, [pc, #56]	; (80061f8 <MX_UART4_Init+0x9c>)
 80061c0:	f00a f85b 	bl	801027a <HAL_UARTEx_SetTxFifoThreshold>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <MX_UART4_Init+0x72>
  {
    Error_Handler();
 80061ca:	f7fe fd1b 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80061ce:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80061d2:	4809      	ldr	r0, [pc, #36]	; (80061f8 <MX_UART4_Init+0x9c>)
 80061d4:	f00a f88f 	bl	80102f6 <HAL_UARTEx_SetRxFifoThreshold>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 80061de:	f7fe fd11 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80061e2:	4805      	ldr	r0, [pc, #20]	; (80061f8 <MX_UART4_Init+0x9c>)
 80061e4:	f009 ffd5 	bl	8010192 <HAL_UARTEx_EnableFifoMode>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 80061ee:	f7fe fd09 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80061f2:	bf00      	nop
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	24001070 	.word	0x24001070
 80061fc:	40004c00 	.word	0x40004c00
 8006200:	001e8480 	.word	0x001e8480

08006204 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006208:	4b23      	ldr	r3, [pc, #140]	; (8006298 <MX_UART7_Init+0x94>)
 800620a:	4a24      	ldr	r2, [pc, #144]	; (800629c <MX_UART7_Init+0x98>)
 800620c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800620e:	4b22      	ldr	r3, [pc, #136]	; (8006298 <MX_UART7_Init+0x94>)
 8006210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006214:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8006216:	4b20      	ldr	r3, [pc, #128]	; (8006298 <MX_UART7_Init+0x94>)
 8006218:	2200      	movs	r2, #0
 800621a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800621c:	4b1e      	ldr	r3, [pc, #120]	; (8006298 <MX_UART7_Init+0x94>)
 800621e:	2200      	movs	r2, #0
 8006220:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8006222:	4b1d      	ldr	r3, [pc, #116]	; (8006298 <MX_UART7_Init+0x94>)
 8006224:	2200      	movs	r2, #0
 8006226:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006228:	4b1b      	ldr	r3, [pc, #108]	; (8006298 <MX_UART7_Init+0x94>)
 800622a:	220c      	movs	r2, #12
 800622c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800622e:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <MX_UART7_Init+0x94>)
 8006230:	2200      	movs	r2, #0
 8006232:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8006234:	4b18      	ldr	r3, [pc, #96]	; (8006298 <MX_UART7_Init+0x94>)
 8006236:	2200      	movs	r2, #0
 8006238:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800623a:	4b17      	ldr	r3, [pc, #92]	; (8006298 <MX_UART7_Init+0x94>)
 800623c:	2200      	movs	r2, #0
 800623e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006240:	4b15      	ldr	r3, [pc, #84]	; (8006298 <MX_UART7_Init+0x94>)
 8006242:	2200      	movs	r2, #0
 8006244:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006246:	4b14      	ldr	r3, [pc, #80]	; (8006298 <MX_UART7_Init+0x94>)
 8006248:	2200      	movs	r2, #0
 800624a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800624c:	4812      	ldr	r0, [pc, #72]	; (8006298 <MX_UART7_Init+0x94>)
 800624e:	f007 ff71 	bl	800e134 <HAL_UART_Init>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8006258:	f7fe fcd4 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800625c:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8006260:	480d      	ldr	r0, [pc, #52]	; (8006298 <MX_UART7_Init+0x94>)
 8006262:	f00a f80a 	bl	801027a <HAL_UARTEx_SetTxFifoThreshold>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 800626c:	f7fe fcca 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8006270:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8006274:	4808      	ldr	r0, [pc, #32]	; (8006298 <MX_UART7_Init+0x94>)
 8006276:	f00a f83e 	bl	80102f6 <HAL_UARTEx_SetRxFifoThreshold>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8006280:	f7fe fcc0 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8006284:	4804      	ldr	r0, [pc, #16]	; (8006298 <MX_UART7_Init+0x94>)
 8006286:	f009 ff84 	bl	8010192 <HAL_UARTEx_EnableFifoMode>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8006290:	f7fe fcb8 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8006294:	bf00      	nop
 8006296:	bd80      	pop	{r7, pc}
 8006298:	24001100 	.word	0x24001100
 800629c:	40007800 	.word	0x40007800

080062a0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80062a4:	4b22      	ldr	r3, [pc, #136]	; (8006330 <MX_USART2_UART_Init+0x90>)
 80062a6:	4a23      	ldr	r2, [pc, #140]	; (8006334 <MX_USART2_UART_Init+0x94>)
 80062a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80062aa:	4b21      	ldr	r3, [pc, #132]	; (8006330 <MX_USART2_UART_Init+0x90>)
 80062ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80062b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80062b2:	4b1f      	ldr	r3, [pc, #124]	; (8006330 <MX_USART2_UART_Init+0x90>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80062b8:	4b1d      	ldr	r3, [pc, #116]	; (8006330 <MX_USART2_UART_Init+0x90>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80062be:	4b1c      	ldr	r3, [pc, #112]	; (8006330 <MX_USART2_UART_Init+0x90>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80062c4:	4b1a      	ldr	r3, [pc, #104]	; (8006330 <MX_USART2_UART_Init+0x90>)
 80062c6:	220c      	movs	r2, #12
 80062c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062ca:	4b19      	ldr	r3, [pc, #100]	; (8006330 <MX_USART2_UART_Init+0x90>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80062d0:	4b17      	ldr	r3, [pc, #92]	; (8006330 <MX_USART2_UART_Init+0x90>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80062d6:	4b16      	ldr	r3, [pc, #88]	; (8006330 <MX_USART2_UART_Init+0x90>)
 80062d8:	2200      	movs	r2, #0
 80062da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80062dc:	4b14      	ldr	r3, [pc, #80]	; (8006330 <MX_USART2_UART_Init+0x90>)
 80062de:	2200      	movs	r2, #0
 80062e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80062e2:	4b13      	ldr	r3, [pc, #76]	; (8006330 <MX_USART2_UART_Init+0x90>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80062e8:	4811      	ldr	r0, [pc, #68]	; (8006330 <MX_USART2_UART_Init+0x90>)
 80062ea:	f007 ff23 	bl	800e134 <HAL_UART_Init>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80062f4:	f7fe fc86 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062f8:	2100      	movs	r1, #0
 80062fa:	480d      	ldr	r0, [pc, #52]	; (8006330 <MX_USART2_UART_Init+0x90>)
 80062fc:	f009 ffbd 	bl	801027a <HAL_UARTEx_SetTxFifoThreshold>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006306:	f7fe fc7d 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800630a:	2100      	movs	r1, #0
 800630c:	4808      	ldr	r0, [pc, #32]	; (8006330 <MX_USART2_UART_Init+0x90>)
 800630e:	f009 fff2 	bl	80102f6 <HAL_UARTEx_SetRxFifoThreshold>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006318:	f7fe fc74 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800631c:	4804      	ldr	r0, [pc, #16]	; (8006330 <MX_USART2_UART_Init+0x90>)
 800631e:	f009 ff73 	bl	8010208 <HAL_UARTEx_DisableFifoMode>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006328:	f7fe fc6c 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800632c:	bf00      	nop
 800632e:	bd80      	pop	{r7, pc}
 8006330:	24001190 	.word	0x24001190
 8006334:	40004400 	.word	0x40004400

08006338 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800633c:	4b22      	ldr	r3, [pc, #136]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 800633e:	4a23      	ldr	r2, [pc, #140]	; (80063cc <MX_USART3_UART_Init+0x94>)
 8006340:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006342:	4b21      	ldr	r3, [pc, #132]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 8006344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006348:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800634a:	4b1f      	ldr	r3, [pc, #124]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 800634c:	2200      	movs	r2, #0
 800634e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006350:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 8006352:	2200      	movs	r2, #0
 8006354:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006356:	4b1c      	ldr	r3, [pc, #112]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 8006358:	2200      	movs	r2, #0
 800635a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800635c:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 800635e:	220c      	movs	r2, #12
 8006360:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006362:	4b19      	ldr	r3, [pc, #100]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 8006364:	2200      	movs	r2, #0
 8006366:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006368:	4b17      	ldr	r3, [pc, #92]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 800636a:	2200      	movs	r2, #0
 800636c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800636e:	4b16      	ldr	r3, [pc, #88]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 8006370:	2200      	movs	r2, #0
 8006372:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006374:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 8006376:	2200      	movs	r2, #0
 8006378:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800637a:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 800637c:	2200      	movs	r2, #0
 800637e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006380:	4811      	ldr	r0, [pc, #68]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 8006382:	f007 fed7 	bl	800e134 <HAL_UART_Init>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800638c:	f7fe fc3a 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006390:	2100      	movs	r1, #0
 8006392:	480d      	ldr	r0, [pc, #52]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 8006394:	f009 ff71 	bl	801027a <HAL_UARTEx_SetTxFifoThreshold>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800639e:	f7fe fc31 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80063a2:	2100      	movs	r1, #0
 80063a4:	4808      	ldr	r0, [pc, #32]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 80063a6:	f009 ffa6 	bl	80102f6 <HAL_UARTEx_SetRxFifoThreshold>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80063b0:	f7fe fc28 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80063b4:	4804      	ldr	r0, [pc, #16]	; (80063c8 <MX_USART3_UART_Init+0x90>)
 80063b6:	f009 ff27 	bl	8010208 <HAL_UARTEx_DisableFifoMode>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80063c0:	f7fe fc20 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80063c4:	bf00      	nop
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	24001220 	.word	0x24001220
 80063cc:	40004800 	.word	0x40004800

080063d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b0be      	sub	sp, #248	; 0xf8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	609a      	str	r2, [r3, #8]
 80063e4:	60da      	str	r2, [r3, #12]
 80063e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80063e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063ec:	22bc      	movs	r2, #188	; 0xbc
 80063ee:	2100      	movs	r1, #0
 80063f0:	4618      	mov	r0, r3
 80063f2:	f00b fb6d 	bl	8011ad0 <memset>
  if(uartHandle->Instance==UART4)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4aa1      	ldr	r2, [pc, #644]	; (8006680 <HAL_UART_MspInit+0x2b0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	f040 80b7 	bne.w	8006570 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006402:	2302      	movs	r3, #2
 8006404:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006406:	2300      	movs	r3, #0
 8006408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800640c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006410:	4618      	mov	r0, r3
 8006412:	f004 fee7 	bl	800b1e4 <HAL_RCCEx_PeriphCLKConfig>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800641c:	f7fe fbf2 	bl	8004c04 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006420:	4b98      	ldr	r3, [pc, #608]	; (8006684 <HAL_UART_MspInit+0x2b4>)
 8006422:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006426:	4a97      	ldr	r2, [pc, #604]	; (8006684 <HAL_UART_MspInit+0x2b4>)
 8006428:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800642c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006430:	4b94      	ldr	r3, [pc, #592]	; (8006684 <HAL_UART_MspInit+0x2b4>)
 8006432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800643e:	4b91      	ldr	r3, [pc, #580]	; (8006684 <HAL_UART_MspInit+0x2b4>)
 8006440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006444:	4a8f      	ldr	r2, [pc, #572]	; (8006684 <HAL_UART_MspInit+0x2b4>)
 8006446:	f043 0308 	orr.w	r3, r3, #8
 800644a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800644e:	4b8d      	ldr	r3, [pc, #564]	; (8006684 <HAL_UART_MspInit+0x2b4>)
 8006450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006454:	f003 0308 	and.w	r3, r3, #8
 8006458:	623b      	str	r3, [r7, #32]
 800645a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800645c:	2303      	movs	r3, #3
 800645e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006462:	2302      	movs	r3, #2
 8006464:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006468:	2300      	movs	r3, #0
 800646a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800646e:	2300      	movs	r3, #0
 8006470:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006474:	2308      	movs	r3, #8
 8006476:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800647a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800647e:	4619      	mov	r1, r3
 8006480:	4881      	ldr	r0, [pc, #516]	; (8006688 <HAL_UART_MspInit+0x2b8>)
 8006482:	f003 fcd7 	bl	8009e34 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8006486:	4b81      	ldr	r3, [pc, #516]	; (800668c <HAL_UART_MspInit+0x2bc>)
 8006488:	4a81      	ldr	r2, [pc, #516]	; (8006690 <HAL_UART_MspInit+0x2c0>)
 800648a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800648c:	4b7f      	ldr	r3, [pc, #508]	; (800668c <HAL_UART_MspInit+0x2bc>)
 800648e:	223f      	movs	r2, #63	; 0x3f
 8006490:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006492:	4b7e      	ldr	r3, [pc, #504]	; (800668c <HAL_UART_MspInit+0x2bc>)
 8006494:	2200      	movs	r2, #0
 8006496:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006498:	4b7c      	ldr	r3, [pc, #496]	; (800668c <HAL_UART_MspInit+0x2bc>)
 800649a:	2200      	movs	r2, #0
 800649c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800649e:	4b7b      	ldr	r3, [pc, #492]	; (800668c <HAL_UART_MspInit+0x2bc>)
 80064a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064a4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064a6:	4b79      	ldr	r3, [pc, #484]	; (800668c <HAL_UART_MspInit+0x2bc>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064ac:	4b77      	ldr	r3, [pc, #476]	; (800668c <HAL_UART_MspInit+0x2bc>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80064b2:	4b76      	ldr	r3, [pc, #472]	; (800668c <HAL_UART_MspInit+0x2bc>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80064b8:	4b74      	ldr	r3, [pc, #464]	; (800668c <HAL_UART_MspInit+0x2bc>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80064be:	4b73      	ldr	r3, [pc, #460]	; (800668c <HAL_UART_MspInit+0x2bc>)
 80064c0:	2204      	movs	r2, #4
 80064c2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80064c4:	4b71      	ldr	r3, [pc, #452]	; (800668c <HAL_UART_MspInit+0x2bc>)
 80064c6:	2203      	movs	r2, #3
 80064c8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80064ca:	4b70      	ldr	r3, [pc, #448]	; (800668c <HAL_UART_MspInit+0x2bc>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80064d0:	4b6e      	ldr	r3, [pc, #440]	; (800668c <HAL_UART_MspInit+0x2bc>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80064d6:	486d      	ldr	r0, [pc, #436]	; (800668c <HAL_UART_MspInit+0x2bc>)
 80064d8:	f000 fe70 	bl	80071bc <HAL_DMA_Init>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80064e2:	f7fe fb8f 	bl	8004c04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a68      	ldr	r2, [pc, #416]	; (800668c <HAL_UART_MspInit+0x2bc>)
 80064ea:	67da      	str	r2, [r3, #124]	; 0x7c
 80064ec:	4a67      	ldr	r2, [pc, #412]	; (800668c <HAL_UART_MspInit+0x2bc>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80064f2:	4b68      	ldr	r3, [pc, #416]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 80064f4:	4a68      	ldr	r2, [pc, #416]	; (8006698 <HAL_UART_MspInit+0x2c8>)
 80064f6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80064f8:	4b66      	ldr	r3, [pc, #408]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 80064fa:	2240      	movs	r2, #64	; 0x40
 80064fc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064fe:	4b65      	ldr	r3, [pc, #404]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 8006500:	2240      	movs	r2, #64	; 0x40
 8006502:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006504:	4b63      	ldr	r3, [pc, #396]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 8006506:	2200      	movs	r2, #0
 8006508:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800650a:	4b62      	ldr	r3, [pc, #392]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 800650c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006510:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006512:	4b60      	ldr	r3, [pc, #384]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 8006514:	2200      	movs	r2, #0
 8006516:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006518:	4b5e      	ldr	r3, [pc, #376]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 800651a:	2200      	movs	r2, #0
 800651c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800651e:	4b5d      	ldr	r3, [pc, #372]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 8006520:	2200      	movs	r2, #0
 8006522:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006524:	4b5b      	ldr	r3, [pc, #364]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 8006526:	2200      	movs	r2, #0
 8006528:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800652a:	4b5a      	ldr	r3, [pc, #360]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 800652c:	2204      	movs	r2, #4
 800652e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006530:	4b58      	ldr	r3, [pc, #352]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 8006532:	2203      	movs	r2, #3
 8006534:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006536:	4b57      	ldr	r3, [pc, #348]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 8006538:	2200      	movs	r2, #0
 800653a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800653c:	4b55      	ldr	r3, [pc, #340]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 800653e:	2200      	movs	r2, #0
 8006540:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8006542:	4854      	ldr	r0, [pc, #336]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 8006544:	f000 fe3a 	bl	80071bc <HAL_DMA_Init>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800654e:	f7fe fb59 	bl	8004c04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a4f      	ldr	r2, [pc, #316]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 8006556:	679a      	str	r2, [r3, #120]	; 0x78
 8006558:	4a4e      	ldr	r2, [pc, #312]	; (8006694 <HAL_UART_MspInit+0x2c4>)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800655e:	2200      	movs	r2, #0
 8006560:	2100      	movs	r1, #0
 8006562:	2034      	movs	r0, #52	; 0x34
 8006564:	f000 fbeb 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006568:	2034      	movs	r0, #52	; 0x34
 800656a:	f000 fc02 	bl	8006d72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800656e:	e20d      	b.n	800698c <HAL_UART_MspInit+0x5bc>
  else if(uartHandle->Instance==UART7)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a49      	ldr	r2, [pc, #292]	; (800669c <HAL_UART_MspInit+0x2cc>)
 8006576:	4293      	cmp	r3, r2
 8006578:	f040 8098 	bne.w	80066ac <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800657c:	2302      	movs	r3, #2
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800658a:	4618      	mov	r0, r3
 800658c:	f004 fe2a 	bl	800b1e4 <HAL_RCCEx_PeriphCLKConfig>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8006596:	f7fe fb35 	bl	8004c04 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800659a:	4b3a      	ldr	r3, [pc, #232]	; (8006684 <HAL_UART_MspInit+0x2b4>)
 800659c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065a0:	4a38      	ldr	r2, [pc, #224]	; (8006684 <HAL_UART_MspInit+0x2b4>)
 80065a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80065aa:	4b36      	ldr	r3, [pc, #216]	; (8006684 <HAL_UART_MspInit+0x2b4>)
 80065ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80065b8:	4b32      	ldr	r3, [pc, #200]	; (8006684 <HAL_UART_MspInit+0x2b4>)
 80065ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065be:	4a31      	ldr	r2, [pc, #196]	; (8006684 <HAL_UART_MspInit+0x2b4>)
 80065c0:	f043 0310 	orr.w	r3, r3, #16
 80065c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065c8:	4b2e      	ldr	r3, [pc, #184]	; (8006684 <HAL_UART_MspInit+0x2b4>)
 80065ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80065d6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80065da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065de:	2302      	movs	r3, #2
 80065e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e4:	2300      	movs	r3, #0
 80065e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ea:	2300      	movs	r3, #0
 80065ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80065f0:	2307      	movs	r3, #7
 80065f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80065fa:	4619      	mov	r1, r3
 80065fc:	4828      	ldr	r0, [pc, #160]	; (80066a0 <HAL_UART_MspInit+0x2d0>)
 80065fe:	f003 fc19 	bl	8009e34 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8006602:	4b28      	ldr	r3, [pc, #160]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 8006604:	4a28      	ldr	r2, [pc, #160]	; (80066a8 <HAL_UART_MspInit+0x2d8>)
 8006606:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8006608:	4b26      	ldr	r3, [pc, #152]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 800660a:	2250      	movs	r2, #80	; 0x50
 800660c:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800660e:	4b25      	ldr	r3, [pc, #148]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 8006610:	2240      	movs	r2, #64	; 0x40
 8006612:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006614:	4b23      	ldr	r3, [pc, #140]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 8006616:	2200      	movs	r2, #0
 8006618:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800661a:	4b22      	ldr	r3, [pc, #136]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 800661c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006620:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006622:	4b20      	ldr	r3, [pc, #128]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 8006624:	2200      	movs	r2, #0
 8006626:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006628:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 800662a:	2200      	movs	r2, #0
 800662c:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800662e:	4b1d      	ldr	r3, [pc, #116]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 8006630:	2200      	movs	r2, #0
 8006632:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006634:	4b1b      	ldr	r3, [pc, #108]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 8006636:	2200      	movs	r2, #0
 8006638:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800663a:	4b1a      	ldr	r3, [pc, #104]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 800663c:	2204      	movs	r2, #4
 800663e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006640:	4b18      	ldr	r3, [pc, #96]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 8006642:	2203      	movs	r2, #3
 8006644:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006646:	4b17      	ldr	r3, [pc, #92]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 8006648:	2200      	movs	r2, #0
 800664a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800664c:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 800664e:	2200      	movs	r2, #0
 8006650:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8006652:	4814      	ldr	r0, [pc, #80]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 8006654:	f000 fdb2 	bl	80071bc <HAL_DMA_Init>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <HAL_UART_MspInit+0x292>
      Error_Handler();
 800665e:	f7fe fad1 	bl	8004c04 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a0f      	ldr	r2, [pc, #60]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 8006666:	679a      	str	r2, [r3, #120]	; 0x78
 8006668:	4a0e      	ldr	r2, [pc, #56]	; (80066a4 <HAL_UART_MspInit+0x2d4>)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800666e:	2200      	movs	r2, #0
 8006670:	2100      	movs	r1, #0
 8006672:	2052      	movs	r0, #82	; 0x52
 8006674:	f000 fb63 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006678:	2052      	movs	r0, #82	; 0x52
 800667a:	f000 fb7a 	bl	8006d72 <HAL_NVIC_EnableIRQ>
}
 800667e:	e185      	b.n	800698c <HAL_UART_MspInit+0x5bc>
 8006680:	40004c00 	.word	0x40004c00
 8006684:	58024400 	.word	0x58024400
 8006688:	58020c00 	.word	0x58020c00
 800668c:	240012b0 	.word	0x240012b0
 8006690:	40020058 	.word	0x40020058
 8006694:	24001328 	.word	0x24001328
 8006698:	40020070 	.word	0x40020070
 800669c:	40007800 	.word	0x40007800
 80066a0:	58021000 	.word	0x58021000
 80066a4:	240013a0 	.word	0x240013a0
 80066a8:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART2)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a54      	ldr	r2, [pc, #336]	; (8006804 <HAL_UART_MspInit+0x434>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	f040 80b4 	bne.w	8006820 <HAL_UART_MspInit+0x450>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80066b8:	2302      	movs	r3, #2
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80066bc:	2300      	movs	r3, #0
 80066be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80066c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066c6:	4618      	mov	r0, r3
 80066c8:	f004 fd8c 	bl	800b1e4 <HAL_RCCEx_PeriphCLKConfig>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <HAL_UART_MspInit+0x306>
      Error_Handler();
 80066d2:	f7fe fa97 	bl	8004c04 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80066d6:	4b4c      	ldr	r3, [pc, #304]	; (8006808 <HAL_UART_MspInit+0x438>)
 80066d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066dc:	4a4a      	ldr	r2, [pc, #296]	; (8006808 <HAL_UART_MspInit+0x438>)
 80066de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80066e6:	4b48      	ldr	r3, [pc, #288]	; (8006808 <HAL_UART_MspInit+0x438>)
 80066e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80066f4:	4b44      	ldr	r3, [pc, #272]	; (8006808 <HAL_UART_MspInit+0x438>)
 80066f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066fa:	4a43      	ldr	r2, [pc, #268]	; (8006808 <HAL_UART_MspInit+0x438>)
 80066fc:	f043 0308 	orr.w	r3, r3, #8
 8006700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006704:	4b40      	ldr	r3, [pc, #256]	; (8006808 <HAL_UART_MspInit+0x438>)
 8006706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006712:	2360      	movs	r3, #96	; 0x60
 8006714:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006718:	2302      	movs	r3, #2
 800671a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671e:	2300      	movs	r3, #0
 8006720:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006724:	2300      	movs	r3, #0
 8006726:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800672a:	2307      	movs	r3, #7
 800672c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006730:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006734:	4619      	mov	r1, r3
 8006736:	4835      	ldr	r0, [pc, #212]	; (800680c <HAL_UART_MspInit+0x43c>)
 8006738:	f003 fb7c 	bl	8009e34 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800673c:	4b34      	ldr	r3, [pc, #208]	; (8006810 <HAL_UART_MspInit+0x440>)
 800673e:	4a35      	ldr	r2, [pc, #212]	; (8006814 <HAL_UART_MspInit+0x444>)
 8006740:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8006742:	4b33      	ldr	r3, [pc, #204]	; (8006810 <HAL_UART_MspInit+0x440>)
 8006744:	222b      	movs	r2, #43	; 0x2b
 8006746:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006748:	4b31      	ldr	r3, [pc, #196]	; (8006810 <HAL_UART_MspInit+0x440>)
 800674a:	2200      	movs	r2, #0
 800674c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800674e:	4b30      	ldr	r3, [pc, #192]	; (8006810 <HAL_UART_MspInit+0x440>)
 8006750:	2200      	movs	r2, #0
 8006752:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006754:	4b2e      	ldr	r3, [pc, #184]	; (8006810 <HAL_UART_MspInit+0x440>)
 8006756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800675a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800675c:	4b2c      	ldr	r3, [pc, #176]	; (8006810 <HAL_UART_MspInit+0x440>)
 800675e:	2200      	movs	r2, #0
 8006760:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006762:	4b2b      	ldr	r3, [pc, #172]	; (8006810 <HAL_UART_MspInit+0x440>)
 8006764:	2200      	movs	r2, #0
 8006766:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006768:	4b29      	ldr	r3, [pc, #164]	; (8006810 <HAL_UART_MspInit+0x440>)
 800676a:	2200      	movs	r2, #0
 800676c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800676e:	4b28      	ldr	r3, [pc, #160]	; (8006810 <HAL_UART_MspInit+0x440>)
 8006770:	2200      	movs	r2, #0
 8006772:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006774:	4b26      	ldr	r3, [pc, #152]	; (8006810 <HAL_UART_MspInit+0x440>)
 8006776:	2200      	movs	r2, #0
 8006778:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800677a:	4825      	ldr	r0, [pc, #148]	; (8006810 <HAL_UART_MspInit+0x440>)
 800677c:	f000 fd1e 	bl	80071bc <HAL_DMA_Init>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8006786:	f7fe fa3d 	bl	8004c04 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a20      	ldr	r2, [pc, #128]	; (8006810 <HAL_UART_MspInit+0x440>)
 800678e:	67da      	str	r2, [r3, #124]	; 0x7c
 8006790:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <HAL_UART_MspInit+0x440>)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006796:	4b20      	ldr	r3, [pc, #128]	; (8006818 <HAL_UART_MspInit+0x448>)
 8006798:	4a20      	ldr	r2, [pc, #128]	; (800681c <HAL_UART_MspInit+0x44c>)
 800679a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800679c:	4b1e      	ldr	r3, [pc, #120]	; (8006818 <HAL_UART_MspInit+0x448>)
 800679e:	222c      	movs	r2, #44	; 0x2c
 80067a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067a2:	4b1d      	ldr	r3, [pc, #116]	; (8006818 <HAL_UART_MspInit+0x448>)
 80067a4:	2240      	movs	r2, #64	; 0x40
 80067a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067a8:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <HAL_UART_MspInit+0x448>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80067ae:	4b1a      	ldr	r3, [pc, #104]	; (8006818 <HAL_UART_MspInit+0x448>)
 80067b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067b6:	4b18      	ldr	r3, [pc, #96]	; (8006818 <HAL_UART_MspInit+0x448>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067bc:	4b16      	ldr	r3, [pc, #88]	; (8006818 <HAL_UART_MspInit+0x448>)
 80067be:	2200      	movs	r2, #0
 80067c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <HAL_UART_MspInit+0x448>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80067c8:	4b13      	ldr	r3, [pc, #76]	; (8006818 <HAL_UART_MspInit+0x448>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067ce:	4b12      	ldr	r3, [pc, #72]	; (8006818 <HAL_UART_MspInit+0x448>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80067d4:	4810      	ldr	r0, [pc, #64]	; (8006818 <HAL_UART_MspInit+0x448>)
 80067d6:	f000 fcf1 	bl	80071bc <HAL_DMA_Init>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <HAL_UART_MspInit+0x414>
      Error_Handler();
 80067e0:	f7fe fa10 	bl	8004c04 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a0c      	ldr	r2, [pc, #48]	; (8006818 <HAL_UART_MspInit+0x448>)
 80067e8:	679a      	str	r2, [r3, #120]	; 0x78
 80067ea:	4a0b      	ldr	r2, [pc, #44]	; (8006818 <HAL_UART_MspInit+0x448>)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80067f0:	2200      	movs	r2, #0
 80067f2:	2100      	movs	r1, #0
 80067f4:	2026      	movs	r0, #38	; 0x26
 80067f6:	f000 faa2 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80067fa:	2026      	movs	r0, #38	; 0x26
 80067fc:	f000 fab9 	bl	8006d72 <HAL_NVIC_EnableIRQ>
}
 8006800:	e0c4      	b.n	800698c <HAL_UART_MspInit+0x5bc>
 8006802:	bf00      	nop
 8006804:	40004400 	.word	0x40004400
 8006808:	58024400 	.word	0x58024400
 800680c:	58020c00 	.word	0x58020c00
 8006810:	24001418 	.word	0x24001418
 8006814:	40020088 	.word	0x40020088
 8006818:	24001490 	.word	0x24001490
 800681c:	400200a0 	.word	0x400200a0
  else if(uartHandle->Instance==USART3)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a5b      	ldr	r2, [pc, #364]	; (8006994 <HAL_UART_MspInit+0x5c4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	f040 80b0 	bne.w	800698c <HAL_UART_MspInit+0x5bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800682c:	2302      	movs	r3, #2
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006830:	2300      	movs	r3, #0
 8006832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800683a:	4618      	mov	r0, r3
 800683c:	f004 fcd2 	bl	800b1e4 <HAL_RCCEx_PeriphCLKConfig>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <HAL_UART_MspInit+0x47a>
      Error_Handler();
 8006846:	f7fe f9dd 	bl	8004c04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800684a:	4b53      	ldr	r3, [pc, #332]	; (8006998 <HAL_UART_MspInit+0x5c8>)
 800684c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006850:	4a51      	ldr	r2, [pc, #324]	; (8006998 <HAL_UART_MspInit+0x5c8>)
 8006852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006856:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800685a:	4b4f      	ldr	r3, [pc, #316]	; (8006998 <HAL_UART_MspInit+0x5c8>)
 800685c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006868:	4b4b      	ldr	r3, [pc, #300]	; (8006998 <HAL_UART_MspInit+0x5c8>)
 800686a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800686e:	4a4a      	ldr	r2, [pc, #296]	; (8006998 <HAL_UART_MspInit+0x5c8>)
 8006870:	f043 0308 	orr.w	r3, r3, #8
 8006874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006878:	4b47      	ldr	r3, [pc, #284]	; (8006998 <HAL_UART_MspInit+0x5c8>)
 800687a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	60bb      	str	r3, [r7, #8]
 8006884:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006886:	f44f 7340 	mov.w	r3, #768	; 0x300
 800688a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800688e:	2302      	movs	r3, #2
 8006890:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006894:	2300      	movs	r3, #0
 8006896:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800689a:	2300      	movs	r3, #0
 800689c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80068a0:	2307      	movs	r3, #7
 80068a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80068aa:	4619      	mov	r1, r3
 80068ac:	483b      	ldr	r0, [pc, #236]	; (800699c <HAL_UART_MspInit+0x5cc>)
 80068ae:	f003 fac1 	bl	8009e34 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80068b2:	4b3b      	ldr	r3, [pc, #236]	; (80069a0 <HAL_UART_MspInit+0x5d0>)
 80068b4:	4a3b      	ldr	r2, [pc, #236]	; (80069a4 <HAL_UART_MspInit+0x5d4>)
 80068b6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80068b8:	4b39      	ldr	r3, [pc, #228]	; (80069a0 <HAL_UART_MspInit+0x5d0>)
 80068ba:	222d      	movs	r2, #45	; 0x2d
 80068bc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068be:	4b38      	ldr	r3, [pc, #224]	; (80069a0 <HAL_UART_MspInit+0x5d0>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068c4:	4b36      	ldr	r3, [pc, #216]	; (80069a0 <HAL_UART_MspInit+0x5d0>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80068ca:	4b35      	ldr	r3, [pc, #212]	; (80069a0 <HAL_UART_MspInit+0x5d0>)
 80068cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068d0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068d2:	4b33      	ldr	r3, [pc, #204]	; (80069a0 <HAL_UART_MspInit+0x5d0>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068d8:	4b31      	ldr	r3, [pc, #196]	; (80069a0 <HAL_UART_MspInit+0x5d0>)
 80068da:	2200      	movs	r2, #0
 80068dc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80068de:	4b30      	ldr	r3, [pc, #192]	; (80069a0 <HAL_UART_MspInit+0x5d0>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80068e4:	4b2e      	ldr	r3, [pc, #184]	; (80069a0 <HAL_UART_MspInit+0x5d0>)
 80068e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80068ea:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068ec:	4b2c      	ldr	r3, [pc, #176]	; (80069a0 <HAL_UART_MspInit+0x5d0>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80068f2:	482b      	ldr	r0, [pc, #172]	; (80069a0 <HAL_UART_MspInit+0x5d0>)
 80068f4:	f000 fc62 	bl	80071bc <HAL_DMA_Init>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <HAL_UART_MspInit+0x532>
      Error_Handler();
 80068fe:	f7fe f981 	bl	8004c04 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a26      	ldr	r2, [pc, #152]	; (80069a0 <HAL_UART_MspInit+0x5d0>)
 8006906:	67da      	str	r2, [r3, #124]	; 0x7c
 8006908:	4a25      	ldr	r2, [pc, #148]	; (80069a0 <HAL_UART_MspInit+0x5d0>)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800690e:	4b26      	ldr	r3, [pc, #152]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 8006910:	4a26      	ldr	r2, [pc, #152]	; (80069ac <HAL_UART_MspInit+0x5dc>)
 8006912:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006914:	4b24      	ldr	r3, [pc, #144]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 8006916:	222e      	movs	r2, #46	; 0x2e
 8006918:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800691a:	4b23      	ldr	r3, [pc, #140]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 800691c:	2240      	movs	r2, #64	; 0x40
 800691e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006920:	4b21      	ldr	r3, [pc, #132]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 8006922:	2200      	movs	r2, #0
 8006924:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006926:	4b20      	ldr	r3, [pc, #128]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 8006928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800692c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800692e:	4b1e      	ldr	r3, [pc, #120]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 8006930:	2200      	movs	r2, #0
 8006932:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006934:	4b1c      	ldr	r3, [pc, #112]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 8006936:	2200      	movs	r2, #0
 8006938:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800693a:	4b1b      	ldr	r3, [pc, #108]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 800693c:	2200      	movs	r2, #0
 800693e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006940:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 8006942:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006946:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006948:	4b17      	ldr	r3, [pc, #92]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 800694a:	2204      	movs	r2, #4
 800694c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800694e:	4b16      	ldr	r3, [pc, #88]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 8006950:	2203      	movs	r2, #3
 8006952:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006954:	4b14      	ldr	r3, [pc, #80]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 8006956:	2200      	movs	r2, #0
 8006958:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800695a:	4b13      	ldr	r3, [pc, #76]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 800695c:	2200      	movs	r2, #0
 800695e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006960:	4811      	ldr	r0, [pc, #68]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 8006962:	f000 fc2b 	bl	80071bc <HAL_DMA_Init>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <HAL_UART_MspInit+0x5a0>
      Error_Handler();
 800696c:	f7fe f94a 	bl	8004c04 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a0d      	ldr	r2, [pc, #52]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 8006974:	679a      	str	r2, [r3, #120]	; 0x78
 8006976:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <HAL_UART_MspInit+0x5d8>)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800697c:	2200      	movs	r2, #0
 800697e:	2100      	movs	r1, #0
 8006980:	2027      	movs	r0, #39	; 0x27
 8006982:	f000 f9dc 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006986:	2027      	movs	r0, #39	; 0x27
 8006988:	f000 f9f3 	bl	8006d72 <HAL_NVIC_EnableIRQ>
}
 800698c:	bf00      	nop
 800698e:	37f8      	adds	r7, #248	; 0xf8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40004800 	.word	0x40004800
 8006998:	58024400 	.word	0x58024400
 800699c:	58020c00 	.word	0x58020c00
 80069a0:	24001508 	.word	0x24001508
 80069a4:	40020028 	.word	0x40020028
 80069a8:	24001580 	.word	0x24001580
 80069ac:	40020040 	.word	0x40020040

080069b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 80069b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80069e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80069b4:	f7fe fcb6 	bl	8005324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80069b8:	480c      	ldr	r0, [pc, #48]	; (80069ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80069ba:	490d      	ldr	r1, [pc, #52]	; (80069f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80069bc:	4a0d      	ldr	r2, [pc, #52]	; (80069f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80069be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069c0:	e002      	b.n	80069c8 <LoopCopyDataInit>

080069c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069c6:	3304      	adds	r3, #4

080069c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069cc:	d3f9      	bcc.n	80069c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069ce:	4a0a      	ldr	r2, [pc, #40]	; (80069f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80069d0:	4c0a      	ldr	r4, [pc, #40]	; (80069fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80069d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80069d4:	e001      	b.n	80069da <LoopFillZerobss>

080069d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80069d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80069d8:	3204      	adds	r2, #4

080069da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80069da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80069dc:	d3fb      	bcc.n	80069d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80069de:	f00b f853 	bl	8011a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80069e2:	f7fd fdad 	bl	8004540 <main>
  bx  lr
 80069e6:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 80069e8:	24001c10 	.word	0x24001c10
  ldr r0, =_sdata
 80069ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80069f0:	24000410 	.word	0x24000410
  ldr r2, =_sidata
 80069f4:	08016414 	.word	0x08016414
  ldr r2, =_sbss
 80069f8:	24000410 	.word	0x24000410
  ldr r4, =_ebss
 80069fc:	2400160c 	.word	0x2400160c

08006a00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a00:	e7fe      	b.n	8006a00 <ADC3_IRQHandler>
	...

08006a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a0a:	2003      	movs	r0, #3
 8006a0c:	f000 f98c 	bl	8006d28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a10:	f004 fa12 	bl	800ae38 <HAL_RCC_GetSysClockFreq>
 8006a14:	4602      	mov	r2, r0
 8006a16:	4b15      	ldr	r3, [pc, #84]	; (8006a6c <HAL_Init+0x68>)
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	0a1b      	lsrs	r3, r3, #8
 8006a1c:	f003 030f 	and.w	r3, r3, #15
 8006a20:	4913      	ldr	r1, [pc, #76]	; (8006a70 <HAL_Init+0x6c>)
 8006a22:	5ccb      	ldrb	r3, [r1, r3]
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <HAL_Init+0x68>)
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	4a0e      	ldr	r2, [pc, #56]	; (8006a70 <HAL_Init+0x6c>)
 8006a38:	5cd3      	ldrb	r3, [r2, r3]
 8006a3a:	f003 031f 	and.w	r3, r3, #31
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
 8006a44:	4a0b      	ldr	r2, [pc, #44]	; (8006a74 <HAL_Init+0x70>)
 8006a46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a48:	4a0b      	ldr	r2, [pc, #44]	; (8006a78 <HAL_Init+0x74>)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a4e:	2000      	movs	r0, #0
 8006a50:	f000 f814 	bl	8006a7c <HAL_InitTick>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e002      	b.n	8006a64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006a5e:	f7fe fa79 	bl	8004f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	58024400 	.word	0x58024400
 8006a70:	08014514 	.word	0x08014514
 8006a74:	24000234 	.word	0x24000234
 8006a78:	24000230 	.word	0x24000230

08006a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006a84:	4b15      	ldr	r3, [pc, #84]	; (8006adc <HAL_InitTick+0x60>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e021      	b.n	8006ad4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006a90:	4b13      	ldr	r3, [pc, #76]	; (8006ae0 <HAL_InitTick+0x64>)
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	4b11      	ldr	r3, [pc, #68]	; (8006adc <HAL_InitTick+0x60>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 f971 	bl	8006d8e <HAL_SYSTICK_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e00e      	b.n	8006ad4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b0f      	cmp	r3, #15
 8006aba:	d80a      	bhi.n	8006ad2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006abc:	2200      	movs	r2, #0
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ac4:	f000 f93b 	bl	8006d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ac8:	4a06      	ldr	r2, [pc, #24]	; (8006ae4 <HAL_InitTick+0x68>)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e000      	b.n	8006ad4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	2400023c 	.word	0x2400023c
 8006ae0:	24000230 	.word	0x24000230
 8006ae4:	24000238 	.word	0x24000238

08006ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006aec:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <HAL_IncTick+0x20>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <HAL_IncTick+0x24>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4413      	add	r3, r2
 8006af8:	4a04      	ldr	r2, [pc, #16]	; (8006b0c <HAL_IncTick+0x24>)
 8006afa:	6013      	str	r3, [r2, #0]
}
 8006afc:	bf00      	nop
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	2400023c 	.word	0x2400023c
 8006b0c:	240015f8 	.word	0x240015f8

08006b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
  return uwTick;
 8006b14:	4b03      	ldr	r3, [pc, #12]	; (8006b24 <HAL_GetTick+0x14>)
 8006b16:	681b      	ldr	r3, [r3, #0]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	240015f8 	.word	0x240015f8

08006b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b30:	f7ff ffee 	bl	8006b10 <HAL_GetTick>
 8006b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b40:	d005      	beq.n	8006b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b42:	4b0a      	ldr	r3, [pc, #40]	; (8006b6c <HAL_Delay+0x44>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b4e:	bf00      	nop
 8006b50:	f7ff ffde 	bl	8006b10 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d8f7      	bhi.n	8006b50 <HAL_Delay+0x28>
  {
  }
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	2400023c 	.word	0x2400023c

08006b70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006b74:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <HAL_GetREVID+0x14>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	0c1b      	lsrs	r3, r3, #16
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	5c001000 	.word	0x5c001000

08006b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b98:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <__NVIC_SetPriorityGrouping+0x40>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006bb0:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <__NVIC_SetPriorityGrouping+0x44>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bb6:	4a04      	ldr	r2, [pc, #16]	; (8006bc8 <__NVIC_SetPriorityGrouping+0x40>)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	60d3      	str	r3, [r2, #12]
}
 8006bbc:	bf00      	nop
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	e000ed00 	.word	0xe000ed00
 8006bcc:	05fa0000 	.word	0x05fa0000

08006bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bd4:	4b04      	ldr	r3, [pc, #16]	; (8006be8 <__NVIC_GetPriorityGrouping+0x18>)
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	f003 0307 	and.w	r3, r3, #7
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	e000ed00 	.word	0xe000ed00

08006bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	db0b      	blt.n	8006c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	f003 021f 	and.w	r2, r3, #31
 8006c04:	4907      	ldr	r1, [pc, #28]	; (8006c24 <__NVIC_EnableIRQ+0x38>)
 8006c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	2001      	movs	r0, #1
 8006c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8006c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	e000e100 	.word	0xe000e100

08006c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	6039      	str	r1, [r7, #0]
 8006c32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	db0a      	blt.n	8006c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	490c      	ldr	r1, [pc, #48]	; (8006c74 <__NVIC_SetPriority+0x4c>)
 8006c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c46:	0112      	lsls	r2, r2, #4
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c50:	e00a      	b.n	8006c68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	4908      	ldr	r1, [pc, #32]	; (8006c78 <__NVIC_SetPriority+0x50>)
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	3b04      	subs	r3, #4
 8006c60:	0112      	lsls	r2, r2, #4
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	440b      	add	r3, r1
 8006c66:	761a      	strb	r2, [r3, #24]
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	e000e100 	.word	0xe000e100
 8006c78:	e000ed00 	.word	0xe000ed00

08006c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b089      	sub	sp, #36	; 0x24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f1c3 0307 	rsb	r3, r3, #7
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	bf28      	it	cs
 8006c9a:	2304      	movcs	r3, #4
 8006c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	2b06      	cmp	r3, #6
 8006ca4:	d902      	bls.n	8006cac <NVIC_EncodePriority+0x30>
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	3b03      	subs	r3, #3
 8006caa:	e000      	b.n	8006cae <NVIC_EncodePriority+0x32>
 8006cac:	2300      	movs	r3, #0
 8006cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cba:	43da      	mvns	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	fa01 f303 	lsl.w	r3, r1, r3
 8006cce:	43d9      	mvns	r1, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cd4:	4313      	orrs	r3, r2
         );
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3724      	adds	r7, #36	; 0x24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
	...

08006ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cf4:	d301      	bcc.n	8006cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e00f      	b.n	8006d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cfa:	4a0a      	ldr	r2, [pc, #40]	; (8006d24 <SysTick_Config+0x40>)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d02:	210f      	movs	r1, #15
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d08:	f7ff ff8e 	bl	8006c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <SysTick_Config+0x40>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d12:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <SysTick_Config+0x40>)
 8006d14:	2207      	movs	r2, #7
 8006d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	e000e010 	.word	0xe000e010

08006d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff ff29 	bl	8006b88 <__NVIC_SetPriorityGrouping>
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b086      	sub	sp, #24
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	4603      	mov	r3, r0
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
 8006d4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d4c:	f7ff ff40 	bl	8006bd0 <__NVIC_GetPriorityGrouping>
 8006d50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	68b9      	ldr	r1, [r7, #8]
 8006d56:	6978      	ldr	r0, [r7, #20]
 8006d58:	f7ff ff90 	bl	8006c7c <NVIC_EncodePriority>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d62:	4611      	mov	r1, r2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff ff5f 	bl	8006c28 <__NVIC_SetPriority>
}
 8006d6a:	bf00      	nop
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	4603      	mov	r3, r0
 8006d7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff ff33 	bl	8006bec <__NVIC_EnableIRQ>
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff ffa4 	bl	8006ce4 <SysTick_Config>
 8006d9c:	4603      	mov	r3, r0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006daa:	f000 f802 	bl	8006db2 <HAL_SYSTICK_Callback>
}
 8006dae:	bf00      	nop
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006db2:	b480      	push	{r7}
 8006db4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006db6:	bf00      	nop
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e054      	b.n	8006e7c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	7f5b      	ldrb	r3, [r3, #29]
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d105      	bne.n	8006de8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fb fada 	bl	800239c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	791b      	ldrb	r3, [r3, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10c      	bne.n	8006e10 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a22      	ldr	r2, [pc, #136]	; (8006e84 <HAL_CRC_Init+0xc4>)
 8006dfc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0218 	bic.w	r2, r2, #24
 8006e0c:	609a      	str	r2, [r3, #8]
 8006e0e:	e00c      	b.n	8006e2a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6899      	ldr	r1, [r3, #8]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f948 	bl	80070b0 <HAL_CRCEx_Polynomial_Set>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e028      	b.n	8006e7c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	795b      	ldrb	r3, [r3, #5]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d105      	bne.n	8006e3e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e3a:	611a      	str	r2, [r3, #16]
 8006e3c:	e004      	b.n	8006e48 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6912      	ldr	r2, [r2, #16]
 8006e46:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	695a      	ldr	r2, [r3, #20]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	699a      	ldr	r2, [r3, #24]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	04c11db7 	.word	0x04c11db7

08006e88 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006e94:	2300      	movs	r3, #0
 8006e96:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f042 0201 	orr.w	r2, r2, #1
 8006eac:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d006      	beq.n	8006ec4 <HAL_CRC_Calculate+0x3c>
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d829      	bhi.n	8006f0e <HAL_CRC_Calculate+0x86>
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d019      	beq.n	8006ef2 <HAL_CRC_Calculate+0x6a>
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d01e      	beq.n	8006f00 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006ec2:	e024      	b.n	8006f0e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]
 8006ec8:	e00a      	b.n	8006ee0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	441a      	add	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6812      	ldr	r2, [r2, #0]
 8006ed8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	3301      	adds	r3, #1
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d3f0      	bcc.n	8006eca <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	613b      	str	r3, [r7, #16]
      break;
 8006ef0:	e00e      	b.n	8006f10 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	68b9      	ldr	r1, [r7, #8]
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f812 	bl	8006f20 <CRC_Handle_8>
 8006efc:	6138      	str	r0, [r7, #16]
      break;
 8006efe:	e007      	b.n	8006f10 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	68b9      	ldr	r1, [r7, #8]
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f899 	bl	800703c <CRC_Handle_16>
 8006f0a:	6138      	str	r0, [r7, #16]
      break;
 8006f0c:	e000      	b.n	8006f10 <HAL_CRC_Calculate+0x88>
      break;
 8006f0e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2201      	movs	r2, #1
 8006f14:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8006f16:	693b      	ldr	r3, [r7, #16]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b089      	sub	sp, #36	; 0x24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61fb      	str	r3, [r7, #28]
 8006f30:	e023      	b.n	8006f7a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	4413      	add	r3, r2
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	3301      	adds	r3, #1
 8006f44:	68b9      	ldr	r1, [r7, #8]
 8006f46:	440b      	add	r3, r1
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006f4c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	3302      	adds	r3, #2
 8006f54:	68b9      	ldr	r1, [r7, #8]
 8006f56:	440b      	add	r3, r1
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006f5c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	3303      	adds	r3, #3
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	440b      	add	r3, r1
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006f70:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006f72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	3301      	adds	r3, #1
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	089b      	lsrs	r3, r3, #2
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d3d6      	bcc.n	8006f32 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d04d      	beq.n	800702a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f003 0303 	and.w	r3, r3, #3
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d107      	bne.n	8006fa8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	6812      	ldr	r2, [r2, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d116      	bne.n	8006fe0 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	4413      	add	r3, r2
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	021b      	lsls	r3, r3, #8
 8006fbe:	b21a      	sxth	r2, r3
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	68b9      	ldr	r1, [r7, #8]
 8006fc8:	440b      	add	r3, r1
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	b21b      	sxth	r3, r3
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	b21b      	sxth	r3, r3
 8006fd2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	8b7a      	ldrh	r2, [r7, #26]
 8006fde:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d11f      	bne.n	800702a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	021b      	lsls	r3, r3, #8
 8006ff6:	b21a      	sxth	r2, r3
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	440b      	add	r3, r1
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	b21b      	sxth	r3, r3
 8007006:	4313      	orrs	r3, r2
 8007008:	b21b      	sxth	r3, r3
 800700a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	8b7a      	ldrh	r2, [r7, #26]
 8007016:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	3302      	adds	r3, #2
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	4413      	add	r3, r2
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	6812      	ldr	r2, [r2, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3724      	adds	r7, #36	; 0x24
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007048:	2300      	movs	r3, #0
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	e013      	b.n	8007076 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	4413      	add	r3, r2
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	041a      	lsls	r2, r3, #16
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	3302      	adds	r3, #2
 8007060:	68b9      	ldr	r1, [r7, #8]
 8007062:	440b      	add	r3, r1
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	4619      	mov	r1, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	3301      	adds	r3, #1
 8007074:	617b      	str	r3, [r7, #20]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	085b      	lsrs	r3, r3, #1
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	429a      	cmp	r2, r3
 800707e:	d3e6      	bcc.n	800704e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d009      	beq.n	800709e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	4413      	add	r3, r2
 8007098:	881a      	ldrh	r2, [r3, #0]
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80070c0:	231f      	movs	r3, #31
 80070c2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80070c4:	bf00      	nop
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1e5a      	subs	r2, r3, #1
 80070ca:	613a      	str	r2, [r7, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d009      	beq.n	80070e4 <HAL_CRCEx_Polynomial_Set+0x34>
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f003 031f 	and.w	r3, r3, #31
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	fa22 f303 	lsr.w	r3, r2, r3
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0f0      	beq.n	80070c6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b18      	cmp	r3, #24
 80070e8:	d846      	bhi.n	8007178 <HAL_CRCEx_Polynomial_Set+0xc8>
 80070ea:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	0800717f 	.word	0x0800717f
 80070f4:	08007179 	.word	0x08007179
 80070f8:	08007179 	.word	0x08007179
 80070fc:	08007179 	.word	0x08007179
 8007100:	08007179 	.word	0x08007179
 8007104:	08007179 	.word	0x08007179
 8007108:	08007179 	.word	0x08007179
 800710c:	08007179 	.word	0x08007179
 8007110:	0800716d 	.word	0x0800716d
 8007114:	08007179 	.word	0x08007179
 8007118:	08007179 	.word	0x08007179
 800711c:	08007179 	.word	0x08007179
 8007120:	08007179 	.word	0x08007179
 8007124:	08007179 	.word	0x08007179
 8007128:	08007179 	.word	0x08007179
 800712c:	08007179 	.word	0x08007179
 8007130:	08007161 	.word	0x08007161
 8007134:	08007179 	.word	0x08007179
 8007138:	08007179 	.word	0x08007179
 800713c:	08007179 	.word	0x08007179
 8007140:	08007179 	.word	0x08007179
 8007144:	08007179 	.word	0x08007179
 8007148:	08007179 	.word	0x08007179
 800714c:	08007179 	.word	0x08007179
 8007150:	08007155 	.word	0x08007155
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	2b06      	cmp	r3, #6
 8007158:	d913      	bls.n	8007182 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800715e:	e010      	b.n	8007182 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	2b07      	cmp	r3, #7
 8007164:	d90f      	bls.n	8007186 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800716a:	e00c      	b.n	8007186 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b0f      	cmp	r3, #15
 8007170:	d90b      	bls.n	800718a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007176:	e008      	b.n	800718a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	75fb      	strb	r3, [r7, #23]
      break;
 800717c:	e006      	b.n	800718c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800717e:	bf00      	nop
 8007180:	e004      	b.n	800718c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007182:	bf00      	nop
 8007184:	e002      	b.n	800718c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007186:	bf00      	nop
 8007188:	e000      	b.n	800718c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800718a:	bf00      	nop
  }
  if (status == HAL_OK)
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10d      	bne.n	80071ae <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f023 0118 	bic.w	r1, r3, #24
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80071c4:	f7ff fca4 	bl	8006b10 <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e316      	b.n	8007802 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a66      	ldr	r2, [pc, #408]	; (8007374 <HAL_DMA_Init+0x1b8>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d04a      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a65      	ldr	r2, [pc, #404]	; (8007378 <HAL_DMA_Init+0x1bc>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d045      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a63      	ldr	r2, [pc, #396]	; (800737c <HAL_DMA_Init+0x1c0>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d040      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a62      	ldr	r2, [pc, #392]	; (8007380 <HAL_DMA_Init+0x1c4>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d03b      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a60      	ldr	r2, [pc, #384]	; (8007384 <HAL_DMA_Init+0x1c8>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d036      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a5f      	ldr	r2, [pc, #380]	; (8007388 <HAL_DMA_Init+0x1cc>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d031      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a5d      	ldr	r2, [pc, #372]	; (800738c <HAL_DMA_Init+0x1d0>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d02c      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a5c      	ldr	r2, [pc, #368]	; (8007390 <HAL_DMA_Init+0x1d4>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d027      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a5a      	ldr	r2, [pc, #360]	; (8007394 <HAL_DMA_Init+0x1d8>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d022      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a59      	ldr	r2, [pc, #356]	; (8007398 <HAL_DMA_Init+0x1dc>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d01d      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a57      	ldr	r2, [pc, #348]	; (800739c <HAL_DMA_Init+0x1e0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d018      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a56      	ldr	r2, [pc, #344]	; (80073a0 <HAL_DMA_Init+0x1e4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d013      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a54      	ldr	r2, [pc, #336]	; (80073a4 <HAL_DMA_Init+0x1e8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d00e      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a53      	ldr	r2, [pc, #332]	; (80073a8 <HAL_DMA_Init+0x1ec>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d009      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a51      	ldr	r2, [pc, #324]	; (80073ac <HAL_DMA_Init+0x1f0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d004      	beq.n	8007274 <HAL_DMA_Init+0xb8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a50      	ldr	r2, [pc, #320]	; (80073b0 <HAL_DMA_Init+0x1f4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d101      	bne.n	8007278 <HAL_DMA_Init+0xbc>
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <HAL_DMA_Init+0xbe>
 8007278:	2300      	movs	r3, #0
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 813b 	beq.w	80074f6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a37      	ldr	r2, [pc, #220]	; (8007374 <HAL_DMA_Init+0x1b8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d04a      	beq.n	8007330 <HAL_DMA_Init+0x174>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a36      	ldr	r2, [pc, #216]	; (8007378 <HAL_DMA_Init+0x1bc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d045      	beq.n	8007330 <HAL_DMA_Init+0x174>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a34      	ldr	r2, [pc, #208]	; (800737c <HAL_DMA_Init+0x1c0>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d040      	beq.n	8007330 <HAL_DMA_Init+0x174>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a33      	ldr	r2, [pc, #204]	; (8007380 <HAL_DMA_Init+0x1c4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d03b      	beq.n	8007330 <HAL_DMA_Init+0x174>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a31      	ldr	r2, [pc, #196]	; (8007384 <HAL_DMA_Init+0x1c8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d036      	beq.n	8007330 <HAL_DMA_Init+0x174>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a30      	ldr	r2, [pc, #192]	; (8007388 <HAL_DMA_Init+0x1cc>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d031      	beq.n	8007330 <HAL_DMA_Init+0x174>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a2e      	ldr	r2, [pc, #184]	; (800738c <HAL_DMA_Init+0x1d0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d02c      	beq.n	8007330 <HAL_DMA_Init+0x174>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a2d      	ldr	r2, [pc, #180]	; (8007390 <HAL_DMA_Init+0x1d4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d027      	beq.n	8007330 <HAL_DMA_Init+0x174>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a2b      	ldr	r2, [pc, #172]	; (8007394 <HAL_DMA_Init+0x1d8>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d022      	beq.n	8007330 <HAL_DMA_Init+0x174>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a2a      	ldr	r2, [pc, #168]	; (8007398 <HAL_DMA_Init+0x1dc>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d01d      	beq.n	8007330 <HAL_DMA_Init+0x174>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a28      	ldr	r2, [pc, #160]	; (800739c <HAL_DMA_Init+0x1e0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d018      	beq.n	8007330 <HAL_DMA_Init+0x174>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a27      	ldr	r2, [pc, #156]	; (80073a0 <HAL_DMA_Init+0x1e4>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d013      	beq.n	8007330 <HAL_DMA_Init+0x174>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a25      	ldr	r2, [pc, #148]	; (80073a4 <HAL_DMA_Init+0x1e8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00e      	beq.n	8007330 <HAL_DMA_Init+0x174>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a24      	ldr	r2, [pc, #144]	; (80073a8 <HAL_DMA_Init+0x1ec>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d009      	beq.n	8007330 <HAL_DMA_Init+0x174>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a22      	ldr	r2, [pc, #136]	; (80073ac <HAL_DMA_Init+0x1f0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <HAL_DMA_Init+0x174>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a21      	ldr	r2, [pc, #132]	; (80073b0 <HAL_DMA_Init+0x1f4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d108      	bne.n	8007342 <HAL_DMA_Init+0x186>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0201 	bic.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	e007      	b.n	8007352 <HAL_DMA_Init+0x196>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0201 	bic.w	r2, r2, #1
 8007350:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007352:	e02f      	b.n	80073b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007354:	f7ff fbdc 	bl	8006b10 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b05      	cmp	r3, #5
 8007360:	d928      	bls.n	80073b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2203      	movs	r2, #3
 800736c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e246      	b.n	8007802 <HAL_DMA_Init+0x646>
 8007374:	40020010 	.word	0x40020010
 8007378:	40020028 	.word	0x40020028
 800737c:	40020040 	.word	0x40020040
 8007380:	40020058 	.word	0x40020058
 8007384:	40020070 	.word	0x40020070
 8007388:	40020088 	.word	0x40020088
 800738c:	400200a0 	.word	0x400200a0
 8007390:	400200b8 	.word	0x400200b8
 8007394:	40020410 	.word	0x40020410
 8007398:	40020428 	.word	0x40020428
 800739c:	40020440 	.word	0x40020440
 80073a0:	40020458 	.word	0x40020458
 80073a4:	40020470 	.word	0x40020470
 80073a8:	40020488 	.word	0x40020488
 80073ac:	400204a0 	.word	0x400204a0
 80073b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1c8      	bne.n	8007354 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	4b83      	ldr	r3, [pc, #524]	; (80075dc <HAL_DMA_Init+0x420>)
 80073ce:	4013      	ands	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80073da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	2b04      	cmp	r3, #4
 8007406:	d107      	bne.n	8007418 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007410:	4313      	orrs	r3, r2
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007418:	4b71      	ldr	r3, [pc, #452]	; (80075e0 <HAL_DMA_Init+0x424>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	4b71      	ldr	r3, [pc, #452]	; (80075e4 <HAL_DMA_Init+0x428>)
 800741e:	4013      	ands	r3, r2
 8007420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007424:	d328      	bcc.n	8007478 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	2b28      	cmp	r3, #40	; 0x28
 800742c:	d903      	bls.n	8007436 <HAL_DMA_Init+0x27a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2b2e      	cmp	r3, #46	; 0x2e
 8007434:	d917      	bls.n	8007466 <HAL_DMA_Init+0x2aa>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2b3e      	cmp	r3, #62	; 0x3e
 800743c:	d903      	bls.n	8007446 <HAL_DMA_Init+0x28a>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	2b42      	cmp	r3, #66	; 0x42
 8007444:	d90f      	bls.n	8007466 <HAL_DMA_Init+0x2aa>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2b46      	cmp	r3, #70	; 0x46
 800744c:	d903      	bls.n	8007456 <HAL_DMA_Init+0x29a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2b48      	cmp	r3, #72	; 0x48
 8007454:	d907      	bls.n	8007466 <HAL_DMA_Init+0x2aa>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2b4e      	cmp	r3, #78	; 0x4e
 800745c:	d905      	bls.n	800746a <HAL_DMA_Init+0x2ae>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2b52      	cmp	r3, #82	; 0x52
 8007464:	d801      	bhi.n	800746a <HAL_DMA_Init+0x2ae>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <HAL_DMA_Init+0x2b0>
 800746a:	2300      	movs	r3, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007476:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f023 0307 	bic.w	r3, r3, #7
 800748e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d117      	bne.n	80074d2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00e      	beq.n	80074d2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f002 fb33 	bl	8009b20 <DMA_CheckFifoParam>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2240      	movs	r2, #64	; 0x40
 80074c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e197      	b.n	8007802 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f002 fa6e 	bl	80099bc <DMA_CalcBaseAndBitshift>
 80074e0:	4603      	mov	r3, r0
 80074e2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e8:	f003 031f 	and.w	r3, r3, #31
 80074ec:	223f      	movs	r2, #63	; 0x3f
 80074ee:	409a      	lsls	r2, r3
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	609a      	str	r2, [r3, #8]
 80074f4:	e0cd      	b.n	8007692 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a3b      	ldr	r2, [pc, #236]	; (80075e8 <HAL_DMA_Init+0x42c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d022      	beq.n	8007546 <HAL_DMA_Init+0x38a>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a39      	ldr	r2, [pc, #228]	; (80075ec <HAL_DMA_Init+0x430>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d01d      	beq.n	8007546 <HAL_DMA_Init+0x38a>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a38      	ldr	r2, [pc, #224]	; (80075f0 <HAL_DMA_Init+0x434>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d018      	beq.n	8007546 <HAL_DMA_Init+0x38a>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a36      	ldr	r2, [pc, #216]	; (80075f4 <HAL_DMA_Init+0x438>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d013      	beq.n	8007546 <HAL_DMA_Init+0x38a>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a35      	ldr	r2, [pc, #212]	; (80075f8 <HAL_DMA_Init+0x43c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d00e      	beq.n	8007546 <HAL_DMA_Init+0x38a>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a33      	ldr	r2, [pc, #204]	; (80075fc <HAL_DMA_Init+0x440>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d009      	beq.n	8007546 <HAL_DMA_Init+0x38a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a32      	ldr	r2, [pc, #200]	; (8007600 <HAL_DMA_Init+0x444>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d004      	beq.n	8007546 <HAL_DMA_Init+0x38a>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a30      	ldr	r2, [pc, #192]	; (8007604 <HAL_DMA_Init+0x448>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d101      	bne.n	800754a <HAL_DMA_Init+0x38e>
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <HAL_DMA_Init+0x390>
 800754a:	2300      	movs	r3, #0
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8097 	beq.w	8007680 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a24      	ldr	r2, [pc, #144]	; (80075e8 <HAL_DMA_Init+0x42c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d021      	beq.n	80075a0 <HAL_DMA_Init+0x3e4>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a22      	ldr	r2, [pc, #136]	; (80075ec <HAL_DMA_Init+0x430>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d01c      	beq.n	80075a0 <HAL_DMA_Init+0x3e4>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a21      	ldr	r2, [pc, #132]	; (80075f0 <HAL_DMA_Init+0x434>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d017      	beq.n	80075a0 <HAL_DMA_Init+0x3e4>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a1f      	ldr	r2, [pc, #124]	; (80075f4 <HAL_DMA_Init+0x438>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d012      	beq.n	80075a0 <HAL_DMA_Init+0x3e4>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a1e      	ldr	r2, [pc, #120]	; (80075f8 <HAL_DMA_Init+0x43c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00d      	beq.n	80075a0 <HAL_DMA_Init+0x3e4>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1c      	ldr	r2, [pc, #112]	; (80075fc <HAL_DMA_Init+0x440>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d008      	beq.n	80075a0 <HAL_DMA_Init+0x3e4>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1b      	ldr	r2, [pc, #108]	; (8007600 <HAL_DMA_Init+0x444>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d003      	beq.n	80075a0 <HAL_DMA_Init+0x3e4>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a19      	ldr	r2, [pc, #100]	; (8007604 <HAL_DMA_Init+0x448>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2202      	movs	r2, #2
 80075a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	4b12      	ldr	r3, [pc, #72]	; (8007608 <HAL_DMA_Init+0x44c>)
 80075be:	4013      	ands	r3, r2
 80075c0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	2b40      	cmp	r3, #64	; 0x40
 80075c8:	d020      	beq.n	800760c <HAL_DMA_Init+0x450>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	2b80      	cmp	r3, #128	; 0x80
 80075d0:	d102      	bne.n	80075d8 <HAL_DMA_Init+0x41c>
 80075d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075d6:	e01a      	b.n	800760e <HAL_DMA_Init+0x452>
 80075d8:	2300      	movs	r3, #0
 80075da:	e018      	b.n	800760e <HAL_DMA_Init+0x452>
 80075dc:	fe10803f 	.word	0xfe10803f
 80075e0:	5c001000 	.word	0x5c001000
 80075e4:	ffff0000 	.word	0xffff0000
 80075e8:	58025408 	.word	0x58025408
 80075ec:	5802541c 	.word	0x5802541c
 80075f0:	58025430 	.word	0x58025430
 80075f4:	58025444 	.word	0x58025444
 80075f8:	58025458 	.word	0x58025458
 80075fc:	5802546c 	.word	0x5802546c
 8007600:	58025480 	.word	0x58025480
 8007604:	58025494 	.word	0x58025494
 8007608:	fffe000f 	.word	0xfffe000f
 800760c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	68d2      	ldr	r2, [r2, #12]
 8007612:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007614:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800761c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007624:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800762c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007634:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800763c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	4313      	orrs	r3, r2
 8007642:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	4b6e      	ldr	r3, [pc, #440]	; (800780c <HAL_DMA_Init+0x650>)
 8007654:	4413      	add	r3, r2
 8007656:	4a6e      	ldr	r2, [pc, #440]	; (8007810 <HAL_DMA_Init+0x654>)
 8007658:	fba2 2303 	umull	r2, r3, r2, r3
 800765c:	091b      	lsrs	r3, r3, #4
 800765e:	009a      	lsls	r2, r3, #2
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f002 f9a9 	bl	80099bc <DMA_CalcBaseAndBitshift>
 800766a:	4603      	mov	r3, r0
 800766c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007672:	f003 031f 	and.w	r3, r3, #31
 8007676:	2201      	movs	r2, #1
 8007678:	409a      	lsls	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	605a      	str	r2, [r3, #4]
 800767e:	e008      	b.n	8007692 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2240      	movs	r2, #64	; 0x40
 8007684:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2203      	movs	r2, #3
 800768a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e0b7      	b.n	8007802 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a5f      	ldr	r2, [pc, #380]	; (8007814 <HAL_DMA_Init+0x658>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d072      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a5d      	ldr	r2, [pc, #372]	; (8007818 <HAL_DMA_Init+0x65c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d06d      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a5c      	ldr	r2, [pc, #368]	; (800781c <HAL_DMA_Init+0x660>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d068      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a5a      	ldr	r2, [pc, #360]	; (8007820 <HAL_DMA_Init+0x664>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d063      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a59      	ldr	r2, [pc, #356]	; (8007824 <HAL_DMA_Init+0x668>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d05e      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a57      	ldr	r2, [pc, #348]	; (8007828 <HAL_DMA_Init+0x66c>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d059      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a56      	ldr	r2, [pc, #344]	; (800782c <HAL_DMA_Init+0x670>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d054      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a54      	ldr	r2, [pc, #336]	; (8007830 <HAL_DMA_Init+0x674>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d04f      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a53      	ldr	r2, [pc, #332]	; (8007834 <HAL_DMA_Init+0x678>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d04a      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a51      	ldr	r2, [pc, #324]	; (8007838 <HAL_DMA_Init+0x67c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d045      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a50      	ldr	r2, [pc, #320]	; (800783c <HAL_DMA_Init+0x680>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d040      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a4e      	ldr	r2, [pc, #312]	; (8007840 <HAL_DMA_Init+0x684>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d03b      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a4d      	ldr	r2, [pc, #308]	; (8007844 <HAL_DMA_Init+0x688>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d036      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a4b      	ldr	r2, [pc, #300]	; (8007848 <HAL_DMA_Init+0x68c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d031      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a4a      	ldr	r2, [pc, #296]	; (800784c <HAL_DMA_Init+0x690>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d02c      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a48      	ldr	r2, [pc, #288]	; (8007850 <HAL_DMA_Init+0x694>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d027      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a47      	ldr	r2, [pc, #284]	; (8007854 <HAL_DMA_Init+0x698>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d022      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a45      	ldr	r2, [pc, #276]	; (8007858 <HAL_DMA_Init+0x69c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d01d      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a44      	ldr	r2, [pc, #272]	; (800785c <HAL_DMA_Init+0x6a0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d018      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a42      	ldr	r2, [pc, #264]	; (8007860 <HAL_DMA_Init+0x6a4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d013      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a41      	ldr	r2, [pc, #260]	; (8007864 <HAL_DMA_Init+0x6a8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00e      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a3f      	ldr	r2, [pc, #252]	; (8007868 <HAL_DMA_Init+0x6ac>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d009      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a3e      	ldr	r2, [pc, #248]	; (800786c <HAL_DMA_Init+0x6b0>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d004      	beq.n	8007782 <HAL_DMA_Init+0x5c6>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a3c      	ldr	r2, [pc, #240]	; (8007870 <HAL_DMA_Init+0x6b4>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d101      	bne.n	8007786 <HAL_DMA_Init+0x5ca>
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <HAL_DMA_Init+0x5cc>
 8007786:	2300      	movs	r3, #0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d032      	beq.n	80077f2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f002 fa43 	bl	8009c18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	2b80      	cmp	r3, #128	; 0x80
 8007798:	d102      	bne.n	80077a0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077a8:	b2d2      	uxtb	r2, r2
 80077aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80077b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d010      	beq.n	80077e0 <HAL_DMA_Init+0x624>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	2b08      	cmp	r3, #8
 80077c4:	d80c      	bhi.n	80077e0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f002 fac0 	bl	8009d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80077dc:	605a      	str	r2, [r3, #4]
 80077de:	e008      	b.n	80077f2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	a7fdabf8 	.word	0xa7fdabf8
 8007810:	cccccccd 	.word	0xcccccccd
 8007814:	40020010 	.word	0x40020010
 8007818:	40020028 	.word	0x40020028
 800781c:	40020040 	.word	0x40020040
 8007820:	40020058 	.word	0x40020058
 8007824:	40020070 	.word	0x40020070
 8007828:	40020088 	.word	0x40020088
 800782c:	400200a0 	.word	0x400200a0
 8007830:	400200b8 	.word	0x400200b8
 8007834:	40020410 	.word	0x40020410
 8007838:	40020428 	.word	0x40020428
 800783c:	40020440 	.word	0x40020440
 8007840:	40020458 	.word	0x40020458
 8007844:	40020470 	.word	0x40020470
 8007848:	40020488 	.word	0x40020488
 800784c:	400204a0 	.word	0x400204a0
 8007850:	400204b8 	.word	0x400204b8
 8007854:	58025408 	.word	0x58025408
 8007858:	5802541c 	.word	0x5802541c
 800785c:	58025430 	.word	0x58025430
 8007860:	58025444 	.word	0x58025444
 8007864:	58025458 	.word	0x58025458
 8007868:	5802546c 	.word	0x5802546c
 800786c:	58025480 	.word	0x58025480
 8007870:	58025494 	.word	0x58025494

08007874 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e226      	b.n	8007cde <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_DMA_Start_IT+0x2a>
 800789a:	2302      	movs	r3, #2
 800789c:	e21f      	b.n	8007cde <HAL_DMA_Start_IT+0x46a>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	f040 820a 	bne.w	8007cc8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a68      	ldr	r2, [pc, #416]	; (8007a68 <HAL_DMA_Start_IT+0x1f4>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d04a      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a66      	ldr	r2, [pc, #408]	; (8007a6c <HAL_DMA_Start_IT+0x1f8>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d045      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a65      	ldr	r2, [pc, #404]	; (8007a70 <HAL_DMA_Start_IT+0x1fc>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d040      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a63      	ldr	r2, [pc, #396]	; (8007a74 <HAL_DMA_Start_IT+0x200>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d03b      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a62      	ldr	r2, [pc, #392]	; (8007a78 <HAL_DMA_Start_IT+0x204>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d036      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a60      	ldr	r2, [pc, #384]	; (8007a7c <HAL_DMA_Start_IT+0x208>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d031      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a5f      	ldr	r2, [pc, #380]	; (8007a80 <HAL_DMA_Start_IT+0x20c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d02c      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a5d      	ldr	r2, [pc, #372]	; (8007a84 <HAL_DMA_Start_IT+0x210>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d027      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a5c      	ldr	r2, [pc, #368]	; (8007a88 <HAL_DMA_Start_IT+0x214>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d022      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a5a      	ldr	r2, [pc, #360]	; (8007a8c <HAL_DMA_Start_IT+0x218>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d01d      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a59      	ldr	r2, [pc, #356]	; (8007a90 <HAL_DMA_Start_IT+0x21c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d018      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a57      	ldr	r2, [pc, #348]	; (8007a94 <HAL_DMA_Start_IT+0x220>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d013      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a56      	ldr	r2, [pc, #344]	; (8007a98 <HAL_DMA_Start_IT+0x224>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d00e      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a54      	ldr	r2, [pc, #336]	; (8007a9c <HAL_DMA_Start_IT+0x228>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d009      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a53      	ldr	r2, [pc, #332]	; (8007aa0 <HAL_DMA_Start_IT+0x22c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d004      	beq.n	8007962 <HAL_DMA_Start_IT+0xee>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a51      	ldr	r2, [pc, #324]	; (8007aa4 <HAL_DMA_Start_IT+0x230>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d108      	bne.n	8007974 <HAL_DMA_Start_IT+0x100>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0201 	bic.w	r2, r2, #1
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	e007      	b.n	8007984 <HAL_DMA_Start_IT+0x110>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0201 	bic.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	68b9      	ldr	r1, [r7, #8]
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f001 fe6a 	bl	8009664 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a34      	ldr	r2, [pc, #208]	; (8007a68 <HAL_DMA_Start_IT+0x1f4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d04a      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a33      	ldr	r2, [pc, #204]	; (8007a6c <HAL_DMA_Start_IT+0x1f8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d045      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a31      	ldr	r2, [pc, #196]	; (8007a70 <HAL_DMA_Start_IT+0x1fc>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d040      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a30      	ldr	r2, [pc, #192]	; (8007a74 <HAL_DMA_Start_IT+0x200>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d03b      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a2e      	ldr	r2, [pc, #184]	; (8007a78 <HAL_DMA_Start_IT+0x204>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d036      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a2d      	ldr	r2, [pc, #180]	; (8007a7c <HAL_DMA_Start_IT+0x208>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d031      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a2b      	ldr	r2, [pc, #172]	; (8007a80 <HAL_DMA_Start_IT+0x20c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d02c      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a2a      	ldr	r2, [pc, #168]	; (8007a84 <HAL_DMA_Start_IT+0x210>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d027      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a28      	ldr	r2, [pc, #160]	; (8007a88 <HAL_DMA_Start_IT+0x214>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d022      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a27      	ldr	r2, [pc, #156]	; (8007a8c <HAL_DMA_Start_IT+0x218>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d01d      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a25      	ldr	r2, [pc, #148]	; (8007a90 <HAL_DMA_Start_IT+0x21c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d018      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a24      	ldr	r2, [pc, #144]	; (8007a94 <HAL_DMA_Start_IT+0x220>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d013      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a22      	ldr	r2, [pc, #136]	; (8007a98 <HAL_DMA_Start_IT+0x224>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00e      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a21      	ldr	r2, [pc, #132]	; (8007a9c <HAL_DMA_Start_IT+0x228>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d009      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a1f      	ldr	r2, [pc, #124]	; (8007aa0 <HAL_DMA_Start_IT+0x22c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d004      	beq.n	8007a30 <HAL_DMA_Start_IT+0x1bc>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a1e      	ldr	r2, [pc, #120]	; (8007aa4 <HAL_DMA_Start_IT+0x230>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d101      	bne.n	8007a34 <HAL_DMA_Start_IT+0x1c0>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e000      	b.n	8007a36 <HAL_DMA_Start_IT+0x1c2>
 8007a34:	2300      	movs	r3, #0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d036      	beq.n	8007aa8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f023 021e 	bic.w	r2, r3, #30
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f042 0216 	orr.w	r2, r2, #22
 8007a4c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d03e      	beq.n	8007ad4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f042 0208 	orr.w	r2, r2, #8
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	e035      	b.n	8007ad4 <HAL_DMA_Start_IT+0x260>
 8007a68:	40020010 	.word	0x40020010
 8007a6c:	40020028 	.word	0x40020028
 8007a70:	40020040 	.word	0x40020040
 8007a74:	40020058 	.word	0x40020058
 8007a78:	40020070 	.word	0x40020070
 8007a7c:	40020088 	.word	0x40020088
 8007a80:	400200a0 	.word	0x400200a0
 8007a84:	400200b8 	.word	0x400200b8
 8007a88:	40020410 	.word	0x40020410
 8007a8c:	40020428 	.word	0x40020428
 8007a90:	40020440 	.word	0x40020440
 8007a94:	40020458 	.word	0x40020458
 8007a98:	40020470 	.word	0x40020470
 8007a9c:	40020488 	.word	0x40020488
 8007aa0:	400204a0 	.word	0x400204a0
 8007aa4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f023 020e 	bic.w	r2, r3, #14
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f042 020a 	orr.w	r2, r2, #10
 8007aba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d007      	beq.n	8007ad4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0204 	orr.w	r2, r2, #4
 8007ad2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a83      	ldr	r2, [pc, #524]	; (8007ce8 <HAL_DMA_Start_IT+0x474>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d072      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a82      	ldr	r2, [pc, #520]	; (8007cec <HAL_DMA_Start_IT+0x478>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d06d      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a80      	ldr	r2, [pc, #512]	; (8007cf0 <HAL_DMA_Start_IT+0x47c>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d068      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a7f      	ldr	r2, [pc, #508]	; (8007cf4 <HAL_DMA_Start_IT+0x480>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d063      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a7d      	ldr	r2, [pc, #500]	; (8007cf8 <HAL_DMA_Start_IT+0x484>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d05e      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a7c      	ldr	r2, [pc, #496]	; (8007cfc <HAL_DMA_Start_IT+0x488>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d059      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a7a      	ldr	r2, [pc, #488]	; (8007d00 <HAL_DMA_Start_IT+0x48c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d054      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a79      	ldr	r2, [pc, #484]	; (8007d04 <HAL_DMA_Start_IT+0x490>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d04f      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a77      	ldr	r2, [pc, #476]	; (8007d08 <HAL_DMA_Start_IT+0x494>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d04a      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a76      	ldr	r2, [pc, #472]	; (8007d0c <HAL_DMA_Start_IT+0x498>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d045      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a74      	ldr	r2, [pc, #464]	; (8007d10 <HAL_DMA_Start_IT+0x49c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d040      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a73      	ldr	r2, [pc, #460]	; (8007d14 <HAL_DMA_Start_IT+0x4a0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d03b      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a71      	ldr	r2, [pc, #452]	; (8007d18 <HAL_DMA_Start_IT+0x4a4>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d036      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a70      	ldr	r2, [pc, #448]	; (8007d1c <HAL_DMA_Start_IT+0x4a8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d031      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a6e      	ldr	r2, [pc, #440]	; (8007d20 <HAL_DMA_Start_IT+0x4ac>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d02c      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a6d      	ldr	r2, [pc, #436]	; (8007d24 <HAL_DMA_Start_IT+0x4b0>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d027      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a6b      	ldr	r2, [pc, #428]	; (8007d28 <HAL_DMA_Start_IT+0x4b4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d022      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a6a      	ldr	r2, [pc, #424]	; (8007d2c <HAL_DMA_Start_IT+0x4b8>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d01d      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a68      	ldr	r2, [pc, #416]	; (8007d30 <HAL_DMA_Start_IT+0x4bc>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d018      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a67      	ldr	r2, [pc, #412]	; (8007d34 <HAL_DMA_Start_IT+0x4c0>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d013      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a65      	ldr	r2, [pc, #404]	; (8007d38 <HAL_DMA_Start_IT+0x4c4>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d00e      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a64      	ldr	r2, [pc, #400]	; (8007d3c <HAL_DMA_Start_IT+0x4c8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d009      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a62      	ldr	r2, [pc, #392]	; (8007d40 <HAL_DMA_Start_IT+0x4cc>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d004      	beq.n	8007bc4 <HAL_DMA_Start_IT+0x350>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a61      	ldr	r2, [pc, #388]	; (8007d44 <HAL_DMA_Start_IT+0x4d0>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d101      	bne.n	8007bc8 <HAL_DMA_Start_IT+0x354>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e000      	b.n	8007bca <HAL_DMA_Start_IT+0x356>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d01a      	beq.n	8007c04 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d007      	beq.n	8007c04 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a37      	ldr	r2, [pc, #220]	; (8007ce8 <HAL_DMA_Start_IT+0x474>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d04a      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a36      	ldr	r2, [pc, #216]	; (8007cec <HAL_DMA_Start_IT+0x478>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d045      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a34      	ldr	r2, [pc, #208]	; (8007cf0 <HAL_DMA_Start_IT+0x47c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d040      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a33      	ldr	r2, [pc, #204]	; (8007cf4 <HAL_DMA_Start_IT+0x480>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d03b      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a31      	ldr	r2, [pc, #196]	; (8007cf8 <HAL_DMA_Start_IT+0x484>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d036      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a30      	ldr	r2, [pc, #192]	; (8007cfc <HAL_DMA_Start_IT+0x488>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d031      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a2e      	ldr	r2, [pc, #184]	; (8007d00 <HAL_DMA_Start_IT+0x48c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d02c      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a2d      	ldr	r2, [pc, #180]	; (8007d04 <HAL_DMA_Start_IT+0x490>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d027      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a2b      	ldr	r2, [pc, #172]	; (8007d08 <HAL_DMA_Start_IT+0x494>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d022      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a2a      	ldr	r2, [pc, #168]	; (8007d0c <HAL_DMA_Start_IT+0x498>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d01d      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a28      	ldr	r2, [pc, #160]	; (8007d10 <HAL_DMA_Start_IT+0x49c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d018      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a27      	ldr	r2, [pc, #156]	; (8007d14 <HAL_DMA_Start_IT+0x4a0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d013      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a25      	ldr	r2, [pc, #148]	; (8007d18 <HAL_DMA_Start_IT+0x4a4>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00e      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a24      	ldr	r2, [pc, #144]	; (8007d1c <HAL_DMA_Start_IT+0x4a8>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d009      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a22      	ldr	r2, [pc, #136]	; (8007d20 <HAL_DMA_Start_IT+0x4ac>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d004      	beq.n	8007ca4 <HAL_DMA_Start_IT+0x430>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a21      	ldr	r2, [pc, #132]	; (8007d24 <HAL_DMA_Start_IT+0x4b0>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d108      	bne.n	8007cb6 <HAL_DMA_Start_IT+0x442>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0201 	orr.w	r2, r2, #1
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	e012      	b.n	8007cdc <HAL_DMA_Start_IT+0x468>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0201 	orr.w	r2, r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	e009      	b.n	8007cdc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	40020010 	.word	0x40020010
 8007cec:	40020028 	.word	0x40020028
 8007cf0:	40020040 	.word	0x40020040
 8007cf4:	40020058 	.word	0x40020058
 8007cf8:	40020070 	.word	0x40020070
 8007cfc:	40020088 	.word	0x40020088
 8007d00:	400200a0 	.word	0x400200a0
 8007d04:	400200b8 	.word	0x400200b8
 8007d08:	40020410 	.word	0x40020410
 8007d0c:	40020428 	.word	0x40020428
 8007d10:	40020440 	.word	0x40020440
 8007d14:	40020458 	.word	0x40020458
 8007d18:	40020470 	.word	0x40020470
 8007d1c:	40020488 	.word	0x40020488
 8007d20:	400204a0 	.word	0x400204a0
 8007d24:	400204b8 	.word	0x400204b8
 8007d28:	58025408 	.word	0x58025408
 8007d2c:	5802541c 	.word	0x5802541c
 8007d30:	58025430 	.word	0x58025430
 8007d34:	58025444 	.word	0x58025444
 8007d38:	58025458 	.word	0x58025458
 8007d3c:	5802546c 	.word	0x5802546c
 8007d40:	58025480 	.word	0x58025480
 8007d44:	58025494 	.word	0x58025494

08007d48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007d50:	f7fe fede 	bl	8006b10 <HAL_GetTick>
 8007d54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e2dc      	b.n	800831a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d008      	beq.n	8007d7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2280      	movs	r2, #128	; 0x80
 8007d70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e2cd      	b.n	800831a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a76      	ldr	r2, [pc, #472]	; (8007f5c <HAL_DMA_Abort+0x214>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d04a      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a74      	ldr	r2, [pc, #464]	; (8007f60 <HAL_DMA_Abort+0x218>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d045      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a73      	ldr	r2, [pc, #460]	; (8007f64 <HAL_DMA_Abort+0x21c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d040      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a71      	ldr	r2, [pc, #452]	; (8007f68 <HAL_DMA_Abort+0x220>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d03b      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a70      	ldr	r2, [pc, #448]	; (8007f6c <HAL_DMA_Abort+0x224>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d036      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a6e      	ldr	r2, [pc, #440]	; (8007f70 <HAL_DMA_Abort+0x228>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d031      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a6d      	ldr	r2, [pc, #436]	; (8007f74 <HAL_DMA_Abort+0x22c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d02c      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a6b      	ldr	r2, [pc, #428]	; (8007f78 <HAL_DMA_Abort+0x230>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d027      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a6a      	ldr	r2, [pc, #424]	; (8007f7c <HAL_DMA_Abort+0x234>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d022      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a68      	ldr	r2, [pc, #416]	; (8007f80 <HAL_DMA_Abort+0x238>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d01d      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a67      	ldr	r2, [pc, #412]	; (8007f84 <HAL_DMA_Abort+0x23c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d018      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a65      	ldr	r2, [pc, #404]	; (8007f88 <HAL_DMA_Abort+0x240>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d013      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a64      	ldr	r2, [pc, #400]	; (8007f8c <HAL_DMA_Abort+0x244>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d00e      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a62      	ldr	r2, [pc, #392]	; (8007f90 <HAL_DMA_Abort+0x248>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d009      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a61      	ldr	r2, [pc, #388]	; (8007f94 <HAL_DMA_Abort+0x24c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d004      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a5f      	ldr	r2, [pc, #380]	; (8007f98 <HAL_DMA_Abort+0x250>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d101      	bne.n	8007e22 <HAL_DMA_Abort+0xda>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e000      	b.n	8007e24 <HAL_DMA_Abort+0xdc>
 8007e22:	2300      	movs	r3, #0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d013      	beq.n	8007e50 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 021e 	bic.w	r2, r2, #30
 8007e36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695a      	ldr	r2, [r3, #20]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e46:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	617b      	str	r3, [r7, #20]
 8007e4e:	e00a      	b.n	8007e66 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f022 020e 	bic.w	r2, r2, #14
 8007e5e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a3c      	ldr	r2, [pc, #240]	; (8007f5c <HAL_DMA_Abort+0x214>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d072      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a3a      	ldr	r2, [pc, #232]	; (8007f60 <HAL_DMA_Abort+0x218>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d06d      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a39      	ldr	r2, [pc, #228]	; (8007f64 <HAL_DMA_Abort+0x21c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d068      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a37      	ldr	r2, [pc, #220]	; (8007f68 <HAL_DMA_Abort+0x220>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d063      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a36      	ldr	r2, [pc, #216]	; (8007f6c <HAL_DMA_Abort+0x224>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d05e      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a34      	ldr	r2, [pc, #208]	; (8007f70 <HAL_DMA_Abort+0x228>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d059      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a33      	ldr	r2, [pc, #204]	; (8007f74 <HAL_DMA_Abort+0x22c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d054      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a31      	ldr	r2, [pc, #196]	; (8007f78 <HAL_DMA_Abort+0x230>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d04f      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a30      	ldr	r2, [pc, #192]	; (8007f7c <HAL_DMA_Abort+0x234>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d04a      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a2e      	ldr	r2, [pc, #184]	; (8007f80 <HAL_DMA_Abort+0x238>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d045      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a2d      	ldr	r2, [pc, #180]	; (8007f84 <HAL_DMA_Abort+0x23c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d040      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a2b      	ldr	r2, [pc, #172]	; (8007f88 <HAL_DMA_Abort+0x240>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d03b      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a2a      	ldr	r2, [pc, #168]	; (8007f8c <HAL_DMA_Abort+0x244>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d036      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a28      	ldr	r2, [pc, #160]	; (8007f90 <HAL_DMA_Abort+0x248>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d031      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a27      	ldr	r2, [pc, #156]	; (8007f94 <HAL_DMA_Abort+0x24c>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d02c      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a25      	ldr	r2, [pc, #148]	; (8007f98 <HAL_DMA_Abort+0x250>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d027      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a24      	ldr	r2, [pc, #144]	; (8007f9c <HAL_DMA_Abort+0x254>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d022      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a22      	ldr	r2, [pc, #136]	; (8007fa0 <HAL_DMA_Abort+0x258>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d01d      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a21      	ldr	r2, [pc, #132]	; (8007fa4 <HAL_DMA_Abort+0x25c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d018      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a1f      	ldr	r2, [pc, #124]	; (8007fa8 <HAL_DMA_Abort+0x260>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d013      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a1e      	ldr	r2, [pc, #120]	; (8007fac <HAL_DMA_Abort+0x264>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d00e      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a1c      	ldr	r2, [pc, #112]	; (8007fb0 <HAL_DMA_Abort+0x268>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d009      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a1b      	ldr	r2, [pc, #108]	; (8007fb4 <HAL_DMA_Abort+0x26c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d004      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a19      	ldr	r2, [pc, #100]	; (8007fb8 <HAL_DMA_Abort+0x270>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d132      	bne.n	8007fbc <HAL_DMA_Abort+0x274>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e031      	b.n	8007fbe <HAL_DMA_Abort+0x276>
 8007f5a:	bf00      	nop
 8007f5c:	40020010 	.word	0x40020010
 8007f60:	40020028 	.word	0x40020028
 8007f64:	40020040 	.word	0x40020040
 8007f68:	40020058 	.word	0x40020058
 8007f6c:	40020070 	.word	0x40020070
 8007f70:	40020088 	.word	0x40020088
 8007f74:	400200a0 	.word	0x400200a0
 8007f78:	400200b8 	.word	0x400200b8
 8007f7c:	40020410 	.word	0x40020410
 8007f80:	40020428 	.word	0x40020428
 8007f84:	40020440 	.word	0x40020440
 8007f88:	40020458 	.word	0x40020458
 8007f8c:	40020470 	.word	0x40020470
 8007f90:	40020488 	.word	0x40020488
 8007f94:	400204a0 	.word	0x400204a0
 8007f98:	400204b8 	.word	0x400204b8
 8007f9c:	58025408 	.word	0x58025408
 8007fa0:	5802541c 	.word	0x5802541c
 8007fa4:	58025430 	.word	0x58025430
 8007fa8:	58025444 	.word	0x58025444
 8007fac:	58025458 	.word	0x58025458
 8007fb0:	5802546c 	.word	0x5802546c
 8007fb4:	58025480 	.word	0x58025480
 8007fb8:	58025494 	.word	0x58025494
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d007      	beq.n	8007fd2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a6d      	ldr	r2, [pc, #436]	; (800818c <HAL_DMA_Abort+0x444>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d04a      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a6b      	ldr	r2, [pc, #428]	; (8008190 <HAL_DMA_Abort+0x448>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d045      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a6a      	ldr	r2, [pc, #424]	; (8008194 <HAL_DMA_Abort+0x44c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d040      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a68      	ldr	r2, [pc, #416]	; (8008198 <HAL_DMA_Abort+0x450>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d03b      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a67      	ldr	r2, [pc, #412]	; (800819c <HAL_DMA_Abort+0x454>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d036      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a65      	ldr	r2, [pc, #404]	; (80081a0 <HAL_DMA_Abort+0x458>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d031      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a64      	ldr	r2, [pc, #400]	; (80081a4 <HAL_DMA_Abort+0x45c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d02c      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a62      	ldr	r2, [pc, #392]	; (80081a8 <HAL_DMA_Abort+0x460>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d027      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a61      	ldr	r2, [pc, #388]	; (80081ac <HAL_DMA_Abort+0x464>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d022      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a5f      	ldr	r2, [pc, #380]	; (80081b0 <HAL_DMA_Abort+0x468>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d01d      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a5e      	ldr	r2, [pc, #376]	; (80081b4 <HAL_DMA_Abort+0x46c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d018      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a5c      	ldr	r2, [pc, #368]	; (80081b8 <HAL_DMA_Abort+0x470>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a5b      	ldr	r2, [pc, #364]	; (80081bc <HAL_DMA_Abort+0x474>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00e      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a59      	ldr	r2, [pc, #356]	; (80081c0 <HAL_DMA_Abort+0x478>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a58      	ldr	r2, [pc, #352]	; (80081c4 <HAL_DMA_Abort+0x47c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a56      	ldr	r2, [pc, #344]	; (80081c8 <HAL_DMA_Abort+0x480>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d108      	bne.n	8008084 <HAL_DMA_Abort+0x33c>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0201 	bic.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	e007      	b.n	8008094 <HAL_DMA_Abort+0x34c>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008094:	e013      	b.n	80080be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008096:	f7fe fd3b 	bl	8006b10 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	2b05      	cmp	r3, #5
 80080a2:	d90c      	bls.n	80080be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2220      	movs	r2, #32
 80080a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2203      	movs	r2, #3
 80080ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e12d      	b.n	800831a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e5      	bne.n	8008096 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a2f      	ldr	r2, [pc, #188]	; (800818c <HAL_DMA_Abort+0x444>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d04a      	beq.n	800816a <HAL_DMA_Abort+0x422>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a2d      	ldr	r2, [pc, #180]	; (8008190 <HAL_DMA_Abort+0x448>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d045      	beq.n	800816a <HAL_DMA_Abort+0x422>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a2c      	ldr	r2, [pc, #176]	; (8008194 <HAL_DMA_Abort+0x44c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d040      	beq.n	800816a <HAL_DMA_Abort+0x422>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a2a      	ldr	r2, [pc, #168]	; (8008198 <HAL_DMA_Abort+0x450>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d03b      	beq.n	800816a <HAL_DMA_Abort+0x422>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a29      	ldr	r2, [pc, #164]	; (800819c <HAL_DMA_Abort+0x454>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d036      	beq.n	800816a <HAL_DMA_Abort+0x422>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a27      	ldr	r2, [pc, #156]	; (80081a0 <HAL_DMA_Abort+0x458>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d031      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a26      	ldr	r2, [pc, #152]	; (80081a4 <HAL_DMA_Abort+0x45c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d02c      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a24      	ldr	r2, [pc, #144]	; (80081a8 <HAL_DMA_Abort+0x460>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d027      	beq.n	800816a <HAL_DMA_Abort+0x422>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a23      	ldr	r2, [pc, #140]	; (80081ac <HAL_DMA_Abort+0x464>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d022      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a21      	ldr	r2, [pc, #132]	; (80081b0 <HAL_DMA_Abort+0x468>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d01d      	beq.n	800816a <HAL_DMA_Abort+0x422>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a20      	ldr	r2, [pc, #128]	; (80081b4 <HAL_DMA_Abort+0x46c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d018      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a1e      	ldr	r2, [pc, #120]	; (80081b8 <HAL_DMA_Abort+0x470>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d013      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a1d      	ldr	r2, [pc, #116]	; (80081bc <HAL_DMA_Abort+0x474>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00e      	beq.n	800816a <HAL_DMA_Abort+0x422>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <HAL_DMA_Abort+0x478>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d009      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a1a      	ldr	r2, [pc, #104]	; (80081c4 <HAL_DMA_Abort+0x47c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d004      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a18      	ldr	r2, [pc, #96]	; (80081c8 <HAL_DMA_Abort+0x480>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d101      	bne.n	800816e <HAL_DMA_Abort+0x426>
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <HAL_DMA_Abort+0x428>
 800816e:	2300      	movs	r3, #0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d02b      	beq.n	80081cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008178:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817e:	f003 031f 	and.w	r3, r3, #31
 8008182:	223f      	movs	r2, #63	; 0x3f
 8008184:	409a      	lsls	r2, r3
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	609a      	str	r2, [r3, #8]
 800818a:	e02a      	b.n	80081e2 <HAL_DMA_Abort+0x49a>
 800818c:	40020010 	.word	0x40020010
 8008190:	40020028 	.word	0x40020028
 8008194:	40020040 	.word	0x40020040
 8008198:	40020058 	.word	0x40020058
 800819c:	40020070 	.word	0x40020070
 80081a0:	40020088 	.word	0x40020088
 80081a4:	400200a0 	.word	0x400200a0
 80081a8:	400200b8 	.word	0x400200b8
 80081ac:	40020410 	.word	0x40020410
 80081b0:	40020428 	.word	0x40020428
 80081b4:	40020440 	.word	0x40020440
 80081b8:	40020458 	.word	0x40020458
 80081bc:	40020470 	.word	0x40020470
 80081c0:	40020488 	.word	0x40020488
 80081c4:	400204a0 	.word	0x400204a0
 80081c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d6:	f003 031f 	and.w	r3, r3, #31
 80081da:	2201      	movs	r2, #1
 80081dc:	409a      	lsls	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a4f      	ldr	r2, [pc, #316]	; (8008324 <HAL_DMA_Abort+0x5dc>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d072      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a4d      	ldr	r2, [pc, #308]	; (8008328 <HAL_DMA_Abort+0x5e0>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d06d      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a4c      	ldr	r2, [pc, #304]	; (800832c <HAL_DMA_Abort+0x5e4>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d068      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a4a      	ldr	r2, [pc, #296]	; (8008330 <HAL_DMA_Abort+0x5e8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d063      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a49      	ldr	r2, [pc, #292]	; (8008334 <HAL_DMA_Abort+0x5ec>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d05e      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a47      	ldr	r2, [pc, #284]	; (8008338 <HAL_DMA_Abort+0x5f0>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d059      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a46      	ldr	r2, [pc, #280]	; (800833c <HAL_DMA_Abort+0x5f4>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d054      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a44      	ldr	r2, [pc, #272]	; (8008340 <HAL_DMA_Abort+0x5f8>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d04f      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a43      	ldr	r2, [pc, #268]	; (8008344 <HAL_DMA_Abort+0x5fc>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d04a      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a41      	ldr	r2, [pc, #260]	; (8008348 <HAL_DMA_Abort+0x600>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d045      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a40      	ldr	r2, [pc, #256]	; (800834c <HAL_DMA_Abort+0x604>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d040      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a3e      	ldr	r2, [pc, #248]	; (8008350 <HAL_DMA_Abort+0x608>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d03b      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a3d      	ldr	r2, [pc, #244]	; (8008354 <HAL_DMA_Abort+0x60c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d036      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a3b      	ldr	r2, [pc, #236]	; (8008358 <HAL_DMA_Abort+0x610>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d031      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a3a      	ldr	r2, [pc, #232]	; (800835c <HAL_DMA_Abort+0x614>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d02c      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a38      	ldr	r2, [pc, #224]	; (8008360 <HAL_DMA_Abort+0x618>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d027      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a37      	ldr	r2, [pc, #220]	; (8008364 <HAL_DMA_Abort+0x61c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d022      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a35      	ldr	r2, [pc, #212]	; (8008368 <HAL_DMA_Abort+0x620>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d01d      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a34      	ldr	r2, [pc, #208]	; (800836c <HAL_DMA_Abort+0x624>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d018      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a32      	ldr	r2, [pc, #200]	; (8008370 <HAL_DMA_Abort+0x628>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d013      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a31      	ldr	r2, [pc, #196]	; (8008374 <HAL_DMA_Abort+0x62c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00e      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a2f      	ldr	r2, [pc, #188]	; (8008378 <HAL_DMA_Abort+0x630>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d009      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a2e      	ldr	r2, [pc, #184]	; (800837c <HAL_DMA_Abort+0x634>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d004      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a2c      	ldr	r2, [pc, #176]	; (8008380 <HAL_DMA_Abort+0x638>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d101      	bne.n	80082d6 <HAL_DMA_Abort+0x58e>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <HAL_DMA_Abort+0x590>
 80082d6:	2300      	movs	r3, #0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d015      	beq.n	8008308 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80082e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00c      	beq.n	8008308 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008306:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	40020010 	.word	0x40020010
 8008328:	40020028 	.word	0x40020028
 800832c:	40020040 	.word	0x40020040
 8008330:	40020058 	.word	0x40020058
 8008334:	40020070 	.word	0x40020070
 8008338:	40020088 	.word	0x40020088
 800833c:	400200a0 	.word	0x400200a0
 8008340:	400200b8 	.word	0x400200b8
 8008344:	40020410 	.word	0x40020410
 8008348:	40020428 	.word	0x40020428
 800834c:	40020440 	.word	0x40020440
 8008350:	40020458 	.word	0x40020458
 8008354:	40020470 	.word	0x40020470
 8008358:	40020488 	.word	0x40020488
 800835c:	400204a0 	.word	0x400204a0
 8008360:	400204b8 	.word	0x400204b8
 8008364:	58025408 	.word	0x58025408
 8008368:	5802541c 	.word	0x5802541c
 800836c:	58025430 	.word	0x58025430
 8008370:	58025444 	.word	0x58025444
 8008374:	58025458 	.word	0x58025458
 8008378:	5802546c 	.word	0x5802546c
 800837c:	58025480 	.word	0x58025480
 8008380:	58025494 	.word	0x58025494

08008384 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e237      	b.n	8008806 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d004      	beq.n	80083ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2280      	movs	r2, #128	; 0x80
 80083a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e22c      	b.n	8008806 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a5c      	ldr	r2, [pc, #368]	; (8008524 <HAL_DMA_Abort_IT+0x1a0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d04a      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a5b      	ldr	r2, [pc, #364]	; (8008528 <HAL_DMA_Abort_IT+0x1a4>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d045      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a59      	ldr	r2, [pc, #356]	; (800852c <HAL_DMA_Abort_IT+0x1a8>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d040      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a58      	ldr	r2, [pc, #352]	; (8008530 <HAL_DMA_Abort_IT+0x1ac>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d03b      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a56      	ldr	r2, [pc, #344]	; (8008534 <HAL_DMA_Abort_IT+0x1b0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d036      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a55      	ldr	r2, [pc, #340]	; (8008538 <HAL_DMA_Abort_IT+0x1b4>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d031      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a53      	ldr	r2, [pc, #332]	; (800853c <HAL_DMA_Abort_IT+0x1b8>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d02c      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a52      	ldr	r2, [pc, #328]	; (8008540 <HAL_DMA_Abort_IT+0x1bc>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d027      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a50      	ldr	r2, [pc, #320]	; (8008544 <HAL_DMA_Abort_IT+0x1c0>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d022      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a4f      	ldr	r2, [pc, #316]	; (8008548 <HAL_DMA_Abort_IT+0x1c4>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d01d      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a4d      	ldr	r2, [pc, #308]	; (800854c <HAL_DMA_Abort_IT+0x1c8>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d018      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a4c      	ldr	r2, [pc, #304]	; (8008550 <HAL_DMA_Abort_IT+0x1cc>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d013      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a4a      	ldr	r2, [pc, #296]	; (8008554 <HAL_DMA_Abort_IT+0x1d0>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d00e      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a49      	ldr	r2, [pc, #292]	; (8008558 <HAL_DMA_Abort_IT+0x1d4>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d009      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a47      	ldr	r2, [pc, #284]	; (800855c <HAL_DMA_Abort_IT+0x1d8>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d004      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a46      	ldr	r2, [pc, #280]	; (8008560 <HAL_DMA_Abort_IT+0x1dc>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d101      	bne.n	8008450 <HAL_DMA_Abort_IT+0xcc>
 800844c:	2301      	movs	r3, #1
 800844e:	e000      	b.n	8008452 <HAL_DMA_Abort_IT+0xce>
 8008450:	2300      	movs	r3, #0
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 8086 	beq.w	8008564 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2204      	movs	r2, #4
 800845c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a2f      	ldr	r2, [pc, #188]	; (8008524 <HAL_DMA_Abort_IT+0x1a0>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d04a      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a2e      	ldr	r2, [pc, #184]	; (8008528 <HAL_DMA_Abort_IT+0x1a4>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d045      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a2c      	ldr	r2, [pc, #176]	; (800852c <HAL_DMA_Abort_IT+0x1a8>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d040      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a2b      	ldr	r2, [pc, #172]	; (8008530 <HAL_DMA_Abort_IT+0x1ac>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d03b      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a29      	ldr	r2, [pc, #164]	; (8008534 <HAL_DMA_Abort_IT+0x1b0>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d036      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a28      	ldr	r2, [pc, #160]	; (8008538 <HAL_DMA_Abort_IT+0x1b4>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d031      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a26      	ldr	r2, [pc, #152]	; (800853c <HAL_DMA_Abort_IT+0x1b8>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d02c      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a25      	ldr	r2, [pc, #148]	; (8008540 <HAL_DMA_Abort_IT+0x1bc>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d027      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a23      	ldr	r2, [pc, #140]	; (8008544 <HAL_DMA_Abort_IT+0x1c0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d022      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a22      	ldr	r2, [pc, #136]	; (8008548 <HAL_DMA_Abort_IT+0x1c4>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d01d      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a20      	ldr	r2, [pc, #128]	; (800854c <HAL_DMA_Abort_IT+0x1c8>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d018      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a1f      	ldr	r2, [pc, #124]	; (8008550 <HAL_DMA_Abort_IT+0x1cc>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d013      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a1d      	ldr	r2, [pc, #116]	; (8008554 <HAL_DMA_Abort_IT+0x1d0>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00e      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a1c      	ldr	r2, [pc, #112]	; (8008558 <HAL_DMA_Abort_IT+0x1d4>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d009      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a1a      	ldr	r2, [pc, #104]	; (800855c <HAL_DMA_Abort_IT+0x1d8>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a19      	ldr	r2, [pc, #100]	; (8008560 <HAL_DMA_Abort_IT+0x1dc>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d108      	bne.n	8008512 <HAL_DMA_Abort_IT+0x18e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f022 0201 	bic.w	r2, r2, #1
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	e178      	b.n	8008804 <HAL_DMA_Abort_IT+0x480>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0201 	bic.w	r2, r2, #1
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	e16f      	b.n	8008804 <HAL_DMA_Abort_IT+0x480>
 8008524:	40020010 	.word	0x40020010
 8008528:	40020028 	.word	0x40020028
 800852c:	40020040 	.word	0x40020040
 8008530:	40020058 	.word	0x40020058
 8008534:	40020070 	.word	0x40020070
 8008538:	40020088 	.word	0x40020088
 800853c:	400200a0 	.word	0x400200a0
 8008540:	400200b8 	.word	0x400200b8
 8008544:	40020410 	.word	0x40020410
 8008548:	40020428 	.word	0x40020428
 800854c:	40020440 	.word	0x40020440
 8008550:	40020458 	.word	0x40020458
 8008554:	40020470 	.word	0x40020470
 8008558:	40020488 	.word	0x40020488
 800855c:	400204a0 	.word	0x400204a0
 8008560:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 020e 	bic.w	r2, r2, #14
 8008572:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a6c      	ldr	r2, [pc, #432]	; (800872c <HAL_DMA_Abort_IT+0x3a8>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d04a      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a6b      	ldr	r2, [pc, #428]	; (8008730 <HAL_DMA_Abort_IT+0x3ac>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d045      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a69      	ldr	r2, [pc, #420]	; (8008734 <HAL_DMA_Abort_IT+0x3b0>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d040      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a68      	ldr	r2, [pc, #416]	; (8008738 <HAL_DMA_Abort_IT+0x3b4>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d03b      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a66      	ldr	r2, [pc, #408]	; (800873c <HAL_DMA_Abort_IT+0x3b8>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d036      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a65      	ldr	r2, [pc, #404]	; (8008740 <HAL_DMA_Abort_IT+0x3bc>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d031      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a63      	ldr	r2, [pc, #396]	; (8008744 <HAL_DMA_Abort_IT+0x3c0>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d02c      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a62      	ldr	r2, [pc, #392]	; (8008748 <HAL_DMA_Abort_IT+0x3c4>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d027      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a60      	ldr	r2, [pc, #384]	; (800874c <HAL_DMA_Abort_IT+0x3c8>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d022      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a5f      	ldr	r2, [pc, #380]	; (8008750 <HAL_DMA_Abort_IT+0x3cc>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d01d      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a5d      	ldr	r2, [pc, #372]	; (8008754 <HAL_DMA_Abort_IT+0x3d0>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d018      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a5c      	ldr	r2, [pc, #368]	; (8008758 <HAL_DMA_Abort_IT+0x3d4>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d013      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a5a      	ldr	r2, [pc, #360]	; (800875c <HAL_DMA_Abort_IT+0x3d8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00e      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a59      	ldr	r2, [pc, #356]	; (8008760 <HAL_DMA_Abort_IT+0x3dc>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d009      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a57      	ldr	r2, [pc, #348]	; (8008764 <HAL_DMA_Abort_IT+0x3e0>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d004      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a56      	ldr	r2, [pc, #344]	; (8008768 <HAL_DMA_Abort_IT+0x3e4>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d108      	bne.n	8008626 <HAL_DMA_Abort_IT+0x2a2>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0201 	bic.w	r2, r2, #1
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	e007      	b.n	8008636 <HAL_DMA_Abort_IT+0x2b2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f022 0201 	bic.w	r2, r2, #1
 8008634:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a3c      	ldr	r2, [pc, #240]	; (800872c <HAL_DMA_Abort_IT+0x3a8>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d072      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a3a      	ldr	r2, [pc, #232]	; (8008730 <HAL_DMA_Abort_IT+0x3ac>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d06d      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a39      	ldr	r2, [pc, #228]	; (8008734 <HAL_DMA_Abort_IT+0x3b0>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d068      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a37      	ldr	r2, [pc, #220]	; (8008738 <HAL_DMA_Abort_IT+0x3b4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d063      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a36      	ldr	r2, [pc, #216]	; (800873c <HAL_DMA_Abort_IT+0x3b8>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d05e      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a34      	ldr	r2, [pc, #208]	; (8008740 <HAL_DMA_Abort_IT+0x3bc>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d059      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a33      	ldr	r2, [pc, #204]	; (8008744 <HAL_DMA_Abort_IT+0x3c0>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d054      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a31      	ldr	r2, [pc, #196]	; (8008748 <HAL_DMA_Abort_IT+0x3c4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d04f      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a30      	ldr	r2, [pc, #192]	; (800874c <HAL_DMA_Abort_IT+0x3c8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d04a      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a2e      	ldr	r2, [pc, #184]	; (8008750 <HAL_DMA_Abort_IT+0x3cc>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d045      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a2d      	ldr	r2, [pc, #180]	; (8008754 <HAL_DMA_Abort_IT+0x3d0>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d040      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a2b      	ldr	r2, [pc, #172]	; (8008758 <HAL_DMA_Abort_IT+0x3d4>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d03b      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a2a      	ldr	r2, [pc, #168]	; (800875c <HAL_DMA_Abort_IT+0x3d8>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d036      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a28      	ldr	r2, [pc, #160]	; (8008760 <HAL_DMA_Abort_IT+0x3dc>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d031      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a27      	ldr	r2, [pc, #156]	; (8008764 <HAL_DMA_Abort_IT+0x3e0>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d02c      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a25      	ldr	r2, [pc, #148]	; (8008768 <HAL_DMA_Abort_IT+0x3e4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d027      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a24      	ldr	r2, [pc, #144]	; (800876c <HAL_DMA_Abort_IT+0x3e8>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d022      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a22      	ldr	r2, [pc, #136]	; (8008770 <HAL_DMA_Abort_IT+0x3ec>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01d      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a21      	ldr	r2, [pc, #132]	; (8008774 <HAL_DMA_Abort_IT+0x3f0>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d018      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a1f      	ldr	r2, [pc, #124]	; (8008778 <HAL_DMA_Abort_IT+0x3f4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d013      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a1e      	ldr	r2, [pc, #120]	; (800877c <HAL_DMA_Abort_IT+0x3f8>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00e      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a1c      	ldr	r2, [pc, #112]	; (8008780 <HAL_DMA_Abort_IT+0x3fc>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d009      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a1b      	ldr	r2, [pc, #108]	; (8008784 <HAL_DMA_Abort_IT+0x400>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d004      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a19      	ldr	r2, [pc, #100]	; (8008788 <HAL_DMA_Abort_IT+0x404>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d132      	bne.n	800878c <HAL_DMA_Abort_IT+0x408>
 8008726:	2301      	movs	r3, #1
 8008728:	e031      	b.n	800878e <HAL_DMA_Abort_IT+0x40a>
 800872a:	bf00      	nop
 800872c:	40020010 	.word	0x40020010
 8008730:	40020028 	.word	0x40020028
 8008734:	40020040 	.word	0x40020040
 8008738:	40020058 	.word	0x40020058
 800873c:	40020070 	.word	0x40020070
 8008740:	40020088 	.word	0x40020088
 8008744:	400200a0 	.word	0x400200a0
 8008748:	400200b8 	.word	0x400200b8
 800874c:	40020410 	.word	0x40020410
 8008750:	40020428 	.word	0x40020428
 8008754:	40020440 	.word	0x40020440
 8008758:	40020458 	.word	0x40020458
 800875c:	40020470 	.word	0x40020470
 8008760:	40020488 	.word	0x40020488
 8008764:	400204a0 	.word	0x400204a0
 8008768:	400204b8 	.word	0x400204b8
 800876c:	58025408 	.word	0x58025408
 8008770:	5802541c 	.word	0x5802541c
 8008774:	58025430 	.word	0x58025430
 8008778:	58025444 	.word	0x58025444
 800877c:	58025458 	.word	0x58025458
 8008780:	5802546c 	.word	0x5802546c
 8008784:	58025480 	.word	0x58025480
 8008788:	58025494 	.word	0x58025494
 800878c:	2300      	movs	r3, #0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d028      	beq.n	80087e4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800879c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ac:	f003 031f 	and.w	r3, r3, #31
 80087b0:	2201      	movs	r2, #1
 80087b2:	409a      	lsls	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80087c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00c      	beq.n	80087e4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80087e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop

08008810 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08a      	sub	sp, #40	; 0x28
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800881c:	4b67      	ldr	r3, [pc, #412]	; (80089bc <HAL_DMA_IRQHandler+0x1ac>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a67      	ldr	r2, [pc, #412]	; (80089c0 <HAL_DMA_IRQHandler+0x1b0>)
 8008822:	fba2 2303 	umull	r2, r3, r2, r3
 8008826:	0a9b      	lsrs	r3, r3, #10
 8008828:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008834:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a5f      	ldr	r2, [pc, #380]	; (80089c4 <HAL_DMA_IRQHandler+0x1b4>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d04a      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a5d      	ldr	r2, [pc, #372]	; (80089c8 <HAL_DMA_IRQHandler+0x1b8>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d045      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a5c      	ldr	r2, [pc, #368]	; (80089cc <HAL_DMA_IRQHandler+0x1bc>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d040      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a5a      	ldr	r2, [pc, #360]	; (80089d0 <HAL_DMA_IRQHandler+0x1c0>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d03b      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a59      	ldr	r2, [pc, #356]	; (80089d4 <HAL_DMA_IRQHandler+0x1c4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d036      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a57      	ldr	r2, [pc, #348]	; (80089d8 <HAL_DMA_IRQHandler+0x1c8>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d031      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a56      	ldr	r2, [pc, #344]	; (80089dc <HAL_DMA_IRQHandler+0x1cc>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d02c      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a54      	ldr	r2, [pc, #336]	; (80089e0 <HAL_DMA_IRQHandler+0x1d0>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d027      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a53      	ldr	r2, [pc, #332]	; (80089e4 <HAL_DMA_IRQHandler+0x1d4>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d022      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a51      	ldr	r2, [pc, #324]	; (80089e8 <HAL_DMA_IRQHandler+0x1d8>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d01d      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a50      	ldr	r2, [pc, #320]	; (80089ec <HAL_DMA_IRQHandler+0x1dc>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d018      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a4e      	ldr	r2, [pc, #312]	; (80089f0 <HAL_DMA_IRQHandler+0x1e0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d013      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a4d      	ldr	r2, [pc, #308]	; (80089f4 <HAL_DMA_IRQHandler+0x1e4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00e      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a4b      	ldr	r2, [pc, #300]	; (80089f8 <HAL_DMA_IRQHandler+0x1e8>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d009      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a4a      	ldr	r2, [pc, #296]	; (80089fc <HAL_DMA_IRQHandler+0x1ec>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d004      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a48      	ldr	r2, [pc, #288]	; (8008a00 <HAL_DMA_IRQHandler+0x1f0>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d101      	bne.n	80088e6 <HAL_DMA_IRQHandler+0xd6>
 80088e2:	2301      	movs	r3, #1
 80088e4:	e000      	b.n	80088e8 <HAL_DMA_IRQHandler+0xd8>
 80088e6:	2300      	movs	r3, #0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 842b 	beq.w	8009144 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f2:	f003 031f 	and.w	r3, r3, #31
 80088f6:	2208      	movs	r2, #8
 80088f8:	409a      	lsls	r2, r3
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	4013      	ands	r3, r2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 80a2 	beq.w	8008a48 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a2e      	ldr	r2, [pc, #184]	; (80089c4 <HAL_DMA_IRQHandler+0x1b4>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d04a      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a2d      	ldr	r2, [pc, #180]	; (80089c8 <HAL_DMA_IRQHandler+0x1b8>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d045      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a2b      	ldr	r2, [pc, #172]	; (80089cc <HAL_DMA_IRQHandler+0x1bc>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d040      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a2a      	ldr	r2, [pc, #168]	; (80089d0 <HAL_DMA_IRQHandler+0x1c0>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d03b      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a28      	ldr	r2, [pc, #160]	; (80089d4 <HAL_DMA_IRQHandler+0x1c4>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d036      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a27      	ldr	r2, [pc, #156]	; (80089d8 <HAL_DMA_IRQHandler+0x1c8>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d031      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a25      	ldr	r2, [pc, #148]	; (80089dc <HAL_DMA_IRQHandler+0x1cc>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d02c      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a24      	ldr	r2, [pc, #144]	; (80089e0 <HAL_DMA_IRQHandler+0x1d0>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d027      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a22      	ldr	r2, [pc, #136]	; (80089e4 <HAL_DMA_IRQHandler+0x1d4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d022      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a21      	ldr	r2, [pc, #132]	; (80089e8 <HAL_DMA_IRQHandler+0x1d8>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d01d      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1f      	ldr	r2, [pc, #124]	; (80089ec <HAL_DMA_IRQHandler+0x1dc>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d018      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a1e      	ldr	r2, [pc, #120]	; (80089f0 <HAL_DMA_IRQHandler+0x1e0>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d013      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a1c      	ldr	r2, [pc, #112]	; (80089f4 <HAL_DMA_IRQHandler+0x1e4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00e      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a1b      	ldr	r2, [pc, #108]	; (80089f8 <HAL_DMA_IRQHandler+0x1e8>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d009      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a19      	ldr	r2, [pc, #100]	; (80089fc <HAL_DMA_IRQHandler+0x1ec>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d004      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a18      	ldr	r2, [pc, #96]	; (8008a00 <HAL_DMA_IRQHandler+0x1f0>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d12f      	bne.n	8008a04 <HAL_DMA_IRQHandler+0x1f4>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0304 	and.w	r3, r3, #4
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bf14      	ite	ne
 80089b2:	2301      	movne	r3, #1
 80089b4:	2300      	moveq	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	e02e      	b.n	8008a18 <HAL_DMA_IRQHandler+0x208>
 80089ba:	bf00      	nop
 80089bc:	24000230 	.word	0x24000230
 80089c0:	1b4e81b5 	.word	0x1b4e81b5
 80089c4:	40020010 	.word	0x40020010
 80089c8:	40020028 	.word	0x40020028
 80089cc:	40020040 	.word	0x40020040
 80089d0:	40020058 	.word	0x40020058
 80089d4:	40020070 	.word	0x40020070
 80089d8:	40020088 	.word	0x40020088
 80089dc:	400200a0 	.word	0x400200a0
 80089e0:	400200b8 	.word	0x400200b8
 80089e4:	40020410 	.word	0x40020410
 80089e8:	40020428 	.word	0x40020428
 80089ec:	40020440 	.word	0x40020440
 80089f0:	40020458 	.word	0x40020458
 80089f4:	40020470 	.word	0x40020470
 80089f8:	40020488 	.word	0x40020488
 80089fc:	400204a0 	.word	0x400204a0
 8008a00:	400204b8 	.word	0x400204b8
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	bf14      	ite	ne
 8008a12:	2301      	movne	r3, #1
 8008a14:	2300      	moveq	r3, #0
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d015      	beq.n	8008a48 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0204 	bic.w	r2, r2, #4
 8008a2a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a30:	f003 031f 	and.w	r3, r3, #31
 8008a34:	2208      	movs	r2, #8
 8008a36:	409a      	lsls	r2, r3
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a40:	f043 0201 	orr.w	r2, r3, #1
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a4c:	f003 031f 	and.w	r3, r3, #31
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	fa22 f303 	lsr.w	r3, r2, r3
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d06e      	beq.n	8008b3c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a69      	ldr	r2, [pc, #420]	; (8008c08 <HAL_DMA_IRQHandler+0x3f8>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d04a      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a67      	ldr	r2, [pc, #412]	; (8008c0c <HAL_DMA_IRQHandler+0x3fc>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d045      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a66      	ldr	r2, [pc, #408]	; (8008c10 <HAL_DMA_IRQHandler+0x400>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d040      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a64      	ldr	r2, [pc, #400]	; (8008c14 <HAL_DMA_IRQHandler+0x404>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d03b      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a63      	ldr	r2, [pc, #396]	; (8008c18 <HAL_DMA_IRQHandler+0x408>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d036      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a61      	ldr	r2, [pc, #388]	; (8008c1c <HAL_DMA_IRQHandler+0x40c>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d031      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a60      	ldr	r2, [pc, #384]	; (8008c20 <HAL_DMA_IRQHandler+0x410>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d02c      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a5e      	ldr	r2, [pc, #376]	; (8008c24 <HAL_DMA_IRQHandler+0x414>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d027      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a5d      	ldr	r2, [pc, #372]	; (8008c28 <HAL_DMA_IRQHandler+0x418>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d022      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a5b      	ldr	r2, [pc, #364]	; (8008c2c <HAL_DMA_IRQHandler+0x41c>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d01d      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a5a      	ldr	r2, [pc, #360]	; (8008c30 <HAL_DMA_IRQHandler+0x420>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d018      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a58      	ldr	r2, [pc, #352]	; (8008c34 <HAL_DMA_IRQHandler+0x424>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d013      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a57      	ldr	r2, [pc, #348]	; (8008c38 <HAL_DMA_IRQHandler+0x428>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d00e      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a55      	ldr	r2, [pc, #340]	; (8008c3c <HAL_DMA_IRQHandler+0x42c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d009      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a54      	ldr	r2, [pc, #336]	; (8008c40 <HAL_DMA_IRQHandler+0x430>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d004      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a52      	ldr	r2, [pc, #328]	; (8008c44 <HAL_DMA_IRQHandler+0x434>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d10a      	bne.n	8008b14 <HAL_DMA_IRQHandler+0x304>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bf14      	ite	ne
 8008b0c:	2301      	movne	r3, #1
 8008b0e:	2300      	moveq	r3, #0
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	e003      	b.n	8008b1c <HAL_DMA_IRQHandler+0x30c>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00d      	beq.n	8008b3c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b24:	f003 031f 	and.w	r3, r3, #31
 8008b28:	2201      	movs	r2, #1
 8008b2a:	409a      	lsls	r2, r3
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b34:	f043 0202 	orr.w	r2, r3, #2
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b40:	f003 031f 	and.w	r3, r3, #31
 8008b44:	2204      	movs	r2, #4
 8008b46:	409a      	lsls	r2, r3
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 808f 	beq.w	8008c70 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a2c      	ldr	r2, [pc, #176]	; (8008c08 <HAL_DMA_IRQHandler+0x3f8>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d04a      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a2a      	ldr	r2, [pc, #168]	; (8008c0c <HAL_DMA_IRQHandler+0x3fc>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d045      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a29      	ldr	r2, [pc, #164]	; (8008c10 <HAL_DMA_IRQHandler+0x400>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d040      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a27      	ldr	r2, [pc, #156]	; (8008c14 <HAL_DMA_IRQHandler+0x404>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d03b      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a26      	ldr	r2, [pc, #152]	; (8008c18 <HAL_DMA_IRQHandler+0x408>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d036      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a24      	ldr	r2, [pc, #144]	; (8008c1c <HAL_DMA_IRQHandler+0x40c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d031      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a23      	ldr	r2, [pc, #140]	; (8008c20 <HAL_DMA_IRQHandler+0x410>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d02c      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a21      	ldr	r2, [pc, #132]	; (8008c24 <HAL_DMA_IRQHandler+0x414>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d027      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a20      	ldr	r2, [pc, #128]	; (8008c28 <HAL_DMA_IRQHandler+0x418>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d022      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a1e      	ldr	r2, [pc, #120]	; (8008c2c <HAL_DMA_IRQHandler+0x41c>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d01d      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a1d      	ldr	r2, [pc, #116]	; (8008c30 <HAL_DMA_IRQHandler+0x420>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d018      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a1b      	ldr	r2, [pc, #108]	; (8008c34 <HAL_DMA_IRQHandler+0x424>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d013      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a1a      	ldr	r2, [pc, #104]	; (8008c38 <HAL_DMA_IRQHandler+0x428>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d00e      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a18      	ldr	r2, [pc, #96]	; (8008c3c <HAL_DMA_IRQHandler+0x42c>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d009      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a17      	ldr	r2, [pc, #92]	; (8008c40 <HAL_DMA_IRQHandler+0x430>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d004      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a15      	ldr	r2, [pc, #84]	; (8008c44 <HAL_DMA_IRQHandler+0x434>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d12a      	bne.n	8008c48 <HAL_DMA_IRQHandler+0x438>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bf14      	ite	ne
 8008c00:	2301      	movne	r3, #1
 8008c02:	2300      	moveq	r3, #0
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	e023      	b.n	8008c50 <HAL_DMA_IRQHandler+0x440>
 8008c08:	40020010 	.word	0x40020010
 8008c0c:	40020028 	.word	0x40020028
 8008c10:	40020040 	.word	0x40020040
 8008c14:	40020058 	.word	0x40020058
 8008c18:	40020070 	.word	0x40020070
 8008c1c:	40020088 	.word	0x40020088
 8008c20:	400200a0 	.word	0x400200a0
 8008c24:	400200b8 	.word	0x400200b8
 8008c28:	40020410 	.word	0x40020410
 8008c2c:	40020428 	.word	0x40020428
 8008c30:	40020440 	.word	0x40020440
 8008c34:	40020458 	.word	0x40020458
 8008c38:	40020470 	.word	0x40020470
 8008c3c:	40020488 	.word	0x40020488
 8008c40:	400204a0 	.word	0x400204a0
 8008c44:	400204b8 	.word	0x400204b8
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00d      	beq.n	8008c70 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c58:	f003 031f 	and.w	r3, r3, #31
 8008c5c:	2204      	movs	r2, #4
 8008c5e:	409a      	lsls	r2, r3
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c68:	f043 0204 	orr.w	r2, r3, #4
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c74:	f003 031f 	and.w	r3, r3, #31
 8008c78:	2210      	movs	r2, #16
 8008c7a:	409a      	lsls	r2, r3
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	4013      	ands	r3, r2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f000 80a6 	beq.w	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a85      	ldr	r2, [pc, #532]	; (8008ea0 <HAL_DMA_IRQHandler+0x690>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d04a      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a83      	ldr	r2, [pc, #524]	; (8008ea4 <HAL_DMA_IRQHandler+0x694>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d045      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a82      	ldr	r2, [pc, #520]	; (8008ea8 <HAL_DMA_IRQHandler+0x698>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d040      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a80      	ldr	r2, [pc, #512]	; (8008eac <HAL_DMA_IRQHandler+0x69c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d03b      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a7f      	ldr	r2, [pc, #508]	; (8008eb0 <HAL_DMA_IRQHandler+0x6a0>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d036      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a7d      	ldr	r2, [pc, #500]	; (8008eb4 <HAL_DMA_IRQHandler+0x6a4>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d031      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a7c      	ldr	r2, [pc, #496]	; (8008eb8 <HAL_DMA_IRQHandler+0x6a8>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d02c      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a7a      	ldr	r2, [pc, #488]	; (8008ebc <HAL_DMA_IRQHandler+0x6ac>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d027      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a79      	ldr	r2, [pc, #484]	; (8008ec0 <HAL_DMA_IRQHandler+0x6b0>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d022      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a77      	ldr	r2, [pc, #476]	; (8008ec4 <HAL_DMA_IRQHandler+0x6b4>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d01d      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a76      	ldr	r2, [pc, #472]	; (8008ec8 <HAL_DMA_IRQHandler+0x6b8>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d018      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a74      	ldr	r2, [pc, #464]	; (8008ecc <HAL_DMA_IRQHandler+0x6bc>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d013      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a73      	ldr	r2, [pc, #460]	; (8008ed0 <HAL_DMA_IRQHandler+0x6c0>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d00e      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a71      	ldr	r2, [pc, #452]	; (8008ed4 <HAL_DMA_IRQHandler+0x6c4>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d009      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a70      	ldr	r2, [pc, #448]	; (8008ed8 <HAL_DMA_IRQHandler+0x6c8>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d004      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a6e      	ldr	r2, [pc, #440]	; (8008edc <HAL_DMA_IRQHandler+0x6cc>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d10a      	bne.n	8008d3c <HAL_DMA_IRQHandler+0x52c>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0308 	and.w	r3, r3, #8
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	bf14      	ite	ne
 8008d34:	2301      	movne	r3, #1
 8008d36:	2300      	moveq	r3, #0
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	e009      	b.n	8008d50 <HAL_DMA_IRQHandler+0x540>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0304 	and.w	r3, r3, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bf14      	ite	ne
 8008d4a:	2301      	movne	r3, #1
 8008d4c:	2300      	moveq	r3, #0
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d03e      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d58:	f003 031f 	and.w	r3, r3, #31
 8008d5c:	2210      	movs	r2, #16
 8008d5e:	409a      	lsls	r2, r3
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d018      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d108      	bne.n	8008d92 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d024      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	4798      	blx	r3
 8008d90:	e01f      	b.n	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01b      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	4798      	blx	r3
 8008da2:	e016      	b.n	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d107      	bne.n	8008dc2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 0208 	bic.w	r2, r2, #8
 8008dc0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd6:	f003 031f 	and.w	r3, r3, #31
 8008dda:	2220      	movs	r2, #32
 8008ddc:	409a      	lsls	r2, r3
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	4013      	ands	r3, r2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 8110 	beq.w	8009008 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a2c      	ldr	r2, [pc, #176]	; (8008ea0 <HAL_DMA_IRQHandler+0x690>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d04a      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a2b      	ldr	r2, [pc, #172]	; (8008ea4 <HAL_DMA_IRQHandler+0x694>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d045      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a29      	ldr	r2, [pc, #164]	; (8008ea8 <HAL_DMA_IRQHandler+0x698>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d040      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a28      	ldr	r2, [pc, #160]	; (8008eac <HAL_DMA_IRQHandler+0x69c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d03b      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a26      	ldr	r2, [pc, #152]	; (8008eb0 <HAL_DMA_IRQHandler+0x6a0>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d036      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a25      	ldr	r2, [pc, #148]	; (8008eb4 <HAL_DMA_IRQHandler+0x6a4>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d031      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a23      	ldr	r2, [pc, #140]	; (8008eb8 <HAL_DMA_IRQHandler+0x6a8>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d02c      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a22      	ldr	r2, [pc, #136]	; (8008ebc <HAL_DMA_IRQHandler+0x6ac>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d027      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a20      	ldr	r2, [pc, #128]	; (8008ec0 <HAL_DMA_IRQHandler+0x6b0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d022      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a1f      	ldr	r2, [pc, #124]	; (8008ec4 <HAL_DMA_IRQHandler+0x6b4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d01d      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a1d      	ldr	r2, [pc, #116]	; (8008ec8 <HAL_DMA_IRQHandler+0x6b8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d018      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a1c      	ldr	r2, [pc, #112]	; (8008ecc <HAL_DMA_IRQHandler+0x6bc>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d013      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a1a      	ldr	r2, [pc, #104]	; (8008ed0 <HAL_DMA_IRQHandler+0x6c0>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d00e      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a19      	ldr	r2, [pc, #100]	; (8008ed4 <HAL_DMA_IRQHandler+0x6c4>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d009      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a17      	ldr	r2, [pc, #92]	; (8008ed8 <HAL_DMA_IRQHandler+0x6c8>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d004      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a16      	ldr	r2, [pc, #88]	; (8008edc <HAL_DMA_IRQHandler+0x6cc>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d12b      	bne.n	8008ee0 <HAL_DMA_IRQHandler+0x6d0>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0310 	and.w	r3, r3, #16
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	bf14      	ite	ne
 8008e96:	2301      	movne	r3, #1
 8008e98:	2300      	moveq	r3, #0
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	e02a      	b.n	8008ef4 <HAL_DMA_IRQHandler+0x6e4>
 8008e9e:	bf00      	nop
 8008ea0:	40020010 	.word	0x40020010
 8008ea4:	40020028 	.word	0x40020028
 8008ea8:	40020040 	.word	0x40020040
 8008eac:	40020058 	.word	0x40020058
 8008eb0:	40020070 	.word	0x40020070
 8008eb4:	40020088 	.word	0x40020088
 8008eb8:	400200a0 	.word	0x400200a0
 8008ebc:	400200b8 	.word	0x400200b8
 8008ec0:	40020410 	.word	0x40020410
 8008ec4:	40020428 	.word	0x40020428
 8008ec8:	40020440 	.word	0x40020440
 8008ecc:	40020458 	.word	0x40020458
 8008ed0:	40020470 	.word	0x40020470
 8008ed4:	40020488 	.word	0x40020488
 8008ed8:	400204a0 	.word	0x400204a0
 8008edc:	400204b8 	.word	0x400204b8
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0302 	and.w	r3, r3, #2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	bf14      	ite	ne
 8008eee:	2301      	movne	r3, #1
 8008ef0:	2300      	moveq	r3, #0
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f000 8087 	beq.w	8009008 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008efe:	f003 031f 	and.w	r3, r3, #31
 8008f02:	2220      	movs	r2, #32
 8008f04:	409a      	lsls	r2, r3
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b04      	cmp	r3, #4
 8008f14:	d139      	bne.n	8008f8a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 0216 	bic.w	r2, r2, #22
 8008f24:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	695a      	ldr	r2, [r3, #20]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f34:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d103      	bne.n	8008f46 <HAL_DMA_IRQHandler+0x736>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d007      	beq.n	8008f56 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 0208 	bic.w	r2, r2, #8
 8008f54:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f5a:	f003 031f 	and.w	r3, r3, #31
 8008f5e:	223f      	movs	r2, #63	; 0x3f
 8008f60:	409a      	lsls	r2, r3
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 834a 	beq.w	8009614 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	4798      	blx	r3
          }
          return;
 8008f88:	e344      	b.n	8009614 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d018      	beq.n	8008fca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d108      	bne.n	8008fb8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d02c      	beq.n	8009008 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	4798      	blx	r3
 8008fb6:	e027      	b.n	8009008 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d023      	beq.n	8009008 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	4798      	blx	r3
 8008fc8:	e01e      	b.n	8009008 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10f      	bne.n	8008ff8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 0210 	bic.w	r2, r2, #16
 8008fe6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8306 	beq.w	800961e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 8088 	beq.w	8009130 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2204      	movs	r2, #4
 8009024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a7a      	ldr	r2, [pc, #488]	; (8009218 <HAL_DMA_IRQHandler+0xa08>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d04a      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a79      	ldr	r2, [pc, #484]	; (800921c <HAL_DMA_IRQHandler+0xa0c>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d045      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a77      	ldr	r2, [pc, #476]	; (8009220 <HAL_DMA_IRQHandler+0xa10>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d040      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a76      	ldr	r2, [pc, #472]	; (8009224 <HAL_DMA_IRQHandler+0xa14>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d03b      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a74      	ldr	r2, [pc, #464]	; (8009228 <HAL_DMA_IRQHandler+0xa18>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d036      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a73      	ldr	r2, [pc, #460]	; (800922c <HAL_DMA_IRQHandler+0xa1c>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d031      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a71      	ldr	r2, [pc, #452]	; (8009230 <HAL_DMA_IRQHandler+0xa20>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d02c      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a70      	ldr	r2, [pc, #448]	; (8009234 <HAL_DMA_IRQHandler+0xa24>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d027      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a6e      	ldr	r2, [pc, #440]	; (8009238 <HAL_DMA_IRQHandler+0xa28>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d022      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a6d      	ldr	r2, [pc, #436]	; (800923c <HAL_DMA_IRQHandler+0xa2c>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d01d      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a6b      	ldr	r2, [pc, #428]	; (8009240 <HAL_DMA_IRQHandler+0xa30>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d018      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a6a      	ldr	r2, [pc, #424]	; (8009244 <HAL_DMA_IRQHandler+0xa34>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d013      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a68      	ldr	r2, [pc, #416]	; (8009248 <HAL_DMA_IRQHandler+0xa38>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d00e      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a67      	ldr	r2, [pc, #412]	; (800924c <HAL_DMA_IRQHandler+0xa3c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d009      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a65      	ldr	r2, [pc, #404]	; (8009250 <HAL_DMA_IRQHandler+0xa40>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d004      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a64      	ldr	r2, [pc, #400]	; (8009254 <HAL_DMA_IRQHandler+0xa44>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d108      	bne.n	80090da <HAL_DMA_IRQHandler+0x8ca>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 0201 	bic.w	r2, r2, #1
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	e007      	b.n	80090ea <HAL_DMA_IRQHandler+0x8da>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 0201 	bic.w	r2, r2, #1
 80090e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3301      	adds	r3, #1
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d307      	bcc.n	8009106 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1f2      	bne.n	80090ea <HAL_DMA_IRQHandler+0x8da>
 8009104:	e000      	b.n	8009108 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009106:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d004      	beq.n	8009120 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2203      	movs	r2, #3
 800911a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800911e:	e003      	b.n	8009128 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 8272 	beq.w	800961e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	4798      	blx	r3
 8009142:	e26c      	b.n	800961e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a43      	ldr	r2, [pc, #268]	; (8009258 <HAL_DMA_IRQHandler+0xa48>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d022      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a42      	ldr	r2, [pc, #264]	; (800925c <HAL_DMA_IRQHandler+0xa4c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d01d      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a40      	ldr	r2, [pc, #256]	; (8009260 <HAL_DMA_IRQHandler+0xa50>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d018      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a3f      	ldr	r2, [pc, #252]	; (8009264 <HAL_DMA_IRQHandler+0xa54>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d013      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a3d      	ldr	r2, [pc, #244]	; (8009268 <HAL_DMA_IRQHandler+0xa58>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00e      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a3c      	ldr	r2, [pc, #240]	; (800926c <HAL_DMA_IRQHandler+0xa5c>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d009      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a3a      	ldr	r2, [pc, #232]	; (8009270 <HAL_DMA_IRQHandler+0xa60>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d004      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a39      	ldr	r2, [pc, #228]	; (8009274 <HAL_DMA_IRQHandler+0xa64>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d101      	bne.n	8009198 <HAL_DMA_IRQHandler+0x988>
 8009194:	2301      	movs	r3, #1
 8009196:	e000      	b.n	800919a <HAL_DMA_IRQHandler+0x98a>
 8009198:	2300      	movs	r3, #0
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 823f 	beq.w	800961e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ac:	f003 031f 	and.w	r3, r3, #31
 80091b0:	2204      	movs	r2, #4
 80091b2:	409a      	lsls	r2, r3
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	4013      	ands	r3, r2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 80cd 	beq.w	8009358 <HAL_DMA_IRQHandler+0xb48>
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 80c7 	beq.w	8009358 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ce:	f003 031f 	and.w	r3, r3, #31
 80091d2:	2204      	movs	r2, #4
 80091d4:	409a      	lsls	r2, r3
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d049      	beq.n	8009278 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d109      	bne.n	8009202 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 8210 	beq.w	8009618 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009200:	e20a      	b.n	8009618 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 8206 	beq.w	8009618 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009214:	e200      	b.n	8009618 <HAL_DMA_IRQHandler+0xe08>
 8009216:	bf00      	nop
 8009218:	40020010 	.word	0x40020010
 800921c:	40020028 	.word	0x40020028
 8009220:	40020040 	.word	0x40020040
 8009224:	40020058 	.word	0x40020058
 8009228:	40020070 	.word	0x40020070
 800922c:	40020088 	.word	0x40020088
 8009230:	400200a0 	.word	0x400200a0
 8009234:	400200b8 	.word	0x400200b8
 8009238:	40020410 	.word	0x40020410
 800923c:	40020428 	.word	0x40020428
 8009240:	40020440 	.word	0x40020440
 8009244:	40020458 	.word	0x40020458
 8009248:	40020470 	.word	0x40020470
 800924c:	40020488 	.word	0x40020488
 8009250:	400204a0 	.word	0x400204a0
 8009254:	400204b8 	.word	0x400204b8
 8009258:	58025408 	.word	0x58025408
 800925c:	5802541c 	.word	0x5802541c
 8009260:	58025430 	.word	0x58025430
 8009264:	58025444 	.word	0x58025444
 8009268:	58025458 	.word	0x58025458
 800926c:	5802546c 	.word	0x5802546c
 8009270:	58025480 	.word	0x58025480
 8009274:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	f003 0320 	and.w	r3, r3, #32
 800927e:	2b00      	cmp	r3, #0
 8009280:	d160      	bne.n	8009344 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a7f      	ldr	r2, [pc, #508]	; (8009484 <HAL_DMA_IRQHandler+0xc74>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d04a      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a7d      	ldr	r2, [pc, #500]	; (8009488 <HAL_DMA_IRQHandler+0xc78>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d045      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a7c      	ldr	r2, [pc, #496]	; (800948c <HAL_DMA_IRQHandler+0xc7c>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d040      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a7a      	ldr	r2, [pc, #488]	; (8009490 <HAL_DMA_IRQHandler+0xc80>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d03b      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a79      	ldr	r2, [pc, #484]	; (8009494 <HAL_DMA_IRQHandler+0xc84>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d036      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a77      	ldr	r2, [pc, #476]	; (8009498 <HAL_DMA_IRQHandler+0xc88>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d031      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a76      	ldr	r2, [pc, #472]	; (800949c <HAL_DMA_IRQHandler+0xc8c>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d02c      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a74      	ldr	r2, [pc, #464]	; (80094a0 <HAL_DMA_IRQHandler+0xc90>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d027      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a73      	ldr	r2, [pc, #460]	; (80094a4 <HAL_DMA_IRQHandler+0xc94>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d022      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a71      	ldr	r2, [pc, #452]	; (80094a8 <HAL_DMA_IRQHandler+0xc98>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d01d      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a70      	ldr	r2, [pc, #448]	; (80094ac <HAL_DMA_IRQHandler+0xc9c>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d018      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a6e      	ldr	r2, [pc, #440]	; (80094b0 <HAL_DMA_IRQHandler+0xca0>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d013      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a6d      	ldr	r2, [pc, #436]	; (80094b4 <HAL_DMA_IRQHandler+0xca4>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d00e      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a6b      	ldr	r2, [pc, #428]	; (80094b8 <HAL_DMA_IRQHandler+0xca8>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d009      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a6a      	ldr	r2, [pc, #424]	; (80094bc <HAL_DMA_IRQHandler+0xcac>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d004      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a68      	ldr	r2, [pc, #416]	; (80094c0 <HAL_DMA_IRQHandler+0xcb0>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d108      	bne.n	8009334 <HAL_DMA_IRQHandler+0xb24>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f022 0208 	bic.w	r2, r2, #8
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	e007      	b.n	8009344 <HAL_DMA_IRQHandler+0xb34>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 0204 	bic.w	r2, r2, #4
 8009342:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 8165 	beq.w	8009618 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009356:	e15f      	b.n	8009618 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800935c:	f003 031f 	and.w	r3, r3, #31
 8009360:	2202      	movs	r2, #2
 8009362:	409a      	lsls	r2, r3
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	4013      	ands	r3, r2
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 80c5 	beq.w	80094f8 <HAL_DMA_IRQHandler+0xce8>
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 80bf 	beq.w	80094f8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800937e:	f003 031f 	and.w	r3, r3, #31
 8009382:	2202      	movs	r2, #2
 8009384:	409a      	lsls	r2, r3
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d018      	beq.n	80093c6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d109      	bne.n	80093b2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 813a 	beq.w	800961c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093b0:	e134      	b.n	800961c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 8130 	beq.w	800961c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093c4:	e12a      	b.n	800961c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f003 0320 	and.w	r3, r3, #32
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f040 8089 	bne.w	80094e4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a2b      	ldr	r2, [pc, #172]	; (8009484 <HAL_DMA_IRQHandler+0xc74>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d04a      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a29      	ldr	r2, [pc, #164]	; (8009488 <HAL_DMA_IRQHandler+0xc78>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d045      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a28      	ldr	r2, [pc, #160]	; (800948c <HAL_DMA_IRQHandler+0xc7c>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d040      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a26      	ldr	r2, [pc, #152]	; (8009490 <HAL_DMA_IRQHandler+0xc80>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d03b      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a25      	ldr	r2, [pc, #148]	; (8009494 <HAL_DMA_IRQHandler+0xc84>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d036      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a23      	ldr	r2, [pc, #140]	; (8009498 <HAL_DMA_IRQHandler+0xc88>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d031      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a22      	ldr	r2, [pc, #136]	; (800949c <HAL_DMA_IRQHandler+0xc8c>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d02c      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a20      	ldr	r2, [pc, #128]	; (80094a0 <HAL_DMA_IRQHandler+0xc90>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d027      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a1f      	ldr	r2, [pc, #124]	; (80094a4 <HAL_DMA_IRQHandler+0xc94>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d022      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a1d      	ldr	r2, [pc, #116]	; (80094a8 <HAL_DMA_IRQHandler+0xc98>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d01d      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a1c      	ldr	r2, [pc, #112]	; (80094ac <HAL_DMA_IRQHandler+0xc9c>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d018      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a1a      	ldr	r2, [pc, #104]	; (80094b0 <HAL_DMA_IRQHandler+0xca0>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d013      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a19      	ldr	r2, [pc, #100]	; (80094b4 <HAL_DMA_IRQHandler+0xca4>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d00e      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a17      	ldr	r2, [pc, #92]	; (80094b8 <HAL_DMA_IRQHandler+0xca8>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d009      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a16      	ldr	r2, [pc, #88]	; (80094bc <HAL_DMA_IRQHandler+0xcac>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d004      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a14      	ldr	r2, [pc, #80]	; (80094c0 <HAL_DMA_IRQHandler+0xcb0>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d128      	bne.n	80094c4 <HAL_DMA_IRQHandler+0xcb4>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f022 0214 	bic.w	r2, r2, #20
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	e027      	b.n	80094d4 <HAL_DMA_IRQHandler+0xcc4>
 8009484:	40020010 	.word	0x40020010
 8009488:	40020028 	.word	0x40020028
 800948c:	40020040 	.word	0x40020040
 8009490:	40020058 	.word	0x40020058
 8009494:	40020070 	.word	0x40020070
 8009498:	40020088 	.word	0x40020088
 800949c:	400200a0 	.word	0x400200a0
 80094a0:	400200b8 	.word	0x400200b8
 80094a4:	40020410 	.word	0x40020410
 80094a8:	40020428 	.word	0x40020428
 80094ac:	40020440 	.word	0x40020440
 80094b0:	40020458 	.word	0x40020458
 80094b4:	40020470 	.word	0x40020470
 80094b8:	40020488 	.word	0x40020488
 80094bc:	400204a0 	.word	0x400204a0
 80094c0:	400204b8 	.word	0x400204b8
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f022 020a 	bic.w	r2, r2, #10
 80094d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 8097 	beq.w	800961c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094f6:	e091      	b.n	800961c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094fc:	f003 031f 	and.w	r3, r3, #31
 8009500:	2208      	movs	r2, #8
 8009502:	409a      	lsls	r2, r3
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	4013      	ands	r3, r2
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 8088 	beq.w	800961e <HAL_DMA_IRQHandler+0xe0e>
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	f003 0308 	and.w	r3, r3, #8
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 8082 	beq.w	800961e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a41      	ldr	r2, [pc, #260]	; (8009624 <HAL_DMA_IRQHandler+0xe14>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d04a      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a3f      	ldr	r2, [pc, #252]	; (8009628 <HAL_DMA_IRQHandler+0xe18>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d045      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a3e      	ldr	r2, [pc, #248]	; (800962c <HAL_DMA_IRQHandler+0xe1c>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d040      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a3c      	ldr	r2, [pc, #240]	; (8009630 <HAL_DMA_IRQHandler+0xe20>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d03b      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a3b      	ldr	r2, [pc, #236]	; (8009634 <HAL_DMA_IRQHandler+0xe24>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d036      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a39      	ldr	r2, [pc, #228]	; (8009638 <HAL_DMA_IRQHandler+0xe28>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d031      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a38      	ldr	r2, [pc, #224]	; (800963c <HAL_DMA_IRQHandler+0xe2c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d02c      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a36      	ldr	r2, [pc, #216]	; (8009640 <HAL_DMA_IRQHandler+0xe30>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d027      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a35      	ldr	r2, [pc, #212]	; (8009644 <HAL_DMA_IRQHandler+0xe34>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d022      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a33      	ldr	r2, [pc, #204]	; (8009648 <HAL_DMA_IRQHandler+0xe38>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d01d      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a32      	ldr	r2, [pc, #200]	; (800964c <HAL_DMA_IRQHandler+0xe3c>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d018      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a30      	ldr	r2, [pc, #192]	; (8009650 <HAL_DMA_IRQHandler+0xe40>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d013      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a2f      	ldr	r2, [pc, #188]	; (8009654 <HAL_DMA_IRQHandler+0xe44>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d00e      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a2d      	ldr	r2, [pc, #180]	; (8009658 <HAL_DMA_IRQHandler+0xe48>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d009      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a2c      	ldr	r2, [pc, #176]	; (800965c <HAL_DMA_IRQHandler+0xe4c>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d004      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a2a      	ldr	r2, [pc, #168]	; (8009660 <HAL_DMA_IRQHandler+0xe50>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d108      	bne.n	80095cc <HAL_DMA_IRQHandler+0xdbc>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 021c 	bic.w	r2, r2, #28
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	e007      	b.n	80095dc <HAL_DMA_IRQHandler+0xdcc>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 020e 	bic.w	r2, r2, #14
 80095da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095e0:	f003 031f 	and.w	r3, r3, #31
 80095e4:	2201      	movs	r2, #1
 80095e6:	409a      	lsls	r2, r3
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009606:	2b00      	cmp	r3, #0
 8009608:	d009      	beq.n	800961e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	4798      	blx	r3
 8009612:	e004      	b.n	800961e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009614:	bf00      	nop
 8009616:	e002      	b.n	800961e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009618:	bf00      	nop
 800961a:	e000      	b.n	800961e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800961c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800961e:	3728      	adds	r7, #40	; 0x28
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	40020010 	.word	0x40020010
 8009628:	40020028 	.word	0x40020028
 800962c:	40020040 	.word	0x40020040
 8009630:	40020058 	.word	0x40020058
 8009634:	40020070 	.word	0x40020070
 8009638:	40020088 	.word	0x40020088
 800963c:	400200a0 	.word	0x400200a0
 8009640:	400200b8 	.word	0x400200b8
 8009644:	40020410 	.word	0x40020410
 8009648:	40020428 	.word	0x40020428
 800964c:	40020440 	.word	0x40020440
 8009650:	40020458 	.word	0x40020458
 8009654:	40020470 	.word	0x40020470
 8009658:	40020488 	.word	0x40020488
 800965c:	400204a0 	.word	0x400204a0
 8009660:	400204b8 	.word	0x400204b8

08009664 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009664:	b480      	push	{r7}
 8009666:	b087      	sub	sp, #28
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009676:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800967c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a7f      	ldr	r2, [pc, #508]	; (8009880 <DMA_SetConfig+0x21c>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d072      	beq.n	800976e <DMA_SetConfig+0x10a>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a7d      	ldr	r2, [pc, #500]	; (8009884 <DMA_SetConfig+0x220>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d06d      	beq.n	800976e <DMA_SetConfig+0x10a>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a7c      	ldr	r2, [pc, #496]	; (8009888 <DMA_SetConfig+0x224>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d068      	beq.n	800976e <DMA_SetConfig+0x10a>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a7a      	ldr	r2, [pc, #488]	; (800988c <DMA_SetConfig+0x228>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d063      	beq.n	800976e <DMA_SetConfig+0x10a>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a79      	ldr	r2, [pc, #484]	; (8009890 <DMA_SetConfig+0x22c>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d05e      	beq.n	800976e <DMA_SetConfig+0x10a>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a77      	ldr	r2, [pc, #476]	; (8009894 <DMA_SetConfig+0x230>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d059      	beq.n	800976e <DMA_SetConfig+0x10a>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a76      	ldr	r2, [pc, #472]	; (8009898 <DMA_SetConfig+0x234>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d054      	beq.n	800976e <DMA_SetConfig+0x10a>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a74      	ldr	r2, [pc, #464]	; (800989c <DMA_SetConfig+0x238>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d04f      	beq.n	800976e <DMA_SetConfig+0x10a>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a73      	ldr	r2, [pc, #460]	; (80098a0 <DMA_SetConfig+0x23c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d04a      	beq.n	800976e <DMA_SetConfig+0x10a>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a71      	ldr	r2, [pc, #452]	; (80098a4 <DMA_SetConfig+0x240>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d045      	beq.n	800976e <DMA_SetConfig+0x10a>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a70      	ldr	r2, [pc, #448]	; (80098a8 <DMA_SetConfig+0x244>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d040      	beq.n	800976e <DMA_SetConfig+0x10a>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a6e      	ldr	r2, [pc, #440]	; (80098ac <DMA_SetConfig+0x248>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d03b      	beq.n	800976e <DMA_SetConfig+0x10a>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a6d      	ldr	r2, [pc, #436]	; (80098b0 <DMA_SetConfig+0x24c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d036      	beq.n	800976e <DMA_SetConfig+0x10a>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a6b      	ldr	r2, [pc, #428]	; (80098b4 <DMA_SetConfig+0x250>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d031      	beq.n	800976e <DMA_SetConfig+0x10a>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a6a      	ldr	r2, [pc, #424]	; (80098b8 <DMA_SetConfig+0x254>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d02c      	beq.n	800976e <DMA_SetConfig+0x10a>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a68      	ldr	r2, [pc, #416]	; (80098bc <DMA_SetConfig+0x258>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d027      	beq.n	800976e <DMA_SetConfig+0x10a>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a67      	ldr	r2, [pc, #412]	; (80098c0 <DMA_SetConfig+0x25c>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d022      	beq.n	800976e <DMA_SetConfig+0x10a>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a65      	ldr	r2, [pc, #404]	; (80098c4 <DMA_SetConfig+0x260>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d01d      	beq.n	800976e <DMA_SetConfig+0x10a>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a64      	ldr	r2, [pc, #400]	; (80098c8 <DMA_SetConfig+0x264>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d018      	beq.n	800976e <DMA_SetConfig+0x10a>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a62      	ldr	r2, [pc, #392]	; (80098cc <DMA_SetConfig+0x268>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d013      	beq.n	800976e <DMA_SetConfig+0x10a>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a61      	ldr	r2, [pc, #388]	; (80098d0 <DMA_SetConfig+0x26c>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d00e      	beq.n	800976e <DMA_SetConfig+0x10a>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a5f      	ldr	r2, [pc, #380]	; (80098d4 <DMA_SetConfig+0x270>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d009      	beq.n	800976e <DMA_SetConfig+0x10a>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a5e      	ldr	r2, [pc, #376]	; (80098d8 <DMA_SetConfig+0x274>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d004      	beq.n	800976e <DMA_SetConfig+0x10a>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a5c      	ldr	r2, [pc, #368]	; (80098dc <DMA_SetConfig+0x278>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d101      	bne.n	8009772 <DMA_SetConfig+0x10e>
 800976e:	2301      	movs	r3, #1
 8009770:	e000      	b.n	8009774 <DMA_SetConfig+0x110>
 8009772:	2300      	movs	r3, #0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00d      	beq.n	8009794 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009780:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009786:	2b00      	cmp	r3, #0
 8009788:	d004      	beq.n	8009794 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009792:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a39      	ldr	r2, [pc, #228]	; (8009880 <DMA_SetConfig+0x21c>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d04a      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a38      	ldr	r2, [pc, #224]	; (8009884 <DMA_SetConfig+0x220>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d045      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a36      	ldr	r2, [pc, #216]	; (8009888 <DMA_SetConfig+0x224>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d040      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a35      	ldr	r2, [pc, #212]	; (800988c <DMA_SetConfig+0x228>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d03b      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a33      	ldr	r2, [pc, #204]	; (8009890 <DMA_SetConfig+0x22c>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d036      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a32      	ldr	r2, [pc, #200]	; (8009894 <DMA_SetConfig+0x230>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d031      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a30      	ldr	r2, [pc, #192]	; (8009898 <DMA_SetConfig+0x234>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d02c      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a2f      	ldr	r2, [pc, #188]	; (800989c <DMA_SetConfig+0x238>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d027      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a2d      	ldr	r2, [pc, #180]	; (80098a0 <DMA_SetConfig+0x23c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d022      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a2c      	ldr	r2, [pc, #176]	; (80098a4 <DMA_SetConfig+0x240>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d01d      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a2a      	ldr	r2, [pc, #168]	; (80098a8 <DMA_SetConfig+0x244>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d018      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a29      	ldr	r2, [pc, #164]	; (80098ac <DMA_SetConfig+0x248>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d013      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a27      	ldr	r2, [pc, #156]	; (80098b0 <DMA_SetConfig+0x24c>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d00e      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a26      	ldr	r2, [pc, #152]	; (80098b4 <DMA_SetConfig+0x250>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d009      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a24      	ldr	r2, [pc, #144]	; (80098b8 <DMA_SetConfig+0x254>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d004      	beq.n	8009834 <DMA_SetConfig+0x1d0>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a23      	ldr	r2, [pc, #140]	; (80098bc <DMA_SetConfig+0x258>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d101      	bne.n	8009838 <DMA_SetConfig+0x1d4>
 8009834:	2301      	movs	r3, #1
 8009836:	e000      	b.n	800983a <DMA_SetConfig+0x1d6>
 8009838:	2300      	movs	r3, #0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d059      	beq.n	80098f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009842:	f003 031f 	and.w	r3, r3, #31
 8009846:	223f      	movs	r2, #63	; 0x3f
 8009848:	409a      	lsls	r2, r3
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800985c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	2b40      	cmp	r3, #64	; 0x40
 800986c:	d138      	bne.n	80098e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800987e:	e086      	b.n	800998e <DMA_SetConfig+0x32a>
 8009880:	40020010 	.word	0x40020010
 8009884:	40020028 	.word	0x40020028
 8009888:	40020040 	.word	0x40020040
 800988c:	40020058 	.word	0x40020058
 8009890:	40020070 	.word	0x40020070
 8009894:	40020088 	.word	0x40020088
 8009898:	400200a0 	.word	0x400200a0
 800989c:	400200b8 	.word	0x400200b8
 80098a0:	40020410 	.word	0x40020410
 80098a4:	40020428 	.word	0x40020428
 80098a8:	40020440 	.word	0x40020440
 80098ac:	40020458 	.word	0x40020458
 80098b0:	40020470 	.word	0x40020470
 80098b4:	40020488 	.word	0x40020488
 80098b8:	400204a0 	.word	0x400204a0
 80098bc:	400204b8 	.word	0x400204b8
 80098c0:	58025408 	.word	0x58025408
 80098c4:	5802541c 	.word	0x5802541c
 80098c8:	58025430 	.word	0x58025430
 80098cc:	58025444 	.word	0x58025444
 80098d0:	58025458 	.word	0x58025458
 80098d4:	5802546c 	.word	0x5802546c
 80098d8:	58025480 	.word	0x58025480
 80098dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	60da      	str	r2, [r3, #12]
}
 80098f0:	e04d      	b.n	800998e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a29      	ldr	r2, [pc, #164]	; (800999c <DMA_SetConfig+0x338>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d022      	beq.n	8009942 <DMA_SetConfig+0x2de>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a27      	ldr	r2, [pc, #156]	; (80099a0 <DMA_SetConfig+0x33c>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d01d      	beq.n	8009942 <DMA_SetConfig+0x2de>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a26      	ldr	r2, [pc, #152]	; (80099a4 <DMA_SetConfig+0x340>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d018      	beq.n	8009942 <DMA_SetConfig+0x2de>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a24      	ldr	r2, [pc, #144]	; (80099a8 <DMA_SetConfig+0x344>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d013      	beq.n	8009942 <DMA_SetConfig+0x2de>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a23      	ldr	r2, [pc, #140]	; (80099ac <DMA_SetConfig+0x348>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d00e      	beq.n	8009942 <DMA_SetConfig+0x2de>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a21      	ldr	r2, [pc, #132]	; (80099b0 <DMA_SetConfig+0x34c>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d009      	beq.n	8009942 <DMA_SetConfig+0x2de>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a20      	ldr	r2, [pc, #128]	; (80099b4 <DMA_SetConfig+0x350>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d004      	beq.n	8009942 <DMA_SetConfig+0x2de>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a1e      	ldr	r2, [pc, #120]	; (80099b8 <DMA_SetConfig+0x354>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d101      	bne.n	8009946 <DMA_SetConfig+0x2e2>
 8009942:	2301      	movs	r3, #1
 8009944:	e000      	b.n	8009948 <DMA_SetConfig+0x2e4>
 8009946:	2300      	movs	r3, #0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d020      	beq.n	800998e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009950:	f003 031f 	and.w	r3, r3, #31
 8009954:	2201      	movs	r2, #1
 8009956:	409a      	lsls	r2, r3
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	2b40      	cmp	r3, #64	; 0x40
 800996a:	d108      	bne.n	800997e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	60da      	str	r2, [r3, #12]
}
 800997c:	e007      	b.n	800998e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	60da      	str	r2, [r3, #12]
}
 800998e:	bf00      	nop
 8009990:	371c      	adds	r7, #28
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	58025408 	.word	0x58025408
 80099a0:	5802541c 	.word	0x5802541c
 80099a4:	58025430 	.word	0x58025430
 80099a8:	58025444 	.word	0x58025444
 80099ac:	58025458 	.word	0x58025458
 80099b0:	5802546c 	.word	0x5802546c
 80099b4:	58025480 	.word	0x58025480
 80099b8:	58025494 	.word	0x58025494

080099bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a42      	ldr	r2, [pc, #264]	; (8009ad4 <DMA_CalcBaseAndBitshift+0x118>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d04a      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a41      	ldr	r2, [pc, #260]	; (8009ad8 <DMA_CalcBaseAndBitshift+0x11c>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d045      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a3f      	ldr	r2, [pc, #252]	; (8009adc <DMA_CalcBaseAndBitshift+0x120>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d040      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a3e      	ldr	r2, [pc, #248]	; (8009ae0 <DMA_CalcBaseAndBitshift+0x124>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d03b      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a3c      	ldr	r2, [pc, #240]	; (8009ae4 <DMA_CalcBaseAndBitshift+0x128>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d036      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a3b      	ldr	r2, [pc, #236]	; (8009ae8 <DMA_CalcBaseAndBitshift+0x12c>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d031      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a39      	ldr	r2, [pc, #228]	; (8009aec <DMA_CalcBaseAndBitshift+0x130>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d02c      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a38      	ldr	r2, [pc, #224]	; (8009af0 <DMA_CalcBaseAndBitshift+0x134>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d027      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a36      	ldr	r2, [pc, #216]	; (8009af4 <DMA_CalcBaseAndBitshift+0x138>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d022      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a35      	ldr	r2, [pc, #212]	; (8009af8 <DMA_CalcBaseAndBitshift+0x13c>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d01d      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a33      	ldr	r2, [pc, #204]	; (8009afc <DMA_CalcBaseAndBitshift+0x140>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d018      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a32      	ldr	r2, [pc, #200]	; (8009b00 <DMA_CalcBaseAndBitshift+0x144>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d013      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a30      	ldr	r2, [pc, #192]	; (8009b04 <DMA_CalcBaseAndBitshift+0x148>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d00e      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a2f      	ldr	r2, [pc, #188]	; (8009b08 <DMA_CalcBaseAndBitshift+0x14c>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d009      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a2d      	ldr	r2, [pc, #180]	; (8009b0c <DMA_CalcBaseAndBitshift+0x150>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d004      	beq.n	8009a64 <DMA_CalcBaseAndBitshift+0xa8>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a2c      	ldr	r2, [pc, #176]	; (8009b10 <DMA_CalcBaseAndBitshift+0x154>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d101      	bne.n	8009a68 <DMA_CalcBaseAndBitshift+0xac>
 8009a64:	2301      	movs	r3, #1
 8009a66:	e000      	b.n	8009a6a <DMA_CalcBaseAndBitshift+0xae>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d024      	beq.n	8009ab8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	3b10      	subs	r3, #16
 8009a76:	4a27      	ldr	r2, [pc, #156]	; (8009b14 <DMA_CalcBaseAndBitshift+0x158>)
 8009a78:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7c:	091b      	lsrs	r3, r3, #4
 8009a7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	4a24      	ldr	r2, [pc, #144]	; (8009b18 <DMA_CalcBaseAndBitshift+0x15c>)
 8009a88:	5cd3      	ldrb	r3, [r2, r3]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d908      	bls.n	8009aa8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	4b1f      	ldr	r3, [pc, #124]	; (8009b1c <DMA_CalcBaseAndBitshift+0x160>)
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	1d1a      	adds	r2, r3, #4
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	659a      	str	r2, [r3, #88]	; 0x58
 8009aa6:	e00d      	b.n	8009ac4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	461a      	mov	r2, r3
 8009aae:	4b1b      	ldr	r3, [pc, #108]	; (8009b1c <DMA_CalcBaseAndBitshift+0x160>)
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8009ab6:	e005      	b.n	8009ac4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr
 8009ad4:	40020010 	.word	0x40020010
 8009ad8:	40020028 	.word	0x40020028
 8009adc:	40020040 	.word	0x40020040
 8009ae0:	40020058 	.word	0x40020058
 8009ae4:	40020070 	.word	0x40020070
 8009ae8:	40020088 	.word	0x40020088
 8009aec:	400200a0 	.word	0x400200a0
 8009af0:	400200b8 	.word	0x400200b8
 8009af4:	40020410 	.word	0x40020410
 8009af8:	40020428 	.word	0x40020428
 8009afc:	40020440 	.word	0x40020440
 8009b00:	40020458 	.word	0x40020458
 8009b04:	40020470 	.word	0x40020470
 8009b08:	40020488 	.word	0x40020488
 8009b0c:	400204a0 	.word	0x400204a0
 8009b10:	400204b8 	.word	0x400204b8
 8009b14:	aaaaaaab 	.word	0xaaaaaaab
 8009b18:	08014524 	.word	0x08014524
 8009b1c:	fffffc00 	.word	0xfffffc00

08009b20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d120      	bne.n	8009b76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b38:	2b03      	cmp	r3, #3
 8009b3a:	d858      	bhi.n	8009bee <DMA_CheckFifoParam+0xce>
 8009b3c:	a201      	add	r2, pc, #4	; (adr r2, 8009b44 <DMA_CheckFifoParam+0x24>)
 8009b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b42:	bf00      	nop
 8009b44:	08009b55 	.word	0x08009b55
 8009b48:	08009b67 	.word	0x08009b67
 8009b4c:	08009b55 	.word	0x08009b55
 8009b50:	08009bef 	.word	0x08009bef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d048      	beq.n	8009bf2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b64:	e045      	b.n	8009bf2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009b6e:	d142      	bne.n	8009bf6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b74:	e03f      	b.n	8009bf6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b7e:	d123      	bne.n	8009bc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d838      	bhi.n	8009bfa <DMA_CheckFifoParam+0xda>
 8009b88:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <DMA_CheckFifoParam+0x70>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	08009ba1 	.word	0x08009ba1
 8009b94:	08009ba7 	.word	0x08009ba7
 8009b98:	08009ba1 	.word	0x08009ba1
 8009b9c:	08009bb9 	.word	0x08009bb9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	73fb      	strb	r3, [r7, #15]
        break;
 8009ba4:	e030      	b.n	8009c08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d025      	beq.n	8009bfe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009bb6:	e022      	b.n	8009bfe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009bc0:	d11f      	bne.n	8009c02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009bc6:	e01c      	b.n	8009c02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d902      	bls.n	8009bd6 <DMA_CheckFifoParam+0xb6>
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d003      	beq.n	8009bdc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009bd4:	e018      	b.n	8009c08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8009bda:	e015      	b.n	8009c08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00e      	beq.n	8009c06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	73fb      	strb	r3, [r7, #15]
    break;
 8009bec:	e00b      	b.n	8009c06 <DMA_CheckFifoParam+0xe6>
        break;
 8009bee:	bf00      	nop
 8009bf0:	e00a      	b.n	8009c08 <DMA_CheckFifoParam+0xe8>
        break;
 8009bf2:	bf00      	nop
 8009bf4:	e008      	b.n	8009c08 <DMA_CheckFifoParam+0xe8>
        break;
 8009bf6:	bf00      	nop
 8009bf8:	e006      	b.n	8009c08 <DMA_CheckFifoParam+0xe8>
        break;
 8009bfa:	bf00      	nop
 8009bfc:	e004      	b.n	8009c08 <DMA_CheckFifoParam+0xe8>
        break;
 8009bfe:	bf00      	nop
 8009c00:	e002      	b.n	8009c08 <DMA_CheckFifoParam+0xe8>
        break;
 8009c02:	bf00      	nop
 8009c04:	e000      	b.n	8009c08 <DMA_CheckFifoParam+0xe8>
    break;
 8009c06:	bf00      	nop
    }
  }

  return status;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop

08009c18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a38      	ldr	r2, [pc, #224]	; (8009d0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d022      	beq.n	8009c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a36      	ldr	r2, [pc, #216]	; (8009d10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d01d      	beq.n	8009c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a35      	ldr	r2, [pc, #212]	; (8009d14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d018      	beq.n	8009c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a33      	ldr	r2, [pc, #204]	; (8009d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d013      	beq.n	8009c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a32      	ldr	r2, [pc, #200]	; (8009d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00e      	beq.n	8009c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a30      	ldr	r2, [pc, #192]	; (8009d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d009      	beq.n	8009c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a2f      	ldr	r2, [pc, #188]	; (8009d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d004      	beq.n	8009c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a2d      	ldr	r2, [pc, #180]	; (8009d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d101      	bne.n	8009c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009c76:	2301      	movs	r3, #1
 8009c78:	e000      	b.n	8009c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d01a      	beq.n	8009cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	3b08      	subs	r3, #8
 8009c88:	4a28      	ldr	r2, [pc, #160]	; (8009d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c8e:	091b      	lsrs	r3, r3, #4
 8009c90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	4b26      	ldr	r3, [pc, #152]	; (8009d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009c96:	4413      	add	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a24      	ldr	r2, [pc, #144]	; (8009d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009ca4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f003 031f 	and.w	r3, r3, #31
 8009cac:	2201      	movs	r2, #1
 8009cae:	409a      	lsls	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009cb4:	e024      	b.n	8009d00 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	3b10      	subs	r3, #16
 8009cbe:	4a1e      	ldr	r2, [pc, #120]	; (8009d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc4:	091b      	lsrs	r3, r3, #4
 8009cc6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	4a1c      	ldr	r2, [pc, #112]	; (8009d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d806      	bhi.n	8009cde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	4a1b      	ldr	r2, [pc, #108]	; (8009d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d902      	bls.n	8009cde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3308      	adds	r3, #8
 8009cdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	4b18      	ldr	r3, [pc, #96]	; (8009d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009ce2:	4413      	add	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a16      	ldr	r2, [pc, #88]	; (8009d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009cf0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f003 031f 	and.w	r3, r3, #31
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	409a      	lsls	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009d00:	bf00      	nop
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	58025408 	.word	0x58025408
 8009d10:	5802541c 	.word	0x5802541c
 8009d14:	58025430 	.word	0x58025430
 8009d18:	58025444 	.word	0x58025444
 8009d1c:	58025458 	.word	0x58025458
 8009d20:	5802546c 	.word	0x5802546c
 8009d24:	58025480 	.word	0x58025480
 8009d28:	58025494 	.word	0x58025494
 8009d2c:	cccccccd 	.word	0xcccccccd
 8009d30:	16009600 	.word	0x16009600
 8009d34:	58025880 	.word	0x58025880
 8009d38:	aaaaaaab 	.word	0xaaaaaaab
 8009d3c:	400204b8 	.word	0x400204b8
 8009d40:	4002040f 	.word	0x4002040f
 8009d44:	10008200 	.word	0x10008200
 8009d48:	40020880 	.word	0x40020880

08009d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d04a      	beq.n	8009df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2b08      	cmp	r3, #8
 8009d66:	d847      	bhi.n	8009df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a25      	ldr	r2, [pc, #148]	; (8009e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d022      	beq.n	8009db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a24      	ldr	r2, [pc, #144]	; (8009e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d01d      	beq.n	8009db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a22      	ldr	r2, [pc, #136]	; (8009e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d018      	beq.n	8009db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a21      	ldr	r2, [pc, #132]	; (8009e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d013      	beq.n	8009db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a1f      	ldr	r2, [pc, #124]	; (8009e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d00e      	beq.n	8009db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a1e      	ldr	r2, [pc, #120]	; (8009e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d009      	beq.n	8009db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a1c      	ldr	r2, [pc, #112]	; (8009e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d004      	beq.n	8009db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a1b      	ldr	r2, [pc, #108]	; (8009e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d101      	bne.n	8009dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009db8:	2301      	movs	r3, #1
 8009dba:	e000      	b.n	8009dbe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	4b17      	ldr	r3, [pc, #92]	; (8009e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009dc6:	4413      	add	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	461a      	mov	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a15      	ldr	r2, [pc, #84]	; (8009e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009dd4:	671a      	str	r2, [r3, #112]	; 0x70
 8009dd6:	e009      	b.n	8009dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	4b14      	ldr	r3, [pc, #80]	; (8009e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009ddc:	4413      	add	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	461a      	mov	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a11      	ldr	r2, [pc, #68]	; (8009e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009dea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3b01      	subs	r3, #1
 8009df0:	2201      	movs	r2, #1
 8009df2:	409a      	lsls	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009df8:	bf00      	nop
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	58025408 	.word	0x58025408
 8009e08:	5802541c 	.word	0x5802541c
 8009e0c:	58025430 	.word	0x58025430
 8009e10:	58025444 	.word	0x58025444
 8009e14:	58025458 	.word	0x58025458
 8009e18:	5802546c 	.word	0x5802546c
 8009e1c:	58025480 	.word	0x58025480
 8009e20:	58025494 	.word	0x58025494
 8009e24:	1600963f 	.word	0x1600963f
 8009e28:	58025940 	.word	0x58025940
 8009e2c:	1000823f 	.word	0x1000823f
 8009e30:	40020940 	.word	0x40020940

08009e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b089      	sub	sp, #36	; 0x24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009e42:	4b89      	ldr	r3, [pc, #548]	; (800a068 <HAL_GPIO_Init+0x234>)
 8009e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009e46:	e194      	b.n	800a172 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	fa01 f303 	lsl.w	r3, r1, r3
 8009e54:	4013      	ands	r3, r2
 8009e56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f000 8186 	beq.w	800a16c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	f003 0303 	and.w	r3, r3, #3
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d005      	beq.n	8009e78 <HAL_GPIO_Init+0x44>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	f003 0303 	and.w	r3, r3, #3
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d130      	bne.n	8009eda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	2203      	movs	r2, #3
 8009e84:	fa02 f303 	lsl.w	r3, r2, r3
 8009e88:	43db      	mvns	r3, r3
 8009e8a:	69ba      	ldr	r2, [r7, #24]
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	68da      	ldr	r2, [r3, #12]
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9c:	69ba      	ldr	r2, [r7, #24]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	69ba      	ldr	r2, [r7, #24]
 8009ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009eae:	2201      	movs	r2, #1
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb6:	43db      	mvns	r3, r3
 8009eb8:	69ba      	ldr	r2, [r7, #24]
 8009eba:	4013      	ands	r3, r2
 8009ebc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	091b      	lsrs	r3, r3, #4
 8009ec4:	f003 0201 	and.w	r2, r3, #1
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	fa02 f303 	lsl.w	r3, r2, r3
 8009ece:	69ba      	ldr	r2, [r7, #24]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	f003 0303 	and.w	r3, r3, #3
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d017      	beq.n	8009f16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	005b      	lsls	r3, r3, #1
 8009ef0:	2203      	movs	r2, #3
 8009ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef6:	43db      	mvns	r3, r3
 8009ef8:	69ba      	ldr	r2, [r7, #24]
 8009efa:	4013      	ands	r3, r2
 8009efc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	689a      	ldr	r2, [r3, #8]
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	005b      	lsls	r3, r3, #1
 8009f06:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0a:	69ba      	ldr	r2, [r7, #24]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	69ba      	ldr	r2, [r7, #24]
 8009f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	f003 0303 	and.w	r3, r3, #3
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d123      	bne.n	8009f6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	08da      	lsrs	r2, r3, #3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	3208      	adds	r2, #8
 8009f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	220f      	movs	r2, #15
 8009f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3e:	43db      	mvns	r3, r3
 8009f40:	69ba      	ldr	r2, [r7, #24]
 8009f42:	4013      	ands	r3, r2
 8009f44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	691a      	ldr	r2, [r3, #16]
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	f003 0307 	and.w	r3, r3, #7
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	fa02 f303 	lsl.w	r3, r2, r3
 8009f56:	69ba      	ldr	r2, [r7, #24]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	08da      	lsrs	r2, r3, #3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	3208      	adds	r2, #8
 8009f64:	69b9      	ldr	r1, [r7, #24]
 8009f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	005b      	lsls	r3, r3, #1
 8009f74:	2203      	movs	r2, #3
 8009f76:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7a:	43db      	mvns	r3, r3
 8009f7c:	69ba      	ldr	r2, [r7, #24]
 8009f7e:	4013      	ands	r3, r2
 8009f80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f003 0203 	and.w	r2, r3, #3
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	005b      	lsls	r3, r3, #1
 8009f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f92:	69ba      	ldr	r2, [r7, #24]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	69ba      	ldr	r2, [r7, #24]
 8009f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f000 80e0 	beq.w	800a16c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009fac:	4b2f      	ldr	r3, [pc, #188]	; (800a06c <HAL_GPIO_Init+0x238>)
 8009fae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009fb2:	4a2e      	ldr	r2, [pc, #184]	; (800a06c <HAL_GPIO_Init+0x238>)
 8009fb4:	f043 0302 	orr.w	r3, r3, #2
 8009fb8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009fbc:	4b2b      	ldr	r3, [pc, #172]	; (800a06c <HAL_GPIO_Init+0x238>)
 8009fbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009fca:	4a29      	ldr	r2, [pc, #164]	; (800a070 <HAL_GPIO_Init+0x23c>)
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	089b      	lsrs	r3, r3, #2
 8009fd0:	3302      	adds	r3, #2
 8009fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	220f      	movs	r2, #15
 8009fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe6:	43db      	mvns	r3, r3
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	4013      	ands	r3, r2
 8009fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a20      	ldr	r2, [pc, #128]	; (800a074 <HAL_GPIO_Init+0x240>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d052      	beq.n	800a09c <HAL_GPIO_Init+0x268>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a1f      	ldr	r2, [pc, #124]	; (800a078 <HAL_GPIO_Init+0x244>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d031      	beq.n	800a062 <HAL_GPIO_Init+0x22e>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a1e      	ldr	r2, [pc, #120]	; (800a07c <HAL_GPIO_Init+0x248>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d02b      	beq.n	800a05e <HAL_GPIO_Init+0x22a>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a1d      	ldr	r2, [pc, #116]	; (800a080 <HAL_GPIO_Init+0x24c>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d025      	beq.n	800a05a <HAL_GPIO_Init+0x226>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a1c      	ldr	r2, [pc, #112]	; (800a084 <HAL_GPIO_Init+0x250>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d01f      	beq.n	800a056 <HAL_GPIO_Init+0x222>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a1b      	ldr	r2, [pc, #108]	; (800a088 <HAL_GPIO_Init+0x254>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d019      	beq.n	800a052 <HAL_GPIO_Init+0x21e>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a1a      	ldr	r2, [pc, #104]	; (800a08c <HAL_GPIO_Init+0x258>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d013      	beq.n	800a04e <HAL_GPIO_Init+0x21a>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a19      	ldr	r2, [pc, #100]	; (800a090 <HAL_GPIO_Init+0x25c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d00d      	beq.n	800a04a <HAL_GPIO_Init+0x216>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a18      	ldr	r2, [pc, #96]	; (800a094 <HAL_GPIO_Init+0x260>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d007      	beq.n	800a046 <HAL_GPIO_Init+0x212>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a17      	ldr	r2, [pc, #92]	; (800a098 <HAL_GPIO_Init+0x264>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d101      	bne.n	800a042 <HAL_GPIO_Init+0x20e>
 800a03e:	2309      	movs	r3, #9
 800a040:	e02d      	b.n	800a09e <HAL_GPIO_Init+0x26a>
 800a042:	230a      	movs	r3, #10
 800a044:	e02b      	b.n	800a09e <HAL_GPIO_Init+0x26a>
 800a046:	2308      	movs	r3, #8
 800a048:	e029      	b.n	800a09e <HAL_GPIO_Init+0x26a>
 800a04a:	2307      	movs	r3, #7
 800a04c:	e027      	b.n	800a09e <HAL_GPIO_Init+0x26a>
 800a04e:	2306      	movs	r3, #6
 800a050:	e025      	b.n	800a09e <HAL_GPIO_Init+0x26a>
 800a052:	2305      	movs	r3, #5
 800a054:	e023      	b.n	800a09e <HAL_GPIO_Init+0x26a>
 800a056:	2304      	movs	r3, #4
 800a058:	e021      	b.n	800a09e <HAL_GPIO_Init+0x26a>
 800a05a:	2303      	movs	r3, #3
 800a05c:	e01f      	b.n	800a09e <HAL_GPIO_Init+0x26a>
 800a05e:	2302      	movs	r3, #2
 800a060:	e01d      	b.n	800a09e <HAL_GPIO_Init+0x26a>
 800a062:	2301      	movs	r3, #1
 800a064:	e01b      	b.n	800a09e <HAL_GPIO_Init+0x26a>
 800a066:	bf00      	nop
 800a068:	58000080 	.word	0x58000080
 800a06c:	58024400 	.word	0x58024400
 800a070:	58000400 	.word	0x58000400
 800a074:	58020000 	.word	0x58020000
 800a078:	58020400 	.word	0x58020400
 800a07c:	58020800 	.word	0x58020800
 800a080:	58020c00 	.word	0x58020c00
 800a084:	58021000 	.word	0x58021000
 800a088:	58021400 	.word	0x58021400
 800a08c:	58021800 	.word	0x58021800
 800a090:	58021c00 	.word	0x58021c00
 800a094:	58022000 	.word	0x58022000
 800a098:	58022400 	.word	0x58022400
 800a09c:	2300      	movs	r3, #0
 800a09e:	69fa      	ldr	r2, [r7, #28]
 800a0a0:	f002 0203 	and.w	r2, r2, #3
 800a0a4:	0092      	lsls	r2, r2, #2
 800a0a6:	4093      	lsls	r3, r2
 800a0a8:	69ba      	ldr	r2, [r7, #24]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a0ae:	4938      	ldr	r1, [pc, #224]	; (800a190 <HAL_GPIO_Init+0x35c>)
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	089b      	lsrs	r3, r3, #2
 800a0b4:	3302      	adds	r3, #2
 800a0b6:	69ba      	ldr	r2, [r7, #24]
 800a0b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a0bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	43db      	mvns	r3, r3
 800a0c8:	69ba      	ldr	r2, [r7, #24]
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a0e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a0ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	43db      	mvns	r3, r3
 800a0f6:	69ba      	ldr	r2, [r7, #24]
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d003      	beq.n	800a110 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a108:	69ba      	ldr	r2, [r7, #24]
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a110:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	43db      	mvns	r3, r3
 800a122:	69ba      	ldr	r2, [r7, #24]
 800a124:	4013      	ands	r3, r2
 800a126:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d003      	beq.n	800a13c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a134:	69ba      	ldr	r2, [r7, #24]
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	4313      	orrs	r3, r2
 800a13a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	69ba      	ldr	r2, [r7, #24]
 800a140:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	43db      	mvns	r3, r3
 800a14c:	69ba      	ldr	r2, [r7, #24]
 800a14e:	4013      	ands	r3, r2
 800a150:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	4313      	orrs	r3, r2
 800a164:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	69ba      	ldr	r2, [r7, #24]
 800a16a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	3301      	adds	r3, #1
 800a170:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	fa22 f303 	lsr.w	r3, r2, r3
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f47f ae63 	bne.w	8009e48 <HAL_GPIO_Init+0x14>
  }
}
 800a182:	bf00      	nop
 800a184:	bf00      	nop
 800a186:	3724      	adds	r7, #36	; 0x24
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	58000400 	.word	0x58000400

0800a194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	460b      	mov	r3, r1
 800a19e:	807b      	strh	r3, [r7, #2]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a1a4:	787b      	ldrb	r3, [r7, #1]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a1aa:	887a      	ldrh	r2, [r7, #2]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a1b0:	e003      	b.n	800a1ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a1b2:	887b      	ldrh	r3, [r7, #2]
 800a1b4:	041a      	lsls	r2, r3, #16
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	619a      	str	r2, [r3, #24]
}
 800a1ba:	bf00      	nop
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b082      	sub	sp, #8
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a1d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a1d8:	88fb      	ldrh	r3, [r7, #6]
 800a1da:	4013      	ands	r3, r2
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d008      	beq.n	800a1f2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a1e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a1e4:	88fb      	ldrh	r3, [r7, #6]
 800a1e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a1ea:	88fb      	ldrh	r3, [r7, #6]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7fa fcdb 	bl	8004ba8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a1f2:	bf00      	nop
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
	...

0800a1fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a204:	4b19      	ldr	r3, [pc, #100]	; (800a26c <HAL_PWREx_ConfigSupply+0x70>)
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	f003 0304 	and.w	r3, r3, #4
 800a20c:	2b04      	cmp	r3, #4
 800a20e:	d00a      	beq.n	800a226 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a210:	4b16      	ldr	r3, [pc, #88]	; (800a26c <HAL_PWREx_ConfigSupply+0x70>)
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	f003 0307 	and.w	r3, r3, #7
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d001      	beq.n	800a222 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e01f      	b.n	800a262 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a222:	2300      	movs	r3, #0
 800a224:	e01d      	b.n	800a262 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a226:	4b11      	ldr	r3, [pc, #68]	; (800a26c <HAL_PWREx_ConfigSupply+0x70>)
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	f023 0207 	bic.w	r2, r3, #7
 800a22e:	490f      	ldr	r1, [pc, #60]	; (800a26c <HAL_PWREx_ConfigSupply+0x70>)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4313      	orrs	r3, r2
 800a234:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a236:	f7fc fc6b 	bl	8006b10 <HAL_GetTick>
 800a23a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a23c:	e009      	b.n	800a252 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a23e:	f7fc fc67 	bl	8006b10 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a24c:	d901      	bls.n	800a252 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e007      	b.n	800a262 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a252:	4b06      	ldr	r3, [pc, #24]	; (800a26c <HAL_PWREx_ConfigSupply+0x70>)
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a25a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a25e:	d1ee      	bne.n	800a23e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	58024800 	.word	0x58024800

0800a270 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08c      	sub	sp, #48	; 0x30
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d102      	bne.n	800a284 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	f000 bc1d 	b.w	800aabe <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 0301 	and.w	r3, r3, #1
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 8087 	beq.w	800a3a0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a292:	4b99      	ldr	r3, [pc, #612]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a29a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a29c:	4b96      	ldr	r3, [pc, #600]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a4:	2b10      	cmp	r3, #16
 800a2a6:	d007      	beq.n	800a2b8 <HAL_RCC_OscConfig+0x48>
 800a2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2aa:	2b18      	cmp	r3, #24
 800a2ac:	d110      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x60>
 800a2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b0:	f003 0303 	and.w	r3, r3, #3
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d10b      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2b8:	4b8f      	ldr	r3, [pc, #572]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d06c      	beq.n	800a39e <HAL_RCC_OscConfig+0x12e>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d168      	bne.n	800a39e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e3f6      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2d8:	d106      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x78>
 800a2da:	4b87      	ldr	r3, [pc, #540]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a86      	ldr	r2, [pc, #536]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a2e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2e4:	6013      	str	r3, [r2, #0]
 800a2e6:	e02e      	b.n	800a346 <HAL_RCC_OscConfig+0xd6>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10c      	bne.n	800a30a <HAL_RCC_OscConfig+0x9a>
 800a2f0:	4b81      	ldr	r3, [pc, #516]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a80      	ldr	r2, [pc, #512]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a2f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2fa:	6013      	str	r3, [r2, #0]
 800a2fc:	4b7e      	ldr	r3, [pc, #504]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a7d      	ldr	r2, [pc, #500]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	e01d      	b.n	800a346 <HAL_RCC_OscConfig+0xd6>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a312:	d10c      	bne.n	800a32e <HAL_RCC_OscConfig+0xbe>
 800a314:	4b78      	ldr	r3, [pc, #480]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a77      	ldr	r2, [pc, #476]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a31a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a31e:	6013      	str	r3, [r2, #0]
 800a320:	4b75      	ldr	r3, [pc, #468]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a74      	ldr	r2, [pc, #464]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a32a:	6013      	str	r3, [r2, #0]
 800a32c:	e00b      	b.n	800a346 <HAL_RCC_OscConfig+0xd6>
 800a32e:	4b72      	ldr	r3, [pc, #456]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a71      	ldr	r2, [pc, #452]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a338:	6013      	str	r3, [r2, #0]
 800a33a:	4b6f      	ldr	r3, [pc, #444]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a6e      	ldr	r2, [pc, #440]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a344:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d013      	beq.n	800a376 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a34e:	f7fc fbdf 	bl	8006b10 <HAL_GetTick>
 800a352:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a354:	e008      	b.n	800a368 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a356:	f7fc fbdb 	bl	8006b10 <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	2b64      	cmp	r3, #100	; 0x64
 800a362:	d901      	bls.n	800a368 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e3aa      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a368:	4b63      	ldr	r3, [pc, #396]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d0f0      	beq.n	800a356 <HAL_RCC_OscConfig+0xe6>
 800a374:	e014      	b.n	800a3a0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a376:	f7fc fbcb 	bl	8006b10 <HAL_GetTick>
 800a37a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a37c:	e008      	b.n	800a390 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a37e:	f7fc fbc7 	bl	8006b10 <HAL_GetTick>
 800a382:	4602      	mov	r2, r0
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	2b64      	cmp	r3, #100	; 0x64
 800a38a:	d901      	bls.n	800a390 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a38c:	2303      	movs	r3, #3
 800a38e:	e396      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a390:	4b59      	ldr	r3, [pc, #356]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1f0      	bne.n	800a37e <HAL_RCC_OscConfig+0x10e>
 800a39c:	e000      	b.n	800a3a0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a39e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 0302 	and.w	r3, r3, #2
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 80cb 	beq.w	800a544 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3ae:	4b52      	ldr	r3, [pc, #328]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a3b8:	4b4f      	ldr	r3, [pc, #316]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3bc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d007      	beq.n	800a3d4 <HAL_RCC_OscConfig+0x164>
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	2b18      	cmp	r3, #24
 800a3c8:	d156      	bne.n	800a478 <HAL_RCC_OscConfig+0x208>
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	f003 0303 	and.w	r3, r3, #3
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d151      	bne.n	800a478 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3d4:	4b48      	ldr	r3, [pc, #288]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d005      	beq.n	800a3ec <HAL_RCC_OscConfig+0x17c>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d101      	bne.n	800a3ec <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e368      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a3ec:	4b42      	ldr	r3, [pc, #264]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f023 0219 	bic.w	r2, r3, #25
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	493f      	ldr	r1, [pc, #252]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a3fe:	f7fc fb87 	bl	8006b10 <HAL_GetTick>
 800a402:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a404:	e008      	b.n	800a418 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a406:	f7fc fb83 	bl	8006b10 <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	2b02      	cmp	r3, #2
 800a412:	d901      	bls.n	800a418 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e352      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a418:	4b37      	ldr	r3, [pc, #220]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 0304 	and.w	r3, r3, #4
 800a420:	2b00      	cmp	r3, #0
 800a422:	d0f0      	beq.n	800a406 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a424:	f7fc fba4 	bl	8006b70 <HAL_GetREVID>
 800a428:	4603      	mov	r3, r0
 800a42a:	f241 0203 	movw	r2, #4099	; 0x1003
 800a42e:	4293      	cmp	r3, r2
 800a430:	d817      	bhi.n	800a462 <HAL_RCC_OscConfig+0x1f2>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	2b40      	cmp	r3, #64	; 0x40
 800a438:	d108      	bne.n	800a44c <HAL_RCC_OscConfig+0x1dc>
 800a43a:	4b2f      	ldr	r3, [pc, #188]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a442:	4a2d      	ldr	r2, [pc, #180]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a448:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a44a:	e07b      	b.n	800a544 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a44c:	4b2a      	ldr	r3, [pc, #168]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	031b      	lsls	r3, r3, #12
 800a45a:	4927      	ldr	r1, [pc, #156]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a45c:	4313      	orrs	r3, r2
 800a45e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a460:	e070      	b.n	800a544 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a462:	4b25      	ldr	r3, [pc, #148]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	061b      	lsls	r3, r3, #24
 800a470:	4921      	ldr	r1, [pc, #132]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a472:	4313      	orrs	r3, r2
 800a474:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a476:	e065      	b.n	800a544 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d048      	beq.n	800a512 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a480:	4b1d      	ldr	r3, [pc, #116]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f023 0219 	bic.w	r2, r3, #25
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	491a      	ldr	r1, [pc, #104]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a48e:	4313      	orrs	r3, r2
 800a490:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a492:	f7fc fb3d 	bl	8006b10 <HAL_GetTick>
 800a496:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a498:	e008      	b.n	800a4ac <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a49a:	f7fc fb39 	bl	8006b10 <HAL_GetTick>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d901      	bls.n	800a4ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e308      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4ac:	4b12      	ldr	r3, [pc, #72]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0304 	and.w	r3, r3, #4
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d0f0      	beq.n	800a49a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4b8:	f7fc fb5a 	bl	8006b70 <HAL_GetREVID>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	f241 0203 	movw	r2, #4099	; 0x1003
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d81a      	bhi.n	800a4fc <HAL_RCC_OscConfig+0x28c>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	2b40      	cmp	r3, #64	; 0x40
 800a4cc:	d108      	bne.n	800a4e0 <HAL_RCC_OscConfig+0x270>
 800a4ce:	4b0a      	ldr	r3, [pc, #40]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a4d6:	4a08      	ldr	r2, [pc, #32]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a4d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4dc:	6053      	str	r3, [r2, #4]
 800a4de:	e031      	b.n	800a544 <HAL_RCC_OscConfig+0x2d4>
 800a4e0:	4b05      	ldr	r3, [pc, #20]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	031b      	lsls	r3, r3, #12
 800a4ee:	4902      	ldr	r1, [pc, #8]	; (800a4f8 <HAL_RCC_OscConfig+0x288>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	604b      	str	r3, [r1, #4]
 800a4f4:	e026      	b.n	800a544 <HAL_RCC_OscConfig+0x2d4>
 800a4f6:	bf00      	nop
 800a4f8:	58024400 	.word	0x58024400
 800a4fc:	4b9a      	ldr	r3, [pc, #616]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	061b      	lsls	r3, r3, #24
 800a50a:	4997      	ldr	r1, [pc, #604]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a50c:	4313      	orrs	r3, r2
 800a50e:	604b      	str	r3, [r1, #4]
 800a510:	e018      	b.n	800a544 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a512:	4b95      	ldr	r3, [pc, #596]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a94      	ldr	r2, [pc, #592]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a518:	f023 0301 	bic.w	r3, r3, #1
 800a51c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a51e:	f7fc faf7 	bl	8006b10 <HAL_GetTick>
 800a522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a524:	e008      	b.n	800a538 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a526:	f7fc faf3 	bl	8006b10 <HAL_GetTick>
 800a52a:	4602      	mov	r2, r0
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	2b02      	cmp	r3, #2
 800a532:	d901      	bls.n	800a538 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a534:	2303      	movs	r3, #3
 800a536:	e2c2      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a538:	4b8b      	ldr	r3, [pc, #556]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0304 	and.w	r3, r3, #4
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1f0      	bne.n	800a526 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0310 	and.w	r3, r3, #16
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 80a9 	beq.w	800a6a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a552:	4b85      	ldr	r3, [pc, #532]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a55a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a55c:	4b82      	ldr	r3, [pc, #520]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a560:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	2b08      	cmp	r3, #8
 800a566:	d007      	beq.n	800a578 <HAL_RCC_OscConfig+0x308>
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	2b18      	cmp	r3, #24
 800a56c:	d13a      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x374>
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f003 0303 	and.w	r3, r3, #3
 800a574:	2b01      	cmp	r3, #1
 800a576:	d135      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a578:	4b7b      	ldr	r3, [pc, #492]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a580:	2b00      	cmp	r3, #0
 800a582:	d005      	beq.n	800a590 <HAL_RCC_OscConfig+0x320>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	69db      	ldr	r3, [r3, #28]
 800a588:	2b80      	cmp	r3, #128	; 0x80
 800a58a:	d001      	beq.n	800a590 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e296      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a590:	f7fc faee 	bl	8006b70 <HAL_GetREVID>
 800a594:	4603      	mov	r3, r0
 800a596:	f241 0203 	movw	r2, #4099	; 0x1003
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d817      	bhi.n	800a5ce <HAL_RCC_OscConfig+0x35e>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	2b20      	cmp	r3, #32
 800a5a4:	d108      	bne.n	800a5b8 <HAL_RCC_OscConfig+0x348>
 800a5a6:	4b70      	ldr	r3, [pc, #448]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a5ae:	4a6e      	ldr	r2, [pc, #440]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a5b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5b6:	e075      	b.n	800a6a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5b8:	4b6b      	ldr	r3, [pc, #428]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a1b      	ldr	r3, [r3, #32]
 800a5c4:	069b      	lsls	r3, r3, #26
 800a5c6:	4968      	ldr	r1, [pc, #416]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5cc:	e06a      	b.n	800a6a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5ce:	4b66      	ldr	r3, [pc, #408]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	061b      	lsls	r3, r3, #24
 800a5dc:	4962      	ldr	r1, [pc, #392]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5e2:	e05f      	b.n	800a6a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	69db      	ldr	r3, [r3, #28]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d042      	beq.n	800a672 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a5ec:	4b5e      	ldr	r3, [pc, #376]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a5d      	ldr	r2, [pc, #372]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a5f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5f8:	f7fc fa8a 	bl	8006b10 <HAL_GetTick>
 800a5fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a5fe:	e008      	b.n	800a612 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a600:	f7fc fa86 	bl	8006b10 <HAL_GetTick>
 800a604:	4602      	mov	r2, r0
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d901      	bls.n	800a612 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a60e:	2303      	movs	r3, #3
 800a610:	e255      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a612:	4b55      	ldr	r3, [pc, #340]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d0f0      	beq.n	800a600 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a61e:	f7fc faa7 	bl	8006b70 <HAL_GetREVID>
 800a622:	4603      	mov	r3, r0
 800a624:	f241 0203 	movw	r2, #4099	; 0x1003
 800a628:	4293      	cmp	r3, r2
 800a62a:	d817      	bhi.n	800a65c <HAL_RCC_OscConfig+0x3ec>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a1b      	ldr	r3, [r3, #32]
 800a630:	2b20      	cmp	r3, #32
 800a632:	d108      	bne.n	800a646 <HAL_RCC_OscConfig+0x3d6>
 800a634:	4b4c      	ldr	r3, [pc, #304]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a63c:	4a4a      	ldr	r2, [pc, #296]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a63e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a642:	6053      	str	r3, [r2, #4]
 800a644:	e02e      	b.n	800a6a4 <HAL_RCC_OscConfig+0x434>
 800a646:	4b48      	ldr	r3, [pc, #288]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a1b      	ldr	r3, [r3, #32]
 800a652:	069b      	lsls	r3, r3, #26
 800a654:	4944      	ldr	r1, [pc, #272]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a656:	4313      	orrs	r3, r2
 800a658:	604b      	str	r3, [r1, #4]
 800a65a:	e023      	b.n	800a6a4 <HAL_RCC_OscConfig+0x434>
 800a65c:	4b42      	ldr	r3, [pc, #264]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a1b      	ldr	r3, [r3, #32]
 800a668:	061b      	lsls	r3, r3, #24
 800a66a:	493f      	ldr	r1, [pc, #252]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a66c:	4313      	orrs	r3, r2
 800a66e:	60cb      	str	r3, [r1, #12]
 800a670:	e018      	b.n	800a6a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a672:	4b3d      	ldr	r3, [pc, #244]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a3c      	ldr	r2, [pc, #240]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a67c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a67e:	f7fc fa47 	bl	8006b10 <HAL_GetTick>
 800a682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a684:	e008      	b.n	800a698 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a686:	f7fc fa43 	bl	8006b10 <HAL_GetTick>
 800a68a:	4602      	mov	r2, r0
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	1ad3      	subs	r3, r2, r3
 800a690:	2b02      	cmp	r3, #2
 800a692:	d901      	bls.n	800a698 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a694:	2303      	movs	r3, #3
 800a696:	e212      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a698:	4b33      	ldr	r3, [pc, #204]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1f0      	bne.n	800a686 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 0308 	and.w	r3, r3, #8
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d036      	beq.n	800a71e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d019      	beq.n	800a6ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6b8:	4b2b      	ldr	r3, [pc, #172]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a6ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6bc:	4a2a      	ldr	r2, [pc, #168]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a6be:	f043 0301 	orr.w	r3, r3, #1
 800a6c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6c4:	f7fc fa24 	bl	8006b10 <HAL_GetTick>
 800a6c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a6ca:	e008      	b.n	800a6de <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a6cc:	f7fc fa20 	bl	8006b10 <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d901      	bls.n	800a6de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e1ef      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a6de:	4b22      	ldr	r3, [pc, #136]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a6e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6e2:	f003 0302 	and.w	r3, r3, #2
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d0f0      	beq.n	800a6cc <HAL_RCC_OscConfig+0x45c>
 800a6ea:	e018      	b.n	800a71e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a6ec:	4b1e      	ldr	r3, [pc, #120]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a6ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6f0:	4a1d      	ldr	r2, [pc, #116]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a6f2:	f023 0301 	bic.w	r3, r3, #1
 800a6f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6f8:	f7fc fa0a 	bl	8006b10 <HAL_GetTick>
 800a6fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a6fe:	e008      	b.n	800a712 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a700:	f7fc fa06 	bl	8006b10 <HAL_GetTick>
 800a704:	4602      	mov	r2, r0
 800a706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d901      	bls.n	800a712 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a70e:	2303      	movs	r3, #3
 800a710:	e1d5      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a712:	4b15      	ldr	r3, [pc, #84]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a716:	f003 0302 	and.w	r3, r3, #2
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1f0      	bne.n	800a700 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0320 	and.w	r3, r3, #32
 800a726:	2b00      	cmp	r3, #0
 800a728:	d039      	beq.n	800a79e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d01c      	beq.n	800a76c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a732:	4b0d      	ldr	r3, [pc, #52]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a0c      	ldr	r2, [pc, #48]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a738:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a73c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a73e:	f7fc f9e7 	bl	8006b10 <HAL_GetTick>
 800a742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a744:	e008      	b.n	800a758 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a746:	f7fc f9e3 	bl	8006b10 <HAL_GetTick>
 800a74a:	4602      	mov	r2, r0
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	2b02      	cmp	r3, #2
 800a752:	d901      	bls.n	800a758 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a754:	2303      	movs	r3, #3
 800a756:	e1b2      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a758:	4b03      	ldr	r3, [pc, #12]	; (800a768 <HAL_RCC_OscConfig+0x4f8>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a760:	2b00      	cmp	r3, #0
 800a762:	d0f0      	beq.n	800a746 <HAL_RCC_OscConfig+0x4d6>
 800a764:	e01b      	b.n	800a79e <HAL_RCC_OscConfig+0x52e>
 800a766:	bf00      	nop
 800a768:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a76c:	4b9b      	ldr	r3, [pc, #620]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a9a      	ldr	r2, [pc, #616]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a776:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a778:	f7fc f9ca 	bl	8006b10 <HAL_GetTick>
 800a77c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a77e:	e008      	b.n	800a792 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a780:	f7fc f9c6 	bl	8006b10 <HAL_GetTick>
 800a784:	4602      	mov	r2, r0
 800a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d901      	bls.n	800a792 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e195      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a792:	4b92      	ldr	r3, [pc, #584]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1f0      	bne.n	800a780 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 0304 	and.w	r3, r3, #4
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f000 8081 	beq.w	800a8ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a7ac:	4b8c      	ldr	r3, [pc, #560]	; (800a9e0 <HAL_RCC_OscConfig+0x770>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a8b      	ldr	r2, [pc, #556]	; (800a9e0 <HAL_RCC_OscConfig+0x770>)
 800a7b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7b8:	f7fc f9aa 	bl	8006b10 <HAL_GetTick>
 800a7bc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7be:	e008      	b.n	800a7d2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a7c0:	f7fc f9a6 	bl	8006b10 <HAL_GetTick>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	2b64      	cmp	r3, #100	; 0x64
 800a7cc:	d901      	bls.n	800a7d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e175      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7d2:	4b83      	ldr	r3, [pc, #524]	; (800a9e0 <HAL_RCC_OscConfig+0x770>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0f0      	beq.n	800a7c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d106      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x584>
 800a7e6:	4b7d      	ldr	r3, [pc, #500]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ea:	4a7c      	ldr	r2, [pc, #496]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a7ec:	f043 0301 	orr.w	r3, r3, #1
 800a7f0:	6713      	str	r3, [r2, #112]	; 0x70
 800a7f2:	e02d      	b.n	800a850 <HAL_RCC_OscConfig+0x5e0>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10c      	bne.n	800a816 <HAL_RCC_OscConfig+0x5a6>
 800a7fc:	4b77      	ldr	r3, [pc, #476]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a7fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a800:	4a76      	ldr	r2, [pc, #472]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a802:	f023 0301 	bic.w	r3, r3, #1
 800a806:	6713      	str	r3, [r2, #112]	; 0x70
 800a808:	4b74      	ldr	r3, [pc, #464]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a80c:	4a73      	ldr	r2, [pc, #460]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a80e:	f023 0304 	bic.w	r3, r3, #4
 800a812:	6713      	str	r3, [r2, #112]	; 0x70
 800a814:	e01c      	b.n	800a850 <HAL_RCC_OscConfig+0x5e0>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	2b05      	cmp	r3, #5
 800a81c:	d10c      	bne.n	800a838 <HAL_RCC_OscConfig+0x5c8>
 800a81e:	4b6f      	ldr	r3, [pc, #444]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a822:	4a6e      	ldr	r2, [pc, #440]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a824:	f043 0304 	orr.w	r3, r3, #4
 800a828:	6713      	str	r3, [r2, #112]	; 0x70
 800a82a:	4b6c      	ldr	r3, [pc, #432]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a82e:	4a6b      	ldr	r2, [pc, #428]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a830:	f043 0301 	orr.w	r3, r3, #1
 800a834:	6713      	str	r3, [r2, #112]	; 0x70
 800a836:	e00b      	b.n	800a850 <HAL_RCC_OscConfig+0x5e0>
 800a838:	4b68      	ldr	r3, [pc, #416]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a83c:	4a67      	ldr	r2, [pc, #412]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a83e:	f023 0301 	bic.w	r3, r3, #1
 800a842:	6713      	str	r3, [r2, #112]	; 0x70
 800a844:	4b65      	ldr	r3, [pc, #404]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a848:	4a64      	ldr	r2, [pc, #400]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a84a:	f023 0304 	bic.w	r3, r3, #4
 800a84e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d015      	beq.n	800a884 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a858:	f7fc f95a 	bl	8006b10 <HAL_GetTick>
 800a85c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a85e:	e00a      	b.n	800a876 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a860:	f7fc f956 	bl	8006b10 <HAL_GetTick>
 800a864:	4602      	mov	r2, r0
 800a866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a86e:	4293      	cmp	r3, r2
 800a870:	d901      	bls.n	800a876 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a872:	2303      	movs	r3, #3
 800a874:	e123      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a876:	4b59      	ldr	r3, [pc, #356]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a87a:	f003 0302 	and.w	r3, r3, #2
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0ee      	beq.n	800a860 <HAL_RCC_OscConfig+0x5f0>
 800a882:	e014      	b.n	800a8ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a884:	f7fc f944 	bl	8006b10 <HAL_GetTick>
 800a888:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a88a:	e00a      	b.n	800a8a2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a88c:	f7fc f940 	bl	8006b10 <HAL_GetTick>
 800a890:	4602      	mov	r2, r0
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	f241 3288 	movw	r2, #5000	; 0x1388
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d901      	bls.n	800a8a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	e10d      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a8a2:	4b4e      	ldr	r3, [pc, #312]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a6:	f003 0302 	and.w	r3, r3, #2
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1ee      	bne.n	800a88c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 8102 	beq.w	800aabc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a8b8:	4b48      	ldr	r3, [pc, #288]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8c0:	2b18      	cmp	r3, #24
 800a8c2:	f000 80bd 	beq.w	800aa40 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	f040 809e 	bne.w	800aa0c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8d0:	4b42      	ldr	r3, [pc, #264]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a41      	ldr	r2, [pc, #260]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a8d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8dc:	f7fc f918 	bl	8006b10 <HAL_GetTick>
 800a8e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a8e2:	e008      	b.n	800a8f6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8e4:	f7fc f914 	bl	8006b10 <HAL_GetTick>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d901      	bls.n	800a8f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e0e3      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a8f6:	4b39      	ldr	r3, [pc, #228]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1f0      	bne.n	800a8e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a902:	4b36      	ldr	r3, [pc, #216]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a906:	4b37      	ldr	r3, [pc, #220]	; (800a9e4 <HAL_RCC_OscConfig+0x774>)
 800a908:	4013      	ands	r3, r2
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a912:	0112      	lsls	r2, r2, #4
 800a914:	430a      	orrs	r2, r1
 800a916:	4931      	ldr	r1, [pc, #196]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a918:	4313      	orrs	r3, r2
 800a91a:	628b      	str	r3, [r1, #40]	; 0x28
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a920:	3b01      	subs	r3, #1
 800a922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a92a:	3b01      	subs	r3, #1
 800a92c:	025b      	lsls	r3, r3, #9
 800a92e:	b29b      	uxth	r3, r3
 800a930:	431a      	orrs	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a936:	3b01      	subs	r3, #1
 800a938:	041b      	lsls	r3, r3, #16
 800a93a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a93e:	431a      	orrs	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a944:	3b01      	subs	r3, #1
 800a946:	061b      	lsls	r3, r3, #24
 800a948:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a94c:	4923      	ldr	r1, [pc, #140]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a94e:	4313      	orrs	r3, r2
 800a950:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a952:	4b22      	ldr	r3, [pc, #136]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a956:	4a21      	ldr	r2, [pc, #132]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a958:	f023 0301 	bic.w	r3, r3, #1
 800a95c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a95e:	4b1f      	ldr	r3, [pc, #124]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a962:	4b21      	ldr	r3, [pc, #132]	; (800a9e8 <HAL_RCC_OscConfig+0x778>)
 800a964:	4013      	ands	r3, r2
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a96a:	00d2      	lsls	r2, r2, #3
 800a96c:	491b      	ldr	r1, [pc, #108]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a96e:	4313      	orrs	r3, r2
 800a970:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a972:	4b1a      	ldr	r3, [pc, #104]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a976:	f023 020c 	bic.w	r2, r3, #12
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97e:	4917      	ldr	r1, [pc, #92]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a980:	4313      	orrs	r3, r2
 800a982:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a984:	4b15      	ldr	r3, [pc, #84]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a988:	f023 0202 	bic.w	r2, r3, #2
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a990:	4912      	ldr	r1, [pc, #72]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a992:	4313      	orrs	r3, r2
 800a994:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a996:	4b11      	ldr	r3, [pc, #68]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99a:	4a10      	ldr	r2, [pc, #64]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a99c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9a2:	4b0e      	ldr	r3, [pc, #56]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a6:	4a0d      	ldr	r2, [pc, #52]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a9a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a9ae:	4b0b      	ldr	r3, [pc, #44]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b2:	4a0a      	ldr	r2, [pc, #40]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a9b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a9ba:	4b08      	ldr	r3, [pc, #32]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9be:	4a07      	ldr	r2, [pc, #28]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a9c0:	f043 0301 	orr.w	r3, r3, #1
 800a9c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a9c6:	4b05      	ldr	r3, [pc, #20]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a04      	ldr	r2, [pc, #16]	; (800a9dc <HAL_RCC_OscConfig+0x76c>)
 800a9cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a9d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9d2:	f7fc f89d 	bl	8006b10 <HAL_GetTick>
 800a9d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9d8:	e011      	b.n	800a9fe <HAL_RCC_OscConfig+0x78e>
 800a9da:	bf00      	nop
 800a9dc:	58024400 	.word	0x58024400
 800a9e0:	58024800 	.word	0x58024800
 800a9e4:	fffffc0c 	.word	0xfffffc0c
 800a9e8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a9ec:	f7fc f890 	bl	8006b10 <HAL_GetTick>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d901      	bls.n	800a9fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	e05f      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9fe:	4b32      	ldr	r3, [pc, #200]	; (800aac8 <HAL_RCC_OscConfig+0x858>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d0f0      	beq.n	800a9ec <HAL_RCC_OscConfig+0x77c>
 800aa0a:	e057      	b.n	800aabc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa0c:	4b2e      	ldr	r3, [pc, #184]	; (800aac8 <HAL_RCC_OscConfig+0x858>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a2d      	ldr	r2, [pc, #180]	; (800aac8 <HAL_RCC_OscConfig+0x858>)
 800aa12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa18:	f7fc f87a 	bl	8006b10 <HAL_GetTick>
 800aa1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa1e:	e008      	b.n	800aa32 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa20:	f7fc f876 	bl	8006b10 <HAL_GetTick>
 800aa24:	4602      	mov	r2, r0
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d901      	bls.n	800aa32 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e045      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa32:	4b25      	ldr	r3, [pc, #148]	; (800aac8 <HAL_RCC_OscConfig+0x858>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1f0      	bne.n	800aa20 <HAL_RCC_OscConfig+0x7b0>
 800aa3e:	e03d      	b.n	800aabc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aa40:	4b21      	ldr	r3, [pc, #132]	; (800aac8 <HAL_RCC_OscConfig+0x858>)
 800aa42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aa46:	4b20      	ldr	r3, [pc, #128]	; (800aac8 <HAL_RCC_OscConfig+0x858>)
 800aa48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d031      	beq.n	800aab8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	f003 0203 	and.w	r2, r3, #3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d12a      	bne.n	800aab8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	091b      	lsrs	r3, r3, #4
 800aa66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d122      	bne.n	800aab8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d11a      	bne.n	800aab8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	0a5b      	lsrs	r3, r3, #9
 800aa86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa8e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d111      	bne.n	800aab8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	0c1b      	lsrs	r3, r3, #16
 800aa98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d108      	bne.n	800aab8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	0e1b      	lsrs	r3, r3, #24
 800aaaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d001      	beq.n	800aabc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	e000      	b.n	800aabe <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3730      	adds	r7, #48	; 0x30
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	58024400 	.word	0x58024400

0800aacc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	e19c      	b.n	800ae1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aae0:	4b8a      	ldr	r3, [pc, #552]	; (800ad0c <HAL_RCC_ClockConfig+0x240>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 030f 	and.w	r3, r3, #15
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d910      	bls.n	800ab10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaee:	4b87      	ldr	r3, [pc, #540]	; (800ad0c <HAL_RCC_ClockConfig+0x240>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f023 020f 	bic.w	r2, r3, #15
 800aaf6:	4985      	ldr	r1, [pc, #532]	; (800ad0c <HAL_RCC_ClockConfig+0x240>)
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aafe:	4b83      	ldr	r3, [pc, #524]	; (800ad0c <HAL_RCC_ClockConfig+0x240>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 030f 	and.w	r3, r3, #15
 800ab06:	683a      	ldr	r2, [r7, #0]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d001      	beq.n	800ab10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e184      	b.n	800ae1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 0304 	and.w	r3, r3, #4
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d010      	beq.n	800ab3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	691a      	ldr	r2, [r3, #16]
 800ab20:	4b7b      	ldr	r3, [pc, #492]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d908      	bls.n	800ab3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab2c:	4b78      	ldr	r3, [pc, #480]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	4975      	ldr	r1, [pc, #468]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 0308 	and.w	r3, r3, #8
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d010      	beq.n	800ab6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	695a      	ldr	r2, [r3, #20]
 800ab4e:	4b70      	ldr	r3, [pc, #448]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ab50:	69db      	ldr	r3, [r3, #28]
 800ab52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d908      	bls.n	800ab6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ab5a:	4b6d      	ldr	r3, [pc, #436]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ab5c:	69db      	ldr	r3, [r3, #28]
 800ab5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	496a      	ldr	r1, [pc, #424]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0310 	and.w	r3, r3, #16
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d010      	beq.n	800ab9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	699a      	ldr	r2, [r3, #24]
 800ab7c:	4b64      	ldr	r3, [pc, #400]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ab7e:	69db      	ldr	r3, [r3, #28]
 800ab80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d908      	bls.n	800ab9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab88:	4b61      	ldr	r3, [pc, #388]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	495e      	ldr	r1, [pc, #376]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ab96:	4313      	orrs	r3, r2
 800ab98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 0320 	and.w	r3, r3, #32
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d010      	beq.n	800abc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	69da      	ldr	r2, [r3, #28]
 800abaa:	4b59      	ldr	r3, [pc, #356]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d908      	bls.n	800abc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800abb6:	4b56      	ldr	r3, [pc, #344]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	69db      	ldr	r3, [r3, #28]
 800abc2:	4953      	ldr	r1, [pc, #332]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0302 	and.w	r3, r3, #2
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d010      	beq.n	800abf6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68da      	ldr	r2, [r3, #12]
 800abd8:	4b4d      	ldr	r3, [pc, #308]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	f003 030f 	and.w	r3, r3, #15
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d908      	bls.n	800abf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abe4:	4b4a      	ldr	r3, [pc, #296]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	f023 020f 	bic.w	r2, r3, #15
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	4947      	ldr	r1, [pc, #284]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d055      	beq.n	800acae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ac02:	4b43      	ldr	r3, [pc, #268]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ac04:	699b      	ldr	r3, [r3, #24]
 800ac06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	4940      	ldr	r1, [pc, #256]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ac10:	4313      	orrs	r3, r2
 800ac12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d107      	bne.n	800ac2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac1c:	4b3c      	ldr	r3, [pc, #240]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d121      	bne.n	800ac6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e0f6      	b.n	800ae1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	2b03      	cmp	r3, #3
 800ac32:	d107      	bne.n	800ac44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac34:	4b36      	ldr	r3, [pc, #216]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d115      	bne.n	800ac6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e0ea      	b.n	800ae1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d107      	bne.n	800ac5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac4c:	4b30      	ldr	r3, [pc, #192]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d109      	bne.n	800ac6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e0de      	b.n	800ae1a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac5c:	4b2c      	ldr	r3, [pc, #176]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0304 	and.w	r3, r3, #4
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e0d6      	b.n	800ae1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ac6c:	4b28      	ldr	r3, [pc, #160]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	f023 0207 	bic.w	r2, r3, #7
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	4925      	ldr	r1, [pc, #148]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac7e:	f7fb ff47 	bl	8006b10 <HAL_GetTick>
 800ac82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac84:	e00a      	b.n	800ac9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac86:	f7fb ff43 	bl	8006b10 <HAL_GetTick>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d901      	bls.n	800ac9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e0be      	b.n	800ae1a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac9c:	4b1c      	ldr	r3, [pc, #112]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	429a      	cmp	r2, r3
 800acac:	d1eb      	bne.n	800ac86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 0302 	and.w	r3, r3, #2
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d010      	beq.n	800acdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68da      	ldr	r2, [r3, #12]
 800acbe:	4b14      	ldr	r3, [pc, #80]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	f003 030f 	and.w	r3, r3, #15
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d208      	bcs.n	800acdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acca:	4b11      	ldr	r3, [pc, #68]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	f023 020f 	bic.w	r2, r3, #15
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	490e      	ldr	r1, [pc, #56]	; (800ad10 <HAL_RCC_ClockConfig+0x244>)
 800acd8:	4313      	orrs	r3, r2
 800acda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800acdc:	4b0b      	ldr	r3, [pc, #44]	; (800ad0c <HAL_RCC_ClockConfig+0x240>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 030f 	and.w	r3, r3, #15
 800ace4:	683a      	ldr	r2, [r7, #0]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d214      	bcs.n	800ad14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acea:	4b08      	ldr	r3, [pc, #32]	; (800ad0c <HAL_RCC_ClockConfig+0x240>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f023 020f 	bic.w	r2, r3, #15
 800acf2:	4906      	ldr	r1, [pc, #24]	; (800ad0c <HAL_RCC_ClockConfig+0x240>)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800acfa:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <HAL_RCC_ClockConfig+0x240>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 030f 	and.w	r3, r3, #15
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d005      	beq.n	800ad14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e086      	b.n	800ae1a <HAL_RCC_ClockConfig+0x34e>
 800ad0c:	52002000 	.word	0x52002000
 800ad10:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0304 	and.w	r3, r3, #4
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d010      	beq.n	800ad42 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	691a      	ldr	r2, [r3, #16]
 800ad24:	4b3f      	ldr	r3, [pc, #252]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d208      	bcs.n	800ad42 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ad30:	4b3c      	ldr	r3, [pc, #240]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	4939      	ldr	r1, [pc, #228]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 0308 	and.w	r3, r3, #8
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d010      	beq.n	800ad70 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	695a      	ldr	r2, [r3, #20]
 800ad52:	4b34      	ldr	r3, [pc, #208]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800ad54:	69db      	ldr	r3, [r3, #28]
 800ad56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d208      	bcs.n	800ad70 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ad5e:	4b31      	ldr	r3, [pc, #196]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	492e      	ldr	r1, [pc, #184]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 0310 	and.w	r3, r3, #16
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d010      	beq.n	800ad9e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	699a      	ldr	r2, [r3, #24]
 800ad80:	4b28      	ldr	r3, [pc, #160]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800ad82:	69db      	ldr	r3, [r3, #28]
 800ad84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d208      	bcs.n	800ad9e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad8c:	4b25      	ldr	r3, [pc, #148]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800ad8e:	69db      	ldr	r3, [r3, #28]
 800ad90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	4922      	ldr	r1, [pc, #136]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 0320 	and.w	r3, r3, #32
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d010      	beq.n	800adcc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	69da      	ldr	r2, [r3, #28]
 800adae:	4b1d      	ldr	r3, [pc, #116]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d208      	bcs.n	800adcc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800adba:	4b1a      	ldr	r3, [pc, #104]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	69db      	ldr	r3, [r3, #28]
 800adc6:	4917      	ldr	r1, [pc, #92]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800adc8:	4313      	orrs	r3, r2
 800adca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800adcc:	f000 f834 	bl	800ae38 <HAL_RCC_GetSysClockFreq>
 800add0:	4602      	mov	r2, r0
 800add2:	4b14      	ldr	r3, [pc, #80]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	0a1b      	lsrs	r3, r3, #8
 800add8:	f003 030f 	and.w	r3, r3, #15
 800addc:	4912      	ldr	r1, [pc, #72]	; (800ae28 <HAL_RCC_ClockConfig+0x35c>)
 800adde:	5ccb      	ldrb	r3, [r1, r3]
 800ade0:	f003 031f 	and.w	r3, r3, #31
 800ade4:	fa22 f303 	lsr.w	r3, r2, r3
 800ade8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800adea:	4b0e      	ldr	r3, [pc, #56]	; (800ae24 <HAL_RCC_ClockConfig+0x358>)
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	f003 030f 	and.w	r3, r3, #15
 800adf2:	4a0d      	ldr	r2, [pc, #52]	; (800ae28 <HAL_RCC_ClockConfig+0x35c>)
 800adf4:	5cd3      	ldrb	r3, [r2, r3]
 800adf6:	f003 031f 	and.w	r3, r3, #31
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	fa22 f303 	lsr.w	r3, r2, r3
 800ae00:	4a0a      	ldr	r2, [pc, #40]	; (800ae2c <HAL_RCC_ClockConfig+0x360>)
 800ae02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae04:	4a0a      	ldr	r2, [pc, #40]	; (800ae30 <HAL_RCC_ClockConfig+0x364>)
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800ae0a:	4b0a      	ldr	r3, [pc, #40]	; (800ae34 <HAL_RCC_ClockConfig+0x368>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fb fe34 	bl	8006a7c <HAL_InitTick>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3718      	adds	r7, #24
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	58024400 	.word	0x58024400
 800ae28:	08014514 	.word	0x08014514
 800ae2c:	24000234 	.word	0x24000234
 800ae30:	24000230 	.word	0x24000230
 800ae34:	24000238 	.word	0x24000238

0800ae38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b089      	sub	sp, #36	; 0x24
 800ae3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae3e:	4bb3      	ldr	r3, [pc, #716]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae46:	2b18      	cmp	r3, #24
 800ae48:	f200 8155 	bhi.w	800b0f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800ae4c:	a201      	add	r2, pc, #4	; (adr r2, 800ae54 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ae4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae52:	bf00      	nop
 800ae54:	0800aeb9 	.word	0x0800aeb9
 800ae58:	0800b0f7 	.word	0x0800b0f7
 800ae5c:	0800b0f7 	.word	0x0800b0f7
 800ae60:	0800b0f7 	.word	0x0800b0f7
 800ae64:	0800b0f7 	.word	0x0800b0f7
 800ae68:	0800b0f7 	.word	0x0800b0f7
 800ae6c:	0800b0f7 	.word	0x0800b0f7
 800ae70:	0800b0f7 	.word	0x0800b0f7
 800ae74:	0800aedf 	.word	0x0800aedf
 800ae78:	0800b0f7 	.word	0x0800b0f7
 800ae7c:	0800b0f7 	.word	0x0800b0f7
 800ae80:	0800b0f7 	.word	0x0800b0f7
 800ae84:	0800b0f7 	.word	0x0800b0f7
 800ae88:	0800b0f7 	.word	0x0800b0f7
 800ae8c:	0800b0f7 	.word	0x0800b0f7
 800ae90:	0800b0f7 	.word	0x0800b0f7
 800ae94:	0800aee5 	.word	0x0800aee5
 800ae98:	0800b0f7 	.word	0x0800b0f7
 800ae9c:	0800b0f7 	.word	0x0800b0f7
 800aea0:	0800b0f7 	.word	0x0800b0f7
 800aea4:	0800b0f7 	.word	0x0800b0f7
 800aea8:	0800b0f7 	.word	0x0800b0f7
 800aeac:	0800b0f7 	.word	0x0800b0f7
 800aeb0:	0800b0f7 	.word	0x0800b0f7
 800aeb4:	0800aeeb 	.word	0x0800aeeb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeb8:	4b94      	ldr	r3, [pc, #592]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f003 0320 	and.w	r3, r3, #32
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d009      	beq.n	800aed8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aec4:	4b91      	ldr	r3, [pc, #580]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	08db      	lsrs	r3, r3, #3
 800aeca:	f003 0303 	and.w	r3, r3, #3
 800aece:	4a90      	ldr	r2, [pc, #576]	; (800b110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aed0:	fa22 f303 	lsr.w	r3, r2, r3
 800aed4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800aed6:	e111      	b.n	800b0fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aed8:	4b8d      	ldr	r3, [pc, #564]	; (800b110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aeda:	61bb      	str	r3, [r7, #24]
    break;
 800aedc:	e10e      	b.n	800b0fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800aede:	4b8d      	ldr	r3, [pc, #564]	; (800b114 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aee0:	61bb      	str	r3, [r7, #24]
    break;
 800aee2:	e10b      	b.n	800b0fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800aee4:	4b8c      	ldr	r3, [pc, #560]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aee6:	61bb      	str	r3, [r7, #24]
    break;
 800aee8:	e108      	b.n	800b0fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aeea:	4b88      	ldr	r3, [pc, #544]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeee:	f003 0303 	and.w	r3, r3, #3
 800aef2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800aef4:	4b85      	ldr	r3, [pc, #532]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef8:	091b      	lsrs	r3, r3, #4
 800aefa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aefe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800af00:	4b82      	ldr	r3, [pc, #520]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af04:	f003 0301 	and.w	r3, r3, #1
 800af08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800af0a:	4b80      	ldr	r3, [pc, #512]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af0e:	08db      	lsrs	r3, r3, #3
 800af10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	fb02 f303 	mul.w	r3, r2, r3
 800af1a:	ee07 3a90 	vmov	s15, r3
 800af1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 80e1 	beq.w	800b0f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	2b02      	cmp	r3, #2
 800af32:	f000 8083 	beq.w	800b03c <HAL_RCC_GetSysClockFreq+0x204>
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	2b02      	cmp	r3, #2
 800af3a:	f200 80a1 	bhi.w	800b080 <HAL_RCC_GetSysClockFreq+0x248>
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d003      	beq.n	800af4c <HAL_RCC_GetSysClockFreq+0x114>
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d056      	beq.n	800aff8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800af4a:	e099      	b.n	800b080 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af4c:	4b6f      	ldr	r3, [pc, #444]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f003 0320 	and.w	r3, r3, #32
 800af54:	2b00      	cmp	r3, #0
 800af56:	d02d      	beq.n	800afb4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af58:	4b6c      	ldr	r3, [pc, #432]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	08db      	lsrs	r3, r3, #3
 800af5e:	f003 0303 	and.w	r3, r3, #3
 800af62:	4a6b      	ldr	r2, [pc, #428]	; (800b110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af64:	fa22 f303 	lsr.w	r3, r2, r3
 800af68:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	ee07 3a90 	vmov	s15, r3
 800af70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af82:	4b62      	ldr	r3, [pc, #392]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af8a:	ee07 3a90 	vmov	s15, r3
 800af8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af92:	ed97 6a02 	vldr	s12, [r7, #8]
 800af96:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b11c <HAL_RCC_GetSysClockFreq+0x2e4>
 800af9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800afb2:	e087      	b.n	800b0c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	ee07 3a90 	vmov	s15, r3
 800afba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afbe:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b120 <HAL_RCC_GetSysClockFreq+0x2e8>
 800afc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afc6:	4b51      	ldr	r3, [pc, #324]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afce:	ee07 3a90 	vmov	s15, r3
 800afd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afd6:	ed97 6a02 	vldr	s12, [r7, #8]
 800afda:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b11c <HAL_RCC_GetSysClockFreq+0x2e4>
 800afde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aff6:	e065      	b.n	800b0c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	ee07 3a90 	vmov	s15, r3
 800affe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b002:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b124 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b00a:	4b40      	ldr	r3, [pc, #256]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b012:	ee07 3a90 	vmov	s15, r3
 800b016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b01a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b01e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b11c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b02a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b02e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b032:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b03a:	e043      	b.n	800b0c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	ee07 3a90 	vmov	s15, r3
 800b042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b046:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b128 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b04a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b04e:	4b2f      	ldr	r3, [pc, #188]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b056:	ee07 3a90 	vmov	s15, r3
 800b05a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b05e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b062:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b11c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b06a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b06e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b07a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b07e:	e021      	b.n	800b0c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	ee07 3a90 	vmov	s15, r3
 800b086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b08a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b124 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b08e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b092:	4b1e      	ldr	r3, [pc, #120]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b09a:	ee07 3a90 	vmov	s15, r3
 800b09e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b11c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b0c4:	4b11      	ldr	r3, [pc, #68]	; (800b10c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c8:	0a5b      	lsrs	r3, r3, #9
 800b0ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	ee07 3a90 	vmov	s15, r3
 800b0d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b0dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0e8:	ee17 3a90 	vmov	r3, s15
 800b0ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b0ee:	e005      	b.n	800b0fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	61bb      	str	r3, [r7, #24]
    break;
 800b0f4:	e002      	b.n	800b0fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b0f6:	4b07      	ldr	r3, [pc, #28]	; (800b114 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b0f8:	61bb      	str	r3, [r7, #24]
    break;
 800b0fa:	bf00      	nop
  }

  return sysclockfreq;
 800b0fc:	69bb      	ldr	r3, [r7, #24]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3724      	adds	r7, #36	; 0x24
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	58024400 	.word	0x58024400
 800b110:	03d09000 	.word	0x03d09000
 800b114:	003d0900 	.word	0x003d0900
 800b118:	02dc6c00 	.word	0x02dc6c00
 800b11c:	46000000 	.word	0x46000000
 800b120:	4c742400 	.word	0x4c742400
 800b124:	4a742400 	.word	0x4a742400
 800b128:	4c371b00 	.word	0x4c371b00

0800b12c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b132:	f7ff fe81 	bl	800ae38 <HAL_RCC_GetSysClockFreq>
 800b136:	4602      	mov	r2, r0
 800b138:	4b10      	ldr	r3, [pc, #64]	; (800b17c <HAL_RCC_GetHCLKFreq+0x50>)
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	0a1b      	lsrs	r3, r3, #8
 800b13e:	f003 030f 	and.w	r3, r3, #15
 800b142:	490f      	ldr	r1, [pc, #60]	; (800b180 <HAL_RCC_GetHCLKFreq+0x54>)
 800b144:	5ccb      	ldrb	r3, [r1, r3]
 800b146:	f003 031f 	and.w	r3, r3, #31
 800b14a:	fa22 f303 	lsr.w	r3, r2, r3
 800b14e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b150:	4b0a      	ldr	r3, [pc, #40]	; (800b17c <HAL_RCC_GetHCLKFreq+0x50>)
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	f003 030f 	and.w	r3, r3, #15
 800b158:	4a09      	ldr	r2, [pc, #36]	; (800b180 <HAL_RCC_GetHCLKFreq+0x54>)
 800b15a:	5cd3      	ldrb	r3, [r2, r3]
 800b15c:	f003 031f 	and.w	r3, r3, #31
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	fa22 f303 	lsr.w	r3, r2, r3
 800b166:	4a07      	ldr	r2, [pc, #28]	; (800b184 <HAL_RCC_GetHCLKFreq+0x58>)
 800b168:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b16a:	4a07      	ldr	r2, [pc, #28]	; (800b188 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b170:	4b04      	ldr	r3, [pc, #16]	; (800b184 <HAL_RCC_GetHCLKFreq+0x58>)
 800b172:	681b      	ldr	r3, [r3, #0]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	58024400 	.word	0x58024400
 800b180:	08014514 	.word	0x08014514
 800b184:	24000234 	.word	0x24000234
 800b188:	24000230 	.word	0x24000230

0800b18c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b190:	f7ff ffcc 	bl	800b12c <HAL_RCC_GetHCLKFreq>
 800b194:	4602      	mov	r2, r0
 800b196:	4b06      	ldr	r3, [pc, #24]	; (800b1b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b198:	69db      	ldr	r3, [r3, #28]
 800b19a:	091b      	lsrs	r3, r3, #4
 800b19c:	f003 0307 	and.w	r3, r3, #7
 800b1a0:	4904      	ldr	r1, [pc, #16]	; (800b1b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b1a2:	5ccb      	ldrb	r3, [r1, r3]
 800b1a4:	f003 031f 	and.w	r3, r3, #31
 800b1a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	58024400 	.word	0x58024400
 800b1b4:	08014514 	.word	0x08014514

0800b1b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b1bc:	f7ff ffb6 	bl	800b12c <HAL_RCC_GetHCLKFreq>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	4b06      	ldr	r3, [pc, #24]	; (800b1dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b1c4:	69db      	ldr	r3, [r3, #28]
 800b1c6:	0a1b      	lsrs	r3, r3, #8
 800b1c8:	f003 0307 	and.w	r3, r3, #7
 800b1cc:	4904      	ldr	r1, [pc, #16]	; (800b1e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b1ce:	5ccb      	ldrb	r3, [r1, r3]
 800b1d0:	f003 031f 	and.w	r3, r3, #31
 800b1d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	58024400 	.word	0x58024400
 800b1e0:	08014514 	.word	0x08014514

0800b1e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d03f      	beq.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b204:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b208:	d02a      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b20a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b20e:	d824      	bhi.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b214:	d018      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b21a:	d81e      	bhi.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d003      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b224:	d007      	beq.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b226:	e018      	b.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b228:	4ba3      	ldr	r3, [pc, #652]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22c:	4aa2      	ldr	r2, [pc, #648]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b22e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b234:	e015      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	3304      	adds	r3, #4
 800b23a:	2102      	movs	r1, #2
 800b23c:	4618      	mov	r0, r3
 800b23e:	f001 f9d5 	bl	800c5ec <RCCEx_PLL2_Config>
 800b242:	4603      	mov	r3, r0
 800b244:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b246:	e00c      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3324      	adds	r3, #36	; 0x24
 800b24c:	2102      	movs	r1, #2
 800b24e:	4618      	mov	r0, r3
 800b250:	f001 fa7e 	bl	800c750 <RCCEx_PLL3_Config>
 800b254:	4603      	mov	r3, r0
 800b256:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b258:	e003      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	75fb      	strb	r3, [r7, #23]
      break;
 800b25e:	e000      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b260:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b262:	7dfb      	ldrb	r3, [r7, #23]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d109      	bne.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b268:	4b93      	ldr	r3, [pc, #588]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b26a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b26c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b274:	4990      	ldr	r1, [pc, #576]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b276:	4313      	orrs	r3, r2
 800b278:	650b      	str	r3, [r1, #80]	; 0x50
 800b27a:	e001      	b.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b27c:	7dfb      	ldrb	r3, [r7, #23]
 800b27e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d03d      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b290:	2b04      	cmp	r3, #4
 800b292:	d826      	bhi.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b294:	a201      	add	r2, pc, #4	; (adr r2, 800b29c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29a:	bf00      	nop
 800b29c:	0800b2b1 	.word	0x0800b2b1
 800b2a0:	0800b2bf 	.word	0x0800b2bf
 800b2a4:	0800b2d1 	.word	0x0800b2d1
 800b2a8:	0800b2e9 	.word	0x0800b2e9
 800b2ac:	0800b2e9 	.word	0x0800b2e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2b0:	4b81      	ldr	r3, [pc, #516]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b4:	4a80      	ldr	r2, [pc, #512]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b2b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b2bc:	e015      	b.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f001 f991 	bl	800c5ec <RCCEx_PLL2_Config>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b2ce:	e00c      	b.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	3324      	adds	r3, #36	; 0x24
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f001 fa3a 	bl	800c750 <RCCEx_PLL3_Config>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b2e0:	e003      	b.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	75fb      	strb	r3, [r7, #23]
      break;
 800b2e6:	e000      	b.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b2e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2ea:	7dfb      	ldrb	r3, [r7, #23]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d109      	bne.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b2f0:	4b71      	ldr	r3, [pc, #452]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2f4:	f023 0207 	bic.w	r2, r3, #7
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2fc:	496e      	ldr	r1, [pc, #440]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b2fe:	4313      	orrs	r3, r2
 800b300:	650b      	str	r3, [r1, #80]	; 0x50
 800b302:	e001      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b310:	2b00      	cmp	r3, #0
 800b312:	d042      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b31c:	d02b      	beq.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b31e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b322:	d825      	bhi.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b324:	2bc0      	cmp	r3, #192	; 0xc0
 800b326:	d028      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b328:	2bc0      	cmp	r3, #192	; 0xc0
 800b32a:	d821      	bhi.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b32c:	2b80      	cmp	r3, #128	; 0x80
 800b32e:	d016      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b330:	2b80      	cmp	r3, #128	; 0x80
 800b332:	d81d      	bhi.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b338:	2b40      	cmp	r3, #64	; 0x40
 800b33a:	d007      	beq.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b33c:	e018      	b.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b33e:	4b5e      	ldr	r3, [pc, #376]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b342:	4a5d      	ldr	r2, [pc, #372]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b348:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b34a:	e017      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	3304      	adds	r3, #4
 800b350:	2100      	movs	r1, #0
 800b352:	4618      	mov	r0, r3
 800b354:	f001 f94a 	bl	800c5ec <RCCEx_PLL2_Config>
 800b358:	4603      	mov	r3, r0
 800b35a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b35c:	e00e      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	3324      	adds	r3, #36	; 0x24
 800b362:	2100      	movs	r1, #0
 800b364:	4618      	mov	r0, r3
 800b366:	f001 f9f3 	bl	800c750 <RCCEx_PLL3_Config>
 800b36a:	4603      	mov	r3, r0
 800b36c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b36e:	e005      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	75fb      	strb	r3, [r7, #23]
      break;
 800b374:	e002      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b376:	bf00      	nop
 800b378:	e000      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b37a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d109      	bne.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b382:	4b4d      	ldr	r3, [pc, #308]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b386:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b38e:	494a      	ldr	r1, [pc, #296]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b390:	4313      	orrs	r3, r2
 800b392:	650b      	str	r3, [r1, #80]	; 0x50
 800b394:	e001      	b.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b396:	7dfb      	ldrb	r3, [r7, #23]
 800b398:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d049      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b3ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b3b0:	d030      	beq.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b3b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b3b6:	d82a      	bhi.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b3b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b3bc:	d02c      	beq.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b3be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b3c2:	d824      	bhi.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b3c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3c8:	d018      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b3ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3ce:	d81e      	bhi.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d003      	beq.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b3d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3d8:	d007      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b3da:	e018      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3dc:	4b36      	ldr	r3, [pc, #216]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e0:	4a35      	ldr	r2, [pc, #212]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b3e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b3e8:	e017      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f001 f8fb 	bl	800c5ec <RCCEx_PLL2_Config>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b3fa:	e00e      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	3324      	adds	r3, #36	; 0x24
 800b400:	2100      	movs	r1, #0
 800b402:	4618      	mov	r0, r3
 800b404:	f001 f9a4 	bl	800c750 <RCCEx_PLL3_Config>
 800b408:	4603      	mov	r3, r0
 800b40a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b40c:	e005      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	75fb      	strb	r3, [r7, #23]
      break;
 800b412:	e002      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b414:	bf00      	nop
 800b416:	e000      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b41a:	7dfb      	ldrb	r3, [r7, #23]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10a      	bne.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b420:	4b25      	ldr	r3, [pc, #148]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b424:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b42e:	4922      	ldr	r1, [pc, #136]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b430:	4313      	orrs	r3, r2
 800b432:	658b      	str	r3, [r1, #88]	; 0x58
 800b434:	e001      	b.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b436:	7dfb      	ldrb	r3, [r7, #23]
 800b438:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b442:	2b00      	cmp	r3, #0
 800b444:	d04b      	beq.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b44c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b450:	d030      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b452:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b456:	d82a      	bhi.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b458:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b45c:	d02e      	beq.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800b45e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b462:	d824      	bhi.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b468:	d018      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b46a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b46e:	d81e      	bhi.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b478:	d007      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b47a:	e018      	b.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b47c:	4b0e      	ldr	r3, [pc, #56]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b480:	4a0d      	ldr	r2, [pc, #52]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b486:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b488:	e019      	b.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	3304      	adds	r3, #4
 800b48e:	2100      	movs	r1, #0
 800b490:	4618      	mov	r0, r3
 800b492:	f001 f8ab 	bl	800c5ec <RCCEx_PLL2_Config>
 800b496:	4603      	mov	r3, r0
 800b498:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b49a:	e010      	b.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	3324      	adds	r3, #36	; 0x24
 800b4a0:	2100      	movs	r1, #0
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f001 f954 	bl	800c750 <RCCEx_PLL3_Config>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b4ac:	e007      	b.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4b2:	e004      	b.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800b4b4:	bf00      	nop
 800b4b6:	e002      	b.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b4b8:	58024400 	.word	0x58024400
      break;
 800b4bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4be:	7dfb      	ldrb	r3, [r7, #23]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b4c4:	4b99      	ldr	r3, [pc, #612]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b4c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b4d2:	4996      	ldr	r1, [pc, #600]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	658b      	str	r3, [r1, #88]	; 0x58
 800b4d8:	e001      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4da:	7dfb      	ldrb	r3, [r7, #23]
 800b4dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d032      	beq.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4ee:	2b30      	cmp	r3, #48	; 0x30
 800b4f0:	d01c      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x348>
 800b4f2:	2b30      	cmp	r3, #48	; 0x30
 800b4f4:	d817      	bhi.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b4f6:	2b20      	cmp	r3, #32
 800b4f8:	d00c      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800b4fa:	2b20      	cmp	r3, #32
 800b4fc:	d813      	bhi.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d016      	beq.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b502:	2b10      	cmp	r3, #16
 800b504:	d10f      	bne.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b506:	4b89      	ldr	r3, [pc, #548]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50a:	4a88      	ldr	r2, [pc, #544]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b50c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b510:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b512:	e00e      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	3304      	adds	r3, #4
 800b518:	2102      	movs	r1, #2
 800b51a:	4618      	mov	r0, r3
 800b51c:	f001 f866 	bl	800c5ec <RCCEx_PLL2_Config>
 800b520:	4603      	mov	r3, r0
 800b522:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b524:	e005      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	75fb      	strb	r3, [r7, #23]
      break;
 800b52a:	e002      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b52c:	bf00      	nop
 800b52e:	e000      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b530:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b532:	7dfb      	ldrb	r3, [r7, #23]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d109      	bne.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b538:	4b7c      	ldr	r3, [pc, #496]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b53a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b53c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b544:	4979      	ldr	r1, [pc, #484]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b546:	4313      	orrs	r3, r2
 800b548:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b54a:	e001      	b.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b54c:	7dfb      	ldrb	r3, [r7, #23]
 800b54e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d047      	beq.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b564:	d030      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b56a:	d82a      	bhi.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b56c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b570:	d02c      	beq.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800b572:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b576:	d824      	bhi.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b57c:	d018      	beq.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800b57e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b582:	d81e      	bhi.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b58c:	d007      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800b58e:	e018      	b.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b590:	4b66      	ldr	r3, [pc, #408]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b594:	4a65      	ldr	r2, [pc, #404]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b59a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b59c:	e017      	b.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	3304      	adds	r3, #4
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f001 f821 	bl	800c5ec <RCCEx_PLL2_Config>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b5ae:	e00e      	b.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	3324      	adds	r3, #36	; 0x24
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f001 f8ca 	bl	800c750 <RCCEx_PLL3_Config>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b5c0:	e005      	b.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	75fb      	strb	r3, [r7, #23]
      break;
 800b5c6:	e002      	b.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b5c8:	bf00      	nop
 800b5ca:	e000      	b.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b5cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5ce:	7dfb      	ldrb	r3, [r7, #23]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d109      	bne.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b5d4:	4b55      	ldr	r3, [pc, #340]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b5d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5e0:	4952      	ldr	r1, [pc, #328]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	650b      	str	r3, [r1, #80]	; 0x50
 800b5e6:	e001      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d049      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b600:	d02e      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b602:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b606:	d828      	bhi.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b608:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b60c:	d02a      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800b60e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b612:	d822      	bhi.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b614:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b618:	d026      	beq.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800b61a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b61e:	d81c      	bhi.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b624:	d010      	beq.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800b626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b62a:	d816      	bhi.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d01d      	beq.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x488>
 800b630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b634:	d111      	bne.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3304      	adds	r3, #4
 800b63a:	2101      	movs	r1, #1
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 ffd5 	bl	800c5ec <RCCEx_PLL2_Config>
 800b642:	4603      	mov	r3, r0
 800b644:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b646:	e012      	b.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3324      	adds	r3, #36	; 0x24
 800b64c:	2101      	movs	r1, #1
 800b64e:	4618      	mov	r0, r3
 800b650:	f001 f87e 	bl	800c750 <RCCEx_PLL3_Config>
 800b654:	4603      	mov	r3, r0
 800b656:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b658:	e009      	b.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	75fb      	strb	r3, [r7, #23]
      break;
 800b65e:	e006      	b.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b660:	bf00      	nop
 800b662:	e004      	b.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b664:	bf00      	nop
 800b666:	e002      	b.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b668:	bf00      	nop
 800b66a:	e000      	b.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b66c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b66e:	7dfb      	ldrb	r3, [r7, #23]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d109      	bne.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b674:	4b2d      	ldr	r3, [pc, #180]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b678:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b680:	492a      	ldr	r1, [pc, #168]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b682:	4313      	orrs	r3, r2
 800b684:	650b      	str	r3, [r1, #80]	; 0x50
 800b686:	e001      	b.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b688:	7dfb      	ldrb	r3, [r7, #23]
 800b68a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b694:	2b00      	cmp	r3, #0
 800b696:	d04d      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b69e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6a2:	d02e      	beq.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800b6a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6a8:	d828      	bhi.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ae:	d02a      	beq.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b6b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6b4:	d822      	bhi.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b6b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6ba:	d026      	beq.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800b6bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6c0:	d81c      	bhi.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b6c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6c6:	d010      	beq.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b6c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6cc:	d816      	bhi.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d01d      	beq.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b6d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6d6:	d111      	bne.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	3304      	adds	r3, #4
 800b6dc:	2101      	movs	r1, #1
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 ff84 	bl	800c5ec <RCCEx_PLL2_Config>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b6e8:	e012      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	3324      	adds	r3, #36	; 0x24
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f001 f82d 	bl	800c750 <RCCEx_PLL3_Config>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b6fa:	e009      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b700:	e006      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b702:	bf00      	nop
 800b704:	e004      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b706:	bf00      	nop
 800b708:	e002      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b70a:	bf00      	nop
 800b70c:	e000      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b70e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b710:	7dfb      	ldrb	r3, [r7, #23]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10c      	bne.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b716:	4b05      	ldr	r3, [pc, #20]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b71a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b724:	4901      	ldr	r1, [pc, #4]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b726:	4313      	orrs	r3, r2
 800b728:	658b      	str	r3, [r1, #88]	; 0x58
 800b72a:	e003      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800b72c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b730:	7dfb      	ldrb	r3, [r7, #23]
 800b732:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d02f      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b748:	d00e      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800b74a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b74e:	d814      	bhi.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x596>
 800b750:	2b00      	cmp	r3, #0
 800b752:	d015      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800b754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b758:	d10f      	bne.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b75a:	4baf      	ldr	r3, [pc, #700]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75e:	4aae      	ldr	r2, [pc, #696]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b764:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b766:	e00c      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3304      	adds	r3, #4
 800b76c:	2101      	movs	r1, #1
 800b76e:	4618      	mov	r0, r3
 800b770:	f000 ff3c 	bl	800c5ec <RCCEx_PLL2_Config>
 800b774:	4603      	mov	r3, r0
 800b776:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b778:	e003      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	75fb      	strb	r3, [r7, #23]
      break;
 800b77e:	e000      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800b780:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b782:	7dfb      	ldrb	r3, [r7, #23]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d109      	bne.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b788:	4ba3      	ldr	r3, [pc, #652]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b78a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b78c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b794:	49a0      	ldr	r1, [pc, #640]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b796:	4313      	orrs	r3, r2
 800b798:	650b      	str	r3, [r1, #80]	; 0x50
 800b79a:	e001      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b79c:	7dfb      	ldrb	r3, [r7, #23]
 800b79e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d032      	beq.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7b0:	2b03      	cmp	r3, #3
 800b7b2:	d81b      	bhi.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b7b4:	a201      	add	r2, pc, #4	; (adr r2, 800b7bc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800b7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ba:	bf00      	nop
 800b7bc:	0800b7f3 	.word	0x0800b7f3
 800b7c0:	0800b7cd 	.word	0x0800b7cd
 800b7c4:	0800b7db 	.word	0x0800b7db
 800b7c8:	0800b7f3 	.word	0x0800b7f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7cc:	4b92      	ldr	r3, [pc, #584]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d0:	4a91      	ldr	r2, [pc, #580]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b7d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b7d8:	e00c      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	2102      	movs	r1, #2
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f000 ff03 	bl	800c5ec <RCCEx_PLL2_Config>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b7ea:	e003      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	75fb      	strb	r3, [r7, #23]
      break;
 800b7f0:	e000      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b7f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7f4:	7dfb      	ldrb	r3, [r7, #23]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d109      	bne.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b7fa:	4b87      	ldr	r3, [pc, #540]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b7fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7fe:	f023 0203 	bic.w	r2, r3, #3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b806:	4984      	ldr	r1, [pc, #528]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b808:	4313      	orrs	r3, r2
 800b80a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b80c:	e001      	b.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b80e:	7dfb      	ldrb	r3, [r7, #23]
 800b810:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f000 8086 	beq.w	800b92c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b820:	4b7e      	ldr	r3, [pc, #504]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a7d      	ldr	r2, [pc, #500]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b82a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b82c:	f7fb f970 	bl	8006b10 <HAL_GetTick>
 800b830:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b832:	e009      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b834:	f7fb f96c 	bl	8006b10 <HAL_GetTick>
 800b838:	4602      	mov	r2, r0
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	2b64      	cmp	r3, #100	; 0x64
 800b840:	d902      	bls.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b842:	2303      	movs	r3, #3
 800b844:	75fb      	strb	r3, [r7, #23]
        break;
 800b846:	e005      	b.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b848:	4b74      	ldr	r3, [pc, #464]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0ef      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b854:	7dfb      	ldrb	r3, [r7, #23]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d166      	bne.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b85a:	4b6f      	ldr	r3, [pc, #444]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b85c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b864:	4053      	eors	r3, r2
 800b866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d013      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b86e:	4b6a      	ldr	r3, [pc, #424]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b876:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b878:	4b67      	ldr	r3, [pc, #412]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b87a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b87c:	4a66      	ldr	r2, [pc, #408]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b87e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b882:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b884:	4b64      	ldr	r3, [pc, #400]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b888:	4a63      	ldr	r2, [pc, #396]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b88a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b88e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b890:	4a61      	ldr	r2, [pc, #388]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b89c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a0:	d115      	bne.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8a2:	f7fb f935 	bl	8006b10 <HAL_GetTick>
 800b8a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8a8:	e00b      	b.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8aa:	f7fb f931 	bl	8006b10 <HAL_GetTick>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	1ad3      	subs	r3, r2, r3
 800b8b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d902      	bls.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	75fb      	strb	r3, [r7, #23]
            break;
 800b8c0:	e005      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8c2:	4b55      	ldr	r3, [pc, #340]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8c6:	f003 0302 	and.w	r3, r3, #2
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d0ed      	beq.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b8ce:	7dfb      	ldrb	r3, [r7, #23]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d126      	bne.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8e2:	d10d      	bne.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b8e4:	4b4c      	ldr	r3, [pc, #304]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8f2:	0919      	lsrs	r1, r3, #4
 800b8f4:	4b4a      	ldr	r3, [pc, #296]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800b8f6:	400b      	ands	r3, r1
 800b8f8:	4947      	ldr	r1, [pc, #284]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	610b      	str	r3, [r1, #16]
 800b8fe:	e005      	b.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b900:	4b45      	ldr	r3, [pc, #276]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	4a44      	ldr	r2, [pc, #272]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b906:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b90a:	6113      	str	r3, [r2, #16]
 800b90c:	4b42      	ldr	r3, [pc, #264]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b90e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b91a:	493f      	ldr	r1, [pc, #252]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b91c:	4313      	orrs	r3, r2
 800b91e:	670b      	str	r3, [r1, #112]	; 0x70
 800b920:	e004      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b922:	7dfb      	ldrb	r3, [r7, #23]
 800b924:	75bb      	strb	r3, [r7, #22]
 800b926:	e001      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b928:	7dfb      	ldrb	r3, [r7, #23]
 800b92a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f003 0301 	and.w	r3, r3, #1
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 8085 	beq.w	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b93e:	2b28      	cmp	r3, #40	; 0x28
 800b940:	d866      	bhi.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b942:	a201      	add	r2, pc, #4	; (adr r2, 800b948 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b948:	0800ba25 	.word	0x0800ba25
 800b94c:	0800ba11 	.word	0x0800ba11
 800b950:	0800ba11 	.word	0x0800ba11
 800b954:	0800ba11 	.word	0x0800ba11
 800b958:	0800ba11 	.word	0x0800ba11
 800b95c:	0800ba11 	.word	0x0800ba11
 800b960:	0800ba11 	.word	0x0800ba11
 800b964:	0800ba11 	.word	0x0800ba11
 800b968:	0800b9ed 	.word	0x0800b9ed
 800b96c:	0800ba11 	.word	0x0800ba11
 800b970:	0800ba11 	.word	0x0800ba11
 800b974:	0800ba11 	.word	0x0800ba11
 800b978:	0800ba11 	.word	0x0800ba11
 800b97c:	0800ba11 	.word	0x0800ba11
 800b980:	0800ba11 	.word	0x0800ba11
 800b984:	0800ba11 	.word	0x0800ba11
 800b988:	0800b9ff 	.word	0x0800b9ff
 800b98c:	0800ba11 	.word	0x0800ba11
 800b990:	0800ba11 	.word	0x0800ba11
 800b994:	0800ba11 	.word	0x0800ba11
 800b998:	0800ba11 	.word	0x0800ba11
 800b99c:	0800ba11 	.word	0x0800ba11
 800b9a0:	0800ba11 	.word	0x0800ba11
 800b9a4:	0800ba11 	.word	0x0800ba11
 800b9a8:	0800ba25 	.word	0x0800ba25
 800b9ac:	0800ba11 	.word	0x0800ba11
 800b9b0:	0800ba11 	.word	0x0800ba11
 800b9b4:	0800ba11 	.word	0x0800ba11
 800b9b8:	0800ba11 	.word	0x0800ba11
 800b9bc:	0800ba11 	.word	0x0800ba11
 800b9c0:	0800ba11 	.word	0x0800ba11
 800b9c4:	0800ba11 	.word	0x0800ba11
 800b9c8:	0800ba25 	.word	0x0800ba25
 800b9cc:	0800ba11 	.word	0x0800ba11
 800b9d0:	0800ba11 	.word	0x0800ba11
 800b9d4:	0800ba11 	.word	0x0800ba11
 800b9d8:	0800ba11 	.word	0x0800ba11
 800b9dc:	0800ba11 	.word	0x0800ba11
 800b9e0:	0800ba11 	.word	0x0800ba11
 800b9e4:	0800ba11 	.word	0x0800ba11
 800b9e8:	0800ba25 	.word	0x0800ba25
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	3304      	adds	r3, #4
 800b9f0:	2101      	movs	r1, #1
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 fdfa 	bl	800c5ec <RCCEx_PLL2_Config>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b9fc:	e013      	b.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	3324      	adds	r3, #36	; 0x24
 800ba02:	2101      	movs	r1, #1
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 fea3 	bl	800c750 <RCCEx_PLL3_Config>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ba0e:	e00a      	b.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	75fb      	strb	r3, [r7, #23]
      break;
 800ba14:	e007      	b.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800ba16:	bf00      	nop
 800ba18:	58024400 	.word	0x58024400
 800ba1c:	58024800 	.word	0x58024800
 800ba20:	00ffffcf 	.word	0x00ffffcf
      break;
 800ba24:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d109      	bne.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ba2c:	4b96      	ldr	r3, [pc, #600]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ba2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba30:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba38:	4993      	ldr	r1, [pc, #588]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	654b      	str	r3, [r1, #84]	; 0x54
 800ba3e:	e001      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
 800ba42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 0302 	and.w	r3, r3, #2
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d038      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba54:	2b05      	cmp	r3, #5
 800ba56:	d821      	bhi.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800ba58:	a201      	add	r2, pc, #4	; (adr r2, 800ba60 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800ba5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5e:	bf00      	nop
 800ba60:	0800baa3 	.word	0x0800baa3
 800ba64:	0800ba79 	.word	0x0800ba79
 800ba68:	0800ba8b 	.word	0x0800ba8b
 800ba6c:	0800baa3 	.word	0x0800baa3
 800ba70:	0800baa3 	.word	0x0800baa3
 800ba74:	0800baa3 	.word	0x0800baa3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	2101      	movs	r1, #1
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f000 fdb4 	bl	800c5ec <RCCEx_PLL2_Config>
 800ba84:	4603      	mov	r3, r0
 800ba86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ba88:	e00c      	b.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	3324      	adds	r3, #36	; 0x24
 800ba8e:	2101      	movs	r1, #1
 800ba90:	4618      	mov	r0, r3
 800ba92:	f000 fe5d 	bl	800c750 <RCCEx_PLL3_Config>
 800ba96:	4603      	mov	r3, r0
 800ba98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ba9a:	e003      	b.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	75fb      	strb	r3, [r7, #23]
      break;
 800baa0:	e000      	b.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800baa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800baa4:	7dfb      	ldrb	r3, [r7, #23]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d109      	bne.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800baaa:	4b77      	ldr	r3, [pc, #476]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800baac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baae:	f023 0207 	bic.w	r2, r3, #7
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bab6:	4974      	ldr	r1, [pc, #464]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bab8:	4313      	orrs	r3, r2
 800baba:	654b      	str	r3, [r1, #84]	; 0x54
 800babc:	e001      	b.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800babe:	7dfb      	ldrb	r3, [r7, #23]
 800bac0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 0304 	and.w	r3, r3, #4
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d03a      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bad4:	2b05      	cmp	r3, #5
 800bad6:	d821      	bhi.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x938>
 800bad8:	a201      	add	r2, pc, #4	; (adr r2, 800bae0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800bada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bade:	bf00      	nop
 800bae0:	0800bb23 	.word	0x0800bb23
 800bae4:	0800baf9 	.word	0x0800baf9
 800bae8:	0800bb0b 	.word	0x0800bb0b
 800baec:	0800bb23 	.word	0x0800bb23
 800baf0:	0800bb23 	.word	0x0800bb23
 800baf4:	0800bb23 	.word	0x0800bb23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	3304      	adds	r3, #4
 800bafc:	2101      	movs	r1, #1
 800bafe:	4618      	mov	r0, r3
 800bb00:	f000 fd74 	bl	800c5ec <RCCEx_PLL2_Config>
 800bb04:	4603      	mov	r3, r0
 800bb06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bb08:	e00c      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	3324      	adds	r3, #36	; 0x24
 800bb0e:	2101      	movs	r1, #1
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 fe1d 	bl	800c750 <RCCEx_PLL3_Config>
 800bb16:	4603      	mov	r3, r0
 800bb18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bb1a:	e003      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	75fb      	strb	r3, [r7, #23]
      break;
 800bb20:	e000      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800bb22:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb24:	7dfb      	ldrb	r3, [r7, #23]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d10a      	bne.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bb2a:	4b57      	ldr	r3, [pc, #348]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bb2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb2e:	f023 0207 	bic.w	r2, r3, #7
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb38:	4953      	ldr	r1, [pc, #332]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	658b      	str	r3, [r1, #88]	; 0x58
 800bb3e:	e001      	b.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
 800bb42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 0320 	and.w	r3, r3, #32
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d04b      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb5a:	d02e      	beq.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800bb5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb60:	d828      	bhi.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bb62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb66:	d02a      	beq.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800bb68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb6c:	d822      	bhi.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bb6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb72:	d026      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800bb74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb78:	d81c      	bhi.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bb7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb7e:	d010      	beq.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800bb80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb84:	d816      	bhi.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d01d      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800bb8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb8e:	d111      	bne.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	3304      	adds	r3, #4
 800bb94:	2100      	movs	r1, #0
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 fd28 	bl	800c5ec <RCCEx_PLL2_Config>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bba0:	e012      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	3324      	adds	r3, #36	; 0x24
 800bba6:	2102      	movs	r1, #2
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f000 fdd1 	bl	800c750 <RCCEx_PLL3_Config>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bbb2:	e009      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	75fb      	strb	r3, [r7, #23]
      break;
 800bbb8:	e006      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bbba:	bf00      	nop
 800bbbc:	e004      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bbbe:	bf00      	nop
 800bbc0:	e002      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bbc2:	bf00      	nop
 800bbc4:	e000      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bbc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d10a      	bne.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bbce:	4b2e      	ldr	r3, [pc, #184]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bbd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbdc:	492a      	ldr	r1, [pc, #168]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	654b      	str	r3, [r1, #84]	; 0x54
 800bbe2:	e001      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
 800bbe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d04d      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bbfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bbfe:	d02e      	beq.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800bc00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc04:	d828      	bhi.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bc06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc0a:	d02a      	beq.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800bc0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc10:	d822      	bhi.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bc12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc16:	d026      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800bc18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc1c:	d81c      	bhi.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bc1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc22:	d010      	beq.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800bc24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc28:	d816      	bhi.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d01d      	beq.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800bc2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc32:	d111      	bne.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	3304      	adds	r3, #4
 800bc38:	2100      	movs	r1, #0
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f000 fcd6 	bl	800c5ec <RCCEx_PLL2_Config>
 800bc40:	4603      	mov	r3, r0
 800bc42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bc44:	e012      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	3324      	adds	r3, #36	; 0x24
 800bc4a:	2102      	movs	r1, #2
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f000 fd7f 	bl	800c750 <RCCEx_PLL3_Config>
 800bc52:	4603      	mov	r3, r0
 800bc54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bc56:	e009      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	75fb      	strb	r3, [r7, #23]
      break;
 800bc5c:	e006      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bc5e:	bf00      	nop
 800bc60:	e004      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bc62:	bf00      	nop
 800bc64:	e002      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bc66:	bf00      	nop
 800bc68:	e000      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bc6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc6c:	7dfb      	ldrb	r3, [r7, #23]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d10c      	bne.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bc72:	4b05      	ldr	r3, [pc, #20]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bc74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc80:	4901      	ldr	r1, [pc, #4]	; (800bc88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bc82:	4313      	orrs	r3, r2
 800bc84:	658b      	str	r3, [r1, #88]	; 0x58
 800bc86:	e003      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800bc88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc8c:	7dfb      	ldrb	r3, [r7, #23]
 800bc8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d04b      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bca2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bca6:	d02e      	beq.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800bca8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bcac:	d828      	bhi.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800bcae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcb2:	d02a      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800bcb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcb8:	d822      	bhi.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800bcba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bcbe:	d026      	beq.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800bcc0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bcc4:	d81c      	bhi.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800bcc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcca:	d010      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800bccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcd0:	d816      	bhi.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d01d      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800bcd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcda:	d111      	bne.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	3304      	adds	r3, #4
 800bce0:	2100      	movs	r1, #0
 800bce2:	4618      	mov	r0, r3
 800bce4:	f000 fc82 	bl	800c5ec <RCCEx_PLL2_Config>
 800bce8:	4603      	mov	r3, r0
 800bcea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bcec:	e012      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	3324      	adds	r3, #36	; 0x24
 800bcf2:	2102      	movs	r1, #2
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f000 fd2b 	bl	800c750 <RCCEx_PLL3_Config>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bcfe:	e009      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd00:	2301      	movs	r3, #1
 800bd02:	75fb      	strb	r3, [r7, #23]
      break;
 800bd04:	e006      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800bd06:	bf00      	nop
 800bd08:	e004      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800bd0a:	bf00      	nop
 800bd0c:	e002      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800bd0e:	bf00      	nop
 800bd10:	e000      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800bd12:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d10a      	bne.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bd1a:	4b9d      	ldr	r3, [pc, #628]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bd1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd28:	4999      	ldr	r1, [pc, #612]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	658b      	str	r3, [r1, #88]	; 0x58
 800bd2e:	e001      	b.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd30:	7dfb      	ldrb	r3, [r7, #23]
 800bd32:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f003 0308 	and.w	r3, r3, #8
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d01a      	beq.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd4a:	d10a      	bne.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	3324      	adds	r3, #36	; 0x24
 800bd50:	2102      	movs	r1, #2
 800bd52:	4618      	mov	r0, r3
 800bd54:	f000 fcfc 	bl	800c750 <RCCEx_PLL3_Config>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bd62:	4b8b      	ldr	r3, [pc, #556]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bd64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd70:	4987      	ldr	r1, [pc, #540]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 0310 	and.w	r3, r3, #16
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d01a      	beq.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd8c:	d10a      	bne.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	3324      	adds	r3, #36	; 0x24
 800bd92:	2102      	movs	r1, #2
 800bd94:	4618      	mov	r0, r3
 800bd96:	f000 fcdb 	bl	800c750 <RCCEx_PLL3_Config>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bda4:	4b7a      	ldr	r3, [pc, #488]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bda6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bda8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdb2:	4977      	ldr	r1, [pc, #476]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d034      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bdca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdce:	d01d      	beq.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800bdd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdd4:	d817      	bhi.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d003      	beq.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800bdda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdde:	d009      	beq.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800bde0:	e011      	b.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	3304      	adds	r3, #4
 800bde6:	2100      	movs	r1, #0
 800bde8:	4618      	mov	r0, r3
 800bdea:	f000 fbff 	bl	800c5ec <RCCEx_PLL2_Config>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bdf2:	e00c      	b.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	3324      	adds	r3, #36	; 0x24
 800bdf8:	2102      	movs	r1, #2
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f000 fca8 	bl	800c750 <RCCEx_PLL3_Config>
 800be00:	4603      	mov	r3, r0
 800be02:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800be04:	e003      	b.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	75fb      	strb	r3, [r7, #23]
      break;
 800be0a:	e000      	b.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800be0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be0e:	7dfb      	ldrb	r3, [r7, #23]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10a      	bne.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800be14:	4b5e      	ldr	r3, [pc, #376]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be22:	495b      	ldr	r1, [pc, #364]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be24:	4313      	orrs	r3, r2
 800be26:	658b      	str	r3, [r1, #88]	; 0x58
 800be28:	e001      	b.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be36:	2b00      	cmp	r3, #0
 800be38:	d033      	beq.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be44:	d01c      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800be46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be4a:	d816      	bhi.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800be4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be50:	d003      	beq.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800be52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be56:	d007      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800be58:	e00f      	b.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be5a:	4b4d      	ldr	r3, [pc, #308]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5e:	4a4c      	ldr	r2, [pc, #304]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800be66:	e00c      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3324      	adds	r3, #36	; 0x24
 800be6c:	2101      	movs	r1, #1
 800be6e:	4618      	mov	r0, r3
 800be70:	f000 fc6e 	bl	800c750 <RCCEx_PLL3_Config>
 800be74:	4603      	mov	r3, r0
 800be76:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800be78:	e003      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	75fb      	strb	r3, [r7, #23]
      break;
 800be7e:	e000      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800be80:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be82:	7dfb      	ldrb	r3, [r7, #23]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10a      	bne.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be88:	4b41      	ldr	r3, [pc, #260]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be96:	493e      	ldr	r1, [pc, #248]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be98:	4313      	orrs	r3, r2
 800be9a:	654b      	str	r3, [r1, #84]	; 0x54
 800be9c:	e001      	b.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d029      	beq.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800beb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beba:	d007      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800bebc:	e00f      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bebe:	4b34      	ldr	r3, [pc, #208]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec2:	4a33      	ldr	r2, [pc, #204]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800beca:	e00b      	b.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	3304      	adds	r3, #4
 800bed0:	2102      	movs	r1, #2
 800bed2:	4618      	mov	r0, r3
 800bed4:	f000 fb8a 	bl	800c5ec <RCCEx_PLL2_Config>
 800bed8:	4603      	mov	r3, r0
 800beda:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bedc:	e002      	b.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	75fb      	strb	r3, [r7, #23]
      break;
 800bee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d109      	bne.n	800befe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800beea:	4b29      	ldr	r3, [pc, #164]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800beec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bef6:	4926      	ldr	r1, [pc, #152]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bef8:	4313      	orrs	r3, r2
 800befa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800befc:	e001      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800befe:	7dfb      	ldrb	r3, [r7, #23]
 800bf00:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00a      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3324      	adds	r3, #36	; 0x24
 800bf12:	2102      	movs	r1, #2
 800bf14:	4618      	mov	r0, r3
 800bf16:	f000 fc1b 	bl	800c750 <RCCEx_PLL3_Config>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d001      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d033      	beq.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf38:	d017      	beq.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800bf3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf3e:	d811      	bhi.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800bf40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf44:	d013      	beq.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800bf46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf4a:	d80b      	bhi.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d010      	beq.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800bf50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf54:	d106      	bne.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf56:	4b0e      	ldr	r3, [pc, #56]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5a:	4a0d      	ldr	r2, [pc, #52]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800bf62:	e007      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	75fb      	strb	r3, [r7, #23]
      break;
 800bf68:	e004      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bf6a:	bf00      	nop
 800bf6c:	e002      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bf6e:	bf00      	nop
 800bf70:	e000      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bf72:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10c      	bne.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf7a:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf86:	4902      	ldr	r1, [pc, #8]	; (800bf90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	654b      	str	r3, [r1, #84]	; 0x54
 800bf8c:	e004      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800bf8e:	bf00      	nop
 800bf90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf94:	7dfb      	ldrb	r3, [r7, #23]
 800bf96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d008      	beq.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bfa4:	4b31      	ldr	r3, [pc, #196]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bfa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfb0:	492e      	ldr	r1, [pc, #184]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d009      	beq.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bfc2:	4b2a      	ldr	r3, [pc, #168]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bfd0:	4926      	ldr	r1, [pc, #152]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d008      	beq.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bfe2:	4b22      	ldr	r3, [pc, #136]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bfe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfe6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bfee:	491f      	ldr	r1, [pc, #124]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bff0:	4313      	orrs	r3, r2
 800bff2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00d      	beq.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c000:	4b1a      	ldr	r3, [pc, #104]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	4a19      	ldr	r2, [pc, #100]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c006:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c00a:	6113      	str	r3, [r2, #16]
 800c00c:	4b17      	ldr	r3, [pc, #92]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c00e:	691a      	ldr	r2, [r3, #16]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c016:	4915      	ldr	r1, [pc, #84]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c018:	4313      	orrs	r3, r2
 800c01a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	da08      	bge.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c024:	4b11      	ldr	r3, [pc, #68]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c028:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c030:	490e      	ldr	r1, [pc, #56]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c032:	4313      	orrs	r3, r2
 800c034:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d009      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c042:	4b0a      	ldr	r3, [pc, #40]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c046:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c050:	4906      	ldr	r1, [pc, #24]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c052:	4313      	orrs	r3, r2
 800c054:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c056:	7dbb      	ldrb	r3, [r7, #22]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d101      	bne.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800c05c:	2300      	movs	r3, #0
 800c05e:	e000      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
}
 800c062:	4618      	mov	r0, r3
 800c064:	3718      	adds	r7, #24
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	58024400 	.word	0x58024400

0800c070 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c074:	f7ff f85a 	bl	800b12c <HAL_RCC_GetHCLKFreq>
 800c078:	4602      	mov	r2, r0
 800c07a:	4b06      	ldr	r3, [pc, #24]	; (800c094 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	091b      	lsrs	r3, r3, #4
 800c080:	f003 0307 	and.w	r3, r3, #7
 800c084:	4904      	ldr	r1, [pc, #16]	; (800c098 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c086:	5ccb      	ldrb	r3, [r1, r3]
 800c088:	f003 031f 	and.w	r3, r3, #31
 800c08c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c090:	4618      	mov	r0, r3
 800c092:	bd80      	pop	{r7, pc}
 800c094:	58024400 	.word	0x58024400
 800c098:	08014514 	.word	0x08014514

0800c09c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b089      	sub	sp, #36	; 0x24
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0a4:	4ba1      	ldr	r3, [pc, #644]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a8:	f003 0303 	and.w	r3, r3, #3
 800c0ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c0ae:	4b9f      	ldr	r3, [pc, #636]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b2:	0b1b      	lsrs	r3, r3, #12
 800c0b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c0ba:	4b9c      	ldr	r3, [pc, #624]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0be:	091b      	lsrs	r3, r3, #4
 800c0c0:	f003 0301 	and.w	r3, r3, #1
 800c0c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c0c6:	4b99      	ldr	r3, [pc, #612]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ca:	08db      	lsrs	r3, r3, #3
 800c0cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0d0:	693a      	ldr	r2, [r7, #16]
 800c0d2:	fb02 f303 	mul.w	r3, r2, r3
 800c0d6:	ee07 3a90 	vmov	s15, r3
 800c0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f000 8111 	beq.w	800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	f000 8083 	beq.w	800c1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	f200 80a1 	bhi.w	800c23c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d003      	beq.n	800c108 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	2b01      	cmp	r3, #1
 800c104:	d056      	beq.n	800c1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c106:	e099      	b.n	800c23c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c108:	4b88      	ldr	r3, [pc, #544]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 0320 	and.w	r3, r3, #32
 800c110:	2b00      	cmp	r3, #0
 800c112:	d02d      	beq.n	800c170 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c114:	4b85      	ldr	r3, [pc, #532]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	08db      	lsrs	r3, r3, #3
 800c11a:	f003 0303 	and.w	r3, r3, #3
 800c11e:	4a84      	ldr	r2, [pc, #528]	; (800c330 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c120:	fa22 f303 	lsr.w	r3, r2, r3
 800c124:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	ee07 3a90 	vmov	s15, r3
 800c12c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	ee07 3a90 	vmov	s15, r3
 800c136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c13e:	4b7b      	ldr	r3, [pc, #492]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c146:	ee07 3a90 	vmov	s15, r3
 800c14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c14e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c152:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c16a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c16e:	e087      	b.n	800c280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	ee07 3a90 	vmov	s15, r3
 800c176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c17a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c338 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c182:	4b6a      	ldr	r3, [pc, #424]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c18a:	ee07 3a90 	vmov	s15, r3
 800c18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c192:	ed97 6a03 	vldr	s12, [r7, #12]
 800c196:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1b2:	e065      	b.n	800c280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	ee07 3a90 	vmov	s15, r3
 800c1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c33c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1c6:	4b59      	ldr	r3, [pc, #356]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ce:	ee07 3a90 	vmov	s15, r3
 800c1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1f6:	e043      	b.n	800c280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	ee07 3a90 	vmov	s15, r3
 800c1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c202:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c340 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c20a:	4b48      	ldr	r3, [pc, #288]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c212:	ee07 3a90 	vmov	s15, r3
 800c216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c21a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c21e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c22a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c23a:	e021      	b.n	800c280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	ee07 3a90 	vmov	s15, r3
 800c242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c246:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c33c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c24a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c24e:	4b37      	ldr	r3, [pc, #220]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c256:	ee07 3a90 	vmov	s15, r3
 800c25a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c25e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c262:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c26a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c26e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c27a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c27e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c280:	4b2a      	ldr	r3, [pc, #168]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c284:	0a5b      	lsrs	r3, r3, #9
 800c286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c28a:	ee07 3a90 	vmov	s15, r3
 800c28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c296:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c29a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c29e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2a6:	ee17 2a90 	vmov	r2, s15
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c2ae:	4b1f      	ldr	r3, [pc, #124]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b2:	0c1b      	lsrs	r3, r3, #16
 800c2b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2b8:	ee07 3a90 	vmov	s15, r3
 800c2bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2d4:	ee17 2a90 	vmov	r2, s15
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c2dc:	4b13      	ldr	r3, [pc, #76]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e0:	0e1b      	lsrs	r3, r3, #24
 800c2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2e6:	ee07 3a90 	vmov	s15, r3
 800c2ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c302:	ee17 2a90 	vmov	r2, s15
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c30a:	e008      	b.n	800c31e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	609a      	str	r2, [r3, #8]
}
 800c31e:	bf00      	nop
 800c320:	3724      	adds	r7, #36	; 0x24
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	58024400 	.word	0x58024400
 800c330:	03d09000 	.word	0x03d09000
 800c334:	46000000 	.word	0x46000000
 800c338:	4c742400 	.word	0x4c742400
 800c33c:	4a742400 	.word	0x4a742400
 800c340:	4c371b00 	.word	0x4c371b00

0800c344 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c344:	b480      	push	{r7}
 800c346:	b089      	sub	sp, #36	; 0x24
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c34c:	4ba1      	ldr	r3, [pc, #644]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c350:	f003 0303 	and.w	r3, r3, #3
 800c354:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c356:	4b9f      	ldr	r3, [pc, #636]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c35a:	0d1b      	lsrs	r3, r3, #20
 800c35c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c360:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c362:	4b9c      	ldr	r3, [pc, #624]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c366:	0a1b      	lsrs	r3, r3, #8
 800c368:	f003 0301 	and.w	r3, r3, #1
 800c36c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c36e:	4b99      	ldr	r3, [pc, #612]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c372:	08db      	lsrs	r3, r3, #3
 800c374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c378:	693a      	ldr	r2, [r7, #16]
 800c37a:	fb02 f303 	mul.w	r3, r2, r3
 800c37e:	ee07 3a90 	vmov	s15, r3
 800c382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c386:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f000 8111 	beq.w	800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	2b02      	cmp	r3, #2
 800c396:	f000 8083 	beq.w	800c4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	f200 80a1 	bhi.w	800c4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d003      	beq.n	800c3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d056      	beq.n	800c45c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c3ae:	e099      	b.n	800c4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3b0:	4b88      	ldr	r3, [pc, #544]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f003 0320 	and.w	r3, r3, #32
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d02d      	beq.n	800c418 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c3bc:	4b85      	ldr	r3, [pc, #532]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	08db      	lsrs	r3, r3, #3
 800c3c2:	f003 0303 	and.w	r3, r3, #3
 800c3c6:	4a84      	ldr	r2, [pc, #528]	; (800c5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c3c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c3cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	ee07 3a90 	vmov	s15, r3
 800c3d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	ee07 3a90 	vmov	s15, r3
 800c3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3e6:	4b7b      	ldr	r3, [pc, #492]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ee:	ee07 3a90 	vmov	s15, r3
 800c3f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c5dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c3fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c40a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c40e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c412:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c416:	e087      	b.n	800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	ee07 3a90 	vmov	s15, r3
 800c41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c422:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c42a:	4b6a      	ldr	r3, [pc, #424]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c432:	ee07 3a90 	vmov	s15, r3
 800c436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c43a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c43e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c5dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c44a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c45a:	e065      	b.n	800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	ee07 3a90 	vmov	s15, r3
 800c462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c466:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c46a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c46e:	4b59      	ldr	r3, [pc, #356]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c476:	ee07 3a90 	vmov	s15, r3
 800c47a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c47e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c482:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c5dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c48a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c48e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c49a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c49e:	e043      	b.n	800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	ee07 3a90 	vmov	s15, r3
 800c4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c4ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4b2:	4b48      	ldr	r3, [pc, #288]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ba:	ee07 3a90 	vmov	s15, r3
 800c4be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c5dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4e2:	e021      	b.n	800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	ee07 3a90 	vmov	s15, r3
 800c4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c4f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4f6:	4b37      	ldr	r3, [pc, #220]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4fe:	ee07 3a90 	vmov	s15, r3
 800c502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c506:	ed97 6a03 	vldr	s12, [r7, #12]
 800c50a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c5dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c50e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c51a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c51e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c522:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c526:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c528:	4b2a      	ldr	r3, [pc, #168]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c52c:	0a5b      	lsrs	r3, r3, #9
 800c52e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c532:	ee07 3a90 	vmov	s15, r3
 800c536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c53a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c53e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c542:	edd7 6a07 	vldr	s13, [r7, #28]
 800c546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c54a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c54e:	ee17 2a90 	vmov	r2, s15
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c556:	4b1f      	ldr	r3, [pc, #124]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c55a:	0c1b      	lsrs	r3, r3, #16
 800c55c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c560:	ee07 3a90 	vmov	s15, r3
 800c564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c56c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c570:	edd7 6a07 	vldr	s13, [r7, #28]
 800c574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c57c:	ee17 2a90 	vmov	r2, s15
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c584:	4b13      	ldr	r3, [pc, #76]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c588:	0e1b      	lsrs	r3, r3, #24
 800c58a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c58e:	ee07 3a90 	vmov	s15, r3
 800c592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c59a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c59e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5aa:	ee17 2a90 	vmov	r2, s15
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c5b2:	e008      	b.n	800c5c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	609a      	str	r2, [r3, #8]
}
 800c5c6:	bf00      	nop
 800c5c8:	3724      	adds	r7, #36	; 0x24
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	58024400 	.word	0x58024400
 800c5d8:	03d09000 	.word	0x03d09000
 800c5dc:	46000000 	.word	0x46000000
 800c5e0:	4c742400 	.word	0x4c742400
 800c5e4:	4a742400 	.word	0x4a742400
 800c5e8:	4c371b00 	.word	0x4c371b00

0800c5ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c5fa:	4b53      	ldr	r3, [pc, #332]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fe:	f003 0303 	and.w	r3, r3, #3
 800c602:	2b03      	cmp	r3, #3
 800c604:	d101      	bne.n	800c60a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	e099      	b.n	800c73e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c60a:	4b4f      	ldr	r3, [pc, #316]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a4e      	ldr	r2, [pc, #312]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c610:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c616:	f7fa fa7b 	bl	8006b10 <HAL_GetTick>
 800c61a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c61c:	e008      	b.n	800c630 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c61e:	f7fa fa77 	bl	8006b10 <HAL_GetTick>
 800c622:	4602      	mov	r2, r0
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	2b02      	cmp	r3, #2
 800c62a:	d901      	bls.n	800c630 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c62c:	2303      	movs	r3, #3
 800c62e:	e086      	b.n	800c73e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c630:	4b45      	ldr	r3, [pc, #276]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1f0      	bne.n	800c61e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c63c:	4b42      	ldr	r3, [pc, #264]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c640:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	031b      	lsls	r3, r3, #12
 800c64a:	493f      	ldr	r1, [pc, #252]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c64c:	4313      	orrs	r3, r2
 800c64e:	628b      	str	r3, [r1, #40]	; 0x28
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	3b01      	subs	r3, #1
 800c656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	3b01      	subs	r3, #1
 800c660:	025b      	lsls	r3, r3, #9
 800c662:	b29b      	uxth	r3, r3
 800c664:	431a      	orrs	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	3b01      	subs	r3, #1
 800c66c:	041b      	lsls	r3, r3, #16
 800c66e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c672:	431a      	orrs	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	3b01      	subs	r3, #1
 800c67a:	061b      	lsls	r3, r3, #24
 800c67c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c680:	4931      	ldr	r1, [pc, #196]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c682:	4313      	orrs	r3, r2
 800c684:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c686:	4b30      	ldr	r3, [pc, #192]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	695b      	ldr	r3, [r3, #20]
 800c692:	492d      	ldr	r1, [pc, #180]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c694:	4313      	orrs	r3, r2
 800c696:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c698:	4b2b      	ldr	r3, [pc, #172]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69c:	f023 0220 	bic.w	r2, r3, #32
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	699b      	ldr	r3, [r3, #24]
 800c6a4:	4928      	ldr	r1, [pc, #160]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c6aa:	4b27      	ldr	r3, [pc, #156]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ae:	4a26      	ldr	r2, [pc, #152]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6b0:	f023 0310 	bic.w	r3, r3, #16
 800c6b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c6b6:	4b24      	ldr	r3, [pc, #144]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6ba:	4b24      	ldr	r3, [pc, #144]	; (800c74c <RCCEx_PLL2_Config+0x160>)
 800c6bc:	4013      	ands	r3, r2
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	69d2      	ldr	r2, [r2, #28]
 800c6c2:	00d2      	lsls	r2, r2, #3
 800c6c4:	4920      	ldr	r1, [pc, #128]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c6ca:	4b1f      	ldr	r3, [pc, #124]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ce:	4a1e      	ldr	r2, [pc, #120]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6d0:	f043 0310 	orr.w	r3, r3, #16
 800c6d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d106      	bne.n	800c6ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c6dc:	4b1a      	ldr	r3, [pc, #104]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e0:	4a19      	ldr	r2, [pc, #100]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6e8:	e00f      	b.n	800c70a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d106      	bne.n	800c6fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c6f0:	4b15      	ldr	r3, [pc, #84]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f4:	4a14      	ldr	r2, [pc, #80]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6fc:	e005      	b.n	800c70a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c6fe:	4b12      	ldr	r3, [pc, #72]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c702:	4a11      	ldr	r2, [pc, #68]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c708:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c70a:	4b0f      	ldr	r3, [pc, #60]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a0e      	ldr	r2, [pc, #56]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c710:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c716:	f7fa f9fb 	bl	8006b10 <HAL_GetTick>
 800c71a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c71c:	e008      	b.n	800c730 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c71e:	f7fa f9f7 	bl	8006b10 <HAL_GetTick>
 800c722:	4602      	mov	r2, r0
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	1ad3      	subs	r3, r2, r3
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d901      	bls.n	800c730 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c72c:	2303      	movs	r3, #3
 800c72e:	e006      	b.n	800c73e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c730:	4b05      	ldr	r3, [pc, #20]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d0f0      	beq.n	800c71e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	58024400 	.word	0x58024400
 800c74c:	ffff0007 	.word	0xffff0007

0800c750 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c75a:	2300      	movs	r3, #0
 800c75c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c75e:	4b53      	ldr	r3, [pc, #332]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c762:	f003 0303 	and.w	r3, r3, #3
 800c766:	2b03      	cmp	r3, #3
 800c768:	d101      	bne.n	800c76e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c76a:	2301      	movs	r3, #1
 800c76c:	e099      	b.n	800c8a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c76e:	4b4f      	ldr	r3, [pc, #316]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a4e      	ldr	r2, [pc, #312]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c77a:	f7fa f9c9 	bl	8006b10 <HAL_GetTick>
 800c77e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c780:	e008      	b.n	800c794 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c782:	f7fa f9c5 	bl	8006b10 <HAL_GetTick>
 800c786:	4602      	mov	r2, r0
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	1ad3      	subs	r3, r2, r3
 800c78c:	2b02      	cmp	r3, #2
 800c78e:	d901      	bls.n	800c794 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c790:	2303      	movs	r3, #3
 800c792:	e086      	b.n	800c8a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c794:	4b45      	ldr	r3, [pc, #276]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d1f0      	bne.n	800c782 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c7a0:	4b42      	ldr	r3, [pc, #264]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	051b      	lsls	r3, r3, #20
 800c7ae:	493f      	ldr	r1, [pc, #252]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	628b      	str	r3, [r1, #40]	; 0x28
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	025b      	lsls	r3, r3, #9
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	431a      	orrs	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	041b      	lsls	r3, r3, #16
 800c7d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c7d6:	431a      	orrs	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	061b      	lsls	r3, r3, #24
 800c7e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c7e4:	4931      	ldr	r1, [pc, #196]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c7ea:	4b30      	ldr	r3, [pc, #192]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	695b      	ldr	r3, [r3, #20]
 800c7f6:	492d      	ldr	r1, [pc, #180]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c7fc:	4b2b      	ldr	r3, [pc, #172]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c800:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	4928      	ldr	r1, [pc, #160]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c80a:	4313      	orrs	r3, r2
 800c80c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c80e:	4b27      	ldr	r3, [pc, #156]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c812:	4a26      	ldr	r2, [pc, #152]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c818:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c81a:	4b24      	ldr	r3, [pc, #144]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c81c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c81e:	4b24      	ldr	r3, [pc, #144]	; (800c8b0 <RCCEx_PLL3_Config+0x160>)
 800c820:	4013      	ands	r3, r2
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	69d2      	ldr	r2, [r2, #28]
 800c826:	00d2      	lsls	r2, r2, #3
 800c828:	4920      	ldr	r1, [pc, #128]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c82a:	4313      	orrs	r3, r2
 800c82c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c82e:	4b1f      	ldr	r3, [pc, #124]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c832:	4a1e      	ldr	r2, [pc, #120]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c838:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d106      	bne.n	800c84e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c840:	4b1a      	ldr	r3, [pc, #104]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c844:	4a19      	ldr	r2, [pc, #100]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c84a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c84c:	e00f      	b.n	800c86e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d106      	bne.n	800c862 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c854:	4b15      	ldr	r3, [pc, #84]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c858:	4a14      	ldr	r2, [pc, #80]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c85a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c85e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c860:	e005      	b.n	800c86e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c862:	4b12      	ldr	r3, [pc, #72]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c866:	4a11      	ldr	r2, [pc, #68]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c868:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c86c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c86e:	4b0f      	ldr	r3, [pc, #60]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a0e      	ldr	r2, [pc, #56]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c87a:	f7fa f949 	bl	8006b10 <HAL_GetTick>
 800c87e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c880:	e008      	b.n	800c894 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c882:	f7fa f945 	bl	8006b10 <HAL_GetTick>
 800c886:	4602      	mov	r2, r0
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	1ad3      	subs	r3, r2, r3
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d901      	bls.n	800c894 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c890:	2303      	movs	r3, #3
 800c892:	e006      	b.n	800c8a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c894:	4b05      	ldr	r3, [pc, #20]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d0f0      	beq.n	800c882 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	58024400 	.word	0x58024400
 800c8b0:	ffff0007 	.word	0xffff0007

0800c8b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d101      	bne.n	800c8c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e0f1      	b.n	800caaa <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a78      	ldr	r2, [pc, #480]	; (800cab4 <HAL_SPI_Init+0x200>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d00f      	beq.n	800c8f6 <HAL_SPI_Init+0x42>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4a77      	ldr	r2, [pc, #476]	; (800cab8 <HAL_SPI_Init+0x204>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d00a      	beq.n	800c8f6 <HAL_SPI_Init+0x42>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a75      	ldr	r2, [pc, #468]	; (800cabc <HAL_SPI_Init+0x208>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d005      	beq.n	800c8f6 <HAL_SPI_Init+0x42>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	2b0f      	cmp	r3, #15
 800c8f0:	d901      	bls.n	800c8f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e0d9      	b.n	800caaa <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 f8e2 	bl	800cac0 <SPI_GetPacketSize>
 800c8fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a6c      	ldr	r2, [pc, #432]	; (800cab4 <HAL_SPI_Init+0x200>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d00c      	beq.n	800c922 <HAL_SPI_Init+0x6e>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a6a      	ldr	r2, [pc, #424]	; (800cab8 <HAL_SPI_Init+0x204>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d007      	beq.n	800c922 <HAL_SPI_Init+0x6e>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a69      	ldr	r2, [pc, #420]	; (800cabc <HAL_SPI_Init+0x208>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d002      	beq.n	800c922 <HAL_SPI_Init+0x6e>
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2b08      	cmp	r3, #8
 800c920:	d811      	bhi.n	800c946 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c926:	4a63      	ldr	r2, [pc, #396]	; (800cab4 <HAL_SPI_Init+0x200>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d009      	beq.n	800c940 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a61      	ldr	r2, [pc, #388]	; (800cab8 <HAL_SPI_Init+0x204>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d004      	beq.n	800c940 <HAL_SPI_Init+0x8c>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a60      	ldr	r2, [pc, #384]	; (800cabc <HAL_SPI_Init+0x208>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d104      	bne.n	800c94a <HAL_SPI_Init+0x96>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2b10      	cmp	r3, #16
 800c944:	d901      	bls.n	800c94a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	e0af      	b.n	800caaa <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c950:	b2db      	uxtb	r3, r3
 800c952:	2b00      	cmp	r3, #0
 800c954:	d106      	bne.n	800c964 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f7f8 fa92 	bl	8004e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2202      	movs	r2, #2
 800c968:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f022 0201 	bic.w	r2, r2, #1
 800c97a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c986:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	699b      	ldr	r3, [r3, #24]
 800c98c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c990:	d119      	bne.n	800c9c6 <HAL_SPI_Init+0x112>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c99a:	d103      	bne.n	800c9a4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d008      	beq.n	800c9b6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d10c      	bne.n	800c9c6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c9b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9b4:	d107      	bne.n	800c9c6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c9c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	69da      	ldr	r2, [r3, #28]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ce:	431a      	orrs	r2, r3
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	431a      	orrs	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9d8:	ea42 0103 	orr.w	r1, r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	68da      	ldr	r2, [r3, #12]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	430a      	orrs	r2, r1
 800c9e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f0:	431a      	orrs	r2, r3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f6:	431a      	orrs	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	699b      	ldr	r3, [r3, #24]
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	431a      	orrs	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	695b      	ldr	r3, [r3, #20]
 800ca08:	431a      	orrs	r2, r3
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6a1b      	ldr	r3, [r3, #32]
 800ca0e:	431a      	orrs	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	431a      	orrs	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca1a:	431a      	orrs	r2, r3
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	431a      	orrs	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca26:	ea42 0103 	orr.w	r1, r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	430a      	orrs	r2, r1
 800ca34:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d113      	bne.n	800ca66 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca50:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ca64:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f022 0201 	bic.w	r2, r2, #1
 800ca74:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00a      	beq.n	800ca98 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	430a      	orrs	r2, r1
 800ca96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800caa8:	2300      	movs	r3, #0
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	40013000 	.word	0x40013000
 800cab8:	40003800 	.word	0x40003800
 800cabc:	40003c00 	.word	0x40003c00

0800cac0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cacc:	095b      	lsrs	r3, r3, #5
 800cace:	3301      	adds	r3, #1
 800cad0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	3301      	adds	r3, #1
 800cad8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	3307      	adds	r3, #7
 800cade:	08db      	lsrs	r3, r3, #3
 800cae0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	fb02 f303 	mul.w	r3, r2, r3
}
 800caea:	4618      	mov	r0, r3
 800caec:	3714      	adds	r7, #20
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr

0800caf6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b082      	sub	sp, #8
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d101      	bne.n	800cb08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cb04:	2301      	movs	r3, #1
 800cb06:	e049      	b.n	800cb9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d106      	bne.n	800cb22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7f9 f8cf 	bl	8005cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2202      	movs	r2, #2
 800cb26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	3304      	adds	r3, #4
 800cb32:	4619      	mov	r1, r3
 800cb34:	4610      	mov	r0, r2
 800cb36:	f000 fd9f 	bl	800d678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2201      	movs	r2, #1
 800cb46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2201      	movs	r2, #1
 800cb56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2201      	movs	r2, #1
 800cb66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2201      	movs	r2, #1
 800cb76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2201      	movs	r2, #1
 800cb86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2201      	movs	r2, #1
 800cb96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d001      	beq.n	800cbbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e054      	b.n	800cc66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2202      	movs	r2, #2
 800cbc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68da      	ldr	r2, [r3, #12]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f042 0201 	orr.w	r2, r2, #1
 800cbd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a26      	ldr	r2, [pc, #152]	; (800cc74 <HAL_TIM_Base_Start_IT+0xd0>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d022      	beq.n	800cc24 <HAL_TIM_Base_Start_IT+0x80>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbe6:	d01d      	beq.n	800cc24 <HAL_TIM_Base_Start_IT+0x80>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a22      	ldr	r2, [pc, #136]	; (800cc78 <HAL_TIM_Base_Start_IT+0xd4>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d018      	beq.n	800cc24 <HAL_TIM_Base_Start_IT+0x80>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a21      	ldr	r2, [pc, #132]	; (800cc7c <HAL_TIM_Base_Start_IT+0xd8>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d013      	beq.n	800cc24 <HAL_TIM_Base_Start_IT+0x80>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a1f      	ldr	r2, [pc, #124]	; (800cc80 <HAL_TIM_Base_Start_IT+0xdc>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d00e      	beq.n	800cc24 <HAL_TIM_Base_Start_IT+0x80>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a1e      	ldr	r2, [pc, #120]	; (800cc84 <HAL_TIM_Base_Start_IT+0xe0>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d009      	beq.n	800cc24 <HAL_TIM_Base_Start_IT+0x80>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a1c      	ldr	r2, [pc, #112]	; (800cc88 <HAL_TIM_Base_Start_IT+0xe4>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d004      	beq.n	800cc24 <HAL_TIM_Base_Start_IT+0x80>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a1b      	ldr	r2, [pc, #108]	; (800cc8c <HAL_TIM_Base_Start_IT+0xe8>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d115      	bne.n	800cc50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	689a      	ldr	r2, [r3, #8]
 800cc2a:	4b19      	ldr	r3, [pc, #100]	; (800cc90 <HAL_TIM_Base_Start_IT+0xec>)
 800cc2c:	4013      	ands	r3, r2
 800cc2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2b06      	cmp	r3, #6
 800cc34:	d015      	beq.n	800cc62 <HAL_TIM_Base_Start_IT+0xbe>
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc3c:	d011      	beq.n	800cc62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f042 0201 	orr.w	r2, r2, #1
 800cc4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc4e:	e008      	b.n	800cc62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f042 0201 	orr.w	r2, r2, #1
 800cc5e:	601a      	str	r2, [r3, #0]
 800cc60:	e000      	b.n	800cc64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	40010000 	.word	0x40010000
 800cc78:	40000400 	.word	0x40000400
 800cc7c:	40000800 	.word	0x40000800
 800cc80:	40000c00 	.word	0x40000c00
 800cc84:	40010400 	.word	0x40010400
 800cc88:	40001800 	.word	0x40001800
 800cc8c:	40014000 	.word	0x40014000
 800cc90:	00010007 	.word	0x00010007

0800cc94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	68da      	ldr	r2, [r3, #12]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f022 0201 	bic.w	r2, r2, #1
 800ccaa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	6a1a      	ldr	r2, [r3, #32]
 800ccb2:	f241 1311 	movw	r3, #4369	; 0x1111
 800ccb6:	4013      	ands	r3, r2
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d10f      	bne.n	800ccdc <HAL_TIM_Base_Stop_IT+0x48>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	6a1a      	ldr	r2, [r3, #32]
 800ccc2:	f240 4344 	movw	r3, #1092	; 0x444
 800ccc6:	4013      	ands	r3, r2
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d107      	bne.n	800ccdc <HAL_TIM_Base_Stop_IT+0x48>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f022 0201 	bic.w	r2, r2, #1
 800ccda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cce4:	2300      	movs	r3, #0
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	370c      	adds	r7, #12
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr

0800ccf2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b082      	sub	sp, #8
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d101      	bne.n	800cd04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cd00:	2301      	movs	r3, #1
 800cd02:	e049      	b.n	800cd98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d106      	bne.n	800cd1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 f841 	bl	800cda0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2202      	movs	r2, #2
 800cd22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	3304      	adds	r3, #4
 800cd2e:	4619      	mov	r1, r3
 800cd30:	4610      	mov	r0, r2
 800cd32:	f000 fca1 	bl	800d678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2201      	movs	r2, #1
 800cd42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2201      	movs	r2, #1
 800cd4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2201      	movs	r2, #1
 800cd52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2201      	movs	r2, #1
 800cd62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2201      	movs	r2, #1
 800cd92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cda8:	bf00      	nop
 800cdaa:	370c      	adds	r7, #12
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d109      	bne.n	800cdd8 <HAL_TIM_PWM_Start+0x24>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	bf14      	ite	ne
 800cdd0:	2301      	movne	r3, #1
 800cdd2:	2300      	moveq	r3, #0
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	e03c      	b.n	800ce52 <HAL_TIM_PWM_Start+0x9e>
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	2b04      	cmp	r3, #4
 800cddc:	d109      	bne.n	800cdf2 <HAL_TIM_PWM_Start+0x3e>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	bf14      	ite	ne
 800cdea:	2301      	movne	r3, #1
 800cdec:	2300      	moveq	r3, #0
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	e02f      	b.n	800ce52 <HAL_TIM_PWM_Start+0x9e>
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	2b08      	cmp	r3, #8
 800cdf6:	d109      	bne.n	800ce0c <HAL_TIM_PWM_Start+0x58>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	bf14      	ite	ne
 800ce04:	2301      	movne	r3, #1
 800ce06:	2300      	moveq	r3, #0
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	e022      	b.n	800ce52 <HAL_TIM_PWM_Start+0x9e>
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	2b0c      	cmp	r3, #12
 800ce10:	d109      	bne.n	800ce26 <HAL_TIM_PWM_Start+0x72>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	bf14      	ite	ne
 800ce1e:	2301      	movne	r3, #1
 800ce20:	2300      	moveq	r3, #0
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	e015      	b.n	800ce52 <HAL_TIM_PWM_Start+0x9e>
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	2b10      	cmp	r3, #16
 800ce2a:	d109      	bne.n	800ce40 <HAL_TIM_PWM_Start+0x8c>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	bf14      	ite	ne
 800ce38:	2301      	movne	r3, #1
 800ce3a:	2300      	moveq	r3, #0
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	e008      	b.n	800ce52 <HAL_TIM_PWM_Start+0x9e>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	bf14      	ite	ne
 800ce4c:	2301      	movne	r3, #1
 800ce4e:	2300      	moveq	r3, #0
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d001      	beq.n	800ce5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ce56:	2301      	movs	r3, #1
 800ce58:	e0a1      	b.n	800cf9e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d104      	bne.n	800ce6a <HAL_TIM_PWM_Start+0xb6>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2202      	movs	r2, #2
 800ce64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce68:	e023      	b.n	800ceb2 <HAL_TIM_PWM_Start+0xfe>
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	2b04      	cmp	r3, #4
 800ce6e:	d104      	bne.n	800ce7a <HAL_TIM_PWM_Start+0xc6>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2202      	movs	r2, #2
 800ce74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce78:	e01b      	b.n	800ceb2 <HAL_TIM_PWM_Start+0xfe>
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	2b08      	cmp	r3, #8
 800ce7e:	d104      	bne.n	800ce8a <HAL_TIM_PWM_Start+0xd6>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2202      	movs	r2, #2
 800ce84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce88:	e013      	b.n	800ceb2 <HAL_TIM_PWM_Start+0xfe>
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	2b0c      	cmp	r3, #12
 800ce8e:	d104      	bne.n	800ce9a <HAL_TIM_PWM_Start+0xe6>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2202      	movs	r2, #2
 800ce94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce98:	e00b      	b.n	800ceb2 <HAL_TIM_PWM_Start+0xfe>
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	2b10      	cmp	r3, #16
 800ce9e:	d104      	bne.n	800ceaa <HAL_TIM_PWM_Start+0xf6>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2202      	movs	r2, #2
 800cea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cea8:	e003      	b.n	800ceb2 <HAL_TIM_PWM_Start+0xfe>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2202      	movs	r2, #2
 800ceae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	6839      	ldr	r1, [r7, #0]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f000 ffea 	bl	800de94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a38      	ldr	r2, [pc, #224]	; (800cfa8 <HAL_TIM_PWM_Start+0x1f4>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d013      	beq.n	800cef2 <HAL_TIM_PWM_Start+0x13e>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a37      	ldr	r2, [pc, #220]	; (800cfac <HAL_TIM_PWM_Start+0x1f8>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d00e      	beq.n	800cef2 <HAL_TIM_PWM_Start+0x13e>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a35      	ldr	r2, [pc, #212]	; (800cfb0 <HAL_TIM_PWM_Start+0x1fc>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d009      	beq.n	800cef2 <HAL_TIM_PWM_Start+0x13e>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a34      	ldr	r2, [pc, #208]	; (800cfb4 <HAL_TIM_PWM_Start+0x200>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d004      	beq.n	800cef2 <HAL_TIM_PWM_Start+0x13e>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a32      	ldr	r2, [pc, #200]	; (800cfb8 <HAL_TIM_PWM_Start+0x204>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d101      	bne.n	800cef6 <HAL_TIM_PWM_Start+0x142>
 800cef2:	2301      	movs	r3, #1
 800cef4:	e000      	b.n	800cef8 <HAL_TIM_PWM_Start+0x144>
 800cef6:	2300      	movs	r3, #0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d007      	beq.n	800cf0c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a25      	ldr	r2, [pc, #148]	; (800cfa8 <HAL_TIM_PWM_Start+0x1f4>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d022      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1a8>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf1e:	d01d      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1a8>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a25      	ldr	r2, [pc, #148]	; (800cfbc <HAL_TIM_PWM_Start+0x208>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d018      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1a8>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a24      	ldr	r2, [pc, #144]	; (800cfc0 <HAL_TIM_PWM_Start+0x20c>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d013      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1a8>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a22      	ldr	r2, [pc, #136]	; (800cfc4 <HAL_TIM_PWM_Start+0x210>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d00e      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1a8>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a1a      	ldr	r2, [pc, #104]	; (800cfac <HAL_TIM_PWM_Start+0x1f8>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d009      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1a8>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a1e      	ldr	r2, [pc, #120]	; (800cfc8 <HAL_TIM_PWM_Start+0x214>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d004      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1a8>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a16      	ldr	r2, [pc, #88]	; (800cfb0 <HAL_TIM_PWM_Start+0x1fc>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d115      	bne.n	800cf88 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	689a      	ldr	r2, [r3, #8]
 800cf62:	4b1a      	ldr	r3, [pc, #104]	; (800cfcc <HAL_TIM_PWM_Start+0x218>)
 800cf64:	4013      	ands	r3, r2
 800cf66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2b06      	cmp	r3, #6
 800cf6c:	d015      	beq.n	800cf9a <HAL_TIM_PWM_Start+0x1e6>
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf74:	d011      	beq.n	800cf9a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f042 0201 	orr.w	r2, r2, #1
 800cf84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf86:	e008      	b.n	800cf9a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f042 0201 	orr.w	r2, r2, #1
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	e000      	b.n	800cf9c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	40010000 	.word	0x40010000
 800cfac:	40010400 	.word	0x40010400
 800cfb0:	40014000 	.word	0x40014000
 800cfb4:	40014400 	.word	0x40014400
 800cfb8:	40014800 	.word	0x40014800
 800cfbc:	40000400 	.word	0x40000400
 800cfc0:	40000800 	.word	0x40000800
 800cfc4:	40000c00 	.word	0x40000c00
 800cfc8:	40001800 	.word	0x40001800
 800cfcc:	00010007 	.word	0x00010007

0800cfd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	691b      	ldr	r3, [r3, #16]
 800cfde:	f003 0302 	and.w	r3, r3, #2
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	d122      	bne.n	800d02c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	f003 0302 	and.w	r3, r3, #2
 800cff0:	2b02      	cmp	r3, #2
 800cff2:	d11b      	bne.n	800d02c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f06f 0202 	mvn.w	r2, #2
 800cffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2201      	movs	r2, #1
 800d002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	699b      	ldr	r3, [r3, #24]
 800d00a:	f003 0303 	and.w	r3, r3, #3
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d003      	beq.n	800d01a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 fb12 	bl	800d63c <HAL_TIM_IC_CaptureCallback>
 800d018:	e005      	b.n	800d026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fb04 	bl	800d628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 fb15 	bl	800d650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	691b      	ldr	r3, [r3, #16]
 800d032:	f003 0304 	and.w	r3, r3, #4
 800d036:	2b04      	cmp	r3, #4
 800d038:	d122      	bne.n	800d080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	f003 0304 	and.w	r3, r3, #4
 800d044:	2b04      	cmp	r3, #4
 800d046:	d11b      	bne.n	800d080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f06f 0204 	mvn.w	r2, #4
 800d050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2202      	movs	r2, #2
 800d056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d062:	2b00      	cmp	r3, #0
 800d064:	d003      	beq.n	800d06e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f000 fae8 	bl	800d63c <HAL_TIM_IC_CaptureCallback>
 800d06c:	e005      	b.n	800d07a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 fada 	bl	800d628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 faeb 	bl	800d650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	691b      	ldr	r3, [r3, #16]
 800d086:	f003 0308 	and.w	r3, r3, #8
 800d08a:	2b08      	cmp	r3, #8
 800d08c:	d122      	bne.n	800d0d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	f003 0308 	and.w	r3, r3, #8
 800d098:	2b08      	cmp	r3, #8
 800d09a:	d11b      	bne.n	800d0d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f06f 0208 	mvn.w	r2, #8
 800d0a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2204      	movs	r2, #4
 800d0aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	69db      	ldr	r3, [r3, #28]
 800d0b2:	f003 0303 	and.w	r3, r3, #3
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d003      	beq.n	800d0c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 fabe 	bl	800d63c <HAL_TIM_IC_CaptureCallback>
 800d0c0:	e005      	b.n	800d0ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 fab0 	bl	800d628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fac1 	bl	800d650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	f003 0310 	and.w	r3, r3, #16
 800d0de:	2b10      	cmp	r3, #16
 800d0e0:	d122      	bne.n	800d128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	f003 0310 	and.w	r3, r3, #16
 800d0ec:	2b10      	cmp	r3, #16
 800d0ee:	d11b      	bne.n	800d128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f06f 0210 	mvn.w	r2, #16
 800d0f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2208      	movs	r2, #8
 800d0fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	69db      	ldr	r3, [r3, #28]
 800d106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d003      	beq.n	800d116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 fa94 	bl	800d63c <HAL_TIM_IC_CaptureCallback>
 800d114:	e005      	b.n	800d122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 fa86 	bl	800d628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fa97 	bl	800d650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	691b      	ldr	r3, [r3, #16]
 800d12e:	f003 0301 	and.w	r3, r3, #1
 800d132:	2b01      	cmp	r3, #1
 800d134:	d10e      	bne.n	800d154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	f003 0301 	and.w	r3, r3, #1
 800d140:	2b01      	cmp	r3, #1
 800d142:	d107      	bne.n	800d154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f06f 0201 	mvn.w	r2, #1
 800d14c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7f6 fa66 	bl	8003620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	691b      	ldr	r3, [r3, #16]
 800d15a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d15e:	2b80      	cmp	r3, #128	; 0x80
 800d160:	d10e      	bne.n	800d180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d16c:	2b80      	cmp	r3, #128	; 0x80
 800d16e:	d107      	bne.n	800d180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 ffc6 	bl	800e10c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d18a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d18e:	d10e      	bne.n	800d1ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d19a:	2b80      	cmp	r3, #128	; 0x80
 800d19c:	d107      	bne.n	800d1ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 ffb9 	bl	800e120 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	691b      	ldr	r3, [r3, #16]
 800d1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1b8:	2b40      	cmp	r3, #64	; 0x40
 800d1ba:	d10e      	bne.n	800d1da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1c6:	2b40      	cmp	r3, #64	; 0x40
 800d1c8:	d107      	bne.n	800d1da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d1d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 fa45 	bl	800d664 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	f003 0320 	and.w	r3, r3, #32
 800d1e4:	2b20      	cmp	r3, #32
 800d1e6:	d10e      	bne.n	800d206 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	f003 0320 	and.w	r3, r3, #32
 800d1f2:	2b20      	cmp	r3, #32
 800d1f4:	d107      	bne.n	800d206 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f06f 0220 	mvn.w	r2, #32
 800d1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 ff79 	bl	800e0f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d206:	bf00      	nop
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
	...

0800d210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b086      	sub	sp, #24
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d226:	2b01      	cmp	r3, #1
 800d228:	d101      	bne.n	800d22e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d22a:	2302      	movs	r3, #2
 800d22c:	e0ff      	b.n	800d42e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2b14      	cmp	r3, #20
 800d23a:	f200 80f0 	bhi.w	800d41e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d23e:	a201      	add	r2, pc, #4	; (adr r2, 800d244 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d244:	0800d299 	.word	0x0800d299
 800d248:	0800d41f 	.word	0x0800d41f
 800d24c:	0800d41f 	.word	0x0800d41f
 800d250:	0800d41f 	.word	0x0800d41f
 800d254:	0800d2d9 	.word	0x0800d2d9
 800d258:	0800d41f 	.word	0x0800d41f
 800d25c:	0800d41f 	.word	0x0800d41f
 800d260:	0800d41f 	.word	0x0800d41f
 800d264:	0800d31b 	.word	0x0800d31b
 800d268:	0800d41f 	.word	0x0800d41f
 800d26c:	0800d41f 	.word	0x0800d41f
 800d270:	0800d41f 	.word	0x0800d41f
 800d274:	0800d35b 	.word	0x0800d35b
 800d278:	0800d41f 	.word	0x0800d41f
 800d27c:	0800d41f 	.word	0x0800d41f
 800d280:	0800d41f 	.word	0x0800d41f
 800d284:	0800d39d 	.word	0x0800d39d
 800d288:	0800d41f 	.word	0x0800d41f
 800d28c:	0800d41f 	.word	0x0800d41f
 800d290:	0800d41f 	.word	0x0800d41f
 800d294:	0800d3dd 	.word	0x0800d3dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	68b9      	ldr	r1, [r7, #8]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f000 fa84 	bl	800d7ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	699a      	ldr	r2, [r3, #24]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f042 0208 	orr.w	r2, r2, #8
 800d2b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	699a      	ldr	r2, [r3, #24]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f022 0204 	bic.w	r2, r2, #4
 800d2c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6999      	ldr	r1, [r3, #24]
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	691a      	ldr	r2, [r3, #16]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	430a      	orrs	r2, r1
 800d2d4:	619a      	str	r2, [r3, #24]
      break;
 800d2d6:	e0a5      	b.n	800d424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	68b9      	ldr	r1, [r7, #8]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f000 faf4 	bl	800d8cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	699a      	ldr	r2, [r3, #24]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	699a      	ldr	r2, [r3, #24]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	6999      	ldr	r1, [r3, #24]
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	691b      	ldr	r3, [r3, #16]
 800d30e:	021a      	lsls	r2, r3, #8
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	430a      	orrs	r2, r1
 800d316:	619a      	str	r2, [r3, #24]
      break;
 800d318:	e084      	b.n	800d424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	68b9      	ldr	r1, [r7, #8]
 800d320:	4618      	mov	r0, r3
 800d322:	f000 fb5d 	bl	800d9e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	69da      	ldr	r2, [r3, #28]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f042 0208 	orr.w	r2, r2, #8
 800d334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	69da      	ldr	r2, [r3, #28]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f022 0204 	bic.w	r2, r2, #4
 800d344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	69d9      	ldr	r1, [r3, #28]
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	691a      	ldr	r2, [r3, #16]
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	430a      	orrs	r2, r1
 800d356:	61da      	str	r2, [r3, #28]
      break;
 800d358:	e064      	b.n	800d424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	68b9      	ldr	r1, [r7, #8]
 800d360:	4618      	mov	r0, r3
 800d362:	f000 fbc5 	bl	800daf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	69da      	ldr	r2, [r3, #28]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	69da      	ldr	r2, [r3, #28]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	69d9      	ldr	r1, [r3, #28]
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	691b      	ldr	r3, [r3, #16]
 800d390:	021a      	lsls	r2, r3, #8
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	430a      	orrs	r2, r1
 800d398:	61da      	str	r2, [r3, #28]
      break;
 800d39a:	e043      	b.n	800d424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68b9      	ldr	r1, [r7, #8]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f000 fc0e 	bl	800dbc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f042 0208 	orr.w	r2, r2, #8
 800d3b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f022 0204 	bic.w	r2, r2, #4
 800d3c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	691a      	ldr	r2, [r3, #16]
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	430a      	orrs	r2, r1
 800d3d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d3da:	e023      	b.n	800d424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	68b9      	ldr	r1, [r7, #8]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f000 fc52 	bl	800dc8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d406:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	691b      	ldr	r3, [r3, #16]
 800d412:	021a      	lsls	r2, r3, #8
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	430a      	orrs	r2, r1
 800d41a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d41c:	e002      	b.n	800d424 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d41e:	2301      	movs	r3, #1
 800d420:	75fb      	strb	r3, [r7, #23]
      break;
 800d422:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2200      	movs	r2, #0
 800d428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d42c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3718      	adds	r7, #24
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop

0800d438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d442:	2300      	movs	r3, #0
 800d444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d101      	bne.n	800d454 <HAL_TIM_ConfigClockSource+0x1c>
 800d450:	2302      	movs	r3, #2
 800d452:	e0dc      	b.n	800d60e <HAL_TIM_ConfigClockSource+0x1d6>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2201      	movs	r2, #1
 800d458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2202      	movs	r2, #2
 800d460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d46c:	68ba      	ldr	r2, [r7, #8]
 800d46e:	4b6a      	ldr	r3, [pc, #424]	; (800d618 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d470:	4013      	ands	r3, r2
 800d472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d47a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a64      	ldr	r2, [pc, #400]	; (800d61c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	f000 80a9 	beq.w	800d5e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d490:	4a62      	ldr	r2, [pc, #392]	; (800d61c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d492:	4293      	cmp	r3, r2
 800d494:	f200 80ae 	bhi.w	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d498:	4a61      	ldr	r2, [pc, #388]	; (800d620 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	f000 80a1 	beq.w	800d5e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d4a0:	4a5f      	ldr	r2, [pc, #380]	; (800d620 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	f200 80a6 	bhi.w	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4a8:	4a5e      	ldr	r2, [pc, #376]	; (800d624 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	f000 8099 	beq.w	800d5e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d4b0:	4a5c      	ldr	r2, [pc, #368]	; (800d624 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	f200 809e 	bhi.w	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d4bc:	f000 8091 	beq.w	800d5e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d4c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d4c4:	f200 8096 	bhi.w	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4cc:	f000 8089 	beq.w	800d5e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d4d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4d4:	f200 808e 	bhi.w	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4dc:	d03e      	beq.n	800d55c <HAL_TIM_ConfigClockSource+0x124>
 800d4de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4e2:	f200 8087 	bhi.w	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4ea:	f000 8086 	beq.w	800d5fa <HAL_TIM_ConfigClockSource+0x1c2>
 800d4ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4f2:	d87f      	bhi.n	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4f4:	2b70      	cmp	r3, #112	; 0x70
 800d4f6:	d01a      	beq.n	800d52e <HAL_TIM_ConfigClockSource+0xf6>
 800d4f8:	2b70      	cmp	r3, #112	; 0x70
 800d4fa:	d87b      	bhi.n	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4fc:	2b60      	cmp	r3, #96	; 0x60
 800d4fe:	d050      	beq.n	800d5a2 <HAL_TIM_ConfigClockSource+0x16a>
 800d500:	2b60      	cmp	r3, #96	; 0x60
 800d502:	d877      	bhi.n	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d504:	2b50      	cmp	r3, #80	; 0x50
 800d506:	d03c      	beq.n	800d582 <HAL_TIM_ConfigClockSource+0x14a>
 800d508:	2b50      	cmp	r3, #80	; 0x50
 800d50a:	d873      	bhi.n	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d50c:	2b40      	cmp	r3, #64	; 0x40
 800d50e:	d058      	beq.n	800d5c2 <HAL_TIM_ConfigClockSource+0x18a>
 800d510:	2b40      	cmp	r3, #64	; 0x40
 800d512:	d86f      	bhi.n	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d514:	2b30      	cmp	r3, #48	; 0x30
 800d516:	d064      	beq.n	800d5e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d518:	2b30      	cmp	r3, #48	; 0x30
 800d51a:	d86b      	bhi.n	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d51c:	2b20      	cmp	r3, #32
 800d51e:	d060      	beq.n	800d5e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d520:	2b20      	cmp	r3, #32
 800d522:	d867      	bhi.n	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d524:	2b00      	cmp	r3, #0
 800d526:	d05c      	beq.n	800d5e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d528:	2b10      	cmp	r3, #16
 800d52a:	d05a      	beq.n	800d5e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d52c:	e062      	b.n	800d5f4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6818      	ldr	r0, [r3, #0]
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	6899      	ldr	r1, [r3, #8]
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	685a      	ldr	r2, [r3, #4]
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	f000 fc89 	bl	800de54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	689b      	ldr	r3, [r3, #8]
 800d548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	68ba      	ldr	r2, [r7, #8]
 800d558:	609a      	str	r2, [r3, #8]
      break;
 800d55a:	e04f      	b.n	800d5fc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6818      	ldr	r0, [r3, #0]
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	6899      	ldr	r1, [r3, #8]
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	685a      	ldr	r2, [r3, #4]
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	f000 fc72 	bl	800de54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	689a      	ldr	r2, [r3, #8]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d57e:	609a      	str	r2, [r3, #8]
      break;
 800d580:	e03c      	b.n	800d5fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6818      	ldr	r0, [r3, #0]
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	6859      	ldr	r1, [r3, #4]
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	461a      	mov	r2, r3
 800d590:	f000 fbe2 	bl	800dd58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2150      	movs	r1, #80	; 0x50
 800d59a:	4618      	mov	r0, r3
 800d59c:	f000 fc3c 	bl	800de18 <TIM_ITRx_SetConfig>
      break;
 800d5a0:	e02c      	b.n	800d5fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6818      	ldr	r0, [r3, #0]
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	6859      	ldr	r1, [r3, #4]
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	f000 fc01 	bl	800ddb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2160      	movs	r1, #96	; 0x60
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f000 fc2c 	bl	800de18 <TIM_ITRx_SetConfig>
      break;
 800d5c0:	e01c      	b.n	800d5fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6818      	ldr	r0, [r3, #0]
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	6859      	ldr	r1, [r3, #4]
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	68db      	ldr	r3, [r3, #12]
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	f000 fbc2 	bl	800dd58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2140      	movs	r1, #64	; 0x40
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f000 fc1c 	bl	800de18 <TIM_ITRx_SetConfig>
      break;
 800d5e0:	e00c      	b.n	800d5fc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	4610      	mov	r0, r2
 800d5ee:	f000 fc13 	bl	800de18 <TIM_ITRx_SetConfig>
      break;
 800d5f2:	e003      	b.n	800d5fc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d5f8:	e000      	b.n	800d5fc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d5fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	ffceff88 	.word	0xffceff88
 800d61c:	00100040 	.word	0x00100040
 800d620:	00100030 	.word	0x00100030
 800d624:	00100020 	.word	0x00100020

0800d628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d630:	bf00      	nop
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d644:	bf00      	nop
 800d646:	370c      	adds	r7, #12
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d658:	bf00      	nop
 800d65a:	370c      	adds	r7, #12
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d66c:	bf00      	nop
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4a40      	ldr	r2, [pc, #256]	; (800d78c <TIM_Base_SetConfig+0x114>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d013      	beq.n	800d6b8 <TIM_Base_SetConfig+0x40>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d696:	d00f      	beq.n	800d6b8 <TIM_Base_SetConfig+0x40>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	4a3d      	ldr	r2, [pc, #244]	; (800d790 <TIM_Base_SetConfig+0x118>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d00b      	beq.n	800d6b8 <TIM_Base_SetConfig+0x40>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	4a3c      	ldr	r2, [pc, #240]	; (800d794 <TIM_Base_SetConfig+0x11c>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d007      	beq.n	800d6b8 <TIM_Base_SetConfig+0x40>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	4a3b      	ldr	r2, [pc, #236]	; (800d798 <TIM_Base_SetConfig+0x120>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d003      	beq.n	800d6b8 <TIM_Base_SetConfig+0x40>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	4a3a      	ldr	r2, [pc, #232]	; (800d79c <TIM_Base_SetConfig+0x124>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d108      	bne.n	800d6ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4a2f      	ldr	r2, [pc, #188]	; (800d78c <TIM_Base_SetConfig+0x114>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d01f      	beq.n	800d712 <TIM_Base_SetConfig+0x9a>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6d8:	d01b      	beq.n	800d712 <TIM_Base_SetConfig+0x9a>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4a2c      	ldr	r2, [pc, #176]	; (800d790 <TIM_Base_SetConfig+0x118>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d017      	beq.n	800d712 <TIM_Base_SetConfig+0x9a>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4a2b      	ldr	r2, [pc, #172]	; (800d794 <TIM_Base_SetConfig+0x11c>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d013      	beq.n	800d712 <TIM_Base_SetConfig+0x9a>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4a2a      	ldr	r2, [pc, #168]	; (800d798 <TIM_Base_SetConfig+0x120>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d00f      	beq.n	800d712 <TIM_Base_SetConfig+0x9a>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4a29      	ldr	r2, [pc, #164]	; (800d79c <TIM_Base_SetConfig+0x124>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d00b      	beq.n	800d712 <TIM_Base_SetConfig+0x9a>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4a28      	ldr	r2, [pc, #160]	; (800d7a0 <TIM_Base_SetConfig+0x128>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d007      	beq.n	800d712 <TIM_Base_SetConfig+0x9a>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4a27      	ldr	r2, [pc, #156]	; (800d7a4 <TIM_Base_SetConfig+0x12c>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d003      	beq.n	800d712 <TIM_Base_SetConfig+0x9a>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4a26      	ldr	r2, [pc, #152]	; (800d7a8 <TIM_Base_SetConfig+0x130>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d108      	bne.n	800d724 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	68fa      	ldr	r2, [r7, #12]
 800d720:	4313      	orrs	r3, r2
 800d722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	695b      	ldr	r3, [r3, #20]
 800d72e:	4313      	orrs	r3, r2
 800d730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	689a      	ldr	r2, [r3, #8]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	4a10      	ldr	r2, [pc, #64]	; (800d78c <TIM_Base_SetConfig+0x114>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d00f      	beq.n	800d770 <TIM_Base_SetConfig+0xf8>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4a12      	ldr	r2, [pc, #72]	; (800d79c <TIM_Base_SetConfig+0x124>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d00b      	beq.n	800d770 <TIM_Base_SetConfig+0xf8>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4a11      	ldr	r2, [pc, #68]	; (800d7a0 <TIM_Base_SetConfig+0x128>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d007      	beq.n	800d770 <TIM_Base_SetConfig+0xf8>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	4a10      	ldr	r2, [pc, #64]	; (800d7a4 <TIM_Base_SetConfig+0x12c>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d003      	beq.n	800d770 <TIM_Base_SetConfig+0xf8>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4a0f      	ldr	r2, [pc, #60]	; (800d7a8 <TIM_Base_SetConfig+0x130>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d103      	bne.n	800d778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	691a      	ldr	r2, [r3, #16]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2201      	movs	r2, #1
 800d77c:	615a      	str	r2, [r3, #20]
}
 800d77e:	bf00      	nop
 800d780:	3714      	adds	r7, #20
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr
 800d78a:	bf00      	nop
 800d78c:	40010000 	.word	0x40010000
 800d790:	40000400 	.word	0x40000400
 800d794:	40000800 	.word	0x40000800
 800d798:	40000c00 	.word	0x40000c00
 800d79c:	40010400 	.word	0x40010400
 800d7a0:	40014000 	.word	0x40014000
 800d7a4:	40014400 	.word	0x40014400
 800d7a8:	40014800 	.word	0x40014800

0800d7ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b087      	sub	sp, #28
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6a1b      	ldr	r3, [r3, #32]
 800d7ba:	f023 0201 	bic.w	r2, r3, #1
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6a1b      	ldr	r3, [r3, #32]
 800d7c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	699b      	ldr	r3, [r3, #24]
 800d7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	4b37      	ldr	r3, [pc, #220]	; (800d8b4 <TIM_OC1_SetConfig+0x108>)
 800d7d8:	4013      	ands	r3, r2
 800d7da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f023 0303 	bic.w	r3, r3, #3
 800d7e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	f023 0302 	bic.w	r3, r3, #2
 800d7f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	697a      	ldr	r2, [r7, #20]
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4a2d      	ldr	r2, [pc, #180]	; (800d8b8 <TIM_OC1_SetConfig+0x10c>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d00f      	beq.n	800d828 <TIM_OC1_SetConfig+0x7c>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4a2c      	ldr	r2, [pc, #176]	; (800d8bc <TIM_OC1_SetConfig+0x110>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d00b      	beq.n	800d828 <TIM_OC1_SetConfig+0x7c>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	4a2b      	ldr	r2, [pc, #172]	; (800d8c0 <TIM_OC1_SetConfig+0x114>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d007      	beq.n	800d828 <TIM_OC1_SetConfig+0x7c>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4a2a      	ldr	r2, [pc, #168]	; (800d8c4 <TIM_OC1_SetConfig+0x118>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d003      	beq.n	800d828 <TIM_OC1_SetConfig+0x7c>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	4a29      	ldr	r2, [pc, #164]	; (800d8c8 <TIM_OC1_SetConfig+0x11c>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d10c      	bne.n	800d842 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	f023 0308 	bic.w	r3, r3, #8
 800d82e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	697a      	ldr	r2, [r7, #20]
 800d836:	4313      	orrs	r3, r2
 800d838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	f023 0304 	bic.w	r3, r3, #4
 800d840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	4a1c      	ldr	r2, [pc, #112]	; (800d8b8 <TIM_OC1_SetConfig+0x10c>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d00f      	beq.n	800d86a <TIM_OC1_SetConfig+0xbe>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	4a1b      	ldr	r2, [pc, #108]	; (800d8bc <TIM_OC1_SetConfig+0x110>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d00b      	beq.n	800d86a <TIM_OC1_SetConfig+0xbe>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	4a1a      	ldr	r2, [pc, #104]	; (800d8c0 <TIM_OC1_SetConfig+0x114>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d007      	beq.n	800d86a <TIM_OC1_SetConfig+0xbe>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4a19      	ldr	r2, [pc, #100]	; (800d8c4 <TIM_OC1_SetConfig+0x118>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d003      	beq.n	800d86a <TIM_OC1_SetConfig+0xbe>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4a18      	ldr	r2, [pc, #96]	; (800d8c8 <TIM_OC1_SetConfig+0x11c>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d111      	bne.n	800d88e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	695b      	ldr	r3, [r3, #20]
 800d87e:	693a      	ldr	r2, [r7, #16]
 800d880:	4313      	orrs	r3, r2
 800d882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	699b      	ldr	r3, [r3, #24]
 800d888:	693a      	ldr	r2, [r7, #16]
 800d88a:	4313      	orrs	r3, r2
 800d88c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	693a      	ldr	r2, [r7, #16]
 800d892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	685a      	ldr	r2, [r3, #4]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	697a      	ldr	r2, [r7, #20]
 800d8a6:	621a      	str	r2, [r3, #32]
}
 800d8a8:	bf00      	nop
 800d8aa:	371c      	adds	r7, #28
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr
 800d8b4:	fffeff8f 	.word	0xfffeff8f
 800d8b8:	40010000 	.word	0x40010000
 800d8bc:	40010400 	.word	0x40010400
 800d8c0:	40014000 	.word	0x40014000
 800d8c4:	40014400 	.word	0x40014400
 800d8c8:	40014800 	.word	0x40014800

0800d8cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b087      	sub	sp, #28
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6a1b      	ldr	r3, [r3, #32]
 800d8da:	f023 0210 	bic.w	r2, r3, #16
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a1b      	ldr	r3, [r3, #32]
 800d8e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	699b      	ldr	r3, [r3, #24]
 800d8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d8f4:	68fa      	ldr	r2, [r7, #12]
 800d8f6:	4b34      	ldr	r3, [pc, #208]	; (800d9c8 <TIM_OC2_SetConfig+0xfc>)
 800d8f8:	4013      	ands	r3, r2
 800d8fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	021b      	lsls	r3, r3, #8
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	f023 0320 	bic.w	r3, r3, #32
 800d916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	689b      	ldr	r3, [r3, #8]
 800d91c:	011b      	lsls	r3, r3, #4
 800d91e:	697a      	ldr	r2, [r7, #20]
 800d920:	4313      	orrs	r3, r2
 800d922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4a29      	ldr	r2, [pc, #164]	; (800d9cc <TIM_OC2_SetConfig+0x100>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d003      	beq.n	800d934 <TIM_OC2_SetConfig+0x68>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	4a28      	ldr	r2, [pc, #160]	; (800d9d0 <TIM_OC2_SetConfig+0x104>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d10d      	bne.n	800d950 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d93a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	011b      	lsls	r3, r3, #4
 800d942:	697a      	ldr	r2, [r7, #20]
 800d944:	4313      	orrs	r3, r2
 800d946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d94e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	4a1e      	ldr	r2, [pc, #120]	; (800d9cc <TIM_OC2_SetConfig+0x100>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d00f      	beq.n	800d978 <TIM_OC2_SetConfig+0xac>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	4a1d      	ldr	r2, [pc, #116]	; (800d9d0 <TIM_OC2_SetConfig+0x104>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d00b      	beq.n	800d978 <TIM_OC2_SetConfig+0xac>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	4a1c      	ldr	r2, [pc, #112]	; (800d9d4 <TIM_OC2_SetConfig+0x108>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d007      	beq.n	800d978 <TIM_OC2_SetConfig+0xac>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	4a1b      	ldr	r2, [pc, #108]	; (800d9d8 <TIM_OC2_SetConfig+0x10c>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d003      	beq.n	800d978 <TIM_OC2_SetConfig+0xac>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	4a1a      	ldr	r2, [pc, #104]	; (800d9dc <TIM_OC2_SetConfig+0x110>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d113      	bne.n	800d9a0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d97e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d986:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	695b      	ldr	r3, [r3, #20]
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	4313      	orrs	r3, r2
 800d992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	699b      	ldr	r3, [r3, #24]
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	693a      	ldr	r2, [r7, #16]
 800d99c:	4313      	orrs	r3, r2
 800d99e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	693a      	ldr	r2, [r7, #16]
 800d9a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	68fa      	ldr	r2, [r7, #12]
 800d9aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	685a      	ldr	r2, [r3, #4]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	621a      	str	r2, [r3, #32]
}
 800d9ba:	bf00      	nop
 800d9bc:	371c      	adds	r7, #28
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	feff8fff 	.word	0xfeff8fff
 800d9cc:	40010000 	.word	0x40010000
 800d9d0:	40010400 	.word	0x40010400
 800d9d4:	40014000 	.word	0x40014000
 800d9d8:	40014400 	.word	0x40014400
 800d9dc:	40014800 	.word	0x40014800

0800d9e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b087      	sub	sp, #28
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6a1b      	ldr	r3, [r3, #32]
 800d9ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6a1b      	ldr	r3, [r3, #32]
 800d9fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	69db      	ldr	r3, [r3, #28]
 800da06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	4b33      	ldr	r3, [pc, #204]	; (800dad8 <TIM_OC3_SetConfig+0xf8>)
 800da0c:	4013      	ands	r3, r2
 800da0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f023 0303 	bic.w	r3, r3, #3
 800da16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	68fa      	ldr	r2, [r7, #12]
 800da1e:	4313      	orrs	r3, r2
 800da20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	021b      	lsls	r3, r3, #8
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	4313      	orrs	r3, r2
 800da34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	4a28      	ldr	r2, [pc, #160]	; (800dadc <TIM_OC3_SetConfig+0xfc>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d003      	beq.n	800da46 <TIM_OC3_SetConfig+0x66>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	4a27      	ldr	r2, [pc, #156]	; (800dae0 <TIM_OC3_SetConfig+0x100>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d10d      	bne.n	800da62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	021b      	lsls	r3, r3, #8
 800da54:	697a      	ldr	r2, [r7, #20]
 800da56:	4313      	orrs	r3, r2
 800da58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4a1d      	ldr	r2, [pc, #116]	; (800dadc <TIM_OC3_SetConfig+0xfc>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d00f      	beq.n	800da8a <TIM_OC3_SetConfig+0xaa>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4a1c      	ldr	r2, [pc, #112]	; (800dae0 <TIM_OC3_SetConfig+0x100>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d00b      	beq.n	800da8a <TIM_OC3_SetConfig+0xaa>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4a1b      	ldr	r2, [pc, #108]	; (800dae4 <TIM_OC3_SetConfig+0x104>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d007      	beq.n	800da8a <TIM_OC3_SetConfig+0xaa>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4a1a      	ldr	r2, [pc, #104]	; (800dae8 <TIM_OC3_SetConfig+0x108>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d003      	beq.n	800da8a <TIM_OC3_SetConfig+0xaa>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4a19      	ldr	r2, [pc, #100]	; (800daec <TIM_OC3_SetConfig+0x10c>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d113      	bne.n	800dab2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	695b      	ldr	r3, [r3, #20]
 800da9e:	011b      	lsls	r3, r3, #4
 800daa0:	693a      	ldr	r2, [r7, #16]
 800daa2:	4313      	orrs	r3, r2
 800daa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	699b      	ldr	r3, [r3, #24]
 800daaa:	011b      	lsls	r3, r3, #4
 800daac:	693a      	ldr	r2, [r7, #16]
 800daae:	4313      	orrs	r3, r2
 800dab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	68fa      	ldr	r2, [r7, #12]
 800dabc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	685a      	ldr	r2, [r3, #4]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	697a      	ldr	r2, [r7, #20]
 800daca:	621a      	str	r2, [r3, #32]
}
 800dacc:	bf00      	nop
 800dace:	371c      	adds	r7, #28
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	fffeff8f 	.word	0xfffeff8f
 800dadc:	40010000 	.word	0x40010000
 800dae0:	40010400 	.word	0x40010400
 800dae4:	40014000 	.word	0x40014000
 800dae8:	40014400 	.word	0x40014400
 800daec:	40014800 	.word	0x40014800

0800daf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b087      	sub	sp, #28
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6a1b      	ldr	r3, [r3, #32]
 800dafe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6a1b      	ldr	r3, [r3, #32]
 800db0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	69db      	ldr	r3, [r3, #28]
 800db16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	4b24      	ldr	r3, [pc, #144]	; (800dbac <TIM_OC4_SetConfig+0xbc>)
 800db1c:	4013      	ands	r3, r2
 800db1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	021b      	lsls	r3, r3, #8
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	4313      	orrs	r3, r2
 800db32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	031b      	lsls	r3, r3, #12
 800db42:	693a      	ldr	r2, [r7, #16]
 800db44:	4313      	orrs	r3, r2
 800db46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	4a19      	ldr	r2, [pc, #100]	; (800dbb0 <TIM_OC4_SetConfig+0xc0>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d00f      	beq.n	800db70 <TIM_OC4_SetConfig+0x80>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	4a18      	ldr	r2, [pc, #96]	; (800dbb4 <TIM_OC4_SetConfig+0xc4>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d00b      	beq.n	800db70 <TIM_OC4_SetConfig+0x80>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	4a17      	ldr	r2, [pc, #92]	; (800dbb8 <TIM_OC4_SetConfig+0xc8>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d007      	beq.n	800db70 <TIM_OC4_SetConfig+0x80>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	4a16      	ldr	r2, [pc, #88]	; (800dbbc <TIM_OC4_SetConfig+0xcc>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d003      	beq.n	800db70 <TIM_OC4_SetConfig+0x80>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4a15      	ldr	r2, [pc, #84]	; (800dbc0 <TIM_OC4_SetConfig+0xd0>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d109      	bne.n	800db84 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	695b      	ldr	r3, [r3, #20]
 800db7c:	019b      	lsls	r3, r3, #6
 800db7e:	697a      	ldr	r2, [r7, #20]
 800db80:	4313      	orrs	r3, r2
 800db82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	697a      	ldr	r2, [r7, #20]
 800db88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	68fa      	ldr	r2, [r7, #12]
 800db8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	685a      	ldr	r2, [r3, #4]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	621a      	str	r2, [r3, #32]
}
 800db9e:	bf00      	nop
 800dba0:	371c      	adds	r7, #28
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	feff8fff 	.word	0xfeff8fff
 800dbb0:	40010000 	.word	0x40010000
 800dbb4:	40010400 	.word	0x40010400
 800dbb8:	40014000 	.word	0x40014000
 800dbbc:	40014400 	.word	0x40014400
 800dbc0:	40014800 	.word	0x40014800

0800dbc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b087      	sub	sp, #28
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6a1b      	ldr	r3, [r3, #32]
 800dbd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6a1b      	ldr	r3, [r3, #32]
 800dbde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	4b21      	ldr	r3, [pc, #132]	; (800dc74 <TIM_OC5_SetConfig+0xb0>)
 800dbf0:	4013      	ands	r3, r2
 800dbf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dc04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	689b      	ldr	r3, [r3, #8]
 800dc0a:	041b      	lsls	r3, r3, #16
 800dc0c:	693a      	ldr	r2, [r7, #16]
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a18      	ldr	r2, [pc, #96]	; (800dc78 <TIM_OC5_SetConfig+0xb4>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d00f      	beq.n	800dc3a <TIM_OC5_SetConfig+0x76>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4a17      	ldr	r2, [pc, #92]	; (800dc7c <TIM_OC5_SetConfig+0xb8>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d00b      	beq.n	800dc3a <TIM_OC5_SetConfig+0x76>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4a16      	ldr	r2, [pc, #88]	; (800dc80 <TIM_OC5_SetConfig+0xbc>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d007      	beq.n	800dc3a <TIM_OC5_SetConfig+0x76>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4a15      	ldr	r2, [pc, #84]	; (800dc84 <TIM_OC5_SetConfig+0xc0>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d003      	beq.n	800dc3a <TIM_OC5_SetConfig+0x76>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	4a14      	ldr	r2, [pc, #80]	; (800dc88 <TIM_OC5_SetConfig+0xc4>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d109      	bne.n	800dc4e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	695b      	ldr	r3, [r3, #20]
 800dc46:	021b      	lsls	r3, r3, #8
 800dc48:	697a      	ldr	r2, [r7, #20]
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	697a      	ldr	r2, [r7, #20]
 800dc52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	685a      	ldr	r2, [r3, #4]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	693a      	ldr	r2, [r7, #16]
 800dc66:	621a      	str	r2, [r3, #32]
}
 800dc68:	bf00      	nop
 800dc6a:	371c      	adds	r7, #28
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr
 800dc74:	fffeff8f 	.word	0xfffeff8f
 800dc78:	40010000 	.word	0x40010000
 800dc7c:	40010400 	.word	0x40010400
 800dc80:	40014000 	.word	0x40014000
 800dc84:	40014400 	.word	0x40014400
 800dc88:	40014800 	.word	0x40014800

0800dc8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b087      	sub	sp, #28
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6a1b      	ldr	r3, [r3, #32]
 800dc9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6a1b      	ldr	r3, [r3, #32]
 800dca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dcb4:	68fa      	ldr	r2, [r7, #12]
 800dcb6:	4b22      	ldr	r3, [pc, #136]	; (800dd40 <TIM_OC6_SetConfig+0xb4>)
 800dcb8:	4013      	ands	r3, r2
 800dcba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	021b      	lsls	r3, r3, #8
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dcce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	051b      	lsls	r3, r3, #20
 800dcd6:	693a      	ldr	r2, [r7, #16]
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	4a19      	ldr	r2, [pc, #100]	; (800dd44 <TIM_OC6_SetConfig+0xb8>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d00f      	beq.n	800dd04 <TIM_OC6_SetConfig+0x78>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	4a18      	ldr	r2, [pc, #96]	; (800dd48 <TIM_OC6_SetConfig+0xbc>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d00b      	beq.n	800dd04 <TIM_OC6_SetConfig+0x78>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	4a17      	ldr	r2, [pc, #92]	; (800dd4c <TIM_OC6_SetConfig+0xc0>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d007      	beq.n	800dd04 <TIM_OC6_SetConfig+0x78>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	4a16      	ldr	r2, [pc, #88]	; (800dd50 <TIM_OC6_SetConfig+0xc4>)
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d003      	beq.n	800dd04 <TIM_OC6_SetConfig+0x78>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4a15      	ldr	r2, [pc, #84]	; (800dd54 <TIM_OC6_SetConfig+0xc8>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d109      	bne.n	800dd18 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dd0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	695b      	ldr	r3, [r3, #20]
 800dd10:	029b      	lsls	r3, r3, #10
 800dd12:	697a      	ldr	r2, [r7, #20]
 800dd14:	4313      	orrs	r3, r2
 800dd16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	697a      	ldr	r2, [r7, #20]
 800dd1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	68fa      	ldr	r2, [r7, #12]
 800dd22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	685a      	ldr	r2, [r3, #4]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	693a      	ldr	r2, [r7, #16]
 800dd30:	621a      	str	r2, [r3, #32]
}
 800dd32:	bf00      	nop
 800dd34:	371c      	adds	r7, #28
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr
 800dd3e:	bf00      	nop
 800dd40:	feff8fff 	.word	0xfeff8fff
 800dd44:	40010000 	.word	0x40010000
 800dd48:	40010400 	.word	0x40010400
 800dd4c:	40014000 	.word	0x40014000
 800dd50:	40014400 	.word	0x40014400
 800dd54:	40014800 	.word	0x40014800

0800dd58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b087      	sub	sp, #28
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6a1b      	ldr	r3, [r3, #32]
 800dd68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	6a1b      	ldr	r3, [r3, #32]
 800dd6e:	f023 0201 	bic.w	r2, r3, #1
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	699b      	ldr	r3, [r3, #24]
 800dd7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dd82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	011b      	lsls	r3, r3, #4
 800dd88:	693a      	ldr	r2, [r7, #16]
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	f023 030a 	bic.w	r3, r3, #10
 800dd94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dd96:	697a      	ldr	r2, [r7, #20]
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	693a      	ldr	r2, [r7, #16]
 800dda2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	697a      	ldr	r2, [r7, #20]
 800dda8:	621a      	str	r2, [r3, #32]
}
 800ddaa:	bf00      	nop
 800ddac:	371c      	adds	r7, #28
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ddb6:	b480      	push	{r7}
 800ddb8:	b087      	sub	sp, #28
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	60f8      	str	r0, [r7, #12]
 800ddbe:	60b9      	str	r1, [r7, #8]
 800ddc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	6a1b      	ldr	r3, [r3, #32]
 800ddc6:	f023 0210 	bic.w	r2, r3, #16
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	699b      	ldr	r3, [r3, #24]
 800ddd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6a1b      	ldr	r3, [r3, #32]
 800ddd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dde0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	031b      	lsls	r3, r3, #12
 800dde6:	697a      	ldr	r2, [r7, #20]
 800dde8:	4313      	orrs	r3, r2
 800ddea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ddf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	011b      	lsls	r3, r3, #4
 800ddf8:	693a      	ldr	r2, [r7, #16]
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	697a      	ldr	r2, [r7, #20]
 800de02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	693a      	ldr	r2, [r7, #16]
 800de08:	621a      	str	r2, [r3, #32]
}
 800de0a:	bf00      	nop
 800de0c:	371c      	adds	r7, #28
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr
	...

0800de18 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de18:	b480      	push	{r7}
 800de1a:	b085      	sub	sp, #20
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	689b      	ldr	r3, [r3, #8]
 800de26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	4b09      	ldr	r3, [pc, #36]	; (800de50 <TIM_ITRx_SetConfig+0x38>)
 800de2c:	4013      	ands	r3, r2
 800de2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de30:	683a      	ldr	r2, [r7, #0]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	4313      	orrs	r3, r2
 800de36:	f043 0307 	orr.w	r3, r3, #7
 800de3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	68fa      	ldr	r2, [r7, #12]
 800de40:	609a      	str	r2, [r3, #8]
}
 800de42:	bf00      	nop
 800de44:	3714      	adds	r7, #20
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	ffcfff8f 	.word	0xffcfff8f

0800de54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800de54:	b480      	push	{r7}
 800de56:	b087      	sub	sp, #28
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	607a      	str	r2, [r7, #4]
 800de60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	689b      	ldr	r3, [r3, #8]
 800de66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800de6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	021a      	lsls	r2, r3, #8
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	431a      	orrs	r2, r3
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	4313      	orrs	r3, r2
 800de7c:	697a      	ldr	r2, [r7, #20]
 800de7e:	4313      	orrs	r3, r2
 800de80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	697a      	ldr	r2, [r7, #20]
 800de86:	609a      	str	r2, [r3, #8]
}
 800de88:	bf00      	nop
 800de8a:	371c      	adds	r7, #28
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800de94:	b480      	push	{r7}
 800de96:	b087      	sub	sp, #28
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	f003 031f 	and.w	r3, r3, #31
 800dea6:	2201      	movs	r2, #1
 800dea8:	fa02 f303 	lsl.w	r3, r2, r3
 800deac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	6a1a      	ldr	r2, [r3, #32]
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	43db      	mvns	r3, r3
 800deb6:	401a      	ands	r2, r3
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6a1a      	ldr	r2, [r3, #32]
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	f003 031f 	and.w	r3, r3, #31
 800dec6:	6879      	ldr	r1, [r7, #4]
 800dec8:	fa01 f303 	lsl.w	r3, r1, r3
 800decc:	431a      	orrs	r2, r3
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	621a      	str	r2, [r3, #32]
}
 800ded2:	bf00      	nop
 800ded4:	371c      	adds	r7, #28
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr
	...

0800dee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800def0:	2b01      	cmp	r3, #1
 800def2:	d101      	bne.n	800def8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800def4:	2302      	movs	r3, #2
 800def6:	e06d      	b.n	800dfd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2201      	movs	r2, #1
 800defc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2202      	movs	r2, #2
 800df04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	689b      	ldr	r3, [r3, #8]
 800df16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4a30      	ldr	r2, [pc, #192]	; (800dfe0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d004      	beq.n	800df2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4a2f      	ldr	r2, [pc, #188]	; (800dfe4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d108      	bne.n	800df3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800df32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	4313      	orrs	r3, r2
 800df3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	68fa      	ldr	r2, [r7, #12]
 800df4c:	4313      	orrs	r3, r2
 800df4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a20      	ldr	r2, [pc, #128]	; (800dfe0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d022      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df6a:	d01d      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a1d      	ldr	r2, [pc, #116]	; (800dfe8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d018      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a1c      	ldr	r2, [pc, #112]	; (800dfec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d013      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a1a      	ldr	r2, [pc, #104]	; (800dff0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d00e      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4a15      	ldr	r2, [pc, #84]	; (800dfe4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d009      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a16      	ldr	r2, [pc, #88]	; (800dff4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d004      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	4a15      	ldr	r2, [pc, #84]	; (800dff8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d10c      	bne.n	800dfc2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	68ba      	ldr	r2, [r7, #8]
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3714      	adds	r7, #20
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr
 800dfe0:	40010000 	.word	0x40010000
 800dfe4:	40010400 	.word	0x40010400
 800dfe8:	40000400 	.word	0x40000400
 800dfec:	40000800 	.word	0x40000800
 800dff0:	40000c00 	.word	0x40000c00
 800dff4:	40001800 	.word	0x40001800
 800dff8:	40014000 	.word	0x40014000

0800dffc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e006:	2300      	movs	r3, #0
 800e008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e010:	2b01      	cmp	r3, #1
 800e012:	d101      	bne.n	800e018 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e014:	2302      	movs	r3, #2
 800e016:	e065      	b.n	800e0e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2201      	movs	r2, #1
 800e01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	4313      	orrs	r3, r2
 800e02c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	4313      	orrs	r3, r2
 800e03a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	4313      	orrs	r3, r2
 800e048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4313      	orrs	r3, r2
 800e056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	4313      	orrs	r3, r2
 800e064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	695b      	ldr	r3, [r3, #20]
 800e070:	4313      	orrs	r3, r2
 800e072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e07e:	4313      	orrs	r3, r2
 800e080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	699b      	ldr	r3, [r3, #24]
 800e08c:	041b      	lsls	r3, r3, #16
 800e08e:	4313      	orrs	r3, r2
 800e090:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4a16      	ldr	r2, [pc, #88]	; (800e0f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d004      	beq.n	800e0a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a14      	ldr	r2, [pc, #80]	; (800e0f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d115      	bne.n	800e0d2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b0:	051b      	lsls	r3, r3, #20
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	69db      	ldr	r3, [r3, #28]
 800e0c0:	4313      	orrs	r3, r2
 800e0c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	6a1b      	ldr	r3, [r3, #32]
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3714      	adds	r7, #20
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr
 800e0f0:	40010000 	.word	0x40010000
 800e0f4:	40010400 	.word	0x40010400

0800e0f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e100:	bf00      	nop
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e114:	bf00      	nop
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e120:	b480      	push	{r7}
 800e122:	b083      	sub	sp, #12
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e128:	bf00      	nop
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr

0800e134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d101      	bne.n	800e146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e142:	2301      	movs	r3, #1
 800e144:	e042      	b.n	800e1cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d106      	bne.n	800e15e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f7f8 f939 	bl	80063d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2224      	movs	r2, #36	; 0x24
 800e162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f022 0201 	bic.w	r2, r2, #1
 800e174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 fdf8 	bl	800ed6c <UART_SetConfig>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d101      	bne.n	800e186 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e182:	2301      	movs	r3, #1
 800e184:	e022      	b.n	800e1cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d002      	beq.n	800e194 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f001 fb54 	bl	800f83c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	685a      	ldr	r2, [r3, #4]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e1a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	689a      	ldr	r2, [r3, #8]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e1b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f042 0201 	orr.w	r2, r2, #1
 800e1c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f001 fbdb 	bl	800f980 <UART_CheckIdleState>
 800e1ca:	4603      	mov	r3, r0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3708      	adds	r7, #8
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b08a      	sub	sp, #40	; 0x28
 800e1d8:	af02      	add	r7, sp, #8
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	603b      	str	r3, [r7, #0]
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1ea:	2b20      	cmp	r3, #32
 800e1ec:	f040 8083 	bne.w	800e2f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d002      	beq.n	800e1fc <HAL_UART_Transmit+0x28>
 800e1f6:	88fb      	ldrh	r3, [r7, #6]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d101      	bne.n	800e200 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	e07b      	b.n	800e2f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e206:	2b01      	cmp	r3, #1
 800e208:	d101      	bne.n	800e20e <HAL_UART_Transmit+0x3a>
 800e20a:	2302      	movs	r3, #2
 800e20c:	e074      	b.n	800e2f8 <HAL_UART_Transmit+0x124>
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2201      	movs	r2, #1
 800e212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2200      	movs	r2, #0
 800e21a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2221      	movs	r2, #33	; 0x21
 800e222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e226:	f7f8 fc73 	bl	8006b10 <HAL_GetTick>
 800e22a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	88fa      	ldrh	r2, [r7, #6]
 800e230:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	88fa      	ldrh	r2, [r7, #6]
 800e238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	689b      	ldr	r3, [r3, #8]
 800e240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e244:	d108      	bne.n	800e258 <HAL_UART_Transmit+0x84>
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	691b      	ldr	r3, [r3, #16]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d104      	bne.n	800e258 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800e24e:	2300      	movs	r3, #0
 800e250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	61bb      	str	r3, [r7, #24]
 800e256:	e003      	b.n	800e260 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e25c:	2300      	movs	r3, #0
 800e25e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2200      	movs	r2, #0
 800e264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800e268:	e02c      	b.n	800e2c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	9300      	str	r3, [sp, #0]
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	2200      	movs	r2, #0
 800e272:	2180      	movs	r1, #128	; 0x80
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f001 fbce 	bl	800fa16 <UART_WaitOnFlagUntilTimeout>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d001      	beq.n	800e284 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800e280:	2303      	movs	r3, #3
 800e282:	e039      	b.n	800e2f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10b      	bne.n	800e2a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e28a:	69bb      	ldr	r3, [r7, #24]
 800e28c:	881b      	ldrh	r3, [r3, #0]
 800e28e:	461a      	mov	r2, r3
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e298:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	3302      	adds	r3, #2
 800e29e:	61bb      	str	r3, [r7, #24]
 800e2a0:	e007      	b.n	800e2b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e2a2:	69fb      	ldr	r3, [r7, #28]
 800e2a4:	781a      	ldrb	r2, [r3, #0]
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	3b01      	subs	r3, #1
 800e2bc:	b29a      	uxth	r2, r3
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d1cc      	bne.n	800e26a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	2140      	movs	r1, #64	; 0x40
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f001 fb9b 	bl	800fa16 <UART_WaitOnFlagUntilTimeout>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d001      	beq.n	800e2ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800e2e6:	2303      	movs	r3, #3
 800e2e8:	e006      	b.n	800e2f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2220      	movs	r2, #32
 800e2ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	e000      	b.n	800e2f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800e2f6:	2302      	movs	r3, #2
  }
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3720      	adds	r7, #32
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b08a      	sub	sp, #40	; 0x28
 800e304:	af02      	add	r7, sp, #8
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	603b      	str	r3, [r7, #0]
 800e30c:	4613      	mov	r3, r2
 800e30e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e316:	2b20      	cmp	r3, #32
 800e318:	f040 80c0 	bne.w	800e49c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d002      	beq.n	800e328 <HAL_UART_Receive+0x28>
 800e322:	88fb      	ldrh	r3, [r7, #6]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d101      	bne.n	800e32c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e328:	2301      	movs	r3, #1
 800e32a:	e0b8      	b.n	800e49e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e332:	2b01      	cmp	r3, #1
 800e334:	d101      	bne.n	800e33a <HAL_UART_Receive+0x3a>
 800e336:	2302      	movs	r3, #2
 800e338:	e0b1      	b.n	800e49e <HAL_UART_Receive+0x19e>
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2201      	movs	r2, #1
 800e33e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2200      	movs	r2, #0
 800e346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2222      	movs	r2, #34	; 0x22
 800e34e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2200      	movs	r2, #0
 800e356:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e358:	f7f8 fbda 	bl	8006b10 <HAL_GetTick>
 800e35c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	88fa      	ldrh	r2, [r7, #6]
 800e362:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	88fa      	ldrh	r2, [r7, #6]
 800e36a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	689b      	ldr	r3, [r3, #8]
 800e372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e376:	d10e      	bne.n	800e396 <HAL_UART_Receive+0x96>
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	691b      	ldr	r3, [r3, #16]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d105      	bne.n	800e38c <HAL_UART_Receive+0x8c>
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e386:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e38a:	e02d      	b.n	800e3e8 <HAL_UART_Receive+0xe8>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	22ff      	movs	r2, #255	; 0xff
 800e390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e394:	e028      	b.n	800e3e8 <HAL_UART_Receive+0xe8>
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d10d      	bne.n	800e3ba <HAL_UART_Receive+0xba>
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	691b      	ldr	r3, [r3, #16]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d104      	bne.n	800e3b0 <HAL_UART_Receive+0xb0>
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	22ff      	movs	r2, #255	; 0xff
 800e3aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3ae:	e01b      	b.n	800e3e8 <HAL_UART_Receive+0xe8>
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	227f      	movs	r2, #127	; 0x7f
 800e3b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3b8:	e016      	b.n	800e3e8 <HAL_UART_Receive+0xe8>
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	689b      	ldr	r3, [r3, #8]
 800e3be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e3c2:	d10d      	bne.n	800e3e0 <HAL_UART_Receive+0xe0>
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	691b      	ldr	r3, [r3, #16]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d104      	bne.n	800e3d6 <HAL_UART_Receive+0xd6>
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	227f      	movs	r2, #127	; 0x7f
 800e3d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3d4:	e008      	b.n	800e3e8 <HAL_UART_Receive+0xe8>
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	223f      	movs	r2, #63	; 0x3f
 800e3da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3de:	e003      	b.n	800e3e8 <HAL_UART_Receive+0xe8>
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3ee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3f8:	d108      	bne.n	800e40c <HAL_UART_Receive+0x10c>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	691b      	ldr	r3, [r3, #16]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d104      	bne.n	800e40c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800e402:	2300      	movs	r3, #0
 800e404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	61bb      	str	r3, [r7, #24]
 800e40a:	e003      	b.n	800e414 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e410:	2300      	movs	r3, #0
 800e412:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2200      	movs	r2, #0
 800e418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e41c:	e032      	b.n	800e484 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	9300      	str	r3, [sp, #0]
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	2200      	movs	r2, #0
 800e426:	2120      	movs	r1, #32
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f001 faf4 	bl	800fa16 <UART_WaitOnFlagUntilTimeout>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d001      	beq.n	800e438 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800e434:	2303      	movs	r3, #3
 800e436:	e032      	b.n	800e49e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d10c      	bne.n	800e458 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e444:	b29a      	uxth	r2, r3
 800e446:	8a7b      	ldrh	r3, [r7, #18]
 800e448:	4013      	ands	r3, r2
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e450:	69bb      	ldr	r3, [r7, #24]
 800e452:	3302      	adds	r3, #2
 800e454:	61bb      	str	r3, [r7, #24]
 800e456:	e00c      	b.n	800e472 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e45e:	b2da      	uxtb	r2, r3
 800e460:	8a7b      	ldrh	r3, [r7, #18]
 800e462:	b2db      	uxtb	r3, r3
 800e464:	4013      	ands	r3, r2
 800e466:	b2da      	uxtb	r2, r3
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	3301      	adds	r3, #1
 800e470:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e478:	b29b      	uxth	r3, r3
 800e47a:	3b01      	subs	r3, #1
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1c6      	bne.n	800e41e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2220      	movs	r2, #32
 800e494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e498:	2300      	movs	r3, #0
 800e49a:	e000      	b.n	800e49e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800e49c:	2302      	movs	r3, #2
  }
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3720      	adds	r7, #32
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
	...

0800e4a8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b08a      	sub	sp, #40	; 0x28
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4bc:	2b20      	cmp	r3, #32
 800e4be:	d17a      	bne.n	800e5b6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d002      	beq.n	800e4cc <HAL_UART_Transmit_DMA+0x24>
 800e4c6:	88fb      	ldrh	r3, [r7, #6]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d101      	bne.n	800e4d0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e073      	b.n	800e5b8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d101      	bne.n	800e4de <HAL_UART_Transmit_DMA+0x36>
 800e4da:	2302      	movs	r3, #2
 800e4dc:	e06c      	b.n	800e5b8 <HAL_UART_Transmit_DMA+0x110>
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	68ba      	ldr	r2, [r7, #8]
 800e4ea:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	88fa      	ldrh	r2, [r7, #6]
 800e4f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	88fa      	ldrh	r2, [r7, #6]
 800e4f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2200      	movs	r2, #0
 800e500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2221      	movs	r2, #33	; 0x21
 800e508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e510:	2b00      	cmp	r3, #0
 800e512:	d02c      	beq.n	800e56e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e518:	4a29      	ldr	r2, [pc, #164]	; (800e5c0 <HAL_UART_Transmit_DMA+0x118>)
 800e51a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e520:	4a28      	ldr	r2, [pc, #160]	; (800e5c4 <HAL_UART_Transmit_DMA+0x11c>)
 800e522:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e528:	4a27      	ldr	r2, [pc, #156]	; (800e5c8 <HAL_UART_Transmit_DMA+0x120>)
 800e52a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e530:	2200      	movs	r2, #0
 800e532:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e53c:	4619      	mov	r1, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	3328      	adds	r3, #40	; 0x28
 800e544:	461a      	mov	r2, r3
 800e546:	88fb      	ldrh	r3, [r7, #6]
 800e548:	f7f9 f994 	bl	8007874 <HAL_DMA_Start_IT>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d00d      	beq.n	800e56e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2210      	movs	r2, #16
 800e556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2200      	movs	r2, #0
 800e55e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2220      	movs	r2, #32
 800e566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800e56a:	2301      	movs	r3, #1
 800e56c:	e024      	b.n	800e5b8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2240      	movs	r2, #64	; 0x40
 800e574:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2200      	movs	r2, #0
 800e57a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	3308      	adds	r3, #8
 800e584:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	e853 3f00 	ldrex	r3, [r3]
 800e58c:	613b      	str	r3, [r7, #16]
   return(result);
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e594:	627b      	str	r3, [r7, #36]	; 0x24
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	3308      	adds	r3, #8
 800e59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e59e:	623a      	str	r2, [r7, #32]
 800e5a0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a2:	69f9      	ldr	r1, [r7, #28]
 800e5a4:	6a3a      	ldr	r2, [r7, #32]
 800e5a6:	e841 2300 	strex	r3, r2, [r1]
 800e5aa:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d1e5      	bne.n	800e57e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	e000      	b.n	800e5b8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800e5b6:	2302      	movs	r3, #2
  }
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3728      	adds	r7, #40	; 0x28
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	0800fe49 	.word	0x0800fe49
 800e5c4:	0800fedf 	.word	0x0800fedf
 800e5c8:	08010055 	.word	0x08010055

0800e5cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b0ba      	sub	sp, #232	; 0xe8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	69db      	ldr	r3, [r3, #28]
 800e5da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e5f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e5f6:	f640 030f 	movw	r3, #2063	; 0x80f
 800e5fa:	4013      	ands	r3, r2
 800e5fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e604:	2b00      	cmp	r3, #0
 800e606:	d11b      	bne.n	800e640 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e60c:	f003 0320 	and.w	r3, r3, #32
 800e610:	2b00      	cmp	r3, #0
 800e612:	d015      	beq.n	800e640 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e618:	f003 0320 	and.w	r3, r3, #32
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d105      	bne.n	800e62c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d009      	beq.n	800e640 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e630:	2b00      	cmp	r3, #0
 800e632:	f000 835a 	beq.w	800ecea <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	4798      	blx	r3
      }
      return;
 800e63e:	e354      	b.n	800ecea <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e644:	2b00      	cmp	r3, #0
 800e646:	f000 811f 	beq.w	800e888 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e64a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e64e:	4b8b      	ldr	r3, [pc, #556]	; (800e87c <HAL_UART_IRQHandler+0x2b0>)
 800e650:	4013      	ands	r3, r2
 800e652:	2b00      	cmp	r3, #0
 800e654:	d106      	bne.n	800e664 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e656:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e65a:	4b89      	ldr	r3, [pc, #548]	; (800e880 <HAL_UART_IRQHandler+0x2b4>)
 800e65c:	4013      	ands	r3, r2
 800e65e:	2b00      	cmp	r3, #0
 800e660:	f000 8112 	beq.w	800e888 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e668:	f003 0301 	and.w	r3, r3, #1
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d011      	beq.n	800e694 <HAL_UART_IRQHandler+0xc8>
 800e670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d00b      	beq.n	800e694 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2201      	movs	r2, #1
 800e682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e68a:	f043 0201 	orr.w	r2, r3, #1
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e698:	f003 0302 	and.w	r3, r3, #2
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d011      	beq.n	800e6c4 <HAL_UART_IRQHandler+0xf8>
 800e6a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6a4:	f003 0301 	and.w	r3, r3, #1
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00b      	beq.n	800e6c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2202      	movs	r2, #2
 800e6b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6ba:	f043 0204 	orr.w	r2, r3, #4
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6c8:	f003 0304 	and.w	r3, r3, #4
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d011      	beq.n	800e6f4 <HAL_UART_IRQHandler+0x128>
 800e6d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6d4:	f003 0301 	and.w	r3, r3, #1
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00b      	beq.n	800e6f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2204      	movs	r2, #4
 800e6e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6ea:	f043 0202 	orr.w	r2, r3, #2
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e6f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6f8:	f003 0308 	and.w	r3, r3, #8
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d017      	beq.n	800e730 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e704:	f003 0320 	and.w	r3, r3, #32
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d105      	bne.n	800e718 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e70c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e710:	4b5a      	ldr	r3, [pc, #360]	; (800e87c <HAL_UART_IRQHandler+0x2b0>)
 800e712:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e714:	2b00      	cmp	r3, #0
 800e716:	d00b      	beq.n	800e730 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2208      	movs	r2, #8
 800e71e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e726:	f043 0208 	orr.w	r2, r3, #8
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d012      	beq.n	800e762 <HAL_UART_IRQHandler+0x196>
 800e73c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e744:	2b00      	cmp	r3, #0
 800e746:	d00c      	beq.n	800e762 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e758:	f043 0220 	orr.w	r2, r3, #32
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e768:	2b00      	cmp	r3, #0
 800e76a:	f000 82c0 	beq.w	800ecee <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e76e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e772:	f003 0320 	and.w	r3, r3, #32
 800e776:	2b00      	cmp	r3, #0
 800e778:	d013      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e77a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e77e:	f003 0320 	and.w	r3, r3, #32
 800e782:	2b00      	cmp	r3, #0
 800e784:	d105      	bne.n	800e792 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e78a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d007      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e796:	2b00      	cmp	r3, #0
 800e798:	d003      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	689b      	ldr	r3, [r3, #8]
 800e7b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7b6:	2b40      	cmp	r3, #64	; 0x40
 800e7b8:	d005      	beq.n	800e7c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e7ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e7be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d04f      	beq.n	800e866 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f001 fad8 	bl	800fd7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7d6:	2b40      	cmp	r3, #64	; 0x40
 800e7d8:	d141      	bne.n	800e85e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	3308      	adds	r3, #8
 800e7e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e7e8:	e853 3f00 	ldrex	r3, [r3]
 800e7ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e7f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e7f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	3308      	adds	r3, #8
 800e802:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e806:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e80a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e812:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e816:	e841 2300 	strex	r3, r2, [r1]
 800e81a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e81e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1d9      	bne.n	800e7da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d013      	beq.n	800e856 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e832:	4a14      	ldr	r2, [pc, #80]	; (800e884 <HAL_UART_IRQHandler+0x2b8>)
 800e834:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7f9 fda2 	bl	8008384 <HAL_DMA_Abort_IT>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d017      	beq.n	800e876 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e850:	4610      	mov	r0, r2
 800e852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e854:	e00f      	b.n	800e876 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f000 fa7e 	bl	800ed58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e85c:	e00b      	b.n	800e876 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 fa7a 	bl	800ed58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e864:	e007      	b.n	800e876 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f000 fa76 	bl	800ed58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2200      	movs	r2, #0
 800e870:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e874:	e23b      	b.n	800ecee <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e876:	bf00      	nop
    return;
 800e878:	e239      	b.n	800ecee <HAL_UART_IRQHandler+0x722>
 800e87a:	bf00      	nop
 800e87c:	10000001 	.word	0x10000001
 800e880:	04000120 	.word	0x04000120
 800e884:	080100d5 	.word	0x080100d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	f040 81ce 	bne.w	800ec2e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e896:	f003 0310 	and.w	r3, r3, #16
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	f000 81c7 	beq.w	800ec2e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e8a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8a4:	f003 0310 	and.w	r3, r3, #16
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	f000 81c0 	beq.w	800ec2e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2210      	movs	r2, #16
 800e8b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8c0:	2b40      	cmp	r3, #64	; 0x40
 800e8c2:	f040 813b 	bne.w	800eb3c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4a8b      	ldr	r2, [pc, #556]	; (800eafc <HAL_UART_IRQHandler+0x530>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d059      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a89      	ldr	r2, [pc, #548]	; (800eb00 <HAL_UART_IRQHandler+0x534>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d053      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	4a87      	ldr	r2, [pc, #540]	; (800eb04 <HAL_UART_IRQHandler+0x538>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d04d      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a85      	ldr	r2, [pc, #532]	; (800eb08 <HAL_UART_IRQHandler+0x53c>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d047      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4a83      	ldr	r2, [pc, #524]	; (800eb0c <HAL_UART_IRQHandler+0x540>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d041      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	4a81      	ldr	r2, [pc, #516]	; (800eb10 <HAL_UART_IRQHandler+0x544>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d03b      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a7f      	ldr	r2, [pc, #508]	; (800eb14 <HAL_UART_IRQHandler+0x548>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d035      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4a7d      	ldr	r2, [pc, #500]	; (800eb18 <HAL_UART_IRQHandler+0x54c>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d02f      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4a7b      	ldr	r2, [pc, #492]	; (800eb1c <HAL_UART_IRQHandler+0x550>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d029      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a79      	ldr	r2, [pc, #484]	; (800eb20 <HAL_UART_IRQHandler+0x554>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d023      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4a77      	ldr	r2, [pc, #476]	; (800eb24 <HAL_UART_IRQHandler+0x558>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d01d      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a75      	ldr	r2, [pc, #468]	; (800eb28 <HAL_UART_IRQHandler+0x55c>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d017      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4a73      	ldr	r2, [pc, #460]	; (800eb2c <HAL_UART_IRQHandler+0x560>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d011      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a71      	ldr	r2, [pc, #452]	; (800eb30 <HAL_UART_IRQHandler+0x564>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d00b      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4a6f      	ldr	r2, [pc, #444]	; (800eb34 <HAL_UART_IRQHandler+0x568>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d005      	beq.n	800e986 <HAL_UART_IRQHandler+0x3ba>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4a6d      	ldr	r2, [pc, #436]	; (800eb38 <HAL_UART_IRQHandler+0x56c>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d105      	bne.n	800e992 <HAL_UART_IRQHandler+0x3c6>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	b29b      	uxth	r3, r3
 800e990:	e004      	b.n	800e99c <HAL_UART_IRQHandler+0x3d0>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e9a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f000 81a4 	beq.w	800ecf2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e9b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	f080 819c 	bcs.w	800ecf2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e9c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9c8:	69db      	ldr	r3, [r3, #28]
 800e9ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9ce:	f000 8086 	beq.w	800eade <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e9de:	e853 3f00 	ldrex	r3, [r3]
 800e9e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e9e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e9ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e9fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ea00:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea04:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ea08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ea0c:	e841 2300 	strex	r3, r2, [r1]
 800ea10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ea14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d1da      	bne.n	800e9d2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	3308      	adds	r3, #8
 800ea22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea26:	e853 3f00 	ldrex	r3, [r3]
 800ea2a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ea2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea2e:	f023 0301 	bic.w	r3, r3, #1
 800ea32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	3308      	adds	r3, #8
 800ea3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ea40:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ea44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea46:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ea48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ea4c:	e841 2300 	strex	r3, r2, [r1]
 800ea50:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ea52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d1e1      	bne.n	800ea1c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	3308      	adds	r3, #8
 800ea5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea62:	e853 3f00 	ldrex	r3, [r3]
 800ea66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ea68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	3308      	adds	r3, #8
 800ea78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ea7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ea7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ea82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ea84:	e841 2300 	strex	r3, r2, [r1]
 800ea88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ea8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d1e3      	bne.n	800ea58 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2220      	movs	r2, #32
 800ea94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaa6:	e853 3f00 	ldrex	r3, [r3]
 800eaaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eaac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaae:	f023 0310 	bic.w	r3, r3, #16
 800eab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	461a      	mov	r2, r3
 800eabc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eac0:	65bb      	str	r3, [r7, #88]	; 0x58
 800eac2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eac6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eac8:	e841 2300 	strex	r3, r2, [r1]
 800eacc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1e4      	bne.n	800ea9e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ead8:	4618      	mov	r0, r3
 800eada:	f7f9 f935 	bl	8007d48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	1ad3      	subs	r3, r2, r3
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f7f4 fb4c 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eaf8:	e0fb      	b.n	800ecf2 <HAL_UART_IRQHandler+0x726>
 800eafa:	bf00      	nop
 800eafc:	40020010 	.word	0x40020010
 800eb00:	40020028 	.word	0x40020028
 800eb04:	40020040 	.word	0x40020040
 800eb08:	40020058 	.word	0x40020058
 800eb0c:	40020070 	.word	0x40020070
 800eb10:	40020088 	.word	0x40020088
 800eb14:	400200a0 	.word	0x400200a0
 800eb18:	400200b8 	.word	0x400200b8
 800eb1c:	40020410 	.word	0x40020410
 800eb20:	40020428 	.word	0x40020428
 800eb24:	40020440 	.word	0x40020440
 800eb28:	40020458 	.word	0x40020458
 800eb2c:	40020470 	.word	0x40020470
 800eb30:	40020488 	.word	0x40020488
 800eb34:	400204a0 	.word	0x400204a0
 800eb38:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	1ad3      	subs	r3, r2, r3
 800eb4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f000 80cc 	beq.w	800ecf6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800eb5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	f000 80c7 	beq.w	800ecf6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb70:	e853 3f00 	ldrex	r3, [r3]
 800eb74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	461a      	mov	r2, r3
 800eb86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eb8a:	647b      	str	r3, [r7, #68]	; 0x44
 800eb8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb92:	e841 2300 	strex	r3, r2, [r1]
 800eb96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1e4      	bne.n	800eb68 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	3308      	adds	r3, #8
 800eba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba8:	e853 3f00 	ldrex	r3, [r3]
 800ebac:	623b      	str	r3, [r7, #32]
   return(result);
 800ebae:	6a3a      	ldr	r2, [r7, #32]
 800ebb0:	4b54      	ldr	r3, [pc, #336]	; (800ed04 <HAL_UART_IRQHandler+0x738>)
 800ebb2:	4013      	ands	r3, r2
 800ebb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	3308      	adds	r3, #8
 800ebbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ebc2:	633a      	str	r2, [r7, #48]	; 0x30
 800ebc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebca:	e841 2300 	strex	r3, r2, [r1]
 800ebce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ebd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d1e3      	bne.n	800eb9e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2220      	movs	r2, #32
 800ebda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	e853 3f00 	ldrex	r3, [r3]
 800ebf6:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f023 0310 	bic.w	r3, r3, #16
 800ebfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	461a      	mov	r2, r3
 800ec08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ec0c:	61fb      	str	r3, [r7, #28]
 800ec0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec10:	69b9      	ldr	r1, [r7, #24]
 800ec12:	69fa      	ldr	r2, [r7, #28]
 800ec14:	e841 2300 	strex	r3, r2, [r1]
 800ec18:	617b      	str	r3, [r7, #20]
   return(result);
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d1e4      	bne.n	800ebea <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ec20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ec24:	4619      	mov	r1, r3
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f7f4 fab2 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ec2c:	e063      	b.n	800ecf6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ec2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d00e      	beq.n	800ec58 <HAL_UART_IRQHandler+0x68c>
 800ec3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d008      	beq.n	800ec58 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ec4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f001 fa80 	bl	8010156 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec56:	e051      	b.n	800ecfc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ec58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d014      	beq.n	800ec8e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ec64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d105      	bne.n	800ec7c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ec70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d008      	beq.n	800ec8e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d03a      	beq.n	800ecfa <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	4798      	blx	r3
    }
    return;
 800ec8c:	e035      	b.n	800ecfa <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ec8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d009      	beq.n	800ecae <HAL_UART_IRQHandler+0x6e2>
 800ec9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d003      	beq.n	800ecae <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f001 fa2a 	bl	8010100 <UART_EndTransmit_IT>
    return;
 800ecac:	e026      	b.n	800ecfc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ecae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d009      	beq.n	800ecce <HAL_UART_IRQHandler+0x702>
 800ecba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d003      	beq.n	800ecce <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f001 fa59 	bl	801017e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eccc:	e016      	b.n	800ecfc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ecce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d010      	beq.n	800ecfc <HAL_UART_IRQHandler+0x730>
 800ecda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	da0c      	bge.n	800ecfc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f001 fa41 	bl	801016a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ece8:	e008      	b.n	800ecfc <HAL_UART_IRQHandler+0x730>
      return;
 800ecea:	bf00      	nop
 800ecec:	e006      	b.n	800ecfc <HAL_UART_IRQHandler+0x730>
    return;
 800ecee:	bf00      	nop
 800ecf0:	e004      	b.n	800ecfc <HAL_UART_IRQHandler+0x730>
      return;
 800ecf2:	bf00      	nop
 800ecf4:	e002      	b.n	800ecfc <HAL_UART_IRQHandler+0x730>
      return;
 800ecf6:	bf00      	nop
 800ecf8:	e000      	b.n	800ecfc <HAL_UART_IRQHandler+0x730>
    return;
 800ecfa:	bf00      	nop
  }
}
 800ecfc:	37e8      	adds	r7, #232	; 0xe8
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	effffffe 	.word	0xeffffffe

0800ed08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ed10:	bf00      	nop
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ed24:	bf00      	nop
 800ed26:	370c      	adds	r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ed38:	bf00      	nop
 800ed3a:	370c      	adds	r7, #12
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ed4c:	bf00      	nop
 800ed4e:	370c      	adds	r7, #12
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr

0800ed58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b083      	sub	sp, #12
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ed60:	bf00      	nop
 800ed62:	370c      	adds	r7, #12
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr

0800ed6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ed70:	b092      	sub	sp, #72	; 0x48
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed76:	2300      	movs	r3, #0
 800ed78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	689a      	ldr	r2, [r3, #8]
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	691b      	ldr	r3, [r3, #16]
 800ed84:	431a      	orrs	r2, r3
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	695b      	ldr	r3, [r3, #20]
 800ed8a:	431a      	orrs	r2, r3
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	69db      	ldr	r3, [r3, #28]
 800ed90:	4313      	orrs	r3, r2
 800ed92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	4bbe      	ldr	r3, [pc, #760]	; (800f094 <UART_SetConfig+0x328>)
 800ed9c:	4013      	ands	r3, r2
 800ed9e:	697a      	ldr	r2, [r7, #20]
 800eda0:	6812      	ldr	r2, [r2, #0]
 800eda2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eda4:	430b      	orrs	r3, r1
 800eda6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	68da      	ldr	r2, [r3, #12]
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	430a      	orrs	r2, r1
 800edbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	699b      	ldr	r3, [r3, #24]
 800edc2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4ab3      	ldr	r2, [pc, #716]	; (800f098 <UART_SetConfig+0x32c>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d004      	beq.n	800edd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	6a1b      	ldr	r3, [r3, #32]
 800edd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edd4:	4313      	orrs	r3, r2
 800edd6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	689a      	ldr	r2, [r3, #8]
 800edde:	4baf      	ldr	r3, [pc, #700]	; (800f09c <UART_SetConfig+0x330>)
 800ede0:	4013      	ands	r3, r2
 800ede2:	697a      	ldr	r2, [r7, #20]
 800ede4:	6812      	ldr	r2, [r2, #0]
 800ede6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ede8:	430b      	orrs	r3, r1
 800edea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf2:	f023 010f 	bic.w	r1, r3, #15
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	430a      	orrs	r2, r1
 800ee00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	4aa6      	ldr	r2, [pc, #664]	; (800f0a0 <UART_SetConfig+0x334>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d177      	bne.n	800eefc <UART_SetConfig+0x190>
 800ee0c:	4ba5      	ldr	r3, [pc, #660]	; (800f0a4 <UART_SetConfig+0x338>)
 800ee0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee14:	2b28      	cmp	r3, #40	; 0x28
 800ee16:	d86d      	bhi.n	800eef4 <UART_SetConfig+0x188>
 800ee18:	a201      	add	r2, pc, #4	; (adr r2, 800ee20 <UART_SetConfig+0xb4>)
 800ee1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee1e:	bf00      	nop
 800ee20:	0800eec5 	.word	0x0800eec5
 800ee24:	0800eef5 	.word	0x0800eef5
 800ee28:	0800eef5 	.word	0x0800eef5
 800ee2c:	0800eef5 	.word	0x0800eef5
 800ee30:	0800eef5 	.word	0x0800eef5
 800ee34:	0800eef5 	.word	0x0800eef5
 800ee38:	0800eef5 	.word	0x0800eef5
 800ee3c:	0800eef5 	.word	0x0800eef5
 800ee40:	0800eecd 	.word	0x0800eecd
 800ee44:	0800eef5 	.word	0x0800eef5
 800ee48:	0800eef5 	.word	0x0800eef5
 800ee4c:	0800eef5 	.word	0x0800eef5
 800ee50:	0800eef5 	.word	0x0800eef5
 800ee54:	0800eef5 	.word	0x0800eef5
 800ee58:	0800eef5 	.word	0x0800eef5
 800ee5c:	0800eef5 	.word	0x0800eef5
 800ee60:	0800eed5 	.word	0x0800eed5
 800ee64:	0800eef5 	.word	0x0800eef5
 800ee68:	0800eef5 	.word	0x0800eef5
 800ee6c:	0800eef5 	.word	0x0800eef5
 800ee70:	0800eef5 	.word	0x0800eef5
 800ee74:	0800eef5 	.word	0x0800eef5
 800ee78:	0800eef5 	.word	0x0800eef5
 800ee7c:	0800eef5 	.word	0x0800eef5
 800ee80:	0800eedd 	.word	0x0800eedd
 800ee84:	0800eef5 	.word	0x0800eef5
 800ee88:	0800eef5 	.word	0x0800eef5
 800ee8c:	0800eef5 	.word	0x0800eef5
 800ee90:	0800eef5 	.word	0x0800eef5
 800ee94:	0800eef5 	.word	0x0800eef5
 800ee98:	0800eef5 	.word	0x0800eef5
 800ee9c:	0800eef5 	.word	0x0800eef5
 800eea0:	0800eee5 	.word	0x0800eee5
 800eea4:	0800eef5 	.word	0x0800eef5
 800eea8:	0800eef5 	.word	0x0800eef5
 800eeac:	0800eef5 	.word	0x0800eef5
 800eeb0:	0800eef5 	.word	0x0800eef5
 800eeb4:	0800eef5 	.word	0x0800eef5
 800eeb8:	0800eef5 	.word	0x0800eef5
 800eebc:	0800eef5 	.word	0x0800eef5
 800eec0:	0800eeed 	.word	0x0800eeed
 800eec4:	2301      	movs	r3, #1
 800eec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeca:	e222      	b.n	800f312 <UART_SetConfig+0x5a6>
 800eecc:	2304      	movs	r3, #4
 800eece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eed2:	e21e      	b.n	800f312 <UART_SetConfig+0x5a6>
 800eed4:	2308      	movs	r3, #8
 800eed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeda:	e21a      	b.n	800f312 <UART_SetConfig+0x5a6>
 800eedc:	2310      	movs	r3, #16
 800eede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eee2:	e216      	b.n	800f312 <UART_SetConfig+0x5a6>
 800eee4:	2320      	movs	r3, #32
 800eee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeea:	e212      	b.n	800f312 <UART_SetConfig+0x5a6>
 800eeec:	2340      	movs	r3, #64	; 0x40
 800eeee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eef2:	e20e      	b.n	800f312 <UART_SetConfig+0x5a6>
 800eef4:	2380      	movs	r3, #128	; 0x80
 800eef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefa:	e20a      	b.n	800f312 <UART_SetConfig+0x5a6>
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a69      	ldr	r2, [pc, #420]	; (800f0a8 <UART_SetConfig+0x33c>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d130      	bne.n	800ef68 <UART_SetConfig+0x1fc>
 800ef06:	4b67      	ldr	r3, [pc, #412]	; (800f0a4 <UART_SetConfig+0x338>)
 800ef08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef0a:	f003 0307 	and.w	r3, r3, #7
 800ef0e:	2b05      	cmp	r3, #5
 800ef10:	d826      	bhi.n	800ef60 <UART_SetConfig+0x1f4>
 800ef12:	a201      	add	r2, pc, #4	; (adr r2, 800ef18 <UART_SetConfig+0x1ac>)
 800ef14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef18:	0800ef31 	.word	0x0800ef31
 800ef1c:	0800ef39 	.word	0x0800ef39
 800ef20:	0800ef41 	.word	0x0800ef41
 800ef24:	0800ef49 	.word	0x0800ef49
 800ef28:	0800ef51 	.word	0x0800ef51
 800ef2c:	0800ef59 	.word	0x0800ef59
 800ef30:	2300      	movs	r3, #0
 800ef32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef36:	e1ec      	b.n	800f312 <UART_SetConfig+0x5a6>
 800ef38:	2304      	movs	r3, #4
 800ef3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef3e:	e1e8      	b.n	800f312 <UART_SetConfig+0x5a6>
 800ef40:	2308      	movs	r3, #8
 800ef42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef46:	e1e4      	b.n	800f312 <UART_SetConfig+0x5a6>
 800ef48:	2310      	movs	r3, #16
 800ef4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef4e:	e1e0      	b.n	800f312 <UART_SetConfig+0x5a6>
 800ef50:	2320      	movs	r3, #32
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef56:	e1dc      	b.n	800f312 <UART_SetConfig+0x5a6>
 800ef58:	2340      	movs	r3, #64	; 0x40
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5e:	e1d8      	b.n	800f312 <UART_SetConfig+0x5a6>
 800ef60:	2380      	movs	r3, #128	; 0x80
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef66:	e1d4      	b.n	800f312 <UART_SetConfig+0x5a6>
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a4f      	ldr	r2, [pc, #316]	; (800f0ac <UART_SetConfig+0x340>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d130      	bne.n	800efd4 <UART_SetConfig+0x268>
 800ef72:	4b4c      	ldr	r3, [pc, #304]	; (800f0a4 <UART_SetConfig+0x338>)
 800ef74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef76:	f003 0307 	and.w	r3, r3, #7
 800ef7a:	2b05      	cmp	r3, #5
 800ef7c:	d826      	bhi.n	800efcc <UART_SetConfig+0x260>
 800ef7e:	a201      	add	r2, pc, #4	; (adr r2, 800ef84 <UART_SetConfig+0x218>)
 800ef80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef84:	0800ef9d 	.word	0x0800ef9d
 800ef88:	0800efa5 	.word	0x0800efa5
 800ef8c:	0800efad 	.word	0x0800efad
 800ef90:	0800efb5 	.word	0x0800efb5
 800ef94:	0800efbd 	.word	0x0800efbd
 800ef98:	0800efc5 	.word	0x0800efc5
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efa2:	e1b6      	b.n	800f312 <UART_SetConfig+0x5a6>
 800efa4:	2304      	movs	r3, #4
 800efa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efaa:	e1b2      	b.n	800f312 <UART_SetConfig+0x5a6>
 800efac:	2308      	movs	r3, #8
 800efae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efb2:	e1ae      	b.n	800f312 <UART_SetConfig+0x5a6>
 800efb4:	2310      	movs	r3, #16
 800efb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efba:	e1aa      	b.n	800f312 <UART_SetConfig+0x5a6>
 800efbc:	2320      	movs	r3, #32
 800efbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efc2:	e1a6      	b.n	800f312 <UART_SetConfig+0x5a6>
 800efc4:	2340      	movs	r3, #64	; 0x40
 800efc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efca:	e1a2      	b.n	800f312 <UART_SetConfig+0x5a6>
 800efcc:	2380      	movs	r3, #128	; 0x80
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd2:	e19e      	b.n	800f312 <UART_SetConfig+0x5a6>
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4a35      	ldr	r2, [pc, #212]	; (800f0b0 <UART_SetConfig+0x344>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d130      	bne.n	800f040 <UART_SetConfig+0x2d4>
 800efde:	4b31      	ldr	r3, [pc, #196]	; (800f0a4 <UART_SetConfig+0x338>)
 800efe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efe2:	f003 0307 	and.w	r3, r3, #7
 800efe6:	2b05      	cmp	r3, #5
 800efe8:	d826      	bhi.n	800f038 <UART_SetConfig+0x2cc>
 800efea:	a201      	add	r2, pc, #4	; (adr r2, 800eff0 <UART_SetConfig+0x284>)
 800efec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff0:	0800f009 	.word	0x0800f009
 800eff4:	0800f011 	.word	0x0800f011
 800eff8:	0800f019 	.word	0x0800f019
 800effc:	0800f021 	.word	0x0800f021
 800f000:	0800f029 	.word	0x0800f029
 800f004:	0800f031 	.word	0x0800f031
 800f008:	2300      	movs	r3, #0
 800f00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f00e:	e180      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f010:	2304      	movs	r3, #4
 800f012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f016:	e17c      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f018:	2308      	movs	r3, #8
 800f01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f01e:	e178      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f020:	2310      	movs	r3, #16
 800f022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f026:	e174      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f028:	2320      	movs	r3, #32
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f02e:	e170      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f030:	2340      	movs	r3, #64	; 0x40
 800f032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f036:	e16c      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f038:	2380      	movs	r3, #128	; 0x80
 800f03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03e:	e168      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4a1b      	ldr	r2, [pc, #108]	; (800f0b4 <UART_SetConfig+0x348>)
 800f046:	4293      	cmp	r3, r2
 800f048:	d142      	bne.n	800f0d0 <UART_SetConfig+0x364>
 800f04a:	4b16      	ldr	r3, [pc, #88]	; (800f0a4 <UART_SetConfig+0x338>)
 800f04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f04e:	f003 0307 	and.w	r3, r3, #7
 800f052:	2b05      	cmp	r3, #5
 800f054:	d838      	bhi.n	800f0c8 <UART_SetConfig+0x35c>
 800f056:	a201      	add	r2, pc, #4	; (adr r2, 800f05c <UART_SetConfig+0x2f0>)
 800f058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f05c:	0800f075 	.word	0x0800f075
 800f060:	0800f07d 	.word	0x0800f07d
 800f064:	0800f085 	.word	0x0800f085
 800f068:	0800f08d 	.word	0x0800f08d
 800f06c:	0800f0b9 	.word	0x0800f0b9
 800f070:	0800f0c1 	.word	0x0800f0c1
 800f074:	2300      	movs	r3, #0
 800f076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f07a:	e14a      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f07c:	2304      	movs	r3, #4
 800f07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f082:	e146      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f084:	2308      	movs	r3, #8
 800f086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f08a:	e142      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f08c:	2310      	movs	r3, #16
 800f08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f092:	e13e      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f094:	cfff69f3 	.word	0xcfff69f3
 800f098:	58000c00 	.word	0x58000c00
 800f09c:	11fff4ff 	.word	0x11fff4ff
 800f0a0:	40011000 	.word	0x40011000
 800f0a4:	58024400 	.word	0x58024400
 800f0a8:	40004400 	.word	0x40004400
 800f0ac:	40004800 	.word	0x40004800
 800f0b0:	40004c00 	.word	0x40004c00
 800f0b4:	40005000 	.word	0x40005000
 800f0b8:	2320      	movs	r3, #32
 800f0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0be:	e128      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f0c0:	2340      	movs	r3, #64	; 0x40
 800f0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c6:	e124      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f0c8:	2380      	movs	r3, #128	; 0x80
 800f0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ce:	e120      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4acb      	ldr	r2, [pc, #812]	; (800f404 <UART_SetConfig+0x698>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d176      	bne.n	800f1c8 <UART_SetConfig+0x45c>
 800f0da:	4bcb      	ldr	r3, [pc, #812]	; (800f408 <UART_SetConfig+0x69c>)
 800f0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f0e2:	2b28      	cmp	r3, #40	; 0x28
 800f0e4:	d86c      	bhi.n	800f1c0 <UART_SetConfig+0x454>
 800f0e6:	a201      	add	r2, pc, #4	; (adr r2, 800f0ec <UART_SetConfig+0x380>)
 800f0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ec:	0800f191 	.word	0x0800f191
 800f0f0:	0800f1c1 	.word	0x0800f1c1
 800f0f4:	0800f1c1 	.word	0x0800f1c1
 800f0f8:	0800f1c1 	.word	0x0800f1c1
 800f0fc:	0800f1c1 	.word	0x0800f1c1
 800f100:	0800f1c1 	.word	0x0800f1c1
 800f104:	0800f1c1 	.word	0x0800f1c1
 800f108:	0800f1c1 	.word	0x0800f1c1
 800f10c:	0800f199 	.word	0x0800f199
 800f110:	0800f1c1 	.word	0x0800f1c1
 800f114:	0800f1c1 	.word	0x0800f1c1
 800f118:	0800f1c1 	.word	0x0800f1c1
 800f11c:	0800f1c1 	.word	0x0800f1c1
 800f120:	0800f1c1 	.word	0x0800f1c1
 800f124:	0800f1c1 	.word	0x0800f1c1
 800f128:	0800f1c1 	.word	0x0800f1c1
 800f12c:	0800f1a1 	.word	0x0800f1a1
 800f130:	0800f1c1 	.word	0x0800f1c1
 800f134:	0800f1c1 	.word	0x0800f1c1
 800f138:	0800f1c1 	.word	0x0800f1c1
 800f13c:	0800f1c1 	.word	0x0800f1c1
 800f140:	0800f1c1 	.word	0x0800f1c1
 800f144:	0800f1c1 	.word	0x0800f1c1
 800f148:	0800f1c1 	.word	0x0800f1c1
 800f14c:	0800f1a9 	.word	0x0800f1a9
 800f150:	0800f1c1 	.word	0x0800f1c1
 800f154:	0800f1c1 	.word	0x0800f1c1
 800f158:	0800f1c1 	.word	0x0800f1c1
 800f15c:	0800f1c1 	.word	0x0800f1c1
 800f160:	0800f1c1 	.word	0x0800f1c1
 800f164:	0800f1c1 	.word	0x0800f1c1
 800f168:	0800f1c1 	.word	0x0800f1c1
 800f16c:	0800f1b1 	.word	0x0800f1b1
 800f170:	0800f1c1 	.word	0x0800f1c1
 800f174:	0800f1c1 	.word	0x0800f1c1
 800f178:	0800f1c1 	.word	0x0800f1c1
 800f17c:	0800f1c1 	.word	0x0800f1c1
 800f180:	0800f1c1 	.word	0x0800f1c1
 800f184:	0800f1c1 	.word	0x0800f1c1
 800f188:	0800f1c1 	.word	0x0800f1c1
 800f18c:	0800f1b9 	.word	0x0800f1b9
 800f190:	2301      	movs	r3, #1
 800f192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f196:	e0bc      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f198:	2304      	movs	r3, #4
 800f19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f19e:	e0b8      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f1a0:	2308      	movs	r3, #8
 800f1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1a6:	e0b4      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f1a8:	2310      	movs	r3, #16
 800f1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ae:	e0b0      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f1b0:	2320      	movs	r3, #32
 800f1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1b6:	e0ac      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f1b8:	2340      	movs	r3, #64	; 0x40
 800f1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1be:	e0a8      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f1c0:	2380      	movs	r3, #128	; 0x80
 800f1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1c6:	e0a4      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4a8f      	ldr	r2, [pc, #572]	; (800f40c <UART_SetConfig+0x6a0>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d130      	bne.n	800f234 <UART_SetConfig+0x4c8>
 800f1d2:	4b8d      	ldr	r3, [pc, #564]	; (800f408 <UART_SetConfig+0x69c>)
 800f1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1d6:	f003 0307 	and.w	r3, r3, #7
 800f1da:	2b05      	cmp	r3, #5
 800f1dc:	d826      	bhi.n	800f22c <UART_SetConfig+0x4c0>
 800f1de:	a201      	add	r2, pc, #4	; (adr r2, 800f1e4 <UART_SetConfig+0x478>)
 800f1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e4:	0800f1fd 	.word	0x0800f1fd
 800f1e8:	0800f205 	.word	0x0800f205
 800f1ec:	0800f20d 	.word	0x0800f20d
 800f1f0:	0800f215 	.word	0x0800f215
 800f1f4:	0800f21d 	.word	0x0800f21d
 800f1f8:	0800f225 	.word	0x0800f225
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f202:	e086      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f204:	2304      	movs	r3, #4
 800f206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f20a:	e082      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f20c:	2308      	movs	r3, #8
 800f20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f212:	e07e      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f214:	2310      	movs	r3, #16
 800f216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f21a:	e07a      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f21c:	2320      	movs	r3, #32
 800f21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f222:	e076      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f224:	2340      	movs	r3, #64	; 0x40
 800f226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f22a:	e072      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f22c:	2380      	movs	r3, #128	; 0x80
 800f22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f232:	e06e      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4a75      	ldr	r2, [pc, #468]	; (800f410 <UART_SetConfig+0x6a4>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d130      	bne.n	800f2a0 <UART_SetConfig+0x534>
 800f23e:	4b72      	ldr	r3, [pc, #456]	; (800f408 <UART_SetConfig+0x69c>)
 800f240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f242:	f003 0307 	and.w	r3, r3, #7
 800f246:	2b05      	cmp	r3, #5
 800f248:	d826      	bhi.n	800f298 <UART_SetConfig+0x52c>
 800f24a:	a201      	add	r2, pc, #4	; (adr r2, 800f250 <UART_SetConfig+0x4e4>)
 800f24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f250:	0800f269 	.word	0x0800f269
 800f254:	0800f271 	.word	0x0800f271
 800f258:	0800f279 	.word	0x0800f279
 800f25c:	0800f281 	.word	0x0800f281
 800f260:	0800f289 	.word	0x0800f289
 800f264:	0800f291 	.word	0x0800f291
 800f268:	2300      	movs	r3, #0
 800f26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f26e:	e050      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f270:	2304      	movs	r3, #4
 800f272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f276:	e04c      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f278:	2308      	movs	r3, #8
 800f27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f27e:	e048      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f280:	2310      	movs	r3, #16
 800f282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f286:	e044      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f288:	2320      	movs	r3, #32
 800f28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f28e:	e040      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f290:	2340      	movs	r3, #64	; 0x40
 800f292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f296:	e03c      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f298:	2380      	movs	r3, #128	; 0x80
 800f29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f29e:	e038      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4a5b      	ldr	r2, [pc, #364]	; (800f414 <UART_SetConfig+0x6a8>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	d130      	bne.n	800f30c <UART_SetConfig+0x5a0>
 800f2aa:	4b57      	ldr	r3, [pc, #348]	; (800f408 <UART_SetConfig+0x69c>)
 800f2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2ae:	f003 0307 	and.w	r3, r3, #7
 800f2b2:	2b05      	cmp	r3, #5
 800f2b4:	d826      	bhi.n	800f304 <UART_SetConfig+0x598>
 800f2b6:	a201      	add	r2, pc, #4	; (adr r2, 800f2bc <UART_SetConfig+0x550>)
 800f2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2bc:	0800f2d5 	.word	0x0800f2d5
 800f2c0:	0800f2dd 	.word	0x0800f2dd
 800f2c4:	0800f2e5 	.word	0x0800f2e5
 800f2c8:	0800f2ed 	.word	0x0800f2ed
 800f2cc:	0800f2f5 	.word	0x0800f2f5
 800f2d0:	0800f2fd 	.word	0x0800f2fd
 800f2d4:	2302      	movs	r3, #2
 800f2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2da:	e01a      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f2dc:	2304      	movs	r3, #4
 800f2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2e2:	e016      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f2e4:	2308      	movs	r3, #8
 800f2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ea:	e012      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f2ec:	2310      	movs	r3, #16
 800f2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2f2:	e00e      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f2f4:	2320      	movs	r3, #32
 800f2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2fa:	e00a      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f2fc:	2340      	movs	r3, #64	; 0x40
 800f2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f302:	e006      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f304:	2380      	movs	r3, #128	; 0x80
 800f306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f30a:	e002      	b.n	800f312 <UART_SetConfig+0x5a6>
 800f30c:	2380      	movs	r3, #128	; 0x80
 800f30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	4a3f      	ldr	r2, [pc, #252]	; (800f414 <UART_SetConfig+0x6a8>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	f040 80f8 	bne.w	800f50e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f31e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f322:	2b20      	cmp	r3, #32
 800f324:	dc46      	bgt.n	800f3b4 <UART_SetConfig+0x648>
 800f326:	2b02      	cmp	r3, #2
 800f328:	f2c0 8082 	blt.w	800f430 <UART_SetConfig+0x6c4>
 800f32c:	3b02      	subs	r3, #2
 800f32e:	2b1e      	cmp	r3, #30
 800f330:	d87e      	bhi.n	800f430 <UART_SetConfig+0x6c4>
 800f332:	a201      	add	r2, pc, #4	; (adr r2, 800f338 <UART_SetConfig+0x5cc>)
 800f334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f338:	0800f3bb 	.word	0x0800f3bb
 800f33c:	0800f431 	.word	0x0800f431
 800f340:	0800f3c3 	.word	0x0800f3c3
 800f344:	0800f431 	.word	0x0800f431
 800f348:	0800f431 	.word	0x0800f431
 800f34c:	0800f431 	.word	0x0800f431
 800f350:	0800f3d3 	.word	0x0800f3d3
 800f354:	0800f431 	.word	0x0800f431
 800f358:	0800f431 	.word	0x0800f431
 800f35c:	0800f431 	.word	0x0800f431
 800f360:	0800f431 	.word	0x0800f431
 800f364:	0800f431 	.word	0x0800f431
 800f368:	0800f431 	.word	0x0800f431
 800f36c:	0800f431 	.word	0x0800f431
 800f370:	0800f3e3 	.word	0x0800f3e3
 800f374:	0800f431 	.word	0x0800f431
 800f378:	0800f431 	.word	0x0800f431
 800f37c:	0800f431 	.word	0x0800f431
 800f380:	0800f431 	.word	0x0800f431
 800f384:	0800f431 	.word	0x0800f431
 800f388:	0800f431 	.word	0x0800f431
 800f38c:	0800f431 	.word	0x0800f431
 800f390:	0800f431 	.word	0x0800f431
 800f394:	0800f431 	.word	0x0800f431
 800f398:	0800f431 	.word	0x0800f431
 800f39c:	0800f431 	.word	0x0800f431
 800f3a0:	0800f431 	.word	0x0800f431
 800f3a4:	0800f431 	.word	0x0800f431
 800f3a8:	0800f431 	.word	0x0800f431
 800f3ac:	0800f431 	.word	0x0800f431
 800f3b0:	0800f423 	.word	0x0800f423
 800f3b4:	2b40      	cmp	r3, #64	; 0x40
 800f3b6:	d037      	beq.n	800f428 <UART_SetConfig+0x6bc>
 800f3b8:	e03a      	b.n	800f430 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f3ba:	f7fc fe59 	bl	800c070 <HAL_RCCEx_GetD3PCLK1Freq>
 800f3be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3c0:	e03c      	b.n	800f43c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fc fe68 	bl	800c09c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3d0:	e034      	b.n	800f43c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3d2:	f107 0318 	add.w	r3, r7, #24
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fc ffb4 	bl	800c344 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3e0:	e02c      	b.n	800f43c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3e2:	4b09      	ldr	r3, [pc, #36]	; (800f408 <UART_SetConfig+0x69c>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f003 0320 	and.w	r3, r3, #32
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d016      	beq.n	800f41c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3ee:	4b06      	ldr	r3, [pc, #24]	; (800f408 <UART_SetConfig+0x69c>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	08db      	lsrs	r3, r3, #3
 800f3f4:	f003 0303 	and.w	r3, r3, #3
 800f3f8:	4a07      	ldr	r2, [pc, #28]	; (800f418 <UART_SetConfig+0x6ac>)
 800f3fa:	fa22 f303 	lsr.w	r3, r2, r3
 800f3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f400:	e01c      	b.n	800f43c <UART_SetConfig+0x6d0>
 800f402:	bf00      	nop
 800f404:	40011400 	.word	0x40011400
 800f408:	58024400 	.word	0x58024400
 800f40c:	40007800 	.word	0x40007800
 800f410:	40007c00 	.word	0x40007c00
 800f414:	58000c00 	.word	0x58000c00
 800f418:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f41c:	4b9d      	ldr	r3, [pc, #628]	; (800f694 <UART_SetConfig+0x928>)
 800f41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f420:	e00c      	b.n	800f43c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f422:	4b9d      	ldr	r3, [pc, #628]	; (800f698 <UART_SetConfig+0x92c>)
 800f424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f426:	e009      	b.n	800f43c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f42e:	e005      	b.n	800f43c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f430:	2300      	movs	r3, #0
 800f432:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f434:	2301      	movs	r3, #1
 800f436:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f43a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f43e:	2b00      	cmp	r3, #0
 800f440:	f000 81de 	beq.w	800f800 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f448:	4a94      	ldr	r2, [pc, #592]	; (800f69c <UART_SetConfig+0x930>)
 800f44a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f44e:	461a      	mov	r2, r3
 800f450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f452:	fbb3 f3f2 	udiv	r3, r3, r2
 800f456:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	685a      	ldr	r2, [r3, #4]
 800f45c:	4613      	mov	r3, r2
 800f45e:	005b      	lsls	r3, r3, #1
 800f460:	4413      	add	r3, r2
 800f462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f464:	429a      	cmp	r2, r3
 800f466:	d305      	bcc.n	800f474 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f46e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f470:	429a      	cmp	r2, r3
 800f472:	d903      	bls.n	800f47c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f474:	2301      	movs	r3, #1
 800f476:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f47a:	e1c1      	b.n	800f800 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f47e:	2200      	movs	r2, #0
 800f480:	60bb      	str	r3, [r7, #8]
 800f482:	60fa      	str	r2, [r7, #12]
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f488:	4a84      	ldr	r2, [pc, #528]	; (800f69c <UART_SetConfig+0x930>)
 800f48a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f48e:	b29b      	uxth	r3, r3
 800f490:	2200      	movs	r2, #0
 800f492:	603b      	str	r3, [r7, #0]
 800f494:	607a      	str	r2, [r7, #4]
 800f496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f49a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f49e:	f7f0 ff77 	bl	8000390 <__aeabi_uldivmod>
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	460b      	mov	r3, r1
 800f4a6:	4610      	mov	r0, r2
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	f04f 0200 	mov.w	r2, #0
 800f4ae:	f04f 0300 	mov.w	r3, #0
 800f4b2:	020b      	lsls	r3, r1, #8
 800f4b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f4b8:	0202      	lsls	r2, r0, #8
 800f4ba:	6979      	ldr	r1, [r7, #20]
 800f4bc:	6849      	ldr	r1, [r1, #4]
 800f4be:	0849      	lsrs	r1, r1, #1
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	460c      	mov	r4, r1
 800f4c4:	4605      	mov	r5, r0
 800f4c6:	eb12 0804 	adds.w	r8, r2, r4
 800f4ca:	eb43 0905 	adc.w	r9, r3, r5
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	469a      	mov	sl, r3
 800f4d6:	4693      	mov	fp, r2
 800f4d8:	4652      	mov	r2, sl
 800f4da:	465b      	mov	r3, fp
 800f4dc:	4640      	mov	r0, r8
 800f4de:	4649      	mov	r1, r9
 800f4e0:	f7f0 ff56 	bl	8000390 <__aeabi_uldivmod>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f4f2:	d308      	bcc.n	800f506 <UART_SetConfig+0x79a>
 800f4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4fa:	d204      	bcs.n	800f506 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f502:	60da      	str	r2, [r3, #12]
 800f504:	e17c      	b.n	800f800 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f506:	2301      	movs	r3, #1
 800f508:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f50c:	e178      	b.n	800f800 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	69db      	ldr	r3, [r3, #28]
 800f512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f516:	f040 80c5 	bne.w	800f6a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f51a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f51e:	2b20      	cmp	r3, #32
 800f520:	dc48      	bgt.n	800f5b4 <UART_SetConfig+0x848>
 800f522:	2b00      	cmp	r3, #0
 800f524:	db7b      	blt.n	800f61e <UART_SetConfig+0x8b2>
 800f526:	2b20      	cmp	r3, #32
 800f528:	d879      	bhi.n	800f61e <UART_SetConfig+0x8b2>
 800f52a:	a201      	add	r2, pc, #4	; (adr r2, 800f530 <UART_SetConfig+0x7c4>)
 800f52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f530:	0800f5bb 	.word	0x0800f5bb
 800f534:	0800f5c3 	.word	0x0800f5c3
 800f538:	0800f61f 	.word	0x0800f61f
 800f53c:	0800f61f 	.word	0x0800f61f
 800f540:	0800f5cb 	.word	0x0800f5cb
 800f544:	0800f61f 	.word	0x0800f61f
 800f548:	0800f61f 	.word	0x0800f61f
 800f54c:	0800f61f 	.word	0x0800f61f
 800f550:	0800f5db 	.word	0x0800f5db
 800f554:	0800f61f 	.word	0x0800f61f
 800f558:	0800f61f 	.word	0x0800f61f
 800f55c:	0800f61f 	.word	0x0800f61f
 800f560:	0800f61f 	.word	0x0800f61f
 800f564:	0800f61f 	.word	0x0800f61f
 800f568:	0800f61f 	.word	0x0800f61f
 800f56c:	0800f61f 	.word	0x0800f61f
 800f570:	0800f5eb 	.word	0x0800f5eb
 800f574:	0800f61f 	.word	0x0800f61f
 800f578:	0800f61f 	.word	0x0800f61f
 800f57c:	0800f61f 	.word	0x0800f61f
 800f580:	0800f61f 	.word	0x0800f61f
 800f584:	0800f61f 	.word	0x0800f61f
 800f588:	0800f61f 	.word	0x0800f61f
 800f58c:	0800f61f 	.word	0x0800f61f
 800f590:	0800f61f 	.word	0x0800f61f
 800f594:	0800f61f 	.word	0x0800f61f
 800f598:	0800f61f 	.word	0x0800f61f
 800f59c:	0800f61f 	.word	0x0800f61f
 800f5a0:	0800f61f 	.word	0x0800f61f
 800f5a4:	0800f61f 	.word	0x0800f61f
 800f5a8:	0800f61f 	.word	0x0800f61f
 800f5ac:	0800f61f 	.word	0x0800f61f
 800f5b0:	0800f611 	.word	0x0800f611
 800f5b4:	2b40      	cmp	r3, #64	; 0x40
 800f5b6:	d02e      	beq.n	800f616 <UART_SetConfig+0x8aa>
 800f5b8:	e031      	b.n	800f61e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5ba:	f7fb fde7 	bl	800b18c <HAL_RCC_GetPCLK1Freq>
 800f5be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5c0:	e033      	b.n	800f62a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5c2:	f7fb fdf9 	bl	800b1b8 <HAL_RCC_GetPCLK2Freq>
 800f5c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5c8:	e02f      	b.n	800f62a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fc fd64 	bl	800c09c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5d8:	e027      	b.n	800f62a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5da:	f107 0318 	add.w	r3, r7, #24
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7fc feb0 	bl	800c344 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5e8:	e01f      	b.n	800f62a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5ea:	4b2d      	ldr	r3, [pc, #180]	; (800f6a0 <UART_SetConfig+0x934>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f003 0320 	and.w	r3, r3, #32
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d009      	beq.n	800f60a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f5f6:	4b2a      	ldr	r3, [pc, #168]	; (800f6a0 <UART_SetConfig+0x934>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	08db      	lsrs	r3, r3, #3
 800f5fc:	f003 0303 	and.w	r3, r3, #3
 800f600:	4a24      	ldr	r2, [pc, #144]	; (800f694 <UART_SetConfig+0x928>)
 800f602:	fa22 f303 	lsr.w	r3, r2, r3
 800f606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f608:	e00f      	b.n	800f62a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f60a:	4b22      	ldr	r3, [pc, #136]	; (800f694 <UART_SetConfig+0x928>)
 800f60c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f60e:	e00c      	b.n	800f62a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f610:	4b21      	ldr	r3, [pc, #132]	; (800f698 <UART_SetConfig+0x92c>)
 800f612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f614:	e009      	b.n	800f62a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f61c:	e005      	b.n	800f62a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f61e:	2300      	movs	r3, #0
 800f620:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f622:	2301      	movs	r3, #1
 800f624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f62a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	f000 80e7 	beq.w	800f800 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f636:	4a19      	ldr	r2, [pc, #100]	; (800f69c <UART_SetConfig+0x930>)
 800f638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f63c:	461a      	mov	r2, r3
 800f63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f640:	fbb3 f3f2 	udiv	r3, r3, r2
 800f644:	005a      	lsls	r2, r3, #1
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	085b      	lsrs	r3, r3, #1
 800f64c:	441a      	add	r2, r3
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	fbb2 f3f3 	udiv	r3, r2, r3
 800f656:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65a:	2b0f      	cmp	r3, #15
 800f65c:	d916      	bls.n	800f68c <UART_SetConfig+0x920>
 800f65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f664:	d212      	bcs.n	800f68c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f668:	b29b      	uxth	r3, r3
 800f66a:	f023 030f 	bic.w	r3, r3, #15
 800f66e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f672:	085b      	lsrs	r3, r3, #1
 800f674:	b29b      	uxth	r3, r3
 800f676:	f003 0307 	and.w	r3, r3, #7
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f67e:	4313      	orrs	r3, r2
 800f680:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f688:	60da      	str	r2, [r3, #12]
 800f68a:	e0b9      	b.n	800f800 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f68c:	2301      	movs	r3, #1
 800f68e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f692:	e0b5      	b.n	800f800 <UART_SetConfig+0xa94>
 800f694:	03d09000 	.word	0x03d09000
 800f698:	003d0900 	.word	0x003d0900
 800f69c:	0801452c 	.word	0x0801452c
 800f6a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f6a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f6a8:	2b20      	cmp	r3, #32
 800f6aa:	dc49      	bgt.n	800f740 <UART_SetConfig+0x9d4>
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	db7c      	blt.n	800f7aa <UART_SetConfig+0xa3e>
 800f6b0:	2b20      	cmp	r3, #32
 800f6b2:	d87a      	bhi.n	800f7aa <UART_SetConfig+0xa3e>
 800f6b4:	a201      	add	r2, pc, #4	; (adr r2, 800f6bc <UART_SetConfig+0x950>)
 800f6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ba:	bf00      	nop
 800f6bc:	0800f747 	.word	0x0800f747
 800f6c0:	0800f74f 	.word	0x0800f74f
 800f6c4:	0800f7ab 	.word	0x0800f7ab
 800f6c8:	0800f7ab 	.word	0x0800f7ab
 800f6cc:	0800f757 	.word	0x0800f757
 800f6d0:	0800f7ab 	.word	0x0800f7ab
 800f6d4:	0800f7ab 	.word	0x0800f7ab
 800f6d8:	0800f7ab 	.word	0x0800f7ab
 800f6dc:	0800f767 	.word	0x0800f767
 800f6e0:	0800f7ab 	.word	0x0800f7ab
 800f6e4:	0800f7ab 	.word	0x0800f7ab
 800f6e8:	0800f7ab 	.word	0x0800f7ab
 800f6ec:	0800f7ab 	.word	0x0800f7ab
 800f6f0:	0800f7ab 	.word	0x0800f7ab
 800f6f4:	0800f7ab 	.word	0x0800f7ab
 800f6f8:	0800f7ab 	.word	0x0800f7ab
 800f6fc:	0800f777 	.word	0x0800f777
 800f700:	0800f7ab 	.word	0x0800f7ab
 800f704:	0800f7ab 	.word	0x0800f7ab
 800f708:	0800f7ab 	.word	0x0800f7ab
 800f70c:	0800f7ab 	.word	0x0800f7ab
 800f710:	0800f7ab 	.word	0x0800f7ab
 800f714:	0800f7ab 	.word	0x0800f7ab
 800f718:	0800f7ab 	.word	0x0800f7ab
 800f71c:	0800f7ab 	.word	0x0800f7ab
 800f720:	0800f7ab 	.word	0x0800f7ab
 800f724:	0800f7ab 	.word	0x0800f7ab
 800f728:	0800f7ab 	.word	0x0800f7ab
 800f72c:	0800f7ab 	.word	0x0800f7ab
 800f730:	0800f7ab 	.word	0x0800f7ab
 800f734:	0800f7ab 	.word	0x0800f7ab
 800f738:	0800f7ab 	.word	0x0800f7ab
 800f73c:	0800f79d 	.word	0x0800f79d
 800f740:	2b40      	cmp	r3, #64	; 0x40
 800f742:	d02e      	beq.n	800f7a2 <UART_SetConfig+0xa36>
 800f744:	e031      	b.n	800f7aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f746:	f7fb fd21 	bl	800b18c <HAL_RCC_GetPCLK1Freq>
 800f74a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f74c:	e033      	b.n	800f7b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f74e:	f7fb fd33 	bl	800b1b8 <HAL_RCC_GetPCLK2Freq>
 800f752:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f754:	e02f      	b.n	800f7b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7fc fc9e 	bl	800c09c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f764:	e027      	b.n	800f7b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f766:	f107 0318 	add.w	r3, r7, #24
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7fc fdea 	bl	800c344 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f770:	69fb      	ldr	r3, [r7, #28]
 800f772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f774:	e01f      	b.n	800f7b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f776:	4b2d      	ldr	r3, [pc, #180]	; (800f82c <UART_SetConfig+0xac0>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f003 0320 	and.w	r3, r3, #32
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d009      	beq.n	800f796 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f782:	4b2a      	ldr	r3, [pc, #168]	; (800f82c <UART_SetConfig+0xac0>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	08db      	lsrs	r3, r3, #3
 800f788:	f003 0303 	and.w	r3, r3, #3
 800f78c:	4a28      	ldr	r2, [pc, #160]	; (800f830 <UART_SetConfig+0xac4>)
 800f78e:	fa22 f303 	lsr.w	r3, r2, r3
 800f792:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f794:	e00f      	b.n	800f7b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f796:	4b26      	ldr	r3, [pc, #152]	; (800f830 <UART_SetConfig+0xac4>)
 800f798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f79a:	e00c      	b.n	800f7b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f79c:	4b25      	ldr	r3, [pc, #148]	; (800f834 <UART_SetConfig+0xac8>)
 800f79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7a0:	e009      	b.n	800f7b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f7a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7a8:	e005      	b.n	800f7b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f7b4:	bf00      	nop
    }

    if (pclk != 0U)
 800f7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d021      	beq.n	800f800 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c0:	4a1d      	ldr	r2, [pc, #116]	; (800f838 <UART_SetConfig+0xacc>)
 800f7c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	085b      	lsrs	r3, r3, #1
 800f7d4:	441a      	add	r2, r3
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e2:	2b0f      	cmp	r3, #15
 800f7e4:	d909      	bls.n	800f7fa <UART_SetConfig+0xa8e>
 800f7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7ec:	d205      	bcs.n	800f7fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f0:	b29a      	uxth	r2, r3
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	60da      	str	r2, [r3, #12]
 800f7f8:	e002      	b.n	800f800 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	2201      	movs	r2, #1
 800f804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	2201      	movs	r2, #1
 800f80c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	2200      	movs	r2, #0
 800f814:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	2200      	movs	r2, #0
 800f81a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f81c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f820:	4618      	mov	r0, r3
 800f822:	3748      	adds	r7, #72	; 0x48
 800f824:	46bd      	mov	sp, r7
 800f826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f82a:	bf00      	nop
 800f82c:	58024400 	.word	0x58024400
 800f830:	03d09000 	.word	0x03d09000
 800f834:	003d0900 	.word	0x003d0900
 800f838:	0801452c 	.word	0x0801452c

0800f83c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b083      	sub	sp, #12
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f848:	f003 0301 	and.w	r3, r3, #1
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00a      	beq.n	800f866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	430a      	orrs	r2, r1
 800f864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f86a:	f003 0302 	and.w	r3, r3, #2
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00a      	beq.n	800f888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	430a      	orrs	r2, r1
 800f886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f88c:	f003 0304 	and.w	r3, r3, #4
 800f890:	2b00      	cmp	r3, #0
 800f892:	d00a      	beq.n	800f8aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	430a      	orrs	r2, r1
 800f8a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8ae:	f003 0308 	and.w	r3, r3, #8
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d00a      	beq.n	800f8cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	430a      	orrs	r2, r1
 800f8ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8d0:	f003 0310 	and.w	r3, r3, #16
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d00a      	beq.n	800f8ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	430a      	orrs	r2, r1
 800f8ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8f2:	f003 0320 	and.w	r3, r3, #32
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00a      	beq.n	800f910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	689b      	ldr	r3, [r3, #8]
 800f900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	430a      	orrs	r2, r1
 800f90e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d01a      	beq.n	800f952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	430a      	orrs	r2, r1
 800f930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f93a:	d10a      	bne.n	800f952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	430a      	orrs	r2, r1
 800f950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d00a      	beq.n	800f974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	430a      	orrs	r2, r1
 800f972:	605a      	str	r2, [r3, #4]
  }
}
 800f974:	bf00      	nop
 800f976:	370c      	adds	r7, #12
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b086      	sub	sp, #24
 800f984:	af02      	add	r7, sp, #8
 800f986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2200      	movs	r2, #0
 800f98c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f990:	f7f7 f8be 	bl	8006b10 <HAL_GetTick>
 800f994:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f003 0308 	and.w	r3, r3, #8
 800f9a0:	2b08      	cmp	r3, #8
 800f9a2:	d10e      	bne.n	800f9c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f9a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f9a8:	9300      	str	r3, [sp, #0]
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f000 f82f 	bl	800fa16 <UART_WaitOnFlagUntilTimeout>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d001      	beq.n	800f9c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f9be:	2303      	movs	r3, #3
 800f9c0:	e025      	b.n	800fa0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f003 0304 	and.w	r3, r3, #4
 800f9cc:	2b04      	cmp	r3, #4
 800f9ce:	d10e      	bne.n	800f9ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f9d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f9d4:	9300      	str	r3, [sp, #0]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f000 f819 	bl	800fa16 <UART_WaitOnFlagUntilTimeout>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d001      	beq.n	800f9ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f9ea:	2303      	movs	r3, #3
 800f9ec:	e00f      	b.n	800fa0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2220      	movs	r2, #32
 800f9f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2220      	movs	r2, #32
 800f9fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2200      	movs	r2, #0
 800fa02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b09c      	sub	sp, #112	; 0x70
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	60f8      	str	r0, [r7, #12]
 800fa1e:	60b9      	str	r1, [r7, #8]
 800fa20:	603b      	str	r3, [r7, #0]
 800fa22:	4613      	mov	r3, r2
 800fa24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa26:	e0a9      	b.n	800fb7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa2e:	f000 80a5 	beq.w	800fb7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa32:	f7f7 f86d 	bl	8006b10 <HAL_GetTick>
 800fa36:	4602      	mov	r2, r0
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	1ad3      	subs	r3, r2, r3
 800fa3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d302      	bcc.n	800fa48 <UART_WaitOnFlagUntilTimeout+0x32>
 800fa42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d140      	bne.n	800faca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa50:	e853 3f00 	ldrex	r3, [r3]
 800fa54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fa56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fa5c:	667b      	str	r3, [r7, #100]	; 0x64
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	461a      	mov	r2, r3
 800fa64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa6e:	e841 2300 	strex	r3, r2, [r1]
 800fa72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fa74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d1e6      	bne.n	800fa48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	3308      	adds	r3, #8
 800fa80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa84:	e853 3f00 	ldrex	r3, [r3]
 800fa88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa8c:	f023 0301 	bic.w	r3, r3, #1
 800fa90:	663b      	str	r3, [r7, #96]	; 0x60
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3308      	adds	r3, #8
 800fa98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa9a:	64ba      	str	r2, [r7, #72]	; 0x48
 800fa9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800faa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800faa2:	e841 2300 	strex	r3, r2, [r1]
 800faa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800faa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d1e5      	bne.n	800fa7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2220      	movs	r2, #32
 800fab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2220      	movs	r2, #32
 800faba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2200      	movs	r2, #0
 800fac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800fac6:	2303      	movs	r3, #3
 800fac8:	e069      	b.n	800fb9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f003 0304 	and.w	r3, r3, #4
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d051      	beq.n	800fb7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	69db      	ldr	r3, [r3, #28]
 800fade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fae6:	d149      	bne.n	800fb7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800faf0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafa:	e853 3f00 	ldrex	r3, [r3]
 800fafe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fb06:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb10:	637b      	str	r3, [r7, #52]	; 0x34
 800fb12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb18:	e841 2300 	strex	r3, r2, [r1]
 800fb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d1e6      	bne.n	800faf2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	3308      	adds	r3, #8
 800fb2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	e853 3f00 	ldrex	r3, [r3]
 800fb32:	613b      	str	r3, [r7, #16]
   return(result);
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	f023 0301 	bic.w	r3, r3, #1
 800fb3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	3308      	adds	r3, #8
 800fb42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb44:	623a      	str	r2, [r7, #32]
 800fb46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb48:	69f9      	ldr	r1, [r7, #28]
 800fb4a:	6a3a      	ldr	r2, [r7, #32]
 800fb4c:	e841 2300 	strex	r3, r2, [r1]
 800fb50:	61bb      	str	r3, [r7, #24]
   return(result);
 800fb52:	69bb      	ldr	r3, [r7, #24]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d1e5      	bne.n	800fb24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	2220      	movs	r2, #32
 800fb5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2220      	movs	r2, #32
 800fb64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2220      	movs	r2, #32
 800fb6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2200      	movs	r2, #0
 800fb74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800fb78:	2303      	movs	r3, #3
 800fb7a:	e010      	b.n	800fb9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	69da      	ldr	r2, [r3, #28]
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	4013      	ands	r3, r2
 800fb86:	68ba      	ldr	r2, [r7, #8]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	bf0c      	ite	eq
 800fb8c:	2301      	moveq	r3, #1
 800fb8e:	2300      	movne	r3, #0
 800fb90:	b2db      	uxtb	r3, r3
 800fb92:	461a      	mov	r2, r3
 800fb94:	79fb      	ldrb	r3, [r7, #7]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	f43f af46 	beq.w	800fa28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fb9c:	2300      	movs	r3, #0
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3770      	adds	r7, #112	; 0x70
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
	...

0800fba8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b096      	sub	sp, #88	; 0x58
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	4613      	mov	r3, r2
 800fbb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	68ba      	ldr	r2, [r7, #8]
 800fbba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	88fa      	ldrh	r2, [r7, #6]
 800fbc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2222      	movs	r2, #34	; 0x22
 800fbd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d02c      	beq.n	800fc36 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbe0:	4a42      	ldr	r2, [pc, #264]	; (800fcec <UART_Start_Receive_DMA+0x144>)
 800fbe2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbe8:	4a41      	ldr	r2, [pc, #260]	; (800fcf0 <UART_Start_Receive_DMA+0x148>)
 800fbea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbf0:	4a40      	ldr	r2, [pc, #256]	; (800fcf4 <UART_Start_Receive_DMA+0x14c>)
 800fbf2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	3324      	adds	r3, #36	; 0x24
 800fc06:	4619      	mov	r1, r3
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	88fb      	ldrh	r3, [r7, #6]
 800fc10:	f7f7 fe30 	bl	8007874 <HAL_DMA_Start_IT>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00d      	beq.n	800fc36 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2210      	movs	r2, #16
 800fc1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2200      	movs	r2, #0
 800fc26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2220      	movs	r2, #32
 800fc2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800fc32:	2301      	movs	r3, #1
 800fc34:	e055      	b.n	800fce2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	691b      	ldr	r3, [r3, #16]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d018      	beq.n	800fc78 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc4e:	e853 3f00 	ldrex	r3, [r3]
 800fc52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc5a:	657b      	str	r3, [r7, #84]	; 0x54
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	461a      	mov	r2, r3
 800fc62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc64:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc66:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc6c:	e841 2300 	strex	r3, r2, [r1]
 800fc70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fc72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d1e6      	bne.n	800fc46 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	3308      	adds	r3, #8
 800fc7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc82:	e853 3f00 	ldrex	r3, [r3]
 800fc86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8a:	f043 0301 	orr.w	r3, r3, #1
 800fc8e:	653b      	str	r3, [r7, #80]	; 0x50
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	3308      	adds	r3, #8
 800fc96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc98:	637a      	str	r2, [r7, #52]	; 0x34
 800fc9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fc9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fca0:	e841 2300 	strex	r3, r2, [r1]
 800fca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d1e5      	bne.n	800fc78 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3308      	adds	r3, #8
 800fcb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	e853 3f00 	ldrex	r3, [r3]
 800fcba:	613b      	str	r3, [r7, #16]
   return(result);
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	3308      	adds	r3, #8
 800fcca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fccc:	623a      	str	r2, [r7, #32]
 800fcce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcd0:	69f9      	ldr	r1, [r7, #28]
 800fcd2:	6a3a      	ldr	r2, [r7, #32]
 800fcd4:	e841 2300 	strex	r3, r2, [r1]
 800fcd8:	61bb      	str	r3, [r7, #24]
   return(result);
 800fcda:	69bb      	ldr	r3, [r7, #24]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d1e5      	bne.n	800fcac <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800fce0:	2300      	movs	r3, #0
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3758      	adds	r7, #88	; 0x58
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	0800fefb 	.word	0x0800fefb
 800fcf0:	0801001d 	.word	0x0801001d
 800fcf4:	08010055 	.word	0x08010055

0800fcf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b08f      	sub	sp, #60	; 0x3c
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd06:	6a3b      	ldr	r3, [r7, #32]
 800fd08:	e853 3f00 	ldrex	r3, [r3]
 800fd0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd0e:	69fb      	ldr	r3, [r7, #28]
 800fd10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fd14:	637b      	str	r3, [r7, #52]	; 0x34
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd20:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd26:	e841 2300 	strex	r3, r2, [r1]
 800fd2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d1e6      	bne.n	800fd00 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	3308      	adds	r3, #8
 800fd38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	e853 3f00 	ldrex	r3, [r3]
 800fd40:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fd48:	633b      	str	r3, [r7, #48]	; 0x30
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	3308      	adds	r3, #8
 800fd50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd52:	61ba      	str	r2, [r7, #24]
 800fd54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd56:	6979      	ldr	r1, [r7, #20]
 800fd58:	69ba      	ldr	r2, [r7, #24]
 800fd5a:	e841 2300 	strex	r3, r2, [r1]
 800fd5e:	613b      	str	r3, [r7, #16]
   return(result);
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d1e5      	bne.n	800fd32 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2220      	movs	r2, #32
 800fd6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800fd6e:	bf00      	nop
 800fd70:	373c      	adds	r7, #60	; 0x3c
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
	...

0800fd7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b095      	sub	sp, #84	; 0x54
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd8c:	e853 3f00 	ldrex	r3, [r3]
 800fd90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	461a      	mov	r2, r3
 800fda0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fda2:	643b      	str	r3, [r7, #64]	; 0x40
 800fda4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fda6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fda8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fdaa:	e841 2300 	strex	r3, r2, [r1]
 800fdae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d1e6      	bne.n	800fd84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	3308      	adds	r3, #8
 800fdbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdbe:	6a3b      	ldr	r3, [r7, #32]
 800fdc0:	e853 3f00 	ldrex	r3, [r3]
 800fdc4:	61fb      	str	r3, [r7, #28]
   return(result);
 800fdc6:	69fa      	ldr	r2, [r7, #28]
 800fdc8:	4b1e      	ldr	r3, [pc, #120]	; (800fe44 <UART_EndRxTransfer+0xc8>)
 800fdca:	4013      	ands	r3, r2
 800fdcc:	64bb      	str	r3, [r7, #72]	; 0x48
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	3308      	adds	r3, #8
 800fdd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fdd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdde:	e841 2300 	strex	r3, r2, [r1]
 800fde2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d1e5      	bne.n	800fdb6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	d118      	bne.n	800fe24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	e853 3f00 	ldrex	r3, [r3]
 800fdfe:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	f023 0310 	bic.w	r3, r3, #16
 800fe06:	647b      	str	r3, [r7, #68]	; 0x44
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe10:	61bb      	str	r3, [r7, #24]
 800fe12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe14:	6979      	ldr	r1, [r7, #20]
 800fe16:	69ba      	ldr	r2, [r7, #24]
 800fe18:	e841 2300 	strex	r3, r2, [r1]
 800fe1c:	613b      	str	r3, [r7, #16]
   return(result);
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d1e6      	bne.n	800fdf2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2220      	movs	r2, #32
 800fe28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2200      	movs	r2, #0
 800fe36:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fe38:	bf00      	nop
 800fe3a:	3754      	adds	r7, #84	; 0x54
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr
 800fe44:	effffffe 	.word	0xeffffffe

0800fe48 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b090      	sub	sp, #64	; 0x40
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe54:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	69db      	ldr	r3, [r3, #28]
 800fe5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe5e:	d037      	beq.n	800fed0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800fe60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe62:	2200      	movs	r2, #0
 800fe64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fe68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	3308      	adds	r3, #8
 800fe6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe72:	e853 3f00 	ldrex	r3, [r3]
 800fe76:	623b      	str	r3, [r7, #32]
   return(result);
 800fe78:	6a3b      	ldr	r3, [r7, #32]
 800fe7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	3308      	adds	r3, #8
 800fe86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe88:	633a      	str	r2, [r7, #48]	; 0x30
 800fe8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe90:	e841 2300 	strex	r3, r2, [r1]
 800fe94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fe96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d1e5      	bne.n	800fe68 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	e853 3f00 	ldrex	r3, [r3]
 800fea8:	60fb      	str	r3, [r7, #12]
   return(result);
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800feb0:	637b      	str	r3, [r7, #52]	; 0x34
 800feb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	461a      	mov	r2, r3
 800feb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feba:	61fb      	str	r3, [r7, #28]
 800febc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800febe:	69b9      	ldr	r1, [r7, #24]
 800fec0:	69fa      	ldr	r2, [r7, #28]
 800fec2:	e841 2300 	strex	r3, r2, [r1]
 800fec6:	617b      	str	r3, [r7, #20]
   return(result);
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d1e6      	bne.n	800fe9c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fece:	e002      	b.n	800fed6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800fed0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fed2:	f7fe ff19 	bl	800ed08 <HAL_UART_TxCpltCallback>
}
 800fed6:	bf00      	nop
 800fed8:	3740      	adds	r7, #64	; 0x40
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}

0800fede <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fede:	b580      	push	{r7, lr}
 800fee0:	b084      	sub	sp, #16
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800feec:	68f8      	ldr	r0, [r7, #12]
 800feee:	f7fe ff15 	bl	800ed1c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fef2:	bf00      	nop
 800fef4:	3710      	adds	r7, #16
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b09c      	sub	sp, #112	; 0x70
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff06:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	69db      	ldr	r3, [r3, #28]
 800ff0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff10:	d071      	beq.n	800fff6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ff12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff14:	2200      	movs	r2, #0
 800ff16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff22:	e853 3f00 	ldrex	r3, [r3]
 800ff26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ff28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	461a      	mov	r2, r3
 800ff36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff38:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ff3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ff40:	e841 2300 	strex	r3, r2, [r1]
 800ff44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ff46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d1e6      	bne.n	800ff1a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	3308      	adds	r3, #8
 800ff52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff56:	e853 3f00 	ldrex	r3, [r3]
 800ff5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ff5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff5e:	f023 0301 	bic.w	r3, r3, #1
 800ff62:	667b      	str	r3, [r7, #100]	; 0x64
 800ff64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	3308      	adds	r3, #8
 800ff6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff6c:	647a      	str	r2, [r7, #68]	; 0x44
 800ff6e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff74:	e841 2300 	strex	r3, r2, [r1]
 800ff78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ff7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d1e5      	bne.n	800ff4c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	3308      	adds	r3, #8
 800ff86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8a:	e853 3f00 	ldrex	r3, [r3]
 800ff8e:	623b      	str	r3, [r7, #32]
   return(result);
 800ff90:	6a3b      	ldr	r3, [r7, #32]
 800ff92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff96:	663b      	str	r3, [r7, #96]	; 0x60
 800ff98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	3308      	adds	r3, #8
 800ff9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ffa0:	633a      	str	r2, [r7, #48]	; 0x30
 800ffa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ffa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffa8:	e841 2300 	strex	r3, r2, [r1]
 800ffac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ffae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d1e5      	bne.n	800ff80 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ffb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffb6:	2220      	movs	r2, #32
 800ffb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d118      	bne.n	800fff6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	e853 3f00 	ldrex	r3, [r3]
 800ffd0:	60fb      	str	r3, [r7, #12]
   return(result);
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f023 0310 	bic.w	r3, r3, #16
 800ffd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ffda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffe2:	61fb      	str	r3, [r7, #28]
 800ffe4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffe6:	69b9      	ldr	r1, [r7, #24]
 800ffe8:	69fa      	ldr	r2, [r7, #28]
 800ffea:	e841 2300 	strex	r3, r2, [r1]
 800ffee:	617b      	str	r3, [r7, #20]
   return(result);
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d1e6      	bne.n	800ffc4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d107      	bne.n	801000e <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010000:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010004:	4619      	mov	r1, r3
 8010006:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010008:	f7f3 f8c2 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801000c:	e002      	b.n	8010014 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 801000e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010010:	f7fe fe8e 	bl	800ed30 <HAL_UART_RxCpltCallback>
}
 8010014:	bf00      	nop
 8010016:	3770      	adds	r7, #112	; 0x70
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b084      	sub	sp, #16
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010028:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801002e:	2b01      	cmp	r3, #1
 8010030:	d109      	bne.n	8010046 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010038:	085b      	lsrs	r3, r3, #1
 801003a:	b29b      	uxth	r3, r3
 801003c:	4619      	mov	r1, r3
 801003e:	68f8      	ldr	r0, [r7, #12]
 8010040:	f7f3 f8a6 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010044:	e002      	b.n	801004c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8010046:	68f8      	ldr	r0, [r7, #12]
 8010048:	f7fe fe7c 	bl	800ed44 <HAL_UART_RxHalfCpltCallback>
}
 801004c:	bf00      	nop
 801004e:	3710      	adds	r7, #16
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b086      	sub	sp, #24
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010060:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010068:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010070:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	689b      	ldr	r3, [r3, #8]
 8010078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801007c:	2b80      	cmp	r3, #128	; 0x80
 801007e:	d109      	bne.n	8010094 <UART_DMAError+0x40>
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	2b21      	cmp	r3, #33	; 0x21
 8010084:	d106      	bne.n	8010094 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	2200      	movs	r2, #0
 801008a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801008e:	6978      	ldr	r0, [r7, #20]
 8010090:	f7ff fe32 	bl	800fcf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	689b      	ldr	r3, [r3, #8]
 801009a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801009e:	2b40      	cmp	r3, #64	; 0x40
 80100a0:	d109      	bne.n	80100b6 <UART_DMAError+0x62>
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2b22      	cmp	r3, #34	; 0x22
 80100a6:	d106      	bne.n	80100b6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	2200      	movs	r2, #0
 80100ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80100b0:	6978      	ldr	r0, [r7, #20]
 80100b2:	f7ff fe63 	bl	800fd7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100bc:	f043 0210 	orr.w	r2, r3, #16
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80100c6:	6978      	ldr	r0, [r7, #20]
 80100c8:	f7fe fe46 	bl	800ed58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80100cc:	bf00      	nop
 80100ce:	3718      	adds	r7, #24
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2200      	movs	r2, #0
 80100e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2200      	movs	r2, #0
 80100ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80100f2:	68f8      	ldr	r0, [r7, #12]
 80100f4:	f7fe fe30 	bl	800ed58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80100f8:	bf00      	nop
 80100fa:	3710      	adds	r7, #16
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b088      	sub	sp, #32
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	e853 3f00 	ldrex	r3, [r3]
 8010114:	60bb      	str	r3, [r7, #8]
   return(result);
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801011c:	61fb      	str	r3, [r7, #28]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	461a      	mov	r2, r3
 8010124:	69fb      	ldr	r3, [r7, #28]
 8010126:	61bb      	str	r3, [r7, #24]
 8010128:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801012a:	6979      	ldr	r1, [r7, #20]
 801012c:	69ba      	ldr	r2, [r7, #24]
 801012e:	e841 2300 	strex	r3, r2, [r1]
 8010132:	613b      	str	r3, [r7, #16]
   return(result);
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d1e6      	bne.n	8010108 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2220      	movs	r2, #32
 801013e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2200      	movs	r2, #0
 8010146:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f7fe fddd 	bl	800ed08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801014e:	bf00      	nop
 8010150:	3720      	adds	r7, #32
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010156:	b480      	push	{r7}
 8010158:	b083      	sub	sp, #12
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801015e:	bf00      	nop
 8010160:	370c      	adds	r7, #12
 8010162:	46bd      	mov	sp, r7
 8010164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010168:	4770      	bx	lr

0801016a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801016a:	b480      	push	{r7}
 801016c:	b083      	sub	sp, #12
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010172:	bf00      	nop
 8010174:	370c      	adds	r7, #12
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr

0801017e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801017e:	b480      	push	{r7}
 8010180:	b083      	sub	sp, #12
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010186:	bf00      	nop
 8010188:	370c      	adds	r7, #12
 801018a:	46bd      	mov	sp, r7
 801018c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010190:	4770      	bx	lr

08010192 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b084      	sub	sp, #16
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d101      	bne.n	80101a8 <HAL_UARTEx_EnableFifoMode+0x16>
 80101a4:	2302      	movs	r3, #2
 80101a6:	e02b      	b.n	8010200 <HAL_UARTEx_EnableFifoMode+0x6e>
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2201      	movs	r2, #1
 80101ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2224      	movs	r2, #36	; 0x24
 80101b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	f022 0201 	bic.w	r2, r2, #1
 80101ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80101d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80101de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	68fa      	ldr	r2, [r7, #12]
 80101e6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f000 f91f 	bl	801042c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2220      	movs	r2, #32
 80101f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2200      	movs	r2, #0
 80101fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101fe:	2300      	movs	r3, #0
}
 8010200:	4618      	mov	r0, r3
 8010202:	3710      	adds	r7, #16
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010216:	2b01      	cmp	r3, #1
 8010218:	d101      	bne.n	801021e <HAL_UARTEx_DisableFifoMode+0x16>
 801021a:	2302      	movs	r3, #2
 801021c:	e027      	b.n	801026e <HAL_UARTEx_DisableFifoMode+0x66>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2201      	movs	r2, #1
 8010222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2224      	movs	r2, #36	; 0x24
 801022a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	681a      	ldr	r2, [r3, #0]
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f022 0201 	bic.w	r2, r2, #1
 8010244:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801024c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2200      	movs	r2, #0
 8010252:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	68fa      	ldr	r2, [r7, #12]
 801025a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2220      	movs	r2, #32
 8010260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2200      	movs	r2, #0
 8010268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	3714      	adds	r7, #20
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr

0801027a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b084      	sub	sp, #16
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
 8010282:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801028a:	2b01      	cmp	r3, #1
 801028c:	d101      	bne.n	8010292 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801028e:	2302      	movs	r3, #2
 8010290:	e02d      	b.n	80102ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2201      	movs	r2, #1
 8010296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2224      	movs	r2, #36	; 0x24
 801029e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	681a      	ldr	r2, [r3, #0]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	f022 0201 	bic.w	r2, r2, #1
 80102b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	689b      	ldr	r3, [r3, #8]
 80102c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	683a      	ldr	r2, [r7, #0]
 80102ca:	430a      	orrs	r2, r1
 80102cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 f8ac 	bl	801042c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2220      	movs	r2, #32
 80102e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2200      	movs	r2, #0
 80102e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80102ec:	2300      	movs	r3, #0
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3710      	adds	r7, #16
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}

080102f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80102f6:	b580      	push	{r7, lr}
 80102f8:	b084      	sub	sp, #16
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	6078      	str	r0, [r7, #4]
 80102fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010306:	2b01      	cmp	r3, #1
 8010308:	d101      	bne.n	801030e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801030a:	2302      	movs	r3, #2
 801030c:	e02d      	b.n	801036a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	2201      	movs	r2, #1
 8010312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2224      	movs	r2, #36	; 0x24
 801031a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	f022 0201 	bic.w	r2, r2, #1
 8010334:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	689b      	ldr	r3, [r3, #8]
 801033c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	683a      	ldr	r2, [r7, #0]
 8010346:	430a      	orrs	r2, r1
 8010348:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f000 f86e 	bl	801042c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	68fa      	ldr	r2, [r7, #12]
 8010356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2220      	movs	r2, #32
 801035c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2200      	movs	r2, #0
 8010364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010368:	2300      	movs	r3, #0
}
 801036a:	4618      	mov	r0, r3
 801036c:	3710      	adds	r7, #16
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}

08010372 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010372:	b580      	push	{r7, lr}
 8010374:	b08c      	sub	sp, #48	; 0x30
 8010376:	af00      	add	r7, sp, #0
 8010378:	60f8      	str	r0, [r7, #12]
 801037a:	60b9      	str	r1, [r7, #8]
 801037c:	4613      	mov	r3, r2
 801037e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010386:	2b20      	cmp	r3, #32
 8010388:	d14a      	bne.n	8010420 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d002      	beq.n	8010396 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8010390:	88fb      	ldrh	r3, [r7, #6]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d101      	bne.n	801039a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010396:	2301      	movs	r3, #1
 8010398:	e043      	b.n	8010422 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	d101      	bne.n	80103a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 80103a4:	2302      	movs	r3, #2
 80103a6:	e03c      	b.n	8010422 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2201      	movs	r2, #1
 80103ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2201      	movs	r2, #1
 80103b4:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80103b6:	88fb      	ldrh	r3, [r7, #6]
 80103b8:	461a      	mov	r2, r3
 80103ba:	68b9      	ldr	r1, [r7, #8]
 80103bc:	68f8      	ldr	r0, [r7, #12]
 80103be:	f7ff fbf3 	bl	800fba8 <UART_Start_Receive_DMA>
 80103c2:	4603      	mov	r3, r0
 80103c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80103c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d124      	bne.n	801041a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d11d      	bne.n	8010414 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2210      	movs	r2, #16
 80103de:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	e853 3f00 	ldrex	r3, [r3]
 80103ec:	617b      	str	r3, [r7, #20]
   return(result);
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	f043 0310 	orr.w	r3, r3, #16
 80103f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	461a      	mov	r2, r3
 80103fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103fe:	627b      	str	r3, [r7, #36]	; 0x24
 8010400:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010402:	6a39      	ldr	r1, [r7, #32]
 8010404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010406:	e841 2300 	strex	r3, r2, [r1]
 801040a:	61fb      	str	r3, [r7, #28]
   return(result);
 801040c:	69fb      	ldr	r3, [r7, #28]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d1e6      	bne.n	80103e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8010412:	e002      	b.n	801041a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010414:	2301      	movs	r3, #1
 8010416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801041a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801041e:	e000      	b.n	8010422 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8010420:	2302      	movs	r3, #2
  }
}
 8010422:	4618      	mov	r0, r3
 8010424:	3730      	adds	r7, #48	; 0x30
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
	...

0801042c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801042c:	b480      	push	{r7}
 801042e:	b085      	sub	sp, #20
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010438:	2b00      	cmp	r3, #0
 801043a:	d108      	bne.n	801044e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2201      	movs	r2, #1
 8010440:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2201      	movs	r2, #1
 8010448:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801044c:	e031      	b.n	80104b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801044e:	2310      	movs	r3, #16
 8010450:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010452:	2310      	movs	r3, #16
 8010454:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	689b      	ldr	r3, [r3, #8]
 801045c:	0e5b      	lsrs	r3, r3, #25
 801045e:	b2db      	uxtb	r3, r3
 8010460:	f003 0307 	and.w	r3, r3, #7
 8010464:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	689b      	ldr	r3, [r3, #8]
 801046c:	0f5b      	lsrs	r3, r3, #29
 801046e:	b2db      	uxtb	r3, r3
 8010470:	f003 0307 	and.w	r3, r3, #7
 8010474:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010476:	7bbb      	ldrb	r3, [r7, #14]
 8010478:	7b3a      	ldrb	r2, [r7, #12]
 801047a:	4911      	ldr	r1, [pc, #68]	; (80104c0 <UARTEx_SetNbDataToProcess+0x94>)
 801047c:	5c8a      	ldrb	r2, [r1, r2]
 801047e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010482:	7b3a      	ldrb	r2, [r7, #12]
 8010484:	490f      	ldr	r1, [pc, #60]	; (80104c4 <UARTEx_SetNbDataToProcess+0x98>)
 8010486:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010488:	fb93 f3f2 	sdiv	r3, r3, r2
 801048c:	b29a      	uxth	r2, r3
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010494:	7bfb      	ldrb	r3, [r7, #15]
 8010496:	7b7a      	ldrb	r2, [r7, #13]
 8010498:	4909      	ldr	r1, [pc, #36]	; (80104c0 <UARTEx_SetNbDataToProcess+0x94>)
 801049a:	5c8a      	ldrb	r2, [r1, r2]
 801049c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80104a0:	7b7a      	ldrb	r2, [r7, #13]
 80104a2:	4908      	ldr	r1, [pc, #32]	; (80104c4 <UARTEx_SetNbDataToProcess+0x98>)
 80104a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80104a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80104aa:	b29a      	uxth	r2, r3
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80104b2:	bf00      	nop
 80104b4:	3714      	adds	r7, #20
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop
 80104c0:	08014544 	.word	0x08014544
 80104c4:	0801454c 	.word	0x0801454c

080104c8 <checkint>:
 80104c8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80104cc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80104d0:	429a      	cmp	r2, r3
 80104d2:	b570      	push	{r4, r5, r6, lr}
 80104d4:	dd2a      	ble.n	801052c <checkint+0x64>
 80104d6:	f240 4333 	movw	r3, #1075	; 0x433
 80104da:	429a      	cmp	r2, r3
 80104dc:	dc24      	bgt.n	8010528 <checkint+0x60>
 80104de:	1a9b      	subs	r3, r3, r2
 80104e0:	f1a3 0620 	sub.w	r6, r3, #32
 80104e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104e8:	fa02 f403 	lsl.w	r4, r2, r3
 80104ec:	fa02 f606 	lsl.w	r6, r2, r6
 80104f0:	f1c3 0520 	rsb	r5, r3, #32
 80104f4:	fa22 f505 	lsr.w	r5, r2, r5
 80104f8:	4334      	orrs	r4, r6
 80104fa:	432c      	orrs	r4, r5
 80104fc:	409a      	lsls	r2, r3
 80104fe:	ea20 0202 	bic.w	r2, r0, r2
 8010502:	ea21 0404 	bic.w	r4, r1, r4
 8010506:	4322      	orrs	r2, r4
 8010508:	f1a3 0420 	sub.w	r4, r3, #32
 801050c:	f1c3 0220 	rsb	r2, r3, #32
 8010510:	d10c      	bne.n	801052c <checkint+0x64>
 8010512:	40d8      	lsrs	r0, r3
 8010514:	fa01 f302 	lsl.w	r3, r1, r2
 8010518:	4318      	orrs	r0, r3
 801051a:	40e1      	lsrs	r1, r4
 801051c:	4308      	orrs	r0, r1
 801051e:	f000 0001 	and.w	r0, r0, #1
 8010522:	f1d0 0002 	rsbs	r0, r0, #2
 8010526:	bd70      	pop	{r4, r5, r6, pc}
 8010528:	2002      	movs	r0, #2
 801052a:	e7fc      	b.n	8010526 <checkint+0x5e>
 801052c:	2000      	movs	r0, #0
 801052e:	e7fa      	b.n	8010526 <checkint+0x5e>

08010530 <pow>:
 8010530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010534:	ee10 4a90 	vmov	r4, s1
 8010538:	ed2d 8b0a 	vpush	{d8-d12}
 801053c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8010540:	ee11 7a90 	vmov	r7, s3
 8010544:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8010548:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801054c:	429a      	cmp	r2, r3
 801054e:	ee10 6a10 	vmov	r6, s0
 8010552:	ee11 0a10 	vmov	r0, s2
 8010556:	b086      	sub	sp, #24
 8010558:	46d4      	mov	ip, sl
 801055a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801055e:	d806      	bhi.n	801056e <pow+0x3e>
 8010560:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8010564:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010568:	2b7f      	cmp	r3, #127	; 0x7f
 801056a:	f240 8156 	bls.w	801081a <pow+0x2ea>
 801056e:	1802      	adds	r2, r0, r0
 8010570:	eb47 0107 	adc.w	r1, r7, r7
 8010574:	f06f 0e01 	mvn.w	lr, #1
 8010578:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 801057c:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 8010580:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8010584:	45ce      	cmp	lr, r9
 8010586:	eb73 0808 	sbcs.w	r8, r3, r8
 801058a:	d23f      	bcs.n	801060c <pow+0xdc>
 801058c:	ea52 0301 	orrs.w	r3, r2, r1
 8010590:	f04f 0300 	mov.w	r3, #0
 8010594:	d10c      	bne.n	80105b0 <pow+0x80>
 8010596:	19b6      	adds	r6, r6, r6
 8010598:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801059c:	4164      	adcs	r4, r4
 801059e:	42b3      	cmp	r3, r6
 80105a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80105a4:	41a3      	sbcs	r3, r4
 80105a6:	f0c0 808c 	bcc.w	80106c2 <pow+0x192>
 80105aa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80105ae:	e028      	b.n	8010602 <pow+0xd2>
 80105b0:	4da3      	ldr	r5, [pc, #652]	; (8010840 <pow+0x310>)
 80105b2:	42ac      	cmp	r4, r5
 80105b4:	bf08      	it	eq
 80105b6:	429e      	cmpeq	r6, r3
 80105b8:	d107      	bne.n	80105ca <pow+0x9a>
 80105ba:	1800      	adds	r0, r0, r0
 80105bc:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80105c0:	417f      	adcs	r7, r7
 80105c2:	4283      	cmp	r3, r0
 80105c4:	4b9f      	ldr	r3, [pc, #636]	; (8010844 <pow+0x314>)
 80105c6:	41bb      	sbcs	r3, r7
 80105c8:	e7ed      	b.n	80105a6 <pow+0x76>
 80105ca:	19b6      	adds	r6, r6, r6
 80105cc:	489e      	ldr	r0, [pc, #632]	; (8010848 <pow+0x318>)
 80105ce:	4164      	adcs	r4, r4
 80105d0:	42b3      	cmp	r3, r6
 80105d2:	eb70 0504 	sbcs.w	r5, r0, r4
 80105d6:	d374      	bcc.n	80106c2 <pow+0x192>
 80105d8:	4281      	cmp	r1, r0
 80105da:	bf08      	it	eq
 80105dc:	429a      	cmpeq	r2, r3
 80105de:	d170      	bne.n	80106c2 <pow+0x192>
 80105e0:	4a9a      	ldr	r2, [pc, #616]	; (801084c <pow+0x31c>)
 80105e2:	4294      	cmp	r4, r2
 80105e4:	bf08      	it	eq
 80105e6:	429e      	cmpeq	r6, r3
 80105e8:	d0df      	beq.n	80105aa <pow+0x7a>
 80105ea:	4294      	cmp	r4, r2
 80105ec:	ea6f 0707 	mvn.w	r7, r7
 80105f0:	bf34      	ite	cc
 80105f2:	2400      	movcc	r4, #0
 80105f4:	2401      	movcs	r4, #1
 80105f6:	0fff      	lsrs	r7, r7, #31
 80105f8:	42bc      	cmp	r4, r7
 80105fa:	f040 81d9 	bne.w	80109b0 <pow+0x480>
 80105fe:	ee21 0b01 	vmul.f64	d0, d1, d1
 8010602:	b006      	add	sp, #24
 8010604:	ecbd 8b0a 	vpop	{d8-d12}
 8010608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801060c:	eb16 0806 	adds.w	r8, r6, r6
 8010610:	eb44 0904 	adc.w	r9, r4, r4
 8010614:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 8010618:	f169 0200 	sbc.w	r2, r9, #0
 801061c:	458e      	cmp	lr, r1
 801061e:	4193      	sbcs	r3, r2
 8010620:	d223      	bcs.n	801066a <pow+0x13a>
 8010622:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010626:	2c00      	cmp	r4, #0
 8010628:	da12      	bge.n	8010650 <pow+0x120>
 801062a:	4639      	mov	r1, r7
 801062c:	f7ff ff4c 	bl	80104c8 <checkint>
 8010630:	2801      	cmp	r0, #1
 8010632:	d10d      	bne.n	8010650 <pow+0x120>
 8010634:	eeb1 0b40 	vneg.f64	d0, d0
 8010638:	ea58 0309 	orrs.w	r3, r8, r9
 801063c:	d10a      	bne.n	8010654 <pow+0x124>
 801063e:	2f00      	cmp	r7, #0
 8010640:	dadf      	bge.n	8010602 <pow+0xd2>
 8010642:	b006      	add	sp, #24
 8010644:	ecbd 8b0a 	vpop	{d8-d12}
 8010648:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801064c:	f000 bfec 	b.w	8011628 <__math_divzero>
 8010650:	2000      	movs	r0, #0
 8010652:	e7f1      	b.n	8010638 <pow+0x108>
 8010654:	2f00      	cmp	r7, #0
 8010656:	dad4      	bge.n	8010602 <pow+0xd2>
 8010658:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801065c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010660:	ed8d 7b00 	vstr	d7, [sp]
 8010664:	ed9d 0b00 	vldr	d0, [sp]
 8010668:	e7cb      	b.n	8010602 <pow+0xd2>
 801066a:	2c00      	cmp	r4, #0
 801066c:	da2c      	bge.n	80106c8 <pow+0x198>
 801066e:	4639      	mov	r1, r7
 8010670:	f7ff ff2a 	bl	80104c8 <checkint>
 8010674:	b930      	cbnz	r0, 8010684 <pow+0x154>
 8010676:	b006      	add	sp, #24
 8010678:	ecbd 8b0a 	vpop	{d8-d12}
 801067c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010680:	f000 bfea 	b.w	8011658 <__math_invalid>
 8010684:	2801      	cmp	r0, #1
 8010686:	bf14      	ite	ne
 8010688:	2000      	movne	r0, #0
 801068a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801068e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010692:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8010696:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801069a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801069e:	2b7f      	cmp	r3, #127	; 0x7f
 80106a0:	d92d      	bls.n	80106fe <pow+0x1ce>
 80106a2:	4b67      	ldr	r3, [pc, #412]	; (8010840 <pow+0x310>)
 80106a4:	2000      	movs	r0, #0
 80106a6:	429c      	cmp	r4, r3
 80106a8:	bf08      	it	eq
 80106aa:	4286      	cmpeq	r6, r0
 80106ac:	f43f af7d 	beq.w	80105aa <pow+0x7a>
 80106b0:	f240 31bd 	movw	r1, #957	; 0x3bd
 80106b4:	428a      	cmp	r2, r1
 80106b6:	d80c      	bhi.n	80106d2 <pow+0x1a2>
 80106b8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80106bc:	42b0      	cmp	r0, r6
 80106be:	41a3      	sbcs	r3, r4
 80106c0:	d204      	bcs.n	80106cc <pow+0x19c>
 80106c2:	ee31 0b00 	vadd.f64	d0, d1, d0
 80106c6:	e79c      	b.n	8010602 <pow+0xd2>
 80106c8:	2000      	movs	r0, #0
 80106ca:	e7e4      	b.n	8010696 <pow+0x166>
 80106cc:	ee30 0b41 	vsub.f64	d0, d0, d1
 80106d0:	e797      	b.n	8010602 <pow+0xd2>
 80106d2:	2e01      	cmp	r6, #1
 80106d4:	eb74 0303 	sbcs.w	r3, r4, r3
 80106d8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80106dc:	bf34      	ite	cc
 80106de:	2301      	movcc	r3, #1
 80106e0:	2300      	movcs	r3, #0
 80106e2:	4295      	cmp	r5, r2
 80106e4:	bf8c      	ite	hi
 80106e6:	2500      	movhi	r5, #0
 80106e8:	2501      	movls	r5, #1
 80106ea:	42ab      	cmp	r3, r5
 80106ec:	f000 809d 	beq.w	801082a <pow+0x2fa>
 80106f0:	b006      	add	sp, #24
 80106f2:	ecbd 8b0a 	vpop	{d8-d12}
 80106f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106fa:	f000 bf8d 	b.w	8011618 <__math_oflow>
 80106fe:	f1bc 0f00 	cmp.w	ip, #0
 8010702:	d10b      	bne.n	801071c <pow+0x1ec>
 8010704:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010838 <pow+0x308>
 8010708:	ee20 7b07 	vmul.f64	d7, d0, d7
 801070c:	ec53 2b17 	vmov	r2, r3, d7
 8010710:	ee17 6a10 	vmov	r6, s14
 8010714:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010718:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 801071c:	4b4c      	ldr	r3, [pc, #304]	; (8010850 <pow+0x320>)
 801071e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010722:	4423      	add	r3, r4
 8010724:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010728:	1519      	asrs	r1, r3, #20
 801072a:	0d1b      	lsrs	r3, r3, #20
 801072c:	051b      	lsls	r3, r3, #20
 801072e:	eba4 0903 	sub.w	r9, r4, r3
 8010732:	4b48      	ldr	r3, [pc, #288]	; (8010854 <pow+0x324>)
 8010734:	ee04 1a10 	vmov	s8, r1
 8010738:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801073c:	f1b6 0800 	subs.w	r8, r6, #0
 8010740:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8010744:	ec49 8b15 	vmov	d5, r8, r9
 8010748:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801074c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010750:	ed93 7b00 	vldr	d7, [r3]
 8010754:	ed93 5b02 	vldr	d5, [r3, #8]
 8010758:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801075c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010760:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8010764:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010768:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801076c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010770:	ed93 5b04 	vldr	d5, [r3, #16]
 8010774:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010778:	ee37 7b02 	vadd.f64	d7, d7, d2
 801077c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010780:	ed93 4b08 	vldr	d4, [r3, #32]
 8010784:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010788:	eeb0 9b40 	vmov.f64	d9, d0
 801078c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010790:	ed93 5b06 	vldr	d5, [r3, #24]
 8010794:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010798:	ee26 bb00 	vmul.f64	d11, d6, d0
 801079c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80107a0:	eea6 5b04 	vfma.f64	d5, d6, d4
 80107a4:	ee3a ab48 	vsub.f64	d10, d10, d8
 80107a8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80107ac:	ee37 9b09 	vadd.f64	d9, d7, d9
 80107b0:	ee3a ab00 	vadd.f64	d10, d10, d0
 80107b4:	eea6 4b03 	vfma.f64	d4, d6, d3
 80107b8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80107bc:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80107c0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80107c4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80107c8:	eea0 4b03 	vfma.f64	d4, d0, d3
 80107cc:	eea0 5b04 	vfma.f64	d5, d0, d4
 80107d0:	eeab ab05 	vfma.f64	d10, d11, d5
 80107d4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80107d8:	ee21 7b06 	vmul.f64	d7, d1, d6
 80107dc:	ee17 3a90 	vmov	r3, s15
 80107e0:	eeb0 5b47 	vmov.f64	d5, d7
 80107e4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80107e8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80107ec:	18b2      	adds	r2, r6, r2
 80107ee:	2a3e      	cmp	r2, #62	; 0x3e
 80107f0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80107f4:	ee38 8b46 	vsub.f64	d8, d8, d6
 80107f8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80107fc:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8010800:	d92b      	bls.n	801085a <pow+0x32a>
 8010802:	2a00      	cmp	r2, #0
 8010804:	da0b      	bge.n	801081e <pow+0x2ee>
 8010806:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801080a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801080e:	2800      	cmp	r0, #0
 8010810:	f43f aef7 	beq.w	8010602 <pow+0xd2>
 8010814:	eeb1 0b40 	vneg.f64	d0, d0
 8010818:	e6f3      	b.n	8010602 <pow+0xd2>
 801081a:	2000      	movs	r0, #0
 801081c:	e77e      	b.n	801071c <pow+0x1ec>
 801081e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8010822:	d919      	bls.n	8010858 <pow+0x328>
 8010824:	2b00      	cmp	r3, #0
 8010826:	f6bf af63 	bge.w	80106f0 <pow+0x1c0>
 801082a:	b006      	add	sp, #24
 801082c:	ecbd 8b0a 	vpop	{d8-d12}
 8010830:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010834:	f000 bee8 	b.w	8011608 <__math_uflow>
 8010838:	00000000 	.word	0x00000000
 801083c:	43300000 	.word	0x43300000
 8010840:	3ff00000 	.word	0x3ff00000
 8010844:	fff00000 	.word	0xfff00000
 8010848:	ffe00000 	.word	0xffe00000
 801084c:	7fe00000 	.word	0x7fe00000
 8010850:	c0196aab 	.word	0xc0196aab
 8010854:	08014558 	.word	0x08014558
 8010858:	2600      	movs	r6, #0
 801085a:	495d      	ldr	r1, [pc, #372]	; (80109d0 <pow+0x4a0>)
 801085c:	ed91 4b02 	vldr	d4, [r1, #8]
 8010860:	ed91 3b00 	vldr	d3, [r1]
 8010864:	eeb0 6b44 	vmov.f64	d6, d4
 8010868:	eea7 6b03 	vfma.f64	d6, d7, d3
 801086c:	ee16 5a10 	vmov	r5, s12
 8010870:	ee36 6b44 	vsub.f64	d6, d6, d4
 8010874:	ed91 4b04 	vldr	d4, [r1, #16]
 8010878:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801087c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010880:	eeb0 0b47 	vmov.f64	d0, d7
 8010884:	ed91 7b06 	vldr	d7, [r1, #24]
 8010888:	18dc      	adds	r4, r3, r3
 801088a:	f104 030f 	add.w	r3, r4, #15
 801088e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010892:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010896:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801089a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801089e:	ee20 6b00 	vmul.f64	d6, d0, d0
 80108a2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80108a6:	ed91 5b08 	vldr	d5, [r1, #32]
 80108aa:	ee30 7b07 	vadd.f64	d7, d0, d7
 80108ae:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80108b2:	eea0 5b04 	vfma.f64	d5, d0, d4
 80108b6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80108ba:	eea6 7b05 	vfma.f64	d7, d6, d5
 80108be:	ee26 6b06 	vmul.f64	d6, d6, d6
 80108c2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80108c6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80108ca:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80108ce:	eea0 5b04 	vfma.f64	d5, d0, d4
 80108d2:	1940      	adds	r0, r0, r5
 80108d4:	2700      	movs	r7, #0
 80108d6:	eb17 020c 	adds.w	r2, r7, ip
 80108da:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80108de:	eea6 7b05 	vfma.f64	d7, d6, d5
 80108e2:	2e00      	cmp	r6, #0
 80108e4:	d15f      	bne.n	80109a6 <pow+0x476>
 80108e6:	42bd      	cmp	r5, r7
 80108e8:	db13      	blt.n	8010912 <pow+0x3e2>
 80108ea:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80108ee:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80108f2:	4610      	mov	r0, r2
 80108f4:	ec41 0b10 	vmov	d0, r0, r1
 80108f8:	eea7 0b00 	vfma.f64	d0, d7, d0
 80108fc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80109b8 <pow+0x488>
 8010900:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010904:	b006      	add	sp, #24
 8010906:	ecbd 8b0a 	vpop	{d8-d12}
 801090a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801090e:	f000 bebb 	b.w	8011688 <__math_check_oflow>
 8010912:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010916:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801091a:	4610      	mov	r0, r2
 801091c:	ec41 0b15 	vmov	d5, r0, r1
 8010920:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010924:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010928:	ee35 7b06 	vadd.f64	d7, d5, d6
 801092c:	eeb0 3bc7 	vabs.f64	d3, d7
 8010930:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8010934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010938:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80109c0 <pow+0x490>
 801093c:	d52a      	bpl.n	8010994 <pow+0x464>
 801093e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010942:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801094a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801094e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010952:	bf48      	it	mi
 8010954:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010958:	ee37 3b04 	vadd.f64	d3, d7, d4
 801095c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010960:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010964:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010968:	ee37 7b03 	vadd.f64	d7, d7, d3
 801096c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010970:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010978:	d104      	bne.n	8010984 <pow+0x454>
 801097a:	4632      	mov	r2, r6
 801097c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010980:	ec43 2b17 	vmov	d7, r2, r3
 8010984:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010988:	ed9d 6b02 	vldr	d6, [sp, #8]
 801098c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010990:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010994:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010998:	b006      	add	sp, #24
 801099a:	ecbd 8b0a 	vpop	{d8-d12}
 801099e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109a2:	f000 be68 	b.w	8011676 <__math_check_uflow>
 80109a6:	ec43 2b10 	vmov	d0, r2, r3
 80109aa:	eea7 0b00 	vfma.f64	d0, d7, d0
 80109ae:	e628      	b.n	8010602 <pow+0xd2>
 80109b0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80109c8 <pow+0x498>
 80109b4:	e625      	b.n	8010602 <pow+0xd2>
 80109b6:	bf00      	nop
 80109b8:	00000000 	.word	0x00000000
 80109bc:	7f000000 	.word	0x7f000000
 80109c0:	00000000 	.word	0x00000000
 80109c4:	00100000 	.word	0x00100000
	...
 80109d0:	08015740 	.word	0x08015740
 80109d4:	00000000 	.word	0x00000000

080109d8 <cos>:
 80109d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109da:	eeb0 7b40 	vmov.f64	d7, d0
 80109de:	ee17 3a90 	vmov	r3, s15
 80109e2:	4a21      	ldr	r2, [pc, #132]	; (8010a68 <cos+0x90>)
 80109e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80109e8:	4293      	cmp	r3, r2
 80109ea:	dc06      	bgt.n	80109fa <cos+0x22>
 80109ec:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8010a60 <cos+0x88>
 80109f0:	b005      	add	sp, #20
 80109f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80109f6:	f000 ba8f 	b.w	8010f18 <__kernel_cos>
 80109fa:	4a1c      	ldr	r2, [pc, #112]	; (8010a6c <cos+0x94>)
 80109fc:	4293      	cmp	r3, r2
 80109fe:	dd04      	ble.n	8010a0a <cos+0x32>
 8010a00:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010a04:	b005      	add	sp, #20
 8010a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a0a:	4668      	mov	r0, sp
 8010a0c:	f000 f89c 	bl	8010b48 <__ieee754_rem_pio2>
 8010a10:	f000 0003 	and.w	r0, r0, #3
 8010a14:	2801      	cmp	r0, #1
 8010a16:	d009      	beq.n	8010a2c <cos+0x54>
 8010a18:	2802      	cmp	r0, #2
 8010a1a:	d010      	beq.n	8010a3e <cos+0x66>
 8010a1c:	b9b0      	cbnz	r0, 8010a4c <cos+0x74>
 8010a1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a22:	ed9d 0b00 	vldr	d0, [sp]
 8010a26:	f000 fa77 	bl	8010f18 <__kernel_cos>
 8010a2a:	e7eb      	b.n	8010a04 <cos+0x2c>
 8010a2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a30:	ed9d 0b00 	vldr	d0, [sp]
 8010a34:	f000 fd74 	bl	8011520 <__kernel_sin>
 8010a38:	eeb1 0b40 	vneg.f64	d0, d0
 8010a3c:	e7e2      	b.n	8010a04 <cos+0x2c>
 8010a3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a42:	ed9d 0b00 	vldr	d0, [sp]
 8010a46:	f000 fa67 	bl	8010f18 <__kernel_cos>
 8010a4a:	e7f5      	b.n	8010a38 <cos+0x60>
 8010a4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a50:	ed9d 0b00 	vldr	d0, [sp]
 8010a54:	2001      	movs	r0, #1
 8010a56:	f000 fd63 	bl	8011520 <__kernel_sin>
 8010a5a:	e7d3      	b.n	8010a04 <cos+0x2c>
 8010a5c:	f3af 8000 	nop.w
	...
 8010a68:	3fe921fb 	.word	0x3fe921fb
 8010a6c:	7fefffff 	.word	0x7fefffff

08010a70 <sin>:
 8010a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a72:	eeb0 7b40 	vmov.f64	d7, d0
 8010a76:	ee17 3a90 	vmov	r3, s15
 8010a7a:	4a21      	ldr	r2, [pc, #132]	; (8010b00 <sin+0x90>)
 8010a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010a80:	4293      	cmp	r3, r2
 8010a82:	dc07      	bgt.n	8010a94 <sin+0x24>
 8010a84:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8010af8 <sin+0x88>
 8010a88:	2000      	movs	r0, #0
 8010a8a:	b005      	add	sp, #20
 8010a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a90:	f000 bd46 	b.w	8011520 <__kernel_sin>
 8010a94:	4a1b      	ldr	r2, [pc, #108]	; (8010b04 <sin+0x94>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	dd04      	ble.n	8010aa4 <sin+0x34>
 8010a9a:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010a9e:	b005      	add	sp, #20
 8010aa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8010aa4:	4668      	mov	r0, sp
 8010aa6:	f000 f84f 	bl	8010b48 <__ieee754_rem_pio2>
 8010aaa:	f000 0003 	and.w	r0, r0, #3
 8010aae:	2801      	cmp	r0, #1
 8010ab0:	d00a      	beq.n	8010ac8 <sin+0x58>
 8010ab2:	2802      	cmp	r0, #2
 8010ab4:	d00f      	beq.n	8010ad6 <sin+0x66>
 8010ab6:	b9c0      	cbnz	r0, 8010aea <sin+0x7a>
 8010ab8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010abc:	ed9d 0b00 	vldr	d0, [sp]
 8010ac0:	2001      	movs	r0, #1
 8010ac2:	f000 fd2d 	bl	8011520 <__kernel_sin>
 8010ac6:	e7ea      	b.n	8010a9e <sin+0x2e>
 8010ac8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010acc:	ed9d 0b00 	vldr	d0, [sp]
 8010ad0:	f000 fa22 	bl	8010f18 <__kernel_cos>
 8010ad4:	e7e3      	b.n	8010a9e <sin+0x2e>
 8010ad6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ada:	ed9d 0b00 	vldr	d0, [sp]
 8010ade:	2001      	movs	r0, #1
 8010ae0:	f000 fd1e 	bl	8011520 <__kernel_sin>
 8010ae4:	eeb1 0b40 	vneg.f64	d0, d0
 8010ae8:	e7d9      	b.n	8010a9e <sin+0x2e>
 8010aea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010aee:	ed9d 0b00 	vldr	d0, [sp]
 8010af2:	f000 fa11 	bl	8010f18 <__kernel_cos>
 8010af6:	e7f5      	b.n	8010ae4 <sin+0x74>
	...
 8010b00:	3fe921fb 	.word	0x3fe921fb
 8010b04:	7fefffff 	.word	0x7fefffff

08010b08 <atan2f>:
 8010b08:	f000 b962 	b.w	8010dd0 <__ieee754_atan2f>

08010b0c <sqrtf>:
 8010b0c:	b508      	push	{r3, lr}
 8010b0e:	ed2d 8b02 	vpush	{d8}
 8010b12:	eeb0 8a40 	vmov.f32	s16, s0
 8010b16:	f000 f9f9 	bl	8010f0c <__ieee754_sqrtf>
 8010b1a:	eeb4 8a48 	vcmp.f32	s16, s16
 8010b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b22:	d60c      	bvs.n	8010b3e <sqrtf+0x32>
 8010b24:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010b44 <sqrtf+0x38>
 8010b28:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b30:	d505      	bpl.n	8010b3e <sqrtf+0x32>
 8010b32:	f000 ffa3 	bl	8011a7c <__errno>
 8010b36:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010b3a:	2321      	movs	r3, #33	; 0x21
 8010b3c:	6003      	str	r3, [r0, #0]
 8010b3e:	ecbd 8b02 	vpop	{d8}
 8010b42:	bd08      	pop	{r3, pc}
 8010b44:	00000000 	.word	0x00000000

08010b48 <__ieee754_rem_pio2>:
 8010b48:	b570      	push	{r4, r5, r6, lr}
 8010b4a:	eeb0 7b40 	vmov.f64	d7, d0
 8010b4e:	ee17 5a90 	vmov	r5, s15
 8010b52:	4b99      	ldr	r3, [pc, #612]	; (8010db8 <__ieee754_rem_pio2+0x270>)
 8010b54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010b58:	429e      	cmp	r6, r3
 8010b5a:	b088      	sub	sp, #32
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	dc07      	bgt.n	8010b70 <__ieee754_rem_pio2+0x28>
 8010b60:	2200      	movs	r2, #0
 8010b62:	2300      	movs	r3, #0
 8010b64:	ed84 0b00 	vstr	d0, [r4]
 8010b68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010b6c:	2000      	movs	r0, #0
 8010b6e:	e01b      	b.n	8010ba8 <__ieee754_rem_pio2+0x60>
 8010b70:	4b92      	ldr	r3, [pc, #584]	; (8010dbc <__ieee754_rem_pio2+0x274>)
 8010b72:	429e      	cmp	r6, r3
 8010b74:	dc3b      	bgt.n	8010bee <__ieee754_rem_pio2+0xa6>
 8010b76:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8010b7a:	2d00      	cmp	r5, #0
 8010b7c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8010d78 <__ieee754_rem_pio2+0x230>
 8010b80:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8010b84:	dd19      	ble.n	8010bba <__ieee754_rem_pio2+0x72>
 8010b86:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010b8a:	429e      	cmp	r6, r3
 8010b8c:	d00e      	beq.n	8010bac <__ieee754_rem_pio2+0x64>
 8010b8e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8010d80 <__ieee754_rem_pio2+0x238>
 8010b92:	ee37 5b46 	vsub.f64	d5, d7, d6
 8010b96:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010b9a:	ed84 5b00 	vstr	d5, [r4]
 8010b9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010ba2:	ed84 7b02 	vstr	d7, [r4, #8]
 8010ba6:	2001      	movs	r0, #1
 8010ba8:	b008      	add	sp, #32
 8010baa:	bd70      	pop	{r4, r5, r6, pc}
 8010bac:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8010d88 <__ieee754_rem_pio2+0x240>
 8010bb0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010bb4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8010d90 <__ieee754_rem_pio2+0x248>
 8010bb8:	e7eb      	b.n	8010b92 <__ieee754_rem_pio2+0x4a>
 8010bba:	429e      	cmp	r6, r3
 8010bbc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010bc0:	d00e      	beq.n	8010be0 <__ieee754_rem_pio2+0x98>
 8010bc2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8010d80 <__ieee754_rem_pio2+0x238>
 8010bc6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8010bca:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010bce:	ed84 5b00 	vstr	d5, [r4]
 8010bd2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bda:	ed84 7b02 	vstr	d7, [r4, #8]
 8010bde:	e7e3      	b.n	8010ba8 <__ieee754_rem_pio2+0x60>
 8010be0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010d88 <__ieee754_rem_pio2+0x240>
 8010be4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010be8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010d90 <__ieee754_rem_pio2+0x248>
 8010bec:	e7eb      	b.n	8010bc6 <__ieee754_rem_pio2+0x7e>
 8010bee:	4b74      	ldr	r3, [pc, #464]	; (8010dc0 <__ieee754_rem_pio2+0x278>)
 8010bf0:	429e      	cmp	r6, r3
 8010bf2:	dc70      	bgt.n	8010cd6 <__ieee754_rem_pio2+0x18e>
 8010bf4:	f000 fd5c 	bl	80116b0 <fabs>
 8010bf8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010bfc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010d98 <__ieee754_rem_pio2+0x250>
 8010c00:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010c04:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010c08:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010c0c:	ee17 0a90 	vmov	r0, s15
 8010c10:	eeb1 4b45 	vneg.f64	d4, d5
 8010c14:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8010d78 <__ieee754_rem_pio2+0x230>
 8010c18:	eea5 0b47 	vfms.f64	d0, d5, d7
 8010c1c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8010d80 <__ieee754_rem_pio2+0x238>
 8010c20:	281f      	cmp	r0, #31
 8010c22:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010c26:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010c2a:	dc08      	bgt.n	8010c3e <__ieee754_rem_pio2+0xf6>
 8010c2c:	4b65      	ldr	r3, [pc, #404]	; (8010dc4 <__ieee754_rem_pio2+0x27c>)
 8010c2e:	1e42      	subs	r2, r0, #1
 8010c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c34:	42b3      	cmp	r3, r6
 8010c36:	d002      	beq.n	8010c3e <__ieee754_rem_pio2+0xf6>
 8010c38:	ed84 6b00 	vstr	d6, [r4]
 8010c3c:	e026      	b.n	8010c8c <__ieee754_rem_pio2+0x144>
 8010c3e:	ee16 3a90 	vmov	r3, s13
 8010c42:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010c46:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8010c4a:	2b10      	cmp	r3, #16
 8010c4c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010c50:	ddf2      	ble.n	8010c38 <__ieee754_rem_pio2+0xf0>
 8010c52:	eeb0 6b40 	vmov.f64	d6, d0
 8010c56:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010d88 <__ieee754_rem_pio2+0x240>
 8010c5a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8010d90 <__ieee754_rem_pio2+0x248>
 8010c5e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8010c62:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010c66:	eea4 0b07 	vfma.f64	d0, d4, d7
 8010c6a:	eeb0 7b40 	vmov.f64	d7, d0
 8010c6e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8010c72:	ee36 3b47 	vsub.f64	d3, d6, d7
 8010c76:	ee13 3a90 	vmov	r3, s7
 8010c7a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010c7e:	1ad3      	subs	r3, r2, r3
 8010c80:	2b31      	cmp	r3, #49	; 0x31
 8010c82:	dc17      	bgt.n	8010cb4 <__ieee754_rem_pio2+0x16c>
 8010c84:	eeb0 0b46 	vmov.f64	d0, d6
 8010c88:	ed84 3b00 	vstr	d3, [r4]
 8010c8c:	ed94 6b00 	vldr	d6, [r4]
 8010c90:	2d00      	cmp	r5, #0
 8010c92:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010c96:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010c9a:	ed84 0b02 	vstr	d0, [r4, #8]
 8010c9e:	da83      	bge.n	8010ba8 <__ieee754_rem_pio2+0x60>
 8010ca0:	eeb1 6b46 	vneg.f64	d6, d6
 8010ca4:	eeb1 0b40 	vneg.f64	d0, d0
 8010ca8:	ed84 6b00 	vstr	d6, [r4]
 8010cac:	ed84 0b02 	vstr	d0, [r4, #8]
 8010cb0:	4240      	negs	r0, r0
 8010cb2:	e779      	b.n	8010ba8 <__ieee754_rem_pio2+0x60>
 8010cb4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8010da0 <__ieee754_rem_pio2+0x258>
 8010cb8:	eeb0 0b46 	vmov.f64	d0, d6
 8010cbc:	eea4 0b03 	vfma.f64	d0, d4, d3
 8010cc0:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010cc4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8010da8 <__ieee754_rem_pio2+0x260>
 8010cc8:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010ccc:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8010cd0:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010cd4:	e7b0      	b.n	8010c38 <__ieee754_rem_pio2+0xf0>
 8010cd6:	4b3c      	ldr	r3, [pc, #240]	; (8010dc8 <__ieee754_rem_pio2+0x280>)
 8010cd8:	429e      	cmp	r6, r3
 8010cda:	dd06      	ble.n	8010cea <__ieee754_rem_pio2+0x1a2>
 8010cdc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010ce0:	ed80 7b02 	vstr	d7, [r0, #8]
 8010ce4:	ed80 7b00 	vstr	d7, [r0]
 8010ce8:	e740      	b.n	8010b6c <__ieee754_rem_pio2+0x24>
 8010cea:	1532      	asrs	r2, r6, #20
 8010cec:	ee10 0a10 	vmov	r0, s0
 8010cf0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010cf4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010cf8:	ec41 0b17 	vmov	d7, r0, r1
 8010cfc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010d00:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8010db0 <__ieee754_rem_pio2+0x268>
 8010d04:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010d08:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010d0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010d10:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010d14:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010d18:	a902      	add	r1, sp, #8
 8010d1a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010d1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010d22:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010d26:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010d2a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010d2e:	2603      	movs	r6, #3
 8010d30:	4608      	mov	r0, r1
 8010d32:	ed91 7b04 	vldr	d7, [r1, #16]
 8010d36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d3e:	4633      	mov	r3, r6
 8010d40:	f1a1 0108 	sub.w	r1, r1, #8
 8010d44:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8010d48:	d0f3      	beq.n	8010d32 <__ieee754_rem_pio2+0x1ea>
 8010d4a:	4920      	ldr	r1, [pc, #128]	; (8010dcc <__ieee754_rem_pio2+0x284>)
 8010d4c:	9101      	str	r1, [sp, #4]
 8010d4e:	2102      	movs	r1, #2
 8010d50:	9100      	str	r1, [sp, #0]
 8010d52:	4621      	mov	r1, r4
 8010d54:	f000 f94c 	bl	8010ff0 <__kernel_rem_pio2>
 8010d58:	2d00      	cmp	r5, #0
 8010d5a:	f6bf af25 	bge.w	8010ba8 <__ieee754_rem_pio2+0x60>
 8010d5e:	ed94 7b00 	vldr	d7, [r4]
 8010d62:	eeb1 7b47 	vneg.f64	d7, d7
 8010d66:	ed84 7b00 	vstr	d7, [r4]
 8010d6a:	ed94 7b02 	vldr	d7, [r4, #8]
 8010d6e:	eeb1 7b47 	vneg.f64	d7, d7
 8010d72:	ed84 7b02 	vstr	d7, [r4, #8]
 8010d76:	e79b      	b.n	8010cb0 <__ieee754_rem_pio2+0x168>
 8010d78:	54400000 	.word	0x54400000
 8010d7c:	3ff921fb 	.word	0x3ff921fb
 8010d80:	1a626331 	.word	0x1a626331
 8010d84:	3dd0b461 	.word	0x3dd0b461
 8010d88:	1a600000 	.word	0x1a600000
 8010d8c:	3dd0b461 	.word	0x3dd0b461
 8010d90:	2e037073 	.word	0x2e037073
 8010d94:	3ba3198a 	.word	0x3ba3198a
 8010d98:	6dc9c883 	.word	0x6dc9c883
 8010d9c:	3fe45f30 	.word	0x3fe45f30
 8010da0:	2e000000 	.word	0x2e000000
 8010da4:	3ba3198a 	.word	0x3ba3198a
 8010da8:	252049c1 	.word	0x252049c1
 8010dac:	397b839a 	.word	0x397b839a
 8010db0:	00000000 	.word	0x00000000
 8010db4:	41700000 	.word	0x41700000
 8010db8:	3fe921fb 	.word	0x3fe921fb
 8010dbc:	4002d97b 	.word	0x4002d97b
 8010dc0:	413921fb 	.word	0x413921fb
 8010dc4:	080155a0 	.word	0x080155a0
 8010dc8:	7fefffff 	.word	0x7fefffff
 8010dcc:	08015620 	.word	0x08015620

08010dd0 <__ieee754_atan2f>:
 8010dd0:	ee10 2a90 	vmov	r2, s1
 8010dd4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8010dd8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010ddc:	b510      	push	{r4, lr}
 8010dde:	eef0 7a40 	vmov.f32	s15, s0
 8010de2:	dc06      	bgt.n	8010df2 <__ieee754_atan2f+0x22>
 8010de4:	ee10 0a10 	vmov	r0, s0
 8010de8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010dec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010df0:	dd04      	ble.n	8010dfc <__ieee754_atan2f+0x2c>
 8010df2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010df6:	eeb0 0a67 	vmov.f32	s0, s15
 8010dfa:	bd10      	pop	{r4, pc}
 8010dfc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8010e00:	d103      	bne.n	8010e0a <__ieee754_atan2f+0x3a>
 8010e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e06:	f000 bd5d 	b.w	80118c4 <atanf>
 8010e0a:	1794      	asrs	r4, r2, #30
 8010e0c:	f004 0402 	and.w	r4, r4, #2
 8010e10:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010e14:	b93b      	cbnz	r3, 8010e26 <__ieee754_atan2f+0x56>
 8010e16:	2c02      	cmp	r4, #2
 8010e18:	d05c      	beq.n	8010ed4 <__ieee754_atan2f+0x104>
 8010e1a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010ee8 <__ieee754_atan2f+0x118>
 8010e1e:	2c03      	cmp	r4, #3
 8010e20:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8010e24:	e7e7      	b.n	8010df6 <__ieee754_atan2f+0x26>
 8010e26:	b939      	cbnz	r1, 8010e38 <__ieee754_atan2f+0x68>
 8010e28:	eddf 7a30 	vldr	s15, [pc, #192]	; 8010eec <__ieee754_atan2f+0x11c>
 8010e2c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8010ef0 <__ieee754_atan2f+0x120>
 8010e30:	2800      	cmp	r0, #0
 8010e32:	fe67 7a80 	vselge.f32	s15, s15, s0
 8010e36:	e7de      	b.n	8010df6 <__ieee754_atan2f+0x26>
 8010e38:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010e3c:	d110      	bne.n	8010e60 <__ieee754_atan2f+0x90>
 8010e3e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010e42:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010e46:	d107      	bne.n	8010e58 <__ieee754_atan2f+0x88>
 8010e48:	2c02      	cmp	r4, #2
 8010e4a:	d846      	bhi.n	8010eda <__ieee754_atan2f+0x10a>
 8010e4c:	4b29      	ldr	r3, [pc, #164]	; (8010ef4 <__ieee754_atan2f+0x124>)
 8010e4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010e52:	edd4 7a00 	vldr	s15, [r4]
 8010e56:	e7ce      	b.n	8010df6 <__ieee754_atan2f+0x26>
 8010e58:	2c02      	cmp	r4, #2
 8010e5a:	d841      	bhi.n	8010ee0 <__ieee754_atan2f+0x110>
 8010e5c:	4b26      	ldr	r3, [pc, #152]	; (8010ef8 <__ieee754_atan2f+0x128>)
 8010e5e:	e7f6      	b.n	8010e4e <__ieee754_atan2f+0x7e>
 8010e60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010e64:	d0e0      	beq.n	8010e28 <__ieee754_atan2f+0x58>
 8010e66:	1a5b      	subs	r3, r3, r1
 8010e68:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8010e6c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010e70:	da1a      	bge.n	8010ea8 <__ieee754_atan2f+0xd8>
 8010e72:	2a00      	cmp	r2, #0
 8010e74:	da01      	bge.n	8010e7a <__ieee754_atan2f+0xaa>
 8010e76:	313c      	adds	r1, #60	; 0x3c
 8010e78:	db19      	blt.n	8010eae <__ieee754_atan2f+0xde>
 8010e7a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010e7e:	f000 fdf5 	bl	8011a6c <fabsf>
 8010e82:	f000 fd1f 	bl	80118c4 <atanf>
 8010e86:	eef0 7a40 	vmov.f32	s15, s0
 8010e8a:	2c01      	cmp	r4, #1
 8010e8c:	d012      	beq.n	8010eb4 <__ieee754_atan2f+0xe4>
 8010e8e:	2c02      	cmp	r4, #2
 8010e90:	d017      	beq.n	8010ec2 <__ieee754_atan2f+0xf2>
 8010e92:	2c00      	cmp	r4, #0
 8010e94:	d0af      	beq.n	8010df6 <__ieee754_atan2f+0x26>
 8010e96:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8010efc <__ieee754_atan2f+0x12c>
 8010e9a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010e9e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8010f00 <__ieee754_atan2f+0x130>
 8010ea2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010ea6:	e7a6      	b.n	8010df6 <__ieee754_atan2f+0x26>
 8010ea8:	eddf 7a10 	vldr	s15, [pc, #64]	; 8010eec <__ieee754_atan2f+0x11c>
 8010eac:	e7ed      	b.n	8010e8a <__ieee754_atan2f+0xba>
 8010eae:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010f04 <__ieee754_atan2f+0x134>
 8010eb2:	e7ea      	b.n	8010e8a <__ieee754_atan2f+0xba>
 8010eb4:	ee17 3a90 	vmov	r3, s15
 8010eb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010ebc:	ee07 3a90 	vmov	s15, r3
 8010ec0:	e799      	b.n	8010df6 <__ieee754_atan2f+0x26>
 8010ec2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8010efc <__ieee754_atan2f+0x12c>
 8010ec6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010eca:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8010f00 <__ieee754_atan2f+0x130>
 8010ece:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010ed2:	e790      	b.n	8010df6 <__ieee754_atan2f+0x26>
 8010ed4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8010f00 <__ieee754_atan2f+0x130>
 8010ed8:	e78d      	b.n	8010df6 <__ieee754_atan2f+0x26>
 8010eda:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8010f08 <__ieee754_atan2f+0x138>
 8010ede:	e78a      	b.n	8010df6 <__ieee754_atan2f+0x26>
 8010ee0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010f04 <__ieee754_atan2f+0x134>
 8010ee4:	e787      	b.n	8010df6 <__ieee754_atan2f+0x26>
 8010ee6:	bf00      	nop
 8010ee8:	c0490fdb 	.word	0xc0490fdb
 8010eec:	3fc90fdb 	.word	0x3fc90fdb
 8010ef0:	bfc90fdb 	.word	0xbfc90fdb
 8010ef4:	08015728 	.word	0x08015728
 8010ef8:	08015734 	.word	0x08015734
 8010efc:	33bbbd2e 	.word	0x33bbbd2e
 8010f00:	40490fdb 	.word	0x40490fdb
 8010f04:	00000000 	.word	0x00000000
 8010f08:	3f490fdb 	.word	0x3f490fdb

08010f0c <__ieee754_sqrtf>:
 8010f0c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010f10:	4770      	bx	lr
 8010f12:	0000      	movs	r0, r0
 8010f14:	0000      	movs	r0, r0
	...

08010f18 <__kernel_cos>:
 8010f18:	ee10 1a90 	vmov	r1, s1
 8010f1c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010f20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010f24:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010f28:	da05      	bge.n	8010f36 <__kernel_cos+0x1e>
 8010f2a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010f2e:	ee17 3a90 	vmov	r3, s15
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d03d      	beq.n	8010fb2 <__kernel_cos+0x9a>
 8010f36:	ee20 3b00 	vmul.f64	d3, d0, d0
 8010f3a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010fb8 <__kernel_cos+0xa0>
 8010f3e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010fc0 <__kernel_cos+0xa8>
 8010f42:	eea3 6b07 	vfma.f64	d6, d3, d7
 8010f46:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010fc8 <__kernel_cos+0xb0>
 8010f4a:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010f4e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010fd0 <__kernel_cos+0xb8>
 8010f52:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010f56:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010fd8 <__kernel_cos+0xc0>
 8010f5a:	4b23      	ldr	r3, [pc, #140]	; (8010fe8 <__kernel_cos+0xd0>)
 8010f5c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010f60:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010fe0 <__kernel_cos+0xc8>
 8010f64:	4299      	cmp	r1, r3
 8010f66:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010f6a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010f6e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8010f72:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010f76:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8010f7a:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010f7e:	dc04      	bgt.n	8010f8a <__kernel_cos+0x72>
 8010f80:	ee37 6b46 	vsub.f64	d6, d7, d6
 8010f84:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010f88:	4770      	bx	lr
 8010f8a:	4b18      	ldr	r3, [pc, #96]	; (8010fec <__kernel_cos+0xd4>)
 8010f8c:	4299      	cmp	r1, r3
 8010f8e:	dc0d      	bgt.n	8010fac <__kernel_cos+0x94>
 8010f90:	2200      	movs	r2, #0
 8010f92:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010f96:	ec43 2b15 	vmov	d5, r2, r3
 8010f9a:	ee34 0b45 	vsub.f64	d0, d4, d5
 8010f9e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010fa2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010fa6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010faa:	4770      	bx	lr
 8010fac:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8010fb0:	e7f3      	b.n	8010f9a <__kernel_cos+0x82>
 8010fb2:	eeb0 0b44 	vmov.f64	d0, d4
 8010fb6:	4770      	bx	lr
 8010fb8:	be8838d4 	.word	0xbe8838d4
 8010fbc:	bda8fae9 	.word	0xbda8fae9
 8010fc0:	bdb4b1c4 	.word	0xbdb4b1c4
 8010fc4:	3e21ee9e 	.word	0x3e21ee9e
 8010fc8:	809c52ad 	.word	0x809c52ad
 8010fcc:	be927e4f 	.word	0xbe927e4f
 8010fd0:	19cb1590 	.word	0x19cb1590
 8010fd4:	3efa01a0 	.word	0x3efa01a0
 8010fd8:	16c15177 	.word	0x16c15177
 8010fdc:	bf56c16c 	.word	0xbf56c16c
 8010fe0:	5555554c 	.word	0x5555554c
 8010fe4:	3fa55555 	.word	0x3fa55555
 8010fe8:	3fd33332 	.word	0x3fd33332
 8010fec:	3fe90000 	.word	0x3fe90000

08010ff0 <__kernel_rem_pio2>:
 8010ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff4:	ed2d 8b06 	vpush	{d8-d10}
 8010ff8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8010ffc:	460f      	mov	r7, r1
 8010ffe:	9002      	str	r0, [sp, #8]
 8011000:	49c5      	ldr	r1, [pc, #788]	; (8011318 <__kernel_rem_pio2+0x328>)
 8011002:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8011004:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8011008:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801100c:	9301      	str	r3, [sp, #4]
 801100e:	f112 0f14 	cmn.w	r2, #20
 8011012:	bfa8      	it	ge
 8011014:	2018      	movge	r0, #24
 8011016:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 801101a:	bfb8      	it	lt
 801101c:	2000      	movlt	r0, #0
 801101e:	f06f 0417 	mvn.w	r4, #23
 8011022:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8011300 <__kernel_rem_pio2+0x310>
 8011026:	bfa4      	itt	ge
 8011028:	f1a2 0a03 	subge.w	sl, r2, #3
 801102c:	fb9a f0f0 	sdivge	r0, sl, r0
 8011030:	fb00 4404 	mla	r4, r0, r4, r4
 8011034:	1a46      	subs	r6, r0, r1
 8011036:	4414      	add	r4, r2
 8011038:	eb09 0c01 	add.w	ip, r9, r1
 801103c:	ad1a      	add	r5, sp, #104	; 0x68
 801103e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8011042:	2200      	movs	r2, #0
 8011044:	4562      	cmp	r2, ip
 8011046:	dd10      	ble.n	801106a <__kernel_rem_pio2+0x7a>
 8011048:	9a01      	ldr	r2, [sp, #4]
 801104a:	ab1a      	add	r3, sp, #104	; 0x68
 801104c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011050:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8011054:	f04f 0c00 	mov.w	ip, #0
 8011058:	45cc      	cmp	ip, r9
 801105a:	dc26      	bgt.n	80110aa <__kernel_rem_pio2+0xba>
 801105c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8011300 <__kernel_rem_pio2+0x310>
 8011060:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011064:	4616      	mov	r6, r2
 8011066:	2500      	movs	r5, #0
 8011068:	e015      	b.n	8011096 <__kernel_rem_pio2+0xa6>
 801106a:	42d6      	cmn	r6, r2
 801106c:	d409      	bmi.n	8011082 <__kernel_rem_pio2+0x92>
 801106e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8011072:	ee07 3a90 	vmov	s15, r3
 8011076:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801107a:	eca5 7b02 	vstmia	r5!, {d7}
 801107e:	3201      	adds	r2, #1
 8011080:	e7e0      	b.n	8011044 <__kernel_rem_pio2+0x54>
 8011082:	eeb0 7b46 	vmov.f64	d7, d6
 8011086:	e7f8      	b.n	801107a <__kernel_rem_pio2+0x8a>
 8011088:	ecb8 5b02 	vldmia	r8!, {d5}
 801108c:	ed96 6b00 	vldr	d6, [r6]
 8011090:	3501      	adds	r5, #1
 8011092:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011096:	428d      	cmp	r5, r1
 8011098:	f1a6 0608 	sub.w	r6, r6, #8
 801109c:	ddf4      	ble.n	8011088 <__kernel_rem_pio2+0x98>
 801109e:	ecaa 7b02 	vstmia	sl!, {d7}
 80110a2:	f10c 0c01 	add.w	ip, ip, #1
 80110a6:	3208      	adds	r2, #8
 80110a8:	e7d6      	b.n	8011058 <__kernel_rem_pio2+0x68>
 80110aa:	ab06      	add	r3, sp, #24
 80110ac:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8011308 <__kernel_rem_pio2+0x318>
 80110b0:	ed9f ab97 	vldr	d10, [pc, #604]	; 8011310 <__kernel_rem_pio2+0x320>
 80110b4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80110b8:	9303      	str	r3, [sp, #12]
 80110ba:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 80110be:	464d      	mov	r5, r9
 80110c0:	00eb      	lsls	r3, r5, #3
 80110c2:	9304      	str	r3, [sp, #16]
 80110c4:	ab92      	add	r3, sp, #584	; 0x248
 80110c6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80110ca:	f10d 0b18 	add.w	fp, sp, #24
 80110ce:	ab6a      	add	r3, sp, #424	; 0x1a8
 80110d0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80110d4:	465e      	mov	r6, fp
 80110d6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80110da:	4628      	mov	r0, r5
 80110dc:	2800      	cmp	r0, #0
 80110de:	f1a2 0208 	sub.w	r2, r2, #8
 80110e2:	dc4c      	bgt.n	801117e <__kernel_rem_pio2+0x18e>
 80110e4:	4620      	mov	r0, r4
 80110e6:	9105      	str	r1, [sp, #20]
 80110e8:	f000 fb62 	bl	80117b0 <scalbn>
 80110ec:	eeb0 8b40 	vmov.f64	d8, d0
 80110f0:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80110f4:	ee28 0b00 	vmul.f64	d0, d8, d0
 80110f8:	f000 fae6 	bl	80116c8 <floor>
 80110fc:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011100:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011104:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011108:	2c00      	cmp	r4, #0
 801110a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801110e:	ee17 8a90 	vmov	r8, s15
 8011112:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011116:	9905      	ldr	r1, [sp, #20]
 8011118:	dd43      	ble.n	80111a2 <__kernel_rem_pio2+0x1b2>
 801111a:	1e68      	subs	r0, r5, #1
 801111c:	ab06      	add	r3, sp, #24
 801111e:	f1c4 0c18 	rsb	ip, r4, #24
 8011122:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011126:	fa46 f20c 	asr.w	r2, r6, ip
 801112a:	4490      	add	r8, r2
 801112c:	fa02 f20c 	lsl.w	r2, r2, ip
 8011130:	1ab6      	subs	r6, r6, r2
 8011132:	f1c4 0217 	rsb	r2, r4, #23
 8011136:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801113a:	4116      	asrs	r6, r2
 801113c:	2e00      	cmp	r6, #0
 801113e:	dd3f      	ble.n	80111c0 <__kernel_rem_pio2+0x1d0>
 8011140:	f04f 0c00 	mov.w	ip, #0
 8011144:	f108 0801 	add.w	r8, r8, #1
 8011148:	4660      	mov	r0, ip
 801114a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801114e:	4565      	cmp	r5, ip
 8011150:	dc6e      	bgt.n	8011230 <__kernel_rem_pio2+0x240>
 8011152:	2c00      	cmp	r4, #0
 8011154:	dd04      	ble.n	8011160 <__kernel_rem_pio2+0x170>
 8011156:	2c01      	cmp	r4, #1
 8011158:	d07f      	beq.n	801125a <__kernel_rem_pio2+0x26a>
 801115a:	2c02      	cmp	r4, #2
 801115c:	f000 8087 	beq.w	801126e <__kernel_rem_pio2+0x27e>
 8011160:	2e02      	cmp	r6, #2
 8011162:	d12d      	bne.n	80111c0 <__kernel_rem_pio2+0x1d0>
 8011164:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011168:	ee30 8b48 	vsub.f64	d8, d0, d8
 801116c:	b340      	cbz	r0, 80111c0 <__kernel_rem_pio2+0x1d0>
 801116e:	4620      	mov	r0, r4
 8011170:	9105      	str	r1, [sp, #20]
 8011172:	f000 fb1d 	bl	80117b0 <scalbn>
 8011176:	9905      	ldr	r1, [sp, #20]
 8011178:	ee38 8b40 	vsub.f64	d8, d8, d0
 801117c:	e020      	b.n	80111c0 <__kernel_rem_pio2+0x1d0>
 801117e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011182:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011186:	3801      	subs	r0, #1
 8011188:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801118c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011190:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011194:	eca6 0a01 	vstmia	r6!, {s0}
 8011198:	ed92 0b00 	vldr	d0, [r2]
 801119c:	ee37 0b00 	vadd.f64	d0, d7, d0
 80111a0:	e79c      	b.n	80110dc <__kernel_rem_pio2+0xec>
 80111a2:	d105      	bne.n	80111b0 <__kernel_rem_pio2+0x1c0>
 80111a4:	1e6a      	subs	r2, r5, #1
 80111a6:	ab06      	add	r3, sp, #24
 80111a8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80111ac:	15f6      	asrs	r6, r6, #23
 80111ae:	e7c5      	b.n	801113c <__kernel_rem_pio2+0x14c>
 80111b0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80111b4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80111b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111bc:	da36      	bge.n	801122c <__kernel_rem_pio2+0x23c>
 80111be:	2600      	movs	r6, #0
 80111c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80111c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111c8:	f040 80aa 	bne.w	8011320 <__kernel_rem_pio2+0x330>
 80111cc:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80111d0:	4658      	mov	r0, fp
 80111d2:	2200      	movs	r2, #0
 80111d4:	4548      	cmp	r0, r9
 80111d6:	da52      	bge.n	801127e <__kernel_rem_pio2+0x28e>
 80111d8:	2a00      	cmp	r2, #0
 80111da:	f000 8081 	beq.w	80112e0 <__kernel_rem_pio2+0x2f0>
 80111de:	ab06      	add	r3, sp, #24
 80111e0:	3c18      	subs	r4, #24
 80111e2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	f000 8087 	beq.w	80112fa <__kernel_rem_pio2+0x30a>
 80111ec:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80111f0:	4620      	mov	r0, r4
 80111f2:	f000 fadd 	bl	80117b0 <scalbn>
 80111f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80111fa:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8011308 <__kernel_rem_pio2+0x318>
 80111fe:	a96a      	add	r1, sp, #424	; 0x1a8
 8011200:	f103 0208 	add.w	r2, r3, #8
 8011204:	1888      	adds	r0, r1, r2
 8011206:	4659      	mov	r1, fp
 8011208:	2900      	cmp	r1, #0
 801120a:	f280 80b7 	bge.w	801137c <__kernel_rem_pio2+0x38c>
 801120e:	4659      	mov	r1, fp
 8011210:	2900      	cmp	r1, #0
 8011212:	f2c0 80d5 	blt.w	80113c0 <__kernel_rem_pio2+0x3d0>
 8011216:	a86a      	add	r0, sp, #424	; 0x1a8
 8011218:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801121c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8011300 <__kernel_rem_pio2+0x310>
 8011220:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801131c <__kernel_rem_pio2+0x32c>
 8011224:	2400      	movs	r4, #0
 8011226:	ebab 0001 	sub.w	r0, fp, r1
 801122a:	e0be      	b.n	80113aa <__kernel_rem_pio2+0x3ba>
 801122c:	2602      	movs	r6, #2
 801122e:	e787      	b.n	8011140 <__kernel_rem_pio2+0x150>
 8011230:	f8db 2000 	ldr.w	r2, [fp]
 8011234:	b958      	cbnz	r0, 801124e <__kernel_rem_pio2+0x25e>
 8011236:	b122      	cbz	r2, 8011242 <__kernel_rem_pio2+0x252>
 8011238:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801123c:	f8cb 2000 	str.w	r2, [fp]
 8011240:	2201      	movs	r2, #1
 8011242:	f10c 0c01 	add.w	ip, ip, #1
 8011246:	f10b 0b04 	add.w	fp, fp, #4
 801124a:	4610      	mov	r0, r2
 801124c:	e77f      	b.n	801114e <__kernel_rem_pio2+0x15e>
 801124e:	ebae 0202 	sub.w	r2, lr, r2
 8011252:	f8cb 2000 	str.w	r2, [fp]
 8011256:	4602      	mov	r2, r0
 8011258:	e7f3      	b.n	8011242 <__kernel_rem_pio2+0x252>
 801125a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801125e:	ab06      	add	r3, sp, #24
 8011260:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011264:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011268:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801126c:	e778      	b.n	8011160 <__kernel_rem_pio2+0x170>
 801126e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011272:	ab06      	add	r3, sp, #24
 8011274:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011278:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801127c:	e7f4      	b.n	8011268 <__kernel_rem_pio2+0x278>
 801127e:	ab06      	add	r3, sp, #24
 8011280:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011284:	3801      	subs	r0, #1
 8011286:	431a      	orrs	r2, r3
 8011288:	e7a4      	b.n	80111d4 <__kernel_rem_pio2+0x1e4>
 801128a:	f10c 0c01 	add.w	ip, ip, #1
 801128e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8011292:	2800      	cmp	r0, #0
 8011294:	d0f9      	beq.n	801128a <__kernel_rem_pio2+0x29a>
 8011296:	9b04      	ldr	r3, [sp, #16]
 8011298:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801129c:	eb0d 0203 	add.w	r2, sp, r3
 80112a0:	9b01      	ldr	r3, [sp, #4]
 80112a2:	18e8      	adds	r0, r5, r3
 80112a4:	ab1a      	add	r3, sp, #104	; 0x68
 80112a6:	1c6e      	adds	r6, r5, #1
 80112a8:	3a98      	subs	r2, #152	; 0x98
 80112aa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80112ae:	4465      	add	r5, ip
 80112b0:	42b5      	cmp	r5, r6
 80112b2:	f6ff af05 	blt.w	80110c0 <__kernel_rem_pio2+0xd0>
 80112b6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 80112ba:	f8dd e008 	ldr.w	lr, [sp, #8]
 80112be:	ee07 3a90 	vmov	s15, r3
 80112c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80112c6:	f04f 0c00 	mov.w	ip, #0
 80112ca:	eca0 7b02 	vstmia	r0!, {d7}
 80112ce:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011300 <__kernel_rem_pio2+0x310>
 80112d2:	4680      	mov	r8, r0
 80112d4:	458c      	cmp	ip, r1
 80112d6:	dd07      	ble.n	80112e8 <__kernel_rem_pio2+0x2f8>
 80112d8:	eca2 7b02 	vstmia	r2!, {d7}
 80112dc:	3601      	adds	r6, #1
 80112de:	e7e7      	b.n	80112b0 <__kernel_rem_pio2+0x2c0>
 80112e0:	9a03      	ldr	r2, [sp, #12]
 80112e2:	f04f 0c01 	mov.w	ip, #1
 80112e6:	e7d2      	b.n	801128e <__kernel_rem_pio2+0x29e>
 80112e8:	ecbe 5b02 	vldmia	lr!, {d5}
 80112ec:	ed38 6b02 	vldmdb	r8!, {d6}
 80112f0:	f10c 0c01 	add.w	ip, ip, #1
 80112f4:	eea5 7b06 	vfma.f64	d7, d5, d6
 80112f8:	e7ec      	b.n	80112d4 <__kernel_rem_pio2+0x2e4>
 80112fa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80112fe:	e76e      	b.n	80111de <__kernel_rem_pio2+0x1ee>
	...
 801130c:	3e700000 	.word	0x3e700000
 8011310:	00000000 	.word	0x00000000
 8011314:	41700000 	.word	0x41700000
 8011318:	08015ff0 	.word	0x08015ff0
 801131c:	08015fb0 	.word	0x08015fb0
 8011320:	4260      	negs	r0, r4
 8011322:	eeb0 0b48 	vmov.f64	d0, d8
 8011326:	f000 fa43 	bl	80117b0 <scalbn>
 801132a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011508 <__kernel_rem_pio2+0x518>
 801132e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011336:	db18      	blt.n	801136a <__kernel_rem_pio2+0x37a>
 8011338:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011510 <__kernel_rem_pio2+0x520>
 801133c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011340:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011344:	aa06      	add	r2, sp, #24
 8011346:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801134a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801134e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011352:	f105 0b01 	add.w	fp, r5, #1
 8011356:	ee10 3a10 	vmov	r3, s0
 801135a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801135e:	ee17 3a10 	vmov	r3, s14
 8011362:	3418      	adds	r4, #24
 8011364:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8011368:	e740      	b.n	80111ec <__kernel_rem_pio2+0x1fc>
 801136a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801136e:	aa06      	add	r2, sp, #24
 8011370:	ee10 3a10 	vmov	r3, s0
 8011374:	46ab      	mov	fp, r5
 8011376:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801137a:	e737      	b.n	80111ec <__kernel_rem_pio2+0x1fc>
 801137c:	ac06      	add	r4, sp, #24
 801137e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8011382:	9401      	str	r4, [sp, #4]
 8011384:	ee07 4a90 	vmov	s15, r4
 8011388:	3901      	subs	r1, #1
 801138a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801138e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011392:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011396:	ed20 7b02 	vstmdb	r0!, {d7}
 801139a:	e735      	b.n	8011208 <__kernel_rem_pio2+0x218>
 801139c:	ecbc 5b02 	vldmia	ip!, {d5}
 80113a0:	ecb5 6b02 	vldmia	r5!, {d6}
 80113a4:	3401      	adds	r4, #1
 80113a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80113aa:	454c      	cmp	r4, r9
 80113ac:	dc01      	bgt.n	80113b2 <__kernel_rem_pio2+0x3c2>
 80113ae:	4284      	cmp	r4, r0
 80113b0:	ddf4      	ble.n	801139c <__kernel_rem_pio2+0x3ac>
 80113b2:	ac42      	add	r4, sp, #264	; 0x108
 80113b4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80113b8:	ed80 7b00 	vstr	d7, [r0]
 80113bc:	3901      	subs	r1, #1
 80113be:	e727      	b.n	8011210 <__kernel_rem_pio2+0x220>
 80113c0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80113c2:	2902      	cmp	r1, #2
 80113c4:	dc0a      	bgt.n	80113dc <__kernel_rem_pio2+0x3ec>
 80113c6:	2900      	cmp	r1, #0
 80113c8:	dc2c      	bgt.n	8011424 <__kernel_rem_pio2+0x434>
 80113ca:	d045      	beq.n	8011458 <__kernel_rem_pio2+0x468>
 80113cc:	f008 0007 	and.w	r0, r8, #7
 80113d0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80113d4:	ecbd 8b06 	vpop	{d8-d10}
 80113d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113dc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80113de:	2a03      	cmp	r2, #3
 80113e0:	d1f4      	bne.n	80113cc <__kernel_rem_pio2+0x3dc>
 80113e2:	aa42      	add	r2, sp, #264	; 0x108
 80113e4:	4413      	add	r3, r2
 80113e6:	461a      	mov	r2, r3
 80113e8:	4619      	mov	r1, r3
 80113ea:	4658      	mov	r0, fp
 80113ec:	2800      	cmp	r0, #0
 80113ee:	f1a1 0108 	sub.w	r1, r1, #8
 80113f2:	dc54      	bgt.n	801149e <__kernel_rem_pio2+0x4ae>
 80113f4:	4659      	mov	r1, fp
 80113f6:	2901      	cmp	r1, #1
 80113f8:	f1a2 0208 	sub.w	r2, r2, #8
 80113fc:	dc5f      	bgt.n	80114be <__kernel_rem_pio2+0x4ce>
 80113fe:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011518 <__kernel_rem_pio2+0x528>
 8011402:	3308      	adds	r3, #8
 8011404:	f1bb 0f01 	cmp.w	fp, #1
 8011408:	dc69      	bgt.n	80114de <__kernel_rem_pio2+0x4ee>
 801140a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801140e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8011412:	2e00      	cmp	r6, #0
 8011414:	d16a      	bne.n	80114ec <__kernel_rem_pio2+0x4fc>
 8011416:	ed87 5b00 	vstr	d5, [r7]
 801141a:	ed87 6b02 	vstr	d6, [r7, #8]
 801141e:	ed87 7b04 	vstr	d7, [r7, #16]
 8011422:	e7d3      	b.n	80113cc <__kernel_rem_pio2+0x3dc>
 8011424:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011518 <__kernel_rem_pio2+0x528>
 8011428:	ab42      	add	r3, sp, #264	; 0x108
 801142a:	441a      	add	r2, r3
 801142c:	465b      	mov	r3, fp
 801142e:	2b00      	cmp	r3, #0
 8011430:	da26      	bge.n	8011480 <__kernel_rem_pio2+0x490>
 8011432:	b35e      	cbz	r6, 801148c <__kernel_rem_pio2+0x49c>
 8011434:	eeb1 7b46 	vneg.f64	d7, d6
 8011438:	ed87 7b00 	vstr	d7, [r7]
 801143c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8011440:	aa44      	add	r2, sp, #272	; 0x110
 8011442:	2301      	movs	r3, #1
 8011444:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011448:	459b      	cmp	fp, r3
 801144a:	da22      	bge.n	8011492 <__kernel_rem_pio2+0x4a2>
 801144c:	b10e      	cbz	r6, 8011452 <__kernel_rem_pio2+0x462>
 801144e:	eeb1 7b47 	vneg.f64	d7, d7
 8011452:	ed87 7b02 	vstr	d7, [r7, #8]
 8011456:	e7b9      	b.n	80113cc <__kernel_rem_pio2+0x3dc>
 8011458:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011518 <__kernel_rem_pio2+0x528>
 801145c:	ab42      	add	r3, sp, #264	; 0x108
 801145e:	441a      	add	r2, r3
 8011460:	f1bb 0f00 	cmp.w	fp, #0
 8011464:	da05      	bge.n	8011472 <__kernel_rem_pio2+0x482>
 8011466:	b10e      	cbz	r6, 801146c <__kernel_rem_pio2+0x47c>
 8011468:	eeb1 7b47 	vneg.f64	d7, d7
 801146c:	ed87 7b00 	vstr	d7, [r7]
 8011470:	e7ac      	b.n	80113cc <__kernel_rem_pio2+0x3dc>
 8011472:	ed32 6b02 	vldmdb	r2!, {d6}
 8011476:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801147a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801147e:	e7ef      	b.n	8011460 <__kernel_rem_pio2+0x470>
 8011480:	ed32 7b02 	vldmdb	r2!, {d7}
 8011484:	3b01      	subs	r3, #1
 8011486:	ee36 6b07 	vadd.f64	d6, d6, d7
 801148a:	e7d0      	b.n	801142e <__kernel_rem_pio2+0x43e>
 801148c:	eeb0 7b46 	vmov.f64	d7, d6
 8011490:	e7d2      	b.n	8011438 <__kernel_rem_pio2+0x448>
 8011492:	ecb2 6b02 	vldmia	r2!, {d6}
 8011496:	3301      	adds	r3, #1
 8011498:	ee37 7b06 	vadd.f64	d7, d7, d6
 801149c:	e7d4      	b.n	8011448 <__kernel_rem_pio2+0x458>
 801149e:	ed91 7b00 	vldr	d7, [r1]
 80114a2:	ed91 5b02 	vldr	d5, [r1, #8]
 80114a6:	3801      	subs	r0, #1
 80114a8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80114ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80114b0:	ed81 6b00 	vstr	d6, [r1]
 80114b4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80114b8:	ed81 7b02 	vstr	d7, [r1, #8]
 80114bc:	e796      	b.n	80113ec <__kernel_rem_pio2+0x3fc>
 80114be:	ed92 7b00 	vldr	d7, [r2]
 80114c2:	ed92 5b02 	vldr	d5, [r2, #8]
 80114c6:	3901      	subs	r1, #1
 80114c8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80114cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80114d0:	ed82 6b00 	vstr	d6, [r2]
 80114d4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80114d8:	ed82 7b02 	vstr	d7, [r2, #8]
 80114dc:	e78b      	b.n	80113f6 <__kernel_rem_pio2+0x406>
 80114de:	ed33 6b02 	vldmdb	r3!, {d6}
 80114e2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80114e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80114ea:	e78b      	b.n	8011404 <__kernel_rem_pio2+0x414>
 80114ec:	eeb1 5b45 	vneg.f64	d5, d5
 80114f0:	eeb1 6b46 	vneg.f64	d6, d6
 80114f4:	ed87 5b00 	vstr	d5, [r7]
 80114f8:	eeb1 7b47 	vneg.f64	d7, d7
 80114fc:	ed87 6b02 	vstr	d6, [r7, #8]
 8011500:	e78d      	b.n	801141e <__kernel_rem_pio2+0x42e>
 8011502:	bf00      	nop
 8011504:	f3af 8000 	nop.w
 8011508:	00000000 	.word	0x00000000
 801150c:	41700000 	.word	0x41700000
 8011510:	00000000 	.word	0x00000000
 8011514:	3e700000 	.word	0x3e700000
	...

08011520 <__kernel_sin>:
 8011520:	ee10 3a90 	vmov	r3, s1
 8011524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011528:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801152c:	da04      	bge.n	8011538 <__kernel_sin+0x18>
 801152e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011532:	ee17 3a90 	vmov	r3, s15
 8011536:	b35b      	cbz	r3, 8011590 <__kernel_sin+0x70>
 8011538:	ee20 6b00 	vmul.f64	d6, d0, d0
 801153c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011540:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011598 <__kernel_sin+0x78>
 8011544:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80115a0 <__kernel_sin+0x80>
 8011548:	eea6 4b07 	vfma.f64	d4, d6, d7
 801154c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80115a8 <__kernel_sin+0x88>
 8011550:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011554:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80115b0 <__kernel_sin+0x90>
 8011558:	eea7 4b06 	vfma.f64	d4, d7, d6
 801155c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80115b8 <__kernel_sin+0x98>
 8011560:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011564:	b930      	cbnz	r0, 8011574 <__kernel_sin+0x54>
 8011566:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80115c0 <__kernel_sin+0xa0>
 801156a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801156e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011572:	4770      	bx	lr
 8011574:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011578:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801157c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011580:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011584:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80115c8 <__kernel_sin+0xa8>
 8011588:	eea5 1b07 	vfma.f64	d1, d5, d7
 801158c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop
 8011594:	f3af 8000 	nop.w
 8011598:	5acfd57c 	.word	0x5acfd57c
 801159c:	3de5d93a 	.word	0x3de5d93a
 80115a0:	8a2b9ceb 	.word	0x8a2b9ceb
 80115a4:	be5ae5e6 	.word	0xbe5ae5e6
 80115a8:	57b1fe7d 	.word	0x57b1fe7d
 80115ac:	3ec71de3 	.word	0x3ec71de3
 80115b0:	19c161d5 	.word	0x19c161d5
 80115b4:	bf2a01a0 	.word	0xbf2a01a0
 80115b8:	1110f8a6 	.word	0x1110f8a6
 80115bc:	3f811111 	.word	0x3f811111
 80115c0:	55555549 	.word	0x55555549
 80115c4:	bfc55555 	.word	0xbfc55555
 80115c8:	55555549 	.word	0x55555549
 80115cc:	3fc55555 	.word	0x3fc55555

080115d0 <with_errno>:
 80115d0:	b513      	push	{r0, r1, r4, lr}
 80115d2:	4604      	mov	r4, r0
 80115d4:	ed8d 0b00 	vstr	d0, [sp]
 80115d8:	f000 fa50 	bl	8011a7c <__errno>
 80115dc:	ed9d 0b00 	vldr	d0, [sp]
 80115e0:	6004      	str	r4, [r0, #0]
 80115e2:	b002      	add	sp, #8
 80115e4:	bd10      	pop	{r4, pc}

080115e6 <xflow>:
 80115e6:	b082      	sub	sp, #8
 80115e8:	b158      	cbz	r0, 8011602 <xflow+0x1c>
 80115ea:	eeb1 7b40 	vneg.f64	d7, d0
 80115ee:	ed8d 7b00 	vstr	d7, [sp]
 80115f2:	ed9d 7b00 	vldr	d7, [sp]
 80115f6:	2022      	movs	r0, #34	; 0x22
 80115f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80115fc:	b002      	add	sp, #8
 80115fe:	f7ff bfe7 	b.w	80115d0 <with_errno>
 8011602:	eeb0 7b40 	vmov.f64	d7, d0
 8011606:	e7f2      	b.n	80115ee <xflow+0x8>

08011608 <__math_uflow>:
 8011608:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011610 <__math_uflow+0x8>
 801160c:	f7ff bfeb 	b.w	80115e6 <xflow>
 8011610:	00000000 	.word	0x00000000
 8011614:	10000000 	.word	0x10000000

08011618 <__math_oflow>:
 8011618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011620 <__math_oflow+0x8>
 801161c:	f7ff bfe3 	b.w	80115e6 <xflow>
 8011620:	00000000 	.word	0x00000000
 8011624:	70000000 	.word	0x70000000

08011628 <__math_divzero>:
 8011628:	b082      	sub	sp, #8
 801162a:	2800      	cmp	r0, #0
 801162c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011630:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011634:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011638:	ed8d 7b00 	vstr	d7, [sp]
 801163c:	ed9d 0b00 	vldr	d0, [sp]
 8011640:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011650 <__math_divzero+0x28>
 8011644:	2022      	movs	r0, #34	; 0x22
 8011646:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801164a:	b002      	add	sp, #8
 801164c:	f7ff bfc0 	b.w	80115d0 <with_errno>
	...

08011658 <__math_invalid>:
 8011658:	eeb0 7b40 	vmov.f64	d7, d0
 801165c:	eeb4 7b47 	vcmp.f64	d7, d7
 8011660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011664:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011668:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801166c:	d602      	bvs.n	8011674 <__math_invalid+0x1c>
 801166e:	2021      	movs	r0, #33	; 0x21
 8011670:	f7ff bfae 	b.w	80115d0 <with_errno>
 8011674:	4770      	bx	lr

08011676 <__math_check_uflow>:
 8011676:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801167e:	d102      	bne.n	8011686 <__math_check_uflow+0x10>
 8011680:	2022      	movs	r0, #34	; 0x22
 8011682:	f7ff bfa5 	b.w	80115d0 <with_errno>
 8011686:	4770      	bx	lr

08011688 <__math_check_oflow>:
 8011688:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80116a8 <__math_check_oflow+0x20>
 801168c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011690:	eeb4 7b46 	vcmp.f64	d7, d6
 8011694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011698:	dd02      	ble.n	80116a0 <__math_check_oflow+0x18>
 801169a:	2022      	movs	r0, #34	; 0x22
 801169c:	f7ff bf98 	b.w	80115d0 <with_errno>
 80116a0:	4770      	bx	lr
 80116a2:	bf00      	nop
 80116a4:	f3af 8000 	nop.w
 80116a8:	ffffffff 	.word	0xffffffff
 80116ac:	7fefffff 	.word	0x7fefffff

080116b0 <fabs>:
 80116b0:	ec51 0b10 	vmov	r0, r1, d0
 80116b4:	ee10 2a10 	vmov	r2, s0
 80116b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80116bc:	ec43 2b10 	vmov	d0, r2, r3
 80116c0:	4770      	bx	lr
 80116c2:	0000      	movs	r0, r0
 80116c4:	0000      	movs	r0, r0
	...

080116c8 <floor>:
 80116c8:	ee10 1a90 	vmov	r1, s1
 80116cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80116d0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80116d4:	2b13      	cmp	r3, #19
 80116d6:	b530      	push	{r4, r5, lr}
 80116d8:	ee10 0a10 	vmov	r0, s0
 80116dc:	ee10 5a10 	vmov	r5, s0
 80116e0:	dc31      	bgt.n	8011746 <floor+0x7e>
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	da15      	bge.n	8011712 <floor+0x4a>
 80116e6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80117a0 <floor+0xd8>
 80116ea:	ee30 0b07 	vadd.f64	d0, d0, d7
 80116ee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80116f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116f6:	dd07      	ble.n	8011708 <floor+0x40>
 80116f8:	2900      	cmp	r1, #0
 80116fa:	da4e      	bge.n	801179a <floor+0xd2>
 80116fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011700:	4318      	orrs	r0, r3
 8011702:	d001      	beq.n	8011708 <floor+0x40>
 8011704:	4928      	ldr	r1, [pc, #160]	; (80117a8 <floor+0xe0>)
 8011706:	2000      	movs	r0, #0
 8011708:	460b      	mov	r3, r1
 801170a:	4602      	mov	r2, r0
 801170c:	ec43 2b10 	vmov	d0, r2, r3
 8011710:	e020      	b.n	8011754 <floor+0x8c>
 8011712:	4a26      	ldr	r2, [pc, #152]	; (80117ac <floor+0xe4>)
 8011714:	411a      	asrs	r2, r3
 8011716:	ea01 0402 	and.w	r4, r1, r2
 801171a:	4304      	orrs	r4, r0
 801171c:	d01a      	beq.n	8011754 <floor+0x8c>
 801171e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80117a0 <floor+0xd8>
 8011722:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011726:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801172e:	ddeb      	ble.n	8011708 <floor+0x40>
 8011730:	2900      	cmp	r1, #0
 8011732:	bfbe      	ittt	lt
 8011734:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011738:	fa40 f303 	asrlt.w	r3, r0, r3
 801173c:	18c9      	addlt	r1, r1, r3
 801173e:	ea21 0102 	bic.w	r1, r1, r2
 8011742:	2000      	movs	r0, #0
 8011744:	e7e0      	b.n	8011708 <floor+0x40>
 8011746:	2b33      	cmp	r3, #51	; 0x33
 8011748:	dd05      	ble.n	8011756 <floor+0x8e>
 801174a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801174e:	d101      	bne.n	8011754 <floor+0x8c>
 8011750:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011754:	bd30      	pop	{r4, r5, pc}
 8011756:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801175a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801175e:	40e2      	lsrs	r2, r4
 8011760:	4202      	tst	r2, r0
 8011762:	d0f7      	beq.n	8011754 <floor+0x8c>
 8011764:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80117a0 <floor+0xd8>
 8011768:	ee30 0b07 	vadd.f64	d0, d0, d7
 801176c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011774:	ddc8      	ble.n	8011708 <floor+0x40>
 8011776:	2900      	cmp	r1, #0
 8011778:	da02      	bge.n	8011780 <floor+0xb8>
 801177a:	2b14      	cmp	r3, #20
 801177c:	d103      	bne.n	8011786 <floor+0xbe>
 801177e:	3101      	adds	r1, #1
 8011780:	ea20 0002 	bic.w	r0, r0, r2
 8011784:	e7c0      	b.n	8011708 <floor+0x40>
 8011786:	2401      	movs	r4, #1
 8011788:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801178c:	fa04 f303 	lsl.w	r3, r4, r3
 8011790:	4418      	add	r0, r3
 8011792:	42a8      	cmp	r0, r5
 8011794:	bf38      	it	cc
 8011796:	1909      	addcc	r1, r1, r4
 8011798:	e7f2      	b.n	8011780 <floor+0xb8>
 801179a:	2000      	movs	r0, #0
 801179c:	4601      	mov	r1, r0
 801179e:	e7b3      	b.n	8011708 <floor+0x40>
 80117a0:	8800759c 	.word	0x8800759c
 80117a4:	7e37e43c 	.word	0x7e37e43c
 80117a8:	bff00000 	.word	0xbff00000
 80117ac:	000fffff 	.word	0x000fffff

080117b0 <scalbn>:
 80117b0:	ee10 1a90 	vmov	r1, s1
 80117b4:	b510      	push	{r4, lr}
 80117b6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80117ba:	b98c      	cbnz	r4, 80117e0 <scalbn+0x30>
 80117bc:	ee10 3a10 	vmov	r3, s0
 80117c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80117c4:	430b      	orrs	r3, r1
 80117c6:	d011      	beq.n	80117ec <scalbn+0x3c>
 80117c8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8011890 <scalbn+0xe0>
 80117cc:	4b3c      	ldr	r3, [pc, #240]	; (80118c0 <scalbn+0x110>)
 80117ce:	ee20 0b07 	vmul.f64	d0, d0, d7
 80117d2:	4298      	cmp	r0, r3
 80117d4:	da0b      	bge.n	80117ee <scalbn+0x3e>
 80117d6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011898 <scalbn+0xe8>
 80117da:	ee20 0b07 	vmul.f64	d0, d0, d7
 80117de:	e005      	b.n	80117ec <scalbn+0x3c>
 80117e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80117e4:	429c      	cmp	r4, r3
 80117e6:	d107      	bne.n	80117f8 <scalbn+0x48>
 80117e8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80117ec:	bd10      	pop	{r4, pc}
 80117ee:	ee10 1a90 	vmov	r1, s1
 80117f2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80117f6:	3c36      	subs	r4, #54	; 0x36
 80117f8:	4404      	add	r4, r0
 80117fa:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80117fe:	429c      	cmp	r4, r3
 8011800:	dd0d      	ble.n	801181e <scalbn+0x6e>
 8011802:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80118a0 <scalbn+0xf0>
 8011806:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80118a8 <scalbn+0xf8>
 801180a:	eeb0 6b47 	vmov.f64	d6, d7
 801180e:	ee10 3a90 	vmov	r3, s1
 8011812:	2b00      	cmp	r3, #0
 8011814:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011818:	ee27 0b06 	vmul.f64	d0, d7, d6
 801181c:	e7e6      	b.n	80117ec <scalbn+0x3c>
 801181e:	2c00      	cmp	r4, #0
 8011820:	dd0a      	ble.n	8011838 <scalbn+0x88>
 8011822:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011826:	ec53 2b10 	vmov	r2, r3, d0
 801182a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801182e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011832:	ec43 2b10 	vmov	d0, r2, r3
 8011836:	e7d9      	b.n	80117ec <scalbn+0x3c>
 8011838:	f114 0f35 	cmn.w	r4, #53	; 0x35
 801183c:	da19      	bge.n	8011872 <scalbn+0xc2>
 801183e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011842:	4298      	cmp	r0, r3
 8011844:	ee10 3a90 	vmov	r3, s1
 8011848:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801184c:	dd09      	ble.n	8011862 <scalbn+0xb2>
 801184e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80118a0 <scalbn+0xf0>
 8011852:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80118a8 <scalbn+0xf8>
 8011856:	eeb0 7b40 	vmov.f64	d7, d0
 801185a:	2b00      	cmp	r3, #0
 801185c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8011860:	e7bb      	b.n	80117da <scalbn+0x2a>
 8011862:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8011898 <scalbn+0xe8>
 8011866:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80118b0 <scalbn+0x100>
 801186a:	eeb0 7b40 	vmov.f64	d7, d0
 801186e:	2b00      	cmp	r3, #0
 8011870:	e7f4      	b.n	801185c <scalbn+0xac>
 8011872:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011876:	ec53 2b10 	vmov	r2, r3, d0
 801187a:	3436      	adds	r4, #54	; 0x36
 801187c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011880:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011884:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80118b8 <scalbn+0x108>
 8011888:	ec43 2b10 	vmov	d0, r2, r3
 801188c:	e7a5      	b.n	80117da <scalbn+0x2a>
 801188e:	bf00      	nop
 8011890:	00000000 	.word	0x00000000
 8011894:	43500000 	.word	0x43500000
 8011898:	c2f8f359 	.word	0xc2f8f359
 801189c:	01a56e1f 	.word	0x01a56e1f
 80118a0:	8800759c 	.word	0x8800759c
 80118a4:	7e37e43c 	.word	0x7e37e43c
 80118a8:	8800759c 	.word	0x8800759c
 80118ac:	fe37e43c 	.word	0xfe37e43c
 80118b0:	c2f8f359 	.word	0xc2f8f359
 80118b4:	81a56e1f 	.word	0x81a56e1f
 80118b8:	00000000 	.word	0x00000000
 80118bc:	3c900000 	.word	0x3c900000
 80118c0:	ffff3cb0 	.word	0xffff3cb0

080118c4 <atanf>:
 80118c4:	b538      	push	{r3, r4, r5, lr}
 80118c6:	ee10 5a10 	vmov	r5, s0
 80118ca:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80118ce:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80118d2:	eef0 7a40 	vmov.f32	s15, s0
 80118d6:	db0f      	blt.n	80118f8 <atanf+0x34>
 80118d8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80118dc:	dd04      	ble.n	80118e8 <atanf+0x24>
 80118de:	ee70 7a00 	vadd.f32	s15, s0, s0
 80118e2:	eeb0 0a67 	vmov.f32	s0, s15
 80118e6:	bd38      	pop	{r3, r4, r5, pc}
 80118e8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8011a20 <atanf+0x15c>
 80118ec:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8011a24 <atanf+0x160>
 80118f0:	2d00      	cmp	r5, #0
 80118f2:	fe77 7a80 	vselgt.f32	s15, s15, s0
 80118f6:	e7f4      	b.n	80118e2 <atanf+0x1e>
 80118f8:	4b4b      	ldr	r3, [pc, #300]	; (8011a28 <atanf+0x164>)
 80118fa:	429c      	cmp	r4, r3
 80118fc:	dc10      	bgt.n	8011920 <atanf+0x5c>
 80118fe:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8011902:	da0a      	bge.n	801191a <atanf+0x56>
 8011904:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8011a2c <atanf+0x168>
 8011908:	ee30 7a07 	vadd.f32	s14, s0, s14
 801190c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011910:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011918:	dce3      	bgt.n	80118e2 <atanf+0x1e>
 801191a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801191e:	e013      	b.n	8011948 <atanf+0x84>
 8011920:	f000 f8a4 	bl	8011a6c <fabsf>
 8011924:	4b42      	ldr	r3, [pc, #264]	; (8011a30 <atanf+0x16c>)
 8011926:	429c      	cmp	r4, r3
 8011928:	dc4f      	bgt.n	80119ca <atanf+0x106>
 801192a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801192e:	429c      	cmp	r4, r3
 8011930:	dc41      	bgt.n	80119b6 <atanf+0xf2>
 8011932:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011936:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801193a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801193e:	2300      	movs	r3, #0
 8011940:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011944:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011948:	1c5a      	adds	r2, r3, #1
 801194a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801194e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8011a34 <atanf+0x170>
 8011952:	eddf 5a39 	vldr	s11, [pc, #228]	; 8011a38 <atanf+0x174>
 8011956:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8011a3c <atanf+0x178>
 801195a:	ee66 6a06 	vmul.f32	s13, s12, s12
 801195e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011962:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8011a40 <atanf+0x17c>
 8011966:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801196a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8011a44 <atanf+0x180>
 801196e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011972:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8011a48 <atanf+0x184>
 8011976:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801197a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011a4c <atanf+0x188>
 801197e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011982:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011a50 <atanf+0x18c>
 8011986:	eea6 5a87 	vfma.f32	s10, s13, s14
 801198a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8011a54 <atanf+0x190>
 801198e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011992:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8011a58 <atanf+0x194>
 8011996:	eea7 5a26 	vfma.f32	s10, s14, s13
 801199a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8011a5c <atanf+0x198>
 801199e:	eea5 7a26 	vfma.f32	s14, s10, s13
 80119a2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80119a6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80119aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80119ae:	d121      	bne.n	80119f4 <atanf+0x130>
 80119b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80119b4:	e795      	b.n	80118e2 <atanf+0x1e>
 80119b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80119ba:	ee30 7a67 	vsub.f32	s14, s0, s15
 80119be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80119c2:	2301      	movs	r3, #1
 80119c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80119c8:	e7be      	b.n	8011948 <atanf+0x84>
 80119ca:	4b25      	ldr	r3, [pc, #148]	; (8011a60 <atanf+0x19c>)
 80119cc:	429c      	cmp	r4, r3
 80119ce:	dc0b      	bgt.n	80119e8 <atanf+0x124>
 80119d0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80119d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80119d8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80119dc:	2302      	movs	r3, #2
 80119de:	ee70 6a67 	vsub.f32	s13, s0, s15
 80119e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80119e6:	e7af      	b.n	8011948 <atanf+0x84>
 80119e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80119ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80119f0:	2303      	movs	r3, #3
 80119f2:	e7a9      	b.n	8011948 <atanf+0x84>
 80119f4:	4a1b      	ldr	r2, [pc, #108]	; (8011a64 <atanf+0x1a0>)
 80119f6:	491c      	ldr	r1, [pc, #112]	; (8011a68 <atanf+0x1a4>)
 80119f8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80119fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011a00:	ed93 0a00 	vldr	s0, [r3]
 8011a04:	ee37 7a40 	vsub.f32	s14, s14, s0
 8011a08:	ed92 0a00 	vldr	s0, [r2]
 8011a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a10:	2d00      	cmp	r5, #0
 8011a12:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011a16:	bfb8      	it	lt
 8011a18:	eef1 7a67 	vneglt.f32	s15, s15
 8011a1c:	e761      	b.n	80118e2 <atanf+0x1e>
 8011a1e:	bf00      	nop
 8011a20:	3fc90fdb 	.word	0x3fc90fdb
 8011a24:	bfc90fdb 	.word	0xbfc90fdb
 8011a28:	3edfffff 	.word	0x3edfffff
 8011a2c:	7149f2ca 	.word	0x7149f2ca
 8011a30:	3f97ffff 	.word	0x3f97ffff
 8011a34:	3c8569d7 	.word	0x3c8569d7
 8011a38:	3d4bda59 	.word	0x3d4bda59
 8011a3c:	bd6ef16b 	.word	0xbd6ef16b
 8011a40:	3d886b35 	.word	0x3d886b35
 8011a44:	3dba2e6e 	.word	0x3dba2e6e
 8011a48:	3e124925 	.word	0x3e124925
 8011a4c:	3eaaaaab 	.word	0x3eaaaaab
 8011a50:	bd15a221 	.word	0xbd15a221
 8011a54:	bd9d8795 	.word	0xbd9d8795
 8011a58:	bde38e38 	.word	0xbde38e38
 8011a5c:	be4ccccd 	.word	0xbe4ccccd
 8011a60:	401bffff 	.word	0x401bffff
 8011a64:	08016000 	.word	0x08016000
 8011a68:	08016010 	.word	0x08016010

08011a6c <fabsf>:
 8011a6c:	ee10 3a10 	vmov	r3, s0
 8011a70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011a74:	ee00 3a10 	vmov	s0, r3
 8011a78:	4770      	bx	lr
	...

08011a7c <__errno>:
 8011a7c:	4b01      	ldr	r3, [pc, #4]	; (8011a84 <__errno+0x8>)
 8011a7e:	6818      	ldr	r0, [r3, #0]
 8011a80:	4770      	bx	lr
 8011a82:	bf00      	nop
 8011a84:	24000240 	.word	0x24000240

08011a88 <__libc_init_array>:
 8011a88:	b570      	push	{r4, r5, r6, lr}
 8011a8a:	4d0d      	ldr	r5, [pc, #52]	; (8011ac0 <__libc_init_array+0x38>)
 8011a8c:	4c0d      	ldr	r4, [pc, #52]	; (8011ac4 <__libc_init_array+0x3c>)
 8011a8e:	1b64      	subs	r4, r4, r5
 8011a90:	10a4      	asrs	r4, r4, #2
 8011a92:	2600      	movs	r6, #0
 8011a94:	42a6      	cmp	r6, r4
 8011a96:	d109      	bne.n	8011aac <__libc_init_array+0x24>
 8011a98:	4d0b      	ldr	r5, [pc, #44]	; (8011ac8 <__libc_init_array+0x40>)
 8011a9a:	4c0c      	ldr	r4, [pc, #48]	; (8011acc <__libc_init_array+0x44>)
 8011a9c:	f002 fd02 	bl	80144a4 <_init>
 8011aa0:	1b64      	subs	r4, r4, r5
 8011aa2:	10a4      	asrs	r4, r4, #2
 8011aa4:	2600      	movs	r6, #0
 8011aa6:	42a6      	cmp	r6, r4
 8011aa8:	d105      	bne.n	8011ab6 <__libc_init_array+0x2e>
 8011aaa:	bd70      	pop	{r4, r5, r6, pc}
 8011aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ab0:	4798      	blx	r3
 8011ab2:	3601      	adds	r6, #1
 8011ab4:	e7ee      	b.n	8011a94 <__libc_init_array+0xc>
 8011ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011aba:	4798      	blx	r3
 8011abc:	3601      	adds	r6, #1
 8011abe:	e7f2      	b.n	8011aa6 <__libc_init_array+0x1e>
 8011ac0:	08016404 	.word	0x08016404
 8011ac4:	08016404 	.word	0x08016404
 8011ac8:	08016404 	.word	0x08016404
 8011acc:	0801640c 	.word	0x0801640c

08011ad0 <memset>:
 8011ad0:	4402      	add	r2, r0
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	4293      	cmp	r3, r2
 8011ad6:	d100      	bne.n	8011ada <memset+0xa>
 8011ad8:	4770      	bx	lr
 8011ada:	f803 1b01 	strb.w	r1, [r3], #1
 8011ade:	e7f9      	b.n	8011ad4 <memset+0x4>

08011ae0 <__cvt>:
 8011ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ae2:	ed2d 8b02 	vpush	{d8}
 8011ae6:	eeb0 8b40 	vmov.f64	d8, d0
 8011aea:	b085      	sub	sp, #20
 8011aec:	4617      	mov	r7, r2
 8011aee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011af0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011af2:	ee18 2a90 	vmov	r2, s17
 8011af6:	f025 0520 	bic.w	r5, r5, #32
 8011afa:	2a00      	cmp	r2, #0
 8011afc:	bfb6      	itet	lt
 8011afe:	222d      	movlt	r2, #45	; 0x2d
 8011b00:	2200      	movge	r2, #0
 8011b02:	eeb1 8b40 	vneglt.f64	d8, d0
 8011b06:	2d46      	cmp	r5, #70	; 0x46
 8011b08:	460c      	mov	r4, r1
 8011b0a:	701a      	strb	r2, [r3, #0]
 8011b0c:	d004      	beq.n	8011b18 <__cvt+0x38>
 8011b0e:	2d45      	cmp	r5, #69	; 0x45
 8011b10:	d100      	bne.n	8011b14 <__cvt+0x34>
 8011b12:	3401      	adds	r4, #1
 8011b14:	2102      	movs	r1, #2
 8011b16:	e000      	b.n	8011b1a <__cvt+0x3a>
 8011b18:	2103      	movs	r1, #3
 8011b1a:	ab03      	add	r3, sp, #12
 8011b1c:	9301      	str	r3, [sp, #4]
 8011b1e:	ab02      	add	r3, sp, #8
 8011b20:	9300      	str	r3, [sp, #0]
 8011b22:	4622      	mov	r2, r4
 8011b24:	4633      	mov	r3, r6
 8011b26:	eeb0 0b48 	vmov.f64	d0, d8
 8011b2a:	f000 fddd 	bl	80126e8 <_dtoa_r>
 8011b2e:	2d47      	cmp	r5, #71	; 0x47
 8011b30:	d101      	bne.n	8011b36 <__cvt+0x56>
 8011b32:	07fb      	lsls	r3, r7, #31
 8011b34:	d51a      	bpl.n	8011b6c <__cvt+0x8c>
 8011b36:	2d46      	cmp	r5, #70	; 0x46
 8011b38:	eb00 0204 	add.w	r2, r0, r4
 8011b3c:	d10c      	bne.n	8011b58 <__cvt+0x78>
 8011b3e:	7803      	ldrb	r3, [r0, #0]
 8011b40:	2b30      	cmp	r3, #48	; 0x30
 8011b42:	d107      	bne.n	8011b54 <__cvt+0x74>
 8011b44:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b4c:	bf1c      	itt	ne
 8011b4e:	f1c4 0401 	rsbne	r4, r4, #1
 8011b52:	6034      	strne	r4, [r6, #0]
 8011b54:	6833      	ldr	r3, [r6, #0]
 8011b56:	441a      	add	r2, r3
 8011b58:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b60:	bf08      	it	eq
 8011b62:	9203      	streq	r2, [sp, #12]
 8011b64:	2130      	movs	r1, #48	; 0x30
 8011b66:	9b03      	ldr	r3, [sp, #12]
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d307      	bcc.n	8011b7c <__cvt+0x9c>
 8011b6c:	9b03      	ldr	r3, [sp, #12]
 8011b6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b70:	1a1b      	subs	r3, r3, r0
 8011b72:	6013      	str	r3, [r2, #0]
 8011b74:	b005      	add	sp, #20
 8011b76:	ecbd 8b02 	vpop	{d8}
 8011b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b7c:	1c5c      	adds	r4, r3, #1
 8011b7e:	9403      	str	r4, [sp, #12]
 8011b80:	7019      	strb	r1, [r3, #0]
 8011b82:	e7f0      	b.n	8011b66 <__cvt+0x86>

08011b84 <__exponent>:
 8011b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b86:	4603      	mov	r3, r0
 8011b88:	2900      	cmp	r1, #0
 8011b8a:	bfb8      	it	lt
 8011b8c:	4249      	neglt	r1, r1
 8011b8e:	f803 2b02 	strb.w	r2, [r3], #2
 8011b92:	bfb4      	ite	lt
 8011b94:	222d      	movlt	r2, #45	; 0x2d
 8011b96:	222b      	movge	r2, #43	; 0x2b
 8011b98:	2909      	cmp	r1, #9
 8011b9a:	7042      	strb	r2, [r0, #1]
 8011b9c:	dd2a      	ble.n	8011bf4 <__exponent+0x70>
 8011b9e:	f10d 0407 	add.w	r4, sp, #7
 8011ba2:	46a4      	mov	ip, r4
 8011ba4:	270a      	movs	r7, #10
 8011ba6:	46a6      	mov	lr, r4
 8011ba8:	460a      	mov	r2, r1
 8011baa:	fb91 f6f7 	sdiv	r6, r1, r7
 8011bae:	fb07 1516 	mls	r5, r7, r6, r1
 8011bb2:	3530      	adds	r5, #48	; 0x30
 8011bb4:	2a63      	cmp	r2, #99	; 0x63
 8011bb6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011bba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011bbe:	4631      	mov	r1, r6
 8011bc0:	dcf1      	bgt.n	8011ba6 <__exponent+0x22>
 8011bc2:	3130      	adds	r1, #48	; 0x30
 8011bc4:	f1ae 0502 	sub.w	r5, lr, #2
 8011bc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011bcc:	1c44      	adds	r4, r0, #1
 8011bce:	4629      	mov	r1, r5
 8011bd0:	4561      	cmp	r1, ip
 8011bd2:	d30a      	bcc.n	8011bea <__exponent+0x66>
 8011bd4:	f10d 0209 	add.w	r2, sp, #9
 8011bd8:	eba2 020e 	sub.w	r2, r2, lr
 8011bdc:	4565      	cmp	r5, ip
 8011bde:	bf88      	it	hi
 8011be0:	2200      	movhi	r2, #0
 8011be2:	4413      	add	r3, r2
 8011be4:	1a18      	subs	r0, r3, r0
 8011be6:	b003      	add	sp, #12
 8011be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011bf2:	e7ed      	b.n	8011bd0 <__exponent+0x4c>
 8011bf4:	2330      	movs	r3, #48	; 0x30
 8011bf6:	3130      	adds	r1, #48	; 0x30
 8011bf8:	7083      	strb	r3, [r0, #2]
 8011bfa:	70c1      	strb	r1, [r0, #3]
 8011bfc:	1d03      	adds	r3, r0, #4
 8011bfe:	e7f1      	b.n	8011be4 <__exponent+0x60>

08011c00 <_printf_float>:
 8011c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c04:	b08b      	sub	sp, #44	; 0x2c
 8011c06:	460c      	mov	r4, r1
 8011c08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011c0c:	4616      	mov	r6, r2
 8011c0e:	461f      	mov	r7, r3
 8011c10:	4605      	mov	r5, r0
 8011c12:	f001 fc8f 	bl	8013534 <_localeconv_r>
 8011c16:	f8d0 b000 	ldr.w	fp, [r0]
 8011c1a:	4658      	mov	r0, fp
 8011c1c:	f7ee fb60 	bl	80002e0 <strlen>
 8011c20:	2300      	movs	r3, #0
 8011c22:	9308      	str	r3, [sp, #32]
 8011c24:	f8d8 3000 	ldr.w	r3, [r8]
 8011c28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011c2c:	6822      	ldr	r2, [r4, #0]
 8011c2e:	3307      	adds	r3, #7
 8011c30:	f023 0307 	bic.w	r3, r3, #7
 8011c34:	f103 0108 	add.w	r1, r3, #8
 8011c38:	f8c8 1000 	str.w	r1, [r8]
 8011c3c:	4682      	mov	sl, r0
 8011c3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011c42:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011c46:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011ea8 <_printf_float+0x2a8>
 8011c4a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011c4e:	eeb0 6bc0 	vabs.f64	d6, d0
 8011c52:	eeb4 6b47 	vcmp.f64	d6, d7
 8011c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5a:	dd24      	ble.n	8011ca6 <_printf_float+0xa6>
 8011c5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c64:	d502      	bpl.n	8011c6c <_printf_float+0x6c>
 8011c66:	232d      	movs	r3, #45	; 0x2d
 8011c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c6c:	4b90      	ldr	r3, [pc, #576]	; (8011eb0 <_printf_float+0x2b0>)
 8011c6e:	4891      	ldr	r0, [pc, #580]	; (8011eb4 <_printf_float+0x2b4>)
 8011c70:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011c74:	bf94      	ite	ls
 8011c76:	4698      	movls	r8, r3
 8011c78:	4680      	movhi	r8, r0
 8011c7a:	2303      	movs	r3, #3
 8011c7c:	6123      	str	r3, [r4, #16]
 8011c7e:	f022 0204 	bic.w	r2, r2, #4
 8011c82:	2300      	movs	r3, #0
 8011c84:	6022      	str	r2, [r4, #0]
 8011c86:	9304      	str	r3, [sp, #16]
 8011c88:	9700      	str	r7, [sp, #0]
 8011c8a:	4633      	mov	r3, r6
 8011c8c:	aa09      	add	r2, sp, #36	; 0x24
 8011c8e:	4621      	mov	r1, r4
 8011c90:	4628      	mov	r0, r5
 8011c92:	f000 f9d3 	bl	801203c <_printf_common>
 8011c96:	3001      	adds	r0, #1
 8011c98:	f040 808a 	bne.w	8011db0 <_printf_float+0x1b0>
 8011c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ca0:	b00b      	add	sp, #44	; 0x2c
 8011ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ca6:	eeb4 0b40 	vcmp.f64	d0, d0
 8011caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cae:	d709      	bvc.n	8011cc4 <_printf_float+0xc4>
 8011cb0:	ee10 3a90 	vmov	r3, s1
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	bfbc      	itt	lt
 8011cb8:	232d      	movlt	r3, #45	; 0x2d
 8011cba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011cbe:	487e      	ldr	r0, [pc, #504]	; (8011eb8 <_printf_float+0x2b8>)
 8011cc0:	4b7e      	ldr	r3, [pc, #504]	; (8011ebc <_printf_float+0x2bc>)
 8011cc2:	e7d5      	b.n	8011c70 <_printf_float+0x70>
 8011cc4:	6863      	ldr	r3, [r4, #4]
 8011cc6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011cca:	9104      	str	r1, [sp, #16]
 8011ccc:	1c59      	adds	r1, r3, #1
 8011cce:	d13c      	bne.n	8011d4a <_printf_float+0x14a>
 8011cd0:	2306      	movs	r3, #6
 8011cd2:	6063      	str	r3, [r4, #4]
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	9303      	str	r3, [sp, #12]
 8011cd8:	ab08      	add	r3, sp, #32
 8011cda:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011ce2:	ab07      	add	r3, sp, #28
 8011ce4:	6861      	ldr	r1, [r4, #4]
 8011ce6:	9300      	str	r3, [sp, #0]
 8011ce8:	6022      	str	r2, [r4, #0]
 8011cea:	f10d 031b 	add.w	r3, sp, #27
 8011cee:	4628      	mov	r0, r5
 8011cf0:	f7ff fef6 	bl	8011ae0 <__cvt>
 8011cf4:	9b04      	ldr	r3, [sp, #16]
 8011cf6:	9907      	ldr	r1, [sp, #28]
 8011cf8:	2b47      	cmp	r3, #71	; 0x47
 8011cfa:	4680      	mov	r8, r0
 8011cfc:	d108      	bne.n	8011d10 <_printf_float+0x110>
 8011cfe:	1cc8      	adds	r0, r1, #3
 8011d00:	db02      	blt.n	8011d08 <_printf_float+0x108>
 8011d02:	6863      	ldr	r3, [r4, #4]
 8011d04:	4299      	cmp	r1, r3
 8011d06:	dd41      	ble.n	8011d8c <_printf_float+0x18c>
 8011d08:	f1a9 0902 	sub.w	r9, r9, #2
 8011d0c:	fa5f f989 	uxtb.w	r9, r9
 8011d10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011d14:	d820      	bhi.n	8011d58 <_printf_float+0x158>
 8011d16:	3901      	subs	r1, #1
 8011d18:	464a      	mov	r2, r9
 8011d1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011d1e:	9107      	str	r1, [sp, #28]
 8011d20:	f7ff ff30 	bl	8011b84 <__exponent>
 8011d24:	9a08      	ldr	r2, [sp, #32]
 8011d26:	9004      	str	r0, [sp, #16]
 8011d28:	1813      	adds	r3, r2, r0
 8011d2a:	2a01      	cmp	r2, #1
 8011d2c:	6123      	str	r3, [r4, #16]
 8011d2e:	dc02      	bgt.n	8011d36 <_printf_float+0x136>
 8011d30:	6822      	ldr	r2, [r4, #0]
 8011d32:	07d2      	lsls	r2, r2, #31
 8011d34:	d501      	bpl.n	8011d3a <_printf_float+0x13a>
 8011d36:	3301      	adds	r3, #1
 8011d38:	6123      	str	r3, [r4, #16]
 8011d3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d0a2      	beq.n	8011c88 <_printf_float+0x88>
 8011d42:	232d      	movs	r3, #45	; 0x2d
 8011d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d48:	e79e      	b.n	8011c88 <_printf_float+0x88>
 8011d4a:	9904      	ldr	r1, [sp, #16]
 8011d4c:	2947      	cmp	r1, #71	; 0x47
 8011d4e:	d1c1      	bne.n	8011cd4 <_printf_float+0xd4>
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d1bf      	bne.n	8011cd4 <_printf_float+0xd4>
 8011d54:	2301      	movs	r3, #1
 8011d56:	e7bc      	b.n	8011cd2 <_printf_float+0xd2>
 8011d58:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011d5c:	d118      	bne.n	8011d90 <_printf_float+0x190>
 8011d5e:	2900      	cmp	r1, #0
 8011d60:	6863      	ldr	r3, [r4, #4]
 8011d62:	dd0b      	ble.n	8011d7c <_printf_float+0x17c>
 8011d64:	6121      	str	r1, [r4, #16]
 8011d66:	b913      	cbnz	r3, 8011d6e <_printf_float+0x16e>
 8011d68:	6822      	ldr	r2, [r4, #0]
 8011d6a:	07d0      	lsls	r0, r2, #31
 8011d6c:	d502      	bpl.n	8011d74 <_printf_float+0x174>
 8011d6e:	3301      	adds	r3, #1
 8011d70:	440b      	add	r3, r1
 8011d72:	6123      	str	r3, [r4, #16]
 8011d74:	2300      	movs	r3, #0
 8011d76:	65a1      	str	r1, [r4, #88]	; 0x58
 8011d78:	9304      	str	r3, [sp, #16]
 8011d7a:	e7de      	b.n	8011d3a <_printf_float+0x13a>
 8011d7c:	b913      	cbnz	r3, 8011d84 <_printf_float+0x184>
 8011d7e:	6822      	ldr	r2, [r4, #0]
 8011d80:	07d2      	lsls	r2, r2, #31
 8011d82:	d501      	bpl.n	8011d88 <_printf_float+0x188>
 8011d84:	3302      	adds	r3, #2
 8011d86:	e7f4      	b.n	8011d72 <_printf_float+0x172>
 8011d88:	2301      	movs	r3, #1
 8011d8a:	e7f2      	b.n	8011d72 <_printf_float+0x172>
 8011d8c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011d90:	9b08      	ldr	r3, [sp, #32]
 8011d92:	4299      	cmp	r1, r3
 8011d94:	db05      	blt.n	8011da2 <_printf_float+0x1a2>
 8011d96:	6823      	ldr	r3, [r4, #0]
 8011d98:	6121      	str	r1, [r4, #16]
 8011d9a:	07d8      	lsls	r0, r3, #31
 8011d9c:	d5ea      	bpl.n	8011d74 <_printf_float+0x174>
 8011d9e:	1c4b      	adds	r3, r1, #1
 8011da0:	e7e7      	b.n	8011d72 <_printf_float+0x172>
 8011da2:	2900      	cmp	r1, #0
 8011da4:	bfd4      	ite	le
 8011da6:	f1c1 0202 	rsble	r2, r1, #2
 8011daa:	2201      	movgt	r2, #1
 8011dac:	4413      	add	r3, r2
 8011dae:	e7e0      	b.n	8011d72 <_printf_float+0x172>
 8011db0:	6823      	ldr	r3, [r4, #0]
 8011db2:	055a      	lsls	r2, r3, #21
 8011db4:	d407      	bmi.n	8011dc6 <_printf_float+0x1c6>
 8011db6:	6923      	ldr	r3, [r4, #16]
 8011db8:	4642      	mov	r2, r8
 8011dba:	4631      	mov	r1, r6
 8011dbc:	4628      	mov	r0, r5
 8011dbe:	47b8      	blx	r7
 8011dc0:	3001      	adds	r0, #1
 8011dc2:	d12a      	bne.n	8011e1a <_printf_float+0x21a>
 8011dc4:	e76a      	b.n	8011c9c <_printf_float+0x9c>
 8011dc6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011dca:	f240 80e2 	bls.w	8011f92 <_printf_float+0x392>
 8011dce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011dd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dda:	d133      	bne.n	8011e44 <_printf_float+0x244>
 8011ddc:	4a38      	ldr	r2, [pc, #224]	; (8011ec0 <_printf_float+0x2c0>)
 8011dde:	2301      	movs	r3, #1
 8011de0:	4631      	mov	r1, r6
 8011de2:	4628      	mov	r0, r5
 8011de4:	47b8      	blx	r7
 8011de6:	3001      	adds	r0, #1
 8011de8:	f43f af58 	beq.w	8011c9c <_printf_float+0x9c>
 8011dec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011df0:	429a      	cmp	r2, r3
 8011df2:	db02      	blt.n	8011dfa <_printf_float+0x1fa>
 8011df4:	6823      	ldr	r3, [r4, #0]
 8011df6:	07d8      	lsls	r0, r3, #31
 8011df8:	d50f      	bpl.n	8011e1a <_printf_float+0x21a>
 8011dfa:	4653      	mov	r3, sl
 8011dfc:	465a      	mov	r2, fp
 8011dfe:	4631      	mov	r1, r6
 8011e00:	4628      	mov	r0, r5
 8011e02:	47b8      	blx	r7
 8011e04:	3001      	adds	r0, #1
 8011e06:	f43f af49 	beq.w	8011c9c <_printf_float+0x9c>
 8011e0a:	f04f 0800 	mov.w	r8, #0
 8011e0e:	f104 091a 	add.w	r9, r4, #26
 8011e12:	9b08      	ldr	r3, [sp, #32]
 8011e14:	3b01      	subs	r3, #1
 8011e16:	4543      	cmp	r3, r8
 8011e18:	dc09      	bgt.n	8011e2e <_printf_float+0x22e>
 8011e1a:	6823      	ldr	r3, [r4, #0]
 8011e1c:	079b      	lsls	r3, r3, #30
 8011e1e:	f100 8108 	bmi.w	8012032 <_printf_float+0x432>
 8011e22:	68e0      	ldr	r0, [r4, #12]
 8011e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e26:	4298      	cmp	r0, r3
 8011e28:	bfb8      	it	lt
 8011e2a:	4618      	movlt	r0, r3
 8011e2c:	e738      	b.n	8011ca0 <_printf_float+0xa0>
 8011e2e:	2301      	movs	r3, #1
 8011e30:	464a      	mov	r2, r9
 8011e32:	4631      	mov	r1, r6
 8011e34:	4628      	mov	r0, r5
 8011e36:	47b8      	blx	r7
 8011e38:	3001      	adds	r0, #1
 8011e3a:	f43f af2f 	beq.w	8011c9c <_printf_float+0x9c>
 8011e3e:	f108 0801 	add.w	r8, r8, #1
 8011e42:	e7e6      	b.n	8011e12 <_printf_float+0x212>
 8011e44:	9b07      	ldr	r3, [sp, #28]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	dc3c      	bgt.n	8011ec4 <_printf_float+0x2c4>
 8011e4a:	4a1d      	ldr	r2, [pc, #116]	; (8011ec0 <_printf_float+0x2c0>)
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	4631      	mov	r1, r6
 8011e50:	4628      	mov	r0, r5
 8011e52:	47b8      	blx	r7
 8011e54:	3001      	adds	r0, #1
 8011e56:	f43f af21 	beq.w	8011c9c <_printf_float+0x9c>
 8011e5a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011e5e:	4313      	orrs	r3, r2
 8011e60:	d102      	bne.n	8011e68 <_printf_float+0x268>
 8011e62:	6823      	ldr	r3, [r4, #0]
 8011e64:	07d9      	lsls	r1, r3, #31
 8011e66:	d5d8      	bpl.n	8011e1a <_printf_float+0x21a>
 8011e68:	4653      	mov	r3, sl
 8011e6a:	465a      	mov	r2, fp
 8011e6c:	4631      	mov	r1, r6
 8011e6e:	4628      	mov	r0, r5
 8011e70:	47b8      	blx	r7
 8011e72:	3001      	adds	r0, #1
 8011e74:	f43f af12 	beq.w	8011c9c <_printf_float+0x9c>
 8011e78:	f04f 0900 	mov.w	r9, #0
 8011e7c:	f104 0a1a 	add.w	sl, r4, #26
 8011e80:	9b07      	ldr	r3, [sp, #28]
 8011e82:	425b      	negs	r3, r3
 8011e84:	454b      	cmp	r3, r9
 8011e86:	dc01      	bgt.n	8011e8c <_printf_float+0x28c>
 8011e88:	9b08      	ldr	r3, [sp, #32]
 8011e8a:	e795      	b.n	8011db8 <_printf_float+0x1b8>
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	4652      	mov	r2, sl
 8011e90:	4631      	mov	r1, r6
 8011e92:	4628      	mov	r0, r5
 8011e94:	47b8      	blx	r7
 8011e96:	3001      	adds	r0, #1
 8011e98:	f43f af00 	beq.w	8011c9c <_printf_float+0x9c>
 8011e9c:	f109 0901 	add.w	r9, r9, #1
 8011ea0:	e7ee      	b.n	8011e80 <_printf_float+0x280>
 8011ea2:	bf00      	nop
 8011ea4:	f3af 8000 	nop.w
 8011ea8:	ffffffff 	.word	0xffffffff
 8011eac:	7fefffff 	.word	0x7fefffff
 8011eb0:	08016024 	.word	0x08016024
 8011eb4:	08016028 	.word	0x08016028
 8011eb8:	08016030 	.word	0x08016030
 8011ebc:	0801602c 	.word	0x0801602c
 8011ec0:	08016034 	.word	0x08016034
 8011ec4:	9a08      	ldr	r2, [sp, #32]
 8011ec6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	bfa8      	it	ge
 8011ecc:	461a      	movge	r2, r3
 8011ece:	2a00      	cmp	r2, #0
 8011ed0:	4691      	mov	r9, r2
 8011ed2:	dc38      	bgt.n	8011f46 <_printf_float+0x346>
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	9305      	str	r3, [sp, #20]
 8011ed8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011edc:	f104 021a 	add.w	r2, r4, #26
 8011ee0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ee2:	9905      	ldr	r1, [sp, #20]
 8011ee4:	9304      	str	r3, [sp, #16]
 8011ee6:	eba3 0309 	sub.w	r3, r3, r9
 8011eea:	428b      	cmp	r3, r1
 8011eec:	dc33      	bgt.n	8011f56 <_printf_float+0x356>
 8011eee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	db3c      	blt.n	8011f70 <_printf_float+0x370>
 8011ef6:	6823      	ldr	r3, [r4, #0]
 8011ef8:	07da      	lsls	r2, r3, #31
 8011efa:	d439      	bmi.n	8011f70 <_printf_float+0x370>
 8011efc:	9b08      	ldr	r3, [sp, #32]
 8011efe:	9a04      	ldr	r2, [sp, #16]
 8011f00:	9907      	ldr	r1, [sp, #28]
 8011f02:	1a9a      	subs	r2, r3, r2
 8011f04:	eba3 0901 	sub.w	r9, r3, r1
 8011f08:	4591      	cmp	r9, r2
 8011f0a:	bfa8      	it	ge
 8011f0c:	4691      	movge	r9, r2
 8011f0e:	f1b9 0f00 	cmp.w	r9, #0
 8011f12:	dc35      	bgt.n	8011f80 <_printf_float+0x380>
 8011f14:	f04f 0800 	mov.w	r8, #0
 8011f18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f1c:	f104 0a1a 	add.w	sl, r4, #26
 8011f20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011f24:	1a9b      	subs	r3, r3, r2
 8011f26:	eba3 0309 	sub.w	r3, r3, r9
 8011f2a:	4543      	cmp	r3, r8
 8011f2c:	f77f af75 	ble.w	8011e1a <_printf_float+0x21a>
 8011f30:	2301      	movs	r3, #1
 8011f32:	4652      	mov	r2, sl
 8011f34:	4631      	mov	r1, r6
 8011f36:	4628      	mov	r0, r5
 8011f38:	47b8      	blx	r7
 8011f3a:	3001      	adds	r0, #1
 8011f3c:	f43f aeae 	beq.w	8011c9c <_printf_float+0x9c>
 8011f40:	f108 0801 	add.w	r8, r8, #1
 8011f44:	e7ec      	b.n	8011f20 <_printf_float+0x320>
 8011f46:	4613      	mov	r3, r2
 8011f48:	4631      	mov	r1, r6
 8011f4a:	4642      	mov	r2, r8
 8011f4c:	4628      	mov	r0, r5
 8011f4e:	47b8      	blx	r7
 8011f50:	3001      	adds	r0, #1
 8011f52:	d1bf      	bne.n	8011ed4 <_printf_float+0x2d4>
 8011f54:	e6a2      	b.n	8011c9c <_printf_float+0x9c>
 8011f56:	2301      	movs	r3, #1
 8011f58:	4631      	mov	r1, r6
 8011f5a:	4628      	mov	r0, r5
 8011f5c:	9204      	str	r2, [sp, #16]
 8011f5e:	47b8      	blx	r7
 8011f60:	3001      	adds	r0, #1
 8011f62:	f43f ae9b 	beq.w	8011c9c <_printf_float+0x9c>
 8011f66:	9b05      	ldr	r3, [sp, #20]
 8011f68:	9a04      	ldr	r2, [sp, #16]
 8011f6a:	3301      	adds	r3, #1
 8011f6c:	9305      	str	r3, [sp, #20]
 8011f6e:	e7b7      	b.n	8011ee0 <_printf_float+0x2e0>
 8011f70:	4653      	mov	r3, sl
 8011f72:	465a      	mov	r2, fp
 8011f74:	4631      	mov	r1, r6
 8011f76:	4628      	mov	r0, r5
 8011f78:	47b8      	blx	r7
 8011f7a:	3001      	adds	r0, #1
 8011f7c:	d1be      	bne.n	8011efc <_printf_float+0x2fc>
 8011f7e:	e68d      	b.n	8011c9c <_printf_float+0x9c>
 8011f80:	9a04      	ldr	r2, [sp, #16]
 8011f82:	464b      	mov	r3, r9
 8011f84:	4442      	add	r2, r8
 8011f86:	4631      	mov	r1, r6
 8011f88:	4628      	mov	r0, r5
 8011f8a:	47b8      	blx	r7
 8011f8c:	3001      	adds	r0, #1
 8011f8e:	d1c1      	bne.n	8011f14 <_printf_float+0x314>
 8011f90:	e684      	b.n	8011c9c <_printf_float+0x9c>
 8011f92:	9a08      	ldr	r2, [sp, #32]
 8011f94:	2a01      	cmp	r2, #1
 8011f96:	dc01      	bgt.n	8011f9c <_printf_float+0x39c>
 8011f98:	07db      	lsls	r3, r3, #31
 8011f9a:	d537      	bpl.n	801200c <_printf_float+0x40c>
 8011f9c:	2301      	movs	r3, #1
 8011f9e:	4642      	mov	r2, r8
 8011fa0:	4631      	mov	r1, r6
 8011fa2:	4628      	mov	r0, r5
 8011fa4:	47b8      	blx	r7
 8011fa6:	3001      	adds	r0, #1
 8011fa8:	f43f ae78 	beq.w	8011c9c <_printf_float+0x9c>
 8011fac:	4653      	mov	r3, sl
 8011fae:	465a      	mov	r2, fp
 8011fb0:	4631      	mov	r1, r6
 8011fb2:	4628      	mov	r0, r5
 8011fb4:	47b8      	blx	r7
 8011fb6:	3001      	adds	r0, #1
 8011fb8:	f43f ae70 	beq.w	8011c9c <_printf_float+0x9c>
 8011fbc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011fc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fc8:	d01b      	beq.n	8012002 <_printf_float+0x402>
 8011fca:	9b08      	ldr	r3, [sp, #32]
 8011fcc:	f108 0201 	add.w	r2, r8, #1
 8011fd0:	3b01      	subs	r3, #1
 8011fd2:	4631      	mov	r1, r6
 8011fd4:	4628      	mov	r0, r5
 8011fd6:	47b8      	blx	r7
 8011fd8:	3001      	adds	r0, #1
 8011fda:	d10e      	bne.n	8011ffa <_printf_float+0x3fa>
 8011fdc:	e65e      	b.n	8011c9c <_printf_float+0x9c>
 8011fde:	2301      	movs	r3, #1
 8011fe0:	464a      	mov	r2, r9
 8011fe2:	4631      	mov	r1, r6
 8011fe4:	4628      	mov	r0, r5
 8011fe6:	47b8      	blx	r7
 8011fe8:	3001      	adds	r0, #1
 8011fea:	f43f ae57 	beq.w	8011c9c <_printf_float+0x9c>
 8011fee:	f108 0801 	add.w	r8, r8, #1
 8011ff2:	9b08      	ldr	r3, [sp, #32]
 8011ff4:	3b01      	subs	r3, #1
 8011ff6:	4543      	cmp	r3, r8
 8011ff8:	dcf1      	bgt.n	8011fde <_printf_float+0x3de>
 8011ffa:	9b04      	ldr	r3, [sp, #16]
 8011ffc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012000:	e6db      	b.n	8011dba <_printf_float+0x1ba>
 8012002:	f04f 0800 	mov.w	r8, #0
 8012006:	f104 091a 	add.w	r9, r4, #26
 801200a:	e7f2      	b.n	8011ff2 <_printf_float+0x3f2>
 801200c:	2301      	movs	r3, #1
 801200e:	4642      	mov	r2, r8
 8012010:	e7df      	b.n	8011fd2 <_printf_float+0x3d2>
 8012012:	2301      	movs	r3, #1
 8012014:	464a      	mov	r2, r9
 8012016:	4631      	mov	r1, r6
 8012018:	4628      	mov	r0, r5
 801201a:	47b8      	blx	r7
 801201c:	3001      	adds	r0, #1
 801201e:	f43f ae3d 	beq.w	8011c9c <_printf_float+0x9c>
 8012022:	f108 0801 	add.w	r8, r8, #1
 8012026:	68e3      	ldr	r3, [r4, #12]
 8012028:	9909      	ldr	r1, [sp, #36]	; 0x24
 801202a:	1a5b      	subs	r3, r3, r1
 801202c:	4543      	cmp	r3, r8
 801202e:	dcf0      	bgt.n	8012012 <_printf_float+0x412>
 8012030:	e6f7      	b.n	8011e22 <_printf_float+0x222>
 8012032:	f04f 0800 	mov.w	r8, #0
 8012036:	f104 0919 	add.w	r9, r4, #25
 801203a:	e7f4      	b.n	8012026 <_printf_float+0x426>

0801203c <_printf_common>:
 801203c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012040:	4616      	mov	r6, r2
 8012042:	4699      	mov	r9, r3
 8012044:	688a      	ldr	r2, [r1, #8]
 8012046:	690b      	ldr	r3, [r1, #16]
 8012048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801204c:	4293      	cmp	r3, r2
 801204e:	bfb8      	it	lt
 8012050:	4613      	movlt	r3, r2
 8012052:	6033      	str	r3, [r6, #0]
 8012054:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012058:	4607      	mov	r7, r0
 801205a:	460c      	mov	r4, r1
 801205c:	b10a      	cbz	r2, 8012062 <_printf_common+0x26>
 801205e:	3301      	adds	r3, #1
 8012060:	6033      	str	r3, [r6, #0]
 8012062:	6823      	ldr	r3, [r4, #0]
 8012064:	0699      	lsls	r1, r3, #26
 8012066:	bf42      	ittt	mi
 8012068:	6833      	ldrmi	r3, [r6, #0]
 801206a:	3302      	addmi	r3, #2
 801206c:	6033      	strmi	r3, [r6, #0]
 801206e:	6825      	ldr	r5, [r4, #0]
 8012070:	f015 0506 	ands.w	r5, r5, #6
 8012074:	d106      	bne.n	8012084 <_printf_common+0x48>
 8012076:	f104 0a19 	add.w	sl, r4, #25
 801207a:	68e3      	ldr	r3, [r4, #12]
 801207c:	6832      	ldr	r2, [r6, #0]
 801207e:	1a9b      	subs	r3, r3, r2
 8012080:	42ab      	cmp	r3, r5
 8012082:	dc26      	bgt.n	80120d2 <_printf_common+0x96>
 8012084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012088:	1e13      	subs	r3, r2, #0
 801208a:	6822      	ldr	r2, [r4, #0]
 801208c:	bf18      	it	ne
 801208e:	2301      	movne	r3, #1
 8012090:	0692      	lsls	r2, r2, #26
 8012092:	d42b      	bmi.n	80120ec <_printf_common+0xb0>
 8012094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012098:	4649      	mov	r1, r9
 801209a:	4638      	mov	r0, r7
 801209c:	47c0      	blx	r8
 801209e:	3001      	adds	r0, #1
 80120a0:	d01e      	beq.n	80120e0 <_printf_common+0xa4>
 80120a2:	6823      	ldr	r3, [r4, #0]
 80120a4:	68e5      	ldr	r5, [r4, #12]
 80120a6:	6832      	ldr	r2, [r6, #0]
 80120a8:	f003 0306 	and.w	r3, r3, #6
 80120ac:	2b04      	cmp	r3, #4
 80120ae:	bf08      	it	eq
 80120b0:	1aad      	subeq	r5, r5, r2
 80120b2:	68a3      	ldr	r3, [r4, #8]
 80120b4:	6922      	ldr	r2, [r4, #16]
 80120b6:	bf0c      	ite	eq
 80120b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80120bc:	2500      	movne	r5, #0
 80120be:	4293      	cmp	r3, r2
 80120c0:	bfc4      	itt	gt
 80120c2:	1a9b      	subgt	r3, r3, r2
 80120c4:	18ed      	addgt	r5, r5, r3
 80120c6:	2600      	movs	r6, #0
 80120c8:	341a      	adds	r4, #26
 80120ca:	42b5      	cmp	r5, r6
 80120cc:	d11a      	bne.n	8012104 <_printf_common+0xc8>
 80120ce:	2000      	movs	r0, #0
 80120d0:	e008      	b.n	80120e4 <_printf_common+0xa8>
 80120d2:	2301      	movs	r3, #1
 80120d4:	4652      	mov	r2, sl
 80120d6:	4649      	mov	r1, r9
 80120d8:	4638      	mov	r0, r7
 80120da:	47c0      	blx	r8
 80120dc:	3001      	adds	r0, #1
 80120de:	d103      	bne.n	80120e8 <_printf_common+0xac>
 80120e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120e8:	3501      	adds	r5, #1
 80120ea:	e7c6      	b.n	801207a <_printf_common+0x3e>
 80120ec:	18e1      	adds	r1, r4, r3
 80120ee:	1c5a      	adds	r2, r3, #1
 80120f0:	2030      	movs	r0, #48	; 0x30
 80120f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80120f6:	4422      	add	r2, r4
 80120f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80120fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012100:	3302      	adds	r3, #2
 8012102:	e7c7      	b.n	8012094 <_printf_common+0x58>
 8012104:	2301      	movs	r3, #1
 8012106:	4622      	mov	r2, r4
 8012108:	4649      	mov	r1, r9
 801210a:	4638      	mov	r0, r7
 801210c:	47c0      	blx	r8
 801210e:	3001      	adds	r0, #1
 8012110:	d0e6      	beq.n	80120e0 <_printf_common+0xa4>
 8012112:	3601      	adds	r6, #1
 8012114:	e7d9      	b.n	80120ca <_printf_common+0x8e>
	...

08012118 <_printf_i>:
 8012118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801211c:	7e0f      	ldrb	r7, [r1, #24]
 801211e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012120:	2f78      	cmp	r7, #120	; 0x78
 8012122:	4691      	mov	r9, r2
 8012124:	4680      	mov	r8, r0
 8012126:	460c      	mov	r4, r1
 8012128:	469a      	mov	sl, r3
 801212a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801212e:	d807      	bhi.n	8012140 <_printf_i+0x28>
 8012130:	2f62      	cmp	r7, #98	; 0x62
 8012132:	d80a      	bhi.n	801214a <_printf_i+0x32>
 8012134:	2f00      	cmp	r7, #0
 8012136:	f000 80d8 	beq.w	80122ea <_printf_i+0x1d2>
 801213a:	2f58      	cmp	r7, #88	; 0x58
 801213c:	f000 80a3 	beq.w	8012286 <_printf_i+0x16e>
 8012140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012144:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012148:	e03a      	b.n	80121c0 <_printf_i+0xa8>
 801214a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801214e:	2b15      	cmp	r3, #21
 8012150:	d8f6      	bhi.n	8012140 <_printf_i+0x28>
 8012152:	a101      	add	r1, pc, #4	; (adr r1, 8012158 <_printf_i+0x40>)
 8012154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012158:	080121b1 	.word	0x080121b1
 801215c:	080121c5 	.word	0x080121c5
 8012160:	08012141 	.word	0x08012141
 8012164:	08012141 	.word	0x08012141
 8012168:	08012141 	.word	0x08012141
 801216c:	08012141 	.word	0x08012141
 8012170:	080121c5 	.word	0x080121c5
 8012174:	08012141 	.word	0x08012141
 8012178:	08012141 	.word	0x08012141
 801217c:	08012141 	.word	0x08012141
 8012180:	08012141 	.word	0x08012141
 8012184:	080122d1 	.word	0x080122d1
 8012188:	080121f5 	.word	0x080121f5
 801218c:	080122b3 	.word	0x080122b3
 8012190:	08012141 	.word	0x08012141
 8012194:	08012141 	.word	0x08012141
 8012198:	080122f3 	.word	0x080122f3
 801219c:	08012141 	.word	0x08012141
 80121a0:	080121f5 	.word	0x080121f5
 80121a4:	08012141 	.word	0x08012141
 80121a8:	08012141 	.word	0x08012141
 80121ac:	080122bb 	.word	0x080122bb
 80121b0:	682b      	ldr	r3, [r5, #0]
 80121b2:	1d1a      	adds	r2, r3, #4
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	602a      	str	r2, [r5, #0]
 80121b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80121c0:	2301      	movs	r3, #1
 80121c2:	e0a3      	b.n	801230c <_printf_i+0x1f4>
 80121c4:	6820      	ldr	r0, [r4, #0]
 80121c6:	6829      	ldr	r1, [r5, #0]
 80121c8:	0606      	lsls	r6, r0, #24
 80121ca:	f101 0304 	add.w	r3, r1, #4
 80121ce:	d50a      	bpl.n	80121e6 <_printf_i+0xce>
 80121d0:	680e      	ldr	r6, [r1, #0]
 80121d2:	602b      	str	r3, [r5, #0]
 80121d4:	2e00      	cmp	r6, #0
 80121d6:	da03      	bge.n	80121e0 <_printf_i+0xc8>
 80121d8:	232d      	movs	r3, #45	; 0x2d
 80121da:	4276      	negs	r6, r6
 80121dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121e0:	485e      	ldr	r0, [pc, #376]	; (801235c <_printf_i+0x244>)
 80121e2:	230a      	movs	r3, #10
 80121e4:	e019      	b.n	801221a <_printf_i+0x102>
 80121e6:	680e      	ldr	r6, [r1, #0]
 80121e8:	602b      	str	r3, [r5, #0]
 80121ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80121ee:	bf18      	it	ne
 80121f0:	b236      	sxthne	r6, r6
 80121f2:	e7ef      	b.n	80121d4 <_printf_i+0xbc>
 80121f4:	682b      	ldr	r3, [r5, #0]
 80121f6:	6820      	ldr	r0, [r4, #0]
 80121f8:	1d19      	adds	r1, r3, #4
 80121fa:	6029      	str	r1, [r5, #0]
 80121fc:	0601      	lsls	r1, r0, #24
 80121fe:	d501      	bpl.n	8012204 <_printf_i+0xec>
 8012200:	681e      	ldr	r6, [r3, #0]
 8012202:	e002      	b.n	801220a <_printf_i+0xf2>
 8012204:	0646      	lsls	r6, r0, #25
 8012206:	d5fb      	bpl.n	8012200 <_printf_i+0xe8>
 8012208:	881e      	ldrh	r6, [r3, #0]
 801220a:	4854      	ldr	r0, [pc, #336]	; (801235c <_printf_i+0x244>)
 801220c:	2f6f      	cmp	r7, #111	; 0x6f
 801220e:	bf0c      	ite	eq
 8012210:	2308      	moveq	r3, #8
 8012212:	230a      	movne	r3, #10
 8012214:	2100      	movs	r1, #0
 8012216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801221a:	6865      	ldr	r5, [r4, #4]
 801221c:	60a5      	str	r5, [r4, #8]
 801221e:	2d00      	cmp	r5, #0
 8012220:	bfa2      	ittt	ge
 8012222:	6821      	ldrge	r1, [r4, #0]
 8012224:	f021 0104 	bicge.w	r1, r1, #4
 8012228:	6021      	strge	r1, [r4, #0]
 801222a:	b90e      	cbnz	r6, 8012230 <_printf_i+0x118>
 801222c:	2d00      	cmp	r5, #0
 801222e:	d04d      	beq.n	80122cc <_printf_i+0x1b4>
 8012230:	4615      	mov	r5, r2
 8012232:	fbb6 f1f3 	udiv	r1, r6, r3
 8012236:	fb03 6711 	mls	r7, r3, r1, r6
 801223a:	5dc7      	ldrb	r7, [r0, r7]
 801223c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012240:	4637      	mov	r7, r6
 8012242:	42bb      	cmp	r3, r7
 8012244:	460e      	mov	r6, r1
 8012246:	d9f4      	bls.n	8012232 <_printf_i+0x11a>
 8012248:	2b08      	cmp	r3, #8
 801224a:	d10b      	bne.n	8012264 <_printf_i+0x14c>
 801224c:	6823      	ldr	r3, [r4, #0]
 801224e:	07de      	lsls	r6, r3, #31
 8012250:	d508      	bpl.n	8012264 <_printf_i+0x14c>
 8012252:	6923      	ldr	r3, [r4, #16]
 8012254:	6861      	ldr	r1, [r4, #4]
 8012256:	4299      	cmp	r1, r3
 8012258:	bfde      	ittt	le
 801225a:	2330      	movle	r3, #48	; 0x30
 801225c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012260:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012264:	1b52      	subs	r2, r2, r5
 8012266:	6122      	str	r2, [r4, #16]
 8012268:	f8cd a000 	str.w	sl, [sp]
 801226c:	464b      	mov	r3, r9
 801226e:	aa03      	add	r2, sp, #12
 8012270:	4621      	mov	r1, r4
 8012272:	4640      	mov	r0, r8
 8012274:	f7ff fee2 	bl	801203c <_printf_common>
 8012278:	3001      	adds	r0, #1
 801227a:	d14c      	bne.n	8012316 <_printf_i+0x1fe>
 801227c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012280:	b004      	add	sp, #16
 8012282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012286:	4835      	ldr	r0, [pc, #212]	; (801235c <_printf_i+0x244>)
 8012288:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801228c:	6829      	ldr	r1, [r5, #0]
 801228e:	6823      	ldr	r3, [r4, #0]
 8012290:	f851 6b04 	ldr.w	r6, [r1], #4
 8012294:	6029      	str	r1, [r5, #0]
 8012296:	061d      	lsls	r5, r3, #24
 8012298:	d514      	bpl.n	80122c4 <_printf_i+0x1ac>
 801229a:	07df      	lsls	r7, r3, #31
 801229c:	bf44      	itt	mi
 801229e:	f043 0320 	orrmi.w	r3, r3, #32
 80122a2:	6023      	strmi	r3, [r4, #0]
 80122a4:	b91e      	cbnz	r6, 80122ae <_printf_i+0x196>
 80122a6:	6823      	ldr	r3, [r4, #0]
 80122a8:	f023 0320 	bic.w	r3, r3, #32
 80122ac:	6023      	str	r3, [r4, #0]
 80122ae:	2310      	movs	r3, #16
 80122b0:	e7b0      	b.n	8012214 <_printf_i+0xfc>
 80122b2:	6823      	ldr	r3, [r4, #0]
 80122b4:	f043 0320 	orr.w	r3, r3, #32
 80122b8:	6023      	str	r3, [r4, #0]
 80122ba:	2378      	movs	r3, #120	; 0x78
 80122bc:	4828      	ldr	r0, [pc, #160]	; (8012360 <_printf_i+0x248>)
 80122be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80122c2:	e7e3      	b.n	801228c <_printf_i+0x174>
 80122c4:	0659      	lsls	r1, r3, #25
 80122c6:	bf48      	it	mi
 80122c8:	b2b6      	uxthmi	r6, r6
 80122ca:	e7e6      	b.n	801229a <_printf_i+0x182>
 80122cc:	4615      	mov	r5, r2
 80122ce:	e7bb      	b.n	8012248 <_printf_i+0x130>
 80122d0:	682b      	ldr	r3, [r5, #0]
 80122d2:	6826      	ldr	r6, [r4, #0]
 80122d4:	6961      	ldr	r1, [r4, #20]
 80122d6:	1d18      	adds	r0, r3, #4
 80122d8:	6028      	str	r0, [r5, #0]
 80122da:	0635      	lsls	r5, r6, #24
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	d501      	bpl.n	80122e4 <_printf_i+0x1cc>
 80122e0:	6019      	str	r1, [r3, #0]
 80122e2:	e002      	b.n	80122ea <_printf_i+0x1d2>
 80122e4:	0670      	lsls	r0, r6, #25
 80122e6:	d5fb      	bpl.n	80122e0 <_printf_i+0x1c8>
 80122e8:	8019      	strh	r1, [r3, #0]
 80122ea:	2300      	movs	r3, #0
 80122ec:	6123      	str	r3, [r4, #16]
 80122ee:	4615      	mov	r5, r2
 80122f0:	e7ba      	b.n	8012268 <_printf_i+0x150>
 80122f2:	682b      	ldr	r3, [r5, #0]
 80122f4:	1d1a      	adds	r2, r3, #4
 80122f6:	602a      	str	r2, [r5, #0]
 80122f8:	681d      	ldr	r5, [r3, #0]
 80122fa:	6862      	ldr	r2, [r4, #4]
 80122fc:	2100      	movs	r1, #0
 80122fe:	4628      	mov	r0, r5
 8012300:	f7ed fff6 	bl	80002f0 <memchr>
 8012304:	b108      	cbz	r0, 801230a <_printf_i+0x1f2>
 8012306:	1b40      	subs	r0, r0, r5
 8012308:	6060      	str	r0, [r4, #4]
 801230a:	6863      	ldr	r3, [r4, #4]
 801230c:	6123      	str	r3, [r4, #16]
 801230e:	2300      	movs	r3, #0
 8012310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012314:	e7a8      	b.n	8012268 <_printf_i+0x150>
 8012316:	6923      	ldr	r3, [r4, #16]
 8012318:	462a      	mov	r2, r5
 801231a:	4649      	mov	r1, r9
 801231c:	4640      	mov	r0, r8
 801231e:	47d0      	blx	sl
 8012320:	3001      	adds	r0, #1
 8012322:	d0ab      	beq.n	801227c <_printf_i+0x164>
 8012324:	6823      	ldr	r3, [r4, #0]
 8012326:	079b      	lsls	r3, r3, #30
 8012328:	d413      	bmi.n	8012352 <_printf_i+0x23a>
 801232a:	68e0      	ldr	r0, [r4, #12]
 801232c:	9b03      	ldr	r3, [sp, #12]
 801232e:	4298      	cmp	r0, r3
 8012330:	bfb8      	it	lt
 8012332:	4618      	movlt	r0, r3
 8012334:	e7a4      	b.n	8012280 <_printf_i+0x168>
 8012336:	2301      	movs	r3, #1
 8012338:	4632      	mov	r2, r6
 801233a:	4649      	mov	r1, r9
 801233c:	4640      	mov	r0, r8
 801233e:	47d0      	blx	sl
 8012340:	3001      	adds	r0, #1
 8012342:	d09b      	beq.n	801227c <_printf_i+0x164>
 8012344:	3501      	adds	r5, #1
 8012346:	68e3      	ldr	r3, [r4, #12]
 8012348:	9903      	ldr	r1, [sp, #12]
 801234a:	1a5b      	subs	r3, r3, r1
 801234c:	42ab      	cmp	r3, r5
 801234e:	dcf2      	bgt.n	8012336 <_printf_i+0x21e>
 8012350:	e7eb      	b.n	801232a <_printf_i+0x212>
 8012352:	2500      	movs	r5, #0
 8012354:	f104 0619 	add.w	r6, r4, #25
 8012358:	e7f5      	b.n	8012346 <_printf_i+0x22e>
 801235a:	bf00      	nop
 801235c:	08016036 	.word	0x08016036
 8012360:	08016047 	.word	0x08016047

08012364 <_puts_r>:
 8012364:	b570      	push	{r4, r5, r6, lr}
 8012366:	460e      	mov	r6, r1
 8012368:	4605      	mov	r5, r0
 801236a:	b118      	cbz	r0, 8012374 <_puts_r+0x10>
 801236c:	6983      	ldr	r3, [r0, #24]
 801236e:	b90b      	cbnz	r3, 8012374 <_puts_r+0x10>
 8012370:	f001 f842 	bl	80133f8 <__sinit>
 8012374:	69ab      	ldr	r3, [r5, #24]
 8012376:	68ac      	ldr	r4, [r5, #8]
 8012378:	b913      	cbnz	r3, 8012380 <_puts_r+0x1c>
 801237a:	4628      	mov	r0, r5
 801237c:	f001 f83c 	bl	80133f8 <__sinit>
 8012380:	4b2c      	ldr	r3, [pc, #176]	; (8012434 <_puts_r+0xd0>)
 8012382:	429c      	cmp	r4, r3
 8012384:	d120      	bne.n	80123c8 <_puts_r+0x64>
 8012386:	686c      	ldr	r4, [r5, #4]
 8012388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801238a:	07db      	lsls	r3, r3, #31
 801238c:	d405      	bmi.n	801239a <_puts_r+0x36>
 801238e:	89a3      	ldrh	r3, [r4, #12]
 8012390:	0598      	lsls	r0, r3, #22
 8012392:	d402      	bmi.n	801239a <_puts_r+0x36>
 8012394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012396:	f001 f8d2 	bl	801353e <__retarget_lock_acquire_recursive>
 801239a:	89a3      	ldrh	r3, [r4, #12]
 801239c:	0719      	lsls	r1, r3, #28
 801239e:	d51d      	bpl.n	80123dc <_puts_r+0x78>
 80123a0:	6923      	ldr	r3, [r4, #16]
 80123a2:	b1db      	cbz	r3, 80123dc <_puts_r+0x78>
 80123a4:	3e01      	subs	r6, #1
 80123a6:	68a3      	ldr	r3, [r4, #8]
 80123a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80123ac:	3b01      	subs	r3, #1
 80123ae:	60a3      	str	r3, [r4, #8]
 80123b0:	bb39      	cbnz	r1, 8012402 <_puts_r+0x9e>
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	da38      	bge.n	8012428 <_puts_r+0xc4>
 80123b6:	4622      	mov	r2, r4
 80123b8:	210a      	movs	r1, #10
 80123ba:	4628      	mov	r0, r5
 80123bc:	f000 f848 	bl	8012450 <__swbuf_r>
 80123c0:	3001      	adds	r0, #1
 80123c2:	d011      	beq.n	80123e8 <_puts_r+0x84>
 80123c4:	250a      	movs	r5, #10
 80123c6:	e011      	b.n	80123ec <_puts_r+0x88>
 80123c8:	4b1b      	ldr	r3, [pc, #108]	; (8012438 <_puts_r+0xd4>)
 80123ca:	429c      	cmp	r4, r3
 80123cc:	d101      	bne.n	80123d2 <_puts_r+0x6e>
 80123ce:	68ac      	ldr	r4, [r5, #8]
 80123d0:	e7da      	b.n	8012388 <_puts_r+0x24>
 80123d2:	4b1a      	ldr	r3, [pc, #104]	; (801243c <_puts_r+0xd8>)
 80123d4:	429c      	cmp	r4, r3
 80123d6:	bf08      	it	eq
 80123d8:	68ec      	ldreq	r4, [r5, #12]
 80123da:	e7d5      	b.n	8012388 <_puts_r+0x24>
 80123dc:	4621      	mov	r1, r4
 80123de:	4628      	mov	r0, r5
 80123e0:	f000 f888 	bl	80124f4 <__swsetup_r>
 80123e4:	2800      	cmp	r0, #0
 80123e6:	d0dd      	beq.n	80123a4 <_puts_r+0x40>
 80123e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80123ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123ee:	07da      	lsls	r2, r3, #31
 80123f0:	d405      	bmi.n	80123fe <_puts_r+0x9a>
 80123f2:	89a3      	ldrh	r3, [r4, #12]
 80123f4:	059b      	lsls	r3, r3, #22
 80123f6:	d402      	bmi.n	80123fe <_puts_r+0x9a>
 80123f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123fa:	f001 f8a1 	bl	8013540 <__retarget_lock_release_recursive>
 80123fe:	4628      	mov	r0, r5
 8012400:	bd70      	pop	{r4, r5, r6, pc}
 8012402:	2b00      	cmp	r3, #0
 8012404:	da04      	bge.n	8012410 <_puts_r+0xac>
 8012406:	69a2      	ldr	r2, [r4, #24]
 8012408:	429a      	cmp	r2, r3
 801240a:	dc06      	bgt.n	801241a <_puts_r+0xb6>
 801240c:	290a      	cmp	r1, #10
 801240e:	d004      	beq.n	801241a <_puts_r+0xb6>
 8012410:	6823      	ldr	r3, [r4, #0]
 8012412:	1c5a      	adds	r2, r3, #1
 8012414:	6022      	str	r2, [r4, #0]
 8012416:	7019      	strb	r1, [r3, #0]
 8012418:	e7c5      	b.n	80123a6 <_puts_r+0x42>
 801241a:	4622      	mov	r2, r4
 801241c:	4628      	mov	r0, r5
 801241e:	f000 f817 	bl	8012450 <__swbuf_r>
 8012422:	3001      	adds	r0, #1
 8012424:	d1bf      	bne.n	80123a6 <_puts_r+0x42>
 8012426:	e7df      	b.n	80123e8 <_puts_r+0x84>
 8012428:	6823      	ldr	r3, [r4, #0]
 801242a:	250a      	movs	r5, #10
 801242c:	1c5a      	adds	r2, r3, #1
 801242e:	6022      	str	r2, [r4, #0]
 8012430:	701d      	strb	r5, [r3, #0]
 8012432:	e7db      	b.n	80123ec <_puts_r+0x88>
 8012434:	08016108 	.word	0x08016108
 8012438:	08016128 	.word	0x08016128
 801243c:	080160e8 	.word	0x080160e8

08012440 <puts>:
 8012440:	4b02      	ldr	r3, [pc, #8]	; (801244c <puts+0xc>)
 8012442:	4601      	mov	r1, r0
 8012444:	6818      	ldr	r0, [r3, #0]
 8012446:	f7ff bf8d 	b.w	8012364 <_puts_r>
 801244a:	bf00      	nop
 801244c:	24000240 	.word	0x24000240

08012450 <__swbuf_r>:
 8012450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012452:	460e      	mov	r6, r1
 8012454:	4614      	mov	r4, r2
 8012456:	4605      	mov	r5, r0
 8012458:	b118      	cbz	r0, 8012462 <__swbuf_r+0x12>
 801245a:	6983      	ldr	r3, [r0, #24]
 801245c:	b90b      	cbnz	r3, 8012462 <__swbuf_r+0x12>
 801245e:	f000 ffcb 	bl	80133f8 <__sinit>
 8012462:	4b21      	ldr	r3, [pc, #132]	; (80124e8 <__swbuf_r+0x98>)
 8012464:	429c      	cmp	r4, r3
 8012466:	d12b      	bne.n	80124c0 <__swbuf_r+0x70>
 8012468:	686c      	ldr	r4, [r5, #4]
 801246a:	69a3      	ldr	r3, [r4, #24]
 801246c:	60a3      	str	r3, [r4, #8]
 801246e:	89a3      	ldrh	r3, [r4, #12]
 8012470:	071a      	lsls	r2, r3, #28
 8012472:	d52f      	bpl.n	80124d4 <__swbuf_r+0x84>
 8012474:	6923      	ldr	r3, [r4, #16]
 8012476:	b36b      	cbz	r3, 80124d4 <__swbuf_r+0x84>
 8012478:	6923      	ldr	r3, [r4, #16]
 801247a:	6820      	ldr	r0, [r4, #0]
 801247c:	1ac0      	subs	r0, r0, r3
 801247e:	6963      	ldr	r3, [r4, #20]
 8012480:	b2f6      	uxtb	r6, r6
 8012482:	4283      	cmp	r3, r0
 8012484:	4637      	mov	r7, r6
 8012486:	dc04      	bgt.n	8012492 <__swbuf_r+0x42>
 8012488:	4621      	mov	r1, r4
 801248a:	4628      	mov	r0, r5
 801248c:	f000 ff20 	bl	80132d0 <_fflush_r>
 8012490:	bb30      	cbnz	r0, 80124e0 <__swbuf_r+0x90>
 8012492:	68a3      	ldr	r3, [r4, #8]
 8012494:	3b01      	subs	r3, #1
 8012496:	60a3      	str	r3, [r4, #8]
 8012498:	6823      	ldr	r3, [r4, #0]
 801249a:	1c5a      	adds	r2, r3, #1
 801249c:	6022      	str	r2, [r4, #0]
 801249e:	701e      	strb	r6, [r3, #0]
 80124a0:	6963      	ldr	r3, [r4, #20]
 80124a2:	3001      	adds	r0, #1
 80124a4:	4283      	cmp	r3, r0
 80124a6:	d004      	beq.n	80124b2 <__swbuf_r+0x62>
 80124a8:	89a3      	ldrh	r3, [r4, #12]
 80124aa:	07db      	lsls	r3, r3, #31
 80124ac:	d506      	bpl.n	80124bc <__swbuf_r+0x6c>
 80124ae:	2e0a      	cmp	r6, #10
 80124b0:	d104      	bne.n	80124bc <__swbuf_r+0x6c>
 80124b2:	4621      	mov	r1, r4
 80124b4:	4628      	mov	r0, r5
 80124b6:	f000 ff0b 	bl	80132d0 <_fflush_r>
 80124ba:	b988      	cbnz	r0, 80124e0 <__swbuf_r+0x90>
 80124bc:	4638      	mov	r0, r7
 80124be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124c0:	4b0a      	ldr	r3, [pc, #40]	; (80124ec <__swbuf_r+0x9c>)
 80124c2:	429c      	cmp	r4, r3
 80124c4:	d101      	bne.n	80124ca <__swbuf_r+0x7a>
 80124c6:	68ac      	ldr	r4, [r5, #8]
 80124c8:	e7cf      	b.n	801246a <__swbuf_r+0x1a>
 80124ca:	4b09      	ldr	r3, [pc, #36]	; (80124f0 <__swbuf_r+0xa0>)
 80124cc:	429c      	cmp	r4, r3
 80124ce:	bf08      	it	eq
 80124d0:	68ec      	ldreq	r4, [r5, #12]
 80124d2:	e7ca      	b.n	801246a <__swbuf_r+0x1a>
 80124d4:	4621      	mov	r1, r4
 80124d6:	4628      	mov	r0, r5
 80124d8:	f000 f80c 	bl	80124f4 <__swsetup_r>
 80124dc:	2800      	cmp	r0, #0
 80124de:	d0cb      	beq.n	8012478 <__swbuf_r+0x28>
 80124e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80124e4:	e7ea      	b.n	80124bc <__swbuf_r+0x6c>
 80124e6:	bf00      	nop
 80124e8:	08016108 	.word	0x08016108
 80124ec:	08016128 	.word	0x08016128
 80124f0:	080160e8 	.word	0x080160e8

080124f4 <__swsetup_r>:
 80124f4:	4b32      	ldr	r3, [pc, #200]	; (80125c0 <__swsetup_r+0xcc>)
 80124f6:	b570      	push	{r4, r5, r6, lr}
 80124f8:	681d      	ldr	r5, [r3, #0]
 80124fa:	4606      	mov	r6, r0
 80124fc:	460c      	mov	r4, r1
 80124fe:	b125      	cbz	r5, 801250a <__swsetup_r+0x16>
 8012500:	69ab      	ldr	r3, [r5, #24]
 8012502:	b913      	cbnz	r3, 801250a <__swsetup_r+0x16>
 8012504:	4628      	mov	r0, r5
 8012506:	f000 ff77 	bl	80133f8 <__sinit>
 801250a:	4b2e      	ldr	r3, [pc, #184]	; (80125c4 <__swsetup_r+0xd0>)
 801250c:	429c      	cmp	r4, r3
 801250e:	d10f      	bne.n	8012530 <__swsetup_r+0x3c>
 8012510:	686c      	ldr	r4, [r5, #4]
 8012512:	89a3      	ldrh	r3, [r4, #12]
 8012514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012518:	0719      	lsls	r1, r3, #28
 801251a:	d42c      	bmi.n	8012576 <__swsetup_r+0x82>
 801251c:	06dd      	lsls	r5, r3, #27
 801251e:	d411      	bmi.n	8012544 <__swsetup_r+0x50>
 8012520:	2309      	movs	r3, #9
 8012522:	6033      	str	r3, [r6, #0]
 8012524:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012528:	81a3      	strh	r3, [r4, #12]
 801252a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801252e:	e03e      	b.n	80125ae <__swsetup_r+0xba>
 8012530:	4b25      	ldr	r3, [pc, #148]	; (80125c8 <__swsetup_r+0xd4>)
 8012532:	429c      	cmp	r4, r3
 8012534:	d101      	bne.n	801253a <__swsetup_r+0x46>
 8012536:	68ac      	ldr	r4, [r5, #8]
 8012538:	e7eb      	b.n	8012512 <__swsetup_r+0x1e>
 801253a:	4b24      	ldr	r3, [pc, #144]	; (80125cc <__swsetup_r+0xd8>)
 801253c:	429c      	cmp	r4, r3
 801253e:	bf08      	it	eq
 8012540:	68ec      	ldreq	r4, [r5, #12]
 8012542:	e7e6      	b.n	8012512 <__swsetup_r+0x1e>
 8012544:	0758      	lsls	r0, r3, #29
 8012546:	d512      	bpl.n	801256e <__swsetup_r+0x7a>
 8012548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801254a:	b141      	cbz	r1, 801255e <__swsetup_r+0x6a>
 801254c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012550:	4299      	cmp	r1, r3
 8012552:	d002      	beq.n	801255a <__swsetup_r+0x66>
 8012554:	4630      	mov	r0, r6
 8012556:	f001 fc09 	bl	8013d6c <_free_r>
 801255a:	2300      	movs	r3, #0
 801255c:	6363      	str	r3, [r4, #52]	; 0x34
 801255e:	89a3      	ldrh	r3, [r4, #12]
 8012560:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012564:	81a3      	strh	r3, [r4, #12]
 8012566:	2300      	movs	r3, #0
 8012568:	6063      	str	r3, [r4, #4]
 801256a:	6923      	ldr	r3, [r4, #16]
 801256c:	6023      	str	r3, [r4, #0]
 801256e:	89a3      	ldrh	r3, [r4, #12]
 8012570:	f043 0308 	orr.w	r3, r3, #8
 8012574:	81a3      	strh	r3, [r4, #12]
 8012576:	6923      	ldr	r3, [r4, #16]
 8012578:	b94b      	cbnz	r3, 801258e <__swsetup_r+0x9a>
 801257a:	89a3      	ldrh	r3, [r4, #12]
 801257c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012584:	d003      	beq.n	801258e <__swsetup_r+0x9a>
 8012586:	4621      	mov	r1, r4
 8012588:	4630      	mov	r0, r6
 801258a:	f000 ffff 	bl	801358c <__smakebuf_r>
 801258e:	89a0      	ldrh	r0, [r4, #12]
 8012590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012594:	f010 0301 	ands.w	r3, r0, #1
 8012598:	d00a      	beq.n	80125b0 <__swsetup_r+0xbc>
 801259a:	2300      	movs	r3, #0
 801259c:	60a3      	str	r3, [r4, #8]
 801259e:	6963      	ldr	r3, [r4, #20]
 80125a0:	425b      	negs	r3, r3
 80125a2:	61a3      	str	r3, [r4, #24]
 80125a4:	6923      	ldr	r3, [r4, #16]
 80125a6:	b943      	cbnz	r3, 80125ba <__swsetup_r+0xc6>
 80125a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80125ac:	d1ba      	bne.n	8012524 <__swsetup_r+0x30>
 80125ae:	bd70      	pop	{r4, r5, r6, pc}
 80125b0:	0781      	lsls	r1, r0, #30
 80125b2:	bf58      	it	pl
 80125b4:	6963      	ldrpl	r3, [r4, #20]
 80125b6:	60a3      	str	r3, [r4, #8]
 80125b8:	e7f4      	b.n	80125a4 <__swsetup_r+0xb0>
 80125ba:	2000      	movs	r0, #0
 80125bc:	e7f7      	b.n	80125ae <__swsetup_r+0xba>
 80125be:	bf00      	nop
 80125c0:	24000240 	.word	0x24000240
 80125c4:	08016108 	.word	0x08016108
 80125c8:	08016128 	.word	0x08016128
 80125cc:	080160e8 	.word	0x080160e8

080125d0 <quorem>:
 80125d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125d4:	6903      	ldr	r3, [r0, #16]
 80125d6:	690c      	ldr	r4, [r1, #16]
 80125d8:	42a3      	cmp	r3, r4
 80125da:	4607      	mov	r7, r0
 80125dc:	f2c0 8081 	blt.w	80126e2 <quorem+0x112>
 80125e0:	3c01      	subs	r4, #1
 80125e2:	f101 0814 	add.w	r8, r1, #20
 80125e6:	f100 0514 	add.w	r5, r0, #20
 80125ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80125ee:	9301      	str	r3, [sp, #4]
 80125f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80125f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80125f8:	3301      	adds	r3, #1
 80125fa:	429a      	cmp	r2, r3
 80125fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012600:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012604:	fbb2 f6f3 	udiv	r6, r2, r3
 8012608:	d331      	bcc.n	801266e <quorem+0x9e>
 801260a:	f04f 0e00 	mov.w	lr, #0
 801260e:	4640      	mov	r0, r8
 8012610:	46ac      	mov	ip, r5
 8012612:	46f2      	mov	sl, lr
 8012614:	f850 2b04 	ldr.w	r2, [r0], #4
 8012618:	b293      	uxth	r3, r2
 801261a:	fb06 e303 	mla	r3, r6, r3, lr
 801261e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012622:	b29b      	uxth	r3, r3
 8012624:	ebaa 0303 	sub.w	r3, sl, r3
 8012628:	f8dc a000 	ldr.w	sl, [ip]
 801262c:	0c12      	lsrs	r2, r2, #16
 801262e:	fa13 f38a 	uxtah	r3, r3, sl
 8012632:	fb06 e202 	mla	r2, r6, r2, lr
 8012636:	9300      	str	r3, [sp, #0]
 8012638:	9b00      	ldr	r3, [sp, #0]
 801263a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801263e:	b292      	uxth	r2, r2
 8012640:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012648:	f8bd 3000 	ldrh.w	r3, [sp]
 801264c:	4581      	cmp	r9, r0
 801264e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012652:	f84c 3b04 	str.w	r3, [ip], #4
 8012656:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801265a:	d2db      	bcs.n	8012614 <quorem+0x44>
 801265c:	f855 300b 	ldr.w	r3, [r5, fp]
 8012660:	b92b      	cbnz	r3, 801266e <quorem+0x9e>
 8012662:	9b01      	ldr	r3, [sp, #4]
 8012664:	3b04      	subs	r3, #4
 8012666:	429d      	cmp	r5, r3
 8012668:	461a      	mov	r2, r3
 801266a:	d32e      	bcc.n	80126ca <quorem+0xfa>
 801266c:	613c      	str	r4, [r7, #16]
 801266e:	4638      	mov	r0, r7
 8012670:	f001 fa64 	bl	8013b3c <__mcmp>
 8012674:	2800      	cmp	r0, #0
 8012676:	db24      	blt.n	80126c2 <quorem+0xf2>
 8012678:	3601      	adds	r6, #1
 801267a:	4628      	mov	r0, r5
 801267c:	f04f 0c00 	mov.w	ip, #0
 8012680:	f858 2b04 	ldr.w	r2, [r8], #4
 8012684:	f8d0 e000 	ldr.w	lr, [r0]
 8012688:	b293      	uxth	r3, r2
 801268a:	ebac 0303 	sub.w	r3, ip, r3
 801268e:	0c12      	lsrs	r2, r2, #16
 8012690:	fa13 f38e 	uxtah	r3, r3, lr
 8012694:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012698:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801269c:	b29b      	uxth	r3, r3
 801269e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126a2:	45c1      	cmp	r9, r8
 80126a4:	f840 3b04 	str.w	r3, [r0], #4
 80126a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80126ac:	d2e8      	bcs.n	8012680 <quorem+0xb0>
 80126ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80126b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80126b6:	b922      	cbnz	r2, 80126c2 <quorem+0xf2>
 80126b8:	3b04      	subs	r3, #4
 80126ba:	429d      	cmp	r5, r3
 80126bc:	461a      	mov	r2, r3
 80126be:	d30a      	bcc.n	80126d6 <quorem+0x106>
 80126c0:	613c      	str	r4, [r7, #16]
 80126c2:	4630      	mov	r0, r6
 80126c4:	b003      	add	sp, #12
 80126c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ca:	6812      	ldr	r2, [r2, #0]
 80126cc:	3b04      	subs	r3, #4
 80126ce:	2a00      	cmp	r2, #0
 80126d0:	d1cc      	bne.n	801266c <quorem+0x9c>
 80126d2:	3c01      	subs	r4, #1
 80126d4:	e7c7      	b.n	8012666 <quorem+0x96>
 80126d6:	6812      	ldr	r2, [r2, #0]
 80126d8:	3b04      	subs	r3, #4
 80126da:	2a00      	cmp	r2, #0
 80126dc:	d1f0      	bne.n	80126c0 <quorem+0xf0>
 80126de:	3c01      	subs	r4, #1
 80126e0:	e7eb      	b.n	80126ba <quorem+0xea>
 80126e2:	2000      	movs	r0, #0
 80126e4:	e7ee      	b.n	80126c4 <quorem+0xf4>
	...

080126e8 <_dtoa_r>:
 80126e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ec:	ed2d 8b02 	vpush	{d8}
 80126f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80126f2:	b091      	sub	sp, #68	; 0x44
 80126f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80126f8:	ec59 8b10 	vmov	r8, r9, d0
 80126fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80126fe:	9106      	str	r1, [sp, #24]
 8012700:	4606      	mov	r6, r0
 8012702:	9208      	str	r2, [sp, #32]
 8012704:	930c      	str	r3, [sp, #48]	; 0x30
 8012706:	b975      	cbnz	r5, 8012726 <_dtoa_r+0x3e>
 8012708:	2010      	movs	r0, #16
 801270a:	f000 ff7f 	bl	801360c <malloc>
 801270e:	4602      	mov	r2, r0
 8012710:	6270      	str	r0, [r6, #36]	; 0x24
 8012712:	b920      	cbnz	r0, 801271e <_dtoa_r+0x36>
 8012714:	4baa      	ldr	r3, [pc, #680]	; (80129c0 <_dtoa_r+0x2d8>)
 8012716:	21ea      	movs	r1, #234	; 0xea
 8012718:	48aa      	ldr	r0, [pc, #680]	; (80129c4 <_dtoa_r+0x2dc>)
 801271a:	f001 fc6d 	bl	8013ff8 <__assert_func>
 801271e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012722:	6005      	str	r5, [r0, #0]
 8012724:	60c5      	str	r5, [r0, #12]
 8012726:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012728:	6819      	ldr	r1, [r3, #0]
 801272a:	b151      	cbz	r1, 8012742 <_dtoa_r+0x5a>
 801272c:	685a      	ldr	r2, [r3, #4]
 801272e:	604a      	str	r2, [r1, #4]
 8012730:	2301      	movs	r3, #1
 8012732:	4093      	lsls	r3, r2
 8012734:	608b      	str	r3, [r1, #8]
 8012736:	4630      	mov	r0, r6
 8012738:	f000 ffbe 	bl	80136b8 <_Bfree>
 801273c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801273e:	2200      	movs	r2, #0
 8012740:	601a      	str	r2, [r3, #0]
 8012742:	f1b9 0300 	subs.w	r3, r9, #0
 8012746:	bfbb      	ittet	lt
 8012748:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801274c:	9303      	strlt	r3, [sp, #12]
 801274e:	2300      	movge	r3, #0
 8012750:	2201      	movlt	r2, #1
 8012752:	bfac      	ite	ge
 8012754:	6023      	strge	r3, [r4, #0]
 8012756:	6022      	strlt	r2, [r4, #0]
 8012758:	4b9b      	ldr	r3, [pc, #620]	; (80129c8 <_dtoa_r+0x2e0>)
 801275a:	9c03      	ldr	r4, [sp, #12]
 801275c:	43a3      	bics	r3, r4
 801275e:	d11c      	bne.n	801279a <_dtoa_r+0xb2>
 8012760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012762:	f242 730f 	movw	r3, #9999	; 0x270f
 8012766:	6013      	str	r3, [r2, #0]
 8012768:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801276c:	ea53 0308 	orrs.w	r3, r3, r8
 8012770:	f000 84fd 	beq.w	801316e <_dtoa_r+0xa86>
 8012774:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012776:	b963      	cbnz	r3, 8012792 <_dtoa_r+0xaa>
 8012778:	4b94      	ldr	r3, [pc, #592]	; (80129cc <_dtoa_r+0x2e4>)
 801277a:	e01f      	b.n	80127bc <_dtoa_r+0xd4>
 801277c:	4b94      	ldr	r3, [pc, #592]	; (80129d0 <_dtoa_r+0x2e8>)
 801277e:	9301      	str	r3, [sp, #4]
 8012780:	3308      	adds	r3, #8
 8012782:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012784:	6013      	str	r3, [r2, #0]
 8012786:	9801      	ldr	r0, [sp, #4]
 8012788:	b011      	add	sp, #68	; 0x44
 801278a:	ecbd 8b02 	vpop	{d8}
 801278e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012792:	4b8e      	ldr	r3, [pc, #568]	; (80129cc <_dtoa_r+0x2e4>)
 8012794:	9301      	str	r3, [sp, #4]
 8012796:	3303      	adds	r3, #3
 8012798:	e7f3      	b.n	8012782 <_dtoa_r+0x9a>
 801279a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801279e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80127a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127a6:	d10b      	bne.n	80127c0 <_dtoa_r+0xd8>
 80127a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80127aa:	2301      	movs	r3, #1
 80127ac:	6013      	str	r3, [r2, #0]
 80127ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	f000 84d9 	beq.w	8013168 <_dtoa_r+0xa80>
 80127b6:	4887      	ldr	r0, [pc, #540]	; (80129d4 <_dtoa_r+0x2ec>)
 80127b8:	6018      	str	r0, [r3, #0]
 80127ba:	1e43      	subs	r3, r0, #1
 80127bc:	9301      	str	r3, [sp, #4]
 80127be:	e7e2      	b.n	8012786 <_dtoa_r+0x9e>
 80127c0:	a90f      	add	r1, sp, #60	; 0x3c
 80127c2:	aa0e      	add	r2, sp, #56	; 0x38
 80127c4:	4630      	mov	r0, r6
 80127c6:	eeb0 0b48 	vmov.f64	d0, d8
 80127ca:	f001 fa5d 	bl	8013c88 <__d2b>
 80127ce:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80127d2:	4605      	mov	r5, r0
 80127d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80127d6:	2900      	cmp	r1, #0
 80127d8:	d046      	beq.n	8012868 <_dtoa_r+0x180>
 80127da:	ee18 4a90 	vmov	r4, s17
 80127de:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80127e2:	ec53 2b18 	vmov	r2, r3, d8
 80127e6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80127ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80127ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80127f2:	2400      	movs	r4, #0
 80127f4:	ec43 2b16 	vmov	d6, r2, r3
 80127f8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80127fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80129a8 <_dtoa_r+0x2c0>
 8012800:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012804:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80129b0 <_dtoa_r+0x2c8>
 8012808:	eea7 6b05 	vfma.f64	d6, d7, d5
 801280c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80129b8 <_dtoa_r+0x2d0>
 8012810:	ee07 1a90 	vmov	s15, r1
 8012814:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012818:	eeb0 7b46 	vmov.f64	d7, d6
 801281c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012820:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012824:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801282c:	ee16 ba90 	vmov	fp, s13
 8012830:	940a      	str	r4, [sp, #40]	; 0x28
 8012832:	d508      	bpl.n	8012846 <_dtoa_r+0x15e>
 8012834:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012838:	eeb4 6b47 	vcmp.f64	d6, d7
 801283c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012840:	bf18      	it	ne
 8012842:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8012846:	f1bb 0f16 	cmp.w	fp, #22
 801284a:	d82f      	bhi.n	80128ac <_dtoa_r+0x1c4>
 801284c:	4b62      	ldr	r3, [pc, #392]	; (80129d8 <_dtoa_r+0x2f0>)
 801284e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012852:	ed93 7b00 	vldr	d7, [r3]
 8012856:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801285a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801285e:	d501      	bpl.n	8012864 <_dtoa_r+0x17c>
 8012860:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012864:	2300      	movs	r3, #0
 8012866:	e022      	b.n	80128ae <_dtoa_r+0x1c6>
 8012868:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801286a:	4401      	add	r1, r0
 801286c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012870:	2b20      	cmp	r3, #32
 8012872:	bfc1      	itttt	gt
 8012874:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012878:	fa04 f303 	lslgt.w	r3, r4, r3
 801287c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012880:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012884:	bfd6      	itet	le
 8012886:	f1c3 0320 	rsble	r3, r3, #32
 801288a:	ea43 0808 	orrgt.w	r8, r3, r8
 801288e:	fa08 f803 	lslle.w	r8, r8, r3
 8012892:	ee07 8a90 	vmov	s15, r8
 8012896:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801289a:	3901      	subs	r1, #1
 801289c:	ee17 4a90 	vmov	r4, s15
 80128a0:	ec53 2b17 	vmov	r2, r3, d7
 80128a4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80128a8:	2401      	movs	r4, #1
 80128aa:	e7a3      	b.n	80127f4 <_dtoa_r+0x10c>
 80128ac:	2301      	movs	r3, #1
 80128ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80128b0:	1a43      	subs	r3, r0, r1
 80128b2:	1e5a      	subs	r2, r3, #1
 80128b4:	bf45      	ittet	mi
 80128b6:	f1c3 0301 	rsbmi	r3, r3, #1
 80128ba:	9304      	strmi	r3, [sp, #16]
 80128bc:	2300      	movpl	r3, #0
 80128be:	2300      	movmi	r3, #0
 80128c0:	9205      	str	r2, [sp, #20]
 80128c2:	bf54      	ite	pl
 80128c4:	9304      	strpl	r3, [sp, #16]
 80128c6:	9305      	strmi	r3, [sp, #20]
 80128c8:	f1bb 0f00 	cmp.w	fp, #0
 80128cc:	db18      	blt.n	8012900 <_dtoa_r+0x218>
 80128ce:	9b05      	ldr	r3, [sp, #20]
 80128d0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80128d4:	445b      	add	r3, fp
 80128d6:	9305      	str	r3, [sp, #20]
 80128d8:	2300      	movs	r3, #0
 80128da:	9a06      	ldr	r2, [sp, #24]
 80128dc:	2a09      	cmp	r2, #9
 80128de:	d849      	bhi.n	8012974 <_dtoa_r+0x28c>
 80128e0:	2a05      	cmp	r2, #5
 80128e2:	bfc4      	itt	gt
 80128e4:	3a04      	subgt	r2, #4
 80128e6:	9206      	strgt	r2, [sp, #24]
 80128e8:	9a06      	ldr	r2, [sp, #24]
 80128ea:	f1a2 0202 	sub.w	r2, r2, #2
 80128ee:	bfcc      	ite	gt
 80128f0:	2400      	movgt	r4, #0
 80128f2:	2401      	movle	r4, #1
 80128f4:	2a03      	cmp	r2, #3
 80128f6:	d848      	bhi.n	801298a <_dtoa_r+0x2a2>
 80128f8:	e8df f002 	tbb	[pc, r2]
 80128fc:	3a2c2e0b 	.word	0x3a2c2e0b
 8012900:	9b04      	ldr	r3, [sp, #16]
 8012902:	2200      	movs	r2, #0
 8012904:	eba3 030b 	sub.w	r3, r3, fp
 8012908:	9304      	str	r3, [sp, #16]
 801290a:	9209      	str	r2, [sp, #36]	; 0x24
 801290c:	f1cb 0300 	rsb	r3, fp, #0
 8012910:	e7e3      	b.n	80128da <_dtoa_r+0x1f2>
 8012912:	2200      	movs	r2, #0
 8012914:	9207      	str	r2, [sp, #28]
 8012916:	9a08      	ldr	r2, [sp, #32]
 8012918:	2a00      	cmp	r2, #0
 801291a:	dc39      	bgt.n	8012990 <_dtoa_r+0x2a8>
 801291c:	f04f 0a01 	mov.w	sl, #1
 8012920:	46d1      	mov	r9, sl
 8012922:	4652      	mov	r2, sl
 8012924:	f8cd a020 	str.w	sl, [sp, #32]
 8012928:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801292a:	2100      	movs	r1, #0
 801292c:	6079      	str	r1, [r7, #4]
 801292e:	2004      	movs	r0, #4
 8012930:	f100 0c14 	add.w	ip, r0, #20
 8012934:	4594      	cmp	ip, r2
 8012936:	6879      	ldr	r1, [r7, #4]
 8012938:	d92f      	bls.n	801299a <_dtoa_r+0x2b2>
 801293a:	4630      	mov	r0, r6
 801293c:	930d      	str	r3, [sp, #52]	; 0x34
 801293e:	f000 fe7b 	bl	8013638 <_Balloc>
 8012942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012944:	9001      	str	r0, [sp, #4]
 8012946:	4602      	mov	r2, r0
 8012948:	2800      	cmp	r0, #0
 801294a:	d149      	bne.n	80129e0 <_dtoa_r+0x2f8>
 801294c:	4b23      	ldr	r3, [pc, #140]	; (80129dc <_dtoa_r+0x2f4>)
 801294e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012952:	e6e1      	b.n	8012718 <_dtoa_r+0x30>
 8012954:	2201      	movs	r2, #1
 8012956:	e7dd      	b.n	8012914 <_dtoa_r+0x22c>
 8012958:	2200      	movs	r2, #0
 801295a:	9207      	str	r2, [sp, #28]
 801295c:	9a08      	ldr	r2, [sp, #32]
 801295e:	eb0b 0a02 	add.w	sl, fp, r2
 8012962:	f10a 0901 	add.w	r9, sl, #1
 8012966:	464a      	mov	r2, r9
 8012968:	2a01      	cmp	r2, #1
 801296a:	bfb8      	it	lt
 801296c:	2201      	movlt	r2, #1
 801296e:	e7db      	b.n	8012928 <_dtoa_r+0x240>
 8012970:	2201      	movs	r2, #1
 8012972:	e7f2      	b.n	801295a <_dtoa_r+0x272>
 8012974:	2401      	movs	r4, #1
 8012976:	2200      	movs	r2, #0
 8012978:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801297c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012980:	2100      	movs	r1, #0
 8012982:	46d1      	mov	r9, sl
 8012984:	2212      	movs	r2, #18
 8012986:	9108      	str	r1, [sp, #32]
 8012988:	e7ce      	b.n	8012928 <_dtoa_r+0x240>
 801298a:	2201      	movs	r2, #1
 801298c:	9207      	str	r2, [sp, #28]
 801298e:	e7f5      	b.n	801297c <_dtoa_r+0x294>
 8012990:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012994:	46d1      	mov	r9, sl
 8012996:	4652      	mov	r2, sl
 8012998:	e7c6      	b.n	8012928 <_dtoa_r+0x240>
 801299a:	3101      	adds	r1, #1
 801299c:	6079      	str	r1, [r7, #4]
 801299e:	0040      	lsls	r0, r0, #1
 80129a0:	e7c6      	b.n	8012930 <_dtoa_r+0x248>
 80129a2:	bf00      	nop
 80129a4:	f3af 8000 	nop.w
 80129a8:	636f4361 	.word	0x636f4361
 80129ac:	3fd287a7 	.word	0x3fd287a7
 80129b0:	8b60c8b3 	.word	0x8b60c8b3
 80129b4:	3fc68a28 	.word	0x3fc68a28
 80129b8:	509f79fb 	.word	0x509f79fb
 80129bc:	3fd34413 	.word	0x3fd34413
 80129c0:	08016065 	.word	0x08016065
 80129c4:	0801607c 	.word	0x0801607c
 80129c8:	7ff00000 	.word	0x7ff00000
 80129cc:	08016061 	.word	0x08016061
 80129d0:	08016058 	.word	0x08016058
 80129d4:	08016035 	.word	0x08016035
 80129d8:	080161d0 	.word	0x080161d0
 80129dc:	080160d7 	.word	0x080160d7
 80129e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80129e2:	9901      	ldr	r1, [sp, #4]
 80129e4:	6011      	str	r1, [r2, #0]
 80129e6:	f1b9 0f0e 	cmp.w	r9, #14
 80129ea:	d86c      	bhi.n	8012ac6 <_dtoa_r+0x3de>
 80129ec:	2c00      	cmp	r4, #0
 80129ee:	d06a      	beq.n	8012ac6 <_dtoa_r+0x3de>
 80129f0:	f1bb 0f00 	cmp.w	fp, #0
 80129f4:	f340 80a0 	ble.w	8012b38 <_dtoa_r+0x450>
 80129f8:	49c1      	ldr	r1, [pc, #772]	; (8012d00 <_dtoa_r+0x618>)
 80129fa:	f00b 020f 	and.w	r2, fp, #15
 80129fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012a02:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012a06:	ed92 7b00 	vldr	d7, [r2]
 8012a0a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8012a0e:	f000 8087 	beq.w	8012b20 <_dtoa_r+0x438>
 8012a12:	4abc      	ldr	r2, [pc, #752]	; (8012d04 <_dtoa_r+0x61c>)
 8012a14:	ed92 6b08 	vldr	d6, [r2, #32]
 8012a18:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012a1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012a20:	f001 010f 	and.w	r1, r1, #15
 8012a24:	2203      	movs	r2, #3
 8012a26:	48b7      	ldr	r0, [pc, #732]	; (8012d04 <_dtoa_r+0x61c>)
 8012a28:	2900      	cmp	r1, #0
 8012a2a:	d17b      	bne.n	8012b24 <_dtoa_r+0x43c>
 8012a2c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012a30:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012a34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012a3a:	2900      	cmp	r1, #0
 8012a3c:	f000 80a2 	beq.w	8012b84 <_dtoa_r+0x49c>
 8012a40:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012a44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a48:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a50:	f140 8098 	bpl.w	8012b84 <_dtoa_r+0x49c>
 8012a54:	f1b9 0f00 	cmp.w	r9, #0
 8012a58:	f000 8094 	beq.w	8012b84 <_dtoa_r+0x49c>
 8012a5c:	f1ba 0f00 	cmp.w	sl, #0
 8012a60:	dd2f      	ble.n	8012ac2 <_dtoa_r+0x3da>
 8012a62:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012a66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012a6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a6e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8012a72:	3201      	adds	r2, #1
 8012a74:	4650      	mov	r0, sl
 8012a76:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012a7a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012a7e:	ee07 2a90 	vmov	s15, r2
 8012a82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012a86:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012a8a:	ee15 4a90 	vmov	r4, s11
 8012a8e:	ec52 1b15 	vmov	r1, r2, d5
 8012a92:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8012a96:	2800      	cmp	r0, #0
 8012a98:	d177      	bne.n	8012b8a <_dtoa_r+0x4a2>
 8012a9a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012a9e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012aa2:	ec42 1b17 	vmov	d7, r1, r2
 8012aa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aae:	f300 8263 	bgt.w	8012f78 <_dtoa_r+0x890>
 8012ab2:	eeb1 7b47 	vneg.f64	d7, d7
 8012ab6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012abe:	f100 8258 	bmi.w	8012f72 <_dtoa_r+0x88a>
 8012ac2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012ac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ac8:	2a00      	cmp	r2, #0
 8012aca:	f2c0 811d 	blt.w	8012d08 <_dtoa_r+0x620>
 8012ace:	f1bb 0f0e 	cmp.w	fp, #14
 8012ad2:	f300 8119 	bgt.w	8012d08 <_dtoa_r+0x620>
 8012ad6:	4b8a      	ldr	r3, [pc, #552]	; (8012d00 <_dtoa_r+0x618>)
 8012ad8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012adc:	ed93 6b00 	vldr	d6, [r3]
 8012ae0:	9b08      	ldr	r3, [sp, #32]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	f280 80b7 	bge.w	8012c56 <_dtoa_r+0x56e>
 8012ae8:	f1b9 0f00 	cmp.w	r9, #0
 8012aec:	f300 80b3 	bgt.w	8012c56 <_dtoa_r+0x56e>
 8012af0:	f040 823f 	bne.w	8012f72 <_dtoa_r+0x88a>
 8012af4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012af8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012afc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b08:	464c      	mov	r4, r9
 8012b0a:	464f      	mov	r7, r9
 8012b0c:	f280 8215 	bge.w	8012f3a <_dtoa_r+0x852>
 8012b10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012b14:	2331      	movs	r3, #49	; 0x31
 8012b16:	f808 3b01 	strb.w	r3, [r8], #1
 8012b1a:	f10b 0b01 	add.w	fp, fp, #1
 8012b1e:	e211      	b.n	8012f44 <_dtoa_r+0x85c>
 8012b20:	2202      	movs	r2, #2
 8012b22:	e780      	b.n	8012a26 <_dtoa_r+0x33e>
 8012b24:	07cc      	lsls	r4, r1, #31
 8012b26:	d504      	bpl.n	8012b32 <_dtoa_r+0x44a>
 8012b28:	ed90 6b00 	vldr	d6, [r0]
 8012b2c:	3201      	adds	r2, #1
 8012b2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012b32:	1049      	asrs	r1, r1, #1
 8012b34:	3008      	adds	r0, #8
 8012b36:	e777      	b.n	8012a28 <_dtoa_r+0x340>
 8012b38:	d022      	beq.n	8012b80 <_dtoa_r+0x498>
 8012b3a:	f1cb 0100 	rsb	r1, fp, #0
 8012b3e:	4a70      	ldr	r2, [pc, #448]	; (8012d00 <_dtoa_r+0x618>)
 8012b40:	f001 000f 	and.w	r0, r1, #15
 8012b44:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012b48:	ed92 7b00 	vldr	d7, [r2]
 8012b4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012b50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012b54:	486b      	ldr	r0, [pc, #428]	; (8012d04 <_dtoa_r+0x61c>)
 8012b56:	1109      	asrs	r1, r1, #4
 8012b58:	2400      	movs	r4, #0
 8012b5a:	2202      	movs	r2, #2
 8012b5c:	b929      	cbnz	r1, 8012b6a <_dtoa_r+0x482>
 8012b5e:	2c00      	cmp	r4, #0
 8012b60:	f43f af6a 	beq.w	8012a38 <_dtoa_r+0x350>
 8012b64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012b68:	e766      	b.n	8012a38 <_dtoa_r+0x350>
 8012b6a:	07cf      	lsls	r7, r1, #31
 8012b6c:	d505      	bpl.n	8012b7a <_dtoa_r+0x492>
 8012b6e:	ed90 6b00 	vldr	d6, [r0]
 8012b72:	3201      	adds	r2, #1
 8012b74:	2401      	movs	r4, #1
 8012b76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012b7a:	1049      	asrs	r1, r1, #1
 8012b7c:	3008      	adds	r0, #8
 8012b7e:	e7ed      	b.n	8012b5c <_dtoa_r+0x474>
 8012b80:	2202      	movs	r2, #2
 8012b82:	e759      	b.n	8012a38 <_dtoa_r+0x350>
 8012b84:	465f      	mov	r7, fp
 8012b86:	4648      	mov	r0, r9
 8012b88:	e775      	b.n	8012a76 <_dtoa_r+0x38e>
 8012b8a:	ec42 1b17 	vmov	d7, r1, r2
 8012b8e:	4a5c      	ldr	r2, [pc, #368]	; (8012d00 <_dtoa_r+0x618>)
 8012b90:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012b94:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012b98:	9a01      	ldr	r2, [sp, #4]
 8012b9a:	1814      	adds	r4, r2, r0
 8012b9c:	9a07      	ldr	r2, [sp, #28]
 8012b9e:	b352      	cbz	r2, 8012bf6 <_dtoa_r+0x50e>
 8012ba0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012ba4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012ba8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012bac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012bb0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012bb4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012bb8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012bbc:	ee14 2a90 	vmov	r2, s9
 8012bc0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012bc4:	3230      	adds	r2, #48	; 0x30
 8012bc6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012bca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd2:	f808 2b01 	strb.w	r2, [r8], #1
 8012bd6:	d439      	bmi.n	8012c4c <_dtoa_r+0x564>
 8012bd8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012bdc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012be4:	d472      	bmi.n	8012ccc <_dtoa_r+0x5e4>
 8012be6:	45a0      	cmp	r8, r4
 8012be8:	f43f af6b 	beq.w	8012ac2 <_dtoa_r+0x3da>
 8012bec:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012bf0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012bf4:	e7e0      	b.n	8012bb8 <_dtoa_r+0x4d0>
 8012bf6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012bfa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012bfe:	4621      	mov	r1, r4
 8012c00:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012c04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012c08:	ee14 2a90 	vmov	r2, s9
 8012c0c:	3230      	adds	r2, #48	; 0x30
 8012c0e:	f808 2b01 	strb.w	r2, [r8], #1
 8012c12:	45a0      	cmp	r8, r4
 8012c14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012c18:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012c1c:	d118      	bne.n	8012c50 <_dtoa_r+0x568>
 8012c1e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012c22:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012c26:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c2e:	dc4d      	bgt.n	8012ccc <_dtoa_r+0x5e4>
 8012c30:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012c34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c3c:	f57f af41 	bpl.w	8012ac2 <_dtoa_r+0x3da>
 8012c40:	4688      	mov	r8, r1
 8012c42:	3901      	subs	r1, #1
 8012c44:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012c48:	2b30      	cmp	r3, #48	; 0x30
 8012c4a:	d0f9      	beq.n	8012c40 <_dtoa_r+0x558>
 8012c4c:	46bb      	mov	fp, r7
 8012c4e:	e02a      	b.n	8012ca6 <_dtoa_r+0x5be>
 8012c50:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012c54:	e7d6      	b.n	8012c04 <_dtoa_r+0x51c>
 8012c56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c5a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012c5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012c62:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012c66:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012c6a:	ee15 3a10 	vmov	r3, s10
 8012c6e:	3330      	adds	r3, #48	; 0x30
 8012c70:	f808 3b01 	strb.w	r3, [r8], #1
 8012c74:	9b01      	ldr	r3, [sp, #4]
 8012c76:	eba8 0303 	sub.w	r3, r8, r3
 8012c7a:	4599      	cmp	r9, r3
 8012c7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012c80:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012c84:	d133      	bne.n	8012cee <_dtoa_r+0x606>
 8012c86:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012c8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c92:	dc1a      	bgt.n	8012cca <_dtoa_r+0x5e2>
 8012c94:	eeb4 7b46 	vcmp.f64	d7, d6
 8012c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c9c:	d103      	bne.n	8012ca6 <_dtoa_r+0x5be>
 8012c9e:	ee15 3a10 	vmov	r3, s10
 8012ca2:	07d9      	lsls	r1, r3, #31
 8012ca4:	d411      	bmi.n	8012cca <_dtoa_r+0x5e2>
 8012ca6:	4629      	mov	r1, r5
 8012ca8:	4630      	mov	r0, r6
 8012caa:	f000 fd05 	bl	80136b8 <_Bfree>
 8012cae:	2300      	movs	r3, #0
 8012cb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012cb2:	f888 3000 	strb.w	r3, [r8]
 8012cb6:	f10b 0301 	add.w	r3, fp, #1
 8012cba:	6013      	str	r3, [r2, #0]
 8012cbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	f43f ad61 	beq.w	8012786 <_dtoa_r+0x9e>
 8012cc4:	f8c3 8000 	str.w	r8, [r3]
 8012cc8:	e55d      	b.n	8012786 <_dtoa_r+0x9e>
 8012cca:	465f      	mov	r7, fp
 8012ccc:	4643      	mov	r3, r8
 8012cce:	4698      	mov	r8, r3
 8012cd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012cd4:	2a39      	cmp	r2, #57	; 0x39
 8012cd6:	d106      	bne.n	8012ce6 <_dtoa_r+0x5fe>
 8012cd8:	9a01      	ldr	r2, [sp, #4]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	d1f7      	bne.n	8012cce <_dtoa_r+0x5e6>
 8012cde:	9901      	ldr	r1, [sp, #4]
 8012ce0:	2230      	movs	r2, #48	; 0x30
 8012ce2:	3701      	adds	r7, #1
 8012ce4:	700a      	strb	r2, [r1, #0]
 8012ce6:	781a      	ldrb	r2, [r3, #0]
 8012ce8:	3201      	adds	r2, #1
 8012cea:	701a      	strb	r2, [r3, #0]
 8012cec:	e7ae      	b.n	8012c4c <_dtoa_r+0x564>
 8012cee:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012cf2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cfa:	d1b2      	bne.n	8012c62 <_dtoa_r+0x57a>
 8012cfc:	e7d3      	b.n	8012ca6 <_dtoa_r+0x5be>
 8012cfe:	bf00      	nop
 8012d00:	080161d0 	.word	0x080161d0
 8012d04:	080161a8 	.word	0x080161a8
 8012d08:	9907      	ldr	r1, [sp, #28]
 8012d0a:	2900      	cmp	r1, #0
 8012d0c:	f000 80d0 	beq.w	8012eb0 <_dtoa_r+0x7c8>
 8012d10:	9906      	ldr	r1, [sp, #24]
 8012d12:	2901      	cmp	r1, #1
 8012d14:	f300 80b4 	bgt.w	8012e80 <_dtoa_r+0x798>
 8012d18:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012d1a:	2900      	cmp	r1, #0
 8012d1c:	f000 80ac 	beq.w	8012e78 <_dtoa_r+0x790>
 8012d20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012d24:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012d28:	461c      	mov	r4, r3
 8012d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8012d2c:	9b04      	ldr	r3, [sp, #16]
 8012d2e:	4413      	add	r3, r2
 8012d30:	9304      	str	r3, [sp, #16]
 8012d32:	9b05      	ldr	r3, [sp, #20]
 8012d34:	2101      	movs	r1, #1
 8012d36:	4413      	add	r3, r2
 8012d38:	4630      	mov	r0, r6
 8012d3a:	9305      	str	r3, [sp, #20]
 8012d3c:	f000 fd74 	bl	8013828 <__i2b>
 8012d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d42:	4607      	mov	r7, r0
 8012d44:	f1b8 0f00 	cmp.w	r8, #0
 8012d48:	dd0d      	ble.n	8012d66 <_dtoa_r+0x67e>
 8012d4a:	9a05      	ldr	r2, [sp, #20]
 8012d4c:	2a00      	cmp	r2, #0
 8012d4e:	dd0a      	ble.n	8012d66 <_dtoa_r+0x67e>
 8012d50:	4542      	cmp	r2, r8
 8012d52:	9904      	ldr	r1, [sp, #16]
 8012d54:	bfa8      	it	ge
 8012d56:	4642      	movge	r2, r8
 8012d58:	1a89      	subs	r1, r1, r2
 8012d5a:	9104      	str	r1, [sp, #16]
 8012d5c:	9905      	ldr	r1, [sp, #20]
 8012d5e:	eba8 0802 	sub.w	r8, r8, r2
 8012d62:	1a8a      	subs	r2, r1, r2
 8012d64:	9205      	str	r2, [sp, #20]
 8012d66:	b303      	cbz	r3, 8012daa <_dtoa_r+0x6c2>
 8012d68:	9a07      	ldr	r2, [sp, #28]
 8012d6a:	2a00      	cmp	r2, #0
 8012d6c:	f000 80a5 	beq.w	8012eba <_dtoa_r+0x7d2>
 8012d70:	2c00      	cmp	r4, #0
 8012d72:	dd13      	ble.n	8012d9c <_dtoa_r+0x6b4>
 8012d74:	4639      	mov	r1, r7
 8012d76:	4622      	mov	r2, r4
 8012d78:	4630      	mov	r0, r6
 8012d7a:	930d      	str	r3, [sp, #52]	; 0x34
 8012d7c:	f000 fe14 	bl	80139a8 <__pow5mult>
 8012d80:	462a      	mov	r2, r5
 8012d82:	4601      	mov	r1, r0
 8012d84:	4607      	mov	r7, r0
 8012d86:	4630      	mov	r0, r6
 8012d88:	f000 fd64 	bl	8013854 <__multiply>
 8012d8c:	4629      	mov	r1, r5
 8012d8e:	900a      	str	r0, [sp, #40]	; 0x28
 8012d90:	4630      	mov	r0, r6
 8012d92:	f000 fc91 	bl	80136b8 <_Bfree>
 8012d96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d9a:	4615      	mov	r5, r2
 8012d9c:	1b1a      	subs	r2, r3, r4
 8012d9e:	d004      	beq.n	8012daa <_dtoa_r+0x6c2>
 8012da0:	4629      	mov	r1, r5
 8012da2:	4630      	mov	r0, r6
 8012da4:	f000 fe00 	bl	80139a8 <__pow5mult>
 8012da8:	4605      	mov	r5, r0
 8012daa:	2101      	movs	r1, #1
 8012dac:	4630      	mov	r0, r6
 8012dae:	f000 fd3b 	bl	8013828 <__i2b>
 8012db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	4604      	mov	r4, r0
 8012db8:	f340 8081 	ble.w	8012ebe <_dtoa_r+0x7d6>
 8012dbc:	461a      	mov	r2, r3
 8012dbe:	4601      	mov	r1, r0
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	f000 fdf1 	bl	80139a8 <__pow5mult>
 8012dc6:	9b06      	ldr	r3, [sp, #24]
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	4604      	mov	r4, r0
 8012dcc:	dd7a      	ble.n	8012ec4 <_dtoa_r+0x7dc>
 8012dce:	2300      	movs	r3, #0
 8012dd0:	930a      	str	r3, [sp, #40]	; 0x28
 8012dd2:	6922      	ldr	r2, [r4, #16]
 8012dd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012dd8:	6910      	ldr	r0, [r2, #16]
 8012dda:	f000 fcd5 	bl	8013788 <__hi0bits>
 8012dde:	f1c0 0020 	rsb	r0, r0, #32
 8012de2:	9b05      	ldr	r3, [sp, #20]
 8012de4:	4418      	add	r0, r3
 8012de6:	f010 001f 	ands.w	r0, r0, #31
 8012dea:	f000 808c 	beq.w	8012f06 <_dtoa_r+0x81e>
 8012dee:	f1c0 0220 	rsb	r2, r0, #32
 8012df2:	2a04      	cmp	r2, #4
 8012df4:	f340 8085 	ble.w	8012f02 <_dtoa_r+0x81a>
 8012df8:	f1c0 001c 	rsb	r0, r0, #28
 8012dfc:	9b04      	ldr	r3, [sp, #16]
 8012dfe:	4403      	add	r3, r0
 8012e00:	9304      	str	r3, [sp, #16]
 8012e02:	9b05      	ldr	r3, [sp, #20]
 8012e04:	4403      	add	r3, r0
 8012e06:	4480      	add	r8, r0
 8012e08:	9305      	str	r3, [sp, #20]
 8012e0a:	9b04      	ldr	r3, [sp, #16]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	dd05      	ble.n	8012e1c <_dtoa_r+0x734>
 8012e10:	4629      	mov	r1, r5
 8012e12:	461a      	mov	r2, r3
 8012e14:	4630      	mov	r0, r6
 8012e16:	f000 fe21 	bl	8013a5c <__lshift>
 8012e1a:	4605      	mov	r5, r0
 8012e1c:	9b05      	ldr	r3, [sp, #20]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	dd05      	ble.n	8012e2e <_dtoa_r+0x746>
 8012e22:	4621      	mov	r1, r4
 8012e24:	461a      	mov	r2, r3
 8012e26:	4630      	mov	r0, r6
 8012e28:	f000 fe18 	bl	8013a5c <__lshift>
 8012e2c:	4604      	mov	r4, r0
 8012e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d06a      	beq.n	8012f0a <_dtoa_r+0x822>
 8012e34:	4621      	mov	r1, r4
 8012e36:	4628      	mov	r0, r5
 8012e38:	f000 fe80 	bl	8013b3c <__mcmp>
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	da64      	bge.n	8012f0a <_dtoa_r+0x822>
 8012e40:	2300      	movs	r3, #0
 8012e42:	4629      	mov	r1, r5
 8012e44:	220a      	movs	r2, #10
 8012e46:	4630      	mov	r0, r6
 8012e48:	f000 fc58 	bl	80136fc <__multadd>
 8012e4c:	9b07      	ldr	r3, [sp, #28]
 8012e4e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012e52:	4605      	mov	r5, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	f000 8191 	beq.w	801317c <_dtoa_r+0xa94>
 8012e5a:	4639      	mov	r1, r7
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	220a      	movs	r2, #10
 8012e60:	4630      	mov	r0, r6
 8012e62:	f000 fc4b 	bl	80136fc <__multadd>
 8012e66:	f1ba 0f00 	cmp.w	sl, #0
 8012e6a:	4607      	mov	r7, r0
 8012e6c:	f300 808d 	bgt.w	8012f8a <_dtoa_r+0x8a2>
 8012e70:	9b06      	ldr	r3, [sp, #24]
 8012e72:	2b02      	cmp	r3, #2
 8012e74:	dc50      	bgt.n	8012f18 <_dtoa_r+0x830>
 8012e76:	e088      	b.n	8012f8a <_dtoa_r+0x8a2>
 8012e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012e7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012e7e:	e751      	b.n	8012d24 <_dtoa_r+0x63c>
 8012e80:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8012e84:	42a3      	cmp	r3, r4
 8012e86:	bfbf      	itttt	lt
 8012e88:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8012e8a:	1ae3      	sublt	r3, r4, r3
 8012e8c:	18d2      	addlt	r2, r2, r3
 8012e8e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8012e90:	bfb6      	itet	lt
 8012e92:	4623      	movlt	r3, r4
 8012e94:	1b1c      	subge	r4, r3, r4
 8012e96:	2400      	movlt	r4, #0
 8012e98:	f1b9 0f00 	cmp.w	r9, #0
 8012e9c:	bfb5      	itete	lt
 8012e9e:	9a04      	ldrlt	r2, [sp, #16]
 8012ea0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8012ea4:	eba2 0809 	sublt.w	r8, r2, r9
 8012ea8:	464a      	movge	r2, r9
 8012eaa:	bfb8      	it	lt
 8012eac:	2200      	movlt	r2, #0
 8012eae:	e73c      	b.n	8012d2a <_dtoa_r+0x642>
 8012eb0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012eb4:	9f07      	ldr	r7, [sp, #28]
 8012eb6:	461c      	mov	r4, r3
 8012eb8:	e744      	b.n	8012d44 <_dtoa_r+0x65c>
 8012eba:	461a      	mov	r2, r3
 8012ebc:	e770      	b.n	8012da0 <_dtoa_r+0x6b8>
 8012ebe:	9b06      	ldr	r3, [sp, #24]
 8012ec0:	2b01      	cmp	r3, #1
 8012ec2:	dc18      	bgt.n	8012ef6 <_dtoa_r+0x80e>
 8012ec4:	9b02      	ldr	r3, [sp, #8]
 8012ec6:	b9b3      	cbnz	r3, 8012ef6 <_dtoa_r+0x80e>
 8012ec8:	9b03      	ldr	r3, [sp, #12]
 8012eca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012ece:	b9a2      	cbnz	r2, 8012efa <_dtoa_r+0x812>
 8012ed0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012ed4:	0d12      	lsrs	r2, r2, #20
 8012ed6:	0512      	lsls	r2, r2, #20
 8012ed8:	b18a      	cbz	r2, 8012efe <_dtoa_r+0x816>
 8012eda:	9b04      	ldr	r3, [sp, #16]
 8012edc:	3301      	adds	r3, #1
 8012ede:	9304      	str	r3, [sp, #16]
 8012ee0:	9b05      	ldr	r3, [sp, #20]
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	9305      	str	r3, [sp, #20]
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8012eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	f47f af70 	bne.w	8012dd2 <_dtoa_r+0x6ea>
 8012ef2:	2001      	movs	r0, #1
 8012ef4:	e775      	b.n	8012de2 <_dtoa_r+0x6fa>
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	e7f6      	b.n	8012ee8 <_dtoa_r+0x800>
 8012efa:	9b02      	ldr	r3, [sp, #8]
 8012efc:	e7f4      	b.n	8012ee8 <_dtoa_r+0x800>
 8012efe:	920a      	str	r2, [sp, #40]	; 0x28
 8012f00:	e7f3      	b.n	8012eea <_dtoa_r+0x802>
 8012f02:	d082      	beq.n	8012e0a <_dtoa_r+0x722>
 8012f04:	4610      	mov	r0, r2
 8012f06:	301c      	adds	r0, #28
 8012f08:	e778      	b.n	8012dfc <_dtoa_r+0x714>
 8012f0a:	f1b9 0f00 	cmp.w	r9, #0
 8012f0e:	dc37      	bgt.n	8012f80 <_dtoa_r+0x898>
 8012f10:	9b06      	ldr	r3, [sp, #24]
 8012f12:	2b02      	cmp	r3, #2
 8012f14:	dd34      	ble.n	8012f80 <_dtoa_r+0x898>
 8012f16:	46ca      	mov	sl, r9
 8012f18:	f1ba 0f00 	cmp.w	sl, #0
 8012f1c:	d10d      	bne.n	8012f3a <_dtoa_r+0x852>
 8012f1e:	4621      	mov	r1, r4
 8012f20:	4653      	mov	r3, sl
 8012f22:	2205      	movs	r2, #5
 8012f24:	4630      	mov	r0, r6
 8012f26:	f000 fbe9 	bl	80136fc <__multadd>
 8012f2a:	4601      	mov	r1, r0
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	4628      	mov	r0, r5
 8012f30:	f000 fe04 	bl	8013b3c <__mcmp>
 8012f34:	2800      	cmp	r0, #0
 8012f36:	f73f adeb 	bgt.w	8012b10 <_dtoa_r+0x428>
 8012f3a:	9b08      	ldr	r3, [sp, #32]
 8012f3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012f40:	ea6f 0b03 	mvn.w	fp, r3
 8012f44:	f04f 0900 	mov.w	r9, #0
 8012f48:	4621      	mov	r1, r4
 8012f4a:	4630      	mov	r0, r6
 8012f4c:	f000 fbb4 	bl	80136b8 <_Bfree>
 8012f50:	2f00      	cmp	r7, #0
 8012f52:	f43f aea8 	beq.w	8012ca6 <_dtoa_r+0x5be>
 8012f56:	f1b9 0f00 	cmp.w	r9, #0
 8012f5a:	d005      	beq.n	8012f68 <_dtoa_r+0x880>
 8012f5c:	45b9      	cmp	r9, r7
 8012f5e:	d003      	beq.n	8012f68 <_dtoa_r+0x880>
 8012f60:	4649      	mov	r1, r9
 8012f62:	4630      	mov	r0, r6
 8012f64:	f000 fba8 	bl	80136b8 <_Bfree>
 8012f68:	4639      	mov	r1, r7
 8012f6a:	4630      	mov	r0, r6
 8012f6c:	f000 fba4 	bl	80136b8 <_Bfree>
 8012f70:	e699      	b.n	8012ca6 <_dtoa_r+0x5be>
 8012f72:	2400      	movs	r4, #0
 8012f74:	4627      	mov	r7, r4
 8012f76:	e7e0      	b.n	8012f3a <_dtoa_r+0x852>
 8012f78:	46bb      	mov	fp, r7
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	4607      	mov	r7, r0
 8012f7e:	e5c7      	b.n	8012b10 <_dtoa_r+0x428>
 8012f80:	9b07      	ldr	r3, [sp, #28]
 8012f82:	46ca      	mov	sl, r9
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	f000 8100 	beq.w	801318a <_dtoa_r+0xaa2>
 8012f8a:	f1b8 0f00 	cmp.w	r8, #0
 8012f8e:	dd05      	ble.n	8012f9c <_dtoa_r+0x8b4>
 8012f90:	4639      	mov	r1, r7
 8012f92:	4642      	mov	r2, r8
 8012f94:	4630      	mov	r0, r6
 8012f96:	f000 fd61 	bl	8013a5c <__lshift>
 8012f9a:	4607      	mov	r7, r0
 8012f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d05d      	beq.n	801305e <_dtoa_r+0x976>
 8012fa2:	6879      	ldr	r1, [r7, #4]
 8012fa4:	4630      	mov	r0, r6
 8012fa6:	f000 fb47 	bl	8013638 <_Balloc>
 8012faa:	4680      	mov	r8, r0
 8012fac:	b928      	cbnz	r0, 8012fba <_dtoa_r+0x8d2>
 8012fae:	4b82      	ldr	r3, [pc, #520]	; (80131b8 <_dtoa_r+0xad0>)
 8012fb0:	4602      	mov	r2, r0
 8012fb2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012fb6:	f7ff bbaf 	b.w	8012718 <_dtoa_r+0x30>
 8012fba:	693a      	ldr	r2, [r7, #16]
 8012fbc:	3202      	adds	r2, #2
 8012fbe:	0092      	lsls	r2, r2, #2
 8012fc0:	f107 010c 	add.w	r1, r7, #12
 8012fc4:	300c      	adds	r0, #12
 8012fc6:	f000 fb29 	bl	801361c <memcpy>
 8012fca:	2201      	movs	r2, #1
 8012fcc:	4641      	mov	r1, r8
 8012fce:	4630      	mov	r0, r6
 8012fd0:	f000 fd44 	bl	8013a5c <__lshift>
 8012fd4:	9b01      	ldr	r3, [sp, #4]
 8012fd6:	3301      	adds	r3, #1
 8012fd8:	9304      	str	r3, [sp, #16]
 8012fda:	9b01      	ldr	r3, [sp, #4]
 8012fdc:	4453      	add	r3, sl
 8012fde:	9308      	str	r3, [sp, #32]
 8012fe0:	9b02      	ldr	r3, [sp, #8]
 8012fe2:	f003 0301 	and.w	r3, r3, #1
 8012fe6:	46b9      	mov	r9, r7
 8012fe8:	9307      	str	r3, [sp, #28]
 8012fea:	4607      	mov	r7, r0
 8012fec:	9b04      	ldr	r3, [sp, #16]
 8012fee:	4621      	mov	r1, r4
 8012ff0:	3b01      	subs	r3, #1
 8012ff2:	4628      	mov	r0, r5
 8012ff4:	9302      	str	r3, [sp, #8]
 8012ff6:	f7ff faeb 	bl	80125d0 <quorem>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	3330      	adds	r3, #48	; 0x30
 8012ffe:	9005      	str	r0, [sp, #20]
 8013000:	4649      	mov	r1, r9
 8013002:	4628      	mov	r0, r5
 8013004:	9309      	str	r3, [sp, #36]	; 0x24
 8013006:	f000 fd99 	bl	8013b3c <__mcmp>
 801300a:	463a      	mov	r2, r7
 801300c:	4682      	mov	sl, r0
 801300e:	4621      	mov	r1, r4
 8013010:	4630      	mov	r0, r6
 8013012:	f000 fdaf 	bl	8013b74 <__mdiff>
 8013016:	68c2      	ldr	r2, [r0, #12]
 8013018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801301a:	4680      	mov	r8, r0
 801301c:	bb0a      	cbnz	r2, 8013062 <_dtoa_r+0x97a>
 801301e:	4601      	mov	r1, r0
 8013020:	4628      	mov	r0, r5
 8013022:	f000 fd8b 	bl	8013b3c <__mcmp>
 8013026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013028:	4602      	mov	r2, r0
 801302a:	4641      	mov	r1, r8
 801302c:	4630      	mov	r0, r6
 801302e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8013032:	f000 fb41 	bl	80136b8 <_Bfree>
 8013036:	9b06      	ldr	r3, [sp, #24]
 8013038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801303a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801303e:	ea43 0102 	orr.w	r1, r3, r2
 8013042:	9b07      	ldr	r3, [sp, #28]
 8013044:	430b      	orrs	r3, r1
 8013046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013048:	d10d      	bne.n	8013066 <_dtoa_r+0x97e>
 801304a:	2b39      	cmp	r3, #57	; 0x39
 801304c:	d029      	beq.n	80130a2 <_dtoa_r+0x9ba>
 801304e:	f1ba 0f00 	cmp.w	sl, #0
 8013052:	dd01      	ble.n	8013058 <_dtoa_r+0x970>
 8013054:	9b05      	ldr	r3, [sp, #20]
 8013056:	3331      	adds	r3, #49	; 0x31
 8013058:	9a02      	ldr	r2, [sp, #8]
 801305a:	7013      	strb	r3, [r2, #0]
 801305c:	e774      	b.n	8012f48 <_dtoa_r+0x860>
 801305e:	4638      	mov	r0, r7
 8013060:	e7b8      	b.n	8012fd4 <_dtoa_r+0x8ec>
 8013062:	2201      	movs	r2, #1
 8013064:	e7e1      	b.n	801302a <_dtoa_r+0x942>
 8013066:	f1ba 0f00 	cmp.w	sl, #0
 801306a:	db06      	blt.n	801307a <_dtoa_r+0x992>
 801306c:	9906      	ldr	r1, [sp, #24]
 801306e:	ea41 0a0a 	orr.w	sl, r1, sl
 8013072:	9907      	ldr	r1, [sp, #28]
 8013074:	ea5a 0101 	orrs.w	r1, sl, r1
 8013078:	d120      	bne.n	80130bc <_dtoa_r+0x9d4>
 801307a:	2a00      	cmp	r2, #0
 801307c:	ddec      	ble.n	8013058 <_dtoa_r+0x970>
 801307e:	4629      	mov	r1, r5
 8013080:	2201      	movs	r2, #1
 8013082:	4630      	mov	r0, r6
 8013084:	9304      	str	r3, [sp, #16]
 8013086:	f000 fce9 	bl	8013a5c <__lshift>
 801308a:	4621      	mov	r1, r4
 801308c:	4605      	mov	r5, r0
 801308e:	f000 fd55 	bl	8013b3c <__mcmp>
 8013092:	2800      	cmp	r0, #0
 8013094:	9b04      	ldr	r3, [sp, #16]
 8013096:	dc02      	bgt.n	801309e <_dtoa_r+0x9b6>
 8013098:	d1de      	bne.n	8013058 <_dtoa_r+0x970>
 801309a:	07da      	lsls	r2, r3, #31
 801309c:	d5dc      	bpl.n	8013058 <_dtoa_r+0x970>
 801309e:	2b39      	cmp	r3, #57	; 0x39
 80130a0:	d1d8      	bne.n	8013054 <_dtoa_r+0x96c>
 80130a2:	9a02      	ldr	r2, [sp, #8]
 80130a4:	2339      	movs	r3, #57	; 0x39
 80130a6:	7013      	strb	r3, [r2, #0]
 80130a8:	4643      	mov	r3, r8
 80130aa:	4698      	mov	r8, r3
 80130ac:	3b01      	subs	r3, #1
 80130ae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80130b2:	2a39      	cmp	r2, #57	; 0x39
 80130b4:	d051      	beq.n	801315a <_dtoa_r+0xa72>
 80130b6:	3201      	adds	r2, #1
 80130b8:	701a      	strb	r2, [r3, #0]
 80130ba:	e745      	b.n	8012f48 <_dtoa_r+0x860>
 80130bc:	2a00      	cmp	r2, #0
 80130be:	dd03      	ble.n	80130c8 <_dtoa_r+0x9e0>
 80130c0:	2b39      	cmp	r3, #57	; 0x39
 80130c2:	d0ee      	beq.n	80130a2 <_dtoa_r+0x9ba>
 80130c4:	3301      	adds	r3, #1
 80130c6:	e7c7      	b.n	8013058 <_dtoa_r+0x970>
 80130c8:	9a04      	ldr	r2, [sp, #16]
 80130ca:	9908      	ldr	r1, [sp, #32]
 80130cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80130d0:	428a      	cmp	r2, r1
 80130d2:	d02b      	beq.n	801312c <_dtoa_r+0xa44>
 80130d4:	4629      	mov	r1, r5
 80130d6:	2300      	movs	r3, #0
 80130d8:	220a      	movs	r2, #10
 80130da:	4630      	mov	r0, r6
 80130dc:	f000 fb0e 	bl	80136fc <__multadd>
 80130e0:	45b9      	cmp	r9, r7
 80130e2:	4605      	mov	r5, r0
 80130e4:	f04f 0300 	mov.w	r3, #0
 80130e8:	f04f 020a 	mov.w	r2, #10
 80130ec:	4649      	mov	r1, r9
 80130ee:	4630      	mov	r0, r6
 80130f0:	d107      	bne.n	8013102 <_dtoa_r+0xa1a>
 80130f2:	f000 fb03 	bl	80136fc <__multadd>
 80130f6:	4681      	mov	r9, r0
 80130f8:	4607      	mov	r7, r0
 80130fa:	9b04      	ldr	r3, [sp, #16]
 80130fc:	3301      	adds	r3, #1
 80130fe:	9304      	str	r3, [sp, #16]
 8013100:	e774      	b.n	8012fec <_dtoa_r+0x904>
 8013102:	f000 fafb 	bl	80136fc <__multadd>
 8013106:	4639      	mov	r1, r7
 8013108:	4681      	mov	r9, r0
 801310a:	2300      	movs	r3, #0
 801310c:	220a      	movs	r2, #10
 801310e:	4630      	mov	r0, r6
 8013110:	f000 faf4 	bl	80136fc <__multadd>
 8013114:	4607      	mov	r7, r0
 8013116:	e7f0      	b.n	80130fa <_dtoa_r+0xa12>
 8013118:	f1ba 0f00 	cmp.w	sl, #0
 801311c:	9a01      	ldr	r2, [sp, #4]
 801311e:	bfcc      	ite	gt
 8013120:	46d0      	movgt	r8, sl
 8013122:	f04f 0801 	movle.w	r8, #1
 8013126:	4490      	add	r8, r2
 8013128:	f04f 0900 	mov.w	r9, #0
 801312c:	4629      	mov	r1, r5
 801312e:	2201      	movs	r2, #1
 8013130:	4630      	mov	r0, r6
 8013132:	9302      	str	r3, [sp, #8]
 8013134:	f000 fc92 	bl	8013a5c <__lshift>
 8013138:	4621      	mov	r1, r4
 801313a:	4605      	mov	r5, r0
 801313c:	f000 fcfe 	bl	8013b3c <__mcmp>
 8013140:	2800      	cmp	r0, #0
 8013142:	dcb1      	bgt.n	80130a8 <_dtoa_r+0x9c0>
 8013144:	d102      	bne.n	801314c <_dtoa_r+0xa64>
 8013146:	9b02      	ldr	r3, [sp, #8]
 8013148:	07db      	lsls	r3, r3, #31
 801314a:	d4ad      	bmi.n	80130a8 <_dtoa_r+0x9c0>
 801314c:	4643      	mov	r3, r8
 801314e:	4698      	mov	r8, r3
 8013150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013154:	2a30      	cmp	r2, #48	; 0x30
 8013156:	d0fa      	beq.n	801314e <_dtoa_r+0xa66>
 8013158:	e6f6      	b.n	8012f48 <_dtoa_r+0x860>
 801315a:	9a01      	ldr	r2, [sp, #4]
 801315c:	429a      	cmp	r2, r3
 801315e:	d1a4      	bne.n	80130aa <_dtoa_r+0x9c2>
 8013160:	f10b 0b01 	add.w	fp, fp, #1
 8013164:	2331      	movs	r3, #49	; 0x31
 8013166:	e778      	b.n	801305a <_dtoa_r+0x972>
 8013168:	4b14      	ldr	r3, [pc, #80]	; (80131bc <_dtoa_r+0xad4>)
 801316a:	f7ff bb27 	b.w	80127bc <_dtoa_r+0xd4>
 801316e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013170:	2b00      	cmp	r3, #0
 8013172:	f47f ab03 	bne.w	801277c <_dtoa_r+0x94>
 8013176:	4b12      	ldr	r3, [pc, #72]	; (80131c0 <_dtoa_r+0xad8>)
 8013178:	f7ff bb20 	b.w	80127bc <_dtoa_r+0xd4>
 801317c:	f1ba 0f00 	cmp.w	sl, #0
 8013180:	dc03      	bgt.n	801318a <_dtoa_r+0xaa2>
 8013182:	9b06      	ldr	r3, [sp, #24]
 8013184:	2b02      	cmp	r3, #2
 8013186:	f73f aec7 	bgt.w	8012f18 <_dtoa_r+0x830>
 801318a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801318e:	4621      	mov	r1, r4
 8013190:	4628      	mov	r0, r5
 8013192:	f7ff fa1d 	bl	80125d0 <quorem>
 8013196:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801319a:	f808 3b01 	strb.w	r3, [r8], #1
 801319e:	9a01      	ldr	r2, [sp, #4]
 80131a0:	eba8 0202 	sub.w	r2, r8, r2
 80131a4:	4592      	cmp	sl, r2
 80131a6:	ddb7      	ble.n	8013118 <_dtoa_r+0xa30>
 80131a8:	4629      	mov	r1, r5
 80131aa:	2300      	movs	r3, #0
 80131ac:	220a      	movs	r2, #10
 80131ae:	4630      	mov	r0, r6
 80131b0:	f000 faa4 	bl	80136fc <__multadd>
 80131b4:	4605      	mov	r5, r0
 80131b6:	e7ea      	b.n	801318e <_dtoa_r+0xaa6>
 80131b8:	080160d7 	.word	0x080160d7
 80131bc:	08016034 	.word	0x08016034
 80131c0:	08016058 	.word	0x08016058

080131c4 <__sflush_r>:
 80131c4:	898a      	ldrh	r2, [r1, #12]
 80131c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131ca:	4605      	mov	r5, r0
 80131cc:	0710      	lsls	r0, r2, #28
 80131ce:	460c      	mov	r4, r1
 80131d0:	d458      	bmi.n	8013284 <__sflush_r+0xc0>
 80131d2:	684b      	ldr	r3, [r1, #4]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	dc05      	bgt.n	80131e4 <__sflush_r+0x20>
 80131d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80131da:	2b00      	cmp	r3, #0
 80131dc:	dc02      	bgt.n	80131e4 <__sflush_r+0x20>
 80131de:	2000      	movs	r0, #0
 80131e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131e6:	2e00      	cmp	r6, #0
 80131e8:	d0f9      	beq.n	80131de <__sflush_r+0x1a>
 80131ea:	2300      	movs	r3, #0
 80131ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80131f0:	682f      	ldr	r7, [r5, #0]
 80131f2:	602b      	str	r3, [r5, #0]
 80131f4:	d032      	beq.n	801325c <__sflush_r+0x98>
 80131f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80131f8:	89a3      	ldrh	r3, [r4, #12]
 80131fa:	075a      	lsls	r2, r3, #29
 80131fc:	d505      	bpl.n	801320a <__sflush_r+0x46>
 80131fe:	6863      	ldr	r3, [r4, #4]
 8013200:	1ac0      	subs	r0, r0, r3
 8013202:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013204:	b10b      	cbz	r3, 801320a <__sflush_r+0x46>
 8013206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013208:	1ac0      	subs	r0, r0, r3
 801320a:	2300      	movs	r3, #0
 801320c:	4602      	mov	r2, r0
 801320e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013210:	6a21      	ldr	r1, [r4, #32]
 8013212:	4628      	mov	r0, r5
 8013214:	47b0      	blx	r6
 8013216:	1c43      	adds	r3, r0, #1
 8013218:	89a3      	ldrh	r3, [r4, #12]
 801321a:	d106      	bne.n	801322a <__sflush_r+0x66>
 801321c:	6829      	ldr	r1, [r5, #0]
 801321e:	291d      	cmp	r1, #29
 8013220:	d82c      	bhi.n	801327c <__sflush_r+0xb8>
 8013222:	4a2a      	ldr	r2, [pc, #168]	; (80132cc <__sflush_r+0x108>)
 8013224:	40ca      	lsrs	r2, r1
 8013226:	07d6      	lsls	r6, r2, #31
 8013228:	d528      	bpl.n	801327c <__sflush_r+0xb8>
 801322a:	2200      	movs	r2, #0
 801322c:	6062      	str	r2, [r4, #4]
 801322e:	04d9      	lsls	r1, r3, #19
 8013230:	6922      	ldr	r2, [r4, #16]
 8013232:	6022      	str	r2, [r4, #0]
 8013234:	d504      	bpl.n	8013240 <__sflush_r+0x7c>
 8013236:	1c42      	adds	r2, r0, #1
 8013238:	d101      	bne.n	801323e <__sflush_r+0x7a>
 801323a:	682b      	ldr	r3, [r5, #0]
 801323c:	b903      	cbnz	r3, 8013240 <__sflush_r+0x7c>
 801323e:	6560      	str	r0, [r4, #84]	; 0x54
 8013240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013242:	602f      	str	r7, [r5, #0]
 8013244:	2900      	cmp	r1, #0
 8013246:	d0ca      	beq.n	80131de <__sflush_r+0x1a>
 8013248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801324c:	4299      	cmp	r1, r3
 801324e:	d002      	beq.n	8013256 <__sflush_r+0x92>
 8013250:	4628      	mov	r0, r5
 8013252:	f000 fd8b 	bl	8013d6c <_free_r>
 8013256:	2000      	movs	r0, #0
 8013258:	6360      	str	r0, [r4, #52]	; 0x34
 801325a:	e7c1      	b.n	80131e0 <__sflush_r+0x1c>
 801325c:	6a21      	ldr	r1, [r4, #32]
 801325e:	2301      	movs	r3, #1
 8013260:	4628      	mov	r0, r5
 8013262:	47b0      	blx	r6
 8013264:	1c41      	adds	r1, r0, #1
 8013266:	d1c7      	bne.n	80131f8 <__sflush_r+0x34>
 8013268:	682b      	ldr	r3, [r5, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d0c4      	beq.n	80131f8 <__sflush_r+0x34>
 801326e:	2b1d      	cmp	r3, #29
 8013270:	d001      	beq.n	8013276 <__sflush_r+0xb2>
 8013272:	2b16      	cmp	r3, #22
 8013274:	d101      	bne.n	801327a <__sflush_r+0xb6>
 8013276:	602f      	str	r7, [r5, #0]
 8013278:	e7b1      	b.n	80131de <__sflush_r+0x1a>
 801327a:	89a3      	ldrh	r3, [r4, #12]
 801327c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013280:	81a3      	strh	r3, [r4, #12]
 8013282:	e7ad      	b.n	80131e0 <__sflush_r+0x1c>
 8013284:	690f      	ldr	r7, [r1, #16]
 8013286:	2f00      	cmp	r7, #0
 8013288:	d0a9      	beq.n	80131de <__sflush_r+0x1a>
 801328a:	0793      	lsls	r3, r2, #30
 801328c:	680e      	ldr	r6, [r1, #0]
 801328e:	bf08      	it	eq
 8013290:	694b      	ldreq	r3, [r1, #20]
 8013292:	600f      	str	r7, [r1, #0]
 8013294:	bf18      	it	ne
 8013296:	2300      	movne	r3, #0
 8013298:	eba6 0807 	sub.w	r8, r6, r7
 801329c:	608b      	str	r3, [r1, #8]
 801329e:	f1b8 0f00 	cmp.w	r8, #0
 80132a2:	dd9c      	ble.n	80131de <__sflush_r+0x1a>
 80132a4:	6a21      	ldr	r1, [r4, #32]
 80132a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80132a8:	4643      	mov	r3, r8
 80132aa:	463a      	mov	r2, r7
 80132ac:	4628      	mov	r0, r5
 80132ae:	47b0      	blx	r6
 80132b0:	2800      	cmp	r0, #0
 80132b2:	dc06      	bgt.n	80132c2 <__sflush_r+0xfe>
 80132b4:	89a3      	ldrh	r3, [r4, #12]
 80132b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132ba:	81a3      	strh	r3, [r4, #12]
 80132bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132c0:	e78e      	b.n	80131e0 <__sflush_r+0x1c>
 80132c2:	4407      	add	r7, r0
 80132c4:	eba8 0800 	sub.w	r8, r8, r0
 80132c8:	e7e9      	b.n	801329e <__sflush_r+0xda>
 80132ca:	bf00      	nop
 80132cc:	20400001 	.word	0x20400001

080132d0 <_fflush_r>:
 80132d0:	b538      	push	{r3, r4, r5, lr}
 80132d2:	690b      	ldr	r3, [r1, #16]
 80132d4:	4605      	mov	r5, r0
 80132d6:	460c      	mov	r4, r1
 80132d8:	b913      	cbnz	r3, 80132e0 <_fflush_r+0x10>
 80132da:	2500      	movs	r5, #0
 80132dc:	4628      	mov	r0, r5
 80132de:	bd38      	pop	{r3, r4, r5, pc}
 80132e0:	b118      	cbz	r0, 80132ea <_fflush_r+0x1a>
 80132e2:	6983      	ldr	r3, [r0, #24]
 80132e4:	b90b      	cbnz	r3, 80132ea <_fflush_r+0x1a>
 80132e6:	f000 f887 	bl	80133f8 <__sinit>
 80132ea:	4b14      	ldr	r3, [pc, #80]	; (801333c <_fflush_r+0x6c>)
 80132ec:	429c      	cmp	r4, r3
 80132ee:	d11b      	bne.n	8013328 <_fflush_r+0x58>
 80132f0:	686c      	ldr	r4, [r5, #4]
 80132f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d0ef      	beq.n	80132da <_fflush_r+0xa>
 80132fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80132fc:	07d0      	lsls	r0, r2, #31
 80132fe:	d404      	bmi.n	801330a <_fflush_r+0x3a>
 8013300:	0599      	lsls	r1, r3, #22
 8013302:	d402      	bmi.n	801330a <_fflush_r+0x3a>
 8013304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013306:	f000 f91a 	bl	801353e <__retarget_lock_acquire_recursive>
 801330a:	4628      	mov	r0, r5
 801330c:	4621      	mov	r1, r4
 801330e:	f7ff ff59 	bl	80131c4 <__sflush_r>
 8013312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013314:	07da      	lsls	r2, r3, #31
 8013316:	4605      	mov	r5, r0
 8013318:	d4e0      	bmi.n	80132dc <_fflush_r+0xc>
 801331a:	89a3      	ldrh	r3, [r4, #12]
 801331c:	059b      	lsls	r3, r3, #22
 801331e:	d4dd      	bmi.n	80132dc <_fflush_r+0xc>
 8013320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013322:	f000 f90d 	bl	8013540 <__retarget_lock_release_recursive>
 8013326:	e7d9      	b.n	80132dc <_fflush_r+0xc>
 8013328:	4b05      	ldr	r3, [pc, #20]	; (8013340 <_fflush_r+0x70>)
 801332a:	429c      	cmp	r4, r3
 801332c:	d101      	bne.n	8013332 <_fflush_r+0x62>
 801332e:	68ac      	ldr	r4, [r5, #8]
 8013330:	e7df      	b.n	80132f2 <_fflush_r+0x22>
 8013332:	4b04      	ldr	r3, [pc, #16]	; (8013344 <_fflush_r+0x74>)
 8013334:	429c      	cmp	r4, r3
 8013336:	bf08      	it	eq
 8013338:	68ec      	ldreq	r4, [r5, #12]
 801333a:	e7da      	b.n	80132f2 <_fflush_r+0x22>
 801333c:	08016108 	.word	0x08016108
 8013340:	08016128 	.word	0x08016128
 8013344:	080160e8 	.word	0x080160e8

08013348 <std>:
 8013348:	2300      	movs	r3, #0
 801334a:	b510      	push	{r4, lr}
 801334c:	4604      	mov	r4, r0
 801334e:	e9c0 3300 	strd	r3, r3, [r0]
 8013352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013356:	6083      	str	r3, [r0, #8]
 8013358:	8181      	strh	r1, [r0, #12]
 801335a:	6643      	str	r3, [r0, #100]	; 0x64
 801335c:	81c2      	strh	r2, [r0, #14]
 801335e:	6183      	str	r3, [r0, #24]
 8013360:	4619      	mov	r1, r3
 8013362:	2208      	movs	r2, #8
 8013364:	305c      	adds	r0, #92	; 0x5c
 8013366:	f7fe fbb3 	bl	8011ad0 <memset>
 801336a:	4b05      	ldr	r3, [pc, #20]	; (8013380 <std+0x38>)
 801336c:	6263      	str	r3, [r4, #36]	; 0x24
 801336e:	4b05      	ldr	r3, [pc, #20]	; (8013384 <std+0x3c>)
 8013370:	62a3      	str	r3, [r4, #40]	; 0x28
 8013372:	4b05      	ldr	r3, [pc, #20]	; (8013388 <std+0x40>)
 8013374:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013376:	4b05      	ldr	r3, [pc, #20]	; (801338c <std+0x44>)
 8013378:	6224      	str	r4, [r4, #32]
 801337a:	6323      	str	r3, [r4, #48]	; 0x30
 801337c:	bd10      	pop	{r4, pc}
 801337e:	bf00      	nop
 8013380:	08013f4d 	.word	0x08013f4d
 8013384:	08013f6f 	.word	0x08013f6f
 8013388:	08013fa7 	.word	0x08013fa7
 801338c:	08013fcb 	.word	0x08013fcb

08013390 <_cleanup_r>:
 8013390:	4901      	ldr	r1, [pc, #4]	; (8013398 <_cleanup_r+0x8>)
 8013392:	f000 b8af 	b.w	80134f4 <_fwalk_reent>
 8013396:	bf00      	nop
 8013398:	080132d1 	.word	0x080132d1

0801339c <__sfmoreglue>:
 801339c:	b570      	push	{r4, r5, r6, lr}
 801339e:	2268      	movs	r2, #104	; 0x68
 80133a0:	1e4d      	subs	r5, r1, #1
 80133a2:	4355      	muls	r5, r2
 80133a4:	460e      	mov	r6, r1
 80133a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80133aa:	f000 fd4b 	bl	8013e44 <_malloc_r>
 80133ae:	4604      	mov	r4, r0
 80133b0:	b140      	cbz	r0, 80133c4 <__sfmoreglue+0x28>
 80133b2:	2100      	movs	r1, #0
 80133b4:	e9c0 1600 	strd	r1, r6, [r0]
 80133b8:	300c      	adds	r0, #12
 80133ba:	60a0      	str	r0, [r4, #8]
 80133bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80133c0:	f7fe fb86 	bl	8011ad0 <memset>
 80133c4:	4620      	mov	r0, r4
 80133c6:	bd70      	pop	{r4, r5, r6, pc}

080133c8 <__sfp_lock_acquire>:
 80133c8:	4801      	ldr	r0, [pc, #4]	; (80133d0 <__sfp_lock_acquire+0x8>)
 80133ca:	f000 b8b8 	b.w	801353e <__retarget_lock_acquire_recursive>
 80133ce:	bf00      	nop
 80133d0:	240015fd 	.word	0x240015fd

080133d4 <__sfp_lock_release>:
 80133d4:	4801      	ldr	r0, [pc, #4]	; (80133dc <__sfp_lock_release+0x8>)
 80133d6:	f000 b8b3 	b.w	8013540 <__retarget_lock_release_recursive>
 80133da:	bf00      	nop
 80133dc:	240015fd 	.word	0x240015fd

080133e0 <__sinit_lock_acquire>:
 80133e0:	4801      	ldr	r0, [pc, #4]	; (80133e8 <__sinit_lock_acquire+0x8>)
 80133e2:	f000 b8ac 	b.w	801353e <__retarget_lock_acquire_recursive>
 80133e6:	bf00      	nop
 80133e8:	240015fe 	.word	0x240015fe

080133ec <__sinit_lock_release>:
 80133ec:	4801      	ldr	r0, [pc, #4]	; (80133f4 <__sinit_lock_release+0x8>)
 80133ee:	f000 b8a7 	b.w	8013540 <__retarget_lock_release_recursive>
 80133f2:	bf00      	nop
 80133f4:	240015fe 	.word	0x240015fe

080133f8 <__sinit>:
 80133f8:	b510      	push	{r4, lr}
 80133fa:	4604      	mov	r4, r0
 80133fc:	f7ff fff0 	bl	80133e0 <__sinit_lock_acquire>
 8013400:	69a3      	ldr	r3, [r4, #24]
 8013402:	b11b      	cbz	r3, 801340c <__sinit+0x14>
 8013404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013408:	f7ff bff0 	b.w	80133ec <__sinit_lock_release>
 801340c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013410:	6523      	str	r3, [r4, #80]	; 0x50
 8013412:	4b13      	ldr	r3, [pc, #76]	; (8013460 <__sinit+0x68>)
 8013414:	4a13      	ldr	r2, [pc, #76]	; (8013464 <__sinit+0x6c>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	62a2      	str	r2, [r4, #40]	; 0x28
 801341a:	42a3      	cmp	r3, r4
 801341c:	bf04      	itt	eq
 801341e:	2301      	moveq	r3, #1
 8013420:	61a3      	streq	r3, [r4, #24]
 8013422:	4620      	mov	r0, r4
 8013424:	f000 f820 	bl	8013468 <__sfp>
 8013428:	6060      	str	r0, [r4, #4]
 801342a:	4620      	mov	r0, r4
 801342c:	f000 f81c 	bl	8013468 <__sfp>
 8013430:	60a0      	str	r0, [r4, #8]
 8013432:	4620      	mov	r0, r4
 8013434:	f000 f818 	bl	8013468 <__sfp>
 8013438:	2200      	movs	r2, #0
 801343a:	60e0      	str	r0, [r4, #12]
 801343c:	2104      	movs	r1, #4
 801343e:	6860      	ldr	r0, [r4, #4]
 8013440:	f7ff ff82 	bl	8013348 <std>
 8013444:	68a0      	ldr	r0, [r4, #8]
 8013446:	2201      	movs	r2, #1
 8013448:	2109      	movs	r1, #9
 801344a:	f7ff ff7d 	bl	8013348 <std>
 801344e:	68e0      	ldr	r0, [r4, #12]
 8013450:	2202      	movs	r2, #2
 8013452:	2112      	movs	r1, #18
 8013454:	f7ff ff78 	bl	8013348 <std>
 8013458:	2301      	movs	r3, #1
 801345a:	61a3      	str	r3, [r4, #24]
 801345c:	e7d2      	b.n	8013404 <__sinit+0xc>
 801345e:	bf00      	nop
 8013460:	08016020 	.word	0x08016020
 8013464:	08013391 	.word	0x08013391

08013468 <__sfp>:
 8013468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801346a:	4607      	mov	r7, r0
 801346c:	f7ff ffac 	bl	80133c8 <__sfp_lock_acquire>
 8013470:	4b1e      	ldr	r3, [pc, #120]	; (80134ec <__sfp+0x84>)
 8013472:	681e      	ldr	r6, [r3, #0]
 8013474:	69b3      	ldr	r3, [r6, #24]
 8013476:	b913      	cbnz	r3, 801347e <__sfp+0x16>
 8013478:	4630      	mov	r0, r6
 801347a:	f7ff ffbd 	bl	80133f8 <__sinit>
 801347e:	3648      	adds	r6, #72	; 0x48
 8013480:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013484:	3b01      	subs	r3, #1
 8013486:	d503      	bpl.n	8013490 <__sfp+0x28>
 8013488:	6833      	ldr	r3, [r6, #0]
 801348a:	b30b      	cbz	r3, 80134d0 <__sfp+0x68>
 801348c:	6836      	ldr	r6, [r6, #0]
 801348e:	e7f7      	b.n	8013480 <__sfp+0x18>
 8013490:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013494:	b9d5      	cbnz	r5, 80134cc <__sfp+0x64>
 8013496:	4b16      	ldr	r3, [pc, #88]	; (80134f0 <__sfp+0x88>)
 8013498:	60e3      	str	r3, [r4, #12]
 801349a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801349e:	6665      	str	r5, [r4, #100]	; 0x64
 80134a0:	f000 f84c 	bl	801353c <__retarget_lock_init_recursive>
 80134a4:	f7ff ff96 	bl	80133d4 <__sfp_lock_release>
 80134a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80134ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80134b0:	6025      	str	r5, [r4, #0]
 80134b2:	61a5      	str	r5, [r4, #24]
 80134b4:	2208      	movs	r2, #8
 80134b6:	4629      	mov	r1, r5
 80134b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80134bc:	f7fe fb08 	bl	8011ad0 <memset>
 80134c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80134c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80134c8:	4620      	mov	r0, r4
 80134ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134cc:	3468      	adds	r4, #104	; 0x68
 80134ce:	e7d9      	b.n	8013484 <__sfp+0x1c>
 80134d0:	2104      	movs	r1, #4
 80134d2:	4638      	mov	r0, r7
 80134d4:	f7ff ff62 	bl	801339c <__sfmoreglue>
 80134d8:	4604      	mov	r4, r0
 80134da:	6030      	str	r0, [r6, #0]
 80134dc:	2800      	cmp	r0, #0
 80134de:	d1d5      	bne.n	801348c <__sfp+0x24>
 80134e0:	f7ff ff78 	bl	80133d4 <__sfp_lock_release>
 80134e4:	230c      	movs	r3, #12
 80134e6:	603b      	str	r3, [r7, #0]
 80134e8:	e7ee      	b.n	80134c8 <__sfp+0x60>
 80134ea:	bf00      	nop
 80134ec:	08016020 	.word	0x08016020
 80134f0:	ffff0001 	.word	0xffff0001

080134f4 <_fwalk_reent>:
 80134f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134f8:	4606      	mov	r6, r0
 80134fa:	4688      	mov	r8, r1
 80134fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013500:	2700      	movs	r7, #0
 8013502:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013506:	f1b9 0901 	subs.w	r9, r9, #1
 801350a:	d505      	bpl.n	8013518 <_fwalk_reent+0x24>
 801350c:	6824      	ldr	r4, [r4, #0]
 801350e:	2c00      	cmp	r4, #0
 8013510:	d1f7      	bne.n	8013502 <_fwalk_reent+0xe>
 8013512:	4638      	mov	r0, r7
 8013514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013518:	89ab      	ldrh	r3, [r5, #12]
 801351a:	2b01      	cmp	r3, #1
 801351c:	d907      	bls.n	801352e <_fwalk_reent+0x3a>
 801351e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013522:	3301      	adds	r3, #1
 8013524:	d003      	beq.n	801352e <_fwalk_reent+0x3a>
 8013526:	4629      	mov	r1, r5
 8013528:	4630      	mov	r0, r6
 801352a:	47c0      	blx	r8
 801352c:	4307      	orrs	r7, r0
 801352e:	3568      	adds	r5, #104	; 0x68
 8013530:	e7e9      	b.n	8013506 <_fwalk_reent+0x12>
	...

08013534 <_localeconv_r>:
 8013534:	4800      	ldr	r0, [pc, #0]	; (8013538 <_localeconv_r+0x4>)
 8013536:	4770      	bx	lr
 8013538:	24000394 	.word	0x24000394

0801353c <__retarget_lock_init_recursive>:
 801353c:	4770      	bx	lr

0801353e <__retarget_lock_acquire_recursive>:
 801353e:	4770      	bx	lr

08013540 <__retarget_lock_release_recursive>:
 8013540:	4770      	bx	lr

08013542 <__swhatbuf_r>:
 8013542:	b570      	push	{r4, r5, r6, lr}
 8013544:	460e      	mov	r6, r1
 8013546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801354a:	2900      	cmp	r1, #0
 801354c:	b096      	sub	sp, #88	; 0x58
 801354e:	4614      	mov	r4, r2
 8013550:	461d      	mov	r5, r3
 8013552:	da08      	bge.n	8013566 <__swhatbuf_r+0x24>
 8013554:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013558:	2200      	movs	r2, #0
 801355a:	602a      	str	r2, [r5, #0]
 801355c:	061a      	lsls	r2, r3, #24
 801355e:	d410      	bmi.n	8013582 <__swhatbuf_r+0x40>
 8013560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013564:	e00e      	b.n	8013584 <__swhatbuf_r+0x42>
 8013566:	466a      	mov	r2, sp
 8013568:	f000 fd86 	bl	8014078 <_fstat_r>
 801356c:	2800      	cmp	r0, #0
 801356e:	dbf1      	blt.n	8013554 <__swhatbuf_r+0x12>
 8013570:	9a01      	ldr	r2, [sp, #4]
 8013572:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013576:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801357a:	425a      	negs	r2, r3
 801357c:	415a      	adcs	r2, r3
 801357e:	602a      	str	r2, [r5, #0]
 8013580:	e7ee      	b.n	8013560 <__swhatbuf_r+0x1e>
 8013582:	2340      	movs	r3, #64	; 0x40
 8013584:	2000      	movs	r0, #0
 8013586:	6023      	str	r3, [r4, #0]
 8013588:	b016      	add	sp, #88	; 0x58
 801358a:	bd70      	pop	{r4, r5, r6, pc}

0801358c <__smakebuf_r>:
 801358c:	898b      	ldrh	r3, [r1, #12]
 801358e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013590:	079d      	lsls	r5, r3, #30
 8013592:	4606      	mov	r6, r0
 8013594:	460c      	mov	r4, r1
 8013596:	d507      	bpl.n	80135a8 <__smakebuf_r+0x1c>
 8013598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801359c:	6023      	str	r3, [r4, #0]
 801359e:	6123      	str	r3, [r4, #16]
 80135a0:	2301      	movs	r3, #1
 80135a2:	6163      	str	r3, [r4, #20]
 80135a4:	b002      	add	sp, #8
 80135a6:	bd70      	pop	{r4, r5, r6, pc}
 80135a8:	ab01      	add	r3, sp, #4
 80135aa:	466a      	mov	r2, sp
 80135ac:	f7ff ffc9 	bl	8013542 <__swhatbuf_r>
 80135b0:	9900      	ldr	r1, [sp, #0]
 80135b2:	4605      	mov	r5, r0
 80135b4:	4630      	mov	r0, r6
 80135b6:	f000 fc45 	bl	8013e44 <_malloc_r>
 80135ba:	b948      	cbnz	r0, 80135d0 <__smakebuf_r+0x44>
 80135bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135c0:	059a      	lsls	r2, r3, #22
 80135c2:	d4ef      	bmi.n	80135a4 <__smakebuf_r+0x18>
 80135c4:	f023 0303 	bic.w	r3, r3, #3
 80135c8:	f043 0302 	orr.w	r3, r3, #2
 80135cc:	81a3      	strh	r3, [r4, #12]
 80135ce:	e7e3      	b.n	8013598 <__smakebuf_r+0xc>
 80135d0:	4b0d      	ldr	r3, [pc, #52]	; (8013608 <__smakebuf_r+0x7c>)
 80135d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80135d4:	89a3      	ldrh	r3, [r4, #12]
 80135d6:	6020      	str	r0, [r4, #0]
 80135d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135dc:	81a3      	strh	r3, [r4, #12]
 80135de:	9b00      	ldr	r3, [sp, #0]
 80135e0:	6163      	str	r3, [r4, #20]
 80135e2:	9b01      	ldr	r3, [sp, #4]
 80135e4:	6120      	str	r0, [r4, #16]
 80135e6:	b15b      	cbz	r3, 8013600 <__smakebuf_r+0x74>
 80135e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135ec:	4630      	mov	r0, r6
 80135ee:	f000 fd55 	bl	801409c <_isatty_r>
 80135f2:	b128      	cbz	r0, 8013600 <__smakebuf_r+0x74>
 80135f4:	89a3      	ldrh	r3, [r4, #12]
 80135f6:	f023 0303 	bic.w	r3, r3, #3
 80135fa:	f043 0301 	orr.w	r3, r3, #1
 80135fe:	81a3      	strh	r3, [r4, #12]
 8013600:	89a0      	ldrh	r0, [r4, #12]
 8013602:	4305      	orrs	r5, r0
 8013604:	81a5      	strh	r5, [r4, #12]
 8013606:	e7cd      	b.n	80135a4 <__smakebuf_r+0x18>
 8013608:	08013391 	.word	0x08013391

0801360c <malloc>:
 801360c:	4b02      	ldr	r3, [pc, #8]	; (8013618 <malloc+0xc>)
 801360e:	4601      	mov	r1, r0
 8013610:	6818      	ldr	r0, [r3, #0]
 8013612:	f000 bc17 	b.w	8013e44 <_malloc_r>
 8013616:	bf00      	nop
 8013618:	24000240 	.word	0x24000240

0801361c <memcpy>:
 801361c:	440a      	add	r2, r1
 801361e:	4291      	cmp	r1, r2
 8013620:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013624:	d100      	bne.n	8013628 <memcpy+0xc>
 8013626:	4770      	bx	lr
 8013628:	b510      	push	{r4, lr}
 801362a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801362e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013632:	4291      	cmp	r1, r2
 8013634:	d1f9      	bne.n	801362a <memcpy+0xe>
 8013636:	bd10      	pop	{r4, pc}

08013638 <_Balloc>:
 8013638:	b570      	push	{r4, r5, r6, lr}
 801363a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801363c:	4604      	mov	r4, r0
 801363e:	460d      	mov	r5, r1
 8013640:	b976      	cbnz	r6, 8013660 <_Balloc+0x28>
 8013642:	2010      	movs	r0, #16
 8013644:	f7ff ffe2 	bl	801360c <malloc>
 8013648:	4602      	mov	r2, r0
 801364a:	6260      	str	r0, [r4, #36]	; 0x24
 801364c:	b920      	cbnz	r0, 8013658 <_Balloc+0x20>
 801364e:	4b18      	ldr	r3, [pc, #96]	; (80136b0 <_Balloc+0x78>)
 8013650:	4818      	ldr	r0, [pc, #96]	; (80136b4 <_Balloc+0x7c>)
 8013652:	2166      	movs	r1, #102	; 0x66
 8013654:	f000 fcd0 	bl	8013ff8 <__assert_func>
 8013658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801365c:	6006      	str	r6, [r0, #0]
 801365e:	60c6      	str	r6, [r0, #12]
 8013660:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013662:	68f3      	ldr	r3, [r6, #12]
 8013664:	b183      	cbz	r3, 8013688 <_Balloc+0x50>
 8013666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013668:	68db      	ldr	r3, [r3, #12]
 801366a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801366e:	b9b8      	cbnz	r0, 80136a0 <_Balloc+0x68>
 8013670:	2101      	movs	r1, #1
 8013672:	fa01 f605 	lsl.w	r6, r1, r5
 8013676:	1d72      	adds	r2, r6, #5
 8013678:	0092      	lsls	r2, r2, #2
 801367a:	4620      	mov	r0, r4
 801367c:	f000 fb60 	bl	8013d40 <_calloc_r>
 8013680:	b160      	cbz	r0, 801369c <_Balloc+0x64>
 8013682:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013686:	e00e      	b.n	80136a6 <_Balloc+0x6e>
 8013688:	2221      	movs	r2, #33	; 0x21
 801368a:	2104      	movs	r1, #4
 801368c:	4620      	mov	r0, r4
 801368e:	f000 fb57 	bl	8013d40 <_calloc_r>
 8013692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013694:	60f0      	str	r0, [r6, #12]
 8013696:	68db      	ldr	r3, [r3, #12]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d1e4      	bne.n	8013666 <_Balloc+0x2e>
 801369c:	2000      	movs	r0, #0
 801369e:	bd70      	pop	{r4, r5, r6, pc}
 80136a0:	6802      	ldr	r2, [r0, #0]
 80136a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80136a6:	2300      	movs	r3, #0
 80136a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80136ac:	e7f7      	b.n	801369e <_Balloc+0x66>
 80136ae:	bf00      	nop
 80136b0:	08016065 	.word	0x08016065
 80136b4:	08016148 	.word	0x08016148

080136b8 <_Bfree>:
 80136b8:	b570      	push	{r4, r5, r6, lr}
 80136ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80136bc:	4605      	mov	r5, r0
 80136be:	460c      	mov	r4, r1
 80136c0:	b976      	cbnz	r6, 80136e0 <_Bfree+0x28>
 80136c2:	2010      	movs	r0, #16
 80136c4:	f7ff ffa2 	bl	801360c <malloc>
 80136c8:	4602      	mov	r2, r0
 80136ca:	6268      	str	r0, [r5, #36]	; 0x24
 80136cc:	b920      	cbnz	r0, 80136d8 <_Bfree+0x20>
 80136ce:	4b09      	ldr	r3, [pc, #36]	; (80136f4 <_Bfree+0x3c>)
 80136d0:	4809      	ldr	r0, [pc, #36]	; (80136f8 <_Bfree+0x40>)
 80136d2:	218a      	movs	r1, #138	; 0x8a
 80136d4:	f000 fc90 	bl	8013ff8 <__assert_func>
 80136d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80136dc:	6006      	str	r6, [r0, #0]
 80136de:	60c6      	str	r6, [r0, #12]
 80136e0:	b13c      	cbz	r4, 80136f2 <_Bfree+0x3a>
 80136e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80136e4:	6862      	ldr	r2, [r4, #4]
 80136e6:	68db      	ldr	r3, [r3, #12]
 80136e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80136ec:	6021      	str	r1, [r4, #0]
 80136ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80136f2:	bd70      	pop	{r4, r5, r6, pc}
 80136f4:	08016065 	.word	0x08016065
 80136f8:	08016148 	.word	0x08016148

080136fc <__multadd>:
 80136fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013700:	690d      	ldr	r5, [r1, #16]
 8013702:	4607      	mov	r7, r0
 8013704:	460c      	mov	r4, r1
 8013706:	461e      	mov	r6, r3
 8013708:	f101 0c14 	add.w	ip, r1, #20
 801370c:	2000      	movs	r0, #0
 801370e:	f8dc 3000 	ldr.w	r3, [ip]
 8013712:	b299      	uxth	r1, r3
 8013714:	fb02 6101 	mla	r1, r2, r1, r6
 8013718:	0c1e      	lsrs	r6, r3, #16
 801371a:	0c0b      	lsrs	r3, r1, #16
 801371c:	fb02 3306 	mla	r3, r2, r6, r3
 8013720:	b289      	uxth	r1, r1
 8013722:	3001      	adds	r0, #1
 8013724:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013728:	4285      	cmp	r5, r0
 801372a:	f84c 1b04 	str.w	r1, [ip], #4
 801372e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013732:	dcec      	bgt.n	801370e <__multadd+0x12>
 8013734:	b30e      	cbz	r6, 801377a <__multadd+0x7e>
 8013736:	68a3      	ldr	r3, [r4, #8]
 8013738:	42ab      	cmp	r3, r5
 801373a:	dc19      	bgt.n	8013770 <__multadd+0x74>
 801373c:	6861      	ldr	r1, [r4, #4]
 801373e:	4638      	mov	r0, r7
 8013740:	3101      	adds	r1, #1
 8013742:	f7ff ff79 	bl	8013638 <_Balloc>
 8013746:	4680      	mov	r8, r0
 8013748:	b928      	cbnz	r0, 8013756 <__multadd+0x5a>
 801374a:	4602      	mov	r2, r0
 801374c:	4b0c      	ldr	r3, [pc, #48]	; (8013780 <__multadd+0x84>)
 801374e:	480d      	ldr	r0, [pc, #52]	; (8013784 <__multadd+0x88>)
 8013750:	21b5      	movs	r1, #181	; 0xb5
 8013752:	f000 fc51 	bl	8013ff8 <__assert_func>
 8013756:	6922      	ldr	r2, [r4, #16]
 8013758:	3202      	adds	r2, #2
 801375a:	f104 010c 	add.w	r1, r4, #12
 801375e:	0092      	lsls	r2, r2, #2
 8013760:	300c      	adds	r0, #12
 8013762:	f7ff ff5b 	bl	801361c <memcpy>
 8013766:	4621      	mov	r1, r4
 8013768:	4638      	mov	r0, r7
 801376a:	f7ff ffa5 	bl	80136b8 <_Bfree>
 801376e:	4644      	mov	r4, r8
 8013770:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013774:	3501      	adds	r5, #1
 8013776:	615e      	str	r6, [r3, #20]
 8013778:	6125      	str	r5, [r4, #16]
 801377a:	4620      	mov	r0, r4
 801377c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013780:	080160d7 	.word	0x080160d7
 8013784:	08016148 	.word	0x08016148

08013788 <__hi0bits>:
 8013788:	0c03      	lsrs	r3, r0, #16
 801378a:	041b      	lsls	r3, r3, #16
 801378c:	b9d3      	cbnz	r3, 80137c4 <__hi0bits+0x3c>
 801378e:	0400      	lsls	r0, r0, #16
 8013790:	2310      	movs	r3, #16
 8013792:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013796:	bf04      	itt	eq
 8013798:	0200      	lsleq	r0, r0, #8
 801379a:	3308      	addeq	r3, #8
 801379c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80137a0:	bf04      	itt	eq
 80137a2:	0100      	lsleq	r0, r0, #4
 80137a4:	3304      	addeq	r3, #4
 80137a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80137aa:	bf04      	itt	eq
 80137ac:	0080      	lsleq	r0, r0, #2
 80137ae:	3302      	addeq	r3, #2
 80137b0:	2800      	cmp	r0, #0
 80137b2:	db05      	blt.n	80137c0 <__hi0bits+0x38>
 80137b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80137b8:	f103 0301 	add.w	r3, r3, #1
 80137bc:	bf08      	it	eq
 80137be:	2320      	moveq	r3, #32
 80137c0:	4618      	mov	r0, r3
 80137c2:	4770      	bx	lr
 80137c4:	2300      	movs	r3, #0
 80137c6:	e7e4      	b.n	8013792 <__hi0bits+0xa>

080137c8 <__lo0bits>:
 80137c8:	6803      	ldr	r3, [r0, #0]
 80137ca:	f013 0207 	ands.w	r2, r3, #7
 80137ce:	4601      	mov	r1, r0
 80137d0:	d00b      	beq.n	80137ea <__lo0bits+0x22>
 80137d2:	07da      	lsls	r2, r3, #31
 80137d4:	d423      	bmi.n	801381e <__lo0bits+0x56>
 80137d6:	0798      	lsls	r0, r3, #30
 80137d8:	bf49      	itett	mi
 80137da:	085b      	lsrmi	r3, r3, #1
 80137dc:	089b      	lsrpl	r3, r3, #2
 80137de:	2001      	movmi	r0, #1
 80137e0:	600b      	strmi	r3, [r1, #0]
 80137e2:	bf5c      	itt	pl
 80137e4:	600b      	strpl	r3, [r1, #0]
 80137e6:	2002      	movpl	r0, #2
 80137e8:	4770      	bx	lr
 80137ea:	b298      	uxth	r0, r3
 80137ec:	b9a8      	cbnz	r0, 801381a <__lo0bits+0x52>
 80137ee:	0c1b      	lsrs	r3, r3, #16
 80137f0:	2010      	movs	r0, #16
 80137f2:	b2da      	uxtb	r2, r3
 80137f4:	b90a      	cbnz	r2, 80137fa <__lo0bits+0x32>
 80137f6:	3008      	adds	r0, #8
 80137f8:	0a1b      	lsrs	r3, r3, #8
 80137fa:	071a      	lsls	r2, r3, #28
 80137fc:	bf04      	itt	eq
 80137fe:	091b      	lsreq	r3, r3, #4
 8013800:	3004      	addeq	r0, #4
 8013802:	079a      	lsls	r2, r3, #30
 8013804:	bf04      	itt	eq
 8013806:	089b      	lsreq	r3, r3, #2
 8013808:	3002      	addeq	r0, #2
 801380a:	07da      	lsls	r2, r3, #31
 801380c:	d403      	bmi.n	8013816 <__lo0bits+0x4e>
 801380e:	085b      	lsrs	r3, r3, #1
 8013810:	f100 0001 	add.w	r0, r0, #1
 8013814:	d005      	beq.n	8013822 <__lo0bits+0x5a>
 8013816:	600b      	str	r3, [r1, #0]
 8013818:	4770      	bx	lr
 801381a:	4610      	mov	r0, r2
 801381c:	e7e9      	b.n	80137f2 <__lo0bits+0x2a>
 801381e:	2000      	movs	r0, #0
 8013820:	4770      	bx	lr
 8013822:	2020      	movs	r0, #32
 8013824:	4770      	bx	lr
	...

08013828 <__i2b>:
 8013828:	b510      	push	{r4, lr}
 801382a:	460c      	mov	r4, r1
 801382c:	2101      	movs	r1, #1
 801382e:	f7ff ff03 	bl	8013638 <_Balloc>
 8013832:	4602      	mov	r2, r0
 8013834:	b928      	cbnz	r0, 8013842 <__i2b+0x1a>
 8013836:	4b05      	ldr	r3, [pc, #20]	; (801384c <__i2b+0x24>)
 8013838:	4805      	ldr	r0, [pc, #20]	; (8013850 <__i2b+0x28>)
 801383a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801383e:	f000 fbdb 	bl	8013ff8 <__assert_func>
 8013842:	2301      	movs	r3, #1
 8013844:	6144      	str	r4, [r0, #20]
 8013846:	6103      	str	r3, [r0, #16]
 8013848:	bd10      	pop	{r4, pc}
 801384a:	bf00      	nop
 801384c:	080160d7 	.word	0x080160d7
 8013850:	08016148 	.word	0x08016148

08013854 <__multiply>:
 8013854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013858:	4691      	mov	r9, r2
 801385a:	690a      	ldr	r2, [r1, #16]
 801385c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013860:	429a      	cmp	r2, r3
 8013862:	bfb8      	it	lt
 8013864:	460b      	movlt	r3, r1
 8013866:	460c      	mov	r4, r1
 8013868:	bfbc      	itt	lt
 801386a:	464c      	movlt	r4, r9
 801386c:	4699      	movlt	r9, r3
 801386e:	6927      	ldr	r7, [r4, #16]
 8013870:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013874:	68a3      	ldr	r3, [r4, #8]
 8013876:	6861      	ldr	r1, [r4, #4]
 8013878:	eb07 060a 	add.w	r6, r7, sl
 801387c:	42b3      	cmp	r3, r6
 801387e:	b085      	sub	sp, #20
 8013880:	bfb8      	it	lt
 8013882:	3101      	addlt	r1, #1
 8013884:	f7ff fed8 	bl	8013638 <_Balloc>
 8013888:	b930      	cbnz	r0, 8013898 <__multiply+0x44>
 801388a:	4602      	mov	r2, r0
 801388c:	4b44      	ldr	r3, [pc, #272]	; (80139a0 <__multiply+0x14c>)
 801388e:	4845      	ldr	r0, [pc, #276]	; (80139a4 <__multiply+0x150>)
 8013890:	f240 115d 	movw	r1, #349	; 0x15d
 8013894:	f000 fbb0 	bl	8013ff8 <__assert_func>
 8013898:	f100 0514 	add.w	r5, r0, #20
 801389c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80138a0:	462b      	mov	r3, r5
 80138a2:	2200      	movs	r2, #0
 80138a4:	4543      	cmp	r3, r8
 80138a6:	d321      	bcc.n	80138ec <__multiply+0x98>
 80138a8:	f104 0314 	add.w	r3, r4, #20
 80138ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80138b0:	f109 0314 	add.w	r3, r9, #20
 80138b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80138b8:	9202      	str	r2, [sp, #8]
 80138ba:	1b3a      	subs	r2, r7, r4
 80138bc:	3a15      	subs	r2, #21
 80138be:	f022 0203 	bic.w	r2, r2, #3
 80138c2:	3204      	adds	r2, #4
 80138c4:	f104 0115 	add.w	r1, r4, #21
 80138c8:	428f      	cmp	r7, r1
 80138ca:	bf38      	it	cc
 80138cc:	2204      	movcc	r2, #4
 80138ce:	9201      	str	r2, [sp, #4]
 80138d0:	9a02      	ldr	r2, [sp, #8]
 80138d2:	9303      	str	r3, [sp, #12]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d80c      	bhi.n	80138f2 <__multiply+0x9e>
 80138d8:	2e00      	cmp	r6, #0
 80138da:	dd03      	ble.n	80138e4 <__multiply+0x90>
 80138dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d05a      	beq.n	801399a <__multiply+0x146>
 80138e4:	6106      	str	r6, [r0, #16]
 80138e6:	b005      	add	sp, #20
 80138e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ec:	f843 2b04 	str.w	r2, [r3], #4
 80138f0:	e7d8      	b.n	80138a4 <__multiply+0x50>
 80138f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80138f6:	f1ba 0f00 	cmp.w	sl, #0
 80138fa:	d024      	beq.n	8013946 <__multiply+0xf2>
 80138fc:	f104 0e14 	add.w	lr, r4, #20
 8013900:	46a9      	mov	r9, r5
 8013902:	f04f 0c00 	mov.w	ip, #0
 8013906:	f85e 2b04 	ldr.w	r2, [lr], #4
 801390a:	f8d9 1000 	ldr.w	r1, [r9]
 801390e:	fa1f fb82 	uxth.w	fp, r2
 8013912:	b289      	uxth	r1, r1
 8013914:	fb0a 110b 	mla	r1, sl, fp, r1
 8013918:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801391c:	f8d9 2000 	ldr.w	r2, [r9]
 8013920:	4461      	add	r1, ip
 8013922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013926:	fb0a c20b 	mla	r2, sl, fp, ip
 801392a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801392e:	b289      	uxth	r1, r1
 8013930:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013934:	4577      	cmp	r7, lr
 8013936:	f849 1b04 	str.w	r1, [r9], #4
 801393a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801393e:	d8e2      	bhi.n	8013906 <__multiply+0xb2>
 8013940:	9a01      	ldr	r2, [sp, #4]
 8013942:	f845 c002 	str.w	ip, [r5, r2]
 8013946:	9a03      	ldr	r2, [sp, #12]
 8013948:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801394c:	3304      	adds	r3, #4
 801394e:	f1b9 0f00 	cmp.w	r9, #0
 8013952:	d020      	beq.n	8013996 <__multiply+0x142>
 8013954:	6829      	ldr	r1, [r5, #0]
 8013956:	f104 0c14 	add.w	ip, r4, #20
 801395a:	46ae      	mov	lr, r5
 801395c:	f04f 0a00 	mov.w	sl, #0
 8013960:	f8bc b000 	ldrh.w	fp, [ip]
 8013964:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013968:	fb09 220b 	mla	r2, r9, fp, r2
 801396c:	4492      	add	sl, r2
 801396e:	b289      	uxth	r1, r1
 8013970:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013974:	f84e 1b04 	str.w	r1, [lr], #4
 8013978:	f85c 2b04 	ldr.w	r2, [ip], #4
 801397c:	f8be 1000 	ldrh.w	r1, [lr]
 8013980:	0c12      	lsrs	r2, r2, #16
 8013982:	fb09 1102 	mla	r1, r9, r2, r1
 8013986:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801398a:	4567      	cmp	r7, ip
 801398c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013990:	d8e6      	bhi.n	8013960 <__multiply+0x10c>
 8013992:	9a01      	ldr	r2, [sp, #4]
 8013994:	50a9      	str	r1, [r5, r2]
 8013996:	3504      	adds	r5, #4
 8013998:	e79a      	b.n	80138d0 <__multiply+0x7c>
 801399a:	3e01      	subs	r6, #1
 801399c:	e79c      	b.n	80138d8 <__multiply+0x84>
 801399e:	bf00      	nop
 80139a0:	080160d7 	.word	0x080160d7
 80139a4:	08016148 	.word	0x08016148

080139a8 <__pow5mult>:
 80139a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139ac:	4615      	mov	r5, r2
 80139ae:	f012 0203 	ands.w	r2, r2, #3
 80139b2:	4606      	mov	r6, r0
 80139b4:	460f      	mov	r7, r1
 80139b6:	d007      	beq.n	80139c8 <__pow5mult+0x20>
 80139b8:	4c25      	ldr	r4, [pc, #148]	; (8013a50 <__pow5mult+0xa8>)
 80139ba:	3a01      	subs	r2, #1
 80139bc:	2300      	movs	r3, #0
 80139be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80139c2:	f7ff fe9b 	bl	80136fc <__multadd>
 80139c6:	4607      	mov	r7, r0
 80139c8:	10ad      	asrs	r5, r5, #2
 80139ca:	d03d      	beq.n	8013a48 <__pow5mult+0xa0>
 80139cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80139ce:	b97c      	cbnz	r4, 80139f0 <__pow5mult+0x48>
 80139d0:	2010      	movs	r0, #16
 80139d2:	f7ff fe1b 	bl	801360c <malloc>
 80139d6:	4602      	mov	r2, r0
 80139d8:	6270      	str	r0, [r6, #36]	; 0x24
 80139da:	b928      	cbnz	r0, 80139e8 <__pow5mult+0x40>
 80139dc:	4b1d      	ldr	r3, [pc, #116]	; (8013a54 <__pow5mult+0xac>)
 80139de:	481e      	ldr	r0, [pc, #120]	; (8013a58 <__pow5mult+0xb0>)
 80139e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80139e4:	f000 fb08 	bl	8013ff8 <__assert_func>
 80139e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80139ec:	6004      	str	r4, [r0, #0]
 80139ee:	60c4      	str	r4, [r0, #12]
 80139f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80139f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80139f8:	b94c      	cbnz	r4, 8013a0e <__pow5mult+0x66>
 80139fa:	f240 2171 	movw	r1, #625	; 0x271
 80139fe:	4630      	mov	r0, r6
 8013a00:	f7ff ff12 	bl	8013828 <__i2b>
 8013a04:	2300      	movs	r3, #0
 8013a06:	f8c8 0008 	str.w	r0, [r8, #8]
 8013a0a:	4604      	mov	r4, r0
 8013a0c:	6003      	str	r3, [r0, #0]
 8013a0e:	f04f 0900 	mov.w	r9, #0
 8013a12:	07eb      	lsls	r3, r5, #31
 8013a14:	d50a      	bpl.n	8013a2c <__pow5mult+0x84>
 8013a16:	4639      	mov	r1, r7
 8013a18:	4622      	mov	r2, r4
 8013a1a:	4630      	mov	r0, r6
 8013a1c:	f7ff ff1a 	bl	8013854 <__multiply>
 8013a20:	4639      	mov	r1, r7
 8013a22:	4680      	mov	r8, r0
 8013a24:	4630      	mov	r0, r6
 8013a26:	f7ff fe47 	bl	80136b8 <_Bfree>
 8013a2a:	4647      	mov	r7, r8
 8013a2c:	106d      	asrs	r5, r5, #1
 8013a2e:	d00b      	beq.n	8013a48 <__pow5mult+0xa0>
 8013a30:	6820      	ldr	r0, [r4, #0]
 8013a32:	b938      	cbnz	r0, 8013a44 <__pow5mult+0x9c>
 8013a34:	4622      	mov	r2, r4
 8013a36:	4621      	mov	r1, r4
 8013a38:	4630      	mov	r0, r6
 8013a3a:	f7ff ff0b 	bl	8013854 <__multiply>
 8013a3e:	6020      	str	r0, [r4, #0]
 8013a40:	f8c0 9000 	str.w	r9, [r0]
 8013a44:	4604      	mov	r4, r0
 8013a46:	e7e4      	b.n	8013a12 <__pow5mult+0x6a>
 8013a48:	4638      	mov	r0, r7
 8013a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a4e:	bf00      	nop
 8013a50:	08016298 	.word	0x08016298
 8013a54:	08016065 	.word	0x08016065
 8013a58:	08016148 	.word	0x08016148

08013a5c <__lshift>:
 8013a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a60:	460c      	mov	r4, r1
 8013a62:	6849      	ldr	r1, [r1, #4]
 8013a64:	6923      	ldr	r3, [r4, #16]
 8013a66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013a6a:	68a3      	ldr	r3, [r4, #8]
 8013a6c:	4607      	mov	r7, r0
 8013a6e:	4691      	mov	r9, r2
 8013a70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013a74:	f108 0601 	add.w	r6, r8, #1
 8013a78:	42b3      	cmp	r3, r6
 8013a7a:	db0b      	blt.n	8013a94 <__lshift+0x38>
 8013a7c:	4638      	mov	r0, r7
 8013a7e:	f7ff fddb 	bl	8013638 <_Balloc>
 8013a82:	4605      	mov	r5, r0
 8013a84:	b948      	cbnz	r0, 8013a9a <__lshift+0x3e>
 8013a86:	4602      	mov	r2, r0
 8013a88:	4b2a      	ldr	r3, [pc, #168]	; (8013b34 <__lshift+0xd8>)
 8013a8a:	482b      	ldr	r0, [pc, #172]	; (8013b38 <__lshift+0xdc>)
 8013a8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013a90:	f000 fab2 	bl	8013ff8 <__assert_func>
 8013a94:	3101      	adds	r1, #1
 8013a96:	005b      	lsls	r3, r3, #1
 8013a98:	e7ee      	b.n	8013a78 <__lshift+0x1c>
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	f100 0114 	add.w	r1, r0, #20
 8013aa0:	f100 0210 	add.w	r2, r0, #16
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	4553      	cmp	r3, sl
 8013aa8:	db37      	blt.n	8013b1a <__lshift+0xbe>
 8013aaa:	6920      	ldr	r0, [r4, #16]
 8013aac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013ab0:	f104 0314 	add.w	r3, r4, #20
 8013ab4:	f019 091f 	ands.w	r9, r9, #31
 8013ab8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013abc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013ac0:	d02f      	beq.n	8013b22 <__lshift+0xc6>
 8013ac2:	f1c9 0e20 	rsb	lr, r9, #32
 8013ac6:	468a      	mov	sl, r1
 8013ac8:	f04f 0c00 	mov.w	ip, #0
 8013acc:	681a      	ldr	r2, [r3, #0]
 8013ace:	fa02 f209 	lsl.w	r2, r2, r9
 8013ad2:	ea42 020c 	orr.w	r2, r2, ip
 8013ad6:	f84a 2b04 	str.w	r2, [sl], #4
 8013ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ade:	4298      	cmp	r0, r3
 8013ae0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013ae4:	d8f2      	bhi.n	8013acc <__lshift+0x70>
 8013ae6:	1b03      	subs	r3, r0, r4
 8013ae8:	3b15      	subs	r3, #21
 8013aea:	f023 0303 	bic.w	r3, r3, #3
 8013aee:	3304      	adds	r3, #4
 8013af0:	f104 0215 	add.w	r2, r4, #21
 8013af4:	4290      	cmp	r0, r2
 8013af6:	bf38      	it	cc
 8013af8:	2304      	movcc	r3, #4
 8013afa:	f841 c003 	str.w	ip, [r1, r3]
 8013afe:	f1bc 0f00 	cmp.w	ip, #0
 8013b02:	d001      	beq.n	8013b08 <__lshift+0xac>
 8013b04:	f108 0602 	add.w	r6, r8, #2
 8013b08:	3e01      	subs	r6, #1
 8013b0a:	4638      	mov	r0, r7
 8013b0c:	612e      	str	r6, [r5, #16]
 8013b0e:	4621      	mov	r1, r4
 8013b10:	f7ff fdd2 	bl	80136b8 <_Bfree>
 8013b14:	4628      	mov	r0, r5
 8013b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013b1e:	3301      	adds	r3, #1
 8013b20:	e7c1      	b.n	8013aa6 <__lshift+0x4a>
 8013b22:	3904      	subs	r1, #4
 8013b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b28:	f841 2f04 	str.w	r2, [r1, #4]!
 8013b2c:	4298      	cmp	r0, r3
 8013b2e:	d8f9      	bhi.n	8013b24 <__lshift+0xc8>
 8013b30:	e7ea      	b.n	8013b08 <__lshift+0xac>
 8013b32:	bf00      	nop
 8013b34:	080160d7 	.word	0x080160d7
 8013b38:	08016148 	.word	0x08016148

08013b3c <__mcmp>:
 8013b3c:	b530      	push	{r4, r5, lr}
 8013b3e:	6902      	ldr	r2, [r0, #16]
 8013b40:	690c      	ldr	r4, [r1, #16]
 8013b42:	1b12      	subs	r2, r2, r4
 8013b44:	d10e      	bne.n	8013b64 <__mcmp+0x28>
 8013b46:	f100 0314 	add.w	r3, r0, #20
 8013b4a:	3114      	adds	r1, #20
 8013b4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013b50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013b54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013b58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013b5c:	42a5      	cmp	r5, r4
 8013b5e:	d003      	beq.n	8013b68 <__mcmp+0x2c>
 8013b60:	d305      	bcc.n	8013b6e <__mcmp+0x32>
 8013b62:	2201      	movs	r2, #1
 8013b64:	4610      	mov	r0, r2
 8013b66:	bd30      	pop	{r4, r5, pc}
 8013b68:	4283      	cmp	r3, r0
 8013b6a:	d3f3      	bcc.n	8013b54 <__mcmp+0x18>
 8013b6c:	e7fa      	b.n	8013b64 <__mcmp+0x28>
 8013b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b72:	e7f7      	b.n	8013b64 <__mcmp+0x28>

08013b74 <__mdiff>:
 8013b74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b78:	460c      	mov	r4, r1
 8013b7a:	4606      	mov	r6, r0
 8013b7c:	4611      	mov	r1, r2
 8013b7e:	4620      	mov	r0, r4
 8013b80:	4690      	mov	r8, r2
 8013b82:	f7ff ffdb 	bl	8013b3c <__mcmp>
 8013b86:	1e05      	subs	r5, r0, #0
 8013b88:	d110      	bne.n	8013bac <__mdiff+0x38>
 8013b8a:	4629      	mov	r1, r5
 8013b8c:	4630      	mov	r0, r6
 8013b8e:	f7ff fd53 	bl	8013638 <_Balloc>
 8013b92:	b930      	cbnz	r0, 8013ba2 <__mdiff+0x2e>
 8013b94:	4b3a      	ldr	r3, [pc, #232]	; (8013c80 <__mdiff+0x10c>)
 8013b96:	4602      	mov	r2, r0
 8013b98:	f240 2132 	movw	r1, #562	; 0x232
 8013b9c:	4839      	ldr	r0, [pc, #228]	; (8013c84 <__mdiff+0x110>)
 8013b9e:	f000 fa2b 	bl	8013ff8 <__assert_func>
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bac:	bfa4      	itt	ge
 8013bae:	4643      	movge	r3, r8
 8013bb0:	46a0      	movge	r8, r4
 8013bb2:	4630      	mov	r0, r6
 8013bb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013bb8:	bfa6      	itte	ge
 8013bba:	461c      	movge	r4, r3
 8013bbc:	2500      	movge	r5, #0
 8013bbe:	2501      	movlt	r5, #1
 8013bc0:	f7ff fd3a 	bl	8013638 <_Balloc>
 8013bc4:	b920      	cbnz	r0, 8013bd0 <__mdiff+0x5c>
 8013bc6:	4b2e      	ldr	r3, [pc, #184]	; (8013c80 <__mdiff+0x10c>)
 8013bc8:	4602      	mov	r2, r0
 8013bca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013bce:	e7e5      	b.n	8013b9c <__mdiff+0x28>
 8013bd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013bd4:	6926      	ldr	r6, [r4, #16]
 8013bd6:	60c5      	str	r5, [r0, #12]
 8013bd8:	f104 0914 	add.w	r9, r4, #20
 8013bdc:	f108 0514 	add.w	r5, r8, #20
 8013be0:	f100 0e14 	add.w	lr, r0, #20
 8013be4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013be8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013bec:	f108 0210 	add.w	r2, r8, #16
 8013bf0:	46f2      	mov	sl, lr
 8013bf2:	2100      	movs	r1, #0
 8013bf4:	f859 3b04 	ldr.w	r3, [r9], #4
 8013bf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013bfc:	fa1f f883 	uxth.w	r8, r3
 8013c00:	fa11 f18b 	uxtah	r1, r1, fp
 8013c04:	0c1b      	lsrs	r3, r3, #16
 8013c06:	eba1 0808 	sub.w	r8, r1, r8
 8013c0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013c0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013c12:	fa1f f888 	uxth.w	r8, r8
 8013c16:	1419      	asrs	r1, r3, #16
 8013c18:	454e      	cmp	r6, r9
 8013c1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013c1e:	f84a 3b04 	str.w	r3, [sl], #4
 8013c22:	d8e7      	bhi.n	8013bf4 <__mdiff+0x80>
 8013c24:	1b33      	subs	r3, r6, r4
 8013c26:	3b15      	subs	r3, #21
 8013c28:	f023 0303 	bic.w	r3, r3, #3
 8013c2c:	3304      	adds	r3, #4
 8013c2e:	3415      	adds	r4, #21
 8013c30:	42a6      	cmp	r6, r4
 8013c32:	bf38      	it	cc
 8013c34:	2304      	movcc	r3, #4
 8013c36:	441d      	add	r5, r3
 8013c38:	4473      	add	r3, lr
 8013c3a:	469e      	mov	lr, r3
 8013c3c:	462e      	mov	r6, r5
 8013c3e:	4566      	cmp	r6, ip
 8013c40:	d30e      	bcc.n	8013c60 <__mdiff+0xec>
 8013c42:	f10c 0203 	add.w	r2, ip, #3
 8013c46:	1b52      	subs	r2, r2, r5
 8013c48:	f022 0203 	bic.w	r2, r2, #3
 8013c4c:	3d03      	subs	r5, #3
 8013c4e:	45ac      	cmp	ip, r5
 8013c50:	bf38      	it	cc
 8013c52:	2200      	movcc	r2, #0
 8013c54:	441a      	add	r2, r3
 8013c56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013c5a:	b17b      	cbz	r3, 8013c7c <__mdiff+0x108>
 8013c5c:	6107      	str	r7, [r0, #16]
 8013c5e:	e7a3      	b.n	8013ba8 <__mdiff+0x34>
 8013c60:	f856 8b04 	ldr.w	r8, [r6], #4
 8013c64:	fa11 f288 	uxtah	r2, r1, r8
 8013c68:	1414      	asrs	r4, r2, #16
 8013c6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013c6e:	b292      	uxth	r2, r2
 8013c70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013c74:	f84e 2b04 	str.w	r2, [lr], #4
 8013c78:	1421      	asrs	r1, r4, #16
 8013c7a:	e7e0      	b.n	8013c3e <__mdiff+0xca>
 8013c7c:	3f01      	subs	r7, #1
 8013c7e:	e7ea      	b.n	8013c56 <__mdiff+0xe2>
 8013c80:	080160d7 	.word	0x080160d7
 8013c84:	08016148 	.word	0x08016148

08013c88 <__d2b>:
 8013c88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013c8c:	4689      	mov	r9, r1
 8013c8e:	2101      	movs	r1, #1
 8013c90:	ec57 6b10 	vmov	r6, r7, d0
 8013c94:	4690      	mov	r8, r2
 8013c96:	f7ff fccf 	bl	8013638 <_Balloc>
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	b930      	cbnz	r0, 8013cac <__d2b+0x24>
 8013c9e:	4602      	mov	r2, r0
 8013ca0:	4b25      	ldr	r3, [pc, #148]	; (8013d38 <__d2b+0xb0>)
 8013ca2:	4826      	ldr	r0, [pc, #152]	; (8013d3c <__d2b+0xb4>)
 8013ca4:	f240 310a 	movw	r1, #778	; 0x30a
 8013ca8:	f000 f9a6 	bl	8013ff8 <__assert_func>
 8013cac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013cb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013cb4:	bb35      	cbnz	r5, 8013d04 <__d2b+0x7c>
 8013cb6:	2e00      	cmp	r6, #0
 8013cb8:	9301      	str	r3, [sp, #4]
 8013cba:	d028      	beq.n	8013d0e <__d2b+0x86>
 8013cbc:	4668      	mov	r0, sp
 8013cbe:	9600      	str	r6, [sp, #0]
 8013cc0:	f7ff fd82 	bl	80137c8 <__lo0bits>
 8013cc4:	9900      	ldr	r1, [sp, #0]
 8013cc6:	b300      	cbz	r0, 8013d0a <__d2b+0x82>
 8013cc8:	9a01      	ldr	r2, [sp, #4]
 8013cca:	f1c0 0320 	rsb	r3, r0, #32
 8013cce:	fa02 f303 	lsl.w	r3, r2, r3
 8013cd2:	430b      	orrs	r3, r1
 8013cd4:	40c2      	lsrs	r2, r0
 8013cd6:	6163      	str	r3, [r4, #20]
 8013cd8:	9201      	str	r2, [sp, #4]
 8013cda:	9b01      	ldr	r3, [sp, #4]
 8013cdc:	61a3      	str	r3, [r4, #24]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	bf14      	ite	ne
 8013ce2:	2202      	movne	r2, #2
 8013ce4:	2201      	moveq	r2, #1
 8013ce6:	6122      	str	r2, [r4, #16]
 8013ce8:	b1d5      	cbz	r5, 8013d20 <__d2b+0x98>
 8013cea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013cee:	4405      	add	r5, r0
 8013cf0:	f8c9 5000 	str.w	r5, [r9]
 8013cf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013cf8:	f8c8 0000 	str.w	r0, [r8]
 8013cfc:	4620      	mov	r0, r4
 8013cfe:	b003      	add	sp, #12
 8013d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013d08:	e7d5      	b.n	8013cb6 <__d2b+0x2e>
 8013d0a:	6161      	str	r1, [r4, #20]
 8013d0c:	e7e5      	b.n	8013cda <__d2b+0x52>
 8013d0e:	a801      	add	r0, sp, #4
 8013d10:	f7ff fd5a 	bl	80137c8 <__lo0bits>
 8013d14:	9b01      	ldr	r3, [sp, #4]
 8013d16:	6163      	str	r3, [r4, #20]
 8013d18:	2201      	movs	r2, #1
 8013d1a:	6122      	str	r2, [r4, #16]
 8013d1c:	3020      	adds	r0, #32
 8013d1e:	e7e3      	b.n	8013ce8 <__d2b+0x60>
 8013d20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013d24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013d28:	f8c9 0000 	str.w	r0, [r9]
 8013d2c:	6918      	ldr	r0, [r3, #16]
 8013d2e:	f7ff fd2b 	bl	8013788 <__hi0bits>
 8013d32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013d36:	e7df      	b.n	8013cf8 <__d2b+0x70>
 8013d38:	080160d7 	.word	0x080160d7
 8013d3c:	08016148 	.word	0x08016148

08013d40 <_calloc_r>:
 8013d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d42:	fba1 2402 	umull	r2, r4, r1, r2
 8013d46:	b94c      	cbnz	r4, 8013d5c <_calloc_r+0x1c>
 8013d48:	4611      	mov	r1, r2
 8013d4a:	9201      	str	r2, [sp, #4]
 8013d4c:	f000 f87a 	bl	8013e44 <_malloc_r>
 8013d50:	9a01      	ldr	r2, [sp, #4]
 8013d52:	4605      	mov	r5, r0
 8013d54:	b930      	cbnz	r0, 8013d64 <_calloc_r+0x24>
 8013d56:	4628      	mov	r0, r5
 8013d58:	b003      	add	sp, #12
 8013d5a:	bd30      	pop	{r4, r5, pc}
 8013d5c:	220c      	movs	r2, #12
 8013d5e:	6002      	str	r2, [r0, #0]
 8013d60:	2500      	movs	r5, #0
 8013d62:	e7f8      	b.n	8013d56 <_calloc_r+0x16>
 8013d64:	4621      	mov	r1, r4
 8013d66:	f7fd feb3 	bl	8011ad0 <memset>
 8013d6a:	e7f4      	b.n	8013d56 <_calloc_r+0x16>

08013d6c <_free_r>:
 8013d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d6e:	2900      	cmp	r1, #0
 8013d70:	d044      	beq.n	8013dfc <_free_r+0x90>
 8013d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d76:	9001      	str	r0, [sp, #4]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	f1a1 0404 	sub.w	r4, r1, #4
 8013d7e:	bfb8      	it	lt
 8013d80:	18e4      	addlt	r4, r4, r3
 8013d82:	f000 f9bf 	bl	8014104 <__malloc_lock>
 8013d86:	4a1e      	ldr	r2, [pc, #120]	; (8013e00 <_free_r+0x94>)
 8013d88:	9801      	ldr	r0, [sp, #4]
 8013d8a:	6813      	ldr	r3, [r2, #0]
 8013d8c:	b933      	cbnz	r3, 8013d9c <_free_r+0x30>
 8013d8e:	6063      	str	r3, [r4, #4]
 8013d90:	6014      	str	r4, [r2, #0]
 8013d92:	b003      	add	sp, #12
 8013d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013d98:	f000 b9ba 	b.w	8014110 <__malloc_unlock>
 8013d9c:	42a3      	cmp	r3, r4
 8013d9e:	d908      	bls.n	8013db2 <_free_r+0x46>
 8013da0:	6825      	ldr	r5, [r4, #0]
 8013da2:	1961      	adds	r1, r4, r5
 8013da4:	428b      	cmp	r3, r1
 8013da6:	bf01      	itttt	eq
 8013da8:	6819      	ldreq	r1, [r3, #0]
 8013daa:	685b      	ldreq	r3, [r3, #4]
 8013dac:	1949      	addeq	r1, r1, r5
 8013dae:	6021      	streq	r1, [r4, #0]
 8013db0:	e7ed      	b.n	8013d8e <_free_r+0x22>
 8013db2:	461a      	mov	r2, r3
 8013db4:	685b      	ldr	r3, [r3, #4]
 8013db6:	b10b      	cbz	r3, 8013dbc <_free_r+0x50>
 8013db8:	42a3      	cmp	r3, r4
 8013dba:	d9fa      	bls.n	8013db2 <_free_r+0x46>
 8013dbc:	6811      	ldr	r1, [r2, #0]
 8013dbe:	1855      	adds	r5, r2, r1
 8013dc0:	42a5      	cmp	r5, r4
 8013dc2:	d10b      	bne.n	8013ddc <_free_r+0x70>
 8013dc4:	6824      	ldr	r4, [r4, #0]
 8013dc6:	4421      	add	r1, r4
 8013dc8:	1854      	adds	r4, r2, r1
 8013dca:	42a3      	cmp	r3, r4
 8013dcc:	6011      	str	r1, [r2, #0]
 8013dce:	d1e0      	bne.n	8013d92 <_free_r+0x26>
 8013dd0:	681c      	ldr	r4, [r3, #0]
 8013dd2:	685b      	ldr	r3, [r3, #4]
 8013dd4:	6053      	str	r3, [r2, #4]
 8013dd6:	4421      	add	r1, r4
 8013dd8:	6011      	str	r1, [r2, #0]
 8013dda:	e7da      	b.n	8013d92 <_free_r+0x26>
 8013ddc:	d902      	bls.n	8013de4 <_free_r+0x78>
 8013dde:	230c      	movs	r3, #12
 8013de0:	6003      	str	r3, [r0, #0]
 8013de2:	e7d6      	b.n	8013d92 <_free_r+0x26>
 8013de4:	6825      	ldr	r5, [r4, #0]
 8013de6:	1961      	adds	r1, r4, r5
 8013de8:	428b      	cmp	r3, r1
 8013dea:	bf04      	itt	eq
 8013dec:	6819      	ldreq	r1, [r3, #0]
 8013dee:	685b      	ldreq	r3, [r3, #4]
 8013df0:	6063      	str	r3, [r4, #4]
 8013df2:	bf04      	itt	eq
 8013df4:	1949      	addeq	r1, r1, r5
 8013df6:	6021      	streq	r1, [r4, #0]
 8013df8:	6054      	str	r4, [r2, #4]
 8013dfa:	e7ca      	b.n	8013d92 <_free_r+0x26>
 8013dfc:	b003      	add	sp, #12
 8013dfe:	bd30      	pop	{r4, r5, pc}
 8013e00:	24001600 	.word	0x24001600

08013e04 <sbrk_aligned>:
 8013e04:	b570      	push	{r4, r5, r6, lr}
 8013e06:	4e0e      	ldr	r6, [pc, #56]	; (8013e40 <sbrk_aligned+0x3c>)
 8013e08:	460c      	mov	r4, r1
 8013e0a:	6831      	ldr	r1, [r6, #0]
 8013e0c:	4605      	mov	r5, r0
 8013e0e:	b911      	cbnz	r1, 8013e16 <sbrk_aligned+0x12>
 8013e10:	f000 f88c 	bl	8013f2c <_sbrk_r>
 8013e14:	6030      	str	r0, [r6, #0]
 8013e16:	4621      	mov	r1, r4
 8013e18:	4628      	mov	r0, r5
 8013e1a:	f000 f887 	bl	8013f2c <_sbrk_r>
 8013e1e:	1c43      	adds	r3, r0, #1
 8013e20:	d00a      	beq.n	8013e38 <sbrk_aligned+0x34>
 8013e22:	1cc4      	adds	r4, r0, #3
 8013e24:	f024 0403 	bic.w	r4, r4, #3
 8013e28:	42a0      	cmp	r0, r4
 8013e2a:	d007      	beq.n	8013e3c <sbrk_aligned+0x38>
 8013e2c:	1a21      	subs	r1, r4, r0
 8013e2e:	4628      	mov	r0, r5
 8013e30:	f000 f87c 	bl	8013f2c <_sbrk_r>
 8013e34:	3001      	adds	r0, #1
 8013e36:	d101      	bne.n	8013e3c <sbrk_aligned+0x38>
 8013e38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013e3c:	4620      	mov	r0, r4
 8013e3e:	bd70      	pop	{r4, r5, r6, pc}
 8013e40:	24001604 	.word	0x24001604

08013e44 <_malloc_r>:
 8013e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e48:	1ccd      	adds	r5, r1, #3
 8013e4a:	f025 0503 	bic.w	r5, r5, #3
 8013e4e:	3508      	adds	r5, #8
 8013e50:	2d0c      	cmp	r5, #12
 8013e52:	bf38      	it	cc
 8013e54:	250c      	movcc	r5, #12
 8013e56:	2d00      	cmp	r5, #0
 8013e58:	4607      	mov	r7, r0
 8013e5a:	db01      	blt.n	8013e60 <_malloc_r+0x1c>
 8013e5c:	42a9      	cmp	r1, r5
 8013e5e:	d905      	bls.n	8013e6c <_malloc_r+0x28>
 8013e60:	230c      	movs	r3, #12
 8013e62:	603b      	str	r3, [r7, #0]
 8013e64:	2600      	movs	r6, #0
 8013e66:	4630      	mov	r0, r6
 8013e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e6c:	4e2e      	ldr	r6, [pc, #184]	; (8013f28 <_malloc_r+0xe4>)
 8013e6e:	f000 f949 	bl	8014104 <__malloc_lock>
 8013e72:	6833      	ldr	r3, [r6, #0]
 8013e74:	461c      	mov	r4, r3
 8013e76:	bb34      	cbnz	r4, 8013ec6 <_malloc_r+0x82>
 8013e78:	4629      	mov	r1, r5
 8013e7a:	4638      	mov	r0, r7
 8013e7c:	f7ff ffc2 	bl	8013e04 <sbrk_aligned>
 8013e80:	1c43      	adds	r3, r0, #1
 8013e82:	4604      	mov	r4, r0
 8013e84:	d14d      	bne.n	8013f22 <_malloc_r+0xde>
 8013e86:	6834      	ldr	r4, [r6, #0]
 8013e88:	4626      	mov	r6, r4
 8013e8a:	2e00      	cmp	r6, #0
 8013e8c:	d140      	bne.n	8013f10 <_malloc_r+0xcc>
 8013e8e:	6823      	ldr	r3, [r4, #0]
 8013e90:	4631      	mov	r1, r6
 8013e92:	4638      	mov	r0, r7
 8013e94:	eb04 0803 	add.w	r8, r4, r3
 8013e98:	f000 f848 	bl	8013f2c <_sbrk_r>
 8013e9c:	4580      	cmp	r8, r0
 8013e9e:	d13a      	bne.n	8013f16 <_malloc_r+0xd2>
 8013ea0:	6821      	ldr	r1, [r4, #0]
 8013ea2:	3503      	adds	r5, #3
 8013ea4:	1a6d      	subs	r5, r5, r1
 8013ea6:	f025 0503 	bic.w	r5, r5, #3
 8013eaa:	3508      	adds	r5, #8
 8013eac:	2d0c      	cmp	r5, #12
 8013eae:	bf38      	it	cc
 8013eb0:	250c      	movcc	r5, #12
 8013eb2:	4629      	mov	r1, r5
 8013eb4:	4638      	mov	r0, r7
 8013eb6:	f7ff ffa5 	bl	8013e04 <sbrk_aligned>
 8013eba:	3001      	adds	r0, #1
 8013ebc:	d02b      	beq.n	8013f16 <_malloc_r+0xd2>
 8013ebe:	6823      	ldr	r3, [r4, #0]
 8013ec0:	442b      	add	r3, r5
 8013ec2:	6023      	str	r3, [r4, #0]
 8013ec4:	e00e      	b.n	8013ee4 <_malloc_r+0xa0>
 8013ec6:	6822      	ldr	r2, [r4, #0]
 8013ec8:	1b52      	subs	r2, r2, r5
 8013eca:	d41e      	bmi.n	8013f0a <_malloc_r+0xc6>
 8013ecc:	2a0b      	cmp	r2, #11
 8013ece:	d916      	bls.n	8013efe <_malloc_r+0xba>
 8013ed0:	1961      	adds	r1, r4, r5
 8013ed2:	42a3      	cmp	r3, r4
 8013ed4:	6025      	str	r5, [r4, #0]
 8013ed6:	bf18      	it	ne
 8013ed8:	6059      	strne	r1, [r3, #4]
 8013eda:	6863      	ldr	r3, [r4, #4]
 8013edc:	bf08      	it	eq
 8013ede:	6031      	streq	r1, [r6, #0]
 8013ee0:	5162      	str	r2, [r4, r5]
 8013ee2:	604b      	str	r3, [r1, #4]
 8013ee4:	4638      	mov	r0, r7
 8013ee6:	f104 060b 	add.w	r6, r4, #11
 8013eea:	f000 f911 	bl	8014110 <__malloc_unlock>
 8013eee:	f026 0607 	bic.w	r6, r6, #7
 8013ef2:	1d23      	adds	r3, r4, #4
 8013ef4:	1af2      	subs	r2, r6, r3
 8013ef6:	d0b6      	beq.n	8013e66 <_malloc_r+0x22>
 8013ef8:	1b9b      	subs	r3, r3, r6
 8013efa:	50a3      	str	r3, [r4, r2]
 8013efc:	e7b3      	b.n	8013e66 <_malloc_r+0x22>
 8013efe:	6862      	ldr	r2, [r4, #4]
 8013f00:	42a3      	cmp	r3, r4
 8013f02:	bf0c      	ite	eq
 8013f04:	6032      	streq	r2, [r6, #0]
 8013f06:	605a      	strne	r2, [r3, #4]
 8013f08:	e7ec      	b.n	8013ee4 <_malloc_r+0xa0>
 8013f0a:	4623      	mov	r3, r4
 8013f0c:	6864      	ldr	r4, [r4, #4]
 8013f0e:	e7b2      	b.n	8013e76 <_malloc_r+0x32>
 8013f10:	4634      	mov	r4, r6
 8013f12:	6876      	ldr	r6, [r6, #4]
 8013f14:	e7b9      	b.n	8013e8a <_malloc_r+0x46>
 8013f16:	230c      	movs	r3, #12
 8013f18:	603b      	str	r3, [r7, #0]
 8013f1a:	4638      	mov	r0, r7
 8013f1c:	f000 f8f8 	bl	8014110 <__malloc_unlock>
 8013f20:	e7a1      	b.n	8013e66 <_malloc_r+0x22>
 8013f22:	6025      	str	r5, [r4, #0]
 8013f24:	e7de      	b.n	8013ee4 <_malloc_r+0xa0>
 8013f26:	bf00      	nop
 8013f28:	24001600 	.word	0x24001600

08013f2c <_sbrk_r>:
 8013f2c:	b538      	push	{r3, r4, r5, lr}
 8013f2e:	4d06      	ldr	r5, [pc, #24]	; (8013f48 <_sbrk_r+0x1c>)
 8013f30:	2300      	movs	r3, #0
 8013f32:	4604      	mov	r4, r0
 8013f34:	4608      	mov	r0, r1
 8013f36:	602b      	str	r3, [r5, #0]
 8013f38:	f7f1 f9be 	bl	80052b8 <_sbrk>
 8013f3c:	1c43      	adds	r3, r0, #1
 8013f3e:	d102      	bne.n	8013f46 <_sbrk_r+0x1a>
 8013f40:	682b      	ldr	r3, [r5, #0]
 8013f42:	b103      	cbz	r3, 8013f46 <_sbrk_r+0x1a>
 8013f44:	6023      	str	r3, [r4, #0]
 8013f46:	bd38      	pop	{r3, r4, r5, pc}
 8013f48:	24001608 	.word	0x24001608

08013f4c <__sread>:
 8013f4c:	b510      	push	{r4, lr}
 8013f4e:	460c      	mov	r4, r1
 8013f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f54:	f000 fa3c 	bl	80143d0 <_read_r>
 8013f58:	2800      	cmp	r0, #0
 8013f5a:	bfab      	itete	ge
 8013f5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8013f60:	181b      	addge	r3, r3, r0
 8013f62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013f66:	bfac      	ite	ge
 8013f68:	6563      	strge	r3, [r4, #84]	; 0x54
 8013f6a:	81a3      	strhlt	r3, [r4, #12]
 8013f6c:	bd10      	pop	{r4, pc}

08013f6e <__swrite>:
 8013f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f72:	461f      	mov	r7, r3
 8013f74:	898b      	ldrh	r3, [r1, #12]
 8013f76:	05db      	lsls	r3, r3, #23
 8013f78:	4605      	mov	r5, r0
 8013f7a:	460c      	mov	r4, r1
 8013f7c:	4616      	mov	r6, r2
 8013f7e:	d505      	bpl.n	8013f8c <__swrite+0x1e>
 8013f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f84:	2302      	movs	r3, #2
 8013f86:	2200      	movs	r2, #0
 8013f88:	f000 f898 	bl	80140bc <_lseek_r>
 8013f8c:	89a3      	ldrh	r3, [r4, #12]
 8013f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013f96:	81a3      	strh	r3, [r4, #12]
 8013f98:	4632      	mov	r2, r6
 8013f9a:	463b      	mov	r3, r7
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa2:	f000 b817 	b.w	8013fd4 <_write_r>

08013fa6 <__sseek>:
 8013fa6:	b510      	push	{r4, lr}
 8013fa8:	460c      	mov	r4, r1
 8013faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fae:	f000 f885 	bl	80140bc <_lseek_r>
 8013fb2:	1c43      	adds	r3, r0, #1
 8013fb4:	89a3      	ldrh	r3, [r4, #12]
 8013fb6:	bf15      	itete	ne
 8013fb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8013fba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013fbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013fc2:	81a3      	strheq	r3, [r4, #12]
 8013fc4:	bf18      	it	ne
 8013fc6:	81a3      	strhne	r3, [r4, #12]
 8013fc8:	bd10      	pop	{r4, pc}

08013fca <__sclose>:
 8013fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fce:	f000 b831 	b.w	8014034 <_close_r>
	...

08013fd4 <_write_r>:
 8013fd4:	b538      	push	{r3, r4, r5, lr}
 8013fd6:	4d07      	ldr	r5, [pc, #28]	; (8013ff4 <_write_r+0x20>)
 8013fd8:	4604      	mov	r4, r0
 8013fda:	4608      	mov	r0, r1
 8013fdc:	4611      	mov	r1, r2
 8013fde:	2200      	movs	r2, #0
 8013fe0:	602a      	str	r2, [r5, #0]
 8013fe2:	461a      	mov	r2, r3
 8013fe4:	f7f1 f917 	bl	8005216 <_write>
 8013fe8:	1c43      	adds	r3, r0, #1
 8013fea:	d102      	bne.n	8013ff2 <_write_r+0x1e>
 8013fec:	682b      	ldr	r3, [r5, #0]
 8013fee:	b103      	cbz	r3, 8013ff2 <_write_r+0x1e>
 8013ff0:	6023      	str	r3, [r4, #0]
 8013ff2:	bd38      	pop	{r3, r4, r5, pc}
 8013ff4:	24001608 	.word	0x24001608

08013ff8 <__assert_func>:
 8013ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ffa:	4614      	mov	r4, r2
 8013ffc:	461a      	mov	r2, r3
 8013ffe:	4b09      	ldr	r3, [pc, #36]	; (8014024 <__assert_func+0x2c>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	4605      	mov	r5, r0
 8014004:	68d8      	ldr	r0, [r3, #12]
 8014006:	b14c      	cbz	r4, 801401c <__assert_func+0x24>
 8014008:	4b07      	ldr	r3, [pc, #28]	; (8014028 <__assert_func+0x30>)
 801400a:	9100      	str	r1, [sp, #0]
 801400c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014010:	4906      	ldr	r1, [pc, #24]	; (801402c <__assert_func+0x34>)
 8014012:	462b      	mov	r3, r5
 8014014:	f000 f81e 	bl	8014054 <fiprintf>
 8014018:	f000 f9f9 	bl	801440e <abort>
 801401c:	4b04      	ldr	r3, [pc, #16]	; (8014030 <__assert_func+0x38>)
 801401e:	461c      	mov	r4, r3
 8014020:	e7f3      	b.n	801400a <__assert_func+0x12>
 8014022:	bf00      	nop
 8014024:	24000240 	.word	0x24000240
 8014028:	080162a4 	.word	0x080162a4
 801402c:	080162b1 	.word	0x080162b1
 8014030:	080162df 	.word	0x080162df

08014034 <_close_r>:
 8014034:	b538      	push	{r3, r4, r5, lr}
 8014036:	4d06      	ldr	r5, [pc, #24]	; (8014050 <_close_r+0x1c>)
 8014038:	2300      	movs	r3, #0
 801403a:	4604      	mov	r4, r0
 801403c:	4608      	mov	r0, r1
 801403e:	602b      	str	r3, [r5, #0]
 8014040:	f7f1 f905 	bl	800524e <_close>
 8014044:	1c43      	adds	r3, r0, #1
 8014046:	d102      	bne.n	801404e <_close_r+0x1a>
 8014048:	682b      	ldr	r3, [r5, #0]
 801404a:	b103      	cbz	r3, 801404e <_close_r+0x1a>
 801404c:	6023      	str	r3, [r4, #0]
 801404e:	bd38      	pop	{r3, r4, r5, pc}
 8014050:	24001608 	.word	0x24001608

08014054 <fiprintf>:
 8014054:	b40e      	push	{r1, r2, r3}
 8014056:	b503      	push	{r0, r1, lr}
 8014058:	4601      	mov	r1, r0
 801405a:	ab03      	add	r3, sp, #12
 801405c:	4805      	ldr	r0, [pc, #20]	; (8014074 <fiprintf+0x20>)
 801405e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014062:	6800      	ldr	r0, [r0, #0]
 8014064:	9301      	str	r3, [sp, #4]
 8014066:	f000 f883 	bl	8014170 <_vfiprintf_r>
 801406a:	b002      	add	sp, #8
 801406c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014070:	b003      	add	sp, #12
 8014072:	4770      	bx	lr
 8014074:	24000240 	.word	0x24000240

08014078 <_fstat_r>:
 8014078:	b538      	push	{r3, r4, r5, lr}
 801407a:	4d07      	ldr	r5, [pc, #28]	; (8014098 <_fstat_r+0x20>)
 801407c:	2300      	movs	r3, #0
 801407e:	4604      	mov	r4, r0
 8014080:	4608      	mov	r0, r1
 8014082:	4611      	mov	r1, r2
 8014084:	602b      	str	r3, [r5, #0]
 8014086:	f7f1 f8ee 	bl	8005266 <_fstat>
 801408a:	1c43      	adds	r3, r0, #1
 801408c:	d102      	bne.n	8014094 <_fstat_r+0x1c>
 801408e:	682b      	ldr	r3, [r5, #0]
 8014090:	b103      	cbz	r3, 8014094 <_fstat_r+0x1c>
 8014092:	6023      	str	r3, [r4, #0]
 8014094:	bd38      	pop	{r3, r4, r5, pc}
 8014096:	bf00      	nop
 8014098:	24001608 	.word	0x24001608

0801409c <_isatty_r>:
 801409c:	b538      	push	{r3, r4, r5, lr}
 801409e:	4d06      	ldr	r5, [pc, #24]	; (80140b8 <_isatty_r+0x1c>)
 80140a0:	2300      	movs	r3, #0
 80140a2:	4604      	mov	r4, r0
 80140a4:	4608      	mov	r0, r1
 80140a6:	602b      	str	r3, [r5, #0]
 80140a8:	f7f1 f8ed 	bl	8005286 <_isatty>
 80140ac:	1c43      	adds	r3, r0, #1
 80140ae:	d102      	bne.n	80140b6 <_isatty_r+0x1a>
 80140b0:	682b      	ldr	r3, [r5, #0]
 80140b2:	b103      	cbz	r3, 80140b6 <_isatty_r+0x1a>
 80140b4:	6023      	str	r3, [r4, #0]
 80140b6:	bd38      	pop	{r3, r4, r5, pc}
 80140b8:	24001608 	.word	0x24001608

080140bc <_lseek_r>:
 80140bc:	b538      	push	{r3, r4, r5, lr}
 80140be:	4d07      	ldr	r5, [pc, #28]	; (80140dc <_lseek_r+0x20>)
 80140c0:	4604      	mov	r4, r0
 80140c2:	4608      	mov	r0, r1
 80140c4:	4611      	mov	r1, r2
 80140c6:	2200      	movs	r2, #0
 80140c8:	602a      	str	r2, [r5, #0]
 80140ca:	461a      	mov	r2, r3
 80140cc:	f7f1 f8e6 	bl	800529c <_lseek>
 80140d0:	1c43      	adds	r3, r0, #1
 80140d2:	d102      	bne.n	80140da <_lseek_r+0x1e>
 80140d4:	682b      	ldr	r3, [r5, #0]
 80140d6:	b103      	cbz	r3, 80140da <_lseek_r+0x1e>
 80140d8:	6023      	str	r3, [r4, #0]
 80140da:	bd38      	pop	{r3, r4, r5, pc}
 80140dc:	24001608 	.word	0x24001608

080140e0 <__ascii_mbtowc>:
 80140e0:	b082      	sub	sp, #8
 80140e2:	b901      	cbnz	r1, 80140e6 <__ascii_mbtowc+0x6>
 80140e4:	a901      	add	r1, sp, #4
 80140e6:	b142      	cbz	r2, 80140fa <__ascii_mbtowc+0x1a>
 80140e8:	b14b      	cbz	r3, 80140fe <__ascii_mbtowc+0x1e>
 80140ea:	7813      	ldrb	r3, [r2, #0]
 80140ec:	600b      	str	r3, [r1, #0]
 80140ee:	7812      	ldrb	r2, [r2, #0]
 80140f0:	1e10      	subs	r0, r2, #0
 80140f2:	bf18      	it	ne
 80140f4:	2001      	movne	r0, #1
 80140f6:	b002      	add	sp, #8
 80140f8:	4770      	bx	lr
 80140fa:	4610      	mov	r0, r2
 80140fc:	e7fb      	b.n	80140f6 <__ascii_mbtowc+0x16>
 80140fe:	f06f 0001 	mvn.w	r0, #1
 8014102:	e7f8      	b.n	80140f6 <__ascii_mbtowc+0x16>

08014104 <__malloc_lock>:
 8014104:	4801      	ldr	r0, [pc, #4]	; (801410c <__malloc_lock+0x8>)
 8014106:	f7ff ba1a 	b.w	801353e <__retarget_lock_acquire_recursive>
 801410a:	bf00      	nop
 801410c:	240015fc 	.word	0x240015fc

08014110 <__malloc_unlock>:
 8014110:	4801      	ldr	r0, [pc, #4]	; (8014118 <__malloc_unlock+0x8>)
 8014112:	f7ff ba15 	b.w	8013540 <__retarget_lock_release_recursive>
 8014116:	bf00      	nop
 8014118:	240015fc 	.word	0x240015fc

0801411c <__sfputc_r>:
 801411c:	6893      	ldr	r3, [r2, #8]
 801411e:	3b01      	subs	r3, #1
 8014120:	2b00      	cmp	r3, #0
 8014122:	b410      	push	{r4}
 8014124:	6093      	str	r3, [r2, #8]
 8014126:	da08      	bge.n	801413a <__sfputc_r+0x1e>
 8014128:	6994      	ldr	r4, [r2, #24]
 801412a:	42a3      	cmp	r3, r4
 801412c:	db01      	blt.n	8014132 <__sfputc_r+0x16>
 801412e:	290a      	cmp	r1, #10
 8014130:	d103      	bne.n	801413a <__sfputc_r+0x1e>
 8014132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014136:	f7fe b98b 	b.w	8012450 <__swbuf_r>
 801413a:	6813      	ldr	r3, [r2, #0]
 801413c:	1c58      	adds	r0, r3, #1
 801413e:	6010      	str	r0, [r2, #0]
 8014140:	7019      	strb	r1, [r3, #0]
 8014142:	4608      	mov	r0, r1
 8014144:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014148:	4770      	bx	lr

0801414a <__sfputs_r>:
 801414a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801414c:	4606      	mov	r6, r0
 801414e:	460f      	mov	r7, r1
 8014150:	4614      	mov	r4, r2
 8014152:	18d5      	adds	r5, r2, r3
 8014154:	42ac      	cmp	r4, r5
 8014156:	d101      	bne.n	801415c <__sfputs_r+0x12>
 8014158:	2000      	movs	r0, #0
 801415a:	e007      	b.n	801416c <__sfputs_r+0x22>
 801415c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014160:	463a      	mov	r2, r7
 8014162:	4630      	mov	r0, r6
 8014164:	f7ff ffda 	bl	801411c <__sfputc_r>
 8014168:	1c43      	adds	r3, r0, #1
 801416a:	d1f3      	bne.n	8014154 <__sfputs_r+0xa>
 801416c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014170 <_vfiprintf_r>:
 8014170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014174:	460d      	mov	r5, r1
 8014176:	b09d      	sub	sp, #116	; 0x74
 8014178:	4614      	mov	r4, r2
 801417a:	4698      	mov	r8, r3
 801417c:	4606      	mov	r6, r0
 801417e:	b118      	cbz	r0, 8014188 <_vfiprintf_r+0x18>
 8014180:	6983      	ldr	r3, [r0, #24]
 8014182:	b90b      	cbnz	r3, 8014188 <_vfiprintf_r+0x18>
 8014184:	f7ff f938 	bl	80133f8 <__sinit>
 8014188:	4b89      	ldr	r3, [pc, #548]	; (80143b0 <_vfiprintf_r+0x240>)
 801418a:	429d      	cmp	r5, r3
 801418c:	d11b      	bne.n	80141c6 <_vfiprintf_r+0x56>
 801418e:	6875      	ldr	r5, [r6, #4]
 8014190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014192:	07d9      	lsls	r1, r3, #31
 8014194:	d405      	bmi.n	80141a2 <_vfiprintf_r+0x32>
 8014196:	89ab      	ldrh	r3, [r5, #12]
 8014198:	059a      	lsls	r2, r3, #22
 801419a:	d402      	bmi.n	80141a2 <_vfiprintf_r+0x32>
 801419c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801419e:	f7ff f9ce 	bl	801353e <__retarget_lock_acquire_recursive>
 80141a2:	89ab      	ldrh	r3, [r5, #12]
 80141a4:	071b      	lsls	r3, r3, #28
 80141a6:	d501      	bpl.n	80141ac <_vfiprintf_r+0x3c>
 80141a8:	692b      	ldr	r3, [r5, #16]
 80141aa:	b9eb      	cbnz	r3, 80141e8 <_vfiprintf_r+0x78>
 80141ac:	4629      	mov	r1, r5
 80141ae:	4630      	mov	r0, r6
 80141b0:	f7fe f9a0 	bl	80124f4 <__swsetup_r>
 80141b4:	b1c0      	cbz	r0, 80141e8 <_vfiprintf_r+0x78>
 80141b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141b8:	07dc      	lsls	r4, r3, #31
 80141ba:	d50e      	bpl.n	80141da <_vfiprintf_r+0x6a>
 80141bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141c0:	b01d      	add	sp, #116	; 0x74
 80141c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141c6:	4b7b      	ldr	r3, [pc, #492]	; (80143b4 <_vfiprintf_r+0x244>)
 80141c8:	429d      	cmp	r5, r3
 80141ca:	d101      	bne.n	80141d0 <_vfiprintf_r+0x60>
 80141cc:	68b5      	ldr	r5, [r6, #8]
 80141ce:	e7df      	b.n	8014190 <_vfiprintf_r+0x20>
 80141d0:	4b79      	ldr	r3, [pc, #484]	; (80143b8 <_vfiprintf_r+0x248>)
 80141d2:	429d      	cmp	r5, r3
 80141d4:	bf08      	it	eq
 80141d6:	68f5      	ldreq	r5, [r6, #12]
 80141d8:	e7da      	b.n	8014190 <_vfiprintf_r+0x20>
 80141da:	89ab      	ldrh	r3, [r5, #12]
 80141dc:	0598      	lsls	r0, r3, #22
 80141de:	d4ed      	bmi.n	80141bc <_vfiprintf_r+0x4c>
 80141e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141e2:	f7ff f9ad 	bl	8013540 <__retarget_lock_release_recursive>
 80141e6:	e7e9      	b.n	80141bc <_vfiprintf_r+0x4c>
 80141e8:	2300      	movs	r3, #0
 80141ea:	9309      	str	r3, [sp, #36]	; 0x24
 80141ec:	2320      	movs	r3, #32
 80141ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80141f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80141f6:	2330      	movs	r3, #48	; 0x30
 80141f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80143bc <_vfiprintf_r+0x24c>
 80141fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014200:	f04f 0901 	mov.w	r9, #1
 8014204:	4623      	mov	r3, r4
 8014206:	469a      	mov	sl, r3
 8014208:	f813 2b01 	ldrb.w	r2, [r3], #1
 801420c:	b10a      	cbz	r2, 8014212 <_vfiprintf_r+0xa2>
 801420e:	2a25      	cmp	r2, #37	; 0x25
 8014210:	d1f9      	bne.n	8014206 <_vfiprintf_r+0x96>
 8014212:	ebba 0b04 	subs.w	fp, sl, r4
 8014216:	d00b      	beq.n	8014230 <_vfiprintf_r+0xc0>
 8014218:	465b      	mov	r3, fp
 801421a:	4622      	mov	r2, r4
 801421c:	4629      	mov	r1, r5
 801421e:	4630      	mov	r0, r6
 8014220:	f7ff ff93 	bl	801414a <__sfputs_r>
 8014224:	3001      	adds	r0, #1
 8014226:	f000 80aa 	beq.w	801437e <_vfiprintf_r+0x20e>
 801422a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801422c:	445a      	add	r2, fp
 801422e:	9209      	str	r2, [sp, #36]	; 0x24
 8014230:	f89a 3000 	ldrb.w	r3, [sl]
 8014234:	2b00      	cmp	r3, #0
 8014236:	f000 80a2 	beq.w	801437e <_vfiprintf_r+0x20e>
 801423a:	2300      	movs	r3, #0
 801423c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014244:	f10a 0a01 	add.w	sl, sl, #1
 8014248:	9304      	str	r3, [sp, #16]
 801424a:	9307      	str	r3, [sp, #28]
 801424c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014250:	931a      	str	r3, [sp, #104]	; 0x68
 8014252:	4654      	mov	r4, sl
 8014254:	2205      	movs	r2, #5
 8014256:	f814 1b01 	ldrb.w	r1, [r4], #1
 801425a:	4858      	ldr	r0, [pc, #352]	; (80143bc <_vfiprintf_r+0x24c>)
 801425c:	f7ec f848 	bl	80002f0 <memchr>
 8014260:	9a04      	ldr	r2, [sp, #16]
 8014262:	b9d8      	cbnz	r0, 801429c <_vfiprintf_r+0x12c>
 8014264:	06d1      	lsls	r1, r2, #27
 8014266:	bf44      	itt	mi
 8014268:	2320      	movmi	r3, #32
 801426a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801426e:	0713      	lsls	r3, r2, #28
 8014270:	bf44      	itt	mi
 8014272:	232b      	movmi	r3, #43	; 0x2b
 8014274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014278:	f89a 3000 	ldrb.w	r3, [sl]
 801427c:	2b2a      	cmp	r3, #42	; 0x2a
 801427e:	d015      	beq.n	80142ac <_vfiprintf_r+0x13c>
 8014280:	9a07      	ldr	r2, [sp, #28]
 8014282:	4654      	mov	r4, sl
 8014284:	2000      	movs	r0, #0
 8014286:	f04f 0c0a 	mov.w	ip, #10
 801428a:	4621      	mov	r1, r4
 801428c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014290:	3b30      	subs	r3, #48	; 0x30
 8014292:	2b09      	cmp	r3, #9
 8014294:	d94e      	bls.n	8014334 <_vfiprintf_r+0x1c4>
 8014296:	b1b0      	cbz	r0, 80142c6 <_vfiprintf_r+0x156>
 8014298:	9207      	str	r2, [sp, #28]
 801429a:	e014      	b.n	80142c6 <_vfiprintf_r+0x156>
 801429c:	eba0 0308 	sub.w	r3, r0, r8
 80142a0:	fa09 f303 	lsl.w	r3, r9, r3
 80142a4:	4313      	orrs	r3, r2
 80142a6:	9304      	str	r3, [sp, #16]
 80142a8:	46a2      	mov	sl, r4
 80142aa:	e7d2      	b.n	8014252 <_vfiprintf_r+0xe2>
 80142ac:	9b03      	ldr	r3, [sp, #12]
 80142ae:	1d19      	adds	r1, r3, #4
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	9103      	str	r1, [sp, #12]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	bfbb      	ittet	lt
 80142b8:	425b      	neglt	r3, r3
 80142ba:	f042 0202 	orrlt.w	r2, r2, #2
 80142be:	9307      	strge	r3, [sp, #28]
 80142c0:	9307      	strlt	r3, [sp, #28]
 80142c2:	bfb8      	it	lt
 80142c4:	9204      	strlt	r2, [sp, #16]
 80142c6:	7823      	ldrb	r3, [r4, #0]
 80142c8:	2b2e      	cmp	r3, #46	; 0x2e
 80142ca:	d10c      	bne.n	80142e6 <_vfiprintf_r+0x176>
 80142cc:	7863      	ldrb	r3, [r4, #1]
 80142ce:	2b2a      	cmp	r3, #42	; 0x2a
 80142d0:	d135      	bne.n	801433e <_vfiprintf_r+0x1ce>
 80142d2:	9b03      	ldr	r3, [sp, #12]
 80142d4:	1d1a      	adds	r2, r3, #4
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	9203      	str	r2, [sp, #12]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	bfb8      	it	lt
 80142de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80142e2:	3402      	adds	r4, #2
 80142e4:	9305      	str	r3, [sp, #20]
 80142e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80143cc <_vfiprintf_r+0x25c>
 80142ea:	7821      	ldrb	r1, [r4, #0]
 80142ec:	2203      	movs	r2, #3
 80142ee:	4650      	mov	r0, sl
 80142f0:	f7eb fffe 	bl	80002f0 <memchr>
 80142f4:	b140      	cbz	r0, 8014308 <_vfiprintf_r+0x198>
 80142f6:	2340      	movs	r3, #64	; 0x40
 80142f8:	eba0 000a 	sub.w	r0, r0, sl
 80142fc:	fa03 f000 	lsl.w	r0, r3, r0
 8014300:	9b04      	ldr	r3, [sp, #16]
 8014302:	4303      	orrs	r3, r0
 8014304:	3401      	adds	r4, #1
 8014306:	9304      	str	r3, [sp, #16]
 8014308:	f814 1b01 	ldrb.w	r1, [r4], #1
 801430c:	482c      	ldr	r0, [pc, #176]	; (80143c0 <_vfiprintf_r+0x250>)
 801430e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014312:	2206      	movs	r2, #6
 8014314:	f7eb ffec 	bl	80002f0 <memchr>
 8014318:	2800      	cmp	r0, #0
 801431a:	d03f      	beq.n	801439c <_vfiprintf_r+0x22c>
 801431c:	4b29      	ldr	r3, [pc, #164]	; (80143c4 <_vfiprintf_r+0x254>)
 801431e:	bb1b      	cbnz	r3, 8014368 <_vfiprintf_r+0x1f8>
 8014320:	9b03      	ldr	r3, [sp, #12]
 8014322:	3307      	adds	r3, #7
 8014324:	f023 0307 	bic.w	r3, r3, #7
 8014328:	3308      	adds	r3, #8
 801432a:	9303      	str	r3, [sp, #12]
 801432c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801432e:	443b      	add	r3, r7
 8014330:	9309      	str	r3, [sp, #36]	; 0x24
 8014332:	e767      	b.n	8014204 <_vfiprintf_r+0x94>
 8014334:	fb0c 3202 	mla	r2, ip, r2, r3
 8014338:	460c      	mov	r4, r1
 801433a:	2001      	movs	r0, #1
 801433c:	e7a5      	b.n	801428a <_vfiprintf_r+0x11a>
 801433e:	2300      	movs	r3, #0
 8014340:	3401      	adds	r4, #1
 8014342:	9305      	str	r3, [sp, #20]
 8014344:	4619      	mov	r1, r3
 8014346:	f04f 0c0a 	mov.w	ip, #10
 801434a:	4620      	mov	r0, r4
 801434c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014350:	3a30      	subs	r2, #48	; 0x30
 8014352:	2a09      	cmp	r2, #9
 8014354:	d903      	bls.n	801435e <_vfiprintf_r+0x1ee>
 8014356:	2b00      	cmp	r3, #0
 8014358:	d0c5      	beq.n	80142e6 <_vfiprintf_r+0x176>
 801435a:	9105      	str	r1, [sp, #20]
 801435c:	e7c3      	b.n	80142e6 <_vfiprintf_r+0x176>
 801435e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014362:	4604      	mov	r4, r0
 8014364:	2301      	movs	r3, #1
 8014366:	e7f0      	b.n	801434a <_vfiprintf_r+0x1da>
 8014368:	ab03      	add	r3, sp, #12
 801436a:	9300      	str	r3, [sp, #0]
 801436c:	462a      	mov	r2, r5
 801436e:	4b16      	ldr	r3, [pc, #88]	; (80143c8 <_vfiprintf_r+0x258>)
 8014370:	a904      	add	r1, sp, #16
 8014372:	4630      	mov	r0, r6
 8014374:	f7fd fc44 	bl	8011c00 <_printf_float>
 8014378:	4607      	mov	r7, r0
 801437a:	1c78      	adds	r0, r7, #1
 801437c:	d1d6      	bne.n	801432c <_vfiprintf_r+0x1bc>
 801437e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014380:	07d9      	lsls	r1, r3, #31
 8014382:	d405      	bmi.n	8014390 <_vfiprintf_r+0x220>
 8014384:	89ab      	ldrh	r3, [r5, #12]
 8014386:	059a      	lsls	r2, r3, #22
 8014388:	d402      	bmi.n	8014390 <_vfiprintf_r+0x220>
 801438a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801438c:	f7ff f8d8 	bl	8013540 <__retarget_lock_release_recursive>
 8014390:	89ab      	ldrh	r3, [r5, #12]
 8014392:	065b      	lsls	r3, r3, #25
 8014394:	f53f af12 	bmi.w	80141bc <_vfiprintf_r+0x4c>
 8014398:	9809      	ldr	r0, [sp, #36]	; 0x24
 801439a:	e711      	b.n	80141c0 <_vfiprintf_r+0x50>
 801439c:	ab03      	add	r3, sp, #12
 801439e:	9300      	str	r3, [sp, #0]
 80143a0:	462a      	mov	r2, r5
 80143a2:	4b09      	ldr	r3, [pc, #36]	; (80143c8 <_vfiprintf_r+0x258>)
 80143a4:	a904      	add	r1, sp, #16
 80143a6:	4630      	mov	r0, r6
 80143a8:	f7fd feb6 	bl	8012118 <_printf_i>
 80143ac:	e7e4      	b.n	8014378 <_vfiprintf_r+0x208>
 80143ae:	bf00      	nop
 80143b0:	08016108 	.word	0x08016108
 80143b4:	08016128 	.word	0x08016128
 80143b8:	080160e8 	.word	0x080160e8
 80143bc:	080162ea 	.word	0x080162ea
 80143c0:	080162f4 	.word	0x080162f4
 80143c4:	08011c01 	.word	0x08011c01
 80143c8:	0801414b 	.word	0x0801414b
 80143cc:	080162f0 	.word	0x080162f0

080143d0 <_read_r>:
 80143d0:	b538      	push	{r3, r4, r5, lr}
 80143d2:	4d07      	ldr	r5, [pc, #28]	; (80143f0 <_read_r+0x20>)
 80143d4:	4604      	mov	r4, r0
 80143d6:	4608      	mov	r0, r1
 80143d8:	4611      	mov	r1, r2
 80143da:	2200      	movs	r2, #0
 80143dc:	602a      	str	r2, [r5, #0]
 80143de:	461a      	mov	r2, r3
 80143e0:	f7f0 fefc 	bl	80051dc <_read>
 80143e4:	1c43      	adds	r3, r0, #1
 80143e6:	d102      	bne.n	80143ee <_read_r+0x1e>
 80143e8:	682b      	ldr	r3, [r5, #0]
 80143ea:	b103      	cbz	r3, 80143ee <_read_r+0x1e>
 80143ec:	6023      	str	r3, [r4, #0]
 80143ee:	bd38      	pop	{r3, r4, r5, pc}
 80143f0:	24001608 	.word	0x24001608

080143f4 <__ascii_wctomb>:
 80143f4:	b149      	cbz	r1, 801440a <__ascii_wctomb+0x16>
 80143f6:	2aff      	cmp	r2, #255	; 0xff
 80143f8:	bf85      	ittet	hi
 80143fa:	238a      	movhi	r3, #138	; 0x8a
 80143fc:	6003      	strhi	r3, [r0, #0]
 80143fe:	700a      	strbls	r2, [r1, #0]
 8014400:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014404:	bf98      	it	ls
 8014406:	2001      	movls	r0, #1
 8014408:	4770      	bx	lr
 801440a:	4608      	mov	r0, r1
 801440c:	4770      	bx	lr

0801440e <abort>:
 801440e:	b508      	push	{r3, lr}
 8014410:	2006      	movs	r0, #6
 8014412:	f000 f82b 	bl	801446c <raise>
 8014416:	2001      	movs	r0, #1
 8014418:	f7f0 fed6 	bl	80051c8 <_exit>

0801441c <_raise_r>:
 801441c:	291f      	cmp	r1, #31
 801441e:	b538      	push	{r3, r4, r5, lr}
 8014420:	4604      	mov	r4, r0
 8014422:	460d      	mov	r5, r1
 8014424:	d904      	bls.n	8014430 <_raise_r+0x14>
 8014426:	2316      	movs	r3, #22
 8014428:	6003      	str	r3, [r0, #0]
 801442a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801442e:	bd38      	pop	{r3, r4, r5, pc}
 8014430:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014432:	b112      	cbz	r2, 801443a <_raise_r+0x1e>
 8014434:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014438:	b94b      	cbnz	r3, 801444e <_raise_r+0x32>
 801443a:	4620      	mov	r0, r4
 801443c:	f000 f830 	bl	80144a0 <_getpid_r>
 8014440:	462a      	mov	r2, r5
 8014442:	4601      	mov	r1, r0
 8014444:	4620      	mov	r0, r4
 8014446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801444a:	f000 b817 	b.w	801447c <_kill_r>
 801444e:	2b01      	cmp	r3, #1
 8014450:	d00a      	beq.n	8014468 <_raise_r+0x4c>
 8014452:	1c59      	adds	r1, r3, #1
 8014454:	d103      	bne.n	801445e <_raise_r+0x42>
 8014456:	2316      	movs	r3, #22
 8014458:	6003      	str	r3, [r0, #0]
 801445a:	2001      	movs	r0, #1
 801445c:	e7e7      	b.n	801442e <_raise_r+0x12>
 801445e:	2400      	movs	r4, #0
 8014460:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014464:	4628      	mov	r0, r5
 8014466:	4798      	blx	r3
 8014468:	2000      	movs	r0, #0
 801446a:	e7e0      	b.n	801442e <_raise_r+0x12>

0801446c <raise>:
 801446c:	4b02      	ldr	r3, [pc, #8]	; (8014478 <raise+0xc>)
 801446e:	4601      	mov	r1, r0
 8014470:	6818      	ldr	r0, [r3, #0]
 8014472:	f7ff bfd3 	b.w	801441c <_raise_r>
 8014476:	bf00      	nop
 8014478:	24000240 	.word	0x24000240

0801447c <_kill_r>:
 801447c:	b538      	push	{r3, r4, r5, lr}
 801447e:	4d07      	ldr	r5, [pc, #28]	; (801449c <_kill_r+0x20>)
 8014480:	2300      	movs	r3, #0
 8014482:	4604      	mov	r4, r0
 8014484:	4608      	mov	r0, r1
 8014486:	4611      	mov	r1, r2
 8014488:	602b      	str	r3, [r5, #0]
 801448a:	f7f0 fe8d 	bl	80051a8 <_kill>
 801448e:	1c43      	adds	r3, r0, #1
 8014490:	d102      	bne.n	8014498 <_kill_r+0x1c>
 8014492:	682b      	ldr	r3, [r5, #0]
 8014494:	b103      	cbz	r3, 8014498 <_kill_r+0x1c>
 8014496:	6023      	str	r3, [r4, #0]
 8014498:	bd38      	pop	{r3, r4, r5, pc}
 801449a:	bf00      	nop
 801449c:	24001608 	.word	0x24001608

080144a0 <_getpid_r>:
 80144a0:	f7f0 be7a 	b.w	8005198 <_getpid>

080144a4 <_init>:
 80144a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144a6:	bf00      	nop
 80144a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144aa:	bc08      	pop	{r3}
 80144ac:	469e      	mov	lr, r3
 80144ae:	4770      	bx	lr

080144b0 <_fini>:
 80144b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144b2:	bf00      	nop
 80144b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144b6:	bc08      	pop	{r3}
 80144b8:	469e      	mov	lr, r3
 80144ba:	4770      	bx	lr
