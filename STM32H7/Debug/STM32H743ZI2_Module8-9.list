
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009968  08009968  00019968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080099a8  080099a8  000199a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  080099b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003f8  20000074  08009a2c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000046c  08009a2c  0002046c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021428  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000332d  00000000  00000000  000414ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001390  00000000  00000000  000447f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000012d8  00000000  00000000  00045b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037f20  00000000  00000000  00046e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017dea  00000000  00000000  0007ed80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001658d3  00000000  00000000  00096b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001fc43d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000545c  00000000  00000000  001fc490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000074 	.word	0x20000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009950 	.word	0x08009950

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000078 	.word	0x20000078
 80002d4:	08009950 	.word	0x08009950

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <moveTo>:
    printf("\n");
}
#endif

void moveTo(Stepper_t* motor, long absolute)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
    if (motor->_targetPos != absolute)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d005      	beq.n	80005f0 <moveTo+0x20>
    {
    	motor->_targetPos = absolute;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
		computeNewSpeed(motor);
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 f814 	bl	8000618 <computeNewSpeed>
		// compute new n?
    }
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <distanceToGo>:
    	return 0; // false
    }
}

long distanceToGo(Stepper_t* motor)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    return (motor->_targetPos - motor->_currentPos);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6a1b      	ldr	r3, [r3, #32]
 8000608:	1ad3      	subs	r3, r2, r3
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
	...

08000618 <computeNewSpeed>:
	motor->_stepInterval = 0;
	motor->_speed = 0.0;
}

void computeNewSpeed(Stepper_t* motor)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    long distanceTo = distanceToGo(motor); // +ve is clockwise from curent location
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f7ff ffe9 	bl	80005f8 <distanceToGo>
 8000626:	60f8      	str	r0, [r7, #12]

    long stepsToStop = (long)((motor->_speed * motor->_speed) / (2.0 * motor->_acceleration)); // Equation 16
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000638:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000642:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000646:	ee37 6b07 	vadd.f64	d6, d7, d7
 800064a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800064e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000652:	ee17 3a90 	vmov	r3, s15
 8000656:	60bb      	str	r3, [r7, #8]

    if (distanceTo == 0 && stepsToStop <= 1)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d10d      	bne.n	800067a <computeNewSpeed+0x62>
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	2b01      	cmp	r3, #1
 8000662:	dc0a      	bgt.n	800067a <computeNewSpeed+0x62>
    {
    	// We are at the target and its time to stop
    	motor->_stepInterval = 0;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	639a      	str	r2, [r3, #56]	; 0x38
    	motor->_speed = 0.0;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f04f 0200 	mov.w	r2, #0
 8000670:	629a      	str	r2, [r3, #40]	; 0x28
    	motor->_n = 0;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	655a      	str	r2, [r3, #84]	; 0x54
    	return;
 8000678:	e0bd      	b.n	80007f6 <computeNewSpeed+0x1de>
    }

    if (distanceTo > 0)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2b00      	cmp	r3, #0
 800067e:	dd24      	ble.n	80006ca <computeNewSpeed+0xb2>
    {
		// We are anticlockwise from the target
		// Need to go clockwise from here, maybe decelerate now
		if (motor->_n > 0)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000684:	2b00      	cmp	r3, #0
 8000686:	dd0d      	ble.n	80006a4 <computeNewSpeed+0x8c>
		{
			// Currently accelerating, need to decel now? Or maybe going the wrong way?
			if ((stepsToStop >= distanceTo) || motor->_direction == DIRECTION_CCW)
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	429a      	cmp	r2, r3
 800068e:	da04      	bge.n	800069a <computeNewSpeed+0x82>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000696:	2b00      	cmp	r3, #0
 8000698:	d140      	bne.n	800071c <computeNewSpeed+0x104>
				motor->_n = -stepsToStop; // Start deceleration
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	425a      	negs	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	655a      	str	r2, [r3, #84]	; 0x54
 80006a2:	e03b      	b.n	800071c <computeNewSpeed+0x104>
		}
		else if (motor->_n < 0)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	da37      	bge.n	800071c <computeNewSpeed+0x104>
		{
			// Currently decelerating, need to accel again?
			if ((stepsToStop < distanceTo) && motor->_direction == DIRECTION_CW)
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	da33      	bge.n	800071c <computeNewSpeed+0x104>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d12e      	bne.n	800071c <computeNewSpeed+0x104>
				motor->_n = -motor->_n; // Start accceleration
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006c2:	425a      	negs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	655a      	str	r2, [r3, #84]	; 0x54
 80006c8:	e028      	b.n	800071c <computeNewSpeed+0x104>
		}
	}
	else if (distanceTo < 0)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	da25      	bge.n	800071c <computeNewSpeed+0x104>
	{
		// We are clockwise from the target
		// Need to go anticlockwise from here, maybe decelerate
		if (motor->_n > 0)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	dd0e      	ble.n	80006f6 <computeNewSpeed+0xde>
		{
			// Currently accelerating, need to decel now? Or maybe going the wrong way?
			if ((stepsToStop >= -distanceTo) || motor->_direction == DIRECTION_CW)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	425b      	negs	r3, r3
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	429a      	cmp	r2, r3
 80006e0:	da04      	bge.n	80006ec <computeNewSpeed+0xd4>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d117      	bne.n	800071c <computeNewSpeed+0x104>
				motor->_n = -stepsToStop; // Start deceleration
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	425a      	negs	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	655a      	str	r2, [r3, #84]	; 0x54
 80006f4:	e012      	b.n	800071c <computeNewSpeed+0x104>
		}
		else if (motor->_n < 0)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	da0e      	bge.n	800071c <computeNewSpeed+0x104>
		{
			// Currently decelerating, need to accel again?
			if ((stepsToStop < -distanceTo) && motor->_direction == DIRECTION_CCW)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	425b      	negs	r3, r3
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	429a      	cmp	r2, r3
 8000706:	da09      	bge.n	800071c <computeNewSpeed+0x104>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800070e:	2b00      	cmp	r3, #0
 8000710:	d104      	bne.n	800071c <computeNewSpeed+0x104>
				motor->_n = -motor->_n; // Start accceleration
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000716:	425a      	negs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	655a      	str	r2, [r3, #84]	; 0x54
		}
	}

	// Need to accelerate or decelerate
	if (motor->_n == 0)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10e      	bne.n	8000742 <computeNewSpeed+0x12a>
	{
		// First step from stopped
		motor->_cn = motor->_c0;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	65da      	str	r2, [r3, #92]	; 0x5c
		motor->_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	bfcc      	ite	gt
 8000732:	2301      	movgt	r3, #1
 8000734:	2300      	movle	r3, #0
 8000736:	b2db      	uxtb	r3, r3
 8000738:	461a      	mov	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8000740:	e034      	b.n	80007ac <computeNewSpeed+0x194>
	}
	else
	{
		// Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
		motor->_cn = motor->_cn - ((2.0 * motor->_cn) / ((4.0 * motor->_n) + 1)); // Equation 13
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000748:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000752:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000756:	ee37 4b07 	vadd.f64	d4, d7, d7
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000766:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800076a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800076e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000772:	ee37 5b05 	vadd.f64	d5, d7, d5
 8000776:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800077a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800077e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		motor->_cn = (motor->_cn > motor->_cmin) ? motor->_cn : motor->_cmin; //max(motor->_cn, motor->_cmin);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8000794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079c:	dd02      	ble.n	80007a4 <computeNewSpeed+0x18c>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007a2:	e001      	b.n	80007a8 <computeNewSpeed+0x190>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	65d3      	str	r3, [r2, #92]	; 0x5c
	}

	motor->_n++;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	655a      	str	r2, [r3, #84]	; 0x54
	motor->_stepInterval = motor->_cn;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80007bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007c0:	ee17 2a90 	vmov	r2, s15
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	639a      	str	r2, [r3, #56]	; 0x38
	motor->_speed = 1000000.0 / motor->_cn;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80007ce:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80007fc <computeNewSpeed+0x1e4>
 80007d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	if (motor->_direction == DIRECTION_CCW)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d107      	bne.n	80007f6 <computeNewSpeed+0x1de>
		motor->_speed = -motor->_speed;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80007ec:	eef1 7a67 	vneg.f32	s15, s15
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    printf("%ld\n", motor->_n);
    printf("%lu\n", motor->_stepInterval);
//    Serial.println(distanceTo);
//    Serial.println(stepsToStop);
#endif
}
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	49742400 	.word	0x49742400

08000800 <InitStepper>:

    return motor->_speed != 0.0 || distanceToGo(motor) != 0;
}

void InitStepper(Stepper_t* motor, uint8_t interface, uint16_t pin1, GPIO_TypeDef* GPIOxPin1, uint16_t pin2, GPIO_TypeDef* GPIOxPin2, uint16_t pin3, GPIO_TypeDef* GPIOxPin3, uint16_t pin4, GPIO_TypeDef* GPIOxPin4, uint8_t enable)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	460b      	mov	r3, r1
 800080c:	72fb      	strb	r3, [r7, #11]
 800080e:	4613      	mov	r3, r2
 8000810:	813b      	strh	r3, [r7, #8]
	motor->_interface = interface;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	7afa      	ldrb	r2, [r7, #11]
 8000816:	701a      	strb	r2, [r3, #0]
	motor->_currentPos = 0;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
	motor->_targetPos = 0;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
	motor->_speed = 0.0;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f04f 0200 	mov.w	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
	motor->_maxSpeed = 1.0;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
	motor->_acceleration = 0.0;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f04f 0200 	mov.w	r2, #0
 800083a:	631a      	str	r2, [r3, #48]	; 0x30
	motor->_sqrt_twoa = 1.0;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000842:	635a      	str	r2, [r3, #52]	; 0x34
	motor->_stepInterval = 0;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2200      	movs	r2, #0
 8000848:	639a      	str	r2, [r3, #56]	; 0x38
	motor->_minPulseWidth = 1;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2201      	movs	r2, #1
 800084e:	641a      	str	r2, [r3, #64]	; 0x40
	motor->_enablePin = 0xff;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	22ff      	movs	r2, #255	; 0xff
 8000854:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	motor->_GPIOxEnablePin = NULL;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2200      	movs	r2, #0
 800085c:	649a      	str	r2, [r3, #72]	; 0x48
	motor->_lastStepTime = 0;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2200      	movs	r2, #0
 8000862:	63da      	str	r2, [r3, #60]	; 0x3c
	motor->_pin[0] = pin1;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	893a      	ldrh	r2, [r7, #8]
 8000868:	805a      	strh	r2, [r3, #2]
	motor->_GPIOxPin[0] = GPIOxPin1;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	60da      	str	r2, [r3, #12]
	motor->_pin[1] = pin2;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	8c3a      	ldrh	r2, [r7, #32]
 8000874:	809a      	strh	r2, [r3, #4]
	motor->_GPIOxPin[1] = GPIOxPin2;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800087a:	611a      	str	r2, [r3, #16]
	motor->_pin[2] = pin3;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000880:	80da      	strh	r2, [r3, #6]
	motor->_GPIOxPin[2] = GPIOxPin3;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000886:	615a      	str	r2, [r3, #20]
	motor->_pin[3] = pin4;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800088c:	811a      	strh	r2, [r3, #8]
	motor->_GPIOxPin[3] = GPIOxPin4;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000892:	619a      	str	r2, [r3, #24]

    // NEW
	motor->_n = 0;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2200      	movs	r2, #0
 8000898:	655a      	str	r2, [r3, #84]	; 0x54
	motor->_c0 = 0.0;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f04f 0200 	mov.w	r2, #0
 80008a0:	659a      	str	r2, [r3, #88]	; 0x58
    motor->_cn = 0.0;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f04f 0200 	mov.w	r2, #0
 80008a8:	65da      	str	r2, [r3, #92]	; 0x5c
    motor->_cmin = 1.0;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80008b0:	661a      	str	r2, [r3, #96]	; 0x60
    motor->_direction = DIRECTION_CCW;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

    int i;
    for (i = 0; i < 4; i++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	e008      	b.n	80008d2 <InitStepper+0xd2>
    	motor->_pinInverted[i] = 0;
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	4413      	add	r3, r2
 80008c6:	331c      	adds	r3, #28
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 4; i++)
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	3301      	adds	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	ddf3      	ble.n	80008c0 <InitStepper+0xc0>

    if (enable)
 80008d8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d002      	beq.n	80008e6 <InitStepper+0xe6>
    	enableOutputs(motor);
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f000 f92d 	bl	8000b40 <enableOutputs>

    // Some reasonable default
    setAcceleration(motor, 1);
 80008e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f000 f848 	bl	8000980 <setAcceleration>
}
 80008f0:	bf00      	nop
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <setMaxSpeed>:
    // Some reasonable default
    setAcceleration(motor, 1);
}

void setMaxSpeed(Stepper_t* motor, float speed)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	ed87 0a00 	vstr	s0, [r7]
    if (motor->_maxSpeed != speed)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800090a:	ed97 7a00 	vldr	s14, [r7]
 800090e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000916:	d02b      	beq.n	8000970 <setMaxSpeed+0x78>
    {
    	motor->_maxSpeed = speed;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	683a      	ldr	r2, [r7, #0]
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
    	motor->_cmin = 1000000.0 / speed;
 800091e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000978 <setMaxSpeed+0x80>
 8000922:	ed97 7a00 	vldr	s14, [r7]
 8000926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		// Recompute _n from current speed and adjust speed if accelerating or cruising
		if (motor->_n > 0)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000934:	2b00      	cmp	r3, #0
 8000936:	dd1b      	ble.n	8000970 <setMaxSpeed+0x78>
		{
			motor->_n = (long)((motor->_speed * motor->_speed) / (2.0 * motor->_acceleration)); // Equation 16
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000948:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000952:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000956:	ee37 6b07 	vadd.f64	d6, d7, d7
 800095a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800095e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000962:	ee17 2a90 	vmov	r2, s15
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	655a      	str	r2, [r3, #84]	; 0x54
			computeNewSpeed(motor);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff fe54 	bl	8000618 <computeNewSpeed>
		}
    }
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	49742400 	.word	0x49742400
 800097c:	00000000 	.word	0x00000000

08000980 <setAcceleration>:
{
    return motor->_maxSpeed;
}

void setAcceleration(Stepper_t* motor, float acceleration)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	ed87 0a00 	vstr	s0, [r7]
    if (acceleration == 0.0)
 800098c:	edd7 7a00 	vldr	s15, [r7]
 8000990:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000998:	d040      	beq.n	8000a1c <setAcceleration+0x9c>
	return;
    if (motor->_acceleration != acceleration)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80009a0:	ed97 7a00 	vldr	s14, [r7]
 80009a4:	eeb4 7a67 	vcmp.f32	s14, s15
 80009a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ac:	d037      	beq.n	8000a1e <setAcceleration+0x9e>
    {
	    // Recompute _n per Equation 17
    	motor->_n = motor->_n * (motor->_acceleration / acceleration);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009b2:	ee07 3a90 	vmov	s15, r3
 80009b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 80009c0:	edd7 6a00 	vldr	s13, [r7]
 80009c4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80009c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009d0:	ee17 2a90 	vmov	r2, s15
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	655a      	str	r2, [r3, #84]	; 0x54
		// New c0 per Equation 7, with correction per Equation 15
    	motor->_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0;// Equation 15
 80009d8:	edd7 7a00 	vldr	s15, [r7]
 80009dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009e0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80009e4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80009e8:	eeb0 0b46 	vmov.f64	d0, d6
 80009ec:	f008 ff50 	bl	8009890 <sqrt>
 80009f0:	eeb0 7b40 	vmov.f64	d7, d0
 80009f4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000a28 <setAcceleration+0xa8>
 80009f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009fc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000a30 <setAcceleration+0xb0>
 8000a00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    	motor->_acceleration = acceleration;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30
		computeNewSpeed(motor);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff fdff 	bl	8000618 <computeNewSpeed>
 8000a1a:	e000      	b.n	8000a1e <setAcceleration+0x9e>
	return;
 8000a1c:	bf00      	nop
    }
}
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	f3af 8000 	nop.w
 8000a28:	c083126f 	.word	0xc083126f
 8000a2c:	3fe5a1ca 	.word	0x3fe5a1ca
 8000a30:	00000000 	.word	0x00000000
 8000a34:	412e8480 	.word	0x412e8480

08000a38 <constrain>:

float constrain(float value, float minimum, float maximum)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000a42:	edc7 0a02 	vstr	s1, [r7, #8]
 8000a46:	ed87 1a01 	vstr	s2, [r7, #4]
	if(value < minimum) return minimum;
 8000a4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a5a:	d501      	bpl.n	8000a60 <constrain+0x28>
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	e00b      	b.n	8000a78 <constrain+0x40>
	else if(value > maximum) return maximum;
 8000a60:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a64:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a70:	dd01      	ble.n	8000a76 <constrain+0x3e>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	e000      	b.n	8000a78 <constrain+0x40>
	else return value;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	ee07 3a90 	vmov	s15, r3
}
 8000a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	0000      	movs	r0, r0
 8000a8c:	0000      	movs	r0, r0
	...

08000a90 <setSpeed>:

void setSpeed(Stepper_t* motor, float speed)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	ed87 0a00 	vstr	s0, [r7]
    if (speed == motor->_speed)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000aa2:	ed97 7a00 	vldr	s14, [r7]
 8000aa6:	eeb4 7a67 	vcmp.f32	s14, s15
 8000aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aae:	d03e      	beq.n	8000b2e <setSpeed+0x9e>
        return;

    speed = constrain(speed, -motor->_maxSpeed, motor->_maxSpeed);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000ab6:	eef1 7a67 	vneg.f32	s15, s15
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000ac0:	eeb0 1a47 	vmov.f32	s2, s14
 8000ac4:	eef0 0a67 	vmov.f32	s1, s15
 8000ac8:	ed97 0a00 	vldr	s0, [r7]
 8000acc:	f7ff ffb4 	bl	8000a38 <constrain>
 8000ad0:	ed87 0a00 	vstr	s0, [r7]

    if (speed == 0.0)
 8000ad4:	edd7 7a00 	vldr	s15, [r7]
 8000ad8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae0:	d103      	bne.n	8000aea <setSpeed+0x5a>
    {
    	motor->_stepInterval = 0;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ae8:	e01d      	b.n	8000b26 <setSpeed+0x96>
    }
    else
    {
    	motor->_stepInterval = fabs(1000000.0 / speed);
 8000aea:	edd7 7a00 	vldr	s15, [r7]
 8000aee:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000af2:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8000b38 <setSpeed+0xa8>
 8000af6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000afa:	eeb0 7bc7 	vabs.f64	d7, d7
 8000afe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b02:	ee17 2a90 	vmov	r2, s15
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	639a      	str	r2, [r3, #56]	; 0x38
    	motor->_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
 8000b0a:	edd7 7a00 	vldr	s15, [r7]
 8000b0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b16:	bfcc      	ite	gt
 8000b18:	2301      	movgt	r3, #1
 8000b1a:	2300      	movle	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }

    motor->_speed = speed;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8000b2c:	e000      	b.n	8000b30 <setSpeed+0xa0>
        return;
 8000b2e:	bf00      	nop
}
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	00000000 	.word	0x00000000
 8000b3c:	412e8480 	.word	0x412e8480

08000b40 <enableOutputs>:
        else HAL_GPIO_WritePin(motor->_GPIOxEnablePin, motor->_enablePin, GPIO_PIN_RESET);
    }
}

void enableOutputs(Stepper_t* motor)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0a0      	sub	sp, #128	; 0x80
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    if (! motor->_interface) return;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f000 8096 	beq.w	8000c7e <enableOutputs+0x13e>

    //Arduino: pinMode(motor->_pin[0], OUTPUT);
    GPIO_InitTypeDef GPIO_InitStruct0;
	GPIO_InitStruct0.Pin = motor->_pin[0];
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	885b      	ldrh	r3, [r3, #2]
 8000b56:	66fb      	str	r3, [r7, #108]	; 0x6c
	GPIO_InitStruct0.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	673b      	str	r3, [r7, #112]	; 0x70
	GPIO_InitStruct0.Pull = GPIO_PULLUP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	677b      	str	r3, [r7, #116]	; 0x74
	GPIO_InitStruct0.Speed = GPIO_SPEED_FAST;
 8000b60:	2302      	movs	r3, #2
 8000b62:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_GPIO_Init(motor->_GPIOxPin[0], &GPIO_InitStruct0);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f003 fca8 	bl	80044c4 <HAL_GPIO_Init>

    //Arduino: pinMode(motor->_pin[1], OUTPUT);
	GPIO_InitTypeDef GPIO_InitStruct1;
	GPIO_InitStruct1.Pin = motor->_pin[1];
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	889b      	ldrh	r3, [r3, #4]
 8000b78:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_InitStruct1.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_InitStruct1.Pull = GPIO_PULLUP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct1.Speed = GPIO_SPEED_FAST;
 8000b82:	2302      	movs	r3, #2
 8000b84:	667b      	str	r3, [r7, #100]	; 0x64
	HAL_GPIO_Init(motor->_GPIOxPin[1], &GPIO_InitStruct1);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f003 fc97 	bl	80044c4 <HAL_GPIO_Init>

    if (motor->_interface == FULL4WIRE || motor->_interface == HALF4WIRE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	d003      	beq.n	8000ba6 <enableOutputs+0x66>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b08      	cmp	r3, #8
 8000ba4:	d122      	bne.n	8000bec <enableOutputs+0xac>
    {
    	//Arduino: pinMode(motor->_pin[2], OUTPUT);
    	GPIO_InitTypeDef GPIO_InitStruct2;
		GPIO_InitStruct2.Pin = motor->_pin[2];
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	88db      	ldrh	r3, [r3, #6]
 8000baa:	647b      	str	r3, [r7, #68]	; 0x44
		GPIO_InitStruct2.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	64bb      	str	r3, [r7, #72]	; 0x48
		GPIO_InitStruct2.Pull = GPIO_PULLUP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
		GPIO_InitStruct2.Speed = GPIO_SPEED_FAST;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	653b      	str	r3, [r7, #80]	; 0x50
		HAL_GPIO_Init(motor->_GPIOxPin[2], &GPIO_InitStruct2);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f003 fc7e 	bl	80044c4 <HAL_GPIO_Init>

    	//Arduino: pinMode(motor->_pin[3], OUTPUT);
		GPIO_InitTypeDef GPIO_InitStruct3;
		GPIO_InitStruct3.Pin = motor->_pin[3];
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	891b      	ldrh	r3, [r3, #8]
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct3.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct3.Pull = GPIO_PULLUP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct3.Speed = GPIO_SPEED_FAST;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(motor->_GPIOxPin[3], &GPIO_InitStruct3);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 fc6d 	bl	80044c4 <HAL_GPIO_Init>
    {
 8000bea:	e018      	b.n	8000c1e <enableOutputs+0xde>
    }
    else if (motor->_interface == FULL3WIRE || motor->_interface == HALF3WIRE)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d003      	beq.n	8000bfc <enableOutputs+0xbc>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b06      	cmp	r3, #6
 8000bfa:	d110      	bne.n	8000c1e <enableOutputs+0xde>
    {
    	//Arduino: pinMode(motor->_pin[2], OUTPUT);
    	GPIO_InitTypeDef GPIO_InitStruct2;
		GPIO_InitStruct2.Pin = motor->_pin[2];
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	88db      	ldrh	r3, [r3, #6]
 8000c00:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct2.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct2.Pull = GPIO_PULLUP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct2.Speed = GPIO_SPEED_FAST;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(motor->_GPIOxPin[2], &GPIO_InitStruct2);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f107 021c 	add.w	r2, r7, #28
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 fc53 	bl	80044c4 <HAL_GPIO_Init>
    }

    if (motor->_enablePin != 0xff)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000c24:	2bff      	cmp	r3, #255	; 0xff
 8000c26:	d02b      	beq.n	8000c80 <enableOutputs+0x140>
    {
    	//Arduino: pinMode(motor->_enablePin, OUTPUT);
    	GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = motor->_enablePin;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000c2e:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(motor->_GPIOxEnablePin, &GPIO_InitStruct);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c40:	f107 0208 	add.w	r2, r7, #8
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fc3c 	bl	80044c4 <HAL_GPIO_Init>

    	//Arduino: digitalWrite(motor->_enablePin, HIGH ^ motor->_enableInverted);
		if (0x11 ^ motor->_enableInverted) HAL_GPIO_WritePin(motor->_GPIOxEnablePin, motor->_enablePin, GPIO_PIN_SET);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c52:	2b11      	cmp	r3, #17
 8000c54:	d009      	beq.n	8000c6a <enableOutputs+0x12a>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000c60:	2201      	movs	r2, #1
 8000c62:	4619      	mov	r1, r3
 8000c64:	f003 fdde 	bl	8004824 <HAL_GPIO_WritePin>
 8000c68:	e00a      	b.n	8000c80 <enableOutputs+0x140>
		else HAL_GPIO_WritePin(motor->_GPIOxEnablePin, motor->_enablePin, GPIO_PIN_RESET);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000c74:	2200      	movs	r2, #0
 8000c76:	4619      	mov	r1, r3
 8000c78:	f003 fdd4 	bl	8004824 <HAL_GPIO_WritePin>
 8000c7c:	e000      	b.n	8000c80 <enableOutputs+0x140>
    if (! motor->_interface) return;
 8000c7e:	bf00      	nop
    }
}
 8000c80:	3780      	adds	r7, #128	; 0x80
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <initStepperMotors>:
volatile char flag = 0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void initStepperMotors(Stepper_t *stp_j1, Stepper_t *stp_j2, Stepper_t *stp_j3, Stepper_t *stp_j4, Stepper_t *stp_gripper){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	; 0x30
 8000c8c:	af08      	add	r7, sp, #32
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	603b      	str	r3, [r7, #0]

	/*## Initialize Stepper of Joint 1. ###*/
	InitStepper(stp_j1, DRIVER, STEP_1_Pin, STEP_1_GPIO_Port, DIR_1_Pin, DIR_1_GPIO_Port, 0, NULL, 0, NULL, 0);
 8000c96:	2300      	movs	r3, #0
 8000c98:	9306      	str	r3, [sp, #24]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	9305      	str	r3, [sp, #20]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	9304      	str	r3, [sp, #16]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	9303      	str	r3, [sp, #12]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	4b58      	ldr	r3, [pc, #352]	; (8000e0c <initStepperMotors+0x184>)
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	2340      	movs	r3, #64	; 0x40
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	4b56      	ldr	r3, [pc, #344]	; (8000e0c <initStepperMotors+0x184>)
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f7ff fda1 	bl	8000800 <InitStepper>
	setMaxSpeed(stp_j1, 500);
 8000cbe:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8000e10 <initStepperMotors+0x188>
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff fe18 	bl	80008f8 <setMaxSpeed>
	setSpeed(stp_j1, 500);
 8000cc8:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8000e10 <initStepperMotors+0x188>
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f7ff fedf 	bl	8000a90 <setSpeed>
	setAcceleration(stp_j1, 500);
 8000cd2:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8000e10 <initStepperMotors+0x188>
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f7ff fe52 	bl	8000980 <setAcceleration>
	moveTo(stp_j1, 10000000);
 8000cdc:	494d      	ldr	r1, [pc, #308]	; (8000e14 <initStepperMotors+0x18c>)
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f7ff fc76 	bl	80005d0 <moveTo>
//	enableOutputs(stepper_x);

	/*## Initialize Stepper of Joint 2. ###*/
	InitStepper(stp_j2, DRIVER, STEP_2_Pin, STEP_2_GPIO_Port, DIR_2_Pin, DIR_2_GPIO_Port, 0, NULL, 0, NULL, 0);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	9306      	str	r3, [sp, #24]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	9305      	str	r3, [sp, #20]
 8000cec:	2300      	movs	r3, #0
 8000cee:	9304      	str	r3, [sp, #16]
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	9303      	str	r3, [sp, #12]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	4b47      	ldr	r3, [pc, #284]	; (8000e18 <initStepperMotors+0x190>)
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	4b45      	ldr	r3, [pc, #276]	; (8000e18 <initStepperMotors+0x190>)
 8000d04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d08:	2101      	movs	r1, #1
 8000d0a:	68b8      	ldr	r0, [r7, #8]
 8000d0c:	f7ff fd78 	bl	8000800 <InitStepper>
	setMaxSpeed(stp_j2, 500);
 8000d10:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8000e10 <initStepperMotors+0x188>
 8000d14:	68b8      	ldr	r0, [r7, #8]
 8000d16:	f7ff fdef 	bl	80008f8 <setMaxSpeed>
	setSpeed(stp_j2, 500);
 8000d1a:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8000e10 <initStepperMotors+0x188>
 8000d1e:	68b8      	ldr	r0, [r7, #8]
 8000d20:	f7ff feb6 	bl	8000a90 <setSpeed>
	setAcceleration(stp_j2, 500);
 8000d24:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8000e10 <initStepperMotors+0x188>
 8000d28:	68b8      	ldr	r0, [r7, #8]
 8000d2a:	f7ff fe29 	bl	8000980 <setAcceleration>
//	moveTo(stepper_y, -10000000);
//	enableOutputs(stepper_y);

	/*## Initialize Stepper of Joint 3. ###*/
	InitStepper(stp_j3, DRIVER, STEP_3_Pin, STEP_3_GPIO_Port, 0, NULL, 0, NULL, 0, NULL, 0);
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9306      	str	r3, [sp, #24]
 8000d32:	2300      	movs	r3, #0
 8000d34:	9305      	str	r3, [sp, #20]
 8000d36:	2300      	movs	r3, #0
 8000d38:	9304      	str	r3, [sp, #16]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9303      	str	r3, [sp, #12]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	9302      	str	r3, [sp, #8]
 8000d42:	2300      	movs	r3, #0
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	2300      	movs	r3, #0
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	4b33      	ldr	r3, [pc, #204]	; (8000e18 <initStepperMotors+0x190>)
 8000d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d50:	2101      	movs	r1, #1
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fd54 	bl	8000800 <InitStepper>
	setMaxSpeed(stp_j3, 500);
 8000d58:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8000e10 <initStepperMotors+0x188>
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff fdcb 	bl	80008f8 <setMaxSpeed>
	setSpeed(stp_j3, 500);
 8000d62:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8000e10 <initStepperMotors+0x188>
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fe92 	bl	8000a90 <setSpeed>
	setAcceleration(stp_j3, 500);
 8000d6c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8000e10 <initStepperMotors+0x188>
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fe05 	bl	8000980 <setAcceleration>
//	moveTo(stepper_z, -10000000);
//	enableOutputs(stepper_z);

	/*## Initialize Z axis stepper. ###*/
	InitStepper(stp_j4, DRIVER, STEP_4_Pin, STEP_4_GPIO_Port, 0, NULL, 0, NULL, 0, NULL, 0);
 8000d76:	2300      	movs	r3, #0
 8000d78:	9306      	str	r3, [sp, #24]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	9305      	str	r3, [sp, #20]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	9304      	str	r3, [sp, #16]
 8000d82:	2300      	movs	r3, #0
 8000d84:	9303      	str	r3, [sp, #12]
 8000d86:	2300      	movs	r3, #0
 8000d88:	9302      	str	r3, [sp, #8]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <initStepperMotors+0x194>)
 8000d94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d98:	2101      	movs	r1, #1
 8000d9a:	6838      	ldr	r0, [r7, #0]
 8000d9c:	f7ff fd30 	bl	8000800 <InitStepper>
	setMaxSpeed(stp_j4, 500);
 8000da0:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8000e10 <initStepperMotors+0x188>
 8000da4:	6838      	ldr	r0, [r7, #0]
 8000da6:	f7ff fda7 	bl	80008f8 <setMaxSpeed>
	setSpeed(stp_j4, 500);
 8000daa:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8000e10 <initStepperMotors+0x188>
 8000dae:	6838      	ldr	r0, [r7, #0]
 8000db0:	f7ff fe6e 	bl	8000a90 <setSpeed>
	setAcceleration(stp_j4, 500);
 8000db4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000e10 <initStepperMotors+0x188>
 8000db8:	6838      	ldr	r0, [r7, #0]
 8000dba:	f7ff fde1 	bl	8000980 <setAcceleration>
//	moveTo(stepper_z, -10000000);
//	enableOutputs(stepper_z);

	/*## Initialize Z axis stepper. ###*/
	InitStepper(stp_gripper, DRIVER, STEP_5_Pin, STEP_5_GPIO_Port, 0, NULL, 0, NULL, 0, NULL, 0);
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	9306      	str	r3, [sp, #24]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9305      	str	r3, [sp, #20]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	9304      	str	r3, [sp, #16]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9303      	str	r3, [sp, #12]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9302      	str	r3, [sp, #8]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <initStepperMotors+0x184>)
 8000ddc:	2220      	movs	r2, #32
 8000dde:	2101      	movs	r1, #1
 8000de0:	69b8      	ldr	r0, [r7, #24]
 8000de2:	f7ff fd0d 	bl	8000800 <InitStepper>
	setMaxSpeed(stp_gripper, 500);
 8000de6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000e10 <initStepperMotors+0x188>
 8000dea:	69b8      	ldr	r0, [r7, #24]
 8000dec:	f7ff fd84 	bl	80008f8 <setMaxSpeed>
	setSpeed(stp_gripper, 500);
 8000df0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8000e10 <initStepperMotors+0x188>
 8000df4:	69b8      	ldr	r0, [r7, #24]
 8000df6:	f7ff fe4b 	bl	8000a90 <setSpeed>
	setAcceleration(stp_gripper, 500);
 8000dfa:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000e10 <initStepperMotors+0x188>
 8000dfe:	69b8      	ldr	r0, [r7, #24]
 8000e00:	f7ff fdbe 	bl	8000980 <setAcceleration>
//	moveTo(stepper_z, -10000000);
//	enableOutputs(stepper_z);

}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	58020400 	.word	0x58020400
 8000e10:	43fa0000 	.word	0x43fa0000
 8000e14:	00989680 	.word	0x00989680
 8000e18:	58021000 	.word	0x58021000
 8000e1c:	58020c00 	.word	0x58020c00

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8000e26:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e28:	f000 ff7a 	bl	8001d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2c:	f000 f826 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e30:	f000 fa26 	bl	8001280 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e34:	f000 f9dc 	bl	80011f0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e38:	f000 f98e 	bl	8001158 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000e3c:	f000 f8ee 	bl	800101c <MX_TIM2_Init>
  MX_UART4_Init();
 8000e40:	f000 f93a 	bl	80010b8 <MX_UART4_Init>
  MX_SPI1_Init();
 8000e44:	f000 f894 	bl	8000f70 <MX_SPI1_Init>
  Stepper_t stepMotorJoint3;
  Stepper_t stepMotorJoint4;
  Stepper_t stepMotorJointGripper;

  /* Stepper motors initialization */
  initStepperMotors(&stepMotorJoint1, &stepMotorJoint2, &stepMotorJoint3, &stepMotorJoint4, &stepMotorJointGripper);
 8000e48:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000e4c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8000e50:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8000e54:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 8000e58:	463b      	mov	r3, r7
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	4623      	mov	r3, r4
 8000e5e:	f7ff ff13 	bl	8000c88 <initStepperMotors>

  HAL_TIM_Base_Start_IT(&htim2);
 8000e62:	4804      	ldr	r0, [pc, #16]	; (8000e74 <main+0x54>)
 8000e64:	f006 fc80 	bl	8007768 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <main+0x58>)
 8000e6e:	f003 fcd9 	bl	8004824 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <main+0x52>
 8000e74:	200003a4 	.word	0x200003a4
 8000e78:	58020400 	.word	0x58020400

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b09c      	sub	sp, #112	; 0x70
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	224c      	movs	r2, #76	; 0x4c
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f008 fd58 	bl	8009940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2220      	movs	r2, #32
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f008 fd52 	bl	8009940 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f003 fcf5 	bl	800488c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <SystemClock_Config+0xec>)
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <SystemClock_Config+0xec>)
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <SystemClock_Config+0xec>)
 8000eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <SystemClock_Config+0xf0>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a2a      	ldr	r2, [pc, #168]	; (8000f6c <SystemClock_Config+0xf0>)
 8000ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <SystemClock_Config+0xf0>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ed4:	bf00      	nop
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <SystemClock_Config+0xf0>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ee2:	d1f8      	bne.n	8000ed6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000efa:	2332      	movs	r3, #50	; 0x32
 8000efc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f02:	2304      	movs	r3, #4
 8000f04:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 fcf0 	bl	8004900 <HAL_RCC_OscConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f26:	f000 fb1d 	bl	8001564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2a:	233f      	movs	r3, #63	; 0x3f
 8000f2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f36:	2308      	movs	r3, #8
 8000f38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f3a:	2340      	movs	r3, #64	; 0x40
 8000f3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f3e:	2340      	movs	r3, #64	; 0x40
 8000f40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f46:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f48:	2340      	movs	r3, #64	; 0x40
 8000f4a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2102      	movs	r1, #2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 f8e5 	bl	8005120 <HAL_RCC_ClockConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000f5c:	f000 fb02 	bl	8001564 <Error_Handler>
  }
}
 8000f60:	bf00      	nop
 8000f62:	3770      	adds	r7, #112	; 0x70
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	58000400 	.word	0x58000400
 8000f6c:	58024800 	.word	0x58024800

08000f70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f74:	4b27      	ldr	r3, [pc, #156]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000f76:	4a28      	ldr	r2, [pc, #160]	; (8001018 <MX_SPI1_Init+0xa8>)
 8000f78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f7a:	4b26      	ldr	r3, [pc, #152]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000f7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000f84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f88:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000f9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fa2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_SPI1_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_SPI1_Init+0xa4>)
 8001002:	f005 ff7b 	bl	8006efc <HAL_SPI_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800100c:	f000 faaa 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000031c 	.word	0x2000031c
 8001018:	40013000 	.word	0x40013000

0800101c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_TIM2_Init+0x98>)
 800103c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001040:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_TIM2_Init+0x98>)
 8001044:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001048:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_TIM2_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48-1;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_TIM2_Init+0x98>)
 8001052:	222f      	movs	r2, #47	; 0x2f
 8001054:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_TIM2_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_TIM2_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001062:	4814      	ldr	r0, [pc, #80]	; (80010b4 <MX_TIM2_Init+0x98>)
 8001064:	f006 fb29 	bl	80076ba <HAL_TIM_Base_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800106e:	f000 fa79 	bl	8001564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001076:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_TIM2_Init+0x98>)
 8001080:	f006 fd30 	bl	8007ae4 <HAL_TIM_ConfigClockSource>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800108a:	f000 fa6b 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_TIM2_Init+0x98>)
 800109c:	f006 ff76 	bl	8007f8c <HAL_TIMEx_MasterConfigSynchronization>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010a6:	f000 fa5d 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200003a4 	.word	0x200003a4

080010b8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010bc:	4b24      	ldr	r3, [pc, #144]	; (8001150 <MX_UART4_Init+0x98>)
 80010be:	4a25      	ldr	r2, [pc, #148]	; (8001154 <MX_UART4_Init+0x9c>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <MX_UART4_Init+0x98>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_UART4_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_UART4_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <MX_UART4_Init+0x98>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_UART4_Init+0x98>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_UART4_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_UART4_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_UART4_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_UART4_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_UART4_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001100:	2300      	movs	r3, #0
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	4812      	ldr	r0, [pc, #72]	; (8001150 <MX_UART4_Init+0x98>)
 8001108:	f008 fa36 	bl	8009578 <HAL_RS485Ex_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8001112:	f000 fa27 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_UART4_Init+0x98>)
 800111a:	f008 faee 	bl	80096fa <HAL_UARTEx_SetTxFifoThreshold>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_UART4_Init+0x70>
  {
    Error_Handler();
 8001124:	f000 fa1e 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001128:	2100      	movs	r1, #0
 800112a:	4809      	ldr	r0, [pc, #36]	; (8001150 <MX_UART4_Init+0x98>)
 800112c:	f008 fb23 	bl	8009776 <HAL_UARTEx_SetRxFifoThreshold>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_UART4_Init+0x82>
  {
    Error_Handler();
 8001136:	f000 fa15 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_UART4_Init+0x98>)
 800113c:	f008 faa4 	bl	8009688 <HAL_UARTEx_DisableFifoMode>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_UART4_Init+0x92>
  {
    Error_Handler();
 8001146:	f000 fa0d 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000028c 	.word	0x2000028c
 8001154:	40004c00 	.word	0x40004c00

08001158 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <MX_USART3_UART_Init+0x94>)
 8001160:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 80011a2:	f006 ff99 	bl	80080d8 <HAL_UART_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011ac:	f000 f9da 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 80011b4:	f008 faa1 	bl	80096fa <HAL_UARTEx_SetTxFifoThreshold>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011be:	f000 f9d1 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4808      	ldr	r0, [pc, #32]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 80011c6:	f008 fad6 	bl	8009776 <HAL_UARTEx_SetRxFifoThreshold>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011d0:	f000 f9c8 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_USART3_UART_Init+0x90>)
 80011d6:	f008 fa57 	bl	8009688 <HAL_UARTEx_DisableFifoMode>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f000 f9c0 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000184 	.word	0x20000184
 80011ec:	40004800 	.word	0x40004800

080011f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_DMA_Init+0x8c>)
 80011f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011fc:	4a1f      	ldr	r2, [pc, #124]	; (800127c <MX_DMA_Init+0x8c>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_DMA_Init+0x8c>)
 8001208:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_DMA_Init+0x8c>)
 8001216:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800121a:	4a18      	ldr	r2, [pc, #96]	; (800127c <MX_DMA_Init+0x8c>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_DMA_Init+0x8c>)
 8001226:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	200b      	movs	r0, #11
 8001238:	f000 feeb 	bl	8002012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800123c:	200b      	movs	r0, #11
 800123e:	f000 ff02 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	200c      	movs	r0, #12
 8001248:	f000 fee3 	bl	8002012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800124c:	200c      	movs	r0, #12
 800124e:	f000 fefa 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2038      	movs	r0, #56	; 0x38
 8001258:	f000 fedb 	bl	8002012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800125c:	2038      	movs	r0, #56	; 0x38
 800125e:	f000 fef2 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2039      	movs	r0, #57	; 0x39
 8001268:	f000 fed3 	bl	8002012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800126c:	2039      	movs	r0, #57	; 0x39
 800126e:	f000 feea 	bl	8002046 <HAL_NVIC_EnableIRQ>

}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	58024400 	.word	0x58024400

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001296:	4b81      	ldr	r3, [pc, #516]	; (800149c <MX_GPIO_Init+0x21c>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129c:	4a7f      	ldr	r2, [pc, #508]	; (800149c <MX_GPIO_Init+0x21c>)
 800129e:	f043 0310 	orr.w	r3, r3, #16
 80012a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a6:	4b7d      	ldr	r3, [pc, #500]	; (800149c <MX_GPIO_Init+0x21c>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	f003 0310 	and.w	r3, r3, #16
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b4:	4b79      	ldr	r3, [pc, #484]	; (800149c <MX_GPIO_Init+0x21c>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ba:	4a78      	ldr	r2, [pc, #480]	; (800149c <MX_GPIO_Init+0x21c>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c4:	4b75      	ldr	r3, [pc, #468]	; (800149c <MX_GPIO_Init+0x21c>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	4b72      	ldr	r3, [pc, #456]	; (800149c <MX_GPIO_Init+0x21c>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d8:	4a70      	ldr	r2, [pc, #448]	; (800149c <MX_GPIO_Init+0x21c>)
 80012da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e2:	4b6e      	ldr	r3, [pc, #440]	; (800149c <MX_GPIO_Init+0x21c>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b6a      	ldr	r3, [pc, #424]	; (800149c <MX_GPIO_Init+0x21c>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	4a69      	ldr	r2, [pc, #420]	; (800149c <MX_GPIO_Init+0x21c>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001300:	4b66      	ldr	r3, [pc, #408]	; (800149c <MX_GPIO_Init+0x21c>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b63      	ldr	r3, [pc, #396]	; (800149c <MX_GPIO_Init+0x21c>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001314:	4a61      	ldr	r2, [pc, #388]	; (800149c <MX_GPIO_Init+0x21c>)
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <MX_GPIO_Init+0x21c>)
 8001320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132c:	4b5b      	ldr	r3, [pc, #364]	; (800149c <MX_GPIO_Init+0x21c>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	4a5a      	ldr	r2, [pc, #360]	; (800149c <MX_GPIO_Init+0x21c>)
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133c:	4b57      	ldr	r3, [pc, #348]	; (800149c <MX_GPIO_Init+0x21c>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800134a:	4b54      	ldr	r3, [pc, #336]	; (800149c <MX_GPIO_Init+0x21c>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	4a52      	ldr	r2, [pc, #328]	; (800149c <MX_GPIO_Init+0x21c>)
 8001352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135a:	4b50      	ldr	r3, [pc, #320]	; (800149c <MX_GPIO_Init+0x21c>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2140      	movs	r1, #64	; 0x40
 800136c:	484c      	ldr	r0, [pc, #304]	; (80014a0 <MX_GPIO_Init+0x220>)
 800136e:	f003 fa59 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|STEP_5_Pin|DIR_1_Pin
 8001372:	2200      	movs	r2, #0
 8001374:	f244 01e1 	movw	r1, #16609	; 0x40e1
 8001378:	484a      	ldr	r0, [pc, #296]	; (80014a4 <MX_GPIO_Init+0x224>)
 800137a:	f003 fa53 	bl	8004824 <HAL_GPIO_WritePin>
                          |STEP_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_3_Pin|STEP_3_Pin|STEP_2_Pin|DIR_2_Pin
 800137e:	2200      	movs	r2, #0
 8001380:	f646 2102 	movw	r1, #27138	; 0x6a02
 8001384:	4848      	ldr	r0, [pc, #288]	; (80014a8 <MX_GPIO_Init+0x228>)
 8001386:	f003 fa4d 	bl	8004824 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin|STEP_4_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001390:	4846      	ldr	r0, [pc, #280]	; (80014ac <MX_GPIO_Init+0x22c>)
 8001392:	f003 fa47 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LM4_Pin LM3_Pin LM5_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin|LM5_Pin;
 8001396:	f249 0340 	movw	r3, #36928	; 0x9040
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800139c:	4b44      	ldr	r3, [pc, #272]	; (80014b0 <MX_GPIO_Init+0x230>)
 800139e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	483f      	ldr	r0, [pc, #252]	; (80014a8 <MX_GPIO_Init+0x228>)
 80013ac:	f003 f88a 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 80013b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b6:	4b3e      	ldr	r3, [pc, #248]	; (80014b0 <MX_GPIO_Init+0x230>)
 80013b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	483b      	ldr	r0, [pc, #236]	; (80014b4 <MX_GPIO_Init+0x234>)
 80013c6:	f003 f87d 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_5_Pin */
  GPIO_InitStruct.Pin = DIR_5_Pin;
 80013ca:	2340      	movs	r3, #64	; 0x40
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIR_5_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	482f      	ldr	r0, [pc, #188]	; (80014a0 <MX_GPIO_Init+0x220>)
 80013e2:	f003 f86f 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin STEP_5_Pin DIR_1_Pin
                           STEP_1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|STEP_5_Pin|DIR_1_Pin
 80013e6:	f244 03e1 	movw	r3, #16609	; 0x40e1
 80013ea:	61fb      	str	r3, [r7, #28]
                          |STEP_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4829      	ldr	r0, [pc, #164]	; (80014a4 <MX_GPIO_Init+0x224>)
 8001400:	f003 f860 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_3_Pin STEP_3_Pin STEP_2_Pin DIR_2_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = DIR_3_Pin|STEP_3_Pin|STEP_2_Pin|DIR_2_Pin
 8001404:	f646 2302 	movw	r3, #27138	; 0x6a02
 8001408:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	4619      	mov	r1, r3
 800141c:	4822      	ldr	r0, [pc, #136]	; (80014a8 <MX_GPIO_Init+0x228>)
 800141e:	f003 f851 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM1_Pin LM2_Pin */
  GPIO_InitStruct.Pin = LM1_Pin|LM2_Pin;
 8001422:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <MX_GPIO_Init+0x230>)
 800142a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	481b      	ldr	r0, [pc, #108]	; (80014a4 <MX_GPIO_Init+0x224>)
 8001438:	f003 f844 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin DIR_4_Pin STEP_4_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin|STEP_4_Pin;
 800143c:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	4815      	ldr	r0, [pc, #84]	; (80014ac <MX_GPIO_Init+0x22c>)
 8001456:	f003 f835 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_GPIO_Init+0x230>)
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	4812      	ldr	r0, [pc, #72]	; (80014b8 <MX_GPIO_Init+0x238>)
 800146e:	f003 f829 	bl	80044c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2103      	movs	r1, #3
 8001476:	2017      	movs	r0, #23
 8001478:	f000 fdcb 	bl	8002012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800147c:	2017      	movs	r0, #23
 800147e:	f000 fde2 	bl	8002046 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2103      	movs	r1, #3
 8001486:	2028      	movs	r0, #40	; 0x28
 8001488:	f000 fdc3 	bl	8002012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800148c:	2028      	movs	r0, #40	; 0x28
 800148e:	f000 fdda 	bl	8002046 <HAL_NVIC_EnableIRQ>

}
 8001492:	bf00      	nop
 8001494:	3730      	adds	r7, #48	; 0x30
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	58024400 	.word	0x58024400
 80014a0:	58020000 	.word	0x58020000
 80014a4:	58020400 	.word	0x58020400
 80014a8:	58021000 	.word	0x58021000
 80014ac:	58020c00 	.word	0x58020c00
 80014b0:	11110000 	.word	0x11110000
 80014b4:	58020800 	.word	0x58020800
 80014b8:	58021800 	.word	0x58021800

080014bc <HAL_UART_TxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Blue_Button_Pin)
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014e0:	d12a      	bne.n	8001538 <HAL_GPIO_EXTI_Callback+0x68>
	{
		flag ^= 0x01;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_GPIO_EXTI_Callback+0x74>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f083 0301 	eor.w	r3, r3, #1
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_GPIO_EXTI_Callback+0x74>)
 80014f0:	701a      	strb	r2, [r3, #0]
		 if(flag == 0x01)
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_GPIO_EXTI_Callback+0x74>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d10e      	bne.n	800151a <HAL_GPIO_EXTI_Callback+0x4a>
		 {
			HAL_TIM_Base_Stop_IT(&htim2);
 80014fc:	4812      	ldr	r0, [pc, #72]	; (8001548 <HAL_GPIO_EXTI_Callback+0x78>)
 80014fe:	f006 f9a3 	bl	8007848 <HAL_TIM_Base_Stop_IT>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2101      	movs	r1, #1
 8001506:	4811      	ldr	r0, [pc, #68]	; (800154c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001508:	f003 f98c 	bl	8004824 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001512:	480e      	ldr	r0, [pc, #56]	; (800154c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001514:	f003 f986 	bl	8004824 <HAL_GPIO_WritePin>
	}
	else
	{
		__NOP();
	}
}
 8001518:	e00f      	b.n	800153a <HAL_GPIO_EXTI_Callback+0x6a>
			 HAL_TIM_Base_Start_IT(&htim2);
 800151a:	480b      	ldr	r0, [pc, #44]	; (8001548 <HAL_GPIO_EXTI_Callback+0x78>)
 800151c:	f006 f924 	bl	8007768 <HAL_TIM_Base_Start_IT>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2101      	movs	r1, #1
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001526:	f003 f97d 	bl	8004824 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001530:	4806      	ldr	r0, [pc, #24]	; (800154c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001532:	f003 f977 	bl	8004824 <HAL_GPIO_WritePin>
}
 8001536:	e000      	b.n	800153a <HAL_GPIO_EXTI_Callback+0x6a>
		__NOP();
 8001538:	bf00      	nop
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000090 	.word	0x20000090
 8001548:	200003a4 	.word	0x200003a4
 800154c:	58020400 	.word	0x58020400

08001550 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
//
//	      s.di = s.d * s.speedScale; // integer
//	    }
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
  }
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156c:	e7fe      	b.n	800156c <Error_Handler+0x8>
	...

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_MspInit+0x30>)
 8001578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800157c:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_MspInit+0x30>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_MspInit+0x30>)
 8001588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	58024400 	.word	0x58024400

080015a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b0ba      	sub	sp, #232	; 0xe8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015bc:	f107 0318 	add.w	r3, r7, #24
 80015c0:	22bc      	movs	r2, #188	; 0xbc
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f008 f9bb 	bl	8009940 <memset>
  if(hspi->Instance==SPI1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a3b      	ldr	r2, [pc, #236]	; (80016bc <HAL_SPI_MspInit+0x118>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d16e      	bne.n	80016b2 <HAL_SPI_MspInit+0x10e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80015d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80015da:	2300      	movs	r3, #0
 80015dc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015de:	f107 0318 	add.w	r3, r7, #24
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 f928 	bl	8005838 <HAL_RCCEx_PeriphCLKConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80015ee:	f7ff ffb9 	bl	8001564 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_SPI_MspInit+0x11c>)
 80015f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015f8:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <HAL_SPI_MspInit+0x11c>)
 80015fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_SPI_MspInit+0x11c>)
 8001604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <HAL_SPI_MspInit+0x11c>)
 8001612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001616:	4a2a      	ldr	r2, [pc, #168]	; (80016c0 <HAL_SPI_MspInit+0x11c>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HAL_SPI_MspInit+0x11c>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <HAL_SPI_MspInit+0x11c>)
 8001630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001634:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <HAL_SPI_MspInit+0x11c>)
 8001636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800163a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <HAL_SPI_MspInit+0x11c>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800164c:	2320      	movs	r3, #32
 800164e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001664:	2305      	movs	r3, #5
 8001666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800166e:	4619      	mov	r1, r3
 8001670:	4814      	ldr	r0, [pc, #80]	; (80016c4 <HAL_SPI_MspInit+0x120>)
 8001672:	f002 ff27 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800167a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001690:	2305      	movs	r3, #5
 8001692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001696:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800169a:	4619      	mov	r1, r3
 800169c:	480a      	ldr	r0, [pc, #40]	; (80016c8 <HAL_SPI_MspInit+0x124>)
 800169e:	f002 ff11 	bl	80044c4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2023      	movs	r0, #35	; 0x23
 80016a8:	f000 fcb3 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80016ac:	2023      	movs	r0, #35	; 0x23
 80016ae:	f000 fcca 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	37e8      	adds	r7, #232	; 0xe8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40013000 	.word	0x40013000
 80016c0:	58024400 	.word	0x58024400
 80016c4:	58020000 	.word	0x58020000
 80016c8:	58021800 	.word	0x58021800

080016cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016dc:	d116      	bne.n	800170c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_TIM_Base_MspInit+0x48>)
 80016e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <HAL_TIM_Base_MspInit+0x48>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_TIM_Base_MspInit+0x48>)
 80016f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2100      	movs	r1, #0
 8001700:	201c      	movs	r0, #28
 8001702:	f000 fc86 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001706:	201c      	movs	r0, #28
 8001708:	f000 fc9d 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	58024400 	.word	0x58024400

08001718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b0bc      	sub	sp, #240	; 0xf0
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001730:	f107 0320 	add.w	r3, r7, #32
 8001734:	22bc      	movs	r2, #188	; 0xbc
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f008 f901 	bl	8009940 <memset>
  if(huart->Instance==UART4)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a67      	ldr	r2, [pc, #412]	; (80018e0 <HAL_UART_MspInit+0x1c8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	f040 80db 	bne.w	8001900 <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800174a:	2302      	movs	r3, #2
 800174c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4618      	mov	r0, r3
 800175a:	f004 f86d 	bl	8005838 <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001764:	f7ff fefe 	bl	8001564 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001768:	4b5e      	ldr	r3, [pc, #376]	; (80018e4 <HAL_UART_MspInit+0x1cc>)
 800176a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800176e:	4a5d      	ldr	r2, [pc, #372]	; (80018e4 <HAL_UART_MspInit+0x1cc>)
 8001770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001774:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001778:	4b5a      	ldr	r3, [pc, #360]	; (80018e4 <HAL_UART_MspInit+0x1cc>)
 800177a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800177e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b57      	ldr	r3, [pc, #348]	; (80018e4 <HAL_UART_MspInit+0x1cc>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178c:	4a55      	ldr	r2, [pc, #340]	; (80018e4 <HAL_UART_MspInit+0x1cc>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001796:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_UART_MspInit+0x1cc>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a4:	4b4f      	ldr	r3, [pc, #316]	; (80018e4 <HAL_UART_MspInit+0x1cc>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017aa:	4a4e      	ldr	r2, [pc, #312]	; (80018e4 <HAL_UART_MspInit+0x1cc>)
 80017ac:	f043 0308 	orr.w	r3, r3, #8
 80017b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b4:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <HAL_UART_MspInit+0x1cc>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017dc:	2308      	movs	r3, #8
 80017de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017e6:	4619      	mov	r1, r3
 80017e8:	483f      	ldr	r0, [pc, #252]	; (80018e8 <HAL_UART_MspInit+0x1d0>)
 80017ea:	f002 fe6b 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ee:	2303      	movs	r3, #3
 80017f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001806:	2308      	movs	r3, #8
 8001808:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001810:	4619      	mov	r1, r3
 8001812:	4836      	ldr	r0, [pc, #216]	; (80018ec <HAL_UART_MspInit+0x1d4>)
 8001814:	f002 fe56 	bl	80044c4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001818:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <HAL_UART_MspInit+0x1d8>)
 800181a:	4a36      	ldr	r2, [pc, #216]	; (80018f4 <HAL_UART_MspInit+0x1dc>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_UART_MspInit+0x1d8>)
 8001820:	223f      	movs	r2, #63	; 0x3f
 8001822:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001824:	4b32      	ldr	r3, [pc, #200]	; (80018f0 <HAL_UART_MspInit+0x1d8>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800182a:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <HAL_UART_MspInit+0x1d8>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001830:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_UART_MspInit+0x1d8>)
 8001832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001836:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_UART_MspInit+0x1d8>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <HAL_UART_MspInit+0x1d8>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_UART_MspInit+0x1d8>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800184a:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <HAL_UART_MspInit+0x1d8>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <HAL_UART_MspInit+0x1d8>)
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001856:	4826      	ldr	r0, [pc, #152]	; (80018f0 <HAL_UART_MspInit+0x1d8>)
 8001858:	f000 fc10 	bl	800207c <HAL_DMA_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8001862:	f7ff fe7f 	bl	8001564 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a21      	ldr	r2, [pc, #132]	; (80018f0 <HAL_UART_MspInit+0x1d8>)
 800186a:	67da      	str	r2, [r3, #124]	; 0x7c
 800186c:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <HAL_UART_MspInit+0x1d8>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <HAL_UART_MspInit+0x1e0>)
 8001874:	4a21      	ldr	r2, [pc, #132]	; (80018fc <HAL_UART_MspInit+0x1e4>)
 8001876:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <HAL_UART_MspInit+0x1e0>)
 800187a:	2240      	movs	r2, #64	; 0x40
 800187c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <HAL_UART_MspInit+0x1e0>)
 8001880:	2240      	movs	r2, #64	; 0x40
 8001882:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_UART_MspInit+0x1e0>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_UART_MspInit+0x1e0>)
 800188c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001890:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_UART_MspInit+0x1e0>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_UART_MspInit+0x1e0>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_UART_MspInit+0x1e0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_UART_MspInit+0x1e0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_UART_MspInit+0x1e0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80018b0:	4811      	ldr	r0, [pc, #68]	; (80018f8 <HAL_UART_MspInit+0x1e0>)
 80018b2:	f000 fbe3 	bl	800207c <HAL_DMA_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 80018bc:	f7ff fe52 	bl	8001564 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_UART_MspInit+0x1e0>)
 80018c4:	679a      	str	r2, [r3, #120]	; 0x78
 80018c6:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <HAL_UART_MspInit+0x1e0>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2100      	movs	r1, #0
 80018d0:	2034      	movs	r0, #52	; 0x34
 80018d2:	f000 fb9e 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80018d6:	2034      	movs	r0, #52	; 0x34
 80018d8:	f000 fbb5 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018dc:	e0bb      	b.n	8001a56 <HAL_UART_MspInit+0x33e>
 80018de:	bf00      	nop
 80018e0:	40004c00 	.word	0x40004c00
 80018e4:	58024400 	.word	0x58024400
 80018e8:	58020000 	.word	0x58020000
 80018ec:	58020c00 	.word	0x58020c00
 80018f0:	20000094 	.word	0x20000094
 80018f4:	40020410 	.word	0x40020410
 80018f8:	200003f0 	.word	0x200003f0
 80018fc:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a56      	ldr	r2, [pc, #344]	; (8001a60 <HAL_UART_MspInit+0x348>)
 8001906:	4293      	cmp	r3, r2
 8001908:	f040 80a5 	bne.w	8001a56 <HAL_UART_MspInit+0x33e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800190c:	2302      	movs	r3, #2
 800190e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001916:	f107 0320 	add.w	r3, r7, #32
 800191a:	4618      	mov	r0, r3
 800191c:	f003 ff8c 	bl	8005838 <HAL_RCCEx_PeriphCLKConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_UART_MspInit+0x212>
      Error_Handler();
 8001926:	f7ff fe1d 	bl	8001564 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800192a:	4b4e      	ldr	r3, [pc, #312]	; (8001a64 <HAL_UART_MspInit+0x34c>)
 800192c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001930:	4a4c      	ldr	r2, [pc, #304]	; (8001a64 <HAL_UART_MspInit+0x34c>)
 8001932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001936:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <HAL_UART_MspInit+0x34c>)
 800193c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001948:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <HAL_UART_MspInit+0x34c>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194e:	4a45      	ldr	r2, [pc, #276]	; (8001a64 <HAL_UART_MspInit+0x34c>)
 8001950:	f043 0308 	orr.w	r3, r3, #8
 8001954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001958:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <HAL_UART_MspInit+0x34c>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001966:	f44f 7340 	mov.w	r3, #768	; 0x300
 800196a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001980:	2307      	movs	r3, #7
 8001982:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001986:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800198a:	4619      	mov	r1, r3
 800198c:	4836      	ldr	r0, [pc, #216]	; (8001a68 <HAL_UART_MspInit+0x350>)
 800198e:	f002 fd99 	bl	80044c4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001992:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <HAL_UART_MspInit+0x354>)
 8001994:	4a36      	ldr	r2, [pc, #216]	; (8001a70 <HAL_UART_MspInit+0x358>)
 8001996:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001998:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <HAL_UART_MspInit+0x354>)
 800199a:	222d      	movs	r2, #45	; 0x2d
 800199c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199e:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <HAL_UART_MspInit+0x354>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a4:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <HAL_UART_MspInit+0x354>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019aa:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <HAL_UART_MspInit+0x354>)
 80019ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b2:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <HAL_UART_MspInit+0x354>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b8:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <HAL_UART_MspInit+0x354>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80019be:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <HAL_UART_MspInit+0x354>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019c4:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <HAL_UART_MspInit+0x354>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ca:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <HAL_UART_MspInit+0x354>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80019d0:	4826      	ldr	r0, [pc, #152]	; (8001a6c <HAL_UART_MspInit+0x354>)
 80019d2:	f000 fb53 	bl	800207c <HAL_DMA_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_UART_MspInit+0x2c8>
      Error_Handler();
 80019dc:	f7ff fdc2 	bl	8001564 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a22      	ldr	r2, [pc, #136]	; (8001a6c <HAL_UART_MspInit+0x354>)
 80019e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80019e6:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <HAL_UART_MspInit+0x354>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_UART_MspInit+0x35c>)
 80019ee:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <HAL_UART_MspInit+0x360>)
 80019f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_UART_MspInit+0x35c>)
 80019f4:	222e      	movs	r2, #46	; 0x2e
 80019f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_UART_MspInit+0x35c>)
 80019fa:	2240      	movs	r2, #64	; 0x40
 80019fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_UART_MspInit+0x35c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_UART_MspInit+0x35c>)
 8001a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_UART_MspInit+0x35c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_UART_MspInit+0x35c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_UART_MspInit+0x35c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_UART_MspInit+0x35c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <HAL_UART_MspInit+0x35c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a2a:	4812      	ldr	r0, [pc, #72]	; (8001a74 <HAL_UART_MspInit+0x35c>)
 8001a2c:	f000 fb26 	bl	800207c <HAL_DMA_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_UART_MspInit+0x322>
      Error_Handler();
 8001a36:	f7ff fd95 	bl	8001564 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <HAL_UART_MspInit+0x35c>)
 8001a3e:	679a      	str	r2, [r3, #120]	; 0x78
 8001a40:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <HAL_UART_MspInit+0x35c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2027      	movs	r0, #39	; 0x27
 8001a4c:	f000 fae1 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a50:	2027      	movs	r0, #39	; 0x27
 8001a52:	f000 faf8 	bl	8002046 <HAL_NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	37f0      	adds	r7, #240	; 0xf0
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40004800 	.word	0x40004800
 8001a64:	58024400 	.word	0x58024400
 8001a68:	58020c00 	.word	0x58020c00
 8001a6c:	2000010c 	.word	0x2000010c
 8001a70:	40020010 	.word	0x40020010
 8001a74:	20000214 	.word	0x20000214
 8001a78:	40020028 	.word	0x40020028

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler+0x4>

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac8:	f000 f99c 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <DMA1_Stream0_IRQHandler+0x10>)
 8001ad6:	f001 fb8f 	bl	80031f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000010c 	.word	0x2000010c

08001ae4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <DMA1_Stream1_IRQHandler+0x10>)
 8001aea:	f001 fb85 	bl	80031f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000214 	.word	0x20000214

08001af8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001afc:	2040      	movs	r0, #64	; 0x40
 8001afe:	f002 feaa 	bl	8004856 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b02:	2080      	movs	r0, #128	; 0x80
 8001b04:	f002 fea7 	bl	8004856 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <TIM2_IRQHandler+0x10>)
 8001b12:	f005 fec8 	bl	80078a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200003a4 	.word	0x200003a4

08001b20 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <SPI1_IRQHandler+0x10>)
 8001b26:	f005 faeb 	bl	8007100 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000031c 	.word	0x2000031c

08001b34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <USART3_IRQHandler+0x10>)
 8001b3a:	f006 fb1d 	bl	8008178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000184 	.word	0x20000184

08001b48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001b4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b50:	f002 fe81 	bl	8004856 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001b54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b58:	f002 fe7d 	bl	8004856 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b5c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b60:	f002 fe79 	bl	8004856 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b68:	f002 fe75 	bl	8004856 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001b6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b70:	f002 fe71 	bl	8004856 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <UART4_IRQHandler+0x10>)
 8001b7e:	f006 fafb 	bl	8008178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000028c 	.word	0x2000028c

08001b8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <DMA2_Stream0_IRQHandler+0x10>)
 8001b92:	f001 fb31 	bl	80031f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000094 	.word	0x20000094

08001ba0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <DMA2_Stream1_IRQHandler+0x10>)
 8001ba6:	f001 fb27 	bl	80031f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200003f0 	.word	0x200003f0

08001bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bb8:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <SystemInit+0xec>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbe:	4a38      	ldr	r2, [pc, #224]	; (8001ca0 <SystemInit+0xec>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bc8:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <SystemInit+0xf0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	2b06      	cmp	r3, #6
 8001bd2:	d807      	bhi.n	8001be4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bd4:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <SystemInit+0xf0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 030f 	bic.w	r3, r3, #15
 8001bdc:	4a31      	ldr	r2, [pc, #196]	; (8001ca4 <SystemInit+0xf0>)
 8001bde:	f043 0307 	orr.w	r3, r3, #7
 8001be2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001be4:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <SystemInit+0xf4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2f      	ldr	r2, [pc, #188]	; (8001ca8 <SystemInit+0xf4>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bf0:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <SystemInit+0xf4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <SystemInit+0xf4>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	492b      	ldr	r1, [pc, #172]	; (8001ca8 <SystemInit+0xf4>)
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <SystemInit+0xf8>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c02:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <SystemInit+0xf0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c0e:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <SystemInit+0xf0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 030f 	bic.w	r3, r3, #15
 8001c16:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <SystemInit+0xf0>)
 8001c18:	f043 0307 	orr.w	r3, r3, #7
 8001c1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <SystemInit+0xf4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c24:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <SystemInit+0xf4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <SystemInit+0xf4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <SystemInit+0xf4>)
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <SystemInit+0xfc>)
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <SystemInit+0xf4>)
 8001c38:	4a1e      	ldr	r2, [pc, #120]	; (8001cb4 <SystemInit+0x100>)
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <SystemInit+0xf4>)
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <SystemInit+0x104>)
 8001c40:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <SystemInit+0xf4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <SystemInit+0xf4>)
 8001c4a:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <SystemInit+0x104>)
 8001c4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <SystemInit+0xf4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <SystemInit+0xf4>)
 8001c56:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <SystemInit+0x104>)
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <SystemInit+0xf4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <SystemInit+0xf4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <SystemInit+0xf4>)
 8001c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <SystemInit+0xf4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <SystemInit+0x108>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <SystemInit+0x10c>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c7e:	d202      	bcs.n	8001c86 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <SystemInit+0x110>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <SystemInit+0x114>)
 8001c88:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c8c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SystemInit+0xec>)
 8001c90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c94:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00
 8001ca4:	52002000 	.word	0x52002000
 8001ca8:	58024400 	.word	0x58024400
 8001cac:	eaf6ed7f 	.word	0xeaf6ed7f
 8001cb0:	02020200 	.word	0x02020200
 8001cb4:	01ff0000 	.word	0x01ff0000
 8001cb8:	01010280 	.word	0x01010280
 8001cbc:	5c001000 	.word	0x5c001000
 8001cc0:	ffff0000 	.word	0xffff0000
 8001cc4:	51008108 	.word	0x51008108
 8001cc8:	52004000 	.word	0x52004000

08001ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cd0:	f7ff ff70 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd6:	490d      	ldr	r1, [pc, #52]	; (8001d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cec:	4c0a      	ldr	r4, [pc, #40]	; (8001d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f007 fdfd 	bl	80098f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfe:	f7ff f88f 	bl	8000e20 <main>
  bx  lr
 8001d02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d10:	080099b8 	.word	0x080099b8
  ldr r2, =_sbss
 8001d14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d18:	2000046c 	.word	0x2000046c

08001d1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC3_IRQHandler>
	...

08001d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d26:	2003      	movs	r0, #3
 8001d28:	f000 f968 	bl	8001ffc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d2c:	f003 fbae 	bl	800548c <HAL_RCC_GetSysClockFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_Init+0x68>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	4913      	ldr	r1, [pc, #76]	; (8001d8c <HAL_Init+0x6c>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
 8001d48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_Init+0x68>)
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_Init+0x6c>)
 8001d54:	5cd3      	ldrb	r3, [r2, r3]
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <HAL_Init+0x70>)
 8001d62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d64:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <HAL_Init+0x74>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 f814 	bl	8001d98 <HAL_InitTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e002      	b.n	8001d80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7a:	f7ff fbf9 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	58024400 	.word	0x58024400
 8001d8c:	08009968 	.word	0x08009968
 8001d90:	20000004 	.word	0x20000004
 8001d94:	20000000 	.word	0x20000000

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001da0:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_InitTick+0x60>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e021      	b.n	8001df0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_InitTick+0x64>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_InitTick+0x60>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f94d 	bl	8002062 <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00e      	b.n	8001df0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d80a      	bhi.n	8001dee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f000 f917 	bl	8002012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <HAL_InitTick+0x68>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	2000000c 	.word	0x2000000c
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000008 	.word	0x20000008

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	2000000c 	.word	0x2000000c
 8001e28:	20000468 	.word	0x20000468

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000468 	.word	0x20000468

08001e44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_GetREVID+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	5c001000 	.word	0x5c001000

08001e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <__NVIC_SetPriorityGrouping+0x40>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <__NVIC_SetPriorityGrouping+0x40>)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	60d3      	str	r3, [r2, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00
 8001ea0:	05fa0000 	.word	0x05fa0000

08001ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <__NVIC_GetPriorityGrouping+0x18>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	f003 0307 	and.w	r3, r3, #7
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	db0b      	blt.n	8001eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	f003 021f 	and.w	r2, r3, #31
 8001ed8:	4907      	ldr	r1, [pc, #28]	; (8001ef8 <__NVIC_EnableIRQ+0x38>)
 8001eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000e100 	.word	0xe000e100

08001efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db0a      	blt.n	8001f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	490c      	ldr	r1, [pc, #48]	; (8001f48 <__NVIC_SetPriority+0x4c>)
 8001f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f24:	e00a      	b.n	8001f3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4908      	ldr	r1, [pc, #32]	; (8001f4c <__NVIC_SetPriority+0x50>)
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	3b04      	subs	r3, #4
 8001f34:	0112      	lsls	r2, r2, #4
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	440b      	add	r3, r1
 8001f3a:	761a      	strb	r2, [r3, #24]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000e100 	.word	0xe000e100
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f1c3 0307 	rsb	r3, r3, #7
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	bf28      	it	cs
 8001f6e:	2304      	movcs	r3, #4
 8001f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3304      	adds	r3, #4
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d902      	bls.n	8001f80 <NVIC_EncodePriority+0x30>
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3b03      	subs	r3, #3
 8001f7e:	e000      	b.n	8001f82 <NVIC_EncodePriority+0x32>
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	401a      	ands	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	4313      	orrs	r3, r2
         );
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3724      	adds	r7, #36	; 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc8:	d301      	bcc.n	8001fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00f      	b.n	8001fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <SysTick_Config+0x40>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f7ff ff8e 	bl	8001efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <SysTick_Config+0x40>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <SysTick_Config+0x40>)
 8001fe8:	2207      	movs	r2, #7
 8001fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	e000e010 	.word	0xe000e010

08001ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff29 	bl	8001e5c <__NVIC_SetPriorityGrouping>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002020:	f7ff ff40 	bl	8001ea4 <__NVIC_GetPriorityGrouping>
 8002024:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f7ff ff90 	bl	8001f50 <NVIC_EncodePriority>
 8002030:	4602      	mov	r2, r0
 8002032:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff5f 	bl	8001efc <__NVIC_SetPriority>
}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff33 	bl	8001ec0 <__NVIC_EnableIRQ>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffa4 	bl	8001fb8 <SysTick_Config>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff fed2 	bl	8001e2c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e316      	b.n	80026c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a66      	ldr	r2, [pc, #408]	; (8002234 <HAL_DMA_Init+0x1b8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d04a      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a65      	ldr	r2, [pc, #404]	; (8002238 <HAL_DMA_Init+0x1bc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d045      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a63      	ldr	r2, [pc, #396]	; (800223c <HAL_DMA_Init+0x1c0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d040      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a62      	ldr	r2, [pc, #392]	; (8002240 <HAL_DMA_Init+0x1c4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d03b      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a60      	ldr	r2, [pc, #384]	; (8002244 <HAL_DMA_Init+0x1c8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d036      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a5f      	ldr	r2, [pc, #380]	; (8002248 <HAL_DMA_Init+0x1cc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d031      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a5d      	ldr	r2, [pc, #372]	; (800224c <HAL_DMA_Init+0x1d0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d02c      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a5c      	ldr	r2, [pc, #368]	; (8002250 <HAL_DMA_Init+0x1d4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d027      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a5a      	ldr	r2, [pc, #360]	; (8002254 <HAL_DMA_Init+0x1d8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d022      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a59      	ldr	r2, [pc, #356]	; (8002258 <HAL_DMA_Init+0x1dc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d01d      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a57      	ldr	r2, [pc, #348]	; (800225c <HAL_DMA_Init+0x1e0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d018      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a56      	ldr	r2, [pc, #344]	; (8002260 <HAL_DMA_Init+0x1e4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d013      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a54      	ldr	r2, [pc, #336]	; (8002264 <HAL_DMA_Init+0x1e8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00e      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a53      	ldr	r2, [pc, #332]	; (8002268 <HAL_DMA_Init+0x1ec>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d009      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a51      	ldr	r2, [pc, #324]	; (800226c <HAL_DMA_Init+0x1f0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d004      	beq.n	8002134 <HAL_DMA_Init+0xb8>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a50      	ldr	r2, [pc, #320]	; (8002270 <HAL_DMA_Init+0x1f4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_DMA_Init+0xbc>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_DMA_Init+0xbe>
 8002138:	2300      	movs	r3, #0
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 813b 	beq.w	80023b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a37      	ldr	r2, [pc, #220]	; (8002234 <HAL_DMA_Init+0x1b8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d04a      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a36      	ldr	r2, [pc, #216]	; (8002238 <HAL_DMA_Init+0x1bc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d045      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a34      	ldr	r2, [pc, #208]	; (800223c <HAL_DMA_Init+0x1c0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d040      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a33      	ldr	r2, [pc, #204]	; (8002240 <HAL_DMA_Init+0x1c4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d03b      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a31      	ldr	r2, [pc, #196]	; (8002244 <HAL_DMA_Init+0x1c8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d036      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a30      	ldr	r2, [pc, #192]	; (8002248 <HAL_DMA_Init+0x1cc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d031      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2e      	ldr	r2, [pc, #184]	; (800224c <HAL_DMA_Init+0x1d0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d02c      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2d      	ldr	r2, [pc, #180]	; (8002250 <HAL_DMA_Init+0x1d4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d027      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2b      	ldr	r2, [pc, #172]	; (8002254 <HAL_DMA_Init+0x1d8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d022      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a2a      	ldr	r2, [pc, #168]	; (8002258 <HAL_DMA_Init+0x1dc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d01d      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a28      	ldr	r2, [pc, #160]	; (800225c <HAL_DMA_Init+0x1e0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d018      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a27      	ldr	r2, [pc, #156]	; (8002260 <HAL_DMA_Init+0x1e4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d013      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a25      	ldr	r2, [pc, #148]	; (8002264 <HAL_DMA_Init+0x1e8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00e      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a24      	ldr	r2, [pc, #144]	; (8002268 <HAL_DMA_Init+0x1ec>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d009      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a22      	ldr	r2, [pc, #136]	; (800226c <HAL_DMA_Init+0x1f0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d004      	beq.n	80021f0 <HAL_DMA_Init+0x174>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a21      	ldr	r2, [pc, #132]	; (8002270 <HAL_DMA_Init+0x1f4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d108      	bne.n	8002202 <HAL_DMA_Init+0x186>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e007      	b.n	8002212 <HAL_DMA_Init+0x196>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002212:	e02f      	b.n	8002274 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002214:	f7ff fe0a 	bl	8001e2c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b05      	cmp	r3, #5
 8002220:	d928      	bls.n	8002274 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2220      	movs	r2, #32
 8002226:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2203      	movs	r2, #3
 800222c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e246      	b.n	80026c2 <HAL_DMA_Init+0x646>
 8002234:	40020010 	.word	0x40020010
 8002238:	40020028 	.word	0x40020028
 800223c:	40020040 	.word	0x40020040
 8002240:	40020058 	.word	0x40020058
 8002244:	40020070 	.word	0x40020070
 8002248:	40020088 	.word	0x40020088
 800224c:	400200a0 	.word	0x400200a0
 8002250:	400200b8 	.word	0x400200b8
 8002254:	40020410 	.word	0x40020410
 8002258:	40020428 	.word	0x40020428
 800225c:	40020440 	.word	0x40020440
 8002260:	40020458 	.word	0x40020458
 8002264:	40020470 	.word	0x40020470
 8002268:	40020488 	.word	0x40020488
 800226c:	400204a0 	.word	0x400204a0
 8002270:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1c8      	bne.n	8002214 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4b83      	ldr	r3, [pc, #524]	; (800249c <HAL_DMA_Init+0x420>)
 800228e:	4013      	ands	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800229a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d107      	bne.n	80022d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	4313      	orrs	r3, r2
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80022d8:	4b71      	ldr	r3, [pc, #452]	; (80024a0 <HAL_DMA_Init+0x424>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b71      	ldr	r3, [pc, #452]	; (80024a4 <HAL_DMA_Init+0x428>)
 80022de:	4013      	ands	r3, r2
 80022e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022e4:	d328      	bcc.n	8002338 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b28      	cmp	r3, #40	; 0x28
 80022ec:	d903      	bls.n	80022f6 <HAL_DMA_Init+0x27a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b2e      	cmp	r3, #46	; 0x2e
 80022f4:	d917      	bls.n	8002326 <HAL_DMA_Init+0x2aa>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b3e      	cmp	r3, #62	; 0x3e
 80022fc:	d903      	bls.n	8002306 <HAL_DMA_Init+0x28a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b42      	cmp	r3, #66	; 0x42
 8002304:	d90f      	bls.n	8002326 <HAL_DMA_Init+0x2aa>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b46      	cmp	r3, #70	; 0x46
 800230c:	d903      	bls.n	8002316 <HAL_DMA_Init+0x29a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b48      	cmp	r3, #72	; 0x48
 8002314:	d907      	bls.n	8002326 <HAL_DMA_Init+0x2aa>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b4e      	cmp	r3, #78	; 0x4e
 800231c:	d905      	bls.n	800232a <HAL_DMA_Init+0x2ae>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b52      	cmp	r3, #82	; 0x52
 8002324:	d801      	bhi.n	800232a <HAL_DMA_Init+0x2ae>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_DMA_Init+0x2b0>
 800232a:	2300      	movs	r3, #0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002336:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f023 0307 	bic.w	r3, r3, #7
 800234e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	4313      	orrs	r3, r2
 8002358:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	2b04      	cmp	r3, #4
 8002360:	d117      	bne.n	8002392 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00e      	beq.n	8002392 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f001 ff1b 	bl	80041b0 <DMA_CheckFifoParam>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2240      	movs	r2, #64	; 0x40
 8002384:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e197      	b.n	80026c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f001 fe56 	bl	800404c <DMA_CalcBaseAndBitshift>
 80023a0:	4603      	mov	r3, r0
 80023a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	223f      	movs	r2, #63	; 0x3f
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	e0cd      	b.n	8002552 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a3b      	ldr	r2, [pc, #236]	; (80024a8 <HAL_DMA_Init+0x42c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d022      	beq.n	8002406 <HAL_DMA_Init+0x38a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a39      	ldr	r2, [pc, #228]	; (80024ac <HAL_DMA_Init+0x430>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01d      	beq.n	8002406 <HAL_DMA_Init+0x38a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a38      	ldr	r2, [pc, #224]	; (80024b0 <HAL_DMA_Init+0x434>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d018      	beq.n	8002406 <HAL_DMA_Init+0x38a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a36      	ldr	r2, [pc, #216]	; (80024b4 <HAL_DMA_Init+0x438>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_DMA_Init+0x38a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a35      	ldr	r2, [pc, #212]	; (80024b8 <HAL_DMA_Init+0x43c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00e      	beq.n	8002406 <HAL_DMA_Init+0x38a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a33      	ldr	r2, [pc, #204]	; (80024bc <HAL_DMA_Init+0x440>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d009      	beq.n	8002406 <HAL_DMA_Init+0x38a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a32      	ldr	r2, [pc, #200]	; (80024c0 <HAL_DMA_Init+0x444>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d004      	beq.n	8002406 <HAL_DMA_Init+0x38a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a30      	ldr	r2, [pc, #192]	; (80024c4 <HAL_DMA_Init+0x448>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_DMA_Init+0x38e>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_DMA_Init+0x390>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8097 	beq.w	8002540 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <HAL_DMA_Init+0x42c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d021      	beq.n	8002460 <HAL_DMA_Init+0x3e4>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a22      	ldr	r2, [pc, #136]	; (80024ac <HAL_DMA_Init+0x430>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d01c      	beq.n	8002460 <HAL_DMA_Init+0x3e4>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a21      	ldr	r2, [pc, #132]	; (80024b0 <HAL_DMA_Init+0x434>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d017      	beq.n	8002460 <HAL_DMA_Init+0x3e4>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1f      	ldr	r2, [pc, #124]	; (80024b4 <HAL_DMA_Init+0x438>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d012      	beq.n	8002460 <HAL_DMA_Init+0x3e4>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <HAL_DMA_Init+0x43c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00d      	beq.n	8002460 <HAL_DMA_Init+0x3e4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <HAL_DMA_Init+0x440>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d008      	beq.n	8002460 <HAL_DMA_Init+0x3e4>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <HAL_DMA_Init+0x444>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d003      	beq.n	8002460 <HAL_DMA_Init+0x3e4>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <HAL_DMA_Init+0x448>)
 800245e:	4293      	cmp	r3, r2
 8002460:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2202      	movs	r2, #2
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_DMA_Init+0x44c>)
 800247e:	4013      	ands	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b40      	cmp	r3, #64	; 0x40
 8002488:	d020      	beq.n	80024cc <HAL_DMA_Init+0x450>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b80      	cmp	r3, #128	; 0x80
 8002490:	d102      	bne.n	8002498 <HAL_DMA_Init+0x41c>
 8002492:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002496:	e01a      	b.n	80024ce <HAL_DMA_Init+0x452>
 8002498:	2300      	movs	r3, #0
 800249a:	e018      	b.n	80024ce <HAL_DMA_Init+0x452>
 800249c:	fe10803f 	.word	0xfe10803f
 80024a0:	5c001000 	.word	0x5c001000
 80024a4:	ffff0000 	.word	0xffff0000
 80024a8:	58025408 	.word	0x58025408
 80024ac:	5802541c 	.word	0x5802541c
 80024b0:	58025430 	.word	0x58025430
 80024b4:	58025444 	.word	0x58025444
 80024b8:	58025458 	.word	0x58025458
 80024bc:	5802546c 	.word	0x5802546c
 80024c0:	58025480 	.word	0x58025480
 80024c4:	58025494 	.word	0x58025494
 80024c8:	fffe000f 	.word	0xfffe000f
 80024cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68d2      	ldr	r2, [r2, #12]
 80024d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4b6e      	ldr	r3, [pc, #440]	; (80026cc <HAL_DMA_Init+0x650>)
 8002514:	4413      	add	r3, r2
 8002516:	4a6e      	ldr	r2, [pc, #440]	; (80026d0 <HAL_DMA_Init+0x654>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	009a      	lsls	r2, r3, #2
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f001 fd91 	bl	800404c <DMA_CalcBaseAndBitshift>
 800252a:	4603      	mov	r3, r0
 800252c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2201      	movs	r2, #1
 8002538:	409a      	lsls	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	e008      	b.n	8002552 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2240      	movs	r2, #64	; 0x40
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2203      	movs	r2, #3
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0b7      	b.n	80026c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a5f      	ldr	r2, [pc, #380]	; (80026d4 <HAL_DMA_Init+0x658>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d072      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a5d      	ldr	r2, [pc, #372]	; (80026d8 <HAL_DMA_Init+0x65c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d06d      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a5c      	ldr	r2, [pc, #368]	; (80026dc <HAL_DMA_Init+0x660>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d068      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a5a      	ldr	r2, [pc, #360]	; (80026e0 <HAL_DMA_Init+0x664>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d063      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a59      	ldr	r2, [pc, #356]	; (80026e4 <HAL_DMA_Init+0x668>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d05e      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a57      	ldr	r2, [pc, #348]	; (80026e8 <HAL_DMA_Init+0x66c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d059      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a56      	ldr	r2, [pc, #344]	; (80026ec <HAL_DMA_Init+0x670>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d054      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a54      	ldr	r2, [pc, #336]	; (80026f0 <HAL_DMA_Init+0x674>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d04f      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a53      	ldr	r2, [pc, #332]	; (80026f4 <HAL_DMA_Init+0x678>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d04a      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a51      	ldr	r2, [pc, #324]	; (80026f8 <HAL_DMA_Init+0x67c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d045      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a50      	ldr	r2, [pc, #320]	; (80026fc <HAL_DMA_Init+0x680>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d040      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a4e      	ldr	r2, [pc, #312]	; (8002700 <HAL_DMA_Init+0x684>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d03b      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a4d      	ldr	r2, [pc, #308]	; (8002704 <HAL_DMA_Init+0x688>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d036      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a4b      	ldr	r2, [pc, #300]	; (8002708 <HAL_DMA_Init+0x68c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d031      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a4a      	ldr	r2, [pc, #296]	; (800270c <HAL_DMA_Init+0x690>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d02c      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a48      	ldr	r2, [pc, #288]	; (8002710 <HAL_DMA_Init+0x694>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d027      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a47      	ldr	r2, [pc, #284]	; (8002714 <HAL_DMA_Init+0x698>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d022      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a45      	ldr	r2, [pc, #276]	; (8002718 <HAL_DMA_Init+0x69c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01d      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a44      	ldr	r2, [pc, #272]	; (800271c <HAL_DMA_Init+0x6a0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d018      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a42      	ldr	r2, [pc, #264]	; (8002720 <HAL_DMA_Init+0x6a4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a41      	ldr	r2, [pc, #260]	; (8002724 <HAL_DMA_Init+0x6a8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00e      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a3f      	ldr	r2, [pc, #252]	; (8002728 <HAL_DMA_Init+0x6ac>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d009      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a3e      	ldr	r2, [pc, #248]	; (800272c <HAL_DMA_Init+0x6b0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d004      	beq.n	8002642 <HAL_DMA_Init+0x5c6>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a3c      	ldr	r2, [pc, #240]	; (8002730 <HAL_DMA_Init+0x6b4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <HAL_DMA_Init+0x5ca>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_DMA_Init+0x5cc>
 8002646:	2300      	movs	r3, #0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d032      	beq.n	80026b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f001 fe2b 	bl	80042a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b80      	cmp	r3, #128	; 0x80
 8002658:	d102      	bne.n	8002660 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002674:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d010      	beq.n	80026a0 <HAL_DMA_Init+0x624>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b08      	cmp	r3, #8
 8002684:	d80c      	bhi.n	80026a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f001 fea8 	bl	80043dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	e008      	b.n	80026b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	a7fdabf8 	.word	0xa7fdabf8
 80026d0:	cccccccd 	.word	0xcccccccd
 80026d4:	40020010 	.word	0x40020010
 80026d8:	40020028 	.word	0x40020028
 80026dc:	40020040 	.word	0x40020040
 80026e0:	40020058 	.word	0x40020058
 80026e4:	40020070 	.word	0x40020070
 80026e8:	40020088 	.word	0x40020088
 80026ec:	400200a0 	.word	0x400200a0
 80026f0:	400200b8 	.word	0x400200b8
 80026f4:	40020410 	.word	0x40020410
 80026f8:	40020428 	.word	0x40020428
 80026fc:	40020440 	.word	0x40020440
 8002700:	40020458 	.word	0x40020458
 8002704:	40020470 	.word	0x40020470
 8002708:	40020488 	.word	0x40020488
 800270c:	400204a0 	.word	0x400204a0
 8002710:	400204b8 	.word	0x400204b8
 8002714:	58025408 	.word	0x58025408
 8002718:	5802541c 	.word	0x5802541c
 800271c:	58025430 	.word	0x58025430
 8002720:	58025444 	.word	0x58025444
 8002724:	58025458 	.word	0x58025458
 8002728:	5802546c 	.word	0x5802546c
 800272c:	58025480 	.word	0x58025480
 8002730:	58025494 	.word	0x58025494

08002734 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff fb76 	bl	8001e2c <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e2dc      	b.n	8002d06 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d008      	beq.n	800276a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e2cd      	b.n	8002d06 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a76      	ldr	r2, [pc, #472]	; (8002948 <HAL_DMA_Abort+0x214>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d04a      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a74      	ldr	r2, [pc, #464]	; (800294c <HAL_DMA_Abort+0x218>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d045      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a73      	ldr	r2, [pc, #460]	; (8002950 <HAL_DMA_Abort+0x21c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d040      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a71      	ldr	r2, [pc, #452]	; (8002954 <HAL_DMA_Abort+0x220>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d03b      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a70      	ldr	r2, [pc, #448]	; (8002958 <HAL_DMA_Abort+0x224>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d036      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6e      	ldr	r2, [pc, #440]	; (800295c <HAL_DMA_Abort+0x228>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d031      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6d      	ldr	r2, [pc, #436]	; (8002960 <HAL_DMA_Abort+0x22c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d02c      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a6b      	ldr	r2, [pc, #428]	; (8002964 <HAL_DMA_Abort+0x230>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d027      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6a      	ldr	r2, [pc, #424]	; (8002968 <HAL_DMA_Abort+0x234>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d022      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a68      	ldr	r2, [pc, #416]	; (800296c <HAL_DMA_Abort+0x238>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01d      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a67      	ldr	r2, [pc, #412]	; (8002970 <HAL_DMA_Abort+0x23c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d018      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a65      	ldr	r2, [pc, #404]	; (8002974 <HAL_DMA_Abort+0x240>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a64      	ldr	r2, [pc, #400]	; (8002978 <HAL_DMA_Abort+0x244>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00e      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a62      	ldr	r2, [pc, #392]	; (800297c <HAL_DMA_Abort+0x248>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d009      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a61      	ldr	r2, [pc, #388]	; (8002980 <HAL_DMA_Abort+0x24c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a5f      	ldr	r2, [pc, #380]	; (8002984 <HAL_DMA_Abort+0x250>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_DMA_Abort+0xda>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_DMA_Abort+0xdc>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 021e 	bic.w	r2, r2, #30
 8002822:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002832:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e00a      	b.n	8002852 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 020e 	bic.w	r2, r2, #14
 800284a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a3c      	ldr	r2, [pc, #240]	; (8002948 <HAL_DMA_Abort+0x214>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d072      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a3a      	ldr	r2, [pc, #232]	; (800294c <HAL_DMA_Abort+0x218>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d06d      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a39      	ldr	r2, [pc, #228]	; (8002950 <HAL_DMA_Abort+0x21c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d068      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a37      	ldr	r2, [pc, #220]	; (8002954 <HAL_DMA_Abort+0x220>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d063      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a36      	ldr	r2, [pc, #216]	; (8002958 <HAL_DMA_Abort+0x224>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d05e      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a34      	ldr	r2, [pc, #208]	; (800295c <HAL_DMA_Abort+0x228>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d059      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a33      	ldr	r2, [pc, #204]	; (8002960 <HAL_DMA_Abort+0x22c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d054      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a31      	ldr	r2, [pc, #196]	; (8002964 <HAL_DMA_Abort+0x230>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d04f      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a30      	ldr	r2, [pc, #192]	; (8002968 <HAL_DMA_Abort+0x234>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d04a      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2e      	ldr	r2, [pc, #184]	; (800296c <HAL_DMA_Abort+0x238>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d045      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2d      	ldr	r2, [pc, #180]	; (8002970 <HAL_DMA_Abort+0x23c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d040      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2b      	ldr	r2, [pc, #172]	; (8002974 <HAL_DMA_Abort+0x240>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d03b      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2a      	ldr	r2, [pc, #168]	; (8002978 <HAL_DMA_Abort+0x244>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d036      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a28      	ldr	r2, [pc, #160]	; (800297c <HAL_DMA_Abort+0x248>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d031      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a27      	ldr	r2, [pc, #156]	; (8002980 <HAL_DMA_Abort+0x24c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d02c      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a25      	ldr	r2, [pc, #148]	; (8002984 <HAL_DMA_Abort+0x250>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d027      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a24      	ldr	r2, [pc, #144]	; (8002988 <HAL_DMA_Abort+0x254>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d022      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a22      	ldr	r2, [pc, #136]	; (800298c <HAL_DMA_Abort+0x258>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01d      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a21      	ldr	r2, [pc, #132]	; (8002990 <HAL_DMA_Abort+0x25c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d018      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_DMA_Abort+0x260>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <HAL_DMA_Abort+0x264>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00e      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1c      	ldr	r2, [pc, #112]	; (800299c <HAL_DMA_Abort+0x268>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d009      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <HAL_DMA_Abort+0x26c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d004      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <HAL_DMA_Abort+0x270>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d132      	bne.n	80029a8 <HAL_DMA_Abort+0x274>
 8002942:	2301      	movs	r3, #1
 8002944:	e031      	b.n	80029aa <HAL_DMA_Abort+0x276>
 8002946:	bf00      	nop
 8002948:	40020010 	.word	0x40020010
 800294c:	40020028 	.word	0x40020028
 8002950:	40020040 	.word	0x40020040
 8002954:	40020058 	.word	0x40020058
 8002958:	40020070 	.word	0x40020070
 800295c:	40020088 	.word	0x40020088
 8002960:	400200a0 	.word	0x400200a0
 8002964:	400200b8 	.word	0x400200b8
 8002968:	40020410 	.word	0x40020410
 800296c:	40020428 	.word	0x40020428
 8002970:	40020440 	.word	0x40020440
 8002974:	40020458 	.word	0x40020458
 8002978:	40020470 	.word	0x40020470
 800297c:	40020488 	.word	0x40020488
 8002980:	400204a0 	.word	0x400204a0
 8002984:	400204b8 	.word	0x400204b8
 8002988:	58025408 	.word	0x58025408
 800298c:	5802541c 	.word	0x5802541c
 8002990:	58025430 	.word	0x58025430
 8002994:	58025444 	.word	0x58025444
 8002998:	58025458 	.word	0x58025458
 800299c:	5802546c 	.word	0x5802546c
 80029a0:	58025480 	.word	0x58025480
 80029a4:	58025494 	.word	0x58025494
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6d      	ldr	r2, [pc, #436]	; (8002b78 <HAL_DMA_Abort+0x444>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d04a      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a6b      	ldr	r2, [pc, #428]	; (8002b7c <HAL_DMA_Abort+0x448>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d045      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a6a      	ldr	r2, [pc, #424]	; (8002b80 <HAL_DMA_Abort+0x44c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d040      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a68      	ldr	r2, [pc, #416]	; (8002b84 <HAL_DMA_Abort+0x450>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d03b      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a67      	ldr	r2, [pc, #412]	; (8002b88 <HAL_DMA_Abort+0x454>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d036      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a65      	ldr	r2, [pc, #404]	; (8002b8c <HAL_DMA_Abort+0x458>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d031      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a64      	ldr	r2, [pc, #400]	; (8002b90 <HAL_DMA_Abort+0x45c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d02c      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a62      	ldr	r2, [pc, #392]	; (8002b94 <HAL_DMA_Abort+0x460>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d027      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a61      	ldr	r2, [pc, #388]	; (8002b98 <HAL_DMA_Abort+0x464>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a5f      	ldr	r2, [pc, #380]	; (8002b9c <HAL_DMA_Abort+0x468>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01d      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a5e      	ldr	r2, [pc, #376]	; (8002ba0 <HAL_DMA_Abort+0x46c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d018      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a5c      	ldr	r2, [pc, #368]	; (8002ba4 <HAL_DMA_Abort+0x470>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a5b      	ldr	r2, [pc, #364]	; (8002ba8 <HAL_DMA_Abort+0x474>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a59      	ldr	r2, [pc, #356]	; (8002bac <HAL_DMA_Abort+0x478>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a58      	ldr	r2, [pc, #352]	; (8002bb0 <HAL_DMA_Abort+0x47c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a56      	ldr	r2, [pc, #344]	; (8002bb4 <HAL_DMA_Abort+0x480>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d108      	bne.n	8002a70 <HAL_DMA_Abort+0x33c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e007      	b.n	8002a80 <HAL_DMA_Abort+0x34c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a80:	e013      	b.n	8002aaa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a82:	f7ff f9d3 	bl	8001e2c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d90c      	bls.n	8002aaa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e12d      	b.n	8002d06 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1e5      	bne.n	8002a82 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a2f      	ldr	r2, [pc, #188]	; (8002b78 <HAL_DMA_Abort+0x444>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d04a      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a2d      	ldr	r2, [pc, #180]	; (8002b7c <HAL_DMA_Abort+0x448>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d045      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2c      	ldr	r2, [pc, #176]	; (8002b80 <HAL_DMA_Abort+0x44c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d040      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2a      	ldr	r2, [pc, #168]	; (8002b84 <HAL_DMA_Abort+0x450>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d03b      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <HAL_DMA_Abort+0x454>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d036      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a27      	ldr	r2, [pc, #156]	; (8002b8c <HAL_DMA_Abort+0x458>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d031      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HAL_DMA_Abort+0x45c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d02c      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a24      	ldr	r2, [pc, #144]	; (8002b94 <HAL_DMA_Abort+0x460>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d027      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <HAL_DMA_Abort+0x464>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d022      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a21      	ldr	r2, [pc, #132]	; (8002b9c <HAL_DMA_Abort+0x468>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01d      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a20      	ldr	r2, [pc, #128]	; (8002ba0 <HAL_DMA_Abort+0x46c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d018      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <HAL_DMA_Abort+0x470>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <HAL_DMA_Abort+0x474>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00e      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_DMA_Abort+0x478>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <HAL_DMA_Abort+0x47c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <HAL_DMA_Abort+0x480>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_DMA_Abort+0x426>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_DMA_Abort+0x428>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d02b      	beq.n	8002bb8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	223f      	movs	r2, #63	; 0x3f
 8002b70:	409a      	lsls	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	e02a      	b.n	8002bce <HAL_DMA_Abort+0x49a>
 8002b78:	40020010 	.word	0x40020010
 8002b7c:	40020028 	.word	0x40020028
 8002b80:	40020040 	.word	0x40020040
 8002b84:	40020058 	.word	0x40020058
 8002b88:	40020070 	.word	0x40020070
 8002b8c:	40020088 	.word	0x40020088
 8002b90:	400200a0 	.word	0x400200a0
 8002b94:	400200b8 	.word	0x400200b8
 8002b98:	40020410 	.word	0x40020410
 8002b9c:	40020428 	.word	0x40020428
 8002ba0:	40020440 	.word	0x40020440
 8002ba4:	40020458 	.word	0x40020458
 8002ba8:	40020470 	.word	0x40020470
 8002bac:	40020488 	.word	0x40020488
 8002bb0:	400204a0 	.word	0x400204a0
 8002bb4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a4f      	ldr	r2, [pc, #316]	; (8002d10 <HAL_DMA_Abort+0x5dc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d072      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a4d      	ldr	r2, [pc, #308]	; (8002d14 <HAL_DMA_Abort+0x5e0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d06d      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a4c      	ldr	r2, [pc, #304]	; (8002d18 <HAL_DMA_Abort+0x5e4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d068      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a4a      	ldr	r2, [pc, #296]	; (8002d1c <HAL_DMA_Abort+0x5e8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d063      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a49      	ldr	r2, [pc, #292]	; (8002d20 <HAL_DMA_Abort+0x5ec>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d05e      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a47      	ldr	r2, [pc, #284]	; (8002d24 <HAL_DMA_Abort+0x5f0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d059      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a46      	ldr	r2, [pc, #280]	; (8002d28 <HAL_DMA_Abort+0x5f4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d054      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a44      	ldr	r2, [pc, #272]	; (8002d2c <HAL_DMA_Abort+0x5f8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d04f      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a43      	ldr	r2, [pc, #268]	; (8002d30 <HAL_DMA_Abort+0x5fc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d04a      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a41      	ldr	r2, [pc, #260]	; (8002d34 <HAL_DMA_Abort+0x600>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d045      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <HAL_DMA_Abort+0x604>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d040      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a3e      	ldr	r2, [pc, #248]	; (8002d3c <HAL_DMA_Abort+0x608>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d03b      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a3d      	ldr	r2, [pc, #244]	; (8002d40 <HAL_DMA_Abort+0x60c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d036      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a3b      	ldr	r2, [pc, #236]	; (8002d44 <HAL_DMA_Abort+0x610>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d031      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a3a      	ldr	r2, [pc, #232]	; (8002d48 <HAL_DMA_Abort+0x614>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d02c      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a38      	ldr	r2, [pc, #224]	; (8002d4c <HAL_DMA_Abort+0x618>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d027      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a37      	ldr	r2, [pc, #220]	; (8002d50 <HAL_DMA_Abort+0x61c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a35      	ldr	r2, [pc, #212]	; (8002d54 <HAL_DMA_Abort+0x620>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a34      	ldr	r2, [pc, #208]	; (8002d58 <HAL_DMA_Abort+0x624>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d018      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a32      	ldr	r2, [pc, #200]	; (8002d5c <HAL_DMA_Abort+0x628>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a31      	ldr	r2, [pc, #196]	; (8002d60 <HAL_DMA_Abort+0x62c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2f      	ldr	r2, [pc, #188]	; (8002d64 <HAL_DMA_Abort+0x630>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a2e      	ldr	r2, [pc, #184]	; (8002d68 <HAL_DMA_Abort+0x634>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a2c      	ldr	r2, [pc, #176]	; (8002d6c <HAL_DMA_Abort+0x638>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA_Abort+0x58e>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_Abort+0x590>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d015      	beq.n	8002cf4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002cd0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00c      	beq.n	8002cf4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002cf2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40020010 	.word	0x40020010
 8002d14:	40020028 	.word	0x40020028
 8002d18:	40020040 	.word	0x40020040
 8002d1c:	40020058 	.word	0x40020058
 8002d20:	40020070 	.word	0x40020070
 8002d24:	40020088 	.word	0x40020088
 8002d28:	400200a0 	.word	0x400200a0
 8002d2c:	400200b8 	.word	0x400200b8
 8002d30:	40020410 	.word	0x40020410
 8002d34:	40020428 	.word	0x40020428
 8002d38:	40020440 	.word	0x40020440
 8002d3c:	40020458 	.word	0x40020458
 8002d40:	40020470 	.word	0x40020470
 8002d44:	40020488 	.word	0x40020488
 8002d48:	400204a0 	.word	0x400204a0
 8002d4c:	400204b8 	.word	0x400204b8
 8002d50:	58025408 	.word	0x58025408
 8002d54:	5802541c 	.word	0x5802541c
 8002d58:	58025430 	.word	0x58025430
 8002d5c:	58025444 	.word	0x58025444
 8002d60:	58025458 	.word	0x58025458
 8002d64:	5802546c 	.word	0x5802546c
 8002d68:	58025480 	.word	0x58025480
 8002d6c:	58025494 	.word	0x58025494

08002d70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e205      	b.n	800318e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d004      	beq.n	8002d98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2280      	movs	r2, #128	; 0x80
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e1fa      	b.n	800318e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a8c      	ldr	r2, [pc, #560]	; (8002fd0 <HAL_DMA_Abort_IT+0x260>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d04a      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a8b      	ldr	r2, [pc, #556]	; (8002fd4 <HAL_DMA_Abort_IT+0x264>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d045      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a89      	ldr	r2, [pc, #548]	; (8002fd8 <HAL_DMA_Abort_IT+0x268>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d040      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a88      	ldr	r2, [pc, #544]	; (8002fdc <HAL_DMA_Abort_IT+0x26c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d03b      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a86      	ldr	r2, [pc, #536]	; (8002fe0 <HAL_DMA_Abort_IT+0x270>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d036      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a85      	ldr	r2, [pc, #532]	; (8002fe4 <HAL_DMA_Abort_IT+0x274>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d031      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a83      	ldr	r2, [pc, #524]	; (8002fe8 <HAL_DMA_Abort_IT+0x278>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d02c      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a82      	ldr	r2, [pc, #520]	; (8002fec <HAL_DMA_Abort_IT+0x27c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d027      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a80      	ldr	r2, [pc, #512]	; (8002ff0 <HAL_DMA_Abort_IT+0x280>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d022      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a7f      	ldr	r2, [pc, #508]	; (8002ff4 <HAL_DMA_Abort_IT+0x284>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d01d      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a7d      	ldr	r2, [pc, #500]	; (8002ff8 <HAL_DMA_Abort_IT+0x288>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d018      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7c      	ldr	r2, [pc, #496]	; (8002ffc <HAL_DMA_Abort_IT+0x28c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a7a      	ldr	r2, [pc, #488]	; (8003000 <HAL_DMA_Abort_IT+0x290>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00e      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a79      	ldr	r2, [pc, #484]	; (8003004 <HAL_DMA_Abort_IT+0x294>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d009      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a77      	ldr	r2, [pc, #476]	; (8003008 <HAL_DMA_Abort_IT+0x298>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d004      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a76      	ldr	r2, [pc, #472]	; (800300c <HAL_DMA_Abort_IT+0x29c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d101      	bne.n	8002e3c <HAL_DMA_Abort_IT+0xcc>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_DMA_Abort_IT+0xce>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d065      	beq.n	8002f0e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2204      	movs	r2, #4
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a60      	ldr	r2, [pc, #384]	; (8002fd0 <HAL_DMA_Abort_IT+0x260>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d04a      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5e      	ldr	r2, [pc, #376]	; (8002fd4 <HAL_DMA_Abort_IT+0x264>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d045      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a5d      	ldr	r2, [pc, #372]	; (8002fd8 <HAL_DMA_Abort_IT+0x268>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d040      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a5b      	ldr	r2, [pc, #364]	; (8002fdc <HAL_DMA_Abort_IT+0x26c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d03b      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a5a      	ldr	r2, [pc, #360]	; (8002fe0 <HAL_DMA_Abort_IT+0x270>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d036      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <HAL_DMA_Abort_IT+0x274>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d031      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a57      	ldr	r2, [pc, #348]	; (8002fe8 <HAL_DMA_Abort_IT+0x278>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d02c      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a55      	ldr	r2, [pc, #340]	; (8002fec <HAL_DMA_Abort_IT+0x27c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d027      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a54      	ldr	r2, [pc, #336]	; (8002ff0 <HAL_DMA_Abort_IT+0x280>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d022      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	; (8002ff4 <HAL_DMA_Abort_IT+0x284>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01d      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a51      	ldr	r2, [pc, #324]	; (8002ff8 <HAL_DMA_Abort_IT+0x288>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d018      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a4f      	ldr	r2, [pc, #316]	; (8002ffc <HAL_DMA_Abort_IT+0x28c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a4e      	ldr	r2, [pc, #312]	; (8003000 <HAL_DMA_Abort_IT+0x290>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00e      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a4c      	ldr	r2, [pc, #304]	; (8003004 <HAL_DMA_Abort_IT+0x294>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d009      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a4b      	ldr	r2, [pc, #300]	; (8003008 <HAL_DMA_Abort_IT+0x298>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_DMA_Abort_IT+0x17a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a49      	ldr	r2, [pc, #292]	; (800300c <HAL_DMA_Abort_IT+0x29c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d108      	bne.n	8002efc <HAL_DMA_Abort_IT+0x18c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e147      	b.n	800318c <HAL_DMA_Abort_IT+0x41c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e13e      	b.n	800318c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 020e 	bic.w	r2, r2, #14
 8002f1c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a2b      	ldr	r2, [pc, #172]	; (8002fd0 <HAL_DMA_Abort_IT+0x260>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d04a      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a29      	ldr	r2, [pc, #164]	; (8002fd4 <HAL_DMA_Abort_IT+0x264>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d045      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a28      	ldr	r2, [pc, #160]	; (8002fd8 <HAL_DMA_Abort_IT+0x268>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d040      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a26      	ldr	r2, [pc, #152]	; (8002fdc <HAL_DMA_Abort_IT+0x26c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d03b      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <HAL_DMA_Abort_IT+0x270>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d036      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a23      	ldr	r2, [pc, #140]	; (8002fe4 <HAL_DMA_Abort_IT+0x274>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d031      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a22      	ldr	r2, [pc, #136]	; (8002fe8 <HAL_DMA_Abort_IT+0x278>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d02c      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a20      	ldr	r2, [pc, #128]	; (8002fec <HAL_DMA_Abort_IT+0x27c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d027      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1f      	ldr	r2, [pc, #124]	; (8002ff0 <HAL_DMA_Abort_IT+0x280>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d022      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <HAL_DMA_Abort_IT+0x284>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01d      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1c      	ldr	r2, [pc, #112]	; (8002ff8 <HAL_DMA_Abort_IT+0x288>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d018      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1a      	ldr	r2, [pc, #104]	; (8002ffc <HAL_DMA_Abort_IT+0x28c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a19      	ldr	r2, [pc, #100]	; (8003000 <HAL_DMA_Abort_IT+0x290>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00e      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a17      	ldr	r2, [pc, #92]	; (8003004 <HAL_DMA_Abort_IT+0x294>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d009      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a16      	ldr	r2, [pc, #88]	; (8003008 <HAL_DMA_Abort_IT+0x298>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x24e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <HAL_DMA_Abort_IT+0x29c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d128      	bne.n	8003010 <HAL_DMA_Abort_IT+0x2a0>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0201 	bic.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e027      	b.n	8003020 <HAL_DMA_Abort_IT+0x2b0>
 8002fd0:	40020010 	.word	0x40020010
 8002fd4:	40020028 	.word	0x40020028
 8002fd8:	40020040 	.word	0x40020040
 8002fdc:	40020058 	.word	0x40020058
 8002fe0:	40020070 	.word	0x40020070
 8002fe4:	40020088 	.word	0x40020088
 8002fe8:	400200a0 	.word	0x400200a0
 8002fec:	400200b8 	.word	0x400200b8
 8002ff0:	40020410 	.word	0x40020410
 8002ff4:	40020428 	.word	0x40020428
 8002ff8:	40020440 	.word	0x40020440
 8002ffc:	40020458 	.word	0x40020458
 8003000:	40020470 	.word	0x40020470
 8003004:	40020488 	.word	0x40020488
 8003008:	400204a0 	.word	0x400204a0
 800300c:	400204b8 	.word	0x400204b8
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a5c      	ldr	r2, [pc, #368]	; (8003198 <HAL_DMA_Abort_IT+0x428>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d072      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5b      	ldr	r2, [pc, #364]	; (800319c <HAL_DMA_Abort_IT+0x42c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d06d      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a59      	ldr	r2, [pc, #356]	; (80031a0 <HAL_DMA_Abort_IT+0x430>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d068      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <HAL_DMA_Abort_IT+0x434>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d063      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a56      	ldr	r2, [pc, #344]	; (80031a8 <HAL_DMA_Abort_IT+0x438>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d05e      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a55      	ldr	r2, [pc, #340]	; (80031ac <HAL_DMA_Abort_IT+0x43c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d059      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a53      	ldr	r2, [pc, #332]	; (80031b0 <HAL_DMA_Abort_IT+0x440>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d054      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a52      	ldr	r2, [pc, #328]	; (80031b4 <HAL_DMA_Abort_IT+0x444>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d04f      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a50      	ldr	r2, [pc, #320]	; (80031b8 <HAL_DMA_Abort_IT+0x448>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d04a      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a4f      	ldr	r2, [pc, #316]	; (80031bc <HAL_DMA_Abort_IT+0x44c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d045      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a4d      	ldr	r2, [pc, #308]	; (80031c0 <HAL_DMA_Abort_IT+0x450>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d040      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a4c      	ldr	r2, [pc, #304]	; (80031c4 <HAL_DMA_Abort_IT+0x454>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d03b      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a4a      	ldr	r2, [pc, #296]	; (80031c8 <HAL_DMA_Abort_IT+0x458>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d036      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a49      	ldr	r2, [pc, #292]	; (80031cc <HAL_DMA_Abort_IT+0x45c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d031      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a47      	ldr	r2, [pc, #284]	; (80031d0 <HAL_DMA_Abort_IT+0x460>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d02c      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a46      	ldr	r2, [pc, #280]	; (80031d4 <HAL_DMA_Abort_IT+0x464>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d027      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a44      	ldr	r2, [pc, #272]	; (80031d8 <HAL_DMA_Abort_IT+0x468>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d022      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a43      	ldr	r2, [pc, #268]	; (80031dc <HAL_DMA_Abort_IT+0x46c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d01d      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a41      	ldr	r2, [pc, #260]	; (80031e0 <HAL_DMA_Abort_IT+0x470>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d018      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a40      	ldr	r2, [pc, #256]	; (80031e4 <HAL_DMA_Abort_IT+0x474>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d013      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a3e      	ldr	r2, [pc, #248]	; (80031e8 <HAL_DMA_Abort_IT+0x478>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00e      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a3d      	ldr	r2, [pc, #244]	; (80031ec <HAL_DMA_Abort_IT+0x47c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d009      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a3b      	ldr	r2, [pc, #236]	; (80031f0 <HAL_DMA_Abort_IT+0x480>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_DMA_Abort_IT+0x3a0>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a3a      	ldr	r2, [pc, #232]	; (80031f4 <HAL_DMA_Abort_IT+0x484>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <HAL_DMA_Abort_IT+0x3a4>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_DMA_Abort_IT+0x3a6>
 8003114:	2300      	movs	r3, #0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d028      	beq.n	800316c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003128:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	2201      	movs	r2, #1
 800313a:	409a      	lsls	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003148:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00c      	beq.n	800316c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800315c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003160:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800316a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40020010 	.word	0x40020010
 800319c:	40020028 	.word	0x40020028
 80031a0:	40020040 	.word	0x40020040
 80031a4:	40020058 	.word	0x40020058
 80031a8:	40020070 	.word	0x40020070
 80031ac:	40020088 	.word	0x40020088
 80031b0:	400200a0 	.word	0x400200a0
 80031b4:	400200b8 	.word	0x400200b8
 80031b8:	40020410 	.word	0x40020410
 80031bc:	40020428 	.word	0x40020428
 80031c0:	40020440 	.word	0x40020440
 80031c4:	40020458 	.word	0x40020458
 80031c8:	40020470 	.word	0x40020470
 80031cc:	40020488 	.word	0x40020488
 80031d0:	400204a0 	.word	0x400204a0
 80031d4:	400204b8 	.word	0x400204b8
 80031d8:	58025408 	.word	0x58025408
 80031dc:	5802541c 	.word	0x5802541c
 80031e0:	58025430 	.word	0x58025430
 80031e4:	58025444 	.word	0x58025444
 80031e8:	58025458 	.word	0x58025458
 80031ec:	5802546c 	.word	0x5802546c
 80031f0:	58025480 	.word	0x58025480
 80031f4:	58025494 	.word	0x58025494

080031f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003204:	4b67      	ldr	r3, [pc, #412]	; (80033a4 <HAL_DMA_IRQHandler+0x1ac>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a67      	ldr	r2, [pc, #412]	; (80033a8 <HAL_DMA_IRQHandler+0x1b0>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	0a9b      	lsrs	r3, r3, #10
 8003210:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5f      	ldr	r2, [pc, #380]	; (80033ac <HAL_DMA_IRQHandler+0x1b4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d04a      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a5d      	ldr	r2, [pc, #372]	; (80033b0 <HAL_DMA_IRQHandler+0x1b8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d045      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a5c      	ldr	r2, [pc, #368]	; (80033b4 <HAL_DMA_IRQHandler+0x1bc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d040      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a5a      	ldr	r2, [pc, #360]	; (80033b8 <HAL_DMA_IRQHandler+0x1c0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d03b      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a59      	ldr	r2, [pc, #356]	; (80033bc <HAL_DMA_IRQHandler+0x1c4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d036      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a57      	ldr	r2, [pc, #348]	; (80033c0 <HAL_DMA_IRQHandler+0x1c8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d031      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a56      	ldr	r2, [pc, #344]	; (80033c4 <HAL_DMA_IRQHandler+0x1cc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d02c      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a54      	ldr	r2, [pc, #336]	; (80033c8 <HAL_DMA_IRQHandler+0x1d0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d027      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a53      	ldr	r2, [pc, #332]	; (80033cc <HAL_DMA_IRQHandler+0x1d4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d022      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a51      	ldr	r2, [pc, #324]	; (80033d0 <HAL_DMA_IRQHandler+0x1d8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01d      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a50      	ldr	r2, [pc, #320]	; (80033d4 <HAL_DMA_IRQHandler+0x1dc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d018      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a4e      	ldr	r2, [pc, #312]	; (80033d8 <HAL_DMA_IRQHandler+0x1e0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a4d      	ldr	r2, [pc, #308]	; (80033dc <HAL_DMA_IRQHandler+0x1e4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a4b      	ldr	r2, [pc, #300]	; (80033e0 <HAL_DMA_IRQHandler+0x1e8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a4a      	ldr	r2, [pc, #296]	; (80033e4 <HAL_DMA_IRQHandler+0x1ec>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_DMA_IRQHandler+0xd2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a48      	ldr	r2, [pc, #288]	; (80033e8 <HAL_DMA_IRQHandler+0x1f0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_DMA_IRQHandler+0xd6>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <HAL_DMA_IRQHandler+0xd8>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 842b 	beq.w	8003b2c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2208      	movs	r2, #8
 80032e0:	409a      	lsls	r2, r3
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80a2 	beq.w	8003430 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2e      	ldr	r2, [pc, #184]	; (80033ac <HAL_DMA_IRQHandler+0x1b4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d04a      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2d      	ldr	r2, [pc, #180]	; (80033b0 <HAL_DMA_IRQHandler+0x1b8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d045      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a2b      	ldr	r2, [pc, #172]	; (80033b4 <HAL_DMA_IRQHandler+0x1bc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d040      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <HAL_DMA_IRQHandler+0x1c0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d03b      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a28      	ldr	r2, [pc, #160]	; (80033bc <HAL_DMA_IRQHandler+0x1c4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d036      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <HAL_DMA_IRQHandler+0x1c8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d031      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <HAL_DMA_IRQHandler+0x1cc>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d02c      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <HAL_DMA_IRQHandler+0x1d0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d027      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a22      	ldr	r2, [pc, #136]	; (80033cc <HAL_DMA_IRQHandler+0x1d4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d022      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a21      	ldr	r2, [pc, #132]	; (80033d0 <HAL_DMA_IRQHandler+0x1d8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d01d      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1f      	ldr	r2, [pc, #124]	; (80033d4 <HAL_DMA_IRQHandler+0x1dc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d018      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1e      	ldr	r2, [pc, #120]	; (80033d8 <HAL_DMA_IRQHandler+0x1e0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d013      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <HAL_DMA_IRQHandler+0x1e4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00e      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <HAL_DMA_IRQHandler+0x1e8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d009      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a19      	ldr	r2, [pc, #100]	; (80033e4 <HAL_DMA_IRQHandler+0x1ec>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <HAL_DMA_IRQHandler+0x194>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <HAL_DMA_IRQHandler+0x1f0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d12f      	bne.n	80033ec <HAL_DMA_IRQHandler+0x1f4>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf14      	ite	ne
 800339a:	2301      	movne	r3, #1
 800339c:	2300      	moveq	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	e02e      	b.n	8003400 <HAL_DMA_IRQHandler+0x208>
 80033a2:	bf00      	nop
 80033a4:	20000000 	.word	0x20000000
 80033a8:	1b4e81b5 	.word	0x1b4e81b5
 80033ac:	40020010 	.word	0x40020010
 80033b0:	40020028 	.word	0x40020028
 80033b4:	40020040 	.word	0x40020040
 80033b8:	40020058 	.word	0x40020058
 80033bc:	40020070 	.word	0x40020070
 80033c0:	40020088 	.word	0x40020088
 80033c4:	400200a0 	.word	0x400200a0
 80033c8:	400200b8 	.word	0x400200b8
 80033cc:	40020410 	.word	0x40020410
 80033d0:	40020428 	.word	0x40020428
 80033d4:	40020440 	.word	0x40020440
 80033d8:	40020458 	.word	0x40020458
 80033dc:	40020470 	.word	0x40020470
 80033e0:	40020488 	.word	0x40020488
 80033e4:	400204a0 	.word	0x400204a0
 80033e8:	400204b8 	.word	0x400204b8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf14      	ite	ne
 80033fa:	2301      	movne	r3, #1
 80033fc:	2300      	moveq	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0204 	bic.w	r2, r2, #4
 8003412:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	2208      	movs	r2, #8
 800341e:	409a      	lsls	r2, r3
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	f043 0201 	orr.w	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	fa22 f303 	lsr.w	r3, r2, r3
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d06e      	beq.n	8003524 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a69      	ldr	r2, [pc, #420]	; (80035f0 <HAL_DMA_IRQHandler+0x3f8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d04a      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a67      	ldr	r2, [pc, #412]	; (80035f4 <HAL_DMA_IRQHandler+0x3fc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d045      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a66      	ldr	r2, [pc, #408]	; (80035f8 <HAL_DMA_IRQHandler+0x400>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d040      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a64      	ldr	r2, [pc, #400]	; (80035fc <HAL_DMA_IRQHandler+0x404>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d03b      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a63      	ldr	r2, [pc, #396]	; (8003600 <HAL_DMA_IRQHandler+0x408>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d036      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a61      	ldr	r2, [pc, #388]	; (8003604 <HAL_DMA_IRQHandler+0x40c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d031      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a60      	ldr	r2, [pc, #384]	; (8003608 <HAL_DMA_IRQHandler+0x410>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d02c      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a5e      	ldr	r2, [pc, #376]	; (800360c <HAL_DMA_IRQHandler+0x414>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d027      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a5d      	ldr	r2, [pc, #372]	; (8003610 <HAL_DMA_IRQHandler+0x418>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d022      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a5b      	ldr	r2, [pc, #364]	; (8003614 <HAL_DMA_IRQHandler+0x41c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01d      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a5a      	ldr	r2, [pc, #360]	; (8003618 <HAL_DMA_IRQHandler+0x420>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d018      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a58      	ldr	r2, [pc, #352]	; (800361c <HAL_DMA_IRQHandler+0x424>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a57      	ldr	r2, [pc, #348]	; (8003620 <HAL_DMA_IRQHandler+0x428>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00e      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a55      	ldr	r2, [pc, #340]	; (8003624 <HAL_DMA_IRQHandler+0x42c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d009      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a54      	ldr	r2, [pc, #336]	; (8003628 <HAL_DMA_IRQHandler+0x430>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d004      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x2ee>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a52      	ldr	r2, [pc, #328]	; (800362c <HAL_DMA_IRQHandler+0x434>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10a      	bne.n	80034fc <HAL_DMA_IRQHandler+0x304>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf14      	ite	ne
 80034f4:	2301      	movne	r3, #1
 80034f6:	2300      	moveq	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e003      	b.n	8003504 <HAL_DMA_IRQHandler+0x30c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	2201      	movs	r2, #1
 8003512:	409a      	lsls	r2, r3
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	f043 0202 	orr.w	r2, r3, #2
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2204      	movs	r2, #4
 800352e:	409a      	lsls	r2, r3
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 808f 	beq.w	8003658 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2c      	ldr	r2, [pc, #176]	; (80035f0 <HAL_DMA_IRQHandler+0x3f8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d04a      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <HAL_DMA_IRQHandler+0x3fc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d045      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <HAL_DMA_IRQHandler+0x400>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d040      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a27      	ldr	r2, [pc, #156]	; (80035fc <HAL_DMA_IRQHandler+0x404>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d03b      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a26      	ldr	r2, [pc, #152]	; (8003600 <HAL_DMA_IRQHandler+0x408>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d036      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a24      	ldr	r2, [pc, #144]	; (8003604 <HAL_DMA_IRQHandler+0x40c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d031      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a23      	ldr	r2, [pc, #140]	; (8003608 <HAL_DMA_IRQHandler+0x410>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d02c      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a21      	ldr	r2, [pc, #132]	; (800360c <HAL_DMA_IRQHandler+0x414>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d027      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a20      	ldr	r2, [pc, #128]	; (8003610 <HAL_DMA_IRQHandler+0x418>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d022      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <HAL_DMA_IRQHandler+0x41c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01d      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <HAL_DMA_IRQHandler+0x420>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d018      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1b      	ldr	r2, [pc, #108]	; (800361c <HAL_DMA_IRQHandler+0x424>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1a      	ldr	r2, [pc, #104]	; (8003620 <HAL_DMA_IRQHandler+0x428>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00e      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a18      	ldr	r2, [pc, #96]	; (8003624 <HAL_DMA_IRQHandler+0x42c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d009      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a17      	ldr	r2, [pc, #92]	; (8003628 <HAL_DMA_IRQHandler+0x430>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_DMA_IRQHandler+0x3e2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a15      	ldr	r2, [pc, #84]	; (800362c <HAL_DMA_IRQHandler+0x434>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d12a      	bne.n	8003630 <HAL_DMA_IRQHandler+0x438>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf14      	ite	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	2300      	moveq	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e023      	b.n	8003638 <HAL_DMA_IRQHandler+0x440>
 80035f0:	40020010 	.word	0x40020010
 80035f4:	40020028 	.word	0x40020028
 80035f8:	40020040 	.word	0x40020040
 80035fc:	40020058 	.word	0x40020058
 8003600:	40020070 	.word	0x40020070
 8003604:	40020088 	.word	0x40020088
 8003608:	400200a0 	.word	0x400200a0
 800360c:	400200b8 	.word	0x400200b8
 8003610:	40020410 	.word	0x40020410
 8003614:	40020428 	.word	0x40020428
 8003618:	40020440 	.word	0x40020440
 800361c:	40020458 	.word	0x40020458
 8003620:	40020470 	.word	0x40020470
 8003624:	40020488 	.word	0x40020488
 8003628:	400204a0 	.word	0x400204a0
 800362c:	400204b8 	.word	0x400204b8
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2300      	movs	r3, #0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00d      	beq.n	8003658 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003640:	f003 031f 	and.w	r3, r3, #31
 8003644:	2204      	movs	r2, #4
 8003646:	409a      	lsls	r2, r3
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	f043 0204 	orr.w	r2, r3, #4
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	2210      	movs	r2, #16
 8003662:	409a      	lsls	r2, r3
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80a6 	beq.w	80037ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a85      	ldr	r2, [pc, #532]	; (8003888 <HAL_DMA_IRQHandler+0x690>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d04a      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a83      	ldr	r2, [pc, #524]	; (800388c <HAL_DMA_IRQHandler+0x694>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d045      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a82      	ldr	r2, [pc, #520]	; (8003890 <HAL_DMA_IRQHandler+0x698>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d040      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a80      	ldr	r2, [pc, #512]	; (8003894 <HAL_DMA_IRQHandler+0x69c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d03b      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7f      	ldr	r2, [pc, #508]	; (8003898 <HAL_DMA_IRQHandler+0x6a0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d036      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a7d      	ldr	r2, [pc, #500]	; (800389c <HAL_DMA_IRQHandler+0x6a4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d031      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7c      	ldr	r2, [pc, #496]	; (80038a0 <HAL_DMA_IRQHandler+0x6a8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d02c      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a7a      	ldr	r2, [pc, #488]	; (80038a4 <HAL_DMA_IRQHandler+0x6ac>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d027      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a79      	ldr	r2, [pc, #484]	; (80038a8 <HAL_DMA_IRQHandler+0x6b0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d022      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a77      	ldr	r2, [pc, #476]	; (80038ac <HAL_DMA_IRQHandler+0x6b4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01d      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a76      	ldr	r2, [pc, #472]	; (80038b0 <HAL_DMA_IRQHandler+0x6b8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d018      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a74      	ldr	r2, [pc, #464]	; (80038b4 <HAL_DMA_IRQHandler+0x6bc>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a73      	ldr	r2, [pc, #460]	; (80038b8 <HAL_DMA_IRQHandler+0x6c0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00e      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a71      	ldr	r2, [pc, #452]	; (80038bc <HAL_DMA_IRQHandler+0x6c4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a70      	ldr	r2, [pc, #448]	; (80038c0 <HAL_DMA_IRQHandler+0x6c8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d004      	beq.n	800370e <HAL_DMA_IRQHandler+0x516>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a6e      	ldr	r2, [pc, #440]	; (80038c4 <HAL_DMA_IRQHandler+0x6cc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d10a      	bne.n	8003724 <HAL_DMA_IRQHandler+0x52c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e009      	b.n	8003738 <HAL_DMA_IRQHandler+0x540>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d03e      	beq.n	80037ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	2210      	movs	r2, #16
 8003746:	409a      	lsls	r2, r3
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d018      	beq.n	800378c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d108      	bne.n	800377a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	d024      	beq.n	80037ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
 8003778:	e01f      	b.n	80037ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377e:	2b00      	cmp	r3, #0
 8003780:	d01b      	beq.n	80037ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	4798      	blx	r3
 800378a:	e016      	b.n	80037ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d107      	bne.n	80037aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0208 	bic.w	r2, r2, #8
 80037a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	2220      	movs	r2, #32
 80037c4:	409a      	lsls	r2, r3
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 8110 	beq.w	80039f0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2c      	ldr	r2, [pc, #176]	; (8003888 <HAL_DMA_IRQHandler+0x690>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d04a      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a2b      	ldr	r2, [pc, #172]	; (800388c <HAL_DMA_IRQHandler+0x694>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d045      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a29      	ldr	r2, [pc, #164]	; (8003890 <HAL_DMA_IRQHandler+0x698>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d040      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a28      	ldr	r2, [pc, #160]	; (8003894 <HAL_DMA_IRQHandler+0x69c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d03b      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a26      	ldr	r2, [pc, #152]	; (8003898 <HAL_DMA_IRQHandler+0x6a0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d036      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a25      	ldr	r2, [pc, #148]	; (800389c <HAL_DMA_IRQHandler+0x6a4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d031      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <HAL_DMA_IRQHandler+0x6a8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d02c      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a22      	ldr	r2, [pc, #136]	; (80038a4 <HAL_DMA_IRQHandler+0x6ac>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d027      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a20      	ldr	r2, [pc, #128]	; (80038a8 <HAL_DMA_IRQHandler+0x6b0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d022      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1f      	ldr	r2, [pc, #124]	; (80038ac <HAL_DMA_IRQHandler+0x6b4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d01d      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1d      	ldr	r2, [pc, #116]	; (80038b0 <HAL_DMA_IRQHandler+0x6b8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d018      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <HAL_DMA_IRQHandler+0x6bc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d013      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <HAL_DMA_IRQHandler+0x6c0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00e      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a19      	ldr	r2, [pc, #100]	; (80038bc <HAL_DMA_IRQHandler+0x6c4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d009      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <HAL_DMA_IRQHandler+0x6c8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d004      	beq.n	8003870 <HAL_DMA_IRQHandler+0x678>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a16      	ldr	r2, [pc, #88]	; (80038c4 <HAL_DMA_IRQHandler+0x6cc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d12b      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x6d0>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	bf14      	ite	ne
 800387e:	2301      	movne	r3, #1
 8003880:	2300      	moveq	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	e02a      	b.n	80038dc <HAL_DMA_IRQHandler+0x6e4>
 8003886:	bf00      	nop
 8003888:	40020010 	.word	0x40020010
 800388c:	40020028 	.word	0x40020028
 8003890:	40020040 	.word	0x40020040
 8003894:	40020058 	.word	0x40020058
 8003898:	40020070 	.word	0x40020070
 800389c:	40020088 	.word	0x40020088
 80038a0:	400200a0 	.word	0x400200a0
 80038a4:	400200b8 	.word	0x400200b8
 80038a8:	40020410 	.word	0x40020410
 80038ac:	40020428 	.word	0x40020428
 80038b0:	40020440 	.word	0x40020440
 80038b4:	40020458 	.word	0x40020458
 80038b8:	40020470 	.word	0x40020470
 80038bc:	40020488 	.word	0x40020488
 80038c0:	400204a0 	.word	0x400204a0
 80038c4:	400204b8 	.word	0x400204b8
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bf14      	ite	ne
 80038d6:	2301      	movne	r3, #1
 80038d8:	2300      	moveq	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8087 	beq.w	80039f0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2220      	movs	r2, #32
 80038ec:	409a      	lsls	r2, r3
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d139      	bne.n	8003972 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0216 	bic.w	r2, r2, #22
 800390c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800391c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <HAL_DMA_IRQHandler+0x736>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0208 	bic.w	r2, r2, #8
 800393c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	223f      	movs	r2, #63	; 0x3f
 8003948:	409a      	lsls	r2, r3
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 834a 	beq.w	8003ffc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
          }
          return;
 8003970:	e344      	b.n	8003ffc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d018      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d108      	bne.n	80039a0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	2b00      	cmp	r3, #0
 8003994:	d02c      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
 800399e:	e027      	b.n	80039f0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d023      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	4798      	blx	r3
 80039b0:	e01e      	b.n	80039f0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10f      	bne.n	80039e0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0210 	bic.w	r2, r2, #16
 80039ce:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8306 	beq.w	8004006 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8088 	beq.w	8003b18 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a7a      	ldr	r2, [pc, #488]	; (8003c00 <HAL_DMA_IRQHandler+0xa08>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d04a      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a79      	ldr	r2, [pc, #484]	; (8003c04 <HAL_DMA_IRQHandler+0xa0c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d045      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a77      	ldr	r2, [pc, #476]	; (8003c08 <HAL_DMA_IRQHandler+0xa10>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d040      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a76      	ldr	r2, [pc, #472]	; (8003c0c <HAL_DMA_IRQHandler+0xa14>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d03b      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a74      	ldr	r2, [pc, #464]	; (8003c10 <HAL_DMA_IRQHandler+0xa18>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d036      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a73      	ldr	r2, [pc, #460]	; (8003c14 <HAL_DMA_IRQHandler+0xa1c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d031      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a71      	ldr	r2, [pc, #452]	; (8003c18 <HAL_DMA_IRQHandler+0xa20>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d02c      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a70      	ldr	r2, [pc, #448]	; (8003c1c <HAL_DMA_IRQHandler+0xa24>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d027      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a6e      	ldr	r2, [pc, #440]	; (8003c20 <HAL_DMA_IRQHandler+0xa28>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d022      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6d      	ldr	r2, [pc, #436]	; (8003c24 <HAL_DMA_IRQHandler+0xa2c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d01d      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a6b      	ldr	r2, [pc, #428]	; (8003c28 <HAL_DMA_IRQHandler+0xa30>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d018      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a6a      	ldr	r2, [pc, #424]	; (8003c2c <HAL_DMA_IRQHandler+0xa34>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d013      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a68      	ldr	r2, [pc, #416]	; (8003c30 <HAL_DMA_IRQHandler+0xa38>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00e      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a67      	ldr	r2, [pc, #412]	; (8003c34 <HAL_DMA_IRQHandler+0xa3c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d009      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a65      	ldr	r2, [pc, #404]	; (8003c38 <HAL_DMA_IRQHandler+0xa40>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x8b8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a64      	ldr	r2, [pc, #400]	; (8003c3c <HAL_DMA_IRQHandler+0xa44>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d108      	bne.n	8003ac2 <HAL_DMA_IRQHandler+0x8ca>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	e007      	b.n	8003ad2 <HAL_DMA_IRQHandler+0x8da>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0201 	bic.w	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d307      	bcc.n	8003aee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f2      	bne.n	8003ad2 <HAL_DMA_IRQHandler+0x8da>
 8003aec:	e000      	b.n	8003af0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003aee:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2203      	movs	r2, #3
 8003b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003b0e:	e003      	b.n	8003b18 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8272 	beq.w	8004006 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4798      	blx	r3
 8003b2a:	e26c      	b.n	8004006 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a43      	ldr	r2, [pc, #268]	; (8003c40 <HAL_DMA_IRQHandler+0xa48>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d022      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x984>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a42      	ldr	r2, [pc, #264]	; (8003c44 <HAL_DMA_IRQHandler+0xa4c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d01d      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x984>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a40      	ldr	r2, [pc, #256]	; (8003c48 <HAL_DMA_IRQHandler+0xa50>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d018      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x984>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a3f      	ldr	r2, [pc, #252]	; (8003c4c <HAL_DMA_IRQHandler+0xa54>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d013      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x984>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a3d      	ldr	r2, [pc, #244]	; (8003c50 <HAL_DMA_IRQHandler+0xa58>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00e      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x984>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a3c      	ldr	r2, [pc, #240]	; (8003c54 <HAL_DMA_IRQHandler+0xa5c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d009      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x984>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a3a      	ldr	r2, [pc, #232]	; (8003c58 <HAL_DMA_IRQHandler+0xa60>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x984>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a39      	ldr	r2, [pc, #228]	; (8003c5c <HAL_DMA_IRQHandler+0xa64>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d101      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x988>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_DMA_IRQHandler+0x98a>
 8003b80:	2300      	movs	r3, #0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 823f 	beq.w	8004006 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	2204      	movs	r2, #4
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80cd 	beq.w	8003d40 <HAL_DMA_IRQHandler+0xb48>
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80c7 	beq.w	8003d40 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2204      	movs	r2, #4
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d049      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8210 	beq.w	8004000 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003be8:	e20a      	b.n	8004000 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8206 	beq.w	8004000 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bfc:	e200      	b.n	8004000 <HAL_DMA_IRQHandler+0xe08>
 8003bfe:	bf00      	nop
 8003c00:	40020010 	.word	0x40020010
 8003c04:	40020028 	.word	0x40020028
 8003c08:	40020040 	.word	0x40020040
 8003c0c:	40020058 	.word	0x40020058
 8003c10:	40020070 	.word	0x40020070
 8003c14:	40020088 	.word	0x40020088
 8003c18:	400200a0 	.word	0x400200a0
 8003c1c:	400200b8 	.word	0x400200b8
 8003c20:	40020410 	.word	0x40020410
 8003c24:	40020428 	.word	0x40020428
 8003c28:	40020440 	.word	0x40020440
 8003c2c:	40020458 	.word	0x40020458
 8003c30:	40020470 	.word	0x40020470
 8003c34:	40020488 	.word	0x40020488
 8003c38:	400204a0 	.word	0x400204a0
 8003c3c:	400204b8 	.word	0x400204b8
 8003c40:	58025408 	.word	0x58025408
 8003c44:	5802541c 	.word	0x5802541c
 8003c48:	58025430 	.word	0x58025430
 8003c4c:	58025444 	.word	0x58025444
 8003c50:	58025458 	.word	0x58025458
 8003c54:	5802546c 	.word	0x5802546c
 8003c58:	58025480 	.word	0x58025480
 8003c5c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d160      	bne.n	8003d2c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a8c      	ldr	r2, [pc, #560]	; (8003ea0 <HAL_DMA_IRQHandler+0xca8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d04a      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a8a      	ldr	r2, [pc, #552]	; (8003ea4 <HAL_DMA_IRQHandler+0xcac>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d045      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a89      	ldr	r2, [pc, #548]	; (8003ea8 <HAL_DMA_IRQHandler+0xcb0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d040      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a87      	ldr	r2, [pc, #540]	; (8003eac <HAL_DMA_IRQHandler+0xcb4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d03b      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a86      	ldr	r2, [pc, #536]	; (8003eb0 <HAL_DMA_IRQHandler+0xcb8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d036      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a84      	ldr	r2, [pc, #528]	; (8003eb4 <HAL_DMA_IRQHandler+0xcbc>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d031      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a83      	ldr	r2, [pc, #524]	; (8003eb8 <HAL_DMA_IRQHandler+0xcc0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d02c      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a81      	ldr	r2, [pc, #516]	; (8003ebc <HAL_DMA_IRQHandler+0xcc4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d027      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a80      	ldr	r2, [pc, #512]	; (8003ec0 <HAL_DMA_IRQHandler+0xcc8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d022      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a7e      	ldr	r2, [pc, #504]	; (8003ec4 <HAL_DMA_IRQHandler+0xccc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d01d      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a7d      	ldr	r2, [pc, #500]	; (8003ec8 <HAL_DMA_IRQHandler+0xcd0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d018      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a7b      	ldr	r2, [pc, #492]	; (8003ecc <HAL_DMA_IRQHandler+0xcd4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a7a      	ldr	r2, [pc, #488]	; (8003ed0 <HAL_DMA_IRQHandler+0xcd8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00e      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a78      	ldr	r2, [pc, #480]	; (8003ed4 <HAL_DMA_IRQHandler+0xcdc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d009      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a77      	ldr	r2, [pc, #476]	; (8003ed8 <HAL_DMA_IRQHandler+0xce0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xb12>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a75      	ldr	r2, [pc, #468]	; (8003edc <HAL_DMA_IRQHandler+0xce4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d108      	bne.n	8003d1c <HAL_DMA_IRQHandler+0xb24>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0208 	bic.w	r2, r2, #8
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e007      	b.n	8003d2c <HAL_DMA_IRQHandler+0xb34>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0204 	bic.w	r2, r2, #4
 8003d2a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8165 	beq.w	8004000 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d3e:	e15f      	b.n	8004000 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	2202      	movs	r2, #2
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80c5 	beq.w	8003ee0 <HAL_DMA_IRQHandler+0xce8>
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80bf 	beq.w	8003ee0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d018      	beq.n	8003dae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 813a 	beq.w	8004004 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d98:	e134      	b.n	8004004 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8130 	beq.w	8004004 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dac:	e12a      	b.n	8004004 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d168      	bne.n	8003e8a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a38      	ldr	r2, [pc, #224]	; (8003ea0 <HAL_DMA_IRQHandler+0xca8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d04a      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a37      	ldr	r2, [pc, #220]	; (8003ea4 <HAL_DMA_IRQHandler+0xcac>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d045      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a35      	ldr	r2, [pc, #212]	; (8003ea8 <HAL_DMA_IRQHandler+0xcb0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d040      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a34      	ldr	r2, [pc, #208]	; (8003eac <HAL_DMA_IRQHandler+0xcb4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d03b      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a32      	ldr	r2, [pc, #200]	; (8003eb0 <HAL_DMA_IRQHandler+0xcb8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d036      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a31      	ldr	r2, [pc, #196]	; (8003eb4 <HAL_DMA_IRQHandler+0xcbc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d031      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a2f      	ldr	r2, [pc, #188]	; (8003eb8 <HAL_DMA_IRQHandler+0xcc0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d02c      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2e      	ldr	r2, [pc, #184]	; (8003ebc <HAL_DMA_IRQHandler+0xcc4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d027      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2c      	ldr	r2, [pc, #176]	; (8003ec0 <HAL_DMA_IRQHandler+0xcc8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d022      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2b      	ldr	r2, [pc, #172]	; (8003ec4 <HAL_DMA_IRQHandler+0xccc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d01d      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a29      	ldr	r2, [pc, #164]	; (8003ec8 <HAL_DMA_IRQHandler+0xcd0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d018      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a28      	ldr	r2, [pc, #160]	; (8003ecc <HAL_DMA_IRQHandler+0xcd4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <HAL_DMA_IRQHandler+0xcd8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00e      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a25      	ldr	r2, [pc, #148]	; (8003ed4 <HAL_DMA_IRQHandler+0xcdc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d009      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a23      	ldr	r2, [pc, #140]	; (8003ed8 <HAL_DMA_IRQHandler+0xce0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc60>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a22      	ldr	r2, [pc, #136]	; (8003edc <HAL_DMA_IRQHandler+0xce4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <HAL_DMA_IRQHandler+0xc72>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0214 	bic.w	r2, r2, #20
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	e007      	b.n	8003e7a <HAL_DMA_IRQHandler+0xc82>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 020a 	bic.w	r2, r2, #10
 8003e78:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80b8 	beq.w	8004004 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e9c:	e0b2      	b.n	8004004 <HAL_DMA_IRQHandler+0xe0c>
 8003e9e:	bf00      	nop
 8003ea0:	40020010 	.word	0x40020010
 8003ea4:	40020028 	.word	0x40020028
 8003ea8:	40020040 	.word	0x40020040
 8003eac:	40020058 	.word	0x40020058
 8003eb0:	40020070 	.word	0x40020070
 8003eb4:	40020088 	.word	0x40020088
 8003eb8:	400200a0 	.word	0x400200a0
 8003ebc:	400200b8 	.word	0x400200b8
 8003ec0:	40020410 	.word	0x40020410
 8003ec4:	40020428 	.word	0x40020428
 8003ec8:	40020440 	.word	0x40020440
 8003ecc:	40020458 	.word	0x40020458
 8003ed0:	40020470 	.word	0x40020470
 8003ed4:	40020488 	.word	0x40020488
 8003ed8:	400204a0 	.word	0x400204a0
 8003edc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	2208      	movs	r2, #8
 8003eea:	409a      	lsls	r2, r3
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8088 	beq.w	8004006 <HAL_DMA_IRQHandler+0xe0e>
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8082 	beq.w	8004006 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a41      	ldr	r2, [pc, #260]	; (800400c <HAL_DMA_IRQHandler+0xe14>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d04a      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a3f      	ldr	r2, [pc, #252]	; (8004010 <HAL_DMA_IRQHandler+0xe18>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d045      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a3e      	ldr	r2, [pc, #248]	; (8004014 <HAL_DMA_IRQHandler+0xe1c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d040      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a3c      	ldr	r2, [pc, #240]	; (8004018 <HAL_DMA_IRQHandler+0xe20>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d03b      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a3b      	ldr	r2, [pc, #236]	; (800401c <HAL_DMA_IRQHandler+0xe24>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d036      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a39      	ldr	r2, [pc, #228]	; (8004020 <HAL_DMA_IRQHandler+0xe28>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d031      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a38      	ldr	r2, [pc, #224]	; (8004024 <HAL_DMA_IRQHandler+0xe2c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d02c      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a36      	ldr	r2, [pc, #216]	; (8004028 <HAL_DMA_IRQHandler+0xe30>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d027      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a35      	ldr	r2, [pc, #212]	; (800402c <HAL_DMA_IRQHandler+0xe34>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d022      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a33      	ldr	r2, [pc, #204]	; (8004030 <HAL_DMA_IRQHandler+0xe38>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d01d      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a32      	ldr	r2, [pc, #200]	; (8004034 <HAL_DMA_IRQHandler+0xe3c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d018      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a30      	ldr	r2, [pc, #192]	; (8004038 <HAL_DMA_IRQHandler+0xe40>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2f      	ldr	r2, [pc, #188]	; (800403c <HAL_DMA_IRQHandler+0xe44>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00e      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a2d      	ldr	r2, [pc, #180]	; (8004040 <HAL_DMA_IRQHandler+0xe48>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a2c      	ldr	r2, [pc, #176]	; (8004044 <HAL_DMA_IRQHandler+0xe4c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xdaa>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a2a      	ldr	r2, [pc, #168]	; (8004048 <HAL_DMA_IRQHandler+0xe50>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d108      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0xdbc>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 021c 	bic.w	r2, r2, #28
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e007      	b.n	8003fc4 <HAL_DMA_IRQHandler+0xdcc>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 020e 	bic.w	r2, r2, #14
 8003fc2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2201      	movs	r2, #1
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	4798      	blx	r3
 8003ffa:	e004      	b.n	8004006 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ffc:	bf00      	nop
 8003ffe:	e002      	b.n	8004006 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004000:	bf00      	nop
 8004002:	e000      	b.n	8004006 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004004:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004006:	3728      	adds	r7, #40	; 0x28
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40020010 	.word	0x40020010
 8004010:	40020028 	.word	0x40020028
 8004014:	40020040 	.word	0x40020040
 8004018:	40020058 	.word	0x40020058
 800401c:	40020070 	.word	0x40020070
 8004020:	40020088 	.word	0x40020088
 8004024:	400200a0 	.word	0x400200a0
 8004028:	400200b8 	.word	0x400200b8
 800402c:	40020410 	.word	0x40020410
 8004030:	40020428 	.word	0x40020428
 8004034:	40020440 	.word	0x40020440
 8004038:	40020458 	.word	0x40020458
 800403c:	40020470 	.word	0x40020470
 8004040:	40020488 	.word	0x40020488
 8004044:	400204a0 	.word	0x400204a0
 8004048:	400204b8 	.word	0x400204b8

0800404c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a42      	ldr	r2, [pc, #264]	; (8004164 <DMA_CalcBaseAndBitshift+0x118>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d04a      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a41      	ldr	r2, [pc, #260]	; (8004168 <DMA_CalcBaseAndBitshift+0x11c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d045      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a3f      	ldr	r2, [pc, #252]	; (800416c <DMA_CalcBaseAndBitshift+0x120>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d040      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a3e      	ldr	r2, [pc, #248]	; (8004170 <DMA_CalcBaseAndBitshift+0x124>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d03b      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a3c      	ldr	r2, [pc, #240]	; (8004174 <DMA_CalcBaseAndBitshift+0x128>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d036      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a3b      	ldr	r2, [pc, #236]	; (8004178 <DMA_CalcBaseAndBitshift+0x12c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d031      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a39      	ldr	r2, [pc, #228]	; (800417c <DMA_CalcBaseAndBitshift+0x130>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d02c      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a38      	ldr	r2, [pc, #224]	; (8004180 <DMA_CalcBaseAndBitshift+0x134>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d027      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a36      	ldr	r2, [pc, #216]	; (8004184 <DMA_CalcBaseAndBitshift+0x138>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d022      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a35      	ldr	r2, [pc, #212]	; (8004188 <DMA_CalcBaseAndBitshift+0x13c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d01d      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a33      	ldr	r2, [pc, #204]	; (800418c <DMA_CalcBaseAndBitshift+0x140>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d018      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a32      	ldr	r2, [pc, #200]	; (8004190 <DMA_CalcBaseAndBitshift+0x144>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a30      	ldr	r2, [pc, #192]	; (8004194 <DMA_CalcBaseAndBitshift+0x148>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a2f      	ldr	r2, [pc, #188]	; (8004198 <DMA_CalcBaseAndBitshift+0x14c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a2d      	ldr	r2, [pc, #180]	; (800419c <DMA_CalcBaseAndBitshift+0x150>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <DMA_CalcBaseAndBitshift+0xa8>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a2c      	ldr	r2, [pc, #176]	; (80041a0 <DMA_CalcBaseAndBitshift+0x154>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d101      	bne.n	80040f8 <DMA_CalcBaseAndBitshift+0xac>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <DMA_CalcBaseAndBitshift+0xae>
 80040f8:	2300      	movs	r3, #0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d024      	beq.n	8004148 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	3b10      	subs	r3, #16
 8004106:	4a27      	ldr	r2, [pc, #156]	; (80041a4 <DMA_CalcBaseAndBitshift+0x158>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	4a24      	ldr	r2, [pc, #144]	; (80041a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004118:	5cd3      	ldrb	r3, [r2, r3]
 800411a:	461a      	mov	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b03      	cmp	r3, #3
 8004124:	d908      	bls.n	8004138 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <DMA_CalcBaseAndBitshift+0x160>)
 800412e:	4013      	ands	r3, r2
 8004130:	1d1a      	adds	r2, r3, #4
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	659a      	str	r2, [r3, #88]	; 0x58
 8004136:	e00d      	b.n	8004154 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <DMA_CalcBaseAndBitshift+0x160>)
 8004140:	4013      	ands	r3, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6593      	str	r3, [r2, #88]	; 0x58
 8004146:	e005      	b.n	8004154 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40020010 	.word	0x40020010
 8004168:	40020028 	.word	0x40020028
 800416c:	40020040 	.word	0x40020040
 8004170:	40020058 	.word	0x40020058
 8004174:	40020070 	.word	0x40020070
 8004178:	40020088 	.word	0x40020088
 800417c:	400200a0 	.word	0x400200a0
 8004180:	400200b8 	.word	0x400200b8
 8004184:	40020410 	.word	0x40020410
 8004188:	40020428 	.word	0x40020428
 800418c:	40020440 	.word	0x40020440
 8004190:	40020458 	.word	0x40020458
 8004194:	40020470 	.word	0x40020470
 8004198:	40020488 	.word	0x40020488
 800419c:	400204a0 	.word	0x400204a0
 80041a0:	400204b8 	.word	0x400204b8
 80041a4:	aaaaaaab 	.word	0xaaaaaaab
 80041a8:	08009978 	.word	0x08009978
 80041ac:	fffffc00 	.word	0xfffffc00

080041b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d120      	bne.n	8004206 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d858      	bhi.n	800427e <DMA_CheckFifoParam+0xce>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <DMA_CheckFifoParam+0x24>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	080041e5 	.word	0x080041e5
 80041d8:	080041f7 	.word	0x080041f7
 80041dc:	080041e5 	.word	0x080041e5
 80041e0:	0800427f 	.word	0x0800427f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d048      	beq.n	8004282 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041f4:	e045      	b.n	8004282 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041fe:	d142      	bne.n	8004286 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004204:	e03f      	b.n	8004286 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800420e:	d123      	bne.n	8004258 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	2b03      	cmp	r3, #3
 8004216:	d838      	bhi.n	800428a <DMA_CheckFifoParam+0xda>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <DMA_CheckFifoParam+0x70>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004231 	.word	0x08004231
 8004224:	08004237 	.word	0x08004237
 8004228:	08004231 	.word	0x08004231
 800422c:	08004249 	.word	0x08004249
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
        break;
 8004234:	e030      	b.n	8004298 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d025      	beq.n	800428e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004246:	e022      	b.n	800428e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004250:	d11f      	bne.n	8004292 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004256:	e01c      	b.n	8004292 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	2b02      	cmp	r3, #2
 800425e:	d902      	bls.n	8004266 <DMA_CheckFifoParam+0xb6>
 8004260:	2b03      	cmp	r3, #3
 8004262:	d003      	beq.n	800426c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004264:	e018      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
        break;
 800426a:	e015      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00e      	beq.n	8004296 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	73fb      	strb	r3, [r7, #15]
    break;
 800427c:	e00b      	b.n	8004296 <DMA_CheckFifoParam+0xe6>
        break;
 800427e:	bf00      	nop
 8004280:	e00a      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        break;
 8004282:	bf00      	nop
 8004284:	e008      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        break;
 8004286:	bf00      	nop
 8004288:	e006      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        break;
 800428a:	bf00      	nop
 800428c:	e004      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        break;
 800428e:	bf00      	nop
 8004290:	e002      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
        break;
 8004292:	bf00      	nop
 8004294:	e000      	b.n	8004298 <DMA_CheckFifoParam+0xe8>
    break;
 8004296:	bf00      	nop
    }
  }

  return status;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop

080042a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a38      	ldr	r2, [pc, #224]	; (800439c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d022      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a36      	ldr	r2, [pc, #216]	; (80043a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d01d      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a35      	ldr	r2, [pc, #212]	; (80043a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d018      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a32      	ldr	r2, [pc, #200]	; (80043ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00e      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a30      	ldr	r2, [pc, #192]	; (80043b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d009      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2f      	ldr	r2, [pc, #188]	; (80043b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800430a:	2300      	movs	r3, #0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01a      	beq.n	8004346 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	3b08      	subs	r3, #8
 8004318:	4a28      	ldr	r2, [pc, #160]	; (80043bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	461a      	mov	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004334:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	2201      	movs	r2, #1
 800433e:	409a      	lsls	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004344:	e024      	b.n	8004390 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	3b10      	subs	r3, #16
 800434e:	4a1e      	ldr	r2, [pc, #120]	; (80043c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4a1c      	ldr	r2, [pc, #112]	; (80043cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d806      	bhi.n	800436e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d902      	bls.n	800436e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3308      	adds	r3, #8
 800436c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	461a      	mov	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004380:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	2201      	movs	r2, #1
 800438a:	409a      	lsls	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	58025408 	.word	0x58025408
 80043a0:	5802541c 	.word	0x5802541c
 80043a4:	58025430 	.word	0x58025430
 80043a8:	58025444 	.word	0x58025444
 80043ac:	58025458 	.word	0x58025458
 80043b0:	5802546c 	.word	0x5802546c
 80043b4:	58025480 	.word	0x58025480
 80043b8:	58025494 	.word	0x58025494
 80043bc:	cccccccd 	.word	0xcccccccd
 80043c0:	16009600 	.word	0x16009600
 80043c4:	58025880 	.word	0x58025880
 80043c8:	aaaaaaab 	.word	0xaaaaaaab
 80043cc:	400204b8 	.word	0x400204b8
 80043d0:	4002040f 	.word	0x4002040f
 80043d4:	10008200 	.word	0x10008200
 80043d8:	40020880 	.word	0x40020880

080043dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d04a      	beq.n	8004488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d847      	bhi.n	8004488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a25      	ldr	r2, [pc, #148]	; (8004494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a24      	ldr	r2, [pc, #144]	; (8004498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d01d      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a22      	ldr	r2, [pc, #136]	; (800449c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a21      	ldr	r2, [pc, #132]	; (80044a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1f      	ldr	r2, [pc, #124]	; (80044a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1c      	ldr	r2, [pc, #112]	; (80044ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1b      	ldr	r2, [pc, #108]	; (80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	461a      	mov	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a15      	ldr	r2, [pc, #84]	; (80044b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004464:	671a      	str	r2, [r3, #112]	; 0x70
 8004466:	e009      	b.n	800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	461a      	mov	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800447a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3b01      	subs	r3, #1
 8004480:	2201      	movs	r2, #1
 8004482:	409a      	lsls	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	58025408 	.word	0x58025408
 8004498:	5802541c 	.word	0x5802541c
 800449c:	58025430 	.word	0x58025430
 80044a0:	58025444 	.word	0x58025444
 80044a4:	58025458 	.word	0x58025458
 80044a8:	5802546c 	.word	0x5802546c
 80044ac:	58025480 	.word	0x58025480
 80044b0:	58025494 	.word	0x58025494
 80044b4:	1600963f 	.word	0x1600963f
 80044b8:	58025940 	.word	0x58025940
 80044bc:	1000823f 	.word	0x1000823f
 80044c0:	40020940 	.word	0x40020940

080044c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044d2:	4b89      	ldr	r3, [pc, #548]	; (80046f8 <HAL_GPIO_Init+0x234>)
 80044d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044d6:	e194      	b.n	8004802 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2101      	movs	r1, #1
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8186 	beq.w	80047fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d00b      	beq.n	8004510 <HAL_GPIO_Init+0x4c>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d007      	beq.n	8004510 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004504:	2b11      	cmp	r3, #17
 8004506:	d003      	beq.n	8004510 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b12      	cmp	r3, #18
 800450e:	d130      	bne.n	8004572 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	2203      	movs	r2, #3
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4013      	ands	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004546:	2201      	movs	r2, #1
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	43db      	mvns	r3, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4013      	ands	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	f003 0201 	and.w	r2, r3, #1
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	2203      	movs	r2, #3
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4013      	ands	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d003      	beq.n	80045b2 <HAL_GPIO_Init+0xee>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b12      	cmp	r3, #18
 80045b0:	d123      	bne.n	80045fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	08da      	lsrs	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3208      	adds	r2, #8
 80045ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	220f      	movs	r2, #15
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4013      	ands	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	08da      	lsrs	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3208      	adds	r2, #8
 80045f4:	69b9      	ldr	r1, [r7, #24]
 80045f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	2203      	movs	r2, #3
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4013      	ands	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 0203 	and.w	r2, r3, #3
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80e0 	beq.w	80047fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800463c:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <HAL_GPIO_Init+0x238>)
 800463e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004642:	4a2e      	ldr	r2, [pc, #184]	; (80046fc <HAL_GPIO_Init+0x238>)
 8004644:	f043 0302 	orr.w	r3, r3, #2
 8004648:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800464c:	4b2b      	ldr	r3, [pc, #172]	; (80046fc <HAL_GPIO_Init+0x238>)
 800464e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800465a:	4a29      	ldr	r2, [pc, #164]	; (8004700 <HAL_GPIO_Init+0x23c>)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	3302      	adds	r3, #2
 8004662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	220f      	movs	r2, #15
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43db      	mvns	r3, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4013      	ands	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a20      	ldr	r2, [pc, #128]	; (8004704 <HAL_GPIO_Init+0x240>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d052      	beq.n	800472c <HAL_GPIO_Init+0x268>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1f      	ldr	r2, [pc, #124]	; (8004708 <HAL_GPIO_Init+0x244>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d031      	beq.n	80046f2 <HAL_GPIO_Init+0x22e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1e      	ldr	r2, [pc, #120]	; (800470c <HAL_GPIO_Init+0x248>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d02b      	beq.n	80046ee <HAL_GPIO_Init+0x22a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <HAL_GPIO_Init+0x24c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d025      	beq.n	80046ea <HAL_GPIO_Init+0x226>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <HAL_GPIO_Init+0x250>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01f      	beq.n	80046e6 <HAL_GPIO_Init+0x222>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1b      	ldr	r2, [pc, #108]	; (8004718 <HAL_GPIO_Init+0x254>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d019      	beq.n	80046e2 <HAL_GPIO_Init+0x21e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1a      	ldr	r2, [pc, #104]	; (800471c <HAL_GPIO_Init+0x258>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_GPIO_Init+0x21a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a19      	ldr	r2, [pc, #100]	; (8004720 <HAL_GPIO_Init+0x25c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00d      	beq.n	80046da <HAL_GPIO_Init+0x216>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a18      	ldr	r2, [pc, #96]	; (8004724 <HAL_GPIO_Init+0x260>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d007      	beq.n	80046d6 <HAL_GPIO_Init+0x212>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a17      	ldr	r2, [pc, #92]	; (8004728 <HAL_GPIO_Init+0x264>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d101      	bne.n	80046d2 <HAL_GPIO_Init+0x20e>
 80046ce:	2309      	movs	r3, #9
 80046d0:	e02d      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046d2:	230a      	movs	r3, #10
 80046d4:	e02b      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046d6:	2308      	movs	r3, #8
 80046d8:	e029      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046da:	2307      	movs	r3, #7
 80046dc:	e027      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046de:	2306      	movs	r3, #6
 80046e0:	e025      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046e2:	2305      	movs	r3, #5
 80046e4:	e023      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046e6:	2304      	movs	r3, #4
 80046e8:	e021      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046ea:	2303      	movs	r3, #3
 80046ec:	e01f      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e01d      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e01b      	b.n	800472e <HAL_GPIO_Init+0x26a>
 80046f6:	bf00      	nop
 80046f8:	58000080 	.word	0x58000080
 80046fc:	58024400 	.word	0x58024400
 8004700:	58000400 	.word	0x58000400
 8004704:	58020000 	.word	0x58020000
 8004708:	58020400 	.word	0x58020400
 800470c:	58020800 	.word	0x58020800
 8004710:	58020c00 	.word	0x58020c00
 8004714:	58021000 	.word	0x58021000
 8004718:	58021400 	.word	0x58021400
 800471c:	58021800 	.word	0x58021800
 8004720:	58021c00 	.word	0x58021c00
 8004724:	58022000 	.word	0x58022000
 8004728:	58022400 	.word	0x58022400
 800472c:	2300      	movs	r3, #0
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	f002 0203 	and.w	r2, r2, #3
 8004734:	0092      	lsls	r2, r2, #2
 8004736:	4093      	lsls	r3, r2
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800473e:	4938      	ldr	r1, [pc, #224]	; (8004820 <HAL_GPIO_Init+0x35c>)
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	089b      	lsrs	r3, r3, #2
 8004744:	3302      	adds	r3, #2
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80047f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	3301      	adds	r3, #1
 8004800:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	f47f ae63 	bne.w	80044d8 <HAL_GPIO_Init+0x14>
  }
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	3724      	adds	r7, #36	; 0x24
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	58000400 	.word	0x58000400

08004824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	807b      	strh	r3, [r7, #2]
 8004830:	4613      	mov	r3, r2
 8004832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004834:	787b      	ldrb	r3, [r7, #1]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800483a:	887a      	ldrh	r2, [r7, #2]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004840:	e003      	b.n	800484a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004842:	887b      	ldrh	r3, [r7, #2]
 8004844:	041a      	lsls	r2, r3, #16
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	619a      	str	r2, [r3, #24]
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	4603      	mov	r3, r0
 800485e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004864:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fc fe27 	bl	80014d0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004894:	4b19      	ldr	r3, [pc, #100]	; (80048fc <HAL_PWREx_ConfigSupply+0x70>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b04      	cmp	r3, #4
 800489e:	d00a      	beq.n	80048b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80048a0:	4b16      	ldr	r3, [pc, #88]	; (80048fc <HAL_PWREx_ConfigSupply+0x70>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d001      	beq.n	80048b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e01f      	b.n	80048f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e01d      	b.n	80048f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80048b6:	4b11      	ldr	r3, [pc, #68]	; (80048fc <HAL_PWREx_ConfigSupply+0x70>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f023 0207 	bic.w	r2, r3, #7
 80048be:	490f      	ldr	r1, [pc, #60]	; (80048fc <HAL_PWREx_ConfigSupply+0x70>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80048c6:	f7fd fab1 	bl	8001e2c <HAL_GetTick>
 80048ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048cc:	e009      	b.n	80048e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048ce:	f7fd faad 	bl	8001e2c <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048dc:	d901      	bls.n	80048e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e007      	b.n	80048f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048e2:	4b06      	ldr	r3, [pc, #24]	; (80048fc <HAL_PWREx_ConfigSupply+0x70>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ee:	d1ee      	bne.n	80048ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	58024800 	.word	0x58024800

08004900 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08c      	sub	sp, #48	; 0x30
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e3ff      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 8087 	beq.w	8004a2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004920:	4b99      	ldr	r3, [pc, #612]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800492a:	4b97      	ldr	r3, [pc, #604]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004932:	2b10      	cmp	r3, #16
 8004934:	d007      	beq.n	8004946 <HAL_RCC_OscConfig+0x46>
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	2b18      	cmp	r3, #24
 800493a:	d110      	bne.n	800495e <HAL_RCC_OscConfig+0x5e>
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d10b      	bne.n	800495e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004946:	4b90      	ldr	r3, [pc, #576]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d06c      	beq.n	8004a2c <HAL_RCC_OscConfig+0x12c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d168      	bne.n	8004a2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e3d9      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004966:	d106      	bne.n	8004976 <HAL_RCC_OscConfig+0x76>
 8004968:	4b87      	ldr	r3, [pc, #540]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a86      	ldr	r2, [pc, #536]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 800496e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	e02e      	b.n	80049d4 <HAL_RCC_OscConfig+0xd4>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10c      	bne.n	8004998 <HAL_RCC_OscConfig+0x98>
 800497e:	4b82      	ldr	r3, [pc, #520]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a81      	ldr	r2, [pc, #516]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	4b7f      	ldr	r3, [pc, #508]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a7e      	ldr	r2, [pc, #504]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	e01d      	b.n	80049d4 <HAL_RCC_OscConfig+0xd4>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a0:	d10c      	bne.n	80049bc <HAL_RCC_OscConfig+0xbc>
 80049a2:	4b79      	ldr	r3, [pc, #484]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a78      	ldr	r2, [pc, #480]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 80049a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	4b76      	ldr	r3, [pc, #472]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a75      	ldr	r2, [pc, #468]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	e00b      	b.n	80049d4 <HAL_RCC_OscConfig+0xd4>
 80049bc:	4b72      	ldr	r3, [pc, #456]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a71      	ldr	r2, [pc, #452]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 80049c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	4b6f      	ldr	r3, [pc, #444]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a6e      	ldr	r2, [pc, #440]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 80049ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d013      	beq.n	8004a04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fd fa26 	bl	8001e2c <HAL_GetTick>
 80049e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e4:	f7fd fa22 	bl	8001e2c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	; 0x64
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e38d      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049f6:	4b64      	ldr	r3, [pc, #400]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0xe4>
 8004a02:	e014      	b.n	8004a2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fd fa12 	bl	8001e2c <HAL_GetTick>
 8004a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a0c:	f7fd fa0e 	bl	8001e2c <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	; 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e379      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a1e:	4b5a      	ldr	r3, [pc, #360]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x10c>
 8004a2a:	e000      	b.n	8004a2e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 80ae 	beq.w	8004b98 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a3c:	4b52      	ldr	r3, [pc, #328]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a46:	4b50      	ldr	r3, [pc, #320]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <HAL_RCC_OscConfig+0x162>
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	2b18      	cmp	r3, #24
 8004a56:	d13a      	bne.n	8004ace <HAL_RCC_OscConfig+0x1ce>
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d135      	bne.n	8004ace <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a62:	4b49      	ldr	r3, [pc, #292]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <HAL_RCC_OscConfig+0x17a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e34b      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7a:	f7fd f9e3 	bl	8001e44 <HAL_GetREVID>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d817      	bhi.n	8004ab8 <HAL_RCC_OscConfig+0x1b8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d108      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x1a2>
 8004a90:	4b3d      	ldr	r3, [pc, #244]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a98:	4a3b      	ldr	r2, [pc, #236]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aa0:	e07a      	b.n	8004b98 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa2:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	031b      	lsls	r3, r3, #12
 8004ab0:	4935      	ldr	r1, [pc, #212]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab6:	e06f      	b.n	8004b98 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab8:	4b33      	ldr	r3, [pc, #204]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	061b      	lsls	r3, r3, #24
 8004ac6:	4930      	ldr	r1, [pc, #192]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004acc:	e064      	b.n	8004b98 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d045      	beq.n	8004b62 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ad6:	4b2c      	ldr	r3, [pc, #176]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f023 0219 	bic.w	r2, r3, #25
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	4929      	ldr	r1, [pc, #164]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fd f9a0 	bl	8001e2c <HAL_GetTick>
 8004aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af0:	f7fd f99c 	bl	8001e2c <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e307      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b02:	4b21      	ldr	r3, [pc, #132]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0e:	f7fd f999 	bl	8001e44 <HAL_GetREVID>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d817      	bhi.n	8004b4c <HAL_RCC_OscConfig+0x24c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d108      	bne.n	8004b36 <HAL_RCC_OscConfig+0x236>
 8004b24:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004b2c:	4a16      	ldr	r2, [pc, #88]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b32:	6053      	str	r3, [r2, #4]
 8004b34:	e030      	b.n	8004b98 <HAL_RCC_OscConfig+0x298>
 8004b36:	4b14      	ldr	r3, [pc, #80]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	031b      	lsls	r3, r3, #12
 8004b44:	4910      	ldr	r1, [pc, #64]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	604b      	str	r3, [r1, #4]
 8004b4a:	e025      	b.n	8004b98 <HAL_RCC_OscConfig+0x298>
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	061b      	lsls	r3, r3, #24
 8004b5a:	490b      	ldr	r1, [pc, #44]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
 8004b60:	e01a      	b.n	8004b98 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b62:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <HAL_RCC_OscConfig+0x288>)
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7fd f95d 	bl	8001e2c <HAL_GetTick>
 8004b72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b74:	e00a      	b.n	8004b8c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b76:	f7fd f959 	bl	8001e2c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d903      	bls.n	8004b8c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e2c4      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
 8004b88:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b8c:	4ba4      	ldr	r3, [pc, #656]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1ee      	bne.n	8004b76 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80a9 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba6:	4b9e      	ldr	r3, [pc, #632]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bb0:	4b9b      	ldr	r3, [pc, #620]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d007      	beq.n	8004bcc <HAL_RCC_OscConfig+0x2cc>
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b18      	cmp	r3, #24
 8004bc0:	d13a      	bne.n	8004c38 <HAL_RCC_OscConfig+0x338>
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d135      	bne.n	8004c38 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bcc:	4b94      	ldr	r3, [pc, #592]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <HAL_RCC_OscConfig+0x2e4>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	2b80      	cmp	r3, #128	; 0x80
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e296      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004be4:	f7fd f92e 	bl	8001e44 <HAL_GetREVID>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d817      	bhi.n	8004c22 <HAL_RCC_OscConfig+0x322>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d108      	bne.n	8004c0c <HAL_RCC_OscConfig+0x30c>
 8004bfa:	4b89      	ldr	r3, [pc, #548]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c02:	4a87      	ldr	r2, [pc, #540]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004c04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c0a:	e075      	b.n	8004cf8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c0c:	4b84      	ldr	r3, [pc, #528]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	069b      	lsls	r3, r3, #26
 8004c1a:	4981      	ldr	r1, [pc, #516]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c20:	e06a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c22:	4b7f      	ldr	r3, [pc, #508]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	061b      	lsls	r3, r3, #24
 8004c30:	497b      	ldr	r1, [pc, #492]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c36:	e05f      	b.n	8004cf8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d042      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c40:	4b77      	ldr	r3, [pc, #476]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a76      	ldr	r2, [pc, #472]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4c:	f7fd f8ee 	bl	8001e2c <HAL_GetTick>
 8004c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c54:	f7fd f8ea 	bl	8001e2c <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e255      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c66:	4b6e      	ldr	r3, [pc, #440]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c72:	f7fd f8e7 	bl	8001e44 <HAL_GetREVID>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d817      	bhi.n	8004cb0 <HAL_RCC_OscConfig+0x3b0>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d108      	bne.n	8004c9a <HAL_RCC_OscConfig+0x39a>
 8004c88:	4b65      	ldr	r3, [pc, #404]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c90:	4a63      	ldr	r2, [pc, #396]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004c92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c96:	6053      	str	r3, [r2, #4]
 8004c98:	e02e      	b.n	8004cf8 <HAL_RCC_OscConfig+0x3f8>
 8004c9a:	4b61      	ldr	r3, [pc, #388]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	069b      	lsls	r3, r3, #26
 8004ca8:	495d      	ldr	r1, [pc, #372]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	604b      	str	r3, [r1, #4]
 8004cae:	e023      	b.n	8004cf8 <HAL_RCC_OscConfig+0x3f8>
 8004cb0:	4b5b      	ldr	r3, [pc, #364]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	4958      	ldr	r1, [pc, #352]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60cb      	str	r3, [r1, #12]
 8004cc4:	e018      	b.n	8004cf8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004cc6:	4b56      	ldr	r3, [pc, #344]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a55      	ldr	r2, [pc, #340]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd2:	f7fd f8ab 	bl	8001e2c <HAL_GetTick>
 8004cd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004cda:	f7fd f8a7 	bl	8001e2c <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e212      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cec:	4b4c      	ldr	r3, [pc, #304]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f0      	bne.n	8004cda <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d036      	beq.n	8004d72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d019      	beq.n	8004d40 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d0c:	4b44      	ldr	r3, [pc, #272]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d10:	4a43      	ldr	r2, [pc, #268]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fd f888 	bl	8001e2c <HAL_GetTick>
 8004d1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d20:	f7fd f884 	bl	8001e2c <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e1ef      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d32:	4b3b      	ldr	r3, [pc, #236]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0x420>
 8004d3e:	e018      	b.n	8004d72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d40:	4b37      	ldr	r3, [pc, #220]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d44:	4a36      	ldr	r2, [pc, #216]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4c:	f7fd f86e 	bl	8001e2c <HAL_GetTick>
 8004d50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d54:	f7fd f86a 	bl	8001e2c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e1d5      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d66:	4b2e      	ldr	r3, [pc, #184]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d036      	beq.n	8004dec <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d019      	beq.n	8004dba <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d86:	4b26      	ldr	r3, [pc, #152]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a25      	ldr	r2, [pc, #148]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004d8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d92:	f7fd f84b 	bl	8001e2c <HAL_GetTick>
 8004d96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d9a:	f7fd f847 	bl	8001e2c <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e1b2      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dac:	4b1c      	ldr	r3, [pc, #112]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x49a>
 8004db8:	e018      	b.n	8004dec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dba:	4b19      	ldr	r3, [pc, #100]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a18      	ldr	r2, [pc, #96]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004dc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dc4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dc6:	f7fd f831 	bl	8001e2c <HAL_GetTick>
 8004dca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004dce:	f7fd f82d 	bl	8001e2c <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e198      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004de0:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <HAL_RCC_OscConfig+0x520>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f0      	bne.n	8004dce <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8085 	beq.w	8004f04 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <HAL_RCC_OscConfig+0x524>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <HAL_RCC_OscConfig+0x524>)
 8004e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e06:	f7fd f811 	bl	8001e2c <HAL_GetTick>
 8004e0a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e0c:	e00c      	b.n	8004e28 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e0e:	f7fd f80d 	bl	8001e2c <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b64      	cmp	r3, #100	; 0x64
 8004e1a:	d905      	bls.n	8004e28 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e178      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
 8004e20:	58024400 	.word	0x58024400
 8004e24:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e28:	4b96      	ldr	r3, [pc, #600]	; (8005084 <HAL_RCC_OscConfig+0x784>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0ec      	beq.n	8004e0e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d106      	bne.n	8004e4a <HAL_RCC_OscConfig+0x54a>
 8004e3c:	4b92      	ldr	r3, [pc, #584]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	4a91      	ldr	r2, [pc, #580]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004e42:	f043 0301 	orr.w	r3, r3, #1
 8004e46:	6713      	str	r3, [r2, #112]	; 0x70
 8004e48:	e02d      	b.n	8004ea6 <HAL_RCC_OscConfig+0x5a6>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x56c>
 8004e52:	4b8d      	ldr	r3, [pc, #564]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e56:	4a8c      	ldr	r2, [pc, #560]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5e:	4b8a      	ldr	r3, [pc, #552]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	4a89      	ldr	r2, [pc, #548]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004e64:	f023 0304 	bic.w	r3, r3, #4
 8004e68:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6a:	e01c      	b.n	8004ea6 <HAL_RCC_OscConfig+0x5a6>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b05      	cmp	r3, #5
 8004e72:	d10c      	bne.n	8004e8e <HAL_RCC_OscConfig+0x58e>
 8004e74:	4b84      	ldr	r3, [pc, #528]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	4a83      	ldr	r2, [pc, #524]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004e7a:	f043 0304 	orr.w	r3, r3, #4
 8004e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e80:	4b81      	ldr	r3, [pc, #516]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	4a80      	ldr	r2, [pc, #512]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8c:	e00b      	b.n	8004ea6 <HAL_RCC_OscConfig+0x5a6>
 8004e8e:	4b7e      	ldr	r3, [pc, #504]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a7d      	ldr	r2, [pc, #500]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9a:	4b7b      	ldr	r3, [pc, #492]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	4a7a      	ldr	r2, [pc, #488]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004ea0:	f023 0304 	bic.w	r3, r3, #4
 8004ea4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d015      	beq.n	8004eda <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eae:	f7fc ffbd 	bl	8001e2c <HAL_GetTick>
 8004eb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb6:	f7fc ffb9 	bl	8001e2c <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e122      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ecc:	4b6e      	ldr	r3, [pc, #440]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0ee      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x5b6>
 8004ed8:	e014      	b.n	8004f04 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eda:	f7fc ffa7 	bl	8001e2c <HAL_GetTick>
 8004ede:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fc ffa3 	bl	8001e2c <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e10c      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ef8:	4b63      	ldr	r3, [pc, #396]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1ee      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8101 	beq.w	8005110 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f0e:	4b5e      	ldr	r3, [pc, #376]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f16:	2b18      	cmp	r3, #24
 8004f18:	f000 80bc 	beq.w	8005094 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	f040 8095 	bne.w	8005050 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f26:	4b58      	ldr	r3, [pc, #352]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a57      	ldr	r2, [pc, #348]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f32:	f7fc ff7b 	bl	8001e2c <HAL_GetTick>
 8004f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f3a:	f7fc ff77 	bl	8001e2c <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e0e2      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f4c:	4b4e      	ldr	r3, [pc, #312]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f0      	bne.n	8004f3a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f58:	4b4b      	ldr	r3, [pc, #300]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f5c:	4b4b      	ldr	r3, [pc, #300]	; (800508c <HAL_RCC_OscConfig+0x78c>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f68:	0112      	lsls	r2, r2, #4
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	4946      	ldr	r1, [pc, #280]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	628b      	str	r3, [r1, #40]	; 0x28
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	3b01      	subs	r3, #1
 8004f78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f80:	3b01      	subs	r3, #1
 8004f82:	025b      	lsls	r3, r3, #9
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	041b      	lsls	r3, r3, #16
 8004f90:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	061b      	lsls	r3, r3, #24
 8004f9e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fa2:	4939      	ldr	r1, [pc, #228]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004fa8:	4b37      	ldr	r3, [pc, #220]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	4a36      	ldr	r2, [pc, #216]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fb4:	4b34      	ldr	r3, [pc, #208]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb8:	4b35      	ldr	r3, [pc, #212]	; (8005090 <HAL_RCC_OscConfig+0x790>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fc0:	00d2      	lsls	r2, r2, #3
 8004fc2:	4931      	ldr	r1, [pc, #196]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004fc8:	4b2f      	ldr	r3, [pc, #188]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	f023 020c 	bic.w	r2, r3, #12
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	492c      	ldr	r1, [pc, #176]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fda:	4b2b      	ldr	r3, [pc, #172]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	f023 0202 	bic.w	r2, r3, #2
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	4928      	ldr	r1, [pc, #160]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fec:	4b26      	ldr	r3, [pc, #152]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	4a25      	ldr	r2, [pc, #148]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff8:	4b23      	ldr	r3, [pc, #140]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	4a22      	ldr	r2, [pc, #136]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8004ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005002:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005004:	4b20      	ldr	r3, [pc, #128]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	4a1f      	ldr	r2, [pc, #124]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 800500a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800500e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005010:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	4a1c      	ldr	r2, [pc, #112]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800501c:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a19      	ldr	r2, [pc, #100]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8005022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005028:	f7fc ff00 	bl	8001e2c <HAL_GetTick>
 800502c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005030:	f7fc fefc 	bl	8001e2c <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e067      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005042:	4b11      	ldr	r3, [pc, #68]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <HAL_RCC_OscConfig+0x730>
 800504e:	e05f      	b.n	8005110 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005050:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a0c      	ldr	r2, [pc, #48]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8005056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800505a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fc fee6 	bl	8001e2c <HAL_GetTick>
 8005060:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005064:	f7fc fee2 	bl	8001e2c <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e04d      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005076:	4b04      	ldr	r3, [pc, #16]	; (8005088 <HAL_RCC_OscConfig+0x788>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x764>
 8005082:	e045      	b.n	8005110 <HAL_RCC_OscConfig+0x810>
 8005084:	58024800 	.word	0x58024800
 8005088:	58024400 	.word	0x58024400
 800508c:	fffffc0c 	.word	0xfffffc0c
 8005090:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005094:	4b21      	ldr	r3, [pc, #132]	; (800511c <HAL_RCC_OscConfig+0x81c>)
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_RCC_OscConfig+0x81c>)
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d031      	beq.n	800510c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f003 0203 	and.w	r2, r3, #3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d12a      	bne.n	800510c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d122      	bne.n	800510c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d11a      	bne.n	800510c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	0a5b      	lsrs	r3, r3, #9
 80050da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d111      	bne.n	800510c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	0c1b      	lsrs	r3, r3, #16
 80050ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d108      	bne.n	800510c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	0e1b      	lsrs	r3, r3, #24
 80050fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005106:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005108:	429a      	cmp	r2, r3
 800510a:	d001      	beq.n	8005110 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3730      	adds	r7, #48	; 0x30
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	58024400 	.word	0x58024400

08005120 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e19c      	b.n	800546e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005134:	4b8a      	ldr	r3, [pc, #552]	; (8005360 <HAL_RCC_ClockConfig+0x240>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d910      	bls.n	8005164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005142:	4b87      	ldr	r3, [pc, #540]	; (8005360 <HAL_RCC_ClockConfig+0x240>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f023 020f 	bic.w	r2, r3, #15
 800514a:	4985      	ldr	r1, [pc, #532]	; (8005360 <HAL_RCC_ClockConfig+0x240>)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	4313      	orrs	r3, r2
 8005150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005152:	4b83      	ldr	r3, [pc, #524]	; (8005360 <HAL_RCC_ClockConfig+0x240>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d001      	beq.n	8005164 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e184      	b.n	800546e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d010      	beq.n	8005192 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	4b7b      	ldr	r3, [pc, #492]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800517c:	429a      	cmp	r2, r3
 800517e:	d908      	bls.n	8005192 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005180:	4b78      	ldr	r3, [pc, #480]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	4975      	ldr	r1, [pc, #468]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 800518e:	4313      	orrs	r3, r2
 8005190:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d010      	beq.n	80051c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	4b70      	ldr	r3, [pc, #448]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d908      	bls.n	80051c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051ae:	4b6d      	ldr	r3, [pc, #436]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	496a      	ldr	r1, [pc, #424]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d010      	beq.n	80051ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699a      	ldr	r2, [r3, #24]
 80051d0:	4b64      	ldr	r3, [pc, #400]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051d8:	429a      	cmp	r2, r3
 80051da:	d908      	bls.n	80051ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051dc:	4b61      	ldr	r3, [pc, #388]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	495e      	ldr	r1, [pc, #376]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d010      	beq.n	800521c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69da      	ldr	r2, [r3, #28]
 80051fe:	4b59      	ldr	r3, [pc, #356]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005206:	429a      	cmp	r2, r3
 8005208:	d908      	bls.n	800521c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800520a:	4b56      	ldr	r3, [pc, #344]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	4953      	ldr	r1, [pc, #332]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 8005218:	4313      	orrs	r3, r2
 800521a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d010      	beq.n	800524a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	4b4d      	ldr	r3, [pc, #308]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	429a      	cmp	r2, r3
 8005236:	d908      	bls.n	800524a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005238:	4b4a      	ldr	r3, [pc, #296]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	f023 020f 	bic.w	r2, r3, #15
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4947      	ldr	r1, [pc, #284]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 8005246:	4313      	orrs	r3, r2
 8005248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d055      	beq.n	8005302 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005256:	4b43      	ldr	r3, [pc, #268]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	4940      	ldr	r1, [pc, #256]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 8005264:	4313      	orrs	r3, r2
 8005266:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d107      	bne.n	8005280 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005270:	4b3c      	ldr	r3, [pc, #240]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d121      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0f6      	b.n	800546e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b03      	cmp	r3, #3
 8005286:	d107      	bne.n	8005298 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005288:	4b36      	ldr	r3, [pc, #216]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d115      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0ea      	b.n	800546e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052a0:	4b30      	ldr	r3, [pc, #192]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d109      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0de      	b.n	800546e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052b0:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e0d6      	b.n	800546e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052c0:	4b28      	ldr	r3, [pc, #160]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f023 0207 	bic.w	r2, r3, #7
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4925      	ldr	r1, [pc, #148]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d2:	f7fc fdab 	bl	8001e2c <HAL_GetTick>
 80052d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d8:	e00a      	b.n	80052f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052da:	f7fc fda7 	bl	8001e2c <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e0be      	b.n	800546e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f0:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	429a      	cmp	r2, r3
 8005300:	d1eb      	bne.n	80052da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d010      	beq.n	8005330 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	4b14      	ldr	r3, [pc, #80]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	429a      	cmp	r2, r3
 800531c:	d208      	bcs.n	8005330 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f023 020f 	bic.w	r2, r3, #15
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	490e      	ldr	r1, [pc, #56]	; (8005364 <HAL_RCC_ClockConfig+0x244>)
 800532c:	4313      	orrs	r3, r2
 800532e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_RCC_ClockConfig+0x240>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d214      	bcs.n	8005368 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533e:	4b08      	ldr	r3, [pc, #32]	; (8005360 <HAL_RCC_ClockConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f023 020f 	bic.w	r2, r3, #15
 8005346:	4906      	ldr	r1, [pc, #24]	; (8005360 <HAL_RCC_ClockConfig+0x240>)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	4313      	orrs	r3, r2
 800534c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800534e:	4b04      	ldr	r3, [pc, #16]	; (8005360 <HAL_RCC_ClockConfig+0x240>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d005      	beq.n	8005368 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e086      	b.n	800546e <HAL_RCC_ClockConfig+0x34e>
 8005360:	52002000 	.word	0x52002000
 8005364:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d010      	beq.n	8005396 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	4b3f      	ldr	r3, [pc, #252]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005380:	429a      	cmp	r2, r3
 8005382:	d208      	bcs.n	8005396 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005384:	4b3c      	ldr	r3, [pc, #240]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	4939      	ldr	r1, [pc, #228]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 8005392:	4313      	orrs	r3, r2
 8005394:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d010      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	4b34      	ldr	r3, [pc, #208]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d208      	bcs.n	80053c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053b2:	4b31      	ldr	r3, [pc, #196]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	492e      	ldr	r1, [pc, #184]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d010      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	4b28      	ldr	r3, [pc, #160]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053dc:	429a      	cmp	r2, r3
 80053de:	d208      	bcs.n	80053f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053e0:	4b25      	ldr	r3, [pc, #148]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	4922      	ldr	r1, [pc, #136]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d010      	beq.n	8005420 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69da      	ldr	r2, [r3, #28]
 8005402:	4b1d      	ldr	r3, [pc, #116]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800540a:	429a      	cmp	r2, r3
 800540c:	d208      	bcs.n	8005420 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800540e:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	4917      	ldr	r1, [pc, #92]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 800541c:	4313      	orrs	r3, r2
 800541e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005420:	f000 f834 	bl	800548c <HAL_RCC_GetSysClockFreq>
 8005424:	4602      	mov	r2, r0
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	4912      	ldr	r1, [pc, #72]	; (800547c <HAL_RCC_ClockConfig+0x35c>)
 8005432:	5ccb      	ldrb	r3, [r1, r3]
 8005434:	f003 031f 	and.w	r3, r3, #31
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
 800543c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800543e:	4b0e      	ldr	r3, [pc, #56]	; (8005478 <HAL_RCC_ClockConfig+0x358>)
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	4a0d      	ldr	r2, [pc, #52]	; (800547c <HAL_RCC_ClockConfig+0x35c>)
 8005448:	5cd3      	ldrb	r3, [r2, r3]
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	fa22 f303 	lsr.w	r3, r2, r3
 8005454:	4a0a      	ldr	r2, [pc, #40]	; (8005480 <HAL_RCC_ClockConfig+0x360>)
 8005456:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005458:	4a0a      	ldr	r2, [pc, #40]	; (8005484 <HAL_RCC_ClockConfig+0x364>)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800545e:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <HAL_RCC_ClockConfig+0x368>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7fc fc98 	bl	8001d98 <HAL_InitTick>
 8005468:	4603      	mov	r3, r0
 800546a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800546c:	7bfb      	ldrb	r3, [r7, #15]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	58024400 	.word	0x58024400
 800547c:	08009968 	.word	0x08009968
 8005480:	20000004 	.word	0x20000004
 8005484:	20000000 	.word	0x20000000
 8005488:	20000008 	.word	0x20000008

0800548c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800548c:	b480      	push	{r7}
 800548e:	b089      	sub	sp, #36	; 0x24
 8005490:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005492:	4bb3      	ldr	r3, [pc, #716]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800549a:	2b18      	cmp	r3, #24
 800549c:	f200 8155 	bhi.w	800574a <HAL_RCC_GetSysClockFreq+0x2be>
 80054a0:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	0800550d 	.word	0x0800550d
 80054ac:	0800574b 	.word	0x0800574b
 80054b0:	0800574b 	.word	0x0800574b
 80054b4:	0800574b 	.word	0x0800574b
 80054b8:	0800574b 	.word	0x0800574b
 80054bc:	0800574b 	.word	0x0800574b
 80054c0:	0800574b 	.word	0x0800574b
 80054c4:	0800574b 	.word	0x0800574b
 80054c8:	08005533 	.word	0x08005533
 80054cc:	0800574b 	.word	0x0800574b
 80054d0:	0800574b 	.word	0x0800574b
 80054d4:	0800574b 	.word	0x0800574b
 80054d8:	0800574b 	.word	0x0800574b
 80054dc:	0800574b 	.word	0x0800574b
 80054e0:	0800574b 	.word	0x0800574b
 80054e4:	0800574b 	.word	0x0800574b
 80054e8:	08005539 	.word	0x08005539
 80054ec:	0800574b 	.word	0x0800574b
 80054f0:	0800574b 	.word	0x0800574b
 80054f4:	0800574b 	.word	0x0800574b
 80054f8:	0800574b 	.word	0x0800574b
 80054fc:	0800574b 	.word	0x0800574b
 8005500:	0800574b 	.word	0x0800574b
 8005504:	0800574b 	.word	0x0800574b
 8005508:	0800553f 	.word	0x0800553f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800550c:	4b94      	ldr	r3, [pc, #592]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d009      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005518:	4b91      	ldr	r3, [pc, #580]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	08db      	lsrs	r3, r3, #3
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	4a90      	ldr	r2, [pc, #576]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005524:	fa22 f303 	lsr.w	r3, r2, r3
 8005528:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800552a:	e111      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800552c:	4b8d      	ldr	r3, [pc, #564]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800552e:	61bb      	str	r3, [r7, #24]
    break;
 8005530:	e10e      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005532:	4b8d      	ldr	r3, [pc, #564]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005534:	61bb      	str	r3, [r7, #24]
    break;
 8005536:	e10b      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005538:	4b8c      	ldr	r3, [pc, #560]	; (800576c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800553a:	61bb      	str	r3, [r7, #24]
    break;
 800553c:	e108      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800553e:	4b88      	ldr	r3, [pc, #544]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005548:	4b85      	ldr	r3, [pc, #532]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005552:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005554:	4b82      	ldr	r3, [pc, #520]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800555e:	4b80      	ldr	r3, [pc, #512]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005562:	08db      	lsrs	r3, r3, #3
 8005564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	fb02 f303 	mul.w	r3, r2, r3
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005576:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 80e1 	beq.w	8005744 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b02      	cmp	r3, #2
 8005586:	f000 8083 	beq.w	8005690 <HAL_RCC_GetSysClockFreq+0x204>
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b02      	cmp	r3, #2
 800558e:	f200 80a1 	bhi.w	80056d4 <HAL_RCC_GetSysClockFreq+0x248>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_RCC_GetSysClockFreq+0x114>
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d056      	beq.n	800564c <HAL_RCC_GetSysClockFreq+0x1c0>
 800559e:	e099      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055a0:	4b6f      	ldr	r3, [pc, #444]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d02d      	beq.n	8005608 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055ac:	4b6c      	ldr	r3, [pc, #432]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	08db      	lsrs	r3, r3, #3
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	4a6b      	ldr	r2, [pc, #428]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
 80055bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	ee07 3a90 	vmov	s15, r3
 80055c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d6:	4b62      	ldr	r3, [pc, #392]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005602:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005606:	e087      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	ee07 3a90 	vmov	s15, r3
 800560e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005612:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005774 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800561a:	4b51      	ldr	r3, [pc, #324]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800562a:	ed97 6a02 	vldr	s12, [r7, #8]
 800562e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005770 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800563a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800563e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800564a:	e065      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	ee07 3a90 	vmov	s15, r3
 8005652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005656:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005778 <HAL_RCC_GetSysClockFreq+0x2ec>
 800565a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800565e:	4b40      	ldr	r3, [pc, #256]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800566e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005672:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005770 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800567a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800567e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800568e:	e043      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	ee07 3a90 	vmov	s15, r3
 8005696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800577c <HAL_RCC_GetSysClockFreq+0x2f0>
 800569e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a2:	4b2f      	ldr	r3, [pc, #188]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80056b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056d2:	e021      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005778 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e6:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800570a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800570e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005716:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005718:	4b11      	ldr	r3, [pc, #68]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	0a5b      	lsrs	r3, r3, #9
 800571e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005722:	3301      	adds	r3, #1
 8005724:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	ee07 3a90 	vmov	s15, r3
 800572c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005730:	edd7 6a07 	vldr	s13, [r7, #28]
 8005734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800573c:	ee17 3a90 	vmov	r3, s15
 8005740:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005742:	e005      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	61bb      	str	r3, [r7, #24]
    break;
 8005748:	e002      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800574a:	4b07      	ldr	r3, [pc, #28]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800574c:	61bb      	str	r3, [r7, #24]
    break;
 800574e:	bf00      	nop
  }

  return sysclockfreq;
 8005750:	69bb      	ldr	r3, [r7, #24]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3724      	adds	r7, #36	; 0x24
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	58024400 	.word	0x58024400
 8005764:	03d09000 	.word	0x03d09000
 8005768:	003d0900 	.word	0x003d0900
 800576c:	02dc6c00 	.word	0x02dc6c00
 8005770:	46000000 	.word	0x46000000
 8005774:	4c742400 	.word	0x4c742400
 8005778:	4a742400 	.word	0x4a742400
 800577c:	4c371b00 	.word	0x4c371b00

08005780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005786:	f7ff fe81 	bl	800548c <HAL_RCC_GetSysClockFreq>
 800578a:	4602      	mov	r2, r0
 800578c:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	490f      	ldr	r1, [pc, #60]	; (80057d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005798:	5ccb      	ldrb	r3, [r1, r3]
 800579a:	f003 031f 	and.w	r3, r3, #31
 800579e:	fa22 f303 	lsr.w	r3, r2, r3
 80057a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057a4:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f003 030f 	and.w	r3, r3, #15
 80057ac:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80057ae:	5cd3      	ldrb	r3, [r2, r3]
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ba:	4a07      	ldr	r2, [pc, #28]	; (80057d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80057bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057be:	4a07      	ldr	r2, [pc, #28]	; (80057dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057c4:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80057c6:	681b      	ldr	r3, [r3, #0]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	58024400 	.word	0x58024400
 80057d4:	08009968 	.word	0x08009968
 80057d8:	20000004 	.word	0x20000004
 80057dc:	20000000 	.word	0x20000000

080057e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80057e4:	f7ff ffcc 	bl	8005780 <HAL_RCC_GetHCLKFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	4b06      	ldr	r3, [pc, #24]	; (8005804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	091b      	lsrs	r3, r3, #4
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	4904      	ldr	r1, [pc, #16]	; (8005808 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057f6:	5ccb      	ldrb	r3, [r1, r3]
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005800:	4618      	mov	r0, r3
 8005802:	bd80      	pop	{r7, pc}
 8005804:	58024400 	.word	0x58024400
 8005808:	08009968 	.word	0x08009968

0800580c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005810:	f7ff ffb6 	bl	8005780 <HAL_RCC_GetHCLKFreq>
 8005814:	4602      	mov	r2, r0
 8005816:	4b06      	ldr	r3, [pc, #24]	; (8005830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	4904      	ldr	r1, [pc, #16]	; (8005834 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005822:	5ccb      	ldrb	r3, [r1, r3]
 8005824:	f003 031f 	and.w	r3, r3, #31
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800582c:	4618      	mov	r0, r3
 800582e:	bd80      	pop	{r7, pc}
 8005830:	58024400 	.word	0x58024400
 8005834:	08009968 	.word	0x08009968

08005838 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005840:	2300      	movs	r3, #0
 8005842:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005844:	2300      	movs	r3, #0
 8005846:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d03f      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005858:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800585c:	d02a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800585e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005862:	d824      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005868:	d018      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800586a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800586e:	d81e      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005878:	d007      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800587a:	e018      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800587c:	4bab      	ldr	r3, [pc, #684]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	4aaa      	ldr	r2, [pc, #680]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005888:	e015      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3304      	adds	r3, #4
 800588e:	2102      	movs	r1, #2
 8005890:	4618      	mov	r0, r3
 8005892:	f001 f9cf 	bl	8006c34 <RCCEx_PLL2_Config>
 8005896:	4603      	mov	r3, r0
 8005898:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800589a:	e00c      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3324      	adds	r3, #36	; 0x24
 80058a0:	2102      	movs	r1, #2
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 fa78 	bl	8006d98 <RCCEx_PLL3_Config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058ac:	e003      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	75fb      	strb	r3, [r7, #23]
      break;
 80058b2:	e000      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80058b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d109      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80058bc:	4b9b      	ldr	r3, [pc, #620]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c8:	4998      	ldr	r1, [pc, #608]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	650b      	str	r3, [r1, #80]	; 0x50
 80058ce:	e001      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d03d      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d826      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005905 	.word	0x08005905
 80058f4:	08005913 	.word	0x08005913
 80058f8:	08005925 	.word	0x08005925
 80058fc:	0800593d 	.word	0x0800593d
 8005900:	0800593d 	.word	0x0800593d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005904:	4b89      	ldr	r3, [pc, #548]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4a88      	ldr	r2, [pc, #544]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800590a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800590e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005910:	e015      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3304      	adds	r3, #4
 8005916:	2100      	movs	r1, #0
 8005918:	4618      	mov	r0, r3
 800591a:	f001 f98b 	bl	8006c34 <RCCEx_PLL2_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005922:	e00c      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3324      	adds	r3, #36	; 0x24
 8005928:	2100      	movs	r1, #0
 800592a:	4618      	mov	r0, r3
 800592c:	f001 fa34 	bl	8006d98 <RCCEx_PLL3_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005934:	e003      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	75fb      	strb	r3, [r7, #23]
      break;
 800593a:	e000      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800593c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800593e:	7dfb      	ldrb	r3, [r7, #23]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005944:	4b79      	ldr	r3, [pc, #484]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005948:	f023 0207 	bic.w	r2, r3, #7
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005950:	4976      	ldr	r1, [pc, #472]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005952:	4313      	orrs	r3, r2
 8005954:	650b      	str	r3, [r1, #80]	; 0x50
 8005956:	e001      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005964:	2b00      	cmp	r3, #0
 8005966:	d042      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005970:	d02b      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005976:	d825      	bhi.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005978:	2bc0      	cmp	r3, #192	; 0xc0
 800597a:	d028      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800597c:	2bc0      	cmp	r3, #192	; 0xc0
 800597e:	d821      	bhi.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005980:	2b80      	cmp	r3, #128	; 0x80
 8005982:	d016      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d81d      	bhi.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d007      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005990:	e018      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005992:	4b66      	ldr	r3, [pc, #408]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	4a65      	ldr	r2, [pc, #404]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800599c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800599e:	e017      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3304      	adds	r3, #4
 80059a4:	2100      	movs	r1, #0
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 f944 	bl	8006c34 <RCCEx_PLL2_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059b0:	e00e      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3324      	adds	r3, #36	; 0x24
 80059b6:	2100      	movs	r1, #0
 80059b8:	4618      	mov	r0, r3
 80059ba:	f001 f9ed 	bl	8006d98 <RCCEx_PLL3_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059c2:	e005      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
      break;
 80059c8:	e002      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80059ca:	bf00      	nop
 80059cc:	e000      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80059ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80059d6:	4b55      	ldr	r3, [pc, #340]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e2:	4952      	ldr	r1, [pc, #328]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	650b      	str	r3, [r1, #80]	; 0x50
 80059e8:	e001      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
 80059ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d049      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a04:	d030      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005a06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a0a:	d82a      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a10:	d02c      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005a12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a16:	d824      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a1c:	d018      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a22:	d81e      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005a28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a2c:	d007      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005a2e:	e018      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a30:	4b3e      	ldr	r3, [pc, #248]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	4a3d      	ldr	r2, [pc, #244]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a3c:	e017      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3304      	adds	r3, #4
 8005a42:	2100      	movs	r1, #0
 8005a44:	4618      	mov	r0, r3
 8005a46:	f001 f8f5 	bl	8006c34 <RCCEx_PLL2_Config>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a4e:	e00e      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3324      	adds	r3, #36	; 0x24
 8005a54:	2100      	movs	r1, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 f99e 	bl	8006d98 <RCCEx_PLL3_Config>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a60:	e005      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	75fb      	strb	r3, [r7, #23]
      break;
 8005a66:	e002      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005a68:	bf00      	nop
 8005a6a:	e000      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005a6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a6e:	7dfb      	ldrb	r3, [r7, #23]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a74:	4b2d      	ldr	r3, [pc, #180]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a78:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a82:	492a      	ldr	r1, [pc, #168]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	658b      	str	r3, [r1, #88]	; 0x58
 8005a88:	e001      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
 8005a8c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d04c      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005aa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aa4:	d030      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005aa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aaa:	d82a      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005aac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ab0:	d02c      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005ab2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ab6:	d824      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005abc:	d018      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ac2:	d81e      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005acc:	d007      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005ace:	e018      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad0:	4b16      	ldr	r3, [pc, #88]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	4a15      	ldr	r2, [pc, #84]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005adc:	e017      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f001 f8a5 	bl	8006c34 <RCCEx_PLL2_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005aee:	e00e      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3324      	adds	r3, #36	; 0x24
 8005af4:	2100      	movs	r1, #0
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 f94e 	bl	8006d98 <RCCEx_PLL3_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b00:	e005      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	75fb      	strb	r3, [r7, #23]
      break;
 8005b06:	e002      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005b08:	bf00      	nop
 8005b0a:	e000      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10d      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b22:	4902      	ldr	r1, [pc, #8]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	658b      	str	r3, [r1, #88]	; 0x58
 8005b28:	e004      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005b2a:	bf00      	nop
 8005b2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d032      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b44:	2b30      	cmp	r3, #48	; 0x30
 8005b46:	d01c      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005b48:	2b30      	cmp	r3, #48	; 0x30
 8005b4a:	d817      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d00c      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d813      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d016      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d10f      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b5c:	4baf      	ldr	r3, [pc, #700]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	4aae      	ldr	r2, [pc, #696]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b68:	e00e      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	2102      	movs	r1, #2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f001 f85f 	bl	8006c34 <RCCEx_PLL2_Config>
 8005b76:	4603      	mov	r3, r0
 8005b78:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b7a:	e005      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b80:	e002      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005b82:	bf00      	nop
 8005b84:	e000      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005b86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d109      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b8e:	4ba3      	ldr	r3, [pc, #652]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9a:	49a0      	ldr	r1, [pc, #640]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ba0:	e001      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
 8005ba4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d047      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bba:	d030      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bc0:	d82a      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005bc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bc6:	d02c      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005bc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bcc:	d824      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd2:	d018      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd8:	d81e      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be2:	d007      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005be4:	e018      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be6:	4b8d      	ldr	r3, [pc, #564]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	4a8c      	ldr	r2, [pc, #560]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005bf2:	e017      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 f81a 	bl	8006c34 <RCCEx_PLL2_Config>
 8005c00:	4603      	mov	r3, r0
 8005c02:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c04:	e00e      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3324      	adds	r3, #36	; 0x24
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 f8c3 	bl	8006d98 <RCCEx_PLL3_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c16:	e005      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1c:	e002      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005c1e:	bf00      	nop
 8005c20:	e000      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d109      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c2a:	4b7c      	ldr	r3, [pc, #496]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c36:	4979      	ldr	r1, [pc, #484]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	650b      	str	r3, [r1, #80]	; 0x50
 8005c3c:	e001      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d049      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c56:	d02e      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c5c:	d828      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005c5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c62:	d02a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005c64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c68:	d822      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005c6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c6e:	d026      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005c70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c74:	d81c      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005c76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c7a:	d010      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005c7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c80:	d816      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01d      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8a:	d111      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	2101      	movs	r1, #1
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 ffce 	bl	8006c34 <RCCEx_PLL2_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c9c:	e012      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3324      	adds	r3, #36	; 0x24
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 f877 	bl	8006d98 <RCCEx_PLL3_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005cae:	e009      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb4:	e006      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e004      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e002      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005cbe:	bf00      	nop
 8005cc0:	e000      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005cc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005cca:	4b54      	ldr	r3, [pc, #336]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd6:	4951      	ldr	r1, [pc, #324]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	650b      	str	r3, [r1, #80]	; 0x50
 8005cdc:	e001      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
 8005ce0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d04b      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cf8:	d02e      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cfe:	d828      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d04:	d02a      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0a:	d822      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d10:	d026      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005d12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d16:	d81c      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d1c:	d010      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d22:	d816      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01d      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d2c:	d111      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3304      	adds	r3, #4
 8005d32:	2101      	movs	r1, #1
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 ff7d 	bl	8006c34 <RCCEx_PLL2_Config>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d3e:	e012      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3324      	adds	r3, #36	; 0x24
 8005d44:	2101      	movs	r1, #1
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 f826 	bl	8006d98 <RCCEx_PLL3_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d50:	e009      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	75fb      	strb	r3, [r7, #23]
      break;
 8005d56:	e006      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005d58:	bf00      	nop
 8005d5a:	e004      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005d5c:	bf00      	nop
 8005d5e:	e002      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005d60:	bf00      	nop
 8005d62:	e000      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10a      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d6c:	4b2b      	ldr	r3, [pc, #172]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d70:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d7a:	4928      	ldr	r1, [pc, #160]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	658b      	str	r3, [r1, #88]	; 0x58
 8005d80:	e001      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
 8005d84:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d02f      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d9a:	d00e      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da0:	d814      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d015      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005daa:	d10f      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dac:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	4a1a      	ldr	r2, [pc, #104]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005db8:	e00c      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 ff37 	bl	8006c34 <RCCEx_PLL2_Config>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005dca:	e003      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd0:	e000      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dda:	4b10      	ldr	r3, [pc, #64]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de6:	490d      	ldr	r1, [pc, #52]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	650b      	str	r3, [r1, #80]	; 0x50
 8005dec:	e001      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
 8005df0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d033      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d81c      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005e06:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0c:	08005e47 	.word	0x08005e47
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e2f 	.word	0x08005e2f
 8005e18:	08005e47 	.word	0x08005e47
 8005e1c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e20:	4bb8      	ldr	r3, [pc, #736]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	4ab7      	ldr	r2, [pc, #732]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e2c:	e00c      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3304      	adds	r3, #4
 8005e32:	2102      	movs	r1, #2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fefd 	bl	8006c34 <RCCEx_PLL2_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e3e:	e003      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
      break;
 8005e44:	e000      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e4e:	4bad      	ldr	r3, [pc, #692]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e52:	f023 0203 	bic.w	r2, r3, #3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5a:	49aa      	ldr	r1, [pc, #680]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e60:	e001      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 8086 	beq.w	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e74:	4ba4      	ldr	r3, [pc, #656]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4aa3      	ldr	r2, [pc, #652]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e80:	f7fb ffd4 	bl	8001e2c <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e86:	e009      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e88:	f7fb ffd0 	bl	8001e2c <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b64      	cmp	r3, #100	; 0x64
 8005e94:	d902      	bls.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	75fb      	strb	r3, [r7, #23]
        break;
 8005e9a:	e005      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e9c:	4b9a      	ldr	r3, [pc, #616]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0ef      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d166      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005eae:	4b95      	ldr	r3, [pc, #596]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005eb8:	4053      	eors	r3, r2
 8005eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d013      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ec2:	4b90      	ldr	r3, [pc, #576]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ecc:	4b8d      	ldr	r3, [pc, #564]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed0:	4a8c      	ldr	r2, [pc, #560]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ed8:	4b8a      	ldr	r3, [pc, #552]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005edc:	4a89      	ldr	r2, [pc, #548]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005ee4:	4a87      	ldr	r2, [pc, #540]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef4:	d115      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef6:	f7fb ff99 	bl	8001e2c <HAL_GetTick>
 8005efa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005efc:	e00b      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005efe:	f7fb ff95 	bl	8001e2c <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d902      	bls.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	75fb      	strb	r3, [r7, #23]
            break;
 8005f14:	e005      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f16:	4b7b      	ldr	r3, [pc, #492]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0ed      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d126      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f36:	d10d      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005f38:	4b72      	ldr	r3, [pc, #456]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f46:	0919      	lsrs	r1, r3, #4
 8005f48:	4b70      	ldr	r3, [pc, #448]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005f4a:	400b      	ands	r3, r1
 8005f4c:	496d      	ldr	r1, [pc, #436]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	610b      	str	r3, [r1, #16]
 8005f52:	e005      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005f54:	4b6b      	ldr	r3, [pc, #428]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	4a6a      	ldr	r2, [pc, #424]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f5e:	6113      	str	r3, [r2, #16]
 8005f60:	4b68      	ldr	r3, [pc, #416]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f6e:	4965      	ldr	r1, [pc, #404]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	670b      	str	r3, [r1, #112]	; 0x70
 8005f74:	e004      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
 8005f78:	75bb      	strb	r3, [r7, #22]
 8005f7a:	e001      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
 8005f7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d07e      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f90:	2b28      	cmp	r3, #40	; 0x28
 8005f92:	d867      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005f94:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9a:	bf00      	nop
 8005f9c:	0800606b 	.word	0x0800606b
 8005fa0:	08006065 	.word	0x08006065
 8005fa4:	08006065 	.word	0x08006065
 8005fa8:	08006065 	.word	0x08006065
 8005fac:	08006065 	.word	0x08006065
 8005fb0:	08006065 	.word	0x08006065
 8005fb4:	08006065 	.word	0x08006065
 8005fb8:	08006065 	.word	0x08006065
 8005fbc:	08006041 	.word	0x08006041
 8005fc0:	08006065 	.word	0x08006065
 8005fc4:	08006065 	.word	0x08006065
 8005fc8:	08006065 	.word	0x08006065
 8005fcc:	08006065 	.word	0x08006065
 8005fd0:	08006065 	.word	0x08006065
 8005fd4:	08006065 	.word	0x08006065
 8005fd8:	08006065 	.word	0x08006065
 8005fdc:	08006053 	.word	0x08006053
 8005fe0:	08006065 	.word	0x08006065
 8005fe4:	08006065 	.word	0x08006065
 8005fe8:	08006065 	.word	0x08006065
 8005fec:	08006065 	.word	0x08006065
 8005ff0:	08006065 	.word	0x08006065
 8005ff4:	08006065 	.word	0x08006065
 8005ff8:	08006065 	.word	0x08006065
 8005ffc:	0800606b 	.word	0x0800606b
 8006000:	08006065 	.word	0x08006065
 8006004:	08006065 	.word	0x08006065
 8006008:	08006065 	.word	0x08006065
 800600c:	08006065 	.word	0x08006065
 8006010:	08006065 	.word	0x08006065
 8006014:	08006065 	.word	0x08006065
 8006018:	08006065 	.word	0x08006065
 800601c:	0800606b 	.word	0x0800606b
 8006020:	08006065 	.word	0x08006065
 8006024:	08006065 	.word	0x08006065
 8006028:	08006065 	.word	0x08006065
 800602c:	08006065 	.word	0x08006065
 8006030:	08006065 	.word	0x08006065
 8006034:	08006065 	.word	0x08006065
 8006038:	08006065 	.word	0x08006065
 800603c:	0800606b 	.word	0x0800606b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3304      	adds	r3, #4
 8006044:	2101      	movs	r1, #1
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fdf4 	bl	8006c34 <RCCEx_PLL2_Config>
 800604c:	4603      	mov	r3, r0
 800604e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006050:	e00c      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3324      	adds	r3, #36	; 0x24
 8006056:	2101      	movs	r1, #1
 8006058:	4618      	mov	r0, r3
 800605a:	f000 fe9d 	bl	8006d98 <RCCEx_PLL3_Config>
 800605e:	4603      	mov	r3, r0
 8006060:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006062:	e003      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	75fb      	strb	r3, [r7, #23]
      break;
 8006068:	e000      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800606a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006072:	4b24      	ldr	r3, [pc, #144]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006076:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800607e:	4921      	ldr	r1, [pc, #132]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006080:	4313      	orrs	r3, r2
 8006082:	654b      	str	r3, [r1, #84]	; 0x54
 8006084:	e001      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006086:	7dfb      	ldrb	r3, [r7, #23]
 8006088:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d03e      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800609a:	2b05      	cmp	r3, #5
 800609c:	d820      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800609e:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060e7 	.word	0x080060e7
 80060a8:	080060bd 	.word	0x080060bd
 80060ac:	080060cf 	.word	0x080060cf
 80060b0:	080060e7 	.word	0x080060e7
 80060b4:	080060e7 	.word	0x080060e7
 80060b8:	080060e7 	.word	0x080060e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3304      	adds	r3, #4
 80060c0:	2101      	movs	r1, #1
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fdb6 	bl	8006c34 <RCCEx_PLL2_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80060cc:	e00c      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3324      	adds	r3, #36	; 0x24
 80060d2:	2101      	movs	r1, #1
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fe5f 	bl	8006d98 <RCCEx_PLL3_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80060de:	e003      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	75fb      	strb	r3, [r7, #23]
      break;
 80060e4:	e000      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80060e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d110      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	f023 0207 	bic.w	r2, r3, #7
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fa:	4902      	ldr	r1, [pc, #8]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	654b      	str	r3, [r1, #84]	; 0x54
 8006100:	e008      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006102:	bf00      	nop
 8006104:	58024400 	.word	0x58024400
 8006108:	58024800 	.word	0x58024800
 800610c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006110:	7dfb      	ldrb	r3, [r7, #23]
 8006112:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d039      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006126:	2b05      	cmp	r3, #5
 8006128:	d820      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800612a:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006173 	.word	0x08006173
 8006134:	08006149 	.word	0x08006149
 8006138:	0800615b 	.word	0x0800615b
 800613c:	08006173 	.word	0x08006173
 8006140:	08006173 	.word	0x08006173
 8006144:	08006173 	.word	0x08006173
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3304      	adds	r3, #4
 800614c:	2101      	movs	r1, #1
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fd70 	bl	8006c34 <RCCEx_PLL2_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006158:	e00c      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3324      	adds	r3, #36	; 0x24
 800615e:	2101      	movs	r1, #1
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fe19 	bl	8006d98 <RCCEx_PLL3_Config>
 8006166:	4603      	mov	r3, r0
 8006168:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800616a:	e003      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	75fb      	strb	r3, [r7, #23]
      break;
 8006170:	e000      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800617a:	4bb7      	ldr	r3, [pc, #732]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800617c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617e:	f023 0207 	bic.w	r2, r3, #7
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006188:	49b3      	ldr	r1, [pc, #716]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800618a:	4313      	orrs	r3, r2
 800618c:	658b      	str	r3, [r1, #88]	; 0x58
 800618e:	e001      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b00      	cmp	r3, #0
 800619e:	d04b      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061aa:	d02e      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80061ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061b0:	d828      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80061b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b6:	d02a      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80061b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061bc:	d822      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80061be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061c2:	d026      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80061c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061c8:	d81c      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80061ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ce:	d010      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80061d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061d4:	d816      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01d      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80061da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061de:	d111      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3304      	adds	r3, #4
 80061e4:	2100      	movs	r1, #0
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fd24 	bl	8006c34 <RCCEx_PLL2_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80061f0:	e012      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3324      	adds	r3, #36	; 0x24
 80061f6:	2102      	movs	r1, #2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fdcd 	bl	8006d98 <RCCEx_PLL3_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006202:	e009      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	75fb      	strb	r3, [r7, #23]
      break;
 8006208:	e006      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800620a:	bf00      	nop
 800620c:	e004      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800620e:	bf00      	nop
 8006210:	e002      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006212:	bf00      	nop
 8006214:	e000      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800621e:	4b8e      	ldr	r3, [pc, #568]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006222:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800622c:	498a      	ldr	r1, [pc, #552]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800622e:	4313      	orrs	r3, r2
 8006230:	654b      	str	r3, [r1, #84]	; 0x54
 8006232:	e001      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006234:	7dfb      	ldrb	r3, [r7, #23]
 8006236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d04b      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800624a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800624e:	d02e      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006250:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006254:	d828      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800625a:	d02a      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800625c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006260:	d822      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006262:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006266:	d026      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006268:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800626c:	d81c      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800626e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006272:	d010      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006278:	d816      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d01d      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800627e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006282:	d111      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3304      	adds	r3, #4
 8006288:	2100      	movs	r1, #0
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fcd2 	bl	8006c34 <RCCEx_PLL2_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006294:	e012      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3324      	adds	r3, #36	; 0x24
 800629a:	2102      	movs	r1, #2
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fd7b 	bl	8006d98 <RCCEx_PLL3_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062a6:	e009      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	75fb      	strb	r3, [r7, #23]
      break;
 80062ac:	e006      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80062ae:	bf00      	nop
 80062b0:	e004      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80062b2:	bf00      	nop
 80062b4:	e002      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80062b6:	bf00      	nop
 80062b8:	e000      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80062ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062c2:	4b65      	ldr	r3, [pc, #404]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062d0:	4961      	ldr	r1, [pc, #388]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	658b      	str	r3, [r1, #88]	; 0x58
 80062d6:	e001      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d04b      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062f2:	d02e      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80062f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062f8:	d828      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80062fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062fe:	d02a      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006304:	d822      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006306:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800630a:	d026      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800630c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006310:	d81c      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006316:	d010      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800631c:	d816      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d01d      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006326:	d111      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3304      	adds	r3, #4
 800632c:	2100      	movs	r1, #0
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fc80 	bl	8006c34 <RCCEx_PLL2_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006338:	e012      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3324      	adds	r3, #36	; 0x24
 800633e:	2102      	movs	r1, #2
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fd29 	bl	8006d98 <RCCEx_PLL3_Config>
 8006346:	4603      	mov	r3, r0
 8006348:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800634a:	e009      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	75fb      	strb	r3, [r7, #23]
      break;
 8006350:	e006      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006352:	bf00      	nop
 8006354:	e004      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006356:	bf00      	nop
 8006358:	e002      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800635a:	bf00      	nop
 800635c:	e000      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800635e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006360:	7dfb      	ldrb	r3, [r7, #23]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006366:	4b3c      	ldr	r3, [pc, #240]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006374:	4938      	ldr	r1, [pc, #224]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006376:	4313      	orrs	r3, r2
 8006378:	658b      	str	r3, [r1, #88]	; 0x58
 800637a:	e001      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637c:	7dfb      	ldrb	r3, [r7, #23]
 800637e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0308 	and.w	r3, r3, #8
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01a      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006396:	d10a      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3324      	adds	r3, #36	; 0x24
 800639c:	2102      	movs	r1, #2
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fcfa 	bl	8006d98 <RCCEx_PLL3_Config>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80063ae:	4b2a      	ldr	r3, [pc, #168]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063bc:	4926      	ldr	r1, [pc, #152]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0310 	and.w	r3, r3, #16
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01a      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d8:	d10a      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3324      	adds	r3, #36	; 0x24
 80063de:	2102      	movs	r1, #2
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fcd9 	bl	8006d98 <RCCEx_PLL3_Config>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063f0:	4b19      	ldr	r3, [pc, #100]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063fe:	4916      	ldr	r1, [pc, #88]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006400:	4313      	orrs	r3, r2
 8006402:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d036      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800641a:	d01f      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800641c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006420:	d817      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642a:	d009      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800642c:	e011      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	2100      	movs	r1, #0
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fbfd 	bl	8006c34 <RCCEx_PLL2_Config>
 800643a:	4603      	mov	r3, r0
 800643c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800643e:	e00e      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3324      	adds	r3, #36	; 0x24
 8006444:	2102      	movs	r1, #2
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fca6 	bl	8006d98 <RCCEx_PLL3_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006450:	e005      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	75fb      	strb	r3, [r7, #23]
      break;
 8006456:	e002      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006458:	58024400 	.word	0x58024400
      break;
 800645c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800645e:	7dfb      	ldrb	r3, [r7, #23]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006464:	4b93      	ldr	r3, [pc, #588]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006472:	4990      	ldr	r1, [pc, #576]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006474:	4313      	orrs	r3, r2
 8006476:	658b      	str	r3, [r1, #88]	; 0x58
 8006478:	e001      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647a:	7dfb      	ldrb	r3, [r7, #23]
 800647c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d033      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006490:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006494:	d01c      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006496:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800649a:	d816      	bhi.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800649c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064a0:	d003      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80064a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064a6:	d007      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80064a8:	e00f      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064aa:	4b82      	ldr	r3, [pc, #520]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	4a81      	ldr	r2, [pc, #516]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80064b6:	e00c      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3324      	adds	r3, #36	; 0x24
 80064bc:	2101      	movs	r1, #1
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fc6a 	bl	8006d98 <RCCEx_PLL3_Config>
 80064c4:	4603      	mov	r3, r0
 80064c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80064c8:	e003      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	75fb      	strb	r3, [r7, #23]
      break;
 80064ce:	e000      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80064d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064d2:	7dfb      	ldrb	r3, [r7, #23]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064d8:	4b76      	ldr	r3, [pc, #472]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e6:	4973      	ldr	r1, [pc, #460]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	654b      	str	r3, [r1, #84]	; 0x54
 80064ec:	e001      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
 80064f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d029      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800650a:	d007      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800650c:	e00f      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650e:	4b69      	ldr	r3, [pc, #420]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	4a68      	ldr	r2, [pc, #416]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006518:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800651a:	e00b      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3304      	adds	r3, #4
 8006520:	2102      	movs	r1, #2
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fb86 	bl	8006c34 <RCCEx_PLL2_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800652c:	e002      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	75fb      	strb	r3, [r7, #23]
      break;
 8006532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d109      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800653a:	4b5e      	ldr	r3, [pc, #376]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800653c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006546:	495b      	ldr	r1, [pc, #364]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006548:	4313      	orrs	r3, r2
 800654a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800654c:	e001      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3324      	adds	r3, #36	; 0x24
 8006562:	2102      	movs	r1, #2
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fc17 	bl	8006d98 <RCCEx_PLL3_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d030      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006588:	d017      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800658a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800658e:	d811      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006594:	d013      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800659a:	d80b      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d010      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80065a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a4:	d106      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a6:	4b43      	ldr	r3, [pc, #268]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	4a42      	ldr	r2, [pc, #264]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80065b2:	e007      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	75fb      	strb	r3, [r7, #23]
      break;
 80065b8:	e004      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80065ba:	bf00      	nop
 80065bc:	e002      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80065be:	bf00      	nop
 80065c0:	e000      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80065c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d109      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065ca:	4b3a      	ldr	r3, [pc, #232]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d6:	4937      	ldr	r1, [pc, #220]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	654b      	str	r3, [r1, #84]	; 0x54
 80065dc:	e001      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d008      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065ee:	4b31      	ldr	r3, [pc, #196]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	492e      	ldr	r1, [pc, #184]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d009      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800660c:	4b29      	ldr	r3, [pc, #164]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800661a:	4926      	ldr	r1, [pc, #152]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800661c:	4313      	orrs	r3, r2
 800661e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800662c:	4b21      	ldr	r3, [pc, #132]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800662e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006630:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006638:	491e      	ldr	r1, [pc, #120]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800663a:	4313      	orrs	r3, r2
 800663c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00d      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800664a:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	4a19      	ldr	r2, [pc, #100]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006650:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006654:	6113      	str	r3, [r2, #16]
 8006656:	4b17      	ldr	r3, [pc, #92]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006658:	691a      	ldr	r2, [r3, #16]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006660:	4914      	ldr	r1, [pc, #80]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006662:	4313      	orrs	r3, r2
 8006664:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	da08      	bge.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800666e:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006672:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667a:	490e      	ldr	r1, [pc, #56]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800667c:	4313      	orrs	r3, r2
 800667e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d009      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800668c:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800668e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006690:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669a:	4906      	ldr	r1, [pc, #24]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800669c:	4313      	orrs	r3, r2
 800669e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80066a0:	7dbb      	ldrb	r3, [r7, #22]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e000      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	58024400 	.word	0x58024400

080066b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80066bc:	f7ff f860 	bl	8005780 <HAL_RCC_GetHCLKFreq>
 80066c0:	4602      	mov	r2, r0
 80066c2:	4b06      	ldr	r3, [pc, #24]	; (80066dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	091b      	lsrs	r3, r3, #4
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	4904      	ldr	r1, [pc, #16]	; (80066e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80066ce:	5ccb      	ldrb	r3, [r1, r3]
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80066d8:	4618      	mov	r0, r3
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	58024400 	.word	0x58024400
 80066e0:	08009968 	.word	0x08009968

080066e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b089      	sub	sp, #36	; 0x24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066ec:	4ba1      	ldr	r3, [pc, #644]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80066f6:	4b9f      	ldr	r3, [pc, #636]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fa:	0b1b      	lsrs	r3, r3, #12
 80066fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006700:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006702:	4b9c      	ldr	r3, [pc, #624]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	091b      	lsrs	r3, r3, #4
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800670e:	4b99      	ldr	r3, [pc, #612]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006712:	08db      	lsrs	r3, r3, #3
 8006714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	fb02 f303 	mul.w	r3, r2, r3
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006726:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 8111 	beq.w	8006954 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	2b02      	cmp	r3, #2
 8006736:	f000 8083 	beq.w	8006840 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b02      	cmp	r3, #2
 800673e:	f200 80a1 	bhi.w	8006884 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d056      	beq.n	80067fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800674e:	e099      	b.n	8006884 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006750:	4b88      	ldr	r3, [pc, #544]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b00      	cmp	r3, #0
 800675a:	d02d      	beq.n	80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800675c:	4b85      	ldr	r3, [pc, #532]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	08db      	lsrs	r3, r3, #3
 8006762:	f003 0303 	and.w	r3, r3, #3
 8006766:	4a84      	ldr	r2, [pc, #528]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006768:	fa22 f303 	lsr.w	r3, r2, r3
 800676c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	ee07 3a90 	vmov	s15, r3
 8006774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006786:	4b7b      	ldr	r3, [pc, #492]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678e:	ee07 3a90 	vmov	s15, r3
 8006792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006796:	ed97 6a03 	vldr	s12, [r7, #12]
 800679a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800697c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800679e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80067b6:	e087      	b.n	80068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006980 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80067c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ca:	4b6a      	ldr	r3, [pc, #424]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067da:	ed97 6a03 	vldr	s12, [r7, #12]
 80067de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800697c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067fa:	e065      	b.n	80068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006806:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006984 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800680a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680e:	4b59      	ldr	r3, [pc, #356]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006822:	eddf 5a56 	vldr	s11, [pc, #344]	; 800697c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800682a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800683e:	e043      	b.n	80068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800684e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006852:	4b48      	ldr	r3, [pc, #288]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800685a:	ee07 3a90 	vmov	s15, r3
 800685e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006862:	ed97 6a03 	vldr	s12, [r7, #12]
 8006866:	eddf 5a45 	vldr	s11, [pc, #276]	; 800697c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800686a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800687a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006882:	e021      	b.n	80068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006984 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006896:	4b37      	ldr	r3, [pc, #220]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800697c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80068c8:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	0a5b      	lsrs	r3, r3, #9
 80068ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ee:	ee17 2a90 	vmov	r2, s15
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80068f6:	4b1f      	ldr	r3, [pc, #124]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	0c1b      	lsrs	r3, r3, #16
 80068fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006900:	ee07 3a90 	vmov	s15, r3
 8006904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800690c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006910:	edd7 6a07 	vldr	s13, [r7, #28]
 8006914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800691c:	ee17 2a90 	vmov	r2, s15
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006924:	4b13      	ldr	r3, [pc, #76]	; (8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	0e1b      	lsrs	r3, r3, #24
 800692a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800693a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800693e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800694a:	ee17 2a90 	vmov	r2, s15
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006952:	e008      	b.n	8006966 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	609a      	str	r2, [r3, #8]
}
 8006966:	bf00      	nop
 8006968:	3724      	adds	r7, #36	; 0x24
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	58024400 	.word	0x58024400
 8006978:	03d09000 	.word	0x03d09000
 800697c:	46000000 	.word	0x46000000
 8006980:	4c742400 	.word	0x4c742400
 8006984:	4a742400 	.word	0x4a742400
 8006988:	4c371b00 	.word	0x4c371b00

0800698c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800698c:	b480      	push	{r7}
 800698e:	b089      	sub	sp, #36	; 0x24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006994:	4ba1      	ldr	r3, [pc, #644]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	f003 0303 	and.w	r3, r3, #3
 800699c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800699e:	4b9f      	ldr	r3, [pc, #636]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a2:	0d1b      	lsrs	r3, r3, #20
 80069a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80069aa:	4b9c      	ldr	r3, [pc, #624]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80069b6:	4b99      	ldr	r3, [pc, #612]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	08db      	lsrs	r3, r3, #3
 80069bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	fb02 f303 	mul.w	r3, r2, r3
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8111 	beq.w	8006bfc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	f000 8083 	beq.w	8006ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	f200 80a1 	bhi.w	8006b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d056      	beq.n	8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80069f6:	e099      	b.n	8006b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069f8:	4b88      	ldr	r3, [pc, #544]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d02d      	beq.n	8006a60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a04:	4b85      	ldr	r3, [pc, #532]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	08db      	lsrs	r3, r3, #3
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	4a84      	ldr	r2, [pc, #528]	; (8006c20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a10:	fa22 f303 	lsr.w	r3, r2, r3
 8006a14:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	ee07 3a90 	vmov	s15, r3
 8006a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2e:	4b7b      	ldr	r3, [pc, #492]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a36:	ee07 3a90 	vmov	s15, r3
 8006a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a5e:	e087      	b.n	8006b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a72:	4b6a      	ldr	r3, [pc, #424]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006aa2:	e065      	b.n	8006b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab6:	4b59      	ldr	r3, [pc, #356]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ae6:	e043      	b.n	8006b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afa:	4b48      	ldr	r3, [pc, #288]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b2a:	e021      	b.n	8006b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3e:	4b37      	ldr	r3, [pc, #220]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006b70:	4b2a      	ldr	r3, [pc, #168]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	0a5b      	lsrs	r3, r3, #9
 8006b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b96:	ee17 2a90 	vmov	r2, s15
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006b9e:	4b1f      	ldr	r3, [pc, #124]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	0c1b      	lsrs	r3, r3, #16
 8006ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba8:	ee07 3a90 	vmov	s15, r3
 8006bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bc4:	ee17 2a90 	vmov	r2, s15
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006bcc:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd0:	0e1b      	lsrs	r3, r3, #24
 8006bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006be2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf2:	ee17 2a90 	vmov	r2, s15
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006bfa:	e008      	b.n	8006c0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	609a      	str	r2, [r3, #8]
}
 8006c0e:	bf00      	nop
 8006c10:	3724      	adds	r7, #36	; 0x24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	58024400 	.word	0x58024400
 8006c20:	03d09000 	.word	0x03d09000
 8006c24:	46000000 	.word	0x46000000
 8006c28:	4c742400 	.word	0x4c742400
 8006c2c:	4a742400 	.word	0x4a742400
 8006c30:	4c371b00 	.word	0x4c371b00

08006c34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c42:	4b53      	ldr	r3, [pc, #332]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d101      	bne.n	8006c52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e099      	b.n	8006d86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c52:	4b4f      	ldr	r3, [pc, #316]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a4e      	ldr	r2, [pc, #312]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006c58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c5e:	f7fb f8e5 	bl	8001e2c <HAL_GetTick>
 8006c62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c64:	e008      	b.n	8006c78 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006c66:	f7fb f8e1 	bl	8001e2c <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e086      	b.n	8006d86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c78:	4b45      	ldr	r3, [pc, #276]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1f0      	bne.n	8006c66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c84:	4b42      	ldr	r3, [pc, #264]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	031b      	lsls	r3, r3, #12
 8006c92:	493f      	ldr	r1, [pc, #252]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	628b      	str	r3, [r1, #40]	; 0x28
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	025b      	lsls	r3, r3, #9
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	041b      	lsls	r3, r3, #16
 8006cb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	061b      	lsls	r3, r3, #24
 8006cc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006cc8:	4931      	ldr	r1, [pc, #196]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006cce:	4b30      	ldr	r3, [pc, #192]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	492d      	ldr	r1, [pc, #180]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ce0:	4b2b      	ldr	r3, [pc, #172]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	f023 0220 	bic.w	r2, r3, #32
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	4928      	ldr	r1, [pc, #160]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006cf2:	4b27      	ldr	r3, [pc, #156]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006cf8:	f023 0310 	bic.w	r3, r3, #16
 8006cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006cfe:	4b24      	ldr	r3, [pc, #144]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d02:	4b24      	ldr	r3, [pc, #144]	; (8006d94 <RCCEx_PLL2_Config+0x160>)
 8006d04:	4013      	ands	r3, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	69d2      	ldr	r2, [r2, #28]
 8006d0a:	00d2      	lsls	r2, r2, #3
 8006d0c:	4920      	ldr	r1, [pc, #128]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d12:	4b1f      	ldr	r3, [pc, #124]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d16:	4a1e      	ldr	r2, [pc, #120]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d18:	f043 0310 	orr.w	r3, r3, #16
 8006d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d24:	4b1a      	ldr	r3, [pc, #104]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	4a19      	ldr	r2, [pc, #100]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d30:	e00f      	b.n	8006d52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d106      	bne.n	8006d46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d38:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	4a14      	ldr	r2, [pc, #80]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d44:	e005      	b.n	8006d52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d46:	4b12      	ldr	r3, [pc, #72]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	4a11      	ldr	r2, [pc, #68]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d52:	4b0f      	ldr	r3, [pc, #60]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a0e      	ldr	r2, [pc, #56]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d5e:	f7fb f865 	bl	8001e2c <HAL_GetTick>
 8006d62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d64:	e008      	b.n	8006d78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d66:	f7fb f861 	bl	8001e2c <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e006      	b.n	8006d86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d78:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <RCCEx_PLL2_Config+0x15c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0f0      	beq.n	8006d66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	58024400 	.word	0x58024400
 8006d94:	ffff0007 	.word	0xffff0007

08006d98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006da6:	4b53      	ldr	r3, [pc, #332]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	f003 0303 	and.w	r3, r3, #3
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d101      	bne.n	8006db6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e099      	b.n	8006eea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006db6:	4b4f      	ldr	r3, [pc, #316]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a4e      	ldr	r2, [pc, #312]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc2:	f7fb f833 	bl	8001e2c <HAL_GetTick>
 8006dc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006dc8:	e008      	b.n	8006ddc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006dca:	f7fb f82f 	bl	8001e2c <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d901      	bls.n	8006ddc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e086      	b.n	8006eea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ddc:	4b45      	ldr	r3, [pc, #276]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1f0      	bne.n	8006dca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006de8:	4b42      	ldr	r3, [pc, #264]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	051b      	lsls	r3, r3, #20
 8006df6:	493f      	ldr	r1, [pc, #252]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	628b      	str	r3, [r1, #40]	; 0x28
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	025b      	lsls	r3, r3, #9
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	431a      	orrs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	041b      	lsls	r3, r3, #16
 8006e1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	061b      	lsls	r3, r3, #24
 8006e28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e2c:	4931      	ldr	r1, [pc, #196]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e32:	4b30      	ldr	r3, [pc, #192]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	492d      	ldr	r1, [pc, #180]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e44:	4b2b      	ldr	r3, [pc, #172]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	4928      	ldr	r1, [pc, #160]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006e56:	4b27      	ldr	r3, [pc, #156]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5a:	4a26      	ldr	r2, [pc, #152]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006e62:	4b24      	ldr	r3, [pc, #144]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e66:	4b24      	ldr	r3, [pc, #144]	; (8006ef8 <RCCEx_PLL3_Config+0x160>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	69d2      	ldr	r2, [r2, #28]
 8006e6e:	00d2      	lsls	r2, r2, #3
 8006e70:	4920      	ldr	r1, [pc, #128]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e76:	4b1f      	ldr	r3, [pc, #124]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	4a1e      	ldr	r2, [pc, #120]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e88:	4b1a      	ldr	r3, [pc, #104]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	4a19      	ldr	r2, [pc, #100]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e94:	e00f      	b.n	8006eb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d106      	bne.n	8006eaa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e9c:	4b15      	ldr	r3, [pc, #84]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	4a14      	ldr	r2, [pc, #80]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006ea2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ea8:	e005      	b.n	8006eb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006eaa:	4b12      	ldr	r3, [pc, #72]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	4a11      	ldr	r2, [pc, #68]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006eb6:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a0e      	ldr	r2, [pc, #56]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ec2:	f7fa ffb3 	bl	8001e2c <HAL_GetTick>
 8006ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ec8:	e008      	b.n	8006edc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006eca:	f7fa ffaf 	bl	8001e2c <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e006      	b.n	8006eea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006edc:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <RCCEx_PLL3_Config+0x15c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0f0      	beq.n	8006eca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	58024400 	.word	0x58024400
 8006ef8:	ffff0007 	.word	0xffff0007

08006efc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e0eb      	b.n	80070ea <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a75      	ldr	r2, [pc, #468]	; (80070f4 <HAL_SPI_Init+0x1f8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00f      	beq.n	8006f42 <HAL_SPI_Init+0x46>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a74      	ldr	r2, [pc, #464]	; (80070f8 <HAL_SPI_Init+0x1fc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00a      	beq.n	8006f42 <HAL_SPI_Init+0x46>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a72      	ldr	r2, [pc, #456]	; (80070fc <HAL_SPI_Init+0x200>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d005      	beq.n	8006f42 <HAL_SPI_Init+0x46>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	2b0f      	cmp	r3, #15
 8006f3c:	d901      	bls.n	8006f42 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e0d3      	b.n	80070ea <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fb9e 	bl	8007684 <SPI_GetPacketSize>
 8006f48:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a69      	ldr	r2, [pc, #420]	; (80070f4 <HAL_SPI_Init+0x1f8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00c      	beq.n	8006f6e <HAL_SPI_Init+0x72>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a67      	ldr	r2, [pc, #412]	; (80070f8 <HAL_SPI_Init+0x1fc>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d007      	beq.n	8006f6e <HAL_SPI_Init+0x72>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a66      	ldr	r2, [pc, #408]	; (80070fc <HAL_SPI_Init+0x200>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d002      	beq.n	8006f6e <HAL_SPI_Init+0x72>
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b08      	cmp	r3, #8
 8006f6c:	d811      	bhi.n	8006f92 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f72:	4a60      	ldr	r2, [pc, #384]	; (80070f4 <HAL_SPI_Init+0x1f8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d009      	beq.n	8006f8c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a5e      	ldr	r2, [pc, #376]	; (80070f8 <HAL_SPI_Init+0x1fc>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d004      	beq.n	8006f8c <HAL_SPI_Init+0x90>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a5d      	ldr	r2, [pc, #372]	; (80070fc <HAL_SPI_Init+0x200>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d104      	bne.n	8006f96 <HAL_SPI_Init+0x9a>
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	d901      	bls.n	8006f96 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e0a9      	b.n	80070ea <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fa fafa 	bl	80015a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0201 	bic.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fd0:	d119      	bne.n	8007006 <HAL_SPI_Init+0x10a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fda:	d103      	bne.n	8006fe4 <HAL_SPI_Init+0xe8>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d008      	beq.n	8006ff6 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10c      	bne.n	8007006 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ff4:	d107      	bne.n	8007006 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007004:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69da      	ldr	r2, [r3, #28]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	431a      	orrs	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007018:	ea42 0103 	orr.w	r1, r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	431a      	orrs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	431a      	orrs	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	431a      	orrs	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	431a      	orrs	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705a:	431a      	orrs	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	431a      	orrs	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007066:	ea42 0103 	orr.w	r1, r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d113      	bne.n	80070a6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007090:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0201 	bic.w	r2, r2, #1
 80070b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	40013000 	.word	0x40013000
 80070f8:	40003800 	.word	0x40003800
 80070fc:	40003c00 	.word	0x40003c00

08007100 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b08a      	sub	sp, #40	; 0x28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007118:	6a3a      	ldr	r2, [r7, #32]
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4013      	ands	r3, r2
 800711e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007128:	2300      	movs	r3, #0
 800712a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007132:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3330      	adds	r3, #48	; 0x30
 800713a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	d113      	bne.n	800716e <HAL_SPI_IRQHandler+0x6e>
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10e      	bne.n	800716e <HAL_SPI_IRQHandler+0x6e>
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	f003 0304 	and.w	r3, r3, #4
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
    handled = 1UL;
 800716a:	2301      	movs	r3, #1
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10f      	bne.n	8007198 <HAL_SPI_IRQHandler+0x98>
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <HAL_SPI_IRQHandler+0x98>
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b00      	cmp	r3, #0
 800718a:	d105      	bne.n	8007198 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	4798      	blx	r3
    handled = 1UL;
 8007194:	2301      	movs	r3, #1
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10f      	bne.n	80071c2 <HAL_SPI_IRQHandler+0xc2>
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <HAL_SPI_IRQHandler+0xc2>
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	f003 0304 	and.w	r3, r3, #4
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d105      	bne.n	80071c2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	4798      	blx	r3
    handled = 1UL;
 80071be:	2301      	movs	r3, #1
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f040 816f 	bne.w	80074a8 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80a0 	beq.w	8007316 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699a      	ldr	r2, [r3, #24]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f042 0208 	orr.w	r2, r2, #8
 80071e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0210 	orr.w	r2, r2, #16
 80071f4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699a      	ldr	r2, [r3, #24]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007204:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0208 	bic.w	r2, r2, #8
 8007214:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00f      	beq.n	8007240 <HAL_SPI_IRQHandler+0x140>
 8007220:	7cfb      	ldrb	r3, [r7, #19]
 8007222:	2b04      	cmp	r3, #4
 8007224:	d004      	beq.n	8007230 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d007      	beq.n	8007240 <HAL_SPI_IRQHandler+0x140>
 8007230:	7cfb      	ldrb	r3, [r7, #19]
 8007232:	2b03      	cmp	r3, #3
 8007234:	d059      	beq.n	80072ea <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d154      	bne.n	80072ea <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d13d      	bne.n	80072ca <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800724e:	e036      	b.n	80072be <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	2b0f      	cmp	r3, #15
 8007256:	d90b      	bls.n	8007270 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007260:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007262:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007268:	1d1a      	adds	r2, r3, #4
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	665a      	str	r2, [r3, #100]	; 0x64
 800726e:	e01d      	b.n	80072ac <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	2b07      	cmp	r3, #7
 8007276:	d90b      	bls.n	8007290 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	8812      	ldrh	r2, [r2, #0]
 8007280:	b292      	uxth	r2, r2
 8007282:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007288:	1c9a      	adds	r2, r3, #2
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	665a      	str	r2, [r3, #100]	; 0x64
 800728e:	e00d      	b.n	80072ac <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800729c:	7812      	ldrb	r2, [r2, #0]
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1c2      	bne.n	8007250 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f93a 	bl	8007544 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f90a 	bl	80074fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80072e8:	e0e3      	b.n	80074b2 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80072ea:	7cfb      	ldrb	r3, [r7, #19]
 80072ec:	2b05      	cmp	r3, #5
 80072ee:	d103      	bne.n	80072f8 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f8f9 	bl	80074e8 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 80072f6:	e0d9      	b.n	80074ac <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80072f8:	7cfb      	ldrb	r3, [r7, #19]
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d103      	bne.n	8007306 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f8e8 	bl	80074d4 <HAL_SPI_RxCpltCallback>
    return;
 8007304:	e0d2      	b.n	80074ac <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007306:	7cfb      	ldrb	r3, [r7, #19]
 8007308:	2b03      	cmp	r3, #3
 800730a:	f040 80cf 	bne.w	80074ac <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f8d6 	bl	80074c0 <HAL_SPI_TxCpltCallback>
    return;
 8007314:	e0ca      	b.n	80074ac <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00d      	beq.n	800733c <HAL_SPI_IRQHandler+0x23c>
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	f003 0308 	and.w	r3, r3, #8
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	699a      	ldr	r2, [r3, #24]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007338:	619a      	str	r2, [r3, #24]

    return;
 800733a:	e0ba      	b.n	80074b2 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 80b5 	beq.w	80074b2 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00f      	beq.n	8007372 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007358:	f043 0204 	orr.w	r2, r3, #4
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	699a      	ldr	r2, [r3, #24]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007370:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00f      	beq.n	800739c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007382:	f043 0201 	orr.w	r2, r3, #1
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699a      	ldr	r2, [r3, #24]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800739a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00f      	beq.n	80073c6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ac:	f043 0208 	orr.w	r2, r3, #8
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	699a      	ldr	r2, [r3, #24]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073c4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	f003 0320 	and.w	r3, r3, #32
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00f      	beq.n	80073f0 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699a      	ldr	r2, [r3, #24]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0220 	orr.w	r2, r2, #32
 80073ee:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d05a      	beq.n	80074b0 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0201 	bic.w	r2, r2, #1
 8007408:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6919      	ldr	r1, [r3, #16]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	4b28      	ldr	r3, [pc, #160]	; (80074b8 <HAL_SPI_IRQHandler+0x3b8>)
 8007416:	400b      	ands	r3, r1
 8007418:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007420:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007424:	d138      	bne.n	8007498 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007434:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d013      	beq.n	8007466 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007442:	4a1e      	ldr	r2, [pc, #120]	; (80074bc <HAL_SPI_IRQHandler+0x3bc>)
 8007444:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800744a:	4618      	mov	r0, r3
 800744c:	f7fb fc90 	bl	8002d70 <HAL_DMA_Abort_IT>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d007      	beq.n	8007466 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800745c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800746a:	2b00      	cmp	r3, #0
 800746c:	d020      	beq.n	80074b0 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007472:	4a12      	ldr	r2, [pc, #72]	; (80074bc <HAL_SPI_IRQHandler+0x3bc>)
 8007474:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800747a:	4618      	mov	r0, r3
 800747c:	f7fb fc78 	bl	8002d70 <HAL_DMA_Abort_IT>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d014      	beq.n	80074b0 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800748c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007496:	e00b      	b.n	80074b0 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f82b 	bl	80074fc <HAL_SPI_ErrorCallback>
    return;
 80074a6:	e003      	b.n	80074b0 <HAL_SPI_IRQHandler+0x3b0>
    return;
 80074a8:	bf00      	nop
 80074aa:	e002      	b.n	80074b2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 80074ac:	bf00      	nop
 80074ae:	e000      	b.n	80074b2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 80074b0:	bf00      	nop
  }
}
 80074b2:	3728      	adds	r7, #40	; 0x28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	fffffc94 	.word	0xfffffc94
 80074bc:	08007511 	.word	0x08007511

080074c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f7ff ffe0 	bl	80074fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800753c:	bf00      	nop
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0208 	orr.w	r2, r2, #8
 8007562:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0210 	orr.w	r2, r2, #16
 8007572:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0201 	bic.w	r2, r2, #1
 8007582:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6919      	ldr	r1, [r3, #16]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	4b3c      	ldr	r3, [pc, #240]	; (8007680 <SPI_CloseTransfer+0x13c>)
 8007590:	400b      	ands	r3, r1
 8007592:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80075a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	d014      	beq.n	80075da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00f      	beq.n	80075da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	699a      	ldr	r2, [r3, #24]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f042 0220 	orr.w	r2, r2, #32
 80075d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d014      	beq.n	8007610 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00f      	beq.n	8007610 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075f6:	f043 0204 	orr.w	r2, r3, #4
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800760e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00f      	beq.n	800763a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007620:	f043 0201 	orr.w	r2, r3, #1
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	699a      	ldr	r2, [r3, #24]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007638:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00f      	beq.n	8007664 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800764a:	f043 0208 	orr.w	r2, r3, #8
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007662:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	fffffc90 	.word	0xfffffc90

08007684 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007690:	095b      	lsrs	r3, r3, #5
 8007692:	3301      	adds	r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	3301      	adds	r3, #1
 800769c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	3307      	adds	r3, #7
 80076a2:	08db      	lsrs	r3, r3, #3
 80076a4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	fb02 f303 	mul.w	r3, r2, r3
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e049      	b.n	8007760 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d106      	bne.n	80076e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7f9 fff3 	bl	80016cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2202      	movs	r2, #2
 80076ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3304      	adds	r3, #4
 80076f6:	4619      	mov	r1, r3
 80076f8:	4610      	mov	r0, r2
 80076fa:	f000 fb0f 	bl	8007d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b01      	cmp	r3, #1
 800777a:	d001      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e04f      	b.n	8007820 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0201 	orr.w	r2, r2, #1
 8007796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a23      	ldr	r2, [pc, #140]	; (800782c <HAL_TIM_Base_Start_IT+0xc4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d01d      	beq.n	80077de <HAL_TIM_Base_Start_IT+0x76>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077aa:	d018      	beq.n	80077de <HAL_TIM_Base_Start_IT+0x76>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a1f      	ldr	r2, [pc, #124]	; (8007830 <HAL_TIM_Base_Start_IT+0xc8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d013      	beq.n	80077de <HAL_TIM_Base_Start_IT+0x76>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a1e      	ldr	r2, [pc, #120]	; (8007834 <HAL_TIM_Base_Start_IT+0xcc>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d00e      	beq.n	80077de <HAL_TIM_Base_Start_IT+0x76>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1c      	ldr	r2, [pc, #112]	; (8007838 <HAL_TIM_Base_Start_IT+0xd0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d009      	beq.n	80077de <HAL_TIM_Base_Start_IT+0x76>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a1b      	ldr	r2, [pc, #108]	; (800783c <HAL_TIM_Base_Start_IT+0xd4>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d004      	beq.n	80077de <HAL_TIM_Base_Start_IT+0x76>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a19      	ldr	r2, [pc, #100]	; (8007840 <HAL_TIM_Base_Start_IT+0xd8>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d115      	bne.n	800780a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	4b17      	ldr	r3, [pc, #92]	; (8007844 <HAL_TIM_Base_Start_IT+0xdc>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b06      	cmp	r3, #6
 80077ee:	d015      	beq.n	800781c <HAL_TIM_Base_Start_IT+0xb4>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f6:	d011      	beq.n	800781c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0201 	orr.w	r2, r2, #1
 8007806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007808:	e008      	b.n	800781c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0201 	orr.w	r2, r2, #1
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	e000      	b.n	800781e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800781c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	40010000 	.word	0x40010000
 8007830:	40000400 	.word	0x40000400
 8007834:	40000800 	.word	0x40000800
 8007838:	40000c00 	.word	0x40000c00
 800783c:	40010400 	.word	0x40010400
 8007840:	40001800 	.word	0x40001800
 8007844:	00010007 	.word	0x00010007

08007848 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0201 	bic.w	r2, r2, #1
 800785e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6a1a      	ldr	r2, [r3, #32]
 8007866:	f241 1311 	movw	r3, #4369	; 0x1111
 800786a:	4013      	ands	r3, r2
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10f      	bne.n	8007890 <HAL_TIM_Base_Stop_IT+0x48>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6a1a      	ldr	r2, [r3, #32]
 8007876:	f240 4344 	movw	r3, #1092	; 0x444
 800787a:	4013      	ands	r3, r2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d107      	bne.n	8007890 <HAL_TIM_Base_Stop_IT+0x48>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0201 	bic.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d122      	bne.n	8007902 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d11b      	bne.n	8007902 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f06f 0202 	mvn.w	r2, #2
 80078d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	f003 0303 	and.w	r3, r3, #3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f9f9 	bl	8007ce0 <HAL_TIM_IC_CaptureCallback>
 80078ee:	e005      	b.n	80078fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f9eb 	bl	8007ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f9fc 	bl	8007cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	f003 0304 	and.w	r3, r3, #4
 800790c:	2b04      	cmp	r3, #4
 800790e:	d122      	bne.n	8007956 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b04      	cmp	r3, #4
 800791c:	d11b      	bne.n	8007956 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f06f 0204 	mvn.w	r2, #4
 8007926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f9cf 	bl	8007ce0 <HAL_TIM_IC_CaptureCallback>
 8007942:	e005      	b.n	8007950 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f9c1 	bl	8007ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f9d2 	bl	8007cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	f003 0308 	and.w	r3, r3, #8
 8007960:	2b08      	cmp	r3, #8
 8007962:	d122      	bne.n	80079aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f003 0308 	and.w	r3, r3, #8
 800796e:	2b08      	cmp	r3, #8
 8007970:	d11b      	bne.n	80079aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f06f 0208 	mvn.w	r2, #8
 800797a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2204      	movs	r2, #4
 8007980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	f003 0303 	and.w	r3, r3, #3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f9a5 	bl	8007ce0 <HAL_TIM_IC_CaptureCallback>
 8007996:	e005      	b.n	80079a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f997 	bl	8007ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f9a8 	bl	8007cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	f003 0310 	and.w	r3, r3, #16
 80079b4:	2b10      	cmp	r3, #16
 80079b6:	d122      	bne.n	80079fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f003 0310 	and.w	r3, r3, #16
 80079c2:	2b10      	cmp	r3, #16
 80079c4:	d11b      	bne.n	80079fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f06f 0210 	mvn.w	r2, #16
 80079ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2208      	movs	r2, #8
 80079d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f97b 	bl	8007ce0 <HAL_TIM_IC_CaptureCallback>
 80079ea:	e005      	b.n	80079f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f96d 	bl	8007ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f97e 	bl	8007cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d10e      	bne.n	8007a2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d107      	bne.n	8007a2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f06f 0201 	mvn.w	r2, #1
 8007a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7f9 fd93 	bl	8001550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a34:	2b80      	cmp	r3, #128	; 0x80
 8007a36:	d10e      	bne.n	8007a56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a42:	2b80      	cmp	r3, #128	; 0x80
 8007a44:	d107      	bne.n	8007a56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fb2d 	bl	80080b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a64:	d10e      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a70:	2b80      	cmp	r3, #128	; 0x80
 8007a72:	d107      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fb20 	bl	80080c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8e:	2b40      	cmp	r3, #64	; 0x40
 8007a90:	d10e      	bne.n	8007ab0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9c:	2b40      	cmp	r3, #64	; 0x40
 8007a9e:	d107      	bne.n	8007ab0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f92c 	bl	8007d08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	f003 0320 	and.w	r3, r3, #32
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	d10e      	bne.n	8007adc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	f003 0320 	and.w	r3, r3, #32
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d107      	bne.n	8007adc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f06f 0220 	mvn.w	r2, #32
 8007ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fae0 	bl	800809c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d101      	bne.n	8007afc <HAL_TIM_ConfigClockSource+0x18>
 8007af8:	2302      	movs	r3, #2
 8007afa:	e0db      	b.n	8007cb4 <HAL_TIM_ConfigClockSource+0x1d0>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4b69      	ldr	r3, [pc, #420]	; (8007cbc <HAL_TIM_ConfigClockSource+0x1d8>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a63      	ldr	r2, [pc, #396]	; (8007cc0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	f000 80a9 	beq.w	8007c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007b38:	4a61      	ldr	r2, [pc, #388]	; (8007cc0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	f200 80ae 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007b40:	4a60      	ldr	r2, [pc, #384]	; (8007cc4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	f000 80a1 	beq.w	8007c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007b48:	4a5e      	ldr	r2, [pc, #376]	; (8007cc4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	f200 80a6 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007b50:	4a5d      	ldr	r2, [pc, #372]	; (8007cc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	f000 8099 	beq.w	8007c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007b58:	4a5b      	ldr	r2, [pc, #364]	; (8007cc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	f200 809e 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007b60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b64:	f000 8091 	beq.w	8007c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007b68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b6c:	f200 8096 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b74:	f000 8089 	beq.w	8007c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b7c:	f200 808e 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b84:	d03e      	beq.n	8007c04 <HAL_TIM_ConfigClockSource+0x120>
 8007b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b8a:	f200 8087 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b92:	f000 8085 	beq.w	8007ca0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9a:	d87f      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007b9c:	2b70      	cmp	r3, #112	; 0x70
 8007b9e:	d01a      	beq.n	8007bd6 <HAL_TIM_ConfigClockSource+0xf2>
 8007ba0:	2b70      	cmp	r3, #112	; 0x70
 8007ba2:	d87b      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007ba4:	2b60      	cmp	r3, #96	; 0x60
 8007ba6:	d050      	beq.n	8007c4a <HAL_TIM_ConfigClockSource+0x166>
 8007ba8:	2b60      	cmp	r3, #96	; 0x60
 8007baa:	d877      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007bac:	2b50      	cmp	r3, #80	; 0x50
 8007bae:	d03c      	beq.n	8007c2a <HAL_TIM_ConfigClockSource+0x146>
 8007bb0:	2b50      	cmp	r3, #80	; 0x50
 8007bb2:	d873      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007bb4:	2b40      	cmp	r3, #64	; 0x40
 8007bb6:	d058      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x186>
 8007bb8:	2b40      	cmp	r3, #64	; 0x40
 8007bba:	d86f      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007bbc:	2b30      	cmp	r3, #48	; 0x30
 8007bbe:	d064      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007bc0:	2b30      	cmp	r3, #48	; 0x30
 8007bc2:	d86b      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007bc4:	2b20      	cmp	r3, #32
 8007bc6:	d060      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d867      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d05c      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007bd0:	2b10      	cmp	r3, #16
 8007bd2:	d05a      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007bd4:	e062      	b.n	8007c9c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	6899      	ldr	r1, [r3, #8]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f000 f9b1 	bl	8007f4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bf8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	609a      	str	r2, [r3, #8]
      break;
 8007c02:	e04e      	b.n	8007ca2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6818      	ldr	r0, [r3, #0]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	6899      	ldr	r1, [r3, #8]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	f000 f99a 	bl	8007f4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c26:	609a      	str	r2, [r3, #8]
      break;
 8007c28:	e03b      	b.n	8007ca2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6818      	ldr	r0, [r3, #0]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	6859      	ldr	r1, [r3, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	461a      	mov	r2, r3
 8007c38:	f000 f90a 	bl	8007e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2150      	movs	r1, #80	; 0x50
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 f964 	bl	8007f10 <TIM_ITRx_SetConfig>
      break;
 8007c48:	e02b      	b.n	8007ca2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	6859      	ldr	r1, [r3, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	461a      	mov	r2, r3
 8007c58:	f000 f929 	bl	8007eae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2160      	movs	r1, #96	; 0x60
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 f954 	bl	8007f10 <TIM_ITRx_SetConfig>
      break;
 8007c68:	e01b      	b.n	8007ca2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	6859      	ldr	r1, [r3, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	461a      	mov	r2, r3
 8007c78:	f000 f8ea 	bl	8007e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2140      	movs	r1, #64	; 0x40
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 f944 	bl	8007f10 <TIM_ITRx_SetConfig>
      break;
 8007c88:	e00b      	b.n	8007ca2 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4619      	mov	r1, r3
 8007c94:	4610      	mov	r0, r2
 8007c96:	f000 f93b 	bl	8007f10 <TIM_ITRx_SetConfig>
        break;
 8007c9a:	e002      	b.n	8007ca2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007c9c:	bf00      	nop
 8007c9e:	e000      	b.n	8007ca2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007ca0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	ffceff88 	.word	0xffceff88
 8007cc0:	00100040 	.word	0x00100040
 8007cc4:	00100030 	.word	0x00100030
 8007cc8:	00100020 	.word	0x00100020

08007ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a40      	ldr	r2, [pc, #256]	; (8007e30 <TIM_Base_SetConfig+0x114>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d013      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d3a:	d00f      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a3d      	ldr	r2, [pc, #244]	; (8007e34 <TIM_Base_SetConfig+0x118>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00b      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a3c      	ldr	r2, [pc, #240]	; (8007e38 <TIM_Base_SetConfig+0x11c>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d007      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a3b      	ldr	r2, [pc, #236]	; (8007e3c <TIM_Base_SetConfig+0x120>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d003      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a3a      	ldr	r2, [pc, #232]	; (8007e40 <TIM_Base_SetConfig+0x124>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d108      	bne.n	8007d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a2f      	ldr	r2, [pc, #188]	; (8007e30 <TIM_Base_SetConfig+0x114>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d01f      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7c:	d01b      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a2c      	ldr	r2, [pc, #176]	; (8007e34 <TIM_Base_SetConfig+0x118>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d017      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a2b      	ldr	r2, [pc, #172]	; (8007e38 <TIM_Base_SetConfig+0x11c>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d013      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a2a      	ldr	r2, [pc, #168]	; (8007e3c <TIM_Base_SetConfig+0x120>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00f      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a29      	ldr	r2, [pc, #164]	; (8007e40 <TIM_Base_SetConfig+0x124>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00b      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a28      	ldr	r2, [pc, #160]	; (8007e44 <TIM_Base_SetConfig+0x128>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d007      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a27      	ldr	r2, [pc, #156]	; (8007e48 <TIM_Base_SetConfig+0x12c>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d003      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a26      	ldr	r2, [pc, #152]	; (8007e4c <TIM_Base_SetConfig+0x130>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d108      	bne.n	8007dc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a10      	ldr	r2, [pc, #64]	; (8007e30 <TIM_Base_SetConfig+0x114>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d00f      	beq.n	8007e14 <TIM_Base_SetConfig+0xf8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a12      	ldr	r2, [pc, #72]	; (8007e40 <TIM_Base_SetConfig+0x124>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d00b      	beq.n	8007e14 <TIM_Base_SetConfig+0xf8>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a11      	ldr	r2, [pc, #68]	; (8007e44 <TIM_Base_SetConfig+0x128>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d007      	beq.n	8007e14 <TIM_Base_SetConfig+0xf8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a10      	ldr	r2, [pc, #64]	; (8007e48 <TIM_Base_SetConfig+0x12c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d003      	beq.n	8007e14 <TIM_Base_SetConfig+0xf8>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a0f      	ldr	r2, [pc, #60]	; (8007e4c <TIM_Base_SetConfig+0x130>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d103      	bne.n	8007e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	691a      	ldr	r2, [r3, #16]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	615a      	str	r2, [r3, #20]
}
 8007e22:	bf00      	nop
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40010000 	.word	0x40010000
 8007e34:	40000400 	.word	0x40000400
 8007e38:	40000800 	.word	0x40000800
 8007e3c:	40000c00 	.word	0x40000c00
 8007e40:	40010400 	.word	0x40010400
 8007e44:	40014000 	.word	0x40014000
 8007e48:	40014400 	.word	0x40014400
 8007e4c:	40014800 	.word	0x40014800

08007e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	f023 0201 	bic.w	r2, r3, #1
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	011b      	lsls	r3, r3, #4
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f023 030a 	bic.w	r3, r3, #10
 8007e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	621a      	str	r2, [r3, #32]
}
 8007ea2:	bf00      	nop
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b087      	sub	sp, #28
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	f023 0210 	bic.w	r2, r3, #16
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ed8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	031b      	lsls	r3, r3, #12
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	621a      	str	r2, [r3, #32]
}
 8007f02:	bf00      	nop
 8007f04:	371c      	adds	r7, #28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
	...

08007f10 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <TIM_ITRx_SetConfig+0x38>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	f043 0307 	orr.w	r3, r3, #7
 8007f32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	609a      	str	r2, [r3, #8]
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	ffcfff8f 	.word	0xffcfff8f

08007f4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	021a      	lsls	r2, r3, #8
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	609a      	str	r2, [r3, #8]
}
 8007f80:	bf00      	nop
 8007f82:	371c      	adds	r7, #28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e068      	b.n	8008076 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a2e      	ldr	r2, [pc, #184]	; (8008084 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d004      	beq.n	8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a2d      	ldr	r2, [pc, #180]	; (8008088 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d108      	bne.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007fde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a1e      	ldr	r2, [pc, #120]	; (8008084 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d01d      	beq.n	800804a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008016:	d018      	beq.n	800804a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a1b      	ldr	r2, [pc, #108]	; (800808c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d013      	beq.n	800804a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a1a      	ldr	r2, [pc, #104]	; (8008090 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d00e      	beq.n	800804a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a18      	ldr	r2, [pc, #96]	; (8008094 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d009      	beq.n	800804a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a13      	ldr	r2, [pc, #76]	; (8008088 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d004      	beq.n	800804a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a14      	ldr	r2, [pc, #80]	; (8008098 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d10c      	bne.n	8008064 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	4313      	orrs	r3, r2
 800805a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	40010000 	.word	0x40010000
 8008088:	40010400 	.word	0x40010400
 800808c:	40000400 	.word	0x40000400
 8008090:	40000800 	.word	0x40000800
 8008094:	40000c00 	.word	0x40000c00
 8008098:	40001800 	.word	0x40001800

0800809c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e042      	b.n	8008170 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d106      	bne.n	8008102 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7f9 fb0b 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2224      	movs	r2, #36	; 0x24
 8008106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0201 	bic.w	r2, r2, #1
 8008118:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fafc 	bl	8008718 <UART_SetConfig>
 8008120:	4603      	mov	r3, r0
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e022      	b.n	8008170 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 f850 	bl	80091d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0201 	orr.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 f8d7 	bl	800931c <UART_CheckIdleState>
 800816e:	4603      	mov	r3, r0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	69db      	ldr	r3, [r3, #28]
 8008186:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008198:	69fa      	ldr	r2, [r7, #28]
 800819a:	f640 030f 	movw	r3, #2063	; 0x80f
 800819e:	4013      	ands	r3, r2
 80081a0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d118      	bne.n	80081da <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d013      	beq.n	80081da <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	f003 0320 	and.w	r3, r3, #32
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d104      	bne.n	80081c6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 8282 	beq.w	80086d4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	4798      	blx	r3
      }
      return;
 80081d8:	e27c      	b.n	80086d4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 80ef 	beq.w	80083c0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	4b73      	ldr	r3, [pc, #460]	; (80083b4 <HAL_UART_IRQHandler+0x23c>)
 80081e6:	4013      	ands	r3, r2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d105      	bne.n	80081f8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	4b72      	ldr	r3, [pc, #456]	; (80083b8 <HAL_UART_IRQHandler+0x240>)
 80081f0:	4013      	ands	r3, r2
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 80e4 	beq.w	80083c0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d010      	beq.n	8008224 <HAL_UART_IRQHandler+0xac>
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00b      	beq.n	8008224 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2201      	movs	r2, #1
 8008212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800821a:	f043 0201 	orr.w	r2, r3, #1
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d010      	beq.n	8008250 <HAL_UART_IRQHandler+0xd8>
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2202      	movs	r2, #2
 800823e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008246:	f043 0204 	orr.w	r2, r3, #4
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	f003 0304 	and.w	r3, r3, #4
 8008256:	2b00      	cmp	r3, #0
 8008258:	d010      	beq.n	800827c <HAL_UART_IRQHandler+0x104>
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2204      	movs	r2, #4
 800826a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008272:	f043 0202 	orr.w	r2, r3, #2
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d015      	beq.n	80082b2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	f003 0320 	and.w	r3, r3, #32
 800828c:	2b00      	cmp	r3, #0
 800828e:	d104      	bne.n	800829a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	4b48      	ldr	r3, [pc, #288]	; (80083b4 <HAL_UART_IRQHandler+0x23c>)
 8008294:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00b      	beq.n	80082b2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2208      	movs	r2, #8
 80082a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a8:	f043 0208 	orr.w	r2, r3, #8
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d011      	beq.n	80082e0 <HAL_UART_IRQHandler+0x168>
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00c      	beq.n	80082e0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082d6:	f043 0220 	orr.w	r2, r3, #32
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 81f6 	beq.w	80086d8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d011      	beq.n	800831a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	f003 0320 	and.w	r3, r3, #32
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d104      	bne.n	800830a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d007      	beq.n	800831a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008320:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832c:	2b40      	cmp	r3, #64	; 0x40
 800832e:	d004      	beq.n	800833a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008336:	2b00      	cmp	r3, #0
 8008338:	d031      	beq.n	800839e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 f8ba 	bl	80094b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834a:	2b40      	cmp	r3, #64	; 0x40
 800834c:	d123      	bne.n	8008396 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800835c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008362:	2b00      	cmp	r3, #0
 8008364:	d013      	beq.n	800838e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800836a:	4a14      	ldr	r2, [pc, #80]	; (80083bc <HAL_UART_IRQHandler+0x244>)
 800836c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008372:	4618      	mov	r0, r3
 8008374:	f7fa fcfc 	bl	8002d70 <HAL_DMA_Abort_IT>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d017      	beq.n	80083ae <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008388:	4610      	mov	r0, r2
 800838a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800838c:	e00f      	b.n	80083ae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f9ac 	bl	80086ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008394:	e00b      	b.n	80083ae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f9a8 	bl	80086ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800839c:	e007      	b.n	80083ae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f9a4 	bl	80086ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80083ac:	e194      	b.n	80086d8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ae:	bf00      	nop
    return;
 80083b0:	e192      	b.n	80086d8 <HAL_UART_IRQHandler+0x560>
 80083b2:	bf00      	nop
 80083b4:	10000001 	.word	0x10000001
 80083b8:	04000120 	.word	0x04000120
 80083bc:	08009519 	.word	0x08009519

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	f040 810f 	bne.w	80085e8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	f003 0310 	and.w	r3, r3, #16
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 8109 	beq.w	80085e8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	f003 0310 	and.w	r3, r3, #16
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 8103 	beq.w	80085e8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2210      	movs	r2, #16
 80083e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f4:	2b40      	cmp	r3, #64	; 0x40
 80083f6:	f040 80bb 	bne.w	8008570 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a96      	ldr	r2, [pc, #600]	; (800865c <HAL_UART_IRQHandler+0x4e4>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d059      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a94      	ldr	r2, [pc, #592]	; (8008660 <HAL_UART_IRQHandler+0x4e8>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d053      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a92      	ldr	r2, [pc, #584]	; (8008664 <HAL_UART_IRQHandler+0x4ec>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d04d      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a90      	ldr	r2, [pc, #576]	; (8008668 <HAL_UART_IRQHandler+0x4f0>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d047      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a8e      	ldr	r2, [pc, #568]	; (800866c <HAL_UART_IRQHandler+0x4f4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d041      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a8c      	ldr	r2, [pc, #560]	; (8008670 <HAL_UART_IRQHandler+0x4f8>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d03b      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a8a      	ldr	r2, [pc, #552]	; (8008674 <HAL_UART_IRQHandler+0x4fc>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d035      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a88      	ldr	r2, [pc, #544]	; (8008678 <HAL_UART_IRQHandler+0x500>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d02f      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a86      	ldr	r2, [pc, #536]	; (800867c <HAL_UART_IRQHandler+0x504>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d029      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a84      	ldr	r2, [pc, #528]	; (8008680 <HAL_UART_IRQHandler+0x508>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d023      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a82      	ldr	r2, [pc, #520]	; (8008684 <HAL_UART_IRQHandler+0x50c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d01d      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a80      	ldr	r2, [pc, #512]	; (8008688 <HAL_UART_IRQHandler+0x510>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d017      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a7e      	ldr	r2, [pc, #504]	; (800868c <HAL_UART_IRQHandler+0x514>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d011      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a7c      	ldr	r2, [pc, #496]	; (8008690 <HAL_UART_IRQHandler+0x518>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d00b      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a7a      	ldr	r2, [pc, #488]	; (8008694 <HAL_UART_IRQHandler+0x51c>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d005      	beq.n	80084ba <HAL_UART_IRQHandler+0x342>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a78      	ldr	r2, [pc, #480]	; (8008698 <HAL_UART_IRQHandler+0x520>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d105      	bne.n	80084c6 <HAL_UART_IRQHandler+0x34e>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	e004      	b.n	80084d0 <HAL_UART_IRQHandler+0x358>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80084d2:	893b      	ldrh	r3, [r7, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 8101 	beq.w	80086dc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084e0:	893a      	ldrh	r2, [r7, #8]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	f080 80fa 	bcs.w	80086dc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	893a      	ldrh	r2, [r7, #8]
 80084ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084fa:	d02b      	beq.n	8008554 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800850a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 0201 	bic.w	r2, r2, #1
 800851a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689a      	ldr	r2, [r3, #8]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800852a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2220      	movs	r2, #32
 8008530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0210 	bic.w	r2, r2, #16
 8008548:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800854e:	4618      	mov	r0, r3
 8008550:	f7fa f8f0 	bl	8002734 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008560:	b29b      	uxth	r3, r3
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	b29b      	uxth	r3, r3
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f8c9 	bl	8008700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800856e:	e0b5      	b.n	80086dc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800857c:	b29b      	uxth	r3, r3
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 80a8 	beq.w	80086e0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8008590:	897b      	ldrh	r3, [r7, #10]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 80a4 	beq.w	80086e0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80085a6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6899      	ldr	r1, [r3, #8]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	4b3a      	ldr	r3, [pc, #232]	; (800869c <HAL_UART_IRQHandler+0x524>)
 80085b4:	400b      	ands	r3, r1
 80085b6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f022 0210 	bic.w	r2, r2, #16
 80085da:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085dc:	897b      	ldrh	r3, [r7, #10]
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f88d 	bl	8008700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085e6:	e07b      	b.n	80086e0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00d      	beq.n	800860e <HAL_UART_IRQHandler+0x496>
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d008      	beq.n	800860e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008604:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f001 f820 	bl	800964c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800860c:	e06b      	b.n	80086e6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008614:	2b00      	cmp	r3, #0
 8008616:	d012      	beq.n	800863e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d008      	beq.n	800863e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008630:	2b00      	cmp	r3, #0
 8008632:	d057      	beq.n	80086e4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	4798      	blx	r3
    }
    return;
 800863c:	e052      	b.n	80086e4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008644:	2b00      	cmp	r3, #0
 8008646:	d02b      	beq.n	80086a0 <HAL_UART_IRQHandler+0x528>
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864e:	2b00      	cmp	r3, #0
 8008650:	d026      	beq.n	80086a0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 ff76 	bl	8009544 <UART_EndTransmit_IT>
    return;
 8008658:	e045      	b.n	80086e6 <HAL_UART_IRQHandler+0x56e>
 800865a:	bf00      	nop
 800865c:	40020010 	.word	0x40020010
 8008660:	40020028 	.word	0x40020028
 8008664:	40020040 	.word	0x40020040
 8008668:	40020058 	.word	0x40020058
 800866c:	40020070 	.word	0x40020070
 8008670:	40020088 	.word	0x40020088
 8008674:	400200a0 	.word	0x400200a0
 8008678:	400200b8 	.word	0x400200b8
 800867c:	40020410 	.word	0x40020410
 8008680:	40020428 	.word	0x40020428
 8008684:	40020440 	.word	0x40020440
 8008688:	40020458 	.word	0x40020458
 800868c:	40020470 	.word	0x40020470
 8008690:	40020488 	.word	0x40020488
 8008694:	400204a0 	.word	0x400204a0
 8008698:	400204b8 	.word	0x400204b8
 800869c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d008      	beq.n	80086bc <HAL_UART_IRQHandler+0x544>
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d003      	beq.n	80086bc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 ffdd 	bl	8009674 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086ba:	e014      	b.n	80086e6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00f      	beq.n	80086e6 <HAL_UART_IRQHandler+0x56e>
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	da0c      	bge.n	80086e6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 ffc7 	bl	8009660 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086d2:	e008      	b.n	80086e6 <HAL_UART_IRQHandler+0x56e>
      return;
 80086d4:	bf00      	nop
 80086d6:	e006      	b.n	80086e6 <HAL_UART_IRQHandler+0x56e>
    return;
 80086d8:	bf00      	nop
 80086da:	e004      	b.n	80086e6 <HAL_UART_IRQHandler+0x56e>
      return;
 80086dc:	bf00      	nop
 80086de:	e002      	b.n	80086e6 <HAL_UART_IRQHandler+0x56e>
      return;
 80086e0:	bf00      	nop
 80086e2:	e000      	b.n	80086e6 <HAL_UART_IRQHandler+0x56e>
    return;
 80086e4:	bf00      	nop
  }
}
 80086e6:	3720      	adds	r7, #32
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008718:	b5b0      	push	{r4, r5, r7, lr}
 800871a:	b08e      	sub	sp, #56	; 0x38
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	431a      	orrs	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	431a      	orrs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	4313      	orrs	r3, r2
 800873c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	4bbf      	ldr	r3, [pc, #764]	; (8008a44 <UART_SetConfig+0x32c>)
 8008746:	4013      	ands	r3, r2
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6812      	ldr	r2, [r2, #0]
 800874c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800874e:	430b      	orrs	r3, r1
 8008750:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68da      	ldr	r2, [r3, #12]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	430a      	orrs	r2, r1
 8008766:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4ab5      	ldr	r2, [pc, #724]	; (8008a48 <UART_SetConfig+0x330>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d004      	beq.n	8008782 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800877e:	4313      	orrs	r3, r2
 8008780:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	4bb0      	ldr	r3, [pc, #704]	; (8008a4c <UART_SetConfig+0x334>)
 800878a:	4013      	ands	r3, r2
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	6812      	ldr	r2, [r2, #0]
 8008790:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008792:	430b      	orrs	r3, r1
 8008794:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	f023 010f 	bic.w	r1, r3, #15
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4aa7      	ldr	r2, [pc, #668]	; (8008a50 <UART_SetConfig+0x338>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d176      	bne.n	80088a4 <UART_SetConfig+0x18c>
 80087b6:	4ba7      	ldr	r3, [pc, #668]	; (8008a54 <UART_SetConfig+0x33c>)
 80087b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087be:	2b28      	cmp	r3, #40	; 0x28
 80087c0:	d86c      	bhi.n	800889c <UART_SetConfig+0x184>
 80087c2:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <UART_SetConfig+0xb0>)
 80087c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c8:	0800886d 	.word	0x0800886d
 80087cc:	0800889d 	.word	0x0800889d
 80087d0:	0800889d 	.word	0x0800889d
 80087d4:	0800889d 	.word	0x0800889d
 80087d8:	0800889d 	.word	0x0800889d
 80087dc:	0800889d 	.word	0x0800889d
 80087e0:	0800889d 	.word	0x0800889d
 80087e4:	0800889d 	.word	0x0800889d
 80087e8:	08008875 	.word	0x08008875
 80087ec:	0800889d 	.word	0x0800889d
 80087f0:	0800889d 	.word	0x0800889d
 80087f4:	0800889d 	.word	0x0800889d
 80087f8:	0800889d 	.word	0x0800889d
 80087fc:	0800889d 	.word	0x0800889d
 8008800:	0800889d 	.word	0x0800889d
 8008804:	0800889d 	.word	0x0800889d
 8008808:	0800887d 	.word	0x0800887d
 800880c:	0800889d 	.word	0x0800889d
 8008810:	0800889d 	.word	0x0800889d
 8008814:	0800889d 	.word	0x0800889d
 8008818:	0800889d 	.word	0x0800889d
 800881c:	0800889d 	.word	0x0800889d
 8008820:	0800889d 	.word	0x0800889d
 8008824:	0800889d 	.word	0x0800889d
 8008828:	08008885 	.word	0x08008885
 800882c:	0800889d 	.word	0x0800889d
 8008830:	0800889d 	.word	0x0800889d
 8008834:	0800889d 	.word	0x0800889d
 8008838:	0800889d 	.word	0x0800889d
 800883c:	0800889d 	.word	0x0800889d
 8008840:	0800889d 	.word	0x0800889d
 8008844:	0800889d 	.word	0x0800889d
 8008848:	0800888d 	.word	0x0800888d
 800884c:	0800889d 	.word	0x0800889d
 8008850:	0800889d 	.word	0x0800889d
 8008854:	0800889d 	.word	0x0800889d
 8008858:	0800889d 	.word	0x0800889d
 800885c:	0800889d 	.word	0x0800889d
 8008860:	0800889d 	.word	0x0800889d
 8008864:	0800889d 	.word	0x0800889d
 8008868:	08008895 	.word	0x08008895
 800886c:	2301      	movs	r3, #1
 800886e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008872:	e222      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008874:	2304      	movs	r3, #4
 8008876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800887a:	e21e      	b.n	8008cba <UART_SetConfig+0x5a2>
 800887c:	2308      	movs	r3, #8
 800887e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008882:	e21a      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008884:	2310      	movs	r3, #16
 8008886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800888a:	e216      	b.n	8008cba <UART_SetConfig+0x5a2>
 800888c:	2320      	movs	r3, #32
 800888e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008892:	e212      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008894:	2340      	movs	r3, #64	; 0x40
 8008896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800889a:	e20e      	b.n	8008cba <UART_SetConfig+0x5a2>
 800889c:	2380      	movs	r3, #128	; 0x80
 800889e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088a2:	e20a      	b.n	8008cba <UART_SetConfig+0x5a2>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a6b      	ldr	r2, [pc, #428]	; (8008a58 <UART_SetConfig+0x340>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d130      	bne.n	8008910 <UART_SetConfig+0x1f8>
 80088ae:	4b69      	ldr	r3, [pc, #420]	; (8008a54 <UART_SetConfig+0x33c>)
 80088b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b2:	f003 0307 	and.w	r3, r3, #7
 80088b6:	2b05      	cmp	r3, #5
 80088b8:	d826      	bhi.n	8008908 <UART_SetConfig+0x1f0>
 80088ba:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <UART_SetConfig+0x1a8>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	080088d9 	.word	0x080088d9
 80088c4:	080088e1 	.word	0x080088e1
 80088c8:	080088e9 	.word	0x080088e9
 80088cc:	080088f1 	.word	0x080088f1
 80088d0:	080088f9 	.word	0x080088f9
 80088d4:	08008901 	.word	0x08008901
 80088d8:	2300      	movs	r3, #0
 80088da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088de:	e1ec      	b.n	8008cba <UART_SetConfig+0x5a2>
 80088e0:	2304      	movs	r3, #4
 80088e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e6:	e1e8      	b.n	8008cba <UART_SetConfig+0x5a2>
 80088e8:	2308      	movs	r3, #8
 80088ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ee:	e1e4      	b.n	8008cba <UART_SetConfig+0x5a2>
 80088f0:	2310      	movs	r3, #16
 80088f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088f6:	e1e0      	b.n	8008cba <UART_SetConfig+0x5a2>
 80088f8:	2320      	movs	r3, #32
 80088fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088fe:	e1dc      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008900:	2340      	movs	r3, #64	; 0x40
 8008902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008906:	e1d8      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008908:	2380      	movs	r3, #128	; 0x80
 800890a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800890e:	e1d4      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a51      	ldr	r2, [pc, #324]	; (8008a5c <UART_SetConfig+0x344>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d130      	bne.n	800897c <UART_SetConfig+0x264>
 800891a:	4b4e      	ldr	r3, [pc, #312]	; (8008a54 <UART_SetConfig+0x33c>)
 800891c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891e:	f003 0307 	and.w	r3, r3, #7
 8008922:	2b05      	cmp	r3, #5
 8008924:	d826      	bhi.n	8008974 <UART_SetConfig+0x25c>
 8008926:	a201      	add	r2, pc, #4	; (adr r2, 800892c <UART_SetConfig+0x214>)
 8008928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892c:	08008945 	.word	0x08008945
 8008930:	0800894d 	.word	0x0800894d
 8008934:	08008955 	.word	0x08008955
 8008938:	0800895d 	.word	0x0800895d
 800893c:	08008965 	.word	0x08008965
 8008940:	0800896d 	.word	0x0800896d
 8008944:	2300      	movs	r3, #0
 8008946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800894a:	e1b6      	b.n	8008cba <UART_SetConfig+0x5a2>
 800894c:	2304      	movs	r3, #4
 800894e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008952:	e1b2      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008954:	2308      	movs	r3, #8
 8008956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800895a:	e1ae      	b.n	8008cba <UART_SetConfig+0x5a2>
 800895c:	2310      	movs	r3, #16
 800895e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008962:	e1aa      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008964:	2320      	movs	r3, #32
 8008966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800896a:	e1a6      	b.n	8008cba <UART_SetConfig+0x5a2>
 800896c:	2340      	movs	r3, #64	; 0x40
 800896e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008972:	e1a2      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008974:	2380      	movs	r3, #128	; 0x80
 8008976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800897a:	e19e      	b.n	8008cba <UART_SetConfig+0x5a2>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a37      	ldr	r2, [pc, #220]	; (8008a60 <UART_SetConfig+0x348>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d130      	bne.n	80089e8 <UART_SetConfig+0x2d0>
 8008986:	4b33      	ldr	r3, [pc, #204]	; (8008a54 <UART_SetConfig+0x33c>)
 8008988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898a:	f003 0307 	and.w	r3, r3, #7
 800898e:	2b05      	cmp	r3, #5
 8008990:	d826      	bhi.n	80089e0 <UART_SetConfig+0x2c8>
 8008992:	a201      	add	r2, pc, #4	; (adr r2, 8008998 <UART_SetConfig+0x280>)
 8008994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008998:	080089b1 	.word	0x080089b1
 800899c:	080089b9 	.word	0x080089b9
 80089a0:	080089c1 	.word	0x080089c1
 80089a4:	080089c9 	.word	0x080089c9
 80089a8:	080089d1 	.word	0x080089d1
 80089ac:	080089d9 	.word	0x080089d9
 80089b0:	2300      	movs	r3, #0
 80089b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089b6:	e180      	b.n	8008cba <UART_SetConfig+0x5a2>
 80089b8:	2304      	movs	r3, #4
 80089ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089be:	e17c      	b.n	8008cba <UART_SetConfig+0x5a2>
 80089c0:	2308      	movs	r3, #8
 80089c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089c6:	e178      	b.n	8008cba <UART_SetConfig+0x5a2>
 80089c8:	2310      	movs	r3, #16
 80089ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ce:	e174      	b.n	8008cba <UART_SetConfig+0x5a2>
 80089d0:	2320      	movs	r3, #32
 80089d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089d6:	e170      	b.n	8008cba <UART_SetConfig+0x5a2>
 80089d8:	2340      	movs	r3, #64	; 0x40
 80089da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089de:	e16c      	b.n	8008cba <UART_SetConfig+0x5a2>
 80089e0:	2380      	movs	r3, #128	; 0x80
 80089e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e6:	e168      	b.n	8008cba <UART_SetConfig+0x5a2>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a1d      	ldr	r2, [pc, #116]	; (8008a64 <UART_SetConfig+0x34c>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d142      	bne.n	8008a78 <UART_SetConfig+0x360>
 80089f2:	4b18      	ldr	r3, [pc, #96]	; (8008a54 <UART_SetConfig+0x33c>)
 80089f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	2b05      	cmp	r3, #5
 80089fc:	d838      	bhi.n	8008a70 <UART_SetConfig+0x358>
 80089fe:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <UART_SetConfig+0x2ec>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a1d 	.word	0x08008a1d
 8008a08:	08008a25 	.word	0x08008a25
 8008a0c:	08008a2d 	.word	0x08008a2d
 8008a10:	08008a35 	.word	0x08008a35
 8008a14:	08008a3d 	.word	0x08008a3d
 8008a18:	08008a69 	.word	0x08008a69
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a22:	e14a      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008a24:	2304      	movs	r3, #4
 8008a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2a:	e146      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008a2c:	2308      	movs	r3, #8
 8008a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a32:	e142      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008a34:	2310      	movs	r3, #16
 8008a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a3a:	e13e      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008a3c:	2320      	movs	r3, #32
 8008a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a42:	e13a      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008a44:	cfff69f3 	.word	0xcfff69f3
 8008a48:	58000c00 	.word	0x58000c00
 8008a4c:	11fff4ff 	.word	0x11fff4ff
 8008a50:	40011000 	.word	0x40011000
 8008a54:	58024400 	.word	0x58024400
 8008a58:	40004400 	.word	0x40004400
 8008a5c:	40004800 	.word	0x40004800
 8008a60:	40004c00 	.word	0x40004c00
 8008a64:	40005000 	.word	0x40005000
 8008a68:	2340      	movs	r3, #64	; 0x40
 8008a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6e:	e124      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008a70:	2380      	movs	r3, #128	; 0x80
 8008a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a76:	e120      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4acc      	ldr	r2, [pc, #816]	; (8008db0 <UART_SetConfig+0x698>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d176      	bne.n	8008b70 <UART_SetConfig+0x458>
 8008a82:	4bcc      	ldr	r3, [pc, #816]	; (8008db4 <UART_SetConfig+0x69c>)
 8008a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a8a:	2b28      	cmp	r3, #40	; 0x28
 8008a8c:	d86c      	bhi.n	8008b68 <UART_SetConfig+0x450>
 8008a8e:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <UART_SetConfig+0x37c>)
 8008a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a94:	08008b39 	.word	0x08008b39
 8008a98:	08008b69 	.word	0x08008b69
 8008a9c:	08008b69 	.word	0x08008b69
 8008aa0:	08008b69 	.word	0x08008b69
 8008aa4:	08008b69 	.word	0x08008b69
 8008aa8:	08008b69 	.word	0x08008b69
 8008aac:	08008b69 	.word	0x08008b69
 8008ab0:	08008b69 	.word	0x08008b69
 8008ab4:	08008b41 	.word	0x08008b41
 8008ab8:	08008b69 	.word	0x08008b69
 8008abc:	08008b69 	.word	0x08008b69
 8008ac0:	08008b69 	.word	0x08008b69
 8008ac4:	08008b69 	.word	0x08008b69
 8008ac8:	08008b69 	.word	0x08008b69
 8008acc:	08008b69 	.word	0x08008b69
 8008ad0:	08008b69 	.word	0x08008b69
 8008ad4:	08008b49 	.word	0x08008b49
 8008ad8:	08008b69 	.word	0x08008b69
 8008adc:	08008b69 	.word	0x08008b69
 8008ae0:	08008b69 	.word	0x08008b69
 8008ae4:	08008b69 	.word	0x08008b69
 8008ae8:	08008b69 	.word	0x08008b69
 8008aec:	08008b69 	.word	0x08008b69
 8008af0:	08008b69 	.word	0x08008b69
 8008af4:	08008b51 	.word	0x08008b51
 8008af8:	08008b69 	.word	0x08008b69
 8008afc:	08008b69 	.word	0x08008b69
 8008b00:	08008b69 	.word	0x08008b69
 8008b04:	08008b69 	.word	0x08008b69
 8008b08:	08008b69 	.word	0x08008b69
 8008b0c:	08008b69 	.word	0x08008b69
 8008b10:	08008b69 	.word	0x08008b69
 8008b14:	08008b59 	.word	0x08008b59
 8008b18:	08008b69 	.word	0x08008b69
 8008b1c:	08008b69 	.word	0x08008b69
 8008b20:	08008b69 	.word	0x08008b69
 8008b24:	08008b69 	.word	0x08008b69
 8008b28:	08008b69 	.word	0x08008b69
 8008b2c:	08008b69 	.word	0x08008b69
 8008b30:	08008b69 	.word	0x08008b69
 8008b34:	08008b61 	.word	0x08008b61
 8008b38:	2301      	movs	r3, #1
 8008b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b3e:	e0bc      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008b40:	2304      	movs	r3, #4
 8008b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b46:	e0b8      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008b48:	2308      	movs	r3, #8
 8008b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b4e:	e0b4      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008b50:	2310      	movs	r3, #16
 8008b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b56:	e0b0      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008b58:	2320      	movs	r3, #32
 8008b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b5e:	e0ac      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008b60:	2340      	movs	r3, #64	; 0x40
 8008b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b66:	e0a8      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008b68:	2380      	movs	r3, #128	; 0x80
 8008b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b6e:	e0a4      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a90      	ldr	r2, [pc, #576]	; (8008db8 <UART_SetConfig+0x6a0>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d130      	bne.n	8008bdc <UART_SetConfig+0x4c4>
 8008b7a:	4b8e      	ldr	r3, [pc, #568]	; (8008db4 <UART_SetConfig+0x69c>)
 8008b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7e:	f003 0307 	and.w	r3, r3, #7
 8008b82:	2b05      	cmp	r3, #5
 8008b84:	d826      	bhi.n	8008bd4 <UART_SetConfig+0x4bc>
 8008b86:	a201      	add	r2, pc, #4	; (adr r2, 8008b8c <UART_SetConfig+0x474>)
 8008b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8c:	08008ba5 	.word	0x08008ba5
 8008b90:	08008bad 	.word	0x08008bad
 8008b94:	08008bb5 	.word	0x08008bb5
 8008b98:	08008bbd 	.word	0x08008bbd
 8008b9c:	08008bc5 	.word	0x08008bc5
 8008ba0:	08008bcd 	.word	0x08008bcd
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008baa:	e086      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008bac:	2304      	movs	r3, #4
 8008bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb2:	e082      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008bb4:	2308      	movs	r3, #8
 8008bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bba:	e07e      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008bbc:	2310      	movs	r3, #16
 8008bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bc2:	e07a      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008bc4:	2320      	movs	r3, #32
 8008bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bca:	e076      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008bcc:	2340      	movs	r3, #64	; 0x40
 8008bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd2:	e072      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008bd4:	2380      	movs	r3, #128	; 0x80
 8008bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bda:	e06e      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a76      	ldr	r2, [pc, #472]	; (8008dbc <UART_SetConfig+0x6a4>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d130      	bne.n	8008c48 <UART_SetConfig+0x530>
 8008be6:	4b73      	ldr	r3, [pc, #460]	; (8008db4 <UART_SetConfig+0x69c>)
 8008be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bea:	f003 0307 	and.w	r3, r3, #7
 8008bee:	2b05      	cmp	r3, #5
 8008bf0:	d826      	bhi.n	8008c40 <UART_SetConfig+0x528>
 8008bf2:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <UART_SetConfig+0x4e0>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c11 	.word	0x08008c11
 8008bfc:	08008c19 	.word	0x08008c19
 8008c00:	08008c21 	.word	0x08008c21
 8008c04:	08008c29 	.word	0x08008c29
 8008c08:	08008c31 	.word	0x08008c31
 8008c0c:	08008c39 	.word	0x08008c39
 8008c10:	2300      	movs	r3, #0
 8008c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c16:	e050      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008c18:	2304      	movs	r3, #4
 8008c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1e:	e04c      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008c20:	2308      	movs	r3, #8
 8008c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c26:	e048      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008c28:	2310      	movs	r3, #16
 8008c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c2e:	e044      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008c30:	2320      	movs	r3, #32
 8008c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c36:	e040      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008c38:	2340      	movs	r3, #64	; 0x40
 8008c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3e:	e03c      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008c40:	2380      	movs	r3, #128	; 0x80
 8008c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c46:	e038      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a5c      	ldr	r2, [pc, #368]	; (8008dc0 <UART_SetConfig+0x6a8>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d130      	bne.n	8008cb4 <UART_SetConfig+0x59c>
 8008c52:	4b58      	ldr	r3, [pc, #352]	; (8008db4 <UART_SetConfig+0x69c>)
 8008c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	2b05      	cmp	r3, #5
 8008c5c:	d826      	bhi.n	8008cac <UART_SetConfig+0x594>
 8008c5e:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <UART_SetConfig+0x54c>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008c7d 	.word	0x08008c7d
 8008c68:	08008c85 	.word	0x08008c85
 8008c6c:	08008c8d 	.word	0x08008c8d
 8008c70:	08008c95 	.word	0x08008c95
 8008c74:	08008c9d 	.word	0x08008c9d
 8008c78:	08008ca5 	.word	0x08008ca5
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c82:	e01a      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008c84:	2304      	movs	r3, #4
 8008c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8a:	e016      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c92:	e012      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008c94:	2310      	movs	r3, #16
 8008c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9a:	e00e      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008c9c:	2320      	movs	r3, #32
 8008c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ca2:	e00a      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008ca4:	2340      	movs	r3, #64	; 0x40
 8008ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008caa:	e006      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008cac:	2380      	movs	r3, #128	; 0x80
 8008cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cb2:	e002      	b.n	8008cba <UART_SetConfig+0x5a2>
 8008cb4:	2380      	movs	r3, #128	; 0x80
 8008cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a40      	ldr	r2, [pc, #256]	; (8008dc0 <UART_SetConfig+0x6a8>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	f040 80ef 	bne.w	8008ea4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	dc46      	bgt.n	8008d5c <UART_SetConfig+0x644>
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	f2c0 8081 	blt.w	8008dd6 <UART_SetConfig+0x6be>
 8008cd4:	3b02      	subs	r3, #2
 8008cd6:	2b1e      	cmp	r3, #30
 8008cd8:	d87d      	bhi.n	8008dd6 <UART_SetConfig+0x6be>
 8008cda:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <UART_SetConfig+0x5c8>)
 8008cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce0:	08008d63 	.word	0x08008d63
 8008ce4:	08008dd7 	.word	0x08008dd7
 8008ce8:	08008d6b 	.word	0x08008d6b
 8008cec:	08008dd7 	.word	0x08008dd7
 8008cf0:	08008dd7 	.word	0x08008dd7
 8008cf4:	08008dd7 	.word	0x08008dd7
 8008cf8:	08008d7b 	.word	0x08008d7b
 8008cfc:	08008dd7 	.word	0x08008dd7
 8008d00:	08008dd7 	.word	0x08008dd7
 8008d04:	08008dd7 	.word	0x08008dd7
 8008d08:	08008dd7 	.word	0x08008dd7
 8008d0c:	08008dd7 	.word	0x08008dd7
 8008d10:	08008dd7 	.word	0x08008dd7
 8008d14:	08008dd7 	.word	0x08008dd7
 8008d18:	08008d8b 	.word	0x08008d8b
 8008d1c:	08008dd7 	.word	0x08008dd7
 8008d20:	08008dd7 	.word	0x08008dd7
 8008d24:	08008dd7 	.word	0x08008dd7
 8008d28:	08008dd7 	.word	0x08008dd7
 8008d2c:	08008dd7 	.word	0x08008dd7
 8008d30:	08008dd7 	.word	0x08008dd7
 8008d34:	08008dd7 	.word	0x08008dd7
 8008d38:	08008dd7 	.word	0x08008dd7
 8008d3c:	08008dd7 	.word	0x08008dd7
 8008d40:	08008dd7 	.word	0x08008dd7
 8008d44:	08008dd7 	.word	0x08008dd7
 8008d48:	08008dd7 	.word	0x08008dd7
 8008d4c:	08008dd7 	.word	0x08008dd7
 8008d50:	08008dd7 	.word	0x08008dd7
 8008d54:	08008dd7 	.word	0x08008dd7
 8008d58:	08008dc9 	.word	0x08008dc9
 8008d5c:	2b40      	cmp	r3, #64	; 0x40
 8008d5e:	d036      	beq.n	8008dce <UART_SetConfig+0x6b6>
 8008d60:	e039      	b.n	8008dd6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008d62:	f7fd fca9 	bl	80066b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008d68:	e03b      	b.n	8008de2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d6a:	f107 0314 	add.w	r3, r7, #20
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fd fcb8 	bl	80066e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d78:	e033      	b.n	8008de2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d7a:	f107 0308 	add.w	r3, r7, #8
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fd fe04 	bl	800698c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d88:	e02b      	b.n	8008de2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d8a:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <UART_SetConfig+0x69c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d96:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <UART_SetConfig+0x69c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	08db      	lsrs	r3, r3, #3
 8008d9c:	f003 0303 	and.w	r3, r3, #3
 8008da0:	4a08      	ldr	r2, [pc, #32]	; (8008dc4 <UART_SetConfig+0x6ac>)
 8008da2:	fa22 f303 	lsr.w	r3, r2, r3
 8008da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008da8:	e01b      	b.n	8008de2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008daa:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <UART_SetConfig+0x6ac>)
 8008dac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dae:	e018      	b.n	8008de2 <UART_SetConfig+0x6ca>
 8008db0:	40011400 	.word	0x40011400
 8008db4:	58024400 	.word	0x58024400
 8008db8:	40007800 	.word	0x40007800
 8008dbc:	40007c00 	.word	0x40007c00
 8008dc0:	58000c00 	.word	0x58000c00
 8008dc4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008dc8:	4bc4      	ldr	r3, [pc, #784]	; (80090dc <UART_SetConfig+0x9c4>)
 8008dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dcc:	e009      	b.n	8008de2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dd4:	e005      	b.n	8008de2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008de0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 81da 	beq.w	800919e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dee:	4abc      	ldr	r2, [pc, #752]	; (80090e0 <UART_SetConfig+0x9c8>)
 8008df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008df4:	461a      	mov	r2, r3
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dfc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	4613      	mov	r3, r2
 8008e04:	005b      	lsls	r3, r3, #1
 8008e06:	4413      	add	r3, r2
 8008e08:	6a3a      	ldr	r2, [r7, #32]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d305      	bcc.n	8008e1a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e14:	6a3a      	ldr	r2, [r7, #32]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d903      	bls.n	8008e22 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008e20:	e1bd      	b.n	800919e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e24:	4618      	mov	r0, r3
 8008e26:	f04f 0100 	mov.w	r1, #0
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	4aac      	ldr	r2, [pc, #688]	; (80090e0 <UART_SetConfig+0x9c8>)
 8008e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	f04f 0300 	mov.w	r3, #0
 8008e3a:	f7f7 fa4d 	bl	80002d8 <__aeabi_uldivmod>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4610      	mov	r0, r2
 8008e44:	4619      	mov	r1, r3
 8008e46:	f04f 0200 	mov.w	r2, #0
 8008e4a:	f04f 0300 	mov.w	r3, #0
 8008e4e:	020b      	lsls	r3, r1, #8
 8008e50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e54:	0202      	lsls	r2, r0, #8
 8008e56:	6879      	ldr	r1, [r7, #4]
 8008e58:	6849      	ldr	r1, [r1, #4]
 8008e5a:	0849      	lsrs	r1, r1, #1
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	f04f 0100 	mov.w	r1, #0
 8008e62:	1814      	adds	r4, r2, r0
 8008e64:	eb43 0501 	adc.w	r5, r3, r1
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	f04f 0300 	mov.w	r3, #0
 8008e72:	4620      	mov	r0, r4
 8008e74:	4629      	mov	r1, r5
 8008e76:	f7f7 fa2f 	bl	80002d8 <__aeabi_uldivmod>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4613      	mov	r3, r2
 8008e80:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e88:	d308      	bcc.n	8008e9c <UART_SetConfig+0x784>
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e90:	d204      	bcs.n	8008e9c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e98:	60da      	str	r2, [r3, #12]
 8008e9a:	e180      	b.n	800919e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008ea2:	e17c      	b.n	800919e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eac:	f040 80bf 	bne.w	800902e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008eb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008eb4:	2b20      	cmp	r3, #32
 8008eb6:	dc49      	bgt.n	8008f4c <UART_SetConfig+0x834>
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	db7c      	blt.n	8008fb6 <UART_SetConfig+0x89e>
 8008ebc:	2b20      	cmp	r3, #32
 8008ebe:	d87a      	bhi.n	8008fb6 <UART_SetConfig+0x89e>
 8008ec0:	a201      	add	r2, pc, #4	; (adr r2, 8008ec8 <UART_SetConfig+0x7b0>)
 8008ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec6:	bf00      	nop
 8008ec8:	08008f53 	.word	0x08008f53
 8008ecc:	08008f5b 	.word	0x08008f5b
 8008ed0:	08008fb7 	.word	0x08008fb7
 8008ed4:	08008fb7 	.word	0x08008fb7
 8008ed8:	08008f63 	.word	0x08008f63
 8008edc:	08008fb7 	.word	0x08008fb7
 8008ee0:	08008fb7 	.word	0x08008fb7
 8008ee4:	08008fb7 	.word	0x08008fb7
 8008ee8:	08008f73 	.word	0x08008f73
 8008eec:	08008fb7 	.word	0x08008fb7
 8008ef0:	08008fb7 	.word	0x08008fb7
 8008ef4:	08008fb7 	.word	0x08008fb7
 8008ef8:	08008fb7 	.word	0x08008fb7
 8008efc:	08008fb7 	.word	0x08008fb7
 8008f00:	08008fb7 	.word	0x08008fb7
 8008f04:	08008fb7 	.word	0x08008fb7
 8008f08:	08008f83 	.word	0x08008f83
 8008f0c:	08008fb7 	.word	0x08008fb7
 8008f10:	08008fb7 	.word	0x08008fb7
 8008f14:	08008fb7 	.word	0x08008fb7
 8008f18:	08008fb7 	.word	0x08008fb7
 8008f1c:	08008fb7 	.word	0x08008fb7
 8008f20:	08008fb7 	.word	0x08008fb7
 8008f24:	08008fb7 	.word	0x08008fb7
 8008f28:	08008fb7 	.word	0x08008fb7
 8008f2c:	08008fb7 	.word	0x08008fb7
 8008f30:	08008fb7 	.word	0x08008fb7
 8008f34:	08008fb7 	.word	0x08008fb7
 8008f38:	08008fb7 	.word	0x08008fb7
 8008f3c:	08008fb7 	.word	0x08008fb7
 8008f40:	08008fb7 	.word	0x08008fb7
 8008f44:	08008fb7 	.word	0x08008fb7
 8008f48:	08008fa9 	.word	0x08008fa9
 8008f4c:	2b40      	cmp	r3, #64	; 0x40
 8008f4e:	d02e      	beq.n	8008fae <UART_SetConfig+0x896>
 8008f50:	e031      	b.n	8008fb6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f52:	f7fc fc45 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 8008f56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f58:	e033      	b.n	8008fc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f5a:	f7fc fc57 	bl	800580c <HAL_RCC_GetPCLK2Freq>
 8008f5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f60:	e02f      	b.n	8008fc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f62:	f107 0314 	add.w	r3, r7, #20
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fd fbbc 	bl	80066e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f70:	e027      	b.n	8008fc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f72:	f107 0308 	add.w	r3, r7, #8
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fd fd08 	bl	800698c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f80:	e01f      	b.n	8008fc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f82:	4b58      	ldr	r3, [pc, #352]	; (80090e4 <UART_SetConfig+0x9cc>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0320 	and.w	r3, r3, #32
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d009      	beq.n	8008fa2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f8e:	4b55      	ldr	r3, [pc, #340]	; (80090e4 <UART_SetConfig+0x9cc>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	08db      	lsrs	r3, r3, #3
 8008f94:	f003 0303 	and.w	r3, r3, #3
 8008f98:	4a53      	ldr	r2, [pc, #332]	; (80090e8 <UART_SetConfig+0x9d0>)
 8008f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fa0:	e00f      	b.n	8008fc2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008fa2:	4b51      	ldr	r3, [pc, #324]	; (80090e8 <UART_SetConfig+0x9d0>)
 8008fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fa6:	e00c      	b.n	8008fc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fa8:	4b4c      	ldr	r3, [pc, #304]	; (80090dc <UART_SetConfig+0x9c4>)
 8008faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fac:	e009      	b.n	8008fc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fb4:	e005      	b.n	8008fc2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008fc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 80ea 	beq.w	800919e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	4a44      	ldr	r2, [pc, #272]	; (80090e0 <UART_SetConfig+0x9c8>)
 8008fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fdc:	005a      	lsls	r2, r3, #1
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	085b      	lsrs	r3, r3, #1
 8008fe4:	441a      	add	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff4:	2b0f      	cmp	r3, #15
 8008ff6:	d916      	bls.n	8009026 <UART_SetConfig+0x90e>
 8008ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ffe:	d212      	bcs.n	8009026 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009002:	b29b      	uxth	r3, r3
 8009004:	f023 030f 	bic.w	r3, r3, #15
 8009008:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900c:	085b      	lsrs	r3, r3, #1
 800900e:	b29b      	uxth	r3, r3
 8009010:	f003 0307 	and.w	r3, r3, #7
 8009014:	b29a      	uxth	r2, r3
 8009016:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009018:	4313      	orrs	r3, r2
 800901a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009022:	60da      	str	r2, [r3, #12]
 8009024:	e0bb      	b.n	800919e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800902c:	e0b7      	b.n	800919e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800902e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009032:	2b20      	cmp	r3, #32
 8009034:	dc4a      	bgt.n	80090cc <UART_SetConfig+0x9b4>
 8009036:	2b00      	cmp	r3, #0
 8009038:	f2c0 8086 	blt.w	8009148 <UART_SetConfig+0xa30>
 800903c:	2b20      	cmp	r3, #32
 800903e:	f200 8083 	bhi.w	8009148 <UART_SetConfig+0xa30>
 8009042:	a201      	add	r2, pc, #4	; (adr r2, 8009048 <UART_SetConfig+0x930>)
 8009044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009048:	080090d3 	.word	0x080090d3
 800904c:	080090ed 	.word	0x080090ed
 8009050:	08009149 	.word	0x08009149
 8009054:	08009149 	.word	0x08009149
 8009058:	080090f5 	.word	0x080090f5
 800905c:	08009149 	.word	0x08009149
 8009060:	08009149 	.word	0x08009149
 8009064:	08009149 	.word	0x08009149
 8009068:	08009105 	.word	0x08009105
 800906c:	08009149 	.word	0x08009149
 8009070:	08009149 	.word	0x08009149
 8009074:	08009149 	.word	0x08009149
 8009078:	08009149 	.word	0x08009149
 800907c:	08009149 	.word	0x08009149
 8009080:	08009149 	.word	0x08009149
 8009084:	08009149 	.word	0x08009149
 8009088:	08009115 	.word	0x08009115
 800908c:	08009149 	.word	0x08009149
 8009090:	08009149 	.word	0x08009149
 8009094:	08009149 	.word	0x08009149
 8009098:	08009149 	.word	0x08009149
 800909c:	08009149 	.word	0x08009149
 80090a0:	08009149 	.word	0x08009149
 80090a4:	08009149 	.word	0x08009149
 80090a8:	08009149 	.word	0x08009149
 80090ac:	08009149 	.word	0x08009149
 80090b0:	08009149 	.word	0x08009149
 80090b4:	08009149 	.word	0x08009149
 80090b8:	08009149 	.word	0x08009149
 80090bc:	08009149 	.word	0x08009149
 80090c0:	08009149 	.word	0x08009149
 80090c4:	08009149 	.word	0x08009149
 80090c8:	0800913b 	.word	0x0800913b
 80090cc:	2b40      	cmp	r3, #64	; 0x40
 80090ce:	d037      	beq.n	8009140 <UART_SetConfig+0xa28>
 80090d0:	e03a      	b.n	8009148 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090d2:	f7fc fb85 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 80090d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80090d8:	e03c      	b.n	8009154 <UART_SetConfig+0xa3c>
 80090da:	bf00      	nop
 80090dc:	003d0900 	.word	0x003d0900
 80090e0:	08009980 	.word	0x08009980
 80090e4:	58024400 	.word	0x58024400
 80090e8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090ec:	f7fc fb8e 	bl	800580c <HAL_RCC_GetPCLK2Freq>
 80090f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80090f2:	e02f      	b.n	8009154 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090f4:	f107 0314 	add.w	r3, r7, #20
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fd faf3 	bl	80066e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009102:	e027      	b.n	8009154 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009104:	f107 0308 	add.w	r3, r7, #8
 8009108:	4618      	mov	r0, r3
 800910a:	f7fd fc3f 	bl	800698c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009112:	e01f      	b.n	8009154 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009114:	4b2c      	ldr	r3, [pc, #176]	; (80091c8 <UART_SetConfig+0xab0>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0320 	and.w	r3, r3, #32
 800911c:	2b00      	cmp	r3, #0
 800911e:	d009      	beq.n	8009134 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009120:	4b29      	ldr	r3, [pc, #164]	; (80091c8 <UART_SetConfig+0xab0>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	08db      	lsrs	r3, r3, #3
 8009126:	f003 0303 	and.w	r3, r3, #3
 800912a:	4a28      	ldr	r2, [pc, #160]	; (80091cc <UART_SetConfig+0xab4>)
 800912c:	fa22 f303 	lsr.w	r3, r2, r3
 8009130:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009132:	e00f      	b.n	8009154 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009134:	4b25      	ldr	r3, [pc, #148]	; (80091cc <UART_SetConfig+0xab4>)
 8009136:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009138:	e00c      	b.n	8009154 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800913a:	4b25      	ldr	r3, [pc, #148]	; (80091d0 <UART_SetConfig+0xab8>)
 800913c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800913e:	e009      	b.n	8009154 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009146:	e005      	b.n	8009154 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009152:	bf00      	nop
    }

    if (pclk != 0U)
 8009154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009156:	2b00      	cmp	r3, #0
 8009158:	d021      	beq.n	800919e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	4a1d      	ldr	r2, [pc, #116]	; (80091d4 <UART_SetConfig+0xabc>)
 8009160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009164:	461a      	mov	r2, r3
 8009166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009168:	fbb3 f2f2 	udiv	r2, r3, r2
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	085b      	lsrs	r3, r3, #1
 8009172:	441a      	add	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	fbb2 f3f3 	udiv	r3, r2, r3
 800917c:	b29b      	uxth	r3, r3
 800917e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	2b0f      	cmp	r3, #15
 8009184:	d908      	bls.n	8009198 <UART_SetConfig+0xa80>
 8009186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800918c:	d204      	bcs.n	8009198 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009194:	60da      	str	r2, [r3, #12]
 8009196:	e002      	b.n	800919e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80091ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3738      	adds	r7, #56	; 0x38
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bdb0      	pop	{r4, r5, r7, pc}
 80091c6:	bf00      	nop
 80091c8:	58024400 	.word	0x58024400
 80091cc:	03d09000 	.word	0x03d09000
 80091d0:	003d0900 	.word	0x003d0900
 80091d4:	08009980 	.word	0x08009980

080091d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00a      	beq.n	8009202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00a      	beq.n	8009224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009228:	f003 0304 	and.w	r3, r3, #4
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00a      	beq.n	8009246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	f003 0308 	and.w	r3, r3, #8
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00a      	beq.n	8009268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	430a      	orrs	r2, r1
 8009266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	f003 0310 	and.w	r3, r3, #16
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00a      	beq.n	800928a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	430a      	orrs	r2, r1
 8009288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00a      	beq.n	80092ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	430a      	orrs	r2, r1
 80092aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d01a      	beq.n	80092ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	430a      	orrs	r2, r1
 80092cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092d6:	d10a      	bne.n	80092ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00a      	beq.n	8009310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	605a      	str	r2, [r3, #4]
  }
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af02      	add	r7, sp, #8
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800932c:	f7f8 fd7e 	bl	8001e2c <HAL_GetTick>
 8009330:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0308 	and.w	r3, r3, #8
 800933c:	2b08      	cmp	r3, #8
 800933e:	d10e      	bne.n	800935e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f82f 	bl	80093b2 <UART_WaitOnFlagUntilTimeout>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e025      	b.n	80093aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0304 	and.w	r3, r3, #4
 8009368:	2b04      	cmp	r3, #4
 800936a:	d10e      	bne.n	800938a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800936c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f819 	bl	80093b2 <UART_WaitOnFlagUntilTimeout>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e00f      	b.n	80093aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2220      	movs	r2, #32
 800938e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2220      	movs	r2, #32
 8009396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	60f8      	str	r0, [r7, #12]
 80093ba:	60b9      	str	r1, [r7, #8]
 80093bc:	603b      	str	r3, [r7, #0]
 80093be:	4613      	mov	r3, r2
 80093c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093c2:	e062      	b.n	800948a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ca:	d05e      	beq.n	800948a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093cc:	f7f8 fd2e 	bl	8001e2c <HAL_GetTick>
 80093d0:	4602      	mov	r2, r0
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d302      	bcc.n	80093e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d11d      	bne.n	800941e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	689a      	ldr	r2, [r3, #8]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f022 0201 	bic.w	r2, r2, #1
 8009400:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2220      	movs	r2, #32
 8009406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2220      	movs	r2, #32
 800940e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e045      	b.n	80094aa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b00      	cmp	r3, #0
 800942a:	d02e      	beq.n	800948a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800943a:	d126      	bne.n	800948a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009444:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009454:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 0201 	bic.w	r2, r2, #1
 8009464:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2220      	movs	r2, #32
 800946a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2220      	movs	r2, #32
 8009472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2220      	movs	r2, #32
 800947a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e00f      	b.n	80094aa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69da      	ldr	r2, [r3, #28]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	4013      	ands	r3, r2
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	429a      	cmp	r2, r3
 8009498:	bf0c      	ite	eq
 800949a:	2301      	moveq	r3, #1
 800949c:	2300      	movne	r3, #0
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	461a      	mov	r2, r3
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d08d      	beq.n	80093c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6899      	ldr	r1, [r3, #8]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4b0f      	ldr	r3, [pc, #60]	; (8009514 <UART_EndRxTransfer+0x60>)
 80094d8:	400b      	ands	r3, r1
 80094da:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d107      	bne.n	80094f4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f022 0210 	bic.w	r2, r2, #16
 80094f2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2220      	movs	r2, #32
 80094f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	effffffe 	.word	0xeffffffe

08009518 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f7ff f8d8 	bl	80086ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800955a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2220      	movs	r2, #32
 8009560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7f7 ffa6 	bl	80014bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
 8009584:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e056      	b.n	800963e <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f7f8 f8b8 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2224      	movs	r2, #36	; 0x24
 80095ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f022 0201 	bic.w	r2, r2, #1
 80095be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f7ff f8a9 	bl	8008718 <UART_SetConfig>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d101      	bne.n	80095d0 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e036      	b.n	800963e <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f7ff fdfd 	bl	80091d8 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095ec:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	430a      	orrs	r2, r1
 8009600:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	055b      	lsls	r3, r3, #21
 8009606:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	041b      	lsls	r3, r3, #16
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	4313      	orrs	r3, r2
 8009610:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <HAL_RS485Ex_Init+0xd0>)
 800961a:	4013      	ands	r3, r2
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	6812      	ldr	r2, [r2, #0]
 8009620:	6979      	ldr	r1, [r7, #20]
 8009622:	430b      	orrs	r3, r1
 8009624:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f042 0201 	orr.w	r2, r2, #1
 8009634:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7ff fe70 	bl	800931c <UART_CheckIdleState>
 800963c:	4603      	mov	r3, r0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	fc00ffff 	.word	0xfc00ffff

0800964c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009696:	2b01      	cmp	r3, #1
 8009698:	d101      	bne.n	800969e <HAL_UARTEx_DisableFifoMode+0x16>
 800969a:	2302      	movs	r3, #2
 800969c:	e027      	b.n	80096ee <HAL_UARTEx_DisableFifoMode+0x66>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2224      	movs	r2, #36	; 0x24
 80096aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f022 0201 	bic.w	r2, r2, #1
 80096c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80096cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2220      	movs	r2, #32
 80096e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800970a:	2b01      	cmp	r3, #1
 800970c:	d101      	bne.n	8009712 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800970e:	2302      	movs	r3, #2
 8009710:	e02d      	b.n	800976e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2224      	movs	r2, #36	; 0x24
 800971e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 0201 	bic.w	r2, r2, #1
 8009738:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f850 	bl	80097f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2220      	movs	r2, #32
 8009760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009786:	2b01      	cmp	r3, #1
 8009788:	d101      	bne.n	800978e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800978a:	2302      	movs	r3, #2
 800978c:	e02d      	b.n	80097ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2224      	movs	r2, #36	; 0x24
 800979a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f022 0201 	bic.w	r2, r2, #1
 80097b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	683a      	ldr	r2, [r7, #0]
 80097c6:	430a      	orrs	r2, r1
 80097c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f812 	bl	80097f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2220      	movs	r2, #32
 80097dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009800:	2b00      	cmp	r3, #0
 8009802:	d108      	bne.n	8009816 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009814:	e031      	b.n	800987a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009816:	2310      	movs	r3, #16
 8009818:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800981a:	2310      	movs	r3, #16
 800981c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	0e5b      	lsrs	r3, r3, #25
 8009826:	b2db      	uxtb	r3, r3
 8009828:	f003 0307 	and.w	r3, r3, #7
 800982c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	0f5b      	lsrs	r3, r3, #29
 8009836:	b2db      	uxtb	r3, r3
 8009838:	f003 0307 	and.w	r3, r3, #7
 800983c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800983e:	7bbb      	ldrb	r3, [r7, #14]
 8009840:	7b3a      	ldrb	r2, [r7, #12]
 8009842:	4911      	ldr	r1, [pc, #68]	; (8009888 <UARTEx_SetNbDataToProcess+0x94>)
 8009844:	5c8a      	ldrb	r2, [r1, r2]
 8009846:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800984a:	7b3a      	ldrb	r2, [r7, #12]
 800984c:	490f      	ldr	r1, [pc, #60]	; (800988c <UARTEx_SetNbDataToProcess+0x98>)
 800984e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009850:	fb93 f3f2 	sdiv	r3, r3, r2
 8009854:	b29a      	uxth	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	7b7a      	ldrb	r2, [r7, #13]
 8009860:	4909      	ldr	r1, [pc, #36]	; (8009888 <UARTEx_SetNbDataToProcess+0x94>)
 8009862:	5c8a      	ldrb	r2, [r1, r2]
 8009864:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009868:	7b7a      	ldrb	r2, [r7, #13]
 800986a:	4908      	ldr	r1, [pc, #32]	; (800988c <UARTEx_SetNbDataToProcess+0x98>)
 800986c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800986e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009872:	b29a      	uxth	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800987a:	bf00      	nop
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	08009998 	.word	0x08009998
 800988c:	080099a0 	.word	0x080099a0

08009890 <sqrt>:
 8009890:	b508      	push	{r3, lr}
 8009892:	ed2d 8b04 	vpush	{d8-d9}
 8009896:	eeb0 8b40 	vmov.f64	d8, d0
 800989a:	f000 f823 	bl	80098e4 <__ieee754_sqrt>
 800989e:	4b10      	ldr	r3, [pc, #64]	; (80098e0 <sqrt+0x50>)
 80098a0:	f993 3000 	ldrsb.w	r3, [r3]
 80098a4:	3301      	adds	r3, #1
 80098a6:	d011      	beq.n	80098cc <sqrt+0x3c>
 80098a8:	eeb4 8b48 	vcmp.f64	d8, d8
 80098ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b0:	d60c      	bvs.n	80098cc <sqrt+0x3c>
 80098b2:	ed9f 9b09 	vldr	d9, [pc, #36]	; 80098d8 <sqrt+0x48>
 80098b6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80098ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098be:	d505      	bpl.n	80098cc <sqrt+0x3c>
 80098c0:	f000 f814 	bl	80098ec <__errno>
 80098c4:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80098c8:	2321      	movs	r3, #33	; 0x21
 80098ca:	6003      	str	r3, [r0, #0]
 80098cc:	ecbd 8b04 	vpop	{d8-d9}
 80098d0:	bd08      	pop	{r3, pc}
 80098d2:	bf00      	nop
 80098d4:	f3af 8000 	nop.w
	...
 80098e0:	2000000d 	.word	0x2000000d

080098e4 <__ieee754_sqrt>:
 80098e4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80098e8:	4770      	bx	lr
	...

080098ec <__errno>:
 80098ec:	4b01      	ldr	r3, [pc, #4]	; (80098f4 <__errno+0x8>)
 80098ee:	6818      	ldr	r0, [r3, #0]
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	20000010 	.word	0x20000010

080098f8 <__libc_init_array>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	4d0d      	ldr	r5, [pc, #52]	; (8009930 <__libc_init_array+0x38>)
 80098fc:	4c0d      	ldr	r4, [pc, #52]	; (8009934 <__libc_init_array+0x3c>)
 80098fe:	1b64      	subs	r4, r4, r5
 8009900:	10a4      	asrs	r4, r4, #2
 8009902:	2600      	movs	r6, #0
 8009904:	42a6      	cmp	r6, r4
 8009906:	d109      	bne.n	800991c <__libc_init_array+0x24>
 8009908:	4d0b      	ldr	r5, [pc, #44]	; (8009938 <__libc_init_array+0x40>)
 800990a:	4c0c      	ldr	r4, [pc, #48]	; (800993c <__libc_init_array+0x44>)
 800990c:	f000 f820 	bl	8009950 <_init>
 8009910:	1b64      	subs	r4, r4, r5
 8009912:	10a4      	asrs	r4, r4, #2
 8009914:	2600      	movs	r6, #0
 8009916:	42a6      	cmp	r6, r4
 8009918:	d105      	bne.n	8009926 <__libc_init_array+0x2e>
 800991a:	bd70      	pop	{r4, r5, r6, pc}
 800991c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009920:	4798      	blx	r3
 8009922:	3601      	adds	r6, #1
 8009924:	e7ee      	b.n	8009904 <__libc_init_array+0xc>
 8009926:	f855 3b04 	ldr.w	r3, [r5], #4
 800992a:	4798      	blx	r3
 800992c:	3601      	adds	r6, #1
 800992e:	e7f2      	b.n	8009916 <__libc_init_array+0x1e>
 8009930:	080099b0 	.word	0x080099b0
 8009934:	080099b0 	.word	0x080099b0
 8009938:	080099b0 	.word	0x080099b0
 800993c:	080099b4 	.word	0x080099b4

08009940 <memset>:
 8009940:	4402      	add	r2, r0
 8009942:	4603      	mov	r3, r0
 8009944:	4293      	cmp	r3, r2
 8009946:	d100      	bne.n	800994a <memset+0xa>
 8009948:	4770      	bx	lr
 800994a:	f803 1b01 	strb.w	r1, [r3], #1
 800994e:	e7f9      	b.n	8009944 <memset+0x4>

08009950 <_init>:
 8009950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009952:	bf00      	nop
 8009954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009956:	bc08      	pop	{r3}
 8009958:	469e      	mov	lr, r3
 800995a:	4770      	bx	lr

0800995c <_fini>:
 800995c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995e:	bf00      	nop
 8009960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009962:	bc08      	pop	{r3}
 8009964:	469e      	mov	lr, r3
 8009966:	4770      	bx	lr
