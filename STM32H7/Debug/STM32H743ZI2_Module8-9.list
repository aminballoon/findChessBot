
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125bc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e44  08012860  08012860  00022860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080146a4  080146a4  000246a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080146ac  080146ac  000246ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  080146b4  080146b4  000246b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  24000000  080146bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e60  2400020c  080148c8  0003020c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400106c  080148c8  0003106c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b891  00000000  00000000  0003023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005760  00000000  00000000  0006bacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016c0  00000000  00000000  00071230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001530  00000000  00000000  000728f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e1f7  00000000  00000000  00073e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022c61  00000000  00000000  000b2017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016dd12  00000000  00000000  000d4c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0024298a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000070cc  00000000  00000000  002429e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400020c 	.word	0x2400020c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012844 	.word	0x08012844

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000210 	.word	0x24000210
 80002dc:	08012844 	.word	0x08012844

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96e 	b.w	80009fc <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468c      	mov	ip, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8083 	bne.w	800084e <__udivmoddi4+0x116>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d947      	bls.n	80007de <__udivmoddi4+0xa6>
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	b142      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000754:	f1c2 0020 	rsb	r0, r2, #32
 8000758:	fa24 f000 	lsr.w	r0, r4, r0
 800075c:	4091      	lsls	r1, r2
 800075e:	4097      	lsls	r7, r2
 8000760:	ea40 0c01 	orr.w	ip, r0, r1
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbbc f6f8 	udiv	r6, ip, r8
 8000770:	fa1f fe87 	uxth.w	lr, r7
 8000774:	fb08 c116 	mls	r1, r8, r6, ip
 8000778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077c:	fb06 f10e 	mul.w	r1, r6, lr
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295
 800078a:	f080 8119 	bcs.w	80009c0 <__udivmoddi4+0x288>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8116 	bls.w	80009c0 <__udivmoddi4+0x288>
 8000794:	3e02      	subs	r6, #2
 8000796:	443b      	add	r3, r7
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	193c      	adds	r4, r7, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8105 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	f240 8102 	bls.w	80009c4 <__udivmoddi4+0x28c>
 80007c0:	3802      	subs	r0, #2
 80007c2:	443c      	add	r4, r7
 80007c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	b902      	cbnz	r2, 80007e2 <__udivmoddi4+0xaa>
 80007e0:	deff      	udf	#255	; 0xff
 80007e2:	fab2 f282 	clz	r2, r2
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d150      	bne.n	800088c <__udivmoddi4+0x154>
 80007ea:	1bcb      	subs	r3, r1, r7
 80007ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	2601      	movs	r6, #1
 80007f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007fa:	0c21      	lsrs	r1, r4, #16
 80007fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb08 f30c 	mul.w	r3, r8, ip
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0xe4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0xe2>
 8000814:	428b      	cmp	r3, r1
 8000816:	f200 80e9 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 800081a:	4684      	mov	ip, r0
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1110 	mls	r1, lr, r0, r1
 8000828:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x10c>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x10a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80d9 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e7bf      	b.n	80007ce <__udivmoddi4+0x96>
 800084e:	428b      	cmp	r3, r1
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x12e>
 8000852:	2d00      	cmp	r5, #0
 8000854:	f000 80b1 	beq.w	80009ba <__udivmoddi4+0x282>
 8000858:	2600      	movs	r6, #0
 800085a:	e9c5 0100 	strd	r0, r1, [r5]
 800085e:	4630      	mov	r0, r6
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	fab3 f683 	clz	r6, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d14a      	bne.n	8000904 <__udivmoddi4+0x1cc>
 800086e:	428b      	cmp	r3, r1
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0x140>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 80b8 	bhi.w	80009e8 <__udivmoddi4+0x2b0>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb61 0103 	sbc.w	r1, r1, r3
 800087e:	2001      	movs	r0, #1
 8000880:	468c      	mov	ip, r1
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0a8      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000886:	e9c5 4c00 	strd	r4, ip, [r5]
 800088a:	e7a5      	b.n	80007d8 <__udivmoddi4+0xa0>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f603 	lsr.w	r6, r0, r3
 8000894:	4097      	lsls	r7, r2
 8000896:	fa01 f002 	lsl.w	r0, r1, r2
 800089a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089e:	40d9      	lsrs	r1, r3
 80008a0:	4330      	orrs	r0, r6
 80008a2:	0c03      	lsrs	r3, r0, #16
 80008a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008a8:	fa1f f887 	uxth.w	r8, r7
 80008ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b4:	fb06 f108 	mul.w	r1, r6, r8
 80008b8:	4299      	cmp	r1, r3
 80008ba:	fa04 f402 	lsl.w	r4, r4, r2
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x19c>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008c6:	f080 808d 	bcs.w	80009e4 <__udivmoddi4+0x2ac>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 808a 	bls.w	80009e4 <__udivmoddi4+0x2ac>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b281      	uxth	r1, r0
 80008d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e4:	fb00 f308 	mul.w	r3, r0, r8
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x1c4>
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f2:	d273      	bcs.n	80009dc <__udivmoddi4+0x2a4>
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d971      	bls.n	80009dc <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4439      	add	r1, r7
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000902:	e778      	b.n	80007f6 <__udivmoddi4+0xbe>
 8000904:	f1c6 0c20 	rsb	ip, r6, #32
 8000908:	fa03 f406 	lsl.w	r4, r3, r6
 800090c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000910:	431c      	orrs	r4, r3
 8000912:	fa20 f70c 	lsr.w	r7, r0, ip
 8000916:	fa01 f306 	lsl.w	r3, r1, r6
 800091a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800091e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000922:	431f      	orrs	r7, r3
 8000924:	0c3b      	lsrs	r3, r7, #16
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fa1f f884 	uxth.w	r8, r4
 800092e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000932:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000936:	fb09 fa08 	mul.w	sl, r9, r8
 800093a:	458a      	cmp	sl, r1
 800093c:	fa02 f206 	lsl.w	r2, r2, r6
 8000940:	fa00 f306 	lsl.w	r3, r0, r6
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x220>
 8000946:	1861      	adds	r1, r4, r1
 8000948:	f109 30ff 	add.w	r0, r9, #4294967295
 800094c:	d248      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 800094e:	458a      	cmp	sl, r1
 8000950:	d946      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 8000952:	f1a9 0902 	sub.w	r9, r9, #2
 8000956:	4421      	add	r1, r4
 8000958:	eba1 010a 	sub.w	r1, r1, sl
 800095c:	b2bf      	uxth	r7, r7
 800095e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000962:	fb0e 1110 	mls	r1, lr, r0, r1
 8000966:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800096a:	fb00 f808 	mul.w	r8, r0, r8
 800096e:	45b8      	cmp	r8, r7
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x24a>
 8000972:	19e7      	adds	r7, r4, r7
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d22e      	bcs.n	80009d8 <__udivmoddi4+0x2a0>
 800097a:	45b8      	cmp	r8, r7
 800097c:	d92c      	bls.n	80009d8 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	4427      	add	r7, r4
 8000982:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000986:	eba7 0708 	sub.w	r7, r7, r8
 800098a:	fba0 8902 	umull	r8, r9, r0, r2
 800098e:	454f      	cmp	r7, r9
 8000990:	46c6      	mov	lr, r8
 8000992:	4649      	mov	r1, r9
 8000994:	d31a      	bcc.n	80009cc <__udivmoddi4+0x294>
 8000996:	d017      	beq.n	80009c8 <__udivmoddi4+0x290>
 8000998:	b15d      	cbz	r5, 80009b2 <__udivmoddi4+0x27a>
 800099a:	ebb3 020e 	subs.w	r2, r3, lr
 800099e:	eb67 0701 	sbc.w	r7, r7, r1
 80009a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009a6:	40f2      	lsrs	r2, r6
 80009a8:	ea4c 0202 	orr.w	r2, ip, r2
 80009ac:	40f7      	lsrs	r7, r6
 80009ae:	e9c5 2700 	strd	r2, r7, [r5]
 80009b2:	2600      	movs	r6, #0
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e70b      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fd      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009c8:	4543      	cmp	r3, r8
 80009ca:	d2e5      	bcs.n	8000998 <__udivmoddi4+0x260>
 80009cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d0:	eb69 0104 	sbc.w	r1, r9, r4
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7df      	b.n	8000998 <__udivmoddi4+0x260>
 80009d8:	4608      	mov	r0, r1
 80009da:	e7d2      	b.n	8000982 <__udivmoddi4+0x24a>
 80009dc:	4660      	mov	r0, ip
 80009de:	e78d      	b.n	80008fc <__udivmoddi4+0x1c4>
 80009e0:	4681      	mov	r9, r0
 80009e2:	e7b9      	b.n	8000958 <__udivmoddi4+0x220>
 80009e4:	4666      	mov	r6, ip
 80009e6:	e775      	b.n	80008d4 <__udivmoddi4+0x19c>
 80009e8:	4630      	mov	r0, r6
 80009ea:	e74a      	b.n	8000882 <__udivmoddi4+0x14a>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	4439      	add	r1, r7
 80009f2:	e713      	b.n	800081c <__udivmoddi4+0xe4>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	e724      	b.n	8000844 <__udivmoddi4+0x10c>
 80009fa:	bf00      	nop

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	601a      	str	r2, [r3, #0]
	this->address = _address;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	729a      	strb	r2, [r3, #10]
}
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

}
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f103 010a 	add.w	r1, r3, #10
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	2201      	movs	r2, #1
 8000a54:	f00c fc10 	bl	800d278 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f103 010c 	add.w	r1, r3, #12
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2202      	movs	r2, #2
 8000a66:	f00c fc9d 	bl	800d3a4 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	899b      	ldrh	r3, [r3, #12]
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	899b      	ldrh	r3, [r3, #12]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	0bdb      	lsrs	r3, r3, #15
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	765a      	strb	r2, [r3, #25]
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(this->address), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	899b      	ldrh	r3, [r3, #12]
 8000aa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000aac:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	899b      	ldrh	r3, [r3, #12]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	737b      	strb	r3, [r7, #13]
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d820      	bhi.n	8000b14 <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	899b      	ldrh	r3, [r3, #12]
 8000ad6:	109b      	asrs	r3, r3, #2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	899b      	ldrh	r3, [r3, #12]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	105b      	asrs	r3, r3, #1
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b06:	4053      	eors	r3, r2
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000b0c:	7b7b      	ldrb	r3, [r7, #13]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	737b      	strb	r3, [r7, #13]
 8000b12:	e7db      	b.n	8000acc <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7e1b      	ldrb	r3, [r3, #24]
 8000b34:	7bfa      	ldrb	r2, [r7, #15]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10a      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7e5b      	ldrb	r3, [r3, #25]
 8000b3e:	7bba      	ldrb	r2, [r7, #14]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d105      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 8000b44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e003      	b.n	8000b58 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
	}
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	0392      	lsls	r2, r2, #14
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b21b      	sxth	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb4:	fefb 7a67 	vrintm.f32	s15, s15
 8000bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bd4:	fef8 7a67 	vrinta.f32	s15, s15
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8000be6:	b480      	push	{r7}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	22b4      	movs	r2, #180	; 0xb4
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	761a      	strb	r2, [r3, #24]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2200      	movs	r2, #0
 8000c14:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	22ef      	movs	r2, #239	; 0xef
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
}
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4610      	mov	r0, r2
 8000c70:	f00b f8f2 	bl	800be58 <HAL_TIM_PWM_Start>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8000c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d13f      	bne.n	8000d0e <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691c      	ldr	r4, [r3, #16]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca8:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb4:	f7ff ff87 	bl	8000bc6 <_ZSt5roundf>
 8000cb8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	3301      	adds	r3, #1
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cde:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce2:	f7ff ff60 	bl	8000ba6 <_ZSt5floorf>
 8000ce6:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cee:	ee17 3a90 	vmov	r3, s15
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	9600      	str	r6, [sp, #0]
 8000cf6:	462b      	mov	r3, r5
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	6839      	ldr	r1, [r7, #0]
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f9cf 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000d02:	4602      	mov	r2, r0
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 8000d0c:	e176      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d13f      	bne.n	8000d96 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691c      	ldr	r4, [r3, #16]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d26:	3301      	adds	r3, #1
 8000d28:	ee07 3a90 	vmov	s15, r3
 8000d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d30:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d38:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3c:	f7ff ff43 	bl	8000bc6 <_ZSt5roundf>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d48:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	3301      	adds	r3, #1
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d66:	eeb0 0a67 	vmov.f32	s0, s15
 8000d6a:	f7ff ff1c 	bl	8000ba6 <_ZSt5floorf>
 8000d6e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d76:	ee17 3a90 	vmov	r3, s15
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	9600      	str	r6, [sp, #0]
 8000d7e:	462b      	mov	r3, r5
 8000d80:	4622      	mov	r2, r4
 8000d82:	6839      	ldr	r1, [r7, #0]
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f98b 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d94:	e132      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	d13f      	bne.n	8000e1e <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691c      	ldr	r4, [r3, #16]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	3301      	adds	r3, #1
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc4:	f7ff feff 	bl	8000bc6 <_ZSt5roundf>
 8000dc8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	3301      	adds	r3, #1
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dee:	eeb0 0a67 	vmov.f32	s0, s15
 8000df2:	f7ff fed8 	bl	8000ba6 <_ZSt5floorf>
 8000df6:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dfe:	ee17 3a90 	vmov	r3, s15
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	9600      	str	r6, [sp, #0]
 8000e06:	462b      	mov	r3, r5
 8000e08:	4622      	mov	r2, r4
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 f947 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000e12:	4602      	mov	r2, r0
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e1c:	e0ee      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b0c      	cmp	r3, #12
 8000e24:	d13f      	bne.n	8000ea6 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691c      	ldr	r4, [r3, #16]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	3301      	adds	r3, #1
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e40:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e48:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4c:	f7ff febb 	bl	8000bc6 <_ZSt5roundf>
 8000e50:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e58:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	3301      	adds	r3, #1
 8000e66:	ee07 3a90 	vmov	s15, r3
 8000e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e6e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e76:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7a:	f7ff fe94 	bl	8000ba6 <_ZSt5floorf>
 8000e7e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e86:	ee17 3a90 	vmov	r3, s15
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	9600      	str	r6, [sp, #0]
 8000e8e:	462b      	mov	r3, r5
 8000e90:	4622      	mov	r2, r4
 8000e92:	6839      	ldr	r1, [r7, #0]
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f903 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ea4:	e0aa      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d144      	bne.n	8000f38 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691c      	ldr	r4, [r3, #16]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	f7ff fe77 	bl	8000bc6 <_ZSt5roundf>
 8000ed8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	3301      	adds	r3, #1
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efe:	eeb0 0a67 	vmov.f32	s0, s15
 8000f02:	f7ff fe50 	bl	8000ba6 <_ZSt5floorf>
 8000f06:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f0e:	ee17 3a90 	vmov	r3, s15
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	9600      	str	r6, [sp, #0]
 8000f16:	462b      	mov	r3, r5
 8000f18:	4622      	mov	r2, r4
 8000f1a:	6839      	ldr	r1, [r7, #0]
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f8bf 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000f22:	4602      	mov	r2, r0
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000f2c:	e066      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8000f2e:	bf00      	nop
 8000f30:	3d4ccccd 	.word	0x3d4ccccd
 8000f34:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b14      	cmp	r3, #20
 8000f3e:	d13f      	bne.n	8000fc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691c      	ldr	r4, [r3, #16]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	3301      	adds	r3, #1
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f5a:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	f7ff fe2e 	bl	8000bc6 <_ZSt5roundf>
 8000f6a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f72:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	3301      	adds	r3, #1
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f88:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f90:	eeb0 0a67 	vmov.f32	s0, s15
 8000f94:	f7ff fe07 	bl	8000ba6 <_ZSt5floorf>
 8000f98:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa0:	ee17 3a90 	vmov	r3, s15
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	9600      	str	r6, [sp, #0]
 8000fa8:	462b      	mov	r3, r5
 8000faa:	4622      	mov	r2, r4
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f876 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000fbe:	e01d      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001004 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	761a      	strb	r2, [r3, #24]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	765a      	strb	r2, [r3, #25]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7e5b      	ldrb	r3, [r3, #25]
 8001054:	f083 0301 	eor.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d106      	bne.n	800106c <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fe09 	bl	8000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>
 800106a:	e000      	b.n	800106e <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 800106c:	bf00      	nop
}
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7e1b      	ldrb	r3, [r3, #24]
 8001080:	f083 0301 	eor.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d106      	bne.n	8001098 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	4619      	mov	r1, r3
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff fdf3 	bl	8000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001096:	e000      	b.n	800109a <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001098:	bf00      	nop
}
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	69f9      	ldr	r1, [r7, #28]
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	1a8a      	subs	r2, r1, r2
 80010ba:	fb02 f203 	mul.w	r2, r2, r3
 80010be:	6839      	ldr	r1, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	1acb      	subs	r3, r1, r3
 80010c4:	fb92 f2f3 	sdiv	r2, r2, r3
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	4413      	add	r3, r2
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e6:	eef0 7ae7 	vabs.f32	s15, s15
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001110:	619a      	str	r2, [r3, #24]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001118:	61da      	str	r2, [r3, #28]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4a15      	ldr	r2, [pc, #84]	; (8001174 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 800111e:	621a      	str	r2, [r3, #32]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	22c7      	movs	r2, #199	; 0xc7
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 8001142:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001148:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 800114a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800117c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 f832 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	60da      	str	r2, [r3, #12]
}
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	41a00000 	.word	0x41a00000
 8001170:	469c4000 	.word	0x469c4000
 8001174:	43480000 	.word	0x43480000
 8001178:	42700000 	.word	0x42700000
 800117c:	00000000 	.word	0x00000000

08001180 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
}
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4610      	mov	r0, r2
 80011aa:	f00a fe55 	bl	800be58 <HAL_TIM_PWM_Start>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	ed2d 8b02 	vpush	{d8}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	f7ff ff7e 	bl	80010d8 <_ZSt4fabsf>
 80011dc:	eeb0 7a40 	vmov.f32	s14, s0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	bf94      	ite	ls
 80011f0:	2301      	movls	r3, #1
 80011f2:	2300      	movhi	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e01b      	b.n	800123a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edd3 7a04 	vldr	s15, [r3, #16]
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	f7ff ff64 	bl	80010d8 <_ZSt4fabsf>
 8001210:	eeb0 7a40 	vmov.f32	s14, s0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edd3 7a06 	vldr	s15, [r3, #24]
 800121a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	bfac      	ite	ge
 8001224:	2301      	movge	r3, #1
 8001226:	2300      	movlt	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	e001      	b.n	800123a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001240:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80014dc <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	f2c0 80db 	blt.w	8001406 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6898      	ldr	r0, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	b29b      	uxth	r3, r3
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	f007 fff3 	bl	8009248 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	3301      	adds	r3, #1
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001274:	edd7 7a03 	vldr	s15, [r7, #12]
 8001278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127c:	eddf 6a98 	vldr	s13, [pc, #608]	; 80014e0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001280:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001288:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	f7ff fc99 	bl	8000bc6 <_ZSt5roundf>
 8001294:	eef0 7a40 	vmov.f32	s15, s0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a2:	ee17 2a90 	vmov	r2, s15
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d113      	bne.n	80012d8 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fa5b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80012c2:	eeb0 7b40 	vmov.f64	d7, d0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012d0:	ee17 2a90 	vmov	r2, s15
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 80012d6:	e1e0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d113      	bne.n	8001308 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fa43 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80012f2:	eeb0 7b40 	vmov.f64	d7, d0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001300:	ee17 2a90 	vmov	r2, s15
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001306:	e1c8      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d113      	bne.n	8001338 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 800131a:	085b      	lsrs	r3, r3, #1
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fa2b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001322:	eeb0 7b40 	vmov.f64	d7, d0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001330:	ee17 2a90 	vmov	r2, s15
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001336:	e1b0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d113      	bne.n	8001368 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fa13 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001352:	eeb0 7b40 	vmov.f64	d7, d0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001360:	ee17 2a90 	vmov	r2, s15
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001366:	e198      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b10      	cmp	r3, #16
 800136e:	d113      	bne.n	8001398 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f9fb 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001382:	eeb0 7b40 	vmov.f64	d7, d0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001390:	ee17 2a90 	vmov	r2, s15
 8001394:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001396:	e180      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b14      	cmp	r3, #20
 800139e:	d113      	bne.n	80013c8 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 80013aa:	085b      	lsrs	r3, r3, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f9e3 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80013b2:	eeb0 7b40 	vmov.f64	d7, d0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013c0:	ee17 2a90 	vmov	r2, s15
 80013c4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80013c6:	e168      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2200      	movs	r2, #0
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001404:	e149      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edd3 7a04 	vldr	s15, [r3, #16]
 800140c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80014e4 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	f200 80e5 	bhi.w	80015e6 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6898      	ldr	r0, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	b29b      	uxth	r3, r3
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	f007 ff0d 	bl	8009248 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	3301      	adds	r3, #1
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001440:	ed97 0a03 	vldr	s0, [r7, #12]
 8001444:	f7ff fe48 	bl	80010d8 <_ZSt4fabsf>
 8001448:	eef0 7a40 	vmov.f32	s15, s0
 800144c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001450:	eddf 6a23 	vldr	s13, [pc, #140]	; 80014e0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001454:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800145c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	f7ff fbaf 	bl	8000bc6 <_ZSt5roundf>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001476:	ee17 2a90 	vmov	r2, s15
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d113      	bne.n	80014ac <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f971 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001496:	eeb0 7b40 	vmov.f64	d7, d0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014a4:	ee17 2a90 	vmov	r2, s15
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014aa:	e0f6      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d119      	bne.n	80014e8 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 80014be:	085b      	lsrs	r3, r3, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f959 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80014c6:	eeb0 7b40 	vmov.f64	d7, d0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014d4:	ee17 2a90 	vmov	r2, s15
 80014d8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014da:	e0de      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 80014dc:	3a83126f 	.word	0x3a83126f
 80014e0:	4d64e1c0 	.word	0x4d64e1c0
 80014e4:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d113      	bne.n	8001518 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 80014fa:	085b      	lsrs	r3, r3, #1
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f93b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001502:	eeb0 7b40 	vmov.f64	d7, d0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001510:	ee17 2a90 	vmov	r2, s15
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001516:	e0c0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d113      	bne.n	8001548 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f923 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001532:	eeb0 7b40 	vmov.f64	d7, d0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001540:	ee17 2a90 	vmov	r2, s15
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001546:	e0a8      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b10      	cmp	r3, #16
 800154e:	d113      	bne.n	8001578 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f90b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001562:	eeb0 7b40 	vmov.f64	d7, d0
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001570:	ee17 2a90 	vmov	r2, s15
 8001574:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001576:	e090      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b14      	cmp	r3, #20
 800157e:	d113      	bne.n	80015a8 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f8f3 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001592:	eeb0 7b40 	vmov.f64	d7, d0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80015a0:	ee17 2a90 	vmov	r2, s15
 80015a4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015a6:	e078      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015e4:	e059      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d105      	bne.n	80015fa <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015f8:	e04f      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d105      	bne.n	800160e <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800160c:	e045      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b08      	cmp	r3, #8
 8001614:	d105      	bne.n	8001622 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001620:	e03b      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d105      	bne.n	8001636 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001634:	e031      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d105      	bne.n	800164a <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001648:	e027      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b14      	cmp	r3, #20
 8001650:	d105      	bne.n	800165e <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800165c:	e01d      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	ecbd 8b02 	vpop	{d8}
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop

080016a8 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 80016b4:	ed97 0a00 	vldr	s0, [r7]
 80016b8:	f7ff fd0e 	bl	80010d8 <_ZSt4fabsf>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016e2:	eeb0 0b47 	vmov.f64	d0, d7
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ffe5 	bl	80016ce <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001704:	eeb0 7b40 	vmov.f64	d7, d0
 8001708:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	0000      	movs	r0, r0
 800171c:	0000      	movs	r0, r0
	...

08001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>:
void Stepper::StepperOpenLoopSpeed(float _speed) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001732:	edd7 7a00 	vldr	s15, [r7]
 8001736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edd3 7a08 	vldr	s15, [r3, #32]
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI)));
 8001752:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8001770 <_ZN7Stepper20StepperOpenLoopSpeedEf+0x50>
 8001756:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 800175a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fd28 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	54442eea 	.word	0x54442eea
 8001774:	401921fb 	.word	0x401921fb

08001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800178a:	eeb0 0b47 	vmov.f64	d0, d7
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_CRC_Init+0x54>)
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <MX_CRC_Init+0x58>)
 80017a0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_CRC_Init+0x54>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_CRC_Init+0x54>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_CRC_Init+0x54>)
 80017b0:	f248 0205 	movw	r2, #32773	; 0x8005
 80017b4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_CRC_Init+0x54>)
 80017b8:	2208      	movs	r2, #8
 80017ba:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_CRC_Init+0x54>)
 80017be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c2:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_CRC_Init+0x54>)
 80017c6:	2220      	movs	r2, #32
 80017c8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_CRC_Init+0x54>)
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_CRC_Init+0x54>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_CRC_Init+0x54>)
 80017d8:	f004 fb4e 	bl	8005e78 <HAL_CRC_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80017e2:	f002 fb8d 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	24000860 	.word	0x24000860
 80017f0:	58024c00 	.word	0x58024c00

080017f4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_CRC_MspInit+0x3c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10e      	bne.n	8001824 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_CRC_MspInit+0x40>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_CRC_MspInit+0x40>)
 800180e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_CRC_MspInit+0x40>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	58024c00 	.word	0x58024c00
 8001834:	58024400 	.word	0x58024400

08001838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	200b      	movs	r0, #11
 8001862:	f004 fac8 	bl	8005df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001866:	200b      	movs	r0, #11
 8001868:	f004 fadf 	bl	8005e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	200c      	movs	r0, #12
 8001872:	f004 fac0 	bl	8005df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001876:	200c      	movs	r0, #12
 8001878:	f004 fad7 	bl	8005e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	200d      	movs	r0, #13
 8001882:	f004 fab8 	bl	8005df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001886:	200d      	movs	r0, #13
 8001888:	f004 facf 	bl	8005e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	200e      	movs	r0, #14
 8001892:	f004 fab0 	bl	8005df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001896:	200e      	movs	r0, #14
 8001898:	f004 fac7 	bl	8005e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	200f      	movs	r0, #15
 80018a2:	f004 faa8 	bl	8005df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f004 fabf 	bl	8005e2a <HAL_NVIC_EnableIRQ>

}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	58024400 	.word	0x58024400

080018b8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ce:	4b8e      	ldr	r3, [pc, #568]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d4:	4a8c      	ldr	r2, [pc, #560]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018d6:	f043 0310 	orr.w	r3, r3, #16
 80018da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018de:	4b8a      	ldr	r3, [pc, #552]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ec:	4b86      	ldr	r3, [pc, #536]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f2:	4a85      	ldr	r2, [pc, #532]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fc:	4b82      	ldr	r3, [pc, #520]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190a:	4b7f      	ldr	r3, [pc, #508]	; (8001b08 <MX_GPIO_Init+0x250>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	4a7d      	ldr	r2, [pc, #500]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191a:	4b7b      	ldr	r3, [pc, #492]	; (8001b08 <MX_GPIO_Init+0x250>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b77      	ldr	r3, [pc, #476]	; (8001b08 <MX_GPIO_Init+0x250>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192e:	4a76      	ldr	r2, [pc, #472]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001938:	4b73      	ldr	r3, [pc, #460]	; (8001b08 <MX_GPIO_Init+0x250>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b70      	ldr	r3, [pc, #448]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194c:	4a6e      	ldr	r2, [pc, #440]	; (8001b08 <MX_GPIO_Init+0x250>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001956:	4b6c      	ldr	r3, [pc, #432]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196a:	4a67      	ldr	r2, [pc, #412]	; (8001b08 <MX_GPIO_Init+0x250>)
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001974:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001982:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	4a5f      	ldr	r2, [pc, #380]	; (8001b08 <MX_GPIO_Init+0x250>)
 800198a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800198e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80019a0:	2200      	movs	r2, #0
 80019a2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80019a6:	4859      	ldr	r0, [pc, #356]	; (8001b0c <MX_GPIO_Init+0x254>)
 80019a8:	f007 fc4e 	bl	8009248 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f24c 0102 	movw	r1, #49154	; 0xc002
 80019b2:	4857      	ldr	r0, [pc, #348]	; (8001b10 <MX_GPIO_Init+0x258>)
 80019b4:	f007 fc48 	bl	8009248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	4855      	ldr	r0, [pc, #340]	; (8001b14 <MX_GPIO_Init+0x25c>)
 80019c0:	f007 fc42 	bl	8009248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ca:	4853      	ldr	r0, [pc, #332]	; (8001b18 <MX_GPIO_Init+0x260>)
 80019cc:	f007 fc3c 	bl	8009248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d6:	4851      	ldr	r0, [pc, #324]	; (8001b1c <MX_GPIO_Init+0x264>)
 80019d8:	f007 fc36 	bl	8009248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 80019dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	4849      	ldr	r0, [pc, #292]	; (8001b18 <MX_GPIO_Init+0x260>)
 80019f4:	f007 fa78 	bl	8008ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80019f8:	f644 2321 	movw	r3, #18977	; 0x4a21
 80019fc:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	483e      	ldr	r0, [pc, #248]	; (8001b0c <MX_GPIO_Init+0x254>)
 8001a12:	f007 fa69 	bl	8008ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001a16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4838      	ldr	r0, [pc, #224]	; (8001b10 <MX_GPIO_Init+0x258>)
 8001a2e:	f007 fa5b 	bl	8008ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001a32:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4831      	ldr	r0, [pc, #196]	; (8001b10 <MX_GPIO_Init+0x258>)
 8001a4c:	f007 fa4c 	bl	8008ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	482a      	ldr	r0, [pc, #168]	; (8001b14 <MX_GPIO_Init+0x25c>)
 8001a6a:	f007 fa3d 	bl	8008ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4824      	ldr	r0, [pc, #144]	; (8001b18 <MX_GPIO_Init+0x260>)
 8001a88:	f007 fa2e 	bl	8008ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481d      	ldr	r0, [pc, #116]	; (8001b1c <MX_GPIO_Init+0x264>)
 8001aa6:	f007 fa1f 	bl	8008ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ab0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4817      	ldr	r0, [pc, #92]	; (8001b20 <MX_GPIO_Init+0x268>)
 8001ac2:	f007 fa11 	bl	8008ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001ac6:	23c0      	movs	r3, #192	; 0xc0
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480c      	ldr	r0, [pc, #48]	; (8001b0c <MX_GPIO_Init+0x254>)
 8001adc:	f007 fa04 	bl	8008ee8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2017      	movs	r0, #23
 8001ae6:	f004 f986 	bl	8005df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aea:	2017      	movs	r0, #23
 8001aec:	f004 f99d 	bl	8005e2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2028      	movs	r0, #40	; 0x28
 8001af6:	f004 f97e 	bl	8005df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afa:	2028      	movs	r0, #40	; 0x28
 8001afc:	f004 f995 	bl	8005e2a <HAL_NVIC_EnableIRQ>

}
 8001b00:	bf00      	nop
 8001b02:	3730      	adds	r7, #48	; 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	58020400 	.word	0x58020400
 8001b10:	58021000 	.word	0x58021000
 8001b14:	58020c00 	.word	0x58020c00
 8001b18:	58020800 	.word	0x58020800
 8001b1c:	58020000 	.word	0x58020000
 8001b20:	58021800 	.word	0x58021800

08001b24 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b32:	eef0 7ae7 	vabs.f32	s15, s15
 8001b36:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b4e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b52:	f00d fd25 	bl	800f5a0 <cosf>
 8001b56:	eef0 7a40 	vmov.f32	s15, s0
 8001b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b72:	f00e f8e5 	bl	800fd40 <sinf>
 8001b76:	eef0 7a40 	vmov.f32	s15, s0
 8001b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_UARTEx_RxEventCallback>:
#define Rx_BUFFER_SIZE   20
uint8_t Old_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
uint8_t New_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
volatile uint16_t cmdDataSize = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a99      	ldr	r2, [pc, #612]	; (8001df8 <HAL_UARTEx_RxEventCallback+0x274>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	f040 8200 	bne.w	8001f9a <HAL_UARTEx_RxEventCallback+0x416>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 8001b9a:	4a98      	ldr	r2, [pc, #608]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001b9c:	4b98      	ldr	r3, [pc, #608]	; (8001e00 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001b9e:	4614      	mov	r4, r2
 8001ba0:	461d      	mov	r5, r3
 8001ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba6:	682b      	ldr	r3, [r5, #0]
 8001ba8:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 8001baa:	2214      	movs	r2, #20
 8001bac:	2100      	movs	r1, #0
 8001bae:	4894      	ldr	r0, [pc, #592]	; (8001e00 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001bb0:	f00e fa0e 	bl	800ffd0 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	f240 81de 	bls.w	8001f78 <HAL_UARTEx_RxEventCallback+0x3f4>
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	2b14      	cmp	r3, #20
 8001bc0:	f200 81da 	bhi.w	8001f78 <HAL_UARTEx_RxEventCallback+0x3f4>
			cmdDataSize = Size - 2;	// Calculate data length.
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	3b02      	subs	r3, #2
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b8e      	ldr	r3, [pc, #568]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001bcc:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 8001bce:	4b8d      	ldr	r3, [pc, #564]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4989      	ldr	r1, [pc, #548]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001bd8:	488b      	ldr	r0, [pc, #556]	; (8001e08 <HAL_UARTEx_RxEventCallback+0x284>)
 8001bda:	f004 f9b1 	bl	8005f40 <HAL_CRC_Calculate>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	4b8a      	ldr	r3, [pc, #552]	; (8001e0c <HAL_UARTEx_RxEventCallback+0x288>)
 8001be4:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001be6:	4b87      	ldr	r3, [pc, #540]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b83      	ldr	r3, [pc, #524]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001bf0:	5c9b      	ldrb	r3, [r3, r2]
 8001bf2:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	497f      	ldr	r1, [pc, #508]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c00:	5ccb      	ldrb	r3, [r1, r3]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001c0a:	4b81      	ldr	r3, [pc, #516]	; (8001e10 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001c0c:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001c0e:	4b7f      	ldr	r3, [pc, #508]	; (8001e0c <HAL_UARTEx_RxEventCallback+0x288>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b7e      	ldr	r3, [pc, #504]	; (8001e10 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	bf0c      	ite	eq
 8001c1e:	2301      	moveq	r3, #1
 8001c20:	2300      	movne	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 81c9 	beq.w	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	4879      	ldr	r0, [pc, #484]	; (8001e14 <HAL_UARTEx_RxEventCallback+0x290>)
 8001c30:	f007 fb0a 	bl	8009248 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c3a:	4877      	ldr	r0, [pc, #476]	; (8001e18 <HAL_UARTEx_RxEventCallback+0x294>)
 8001c3c:	f007 fb04 	bl	8009248 <HAL_GPIO_WritePin>
				if (Old_Rx_Buffer[0] == 0x41 && cmdDataSize == 3) {	// Joint Jog q1
 8001c40:	4b6e      	ldr	r3, [pc, #440]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b41      	cmp	r3, #65	; 0x41
 8001c46:	d106      	bne.n	8001c56 <HAL_UARTEx_RxEventCallback+0xd2>
 8001c48:	4b6e      	ldr	r3, [pc, #440]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d101      	bne.n	8001c56 <HAL_UARTEx_RxEventCallback+0xd2>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_UARTEx_RxEventCallback+0xd4>
 8001c56:	2300      	movs	r3, #0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00b      	beq.n	8001c74 <HAL_UARTEx_RxEventCallback+0xf0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001c5c:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c5e:	785b      	ldrb	r3, [r3, #1]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	b25a      	sxtb	r2, r3
 8001c64:	4b65      	ldr	r3, [pc, #404]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	b25b      	sxtb	r3, r3
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b25a      	sxtb	r2, r3
 8001c6e:	4b6b      	ldr	r3, [pc, #428]	; (8001e1c <HAL_UARTEx_RxEventCallback+0x298>)
 8001c70:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001c72:	e1a3      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x42 && cmdDataSize == 3) {// Joint Jog q2
 8001c74:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b42      	cmp	r3, #66	; 0x42
 8001c7a:	d106      	bne.n	8001c8a <HAL_UARTEx_RxEventCallback+0x106>
 8001c7c:	4b61      	ldr	r3, [pc, #388]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d101      	bne.n	8001c8a <HAL_UARTEx_RxEventCallback+0x106>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_UARTEx_RxEventCallback+0x108>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00b      	beq.n	8001ca8 <HAL_UARTEx_RxEventCallback+0x124>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq2 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001c90:	4b5a      	ldr	r3, [pc, #360]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c92:	785b      	ldrb	r3, [r3, #1]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	b25a      	sxtb	r2, r3
 8001c98:	4b58      	ldr	r3, [pc, #352]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001c9a:	789b      	ldrb	r3, [r3, #2]
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b25a      	sxtb	r2, r3
 8001ca2:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001ca4:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001ca6:	e189      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x43 && cmdDataSize == 3) {// Joint Jog q3
 8001ca8:	4b54      	ldr	r3, [pc, #336]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b43      	cmp	r3, #67	; 0x43
 8001cae:	d106      	bne.n	8001cbe <HAL_UARTEx_RxEventCallback+0x13a>
 8001cb0:	4b54      	ldr	r3, [pc, #336]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d101      	bne.n	8001cbe <HAL_UARTEx_RxEventCallback+0x13a>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_UARTEx_RxEventCallback+0x13c>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00b      	beq.n	8001cdc <HAL_UARTEx_RxEventCallback+0x158>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq3 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001cc4:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001cc6:	785b      	ldrb	r3, [r3, #1]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001cce:	789b      	ldrb	r3, [r3, #2]
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b25a      	sxtb	r2, r3
 8001cd6:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x2a0>)
 8001cd8:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001cda:	e16f      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x44 && cmdDataSize == 3) {// Joint Jog q4
 8001cdc:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b44      	cmp	r3, #68	; 0x44
 8001ce2:	d106      	bne.n	8001cf2 <HAL_UARTEx_RxEventCallback+0x16e>
 8001ce4:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d101      	bne.n	8001cf2 <HAL_UARTEx_RxEventCallback+0x16e>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_UARTEx_RxEventCallback+0x170>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00b      	beq.n	8001d10 <HAL_UARTEx_RxEventCallback+0x18c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq4 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001cf8:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	b25a      	sxtb	r2, r3
 8001d00:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d02:	789b      	ldrb	r3, [r3, #2]
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b25a      	sxtb	r2, r3
 8001d0a:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <HAL_UARTEx_RxEventCallback+0x2a4>)
 8001d0c:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d0e:	e155      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x51 && cmdDataSize == 3) {// Linear Jog X
 8001d10:	4b3a      	ldr	r3, [pc, #232]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b51      	cmp	r3, #81	; 0x51
 8001d16:	d106      	bne.n	8001d26 <HAL_UARTEx_RxEventCallback+0x1a2>
 8001d18:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d101      	bne.n	8001d26 <HAL_UARTEx_RxEventCallback+0x1a2>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_UARTEx_RxEventCallback+0x1a4>
 8001d26:	2300      	movs	r3, #0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00b      	beq.n	8001d44 <HAL_UARTEx_RxEventCallback+0x1c0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d2c:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d2e:	785b      	ldrb	r3, [r3, #1]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	b25a      	sxtb	r2, r3
 8001d34:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d36:	789b      	ldrb	r3, [r3, #2]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b25a      	sxtb	r2, r3
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001d40:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d42:	e13b      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x52 && cmdDataSize == 3) {// Linear Jog Y
 8001d44:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b52      	cmp	r3, #82	; 0x52
 8001d4a:	d106      	bne.n	8001d5a <HAL_UARTEx_RxEventCallback+0x1d6>
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d101      	bne.n	8001d5a <HAL_UARTEx_RxEventCallback+0x1d6>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_UARTEx_RxEventCallback+0x1d8>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00b      	beq.n	8001d78 <HAL_UARTEx_RxEventCallback+0x1f4>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dy = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d60:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d62:	785b      	ldrb	r3, [r3, #1]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b25a      	sxtb	r2, r3
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d6a:	789b      	ldrb	r3, [r3, #2]
 8001d6c:	b25b      	sxtb	r3, r3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b25a      	sxtb	r2, r3
 8001d72:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8001d74:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d76:	e121      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x53 && cmdDataSize == 3) {// Linear Jog Z
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b53      	cmp	r3, #83	; 0x53
 8001d7e:	d106      	bne.n	8001d8e <HAL_UARTEx_RxEventCallback+0x20a>
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d101      	bne.n	8001d8e <HAL_UARTEx_RxEventCallback+0x20a>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_UARTEx_RxEventCallback+0x20c>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00b      	beq.n	8001dac <HAL_UARTEx_RxEventCallback+0x228>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dz = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	b25a      	sxtb	r2, r3
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001d9e:	789b      	ldrb	r3, [r3, #2]
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b25a      	sxtb	r2, r3
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_UARTEx_RxEventCallback+0x2b0>)
 8001da8:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001daa:	e107      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b54      	cmp	r3, #84	; 0x54
 8001db2:	d106      	bne.n	8001dc2 <HAL_UARTEx_RxEventCallback+0x23e>
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d101      	bne.n	8001dc2 <HAL_UARTEx_RxEventCallback+0x23e>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_UARTEx_RxEventCallback+0x240>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00b      	beq.n	8001de0 <HAL_UARTEx_RxEventCallback+0x25c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	b25a      	sxtb	r2, r3
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001dd2:	789b      	ldrb	r3, [r3, #2]
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b25a      	sxtb	r2, r3
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <HAL_UARTEx_RxEventCallback+0x2b4>)
 8001ddc:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001dde:	e0ed      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) { // Joint Jog 4q
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x278>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b61      	cmp	r3, #97	; 0x61
 8001de6:	d129      	bne.n	8001e3c <HAL_UARTEx_RxEventCallback+0x2b8>
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x280>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d124      	bne.n	8001e3c <HAL_UARTEx_RxEventCallback+0x2b8>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e023      	b.n	8001e3e <HAL_UARTEx_RxEventCallback+0x2ba>
 8001df6:	bf00      	nop
 8001df8:	24000dd0 	.word	0x24000dd0
 8001dfc:	24000340 	.word	0x24000340
 8001e00:	24000354 	.word	0x24000354
 8001e04:	24000368 	.word	0x24000368
 8001e08:	24000860 	.word	0x24000860
 8001e0c:	24000338 	.word	0x24000338
 8001e10:	2400033a 	.word	0x2400033a
 8001e14:	58021000 	.word	0x58021000
 8001e18:	58020400 	.word	0x58020400
 8001e1c:	2400031e 	.word	0x2400031e
 8001e20:	2400031f 	.word	0x2400031f
 8001e24:	24000320 	.word	0x24000320
 8001e28:	24000321 	.word	0x24000321
 8001e2c:	24000322 	.word	0x24000322
 8001e30:	24000323 	.word	0x24000323
 8001e34:	24000324 	.word	0x24000324
 8001e38:	24000325 	.word	0x24000325
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d014      	beq.n	8001e6c <HAL_UARTEx_RxEventCallback+0x2e8>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8001e42:	4b94      	ldr	r3, [pc, #592]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e44:	785b      	ldrb	r3, [r3, #1]
 8001e46:	b25a      	sxtb	r2, r3
 8001e48:	4b93      	ldr	r3, [pc, #588]	; (8002098 <HAL_UARTEx_RxEventCallback+0x514>)
 8001e4a:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8001e4c:	4b91      	ldr	r3, [pc, #580]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e4e:	789b      	ldrb	r3, [r3, #2]
 8001e50:	b25a      	sxtb	r2, r3
 8001e52:	4b92      	ldr	r3, [pc, #584]	; (800209c <HAL_UARTEx_RxEventCallback+0x518>)
 8001e54:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8001e56:	4b8f      	ldr	r3, [pc, #572]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e58:	78db      	ldrb	r3, [r3, #3]
 8001e5a:	b25a      	sxtb	r2, r3
 8001e5c:	4b90      	ldr	r3, [pc, #576]	; (80020a0 <HAL_UARTEx_RxEventCallback+0x51c>)
 8001e5e:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8001e60:	4b8c      	ldr	r3, [pc, #560]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e62:	791b      	ldrb	r3, [r3, #4]
 8001e64:	b25a      	sxtb	r2, r3
 8001e66:	4b8f      	ldr	r3, [pc, #572]	; (80020a4 <HAL_UARTEx_RxEventCallback+0x520>)
 8001e68:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001e6a:	e0a7      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) { // Linear Jog X,Y,Z,Yaw
 8001e6c:	4b89      	ldr	r3, [pc, #548]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b71      	cmp	r3, #113	; 0x71
 8001e72:	d106      	bne.n	8001e82 <HAL_UARTEx_RxEventCallback+0x2fe>
 8001e74:	4b8c      	ldr	r3, [pc, #560]	; (80020a8 <HAL_UARTEx_RxEventCallback+0x524>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d101      	bne.n	8001e82 <HAL_UARTEx_RxEventCallback+0x2fe>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_UARTEx_RxEventCallback+0x300>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d014      	beq.n	8001eb2 <HAL_UARTEx_RxEventCallback+0x32e>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = Old_Rx_Buffer[1];
 8001e88:	4b82      	ldr	r3, [pc, #520]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e8a:	785b      	ldrb	r3, [r3, #1]
 8001e8c:	b25a      	sxtb	r2, r3
 8001e8e:	4b87      	ldr	r3, [pc, #540]	; (80020ac <HAL_UARTEx_RxEventCallback+0x528>)
 8001e90:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8001e92:	4b80      	ldr	r3, [pc, #512]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e94:	789b      	ldrb	r3, [r3, #2]
 8001e96:	b25a      	sxtb	r2, r3
 8001e98:	4b85      	ldr	r3, [pc, #532]	; (80020b0 <HAL_UARTEx_RxEventCallback+0x52c>)
 8001e9a:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 8001e9c:	4b7d      	ldr	r3, [pc, #500]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001e9e:	78db      	ldrb	r3, [r3, #3]
 8001ea0:	b25a      	sxtb	r2, r3
 8001ea2:	4b84      	ldr	r3, [pc, #528]	; (80020b4 <HAL_UARTEx_RxEventCallback+0x530>)
 8001ea4:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8001ea6:	4b7b      	ldr	r3, [pc, #492]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001ea8:	791b      	ldrb	r3, [r3, #4]
 8001eaa:	b25a      	sxtb	r2, r3
 8001eac:	4b82      	ldr	r3, [pc, #520]	; (80020b8 <HAL_UARTEx_RxEventCallback+0x534>)
 8001eae:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001eb0:	e084      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) {// Servo
 8001eb2:	4b78      	ldr	r3, [pc, #480]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b81      	cmp	r3, #129	; 0x81
 8001eb8:	d106      	bne.n	8001ec8 <HAL_UARTEx_RxEventCallback+0x344>
 8001eba:	4b7b      	ldr	r3, [pc, #492]	; (80020a8 <HAL_UARTEx_RxEventCallback+0x524>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_UARTEx_RxEventCallback+0x344>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_UARTEx_RxEventCallback+0x346>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d015      	beq.n	8001efa <HAL_UARTEx_RxEventCallback+0x376>
					gripperstate = Old_Rx_Buffer[1];
 8001ece:	4b71      	ldr	r3, [pc, #452]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b79      	ldr	r3, [pc, #484]	; (80020bc <HAL_UARTEx_RxEventCallback+0x538>)
 8001ed6:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 8001ed8:	4b78      	ldr	r3, [pc, #480]	; (80020bc <HAL_UARTEx_RxEventCallback+0x538>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_UARTEx_RxEventCallback+0x36e>
						gripper.GripperOpen();
 8001eea:	4875      	ldr	r0, [pc, #468]	; (80020c0 <HAL_UARTEx_RxEventCallback+0x53c>)
 8001eec:	f7ff f8c2 	bl	8001074 <_ZN10ServoMotor11GripperOpenEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001ef0:	e064      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
					} else {
						gripper.GripperClose();
 8001ef2:	4873      	ldr	r0, [pc, #460]	; (80020c0 <HAL_UARTEx_RxEventCallback+0x53c>)
 8001ef4:	f7ff f8a8 	bl	8001048 <_ZN10ServoMotor12GripperCloseEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001ef8:	e060      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
					}

				} else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8) {
 8001efa:	4b66      	ldr	r3, [pc, #408]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b91      	cmp	r3, #145	; 0x91
 8001f00:	d106      	bne.n	8001f10 <HAL_UARTEx_RxEventCallback+0x38c>
 8001f02:	4b69      	ldr	r3, [pc, #420]	; (80020a8 <HAL_UARTEx_RxEventCallback+0x524>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d101      	bne.n	8001f10 <HAL_UARTEx_RxEventCallback+0x38c>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_UARTEx_RxEventCallback+0x38e>
 8001f10:	2300      	movs	r3, #0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d052      	beq.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 8001f16:	4b5f      	ldr	r3, [pc, #380]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f1e:	7892      	ldrb	r2, [r2, #2]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2a:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_UARTEx_RxEventCallback+0x540>)
 8001f2c:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 8001f30:	4b58      	ldr	r3, [pc, #352]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f32:	78db      	ldrb	r3, [r3, #3]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	4a57      	ldr	r2, [pc, #348]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f38:	7912      	ldrb	r2, [r2, #4]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f44:	4b60      	ldr	r3, [pc, #384]	; (80020c8 <HAL_UARTEx_RxEventCallback+0x544>)
 8001f46:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 8001f4a:	4b52      	ldr	r3, [pc, #328]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f4c:	795b      	ldrb	r3, [r3, #5]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	4a50      	ldr	r2, [pc, #320]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f52:	7992      	ldrb	r2, [r2, #6]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5e:	4b5b      	ldr	r3, [pc, #364]	; (80020cc <HAL_UARTEx_RxEventCallback+0x548>)
 8001f60:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <HAL_UARTEx_RxEventCallback+0x510>)
 8001f66:	79db      	ldrb	r3, [r3, #7]
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f70:	4b57      	ldr	r3, [pc, #348]	; (80020d0 <HAL_UARTEx_RxEventCallback+0x54c>)
 8001f72:	edc3 7a00 	vstr	s15, [r3]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001f76:	e021      	b.n	8001fbc <HAL_UARTEx_RxEventCallback+0x438>
				}
			}
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	4855      	ldr	r0, [pc, #340]	; (80020d4 <HAL_UARTEx_RxEventCallback+0x550>)
 8001f7e:	f007 f963 	bl	8009248 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f88:	4853      	ldr	r0, [pc, #332]	; (80020d8 <HAL_UARTEx_RxEventCallback+0x554>)
 8001f8a:	f007 f95d 	bl	8009248 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 8001f8e:	220c      	movs	r2, #12
 8001f90:	4952      	ldr	r1, [pc, #328]	; (80020dc <HAL_UARTEx_RxEventCallback+0x558>)
 8001f92:	4853      	ldr	r0, [pc, #332]	; (80020e0 <HAL_UARTEx_RxEventCallback+0x55c>)
 8001f94:	f00b fada 	bl	800d54c <HAL_UART_Transmit_DMA>
 8001f98:	e011      	b.n	8001fbe <HAL_UARTEx_RxEventCallback+0x43a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	484d      	ldr	r0, [pc, #308]	; (80020d4 <HAL_UARTEx_RxEventCallback+0x550>)
 8001fa0:	f007 f952 	bl	8009248 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001faa:	484b      	ldr	r0, [pc, #300]	; (80020d8 <HAL_UARTEx_RxEventCallback+0x554>)
 8001fac:	f007 f94c 	bl	8009248 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 8001fb0:	2215      	movs	r2, #21
 8001fb2:	494c      	ldr	r1, [pc, #304]	; (80020e4 <HAL_UARTEx_RxEventCallback+0x560>)
 8001fb4:	484a      	ldr	r0, [pc, #296]	; (80020e0 <HAL_UARTEx_RxEventCallback+0x55c>)
 8001fb6:	f00b fac9 	bl	800d54c <HAL_UART_Transmit_DMA>
 8001fba:	e000      	b.n	8001fbe <HAL_UARTEx_RxEventCallback+0x43a>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001fbc:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 8001fbe:	2214      	movs	r2, #20
 8001fc0:	4949      	ldr	r1, [pc, #292]	; (80020e8 <HAL_UARTEx_RxEventCallback+0x564>)
 8001fc2:	4847      	ldr	r0, [pc, #284]	; (80020e0 <HAL_UARTEx_RxEventCallback+0x55c>)
 8001fc4:	f00d fa15 	bl	800f3f2 <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001fc8:	4b48      	ldr	r3, [pc, #288]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a48      	ldr	r2, [pc, #288]	; (80020f0 <HAL_UARTEx_RxEventCallback+0x56c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d04a      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8001fd2:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a47      	ldr	r2, [pc, #284]	; (80020f4 <HAL_UARTEx_RxEventCallback+0x570>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d045      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8001fdc:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a45      	ldr	r2, [pc, #276]	; (80020f8 <HAL_UARTEx_RxEventCallback+0x574>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d040      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a44      	ldr	r2, [pc, #272]	; (80020fc <HAL_UARTEx_RxEventCallback+0x578>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d03b      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8001ff0:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a42      	ldr	r2, [pc, #264]	; (8002100 <HAL_UARTEx_RxEventCallback+0x57c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d036      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8001ffa:	4b3c      	ldr	r3, [pc, #240]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a41      	ldr	r2, [pc, #260]	; (8002104 <HAL_UARTEx_RxEventCallback+0x580>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d031      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002004:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a3f      	ldr	r2, [pc, #252]	; (8002108 <HAL_UARTEx_RxEventCallback+0x584>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d02c      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 800200e:	4b37      	ldr	r3, [pc, #220]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a3e      	ldr	r2, [pc, #248]	; (800210c <HAL_UARTEx_RxEventCallback+0x588>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d027      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002018:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a3c      	ldr	r2, [pc, #240]	; (8002110 <HAL_UARTEx_RxEventCallback+0x58c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d022      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002022:	4b32      	ldr	r3, [pc, #200]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <HAL_UARTEx_RxEventCallback+0x590>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d01d      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 800202c:	4b2f      	ldr	r3, [pc, #188]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a39      	ldr	r2, [pc, #228]	; (8002118 <HAL_UARTEx_RxEventCallback+0x594>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d018      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a38      	ldr	r2, [pc, #224]	; (800211c <HAL_UARTEx_RxEventCallback+0x598>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d013      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a36      	ldr	r2, [pc, #216]	; (8002120 <HAL_UARTEx_RxEventCallback+0x59c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00e      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a35      	ldr	r2, [pc, #212]	; (8002124 <HAL_UARTEx_RxEventCallback+0x5a0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d009      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a33      	ldr	r2, [pc, #204]	; (8002128 <HAL_UARTEx_RxEventCallback+0x5a4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d004      	beq.n	8002068 <HAL_UARTEx_RxEventCallback+0x4e4>
 800205e:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a32      	ldr	r2, [pc, #200]	; (800212c <HAL_UARTEx_RxEventCallback+0x5a8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d108      	bne.n	800207a <HAL_UARTEx_RxEventCallback+0x4f6>
 8002068:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0208 	bic.w	r2, r2, #8
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e008      	b.n	800208c <HAL_UARTEx_RxEventCallback+0x508>
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_UARTEx_RxEventCallback+0x568>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0204 	bic.w	r2, r2, #4
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bdb0      	pop	{r4, r5, r7, pc}
 8002094:	24000340 	.word	0x24000340
 8002098:	2400031e 	.word	0x2400031e
 800209c:	2400031f 	.word	0x2400031f
 80020a0:	24000320 	.word	0x24000320
 80020a4:	24000321 	.word	0x24000321
 80020a8:	24000368 	.word	0x24000368
 80020ac:	24000322 	.word	0x24000322
 80020b0:	24000323 	.word	0x24000323
 80020b4:	24000324 	.word	0x24000324
 80020b8:	24000325 	.word	0x24000325
 80020bc:	2400033c 	.word	0x2400033c
 80020c0:	24000300 	.word	0x24000300
 80020c4:	24000328 	.word	0x24000328
 80020c8:	2400032c 	.word	0x2400032c
 80020cc:	24000330 	.word	0x24000330
 80020d0:	24000334 	.word	0x24000334
 80020d4:	58021000 	.word	0x58021000
 80020d8:	58020400 	.word	0x58020400
 80020dc:	08012860 	.word	0x08012860
 80020e0:	24000dd0 	.word	0x24000dd0
 80020e4:	08012870 	.word	0x08012870
 80020e8:	24000354 	.word	0x24000354
 80020ec:	24000d58 	.word	0x24000d58
 80020f0:	40020010 	.word	0x40020010
 80020f4:	40020028 	.word	0x40020028
 80020f8:	40020040 	.word	0x40020040
 80020fc:	40020058 	.word	0x40020058
 8002100:	40020070 	.word	0x40020070
 8002104:	40020088 	.word	0x40020088
 8002108:	400200a0 	.word	0x400200a0
 800210c:	400200b8 	.word	0x400200b8
 8002110:	40020410 	.word	0x40020410
 8002114:	40020428 	.word	0x40020428
 8002118:	40020440 	.word	0x40020440
 800211c:	40020458 	.word	0x40020458
 8002120:	40020470 	.word	0x40020470
 8002124:	40020488 	.word	0x40020488
 8002128:	400204a0 	.word	0x400204a0
 800212c:	400204b8 	.word	0x400204b8

08002130 <_ZN11robot_jointC1Ev>:
struct joint_state {
float q1, q2, q3, q4;
};
typedef struct joint_state joint_config;

struct robot_joint {
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	661a      	str	r2, [r3, #96]	; 0x60
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800214e:	665a      	str	r2, [r3, #100]	; 0x64
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	669a      	str	r2, [r3, #104]	; 0x68
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800215e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	671a      	str	r2, [r3, #112]	; 0x70
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	675a      	str	r2, [r3, #116]	; 0x74
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	679a      	str	r2, [r3, #120]	; 0x78
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a06      	ldr	r2, [pc, #24]	; (8002194 <_ZN11robot_jointC1Ev+0x64>)
 800217c:	67da      	str	r2, [r3, #124]	; 0x7c
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a05      	ldr	r2, [pc, #20]	; (8002198 <_ZN11robot_jointC1Ev+0x68>)
 8002182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	3dc28f5c 	.word	0x3dc28f5c
 8002198:	387ba882 	.word	0x387ba882

0800219c <_Z10Update_ivkffffffff>:
};
typedef struct robot_kinematic fcb_kinematic;

fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;

void Update_ivk(float q1, float q2, float q3, float q4, float Vx, float Vy, float Vz, float Wz) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b08e      	sub	sp, #56	; 0x38
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	ed87 0a07 	vstr	s0, [r7, #28]
 80021a6:	edc7 0a06 	vstr	s1, [r7, #24]
 80021aa:	ed87 1a05 	vstr	s2, [r7, #20]
 80021ae:	edc7 1a04 	vstr	s3, [r7, #16]
 80021b2:	ed87 2a03 	vstr	s4, [r7, #12]
 80021b6:	edc7 2a02 	vstr	s5, [r7, #8]
 80021ba:	ed87 3a01 	vstr	s6, [r7, #4]
 80021be:	edc7 3a00 	vstr	s7, [r7]
float S13 = sin(q1 + q3);
 80021c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80021c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ce:	eeb0 0a67 	vmov.f32	s0, s15
 80021d2:	f7ff fcc7 	bl	8001b64 <_ZSt3sinf>
 80021d6:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
float C13 = cos(q1 + q3);
 80021da:	ed97 7a07 	vldr	s14, [r7, #28]
 80021de:	edd7 7a05 	vldr	s15, [r7, #20]
 80021e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ea:	f7ff fcab 	bl	8001b44 <_ZSt3cosf>
 80021ee:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
float S3 = sin(q3);
 80021f2:	ed97 0a05 	vldr	s0, [r7, #20]
 80021f6:	f7ff fcb5 	bl	8001b64 <_ZSt3sinf>
 80021fa:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
float S1 = sin(q1);
 80021fe:	ed97 0a07 	vldr	s0, [r7, #28]
 8002202:	f7ff fcaf 	bl	8001b64 <_ZSt3sinf>
 8002206:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
float C1 = cos(q1);
 800220a:	ed97 0a07 	vldr	s0, [r7, #28]
 800220e:	f7ff fc99 	bl	8001b44 <_ZSt3cosf>
 8002212:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
float L3S3 = L3 * S3;
 8002216:	4b4f      	ldr	r3, [pc, #316]	; (8002354 <_Z10Update_ivkffffffff+0x1b8>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	edc7 7a08 	vstr	s15, [r7, #32]

w_q1 = (Vx * C13 + Vy * S13) / (S3 * L12);
 8002228:	ed97 7a03 	vldr	s14, [r7, #12]
 800222c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002230:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002234:	edd7 6a02 	vldr	s13, [r7, #8]
 8002238:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800223c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002240:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002244:	4b44      	ldr	r3, [pc, #272]	; (8002358 <_Z10Update_ivkffffffff+0x1bc>)
 8002246:	ed93 7a00 	vldr	s14, [r3]
 800224a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800224e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002256:	4b41      	ldr	r3, [pc, #260]	; (800235c <_Z10Update_ivkffffffff+0x1c0>)
 8002258:	edc3 7a00 	vstr	s15, [r3]
w_q2 = Vz;
 800225c:	4a40      	ldr	r2, [pc, #256]	; (8002360 <_Z10Update_ivkffffffff+0x1c4>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
w_q3 = -(Vx * (L3 * C13 + L1 * C1 + L2 * C1)) / (L3S3 * L12)
 8002262:	4b3c      	ldr	r3, [pc, #240]	; (8002354 <_Z10Update_ivkffffffff+0x1b8>)
 8002264:	ed93 7a00 	vldr	s14, [r3]
 8002268:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800226c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002270:	4b3c      	ldr	r3, [pc, #240]	; (8002364 <_Z10Update_ivkffffffff+0x1c8>)
 8002272:	edd3 6a00 	vldr	s13, [r3]
 8002276:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800227a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <_Z10Update_ivkffffffff+0x1cc>)
 8002284:	edd3 6a00 	vldr	s13, [r3]
 8002288:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800228c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002294:	edd7 7a03 	vldr	s15, [r7, #12]
 8002298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229c:	eef1 6a67 	vneg.f32	s13, s15
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <_Z10Update_ivkffffffff+0x1bc>)
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80022aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		- (Vy * (L3 * S13 + L1 * S1 + L2 * S1)) / (L3S3 * L12);
 80022b2:	4b28      	ldr	r3, [pc, #160]	; (8002354 <_Z10Update_ivkffffffff+0x1b8>)
 80022b4:	edd3 6a00 	vldr	s13, [r3]
 80022b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80022bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022c0:	4b28      	ldr	r3, [pc, #160]	; (8002364 <_Z10Update_ivkffffffff+0x1c8>)
 80022c2:	ed93 6a00 	vldr	s12, [r3]
 80022c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <_Z10Update_ivkffffffff+0x1cc>)
 80022d4:	ed93 6a00 	vldr	s12, [r3]
 80022d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80022e8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <_Z10Update_ivkffffffff+0x1bc>)
 80022ee:	edd3 6a00 	vldr	s13, [r3]
 80022f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80022f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022fa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80022fe:	ee77 7a67 	vsub.f32	s15, s14, s15
w_q3 = -(Vx * (L3 * C13 + L1 * C1 + L2 * C1)) / (L3S3 * L12)
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <_Z10Update_ivkffffffff+0x1d0>)
 8002304:	edc3 7a00 	vstr	s15, [r3]
w_q4 = (Vx * C1 + Vy * S1 + L3 * Wz * S3) / (L3S3);
 8002308:	ed97 7a03 	vldr	s14, [r7, #12]
 800230c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002314:	edd7 6a02 	vldr	s13, [r7, #8]
 8002318:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800231c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <_Z10Update_ivkffffffff+0x1b8>)
 8002326:	edd3 6a00 	vldr	s13, [r3]
 800232a:	edd7 7a00 	vldr	s15, [r7]
 800232e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002332:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800233e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <_Z10Update_ivkffffffff+0x1d4>)
 8002348:	edc3 7a00 	vstr	s15, [r3]

};
 800234c:	bf00      	nop
 800234e:	3738      	adds	r7, #56	; 0x38
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	2400000c 	.word	0x2400000c
 8002358:	24000010 	.word	0x24000010
 800235c:	24000398 	.word	0x24000398
 8002360:	2400039c 	.word	0x2400039c
 8002364:	24000004 	.word	0x24000004
 8002368:	24000008 	.word	0x24000008
 800236c:	240003a0 	.word	0x240003a0
 8002370:	240003a4 	.word	0x240003a4

08002374 <_Z19Update_quintic_Cofffffffff>:




fcb_joint Update_quintic_Coff(float T, float Start_pos, float Final_pos, float Start_velocity, float Final_velocity, float Start_acceleration, float Final_acceleration)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b090      	sub	sp, #64	; 0x40
 8002378:	af00      	add	r7, sp, #0
 800237a:	61f8      	str	r0, [r7, #28]
 800237c:	ed87 0a06 	vstr	s0, [r7, #24]
 8002380:	edc7 0a05 	vstr	s1, [r7, #20]
 8002384:	ed87 1a04 	vstr	s2, [r7, #16]
 8002388:	edc7 1a03 	vstr	s3, [r7, #12]
 800238c:	ed87 2a02 	vstr	s4, [r7, #8]
 8002390:	edc7 2a01 	vstr	s5, [r7, #4]
 8002394:	ed87 3a00 	vstr	s6, [r7]
	fcb_joint joint;
 8002398:	69f8      	ldr	r0, [r7, #28]
 800239a:	f7ff fec9 	bl	8002130 <_ZN11robot_jointC1Ev>
	joint.C0 = Start_pos;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	joint.C1 = Start_velocity;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	joint.C2 = Start_acceleration/2.0;
 80023ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80023b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

	const float A = Final_pos - (Start_pos + (Start_velocity*T) + (Start_acceleration*T*T/2));
 80023c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80023c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80023c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80023d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d4:	edd7 6a01 	vldr	s13, [r7, #4]
 80023d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80023dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80023e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023e8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80023ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80023f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023fc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity - (Start_velocity + (Start_acceleration*T));
 8002400:	ed97 7a01 	vldr	s14, [r7, #4]
 8002404:	edd7 7a06 	vldr	s15, [r7, #24]
 8002408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800240c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002414:	ed97 7a02 	vldr	s14, [r7, #8]
 8002418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8002420:	ed97 7a00 	vldr	s14, [r7]
 8002424:	edd7 7a01 	vldr	s15, [r7, #4]
 8002428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T*T;
 8002430:	edd7 7a06 	vldr	s15, [r7, #24]
 8002434:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002438:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T*T*T;
 800243c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002440:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002444:	ed97 7a06 	vldr	s14, [r7, #24]
 8002448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T*T*T*T;
 8002450:	edd7 7a06 	vldr	s15, [r7, #24]
 8002454:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002458:	edd7 7a06 	vldr	s15, [r7, #24]
 800245c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002460:	ed97 7a06 	vldr	s14, [r7, #24]
 8002464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002468:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T*T*T*T*T;
 800246c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002470:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002474:	edd7 7a06 	vldr	s15, [r7, #24]
 8002478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800247c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002484:	ed97 7a06 	vldr	s14, [r7, #24]
 8002488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	joint.C3 = (10.0*A/T3) - (4.0*B/T2) + (C/(2.0*T));
 8002490:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002494:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002498:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800249c:	ee27 5b06 	vmul.f64	d5, d7, d6
 80024a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024a8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80024ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80024b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024b4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80024b8:	ee27 4b05 	vmul.f64	d4, d7, d5
 80024bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024c0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80024c4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80024c8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80024cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024d0:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80024d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80024d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024dc:	ee37 5b07 	vadd.f64	d5, d7, d7
 80024e0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80024e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	joint.C4 = (-15.0*A/T4) + (7.0*B/T3) - (C/T2);
 80024f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024fa:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 80024fe:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002502:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002506:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800250a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800250e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002512:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002516:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800251a:	ee27 4b05 	vmul.f64	d4, d7, d5
 800251e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002522:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002526:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800252a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800252e:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8002532:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002536:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800253a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800253e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002542:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	joint.C5 = (6.0*A/T5) - (3.0*B/T4) + (C/(2.0*T3));
 800254c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002550:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002554:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8002558:	ee27 5b06 	vmul.f64	d5, d7, d6
 800255c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002560:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002564:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002568:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800256c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002570:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002574:	ee27 4b05 	vmul.f64	d4, d7, d5
 8002578:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800257c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002580:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002584:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002588:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800258c:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8002590:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002594:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002598:	ee37 5b07 	vadd.f64	d5, d7, d7
 800259c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80025a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80025a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	joint.T = T;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	return joint;
 80025b6:	bf00      	nop
}
 80025b8:	69f8      	ldr	r0, [r7, #28]
 80025ba:	3740      	adds	r7, #64	; 0x40
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_Z12KalmanFilterf11robot_joint>:
//	v = C1 + (2.0*C2*t) + (3.0*C3*t2) + (4.0*C4*t3) + (5.0*C5*t4);
//	a = (2.0*C2) + (6.0*C3*t) + (12.0*C4*t2) + (20.0*C5*t3);
//
//}

fcb_joint KalmanFilter(float theta_k, fcb_joint joint) {
 80025c0:	b084      	sub	sp, #16
 80025c2:	b580      	push	{r7, lr}
 80025c4:	ed2d 8b08 	vpush	{d8-d11}
 80025c8:	b08a      	sub	sp, #40	; 0x28
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	ed87 0a00 	vstr	s0, [r7]
 80025d2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80025d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	bug1 = joint.Encoder;
float X1 = joint.X11;
 80025da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
float X2 = joint.X21;
 80025e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025e4:	623b      	str	r3, [r7, #32]
float P11 = joint.p11;
 80025e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025ea:	61fb      	str	r3, [r7, #28]
float P12 = joint.p12;
 80025ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025f0:	61bb      	str	r3, [r7, #24]
float P21 = joint.p21;
 80025f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025f6:	617b      	str	r3, [r7, #20]
float P22 = joint.p22;
 80025f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025fc:	613b      	str	r3, [r7, #16]
float Q = joint.Q;
 80025fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002602:	60fb      	str	r3, [r7, #12]
float R = joint.R;
 8002604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002608:	60bb      	str	r3, [r7, #8]

joint.X11 =
		X1 + (X2 * dt)
 800260a:	4bef      	ldr	r3, [pc, #956]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800260c:	ed93 7a00 	vldr	s14, [r3]
 8002610:	edd7 7a08 	vldr	s15, [r7, #32]
 8002614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002618:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800261c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002620:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
				- ((X1 - theta_k + X2 * dt)
 8002624:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002628:	edd7 7a00 	vldr	s15, [r7]
 800262c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002630:	4be5      	ldr	r3, [pc, #916]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002632:	edd3 6a00 	vldr	s13, [r3]
 8002636:	edd7 7a08 	vldr	s15, [r7, #32]
 800263a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800263e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002642:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 8002646:	4be0      	ldr	r3, [pc, #896]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002648:	ed93 7a00 	vldr	s14, [r3]
 800264c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002654:	edd7 7a07 	vldr	s15, [r7, #28]
 8002658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002660:	edd7 7a03 	vldr	s15, [r7, #12]
 8002664:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002668:	4bd7      	ldr	r3, [pc, #860]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	2004      	movs	r0, #4
 8002670:	eeb0 0a67 	vmov.f32	s0, s15
 8002674:	f001 fc5e 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002678:	eeb0 7b40 	vmov.f64	d7, d0
 800267c:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002680:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002684:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002688:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt)))
 800268c:	4bce      	ldr	r3, [pc, #824]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800268e:	ed93 7a00 	vldr	s14, [r3]
 8002692:	edd7 7a04 	vldr	s15, [r7, #16]
 8002696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800269a:	edd7 7a06 	vldr	s15, [r7, #24]
 800269e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a2:	4bc9      	ldr	r3, [pc, #804]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026b0:	ee36 7b07 	vadd.f64	d7, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 80026b4:	ee29 9b07 	vmul.f64	d9, d9, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 80026b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80026bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80026c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c4:	4bc0      	ldr	r3, [pc, #768]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026c6:	edd3 6a00 	vldr	s13, [r3]
 80026ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80026ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d6:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80026da:	edd7 7a03 	vldr	s15, [r7, #12]
 80026de:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80026e2:	4bb9      	ldr	r3, [pc, #740]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	2004      	movs	r0, #4
 80026ea:	eeb0 0a67 	vmov.f32	s0, s15
 80026ee:	f001 fc21 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80026f2:	eeb0 7b40 	vmov.f64	d7, d0
 80026f6:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80026fa:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80026fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002702:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt));
 8002706:	4bb0      	ldr	r3, [pc, #704]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002708:	ed93 7a00 	vldr	s14, [r3]
 800270c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002714:	edd7 7a06 	vldr	s15, [r7, #24]
 8002718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800271c:	4baa      	ldr	r3, [pc, #680]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002726:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800272a:	ee36 6b07 	vadd.f64	d6, d6, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 800272e:	ee89 7b06 	vdiv.f64	d7, d9, d6
				- ((X1 - theta_k + X2 * dt)
 8002732:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002736:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.X11 =
 800273a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
joint.X21 = X2
 800273e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002742:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21) * (X1 - theta_k + X2 * dt))
 8002746:	edd7 7a03 	vldr	s15, [r7, #12]
 800274a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800274e:	4b9e      	ldr	r3, [pc, #632]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	2003      	movs	r0, #3
 8002756:	eeb0 0a67 	vmov.f32	s0, s15
 800275a:	f001 fbeb 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800275e:	eeb0 7b40 	vmov.f64	d7, d0
 8002762:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002766:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800276a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800276e:	4b96      	ldr	r3, [pc, #600]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002770:	ed93 7a00 	vldr	s14, [r3]
 8002774:	edd7 7a04 	vldr	s15, [r7, #16]
 8002778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002780:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002784:	edd7 7a05 	vldr	s15, [r7, #20]
 8002788:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800278c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002790:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002794:	edd7 7a00 	vldr	s15, [r7]
 8002798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800279c:	4b8a      	ldr	r3, [pc, #552]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800279e:	edd3 5a00 	vldr	s11, [r3]
 80027a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80027a6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80027aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027b2:	ee26 9b07 	vmul.f64	d9, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 80027b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80027ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80027be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027c2:	4b81      	ldr	r3, [pc, #516]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80027c4:	edd3 6a00 	vldr	s13, [r3]
 80027c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80027d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80027dc:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80027e0:	4b79      	ldr	r3, [pc, #484]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	2004      	movs	r0, #4
 80027e8:	eeb0 0a67 	vmov.f32	s0, s15
 80027ec:	f001 fba2 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027f0:	eeb0 7b40 	vmov.f64	d7, d0
 80027f4:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80027f8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80027fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002800:	ee3a 6b07 	vadd.f64	d6, d10, d7
						+ dt * (P12 + P22 * dt));
 8002804:	4b70      	ldr	r3, [pc, #448]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002806:	ed93 7a00 	vldr	s14, [r3]
 800280a:	edd7 7a04 	vldr	s15, [r7, #16]
 800280e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002812:	edd7 7a06 	vldr	s15, [r7, #24]
 8002816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281a:	4b6b      	ldr	r3, [pc, #428]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002824:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002828:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 800282c:	ee89 7b06 	vdiv.f64	d7, d9, d6
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21) * (X1 - theta_k + X2 * dt))
 8002830:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002834:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.X21 = X2
 8002838:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 800283c:	4b62      	ldr	r3, [pc, #392]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800283e:	ed93 7a00 	vldr	s14, [r3]
 8002842:	edd7 7a05 	vldr	s15, [r7, #20]
 8002846:	ee27 7a27 	vmul.f32	s14, s14, s15
 800284a:	edd7 7a07 	vldr	s15, [r7, #28]
 800284e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002852:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002856:	edd7 7a03 	vldr	s15, [r7, #12]
 800285a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800285e:	4b5a      	ldr	r3, [pc, #360]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002860:	edd3 7a00 	vldr	s15, [r3]
 8002864:	2004      	movs	r0, #4
 8002866:	eeb0 0a67 	vmov.f32	s0, s15
 800286a:	f001 fb63 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800286e:	eeb0 7b40 	vmov.f64	d7, d0
 8002872:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002876:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800287a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800287e:	ee38 6b07 	vadd.f64	d6, d8, d7
 8002882:	4b51      	ldr	r3, [pc, #324]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002884:	ed93 7a00 	vldr	s14, [r3]
 8002888:	edd7 7a04 	vldr	s15, [r7, #16]
 800288c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002890:	edd7 7a06 	vldr	s15, [r7, #24]
 8002894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002898:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028a6:	ee36 8b07 	vadd.f64	d8, d6, d7
		/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 80028aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80028ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b6:	4b44      	ldr	r3, [pc, #272]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80028b8:	edd3 6a00 	vldr	s13, [r3]
 80028bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80028c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80028cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80028d0:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80028d4:	4b3c      	ldr	r3, [pc, #240]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80028d6:	edd3 7a00 	vldr	s15, [r3]
 80028da:	2004      	movs	r0, #4
 80028dc:	eeb0 0a67 	vmov.f32	s0, s15
 80028e0:	f001 fb28 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80028e4:	eeb0 7b40 	vmov.f64	d7, d0
 80028e8:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80028ec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80028f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80028f4:	ee39 6b07 	vadd.f64	d6, d9, d7
 80028f8:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002906:	edd7 7a06 	vldr	s15, [r7, #24]
 800290a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800290e:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002918:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800291c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002920:	ee88 7b06 	vdiv.f64	d7, d8, d6
		- 1) * (P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt));
 8002924:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002928:	ee37 7b46 	vsub.f64	d7, d7, d6
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 800292c:	eeb1 8b47 	vneg.f64	d8, d7
		- 1) * (P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt));
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002932:	ed93 7a00 	vldr	s14, [r3]
 8002936:	edd7 7a05 	vldr	s15, [r7, #20]
 800293a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002946:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800294a:	edd7 7a03 	vldr	s15, [r7, #12]
 800294e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	2004      	movs	r0, #4
 800295a:	eeb0 0a67 	vmov.f32	s0, s15
 800295e:	f001 fae9 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002962:	eeb0 7b40 	vmov.f64	d7, d0
 8002966:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800296a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800296e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002972:	ee39 6b07 	vadd.f64	d6, d9, d7
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002978:	ed93 7a00 	vldr	s14, [r3]
 800297c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002980:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002984:	edd7 7a06 	vldr	s15, [r7, #24]
 8002988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002996:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800299a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800299e:	ee28 7b07 	vmul.f64	d7, d8, d7
 80029a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 80029a6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <_Z12KalmanFilterf11robot_joint+0x408>)
 80029ac:	ed93 7a00 	vldr	s14, [r3]
 80029b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80029b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80029bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80029c4:	e002      	b.n	80029cc <_Z12KalmanFilterf11robot_joint+0x40c>
 80029c6:	bf00      	nop
 80029c8:	24000024 	.word	0x24000024
 80029cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80029d0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80029d4:	4bef      	ldr	r3, [pc, #956]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80029d6:	edd3 7a00 	vldr	s15, [r3]
 80029da:	2004      	movs	r0, #4
 80029dc:	eeb0 0a67 	vmov.f32	s0, s15
 80029e0:	f001 faa8 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80029e4:	eeb0 7b40 	vmov.f64	d7, d0
 80029e8:	ee29 6b07 	vmul.f64	d6, d9, d7
 80029ec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80029f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80029f4:	ee38 6b07 	vadd.f64	d6, d8, d7
 80029f8:	4be6      	ldr	r3, [pc, #920]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80029fa:	ed93 7a00 	vldr	s14, [r3]
 80029fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a06:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a0e:	4be1      	ldr	r3, [pc, #900]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a10:	edd3 7a00 	vldr	s15, [r3]
 8002a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a1c:	ee36 8b07 	vadd.f64	d8, d6, d7
		/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002a20:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2c:	4bd9      	ldr	r3, [pc, #868]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a2e:	edd3 6a00 	vldr	s13, [r3]
 8002a32:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002a42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a46:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002a4a:	4bd2      	ldr	r3, [pc, #840]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	2004      	movs	r0, #4
 8002a52:	eeb0 0a67 	vmov.f32	s0, s15
 8002a56:	f001 fa6d 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a5a:	eeb0 7b40 	vmov.f64	d7, d0
 8002a5e:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8002a62:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002a66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a6a:	ee39 6b07 	vadd.f64	d6, d9, d7
 8002a6e:	4bc9      	ldr	r3, [pc, #804]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a70:	ed93 7a00 	vldr	s14, [r3]
 8002a74:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a84:	4bc3      	ldr	r3, [pc, #780]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a86:	edd3 7a00 	vldr	s15, [r3]
 8002a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a92:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002a96:	ee88 7b06 	vdiv.f64	d7, d8, d6
		- 1) * ((Q * pow(dt, 3)) / 2 + P22 * dt + P12);
 8002a9a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002a9e:	ee37 7b46 	vsub.f64	d7, d7, d6
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002aa2:	eeb1 8b47 	vneg.f64	d8, d7
		- 1) * ((Q * pow(dt, 3)) / 2 + P22 * dt + P12);
 8002aa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aaa:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002aae:	4bb9      	ldr	r3, [pc, #740]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aba:	f001 fa3b 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002abe:	eeb0 7b40 	vmov.f64	d7, d0
 8002ac2:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002ac6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002aca:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ace:	4bb1      	ldr	r3, [pc, #708]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002ad0:	ed93 7a00 	vldr	s14, [r3]
 8002ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002adc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ae0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ae4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ae8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002aec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002af0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002af4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002af8:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
joint.p21 =
		P21 + P22 * dt + (Q * pow(dt, 3)) / 2
 8002afc:	4ba5      	ldr	r3, [pc, #660]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002afe:	ed93 7a00 	vldr	s14, [r3]
 8002b02:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b12:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002b16:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b1a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002b1e:	4b9d      	ldr	r3, [pc, #628]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b20:	edd3 7a00 	vldr	s15, [r3]
 8002b24:	2003      	movs	r0, #3
 8002b26:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2a:	f001 fa03 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b2e:	eeb0 7b40 	vmov.f64	d7, d0
 8002b32:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002b36:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002b3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b3e:	ee38 8b07 	vadd.f64	d8, d8, d7
				- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21)
 8002b42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b46:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002b4a:	4b92      	ldr	r3, [pc, #584]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	2003      	movs	r0, #3
 8002b52:	eeb0 0a67 	vmov.f32	s0, s15
 8002b56:	f001 f9ed 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b5a:	eeb0 7b40 	vmov.f64	d7, d0
 8002b5e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002b62:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002b66:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b6a:	4b8a      	ldr	r3, [pc, #552]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
 8002b70:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b80:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b88:	ee36 9b07 	vadd.f64	d9, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 8002b8c:	4b81      	ldr	r3, [pc, #516]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b8e:	ed93 7a00 	vldr	s14, [r3]
 8002b92:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002baa:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002bae:	4b79      	ldr	r3, [pc, #484]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	2004      	movs	r0, #4
 8002bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bba:	f001 f9bb 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002bbe:	eeb0 7b40 	vmov.f64	d7, d0
 8002bc2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002bc6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002bca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002bce:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt)))
 8002bd2:	4b70      	ldr	r3, [pc, #448]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002bd4:	ed93 7a00 	vldr	s14, [r3]
 8002bd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be8:	4b6a      	ldr	r3, [pc, #424]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bf6:	ee36 7b07 	vadd.f64	d7, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 8002bfa:	ee29 9b07 	vmul.f64	d9, d9, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002bfe:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c0a:	4b62      	ldr	r3, [pc, #392]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002c0c:	edd3 6a00 	vldr	s13, [r3]
 8002c10:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c24:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002c28:	4b5a      	ldr	r3, [pc, #360]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	2004      	movs	r0, #4
 8002c30:	eeb0 0a67 	vmov.f32	s0, s15
 8002c34:	f001 f97e 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002c38:	eeb0 7b40 	vmov.f64	d7, d0
 8002c3c:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002c40:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002c44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c48:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt));
 8002c4c:	4b51      	ldr	r3, [pc, #324]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002c4e:	ed93 7a00 	vldr	s14, [r3]
 8002c52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c62:	4b4c      	ldr	r3, [pc, #304]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c70:	ee36 6b07 	vadd.f64	d6, d6, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002c74:	ee89 7b06 	vdiv.f64	d7, d9, d6
				- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21)
 8002c78:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002c7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p21 =
 8002c80:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
joint.p22 = P22 + Q * pow(dt, 2)
 8002c84:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c88:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002c8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c90:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002c94:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca0:	f001 f948 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002ca4:	eeb0 7b40 	vmov.f64	d7, d0
 8002ca8:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002cac:	ee38 8b07 	vadd.f64	d8, d8, d7
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P12)
 8002cb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cb4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002cb8:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002cba:	edd3 7a00 	vldr	s15, [r3]
 8002cbe:	2003      	movs	r0, #3
 8002cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc4:	f001 f936 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002cc8:	eeb0 7b40 	vmov.f64	d7, d0
 8002ccc:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002cd0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002cd4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002cd8:	4b2e      	ldr	r3, [pc, #184]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002cda:	ed93 7a00 	vldr	s14, [r3]
 8002cde:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cea:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002cee:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cf6:	ee36 9b07 	vadd.f64	d9, d6, d7
				* ((Q * pow(dt, 3)) / 2 + P22 * dt + P21))
 8002cfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cfe:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002d02:	4b24      	ldr	r3, [pc, #144]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	2003      	movs	r0, #3
 8002d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0e:	f001 f911 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002d12:	eeb0 7b40 	vmov.f64	d7, d0
 8002d16:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8002d1a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002d1e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d22:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002d24:	ed93 7a00 	vldr	s14, [r3]
 8002d28:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d34:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002d38:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d40:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d44:	ee29 9b07 	vmul.f64	d9, d9, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002d48:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002d56:	edd3 6a00 	vldr	s13, [r3]
 8002d5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d66:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002d6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d6e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002d74:	edd3 7a00 	vldr	s15, [r3]
 8002d78:	2004      	movs	r0, #4
 8002d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d7e:	f001 f8d9 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002d82:	eeb0 7b40 	vmov.f64	d7, d0
 8002d86:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002d8a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002d8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d92:	e001      	b.n	8002d98 <_Z12KalmanFilterf11robot_joint+0x7d8>
 8002d94:	24000024 	.word	0x24000024
 8002d98:	ee3a 6b07 	vadd.f64	d6, d10, d7
						+ dt * (P12 + P22 * dt));
 8002d9c:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <_Z12KalmanFilterf11robot_joint+0x838>)
 8002d9e:	ed93 7a00 	vldr	s14, [r3]
 8002da2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002daa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <_Z12KalmanFilterf11robot_joint+0x838>)
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dc0:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002dc4:	ee89 7b06 	vdiv.f64	d7, d9, d6
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P12)
 8002dc8:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002dcc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p22 = P22 + Q * pow(dt, 2)
 8002dd0:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

return joint;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ddc:	22a0      	movs	r2, #160	; 0xa0
 8002dde:	4619      	mov	r1, r3
 8002de0:	f00d f8e8 	bl	800ffb4 <memcpy>

}
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	3728      	adds	r7, #40	; 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	ecbd 8b08 	vpop	{d8-d11}
 8002dee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002df2:	b004      	add	sp, #16
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	24000024 	.word	0x24000024
 8002dfc:	00000000 	.word	0x00000000

08002e00 <HAL_TIM_PeriodElapsedCallback>:
buff.q4 = S3;

return buff;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e02:	ed2d 8b02 	vpush	{d8}
 8002e06:	b0db      	sub	sp, #364	; 0x16c
 8002e08:	af26      	add	r7, sp, #152	; 0x98
 8002e0a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
// tim7 1000 Hz
// tim12 2000 Hz
// tim6 200 Hz
// tim14 500Hz

if (htim == &htim6) {	//
 8002e0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e12:	4ac5      	ldr	r2, [pc, #788]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	f040 80bc 	bne.w	8002f92 <HAL_TIM_PeriodElapsedCallback+0x192>

	encoderJ1.AMT21_Read();
 8002e1a:	48c4      	ldr	r0, [pc, #784]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002e1c:	f7fd fe0f 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8002e20:	48c2      	ldr	r0, [pc, #776]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002e22:	f7fd fe3b 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4bc1      	ldr	r3, [pc, #772]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002e2c:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 8002e2e:	4bc0      	ldr	r3, [pc, #768]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_TIM_PeriodElapsedCallback+0x44>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 8002e36:	48bd      	ldr	r0, [pc, #756]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002e38:	f7fd fe94 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4bbc      	ldr	r3, [pc, #752]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002e42:	801a      	strh	r2, [r3, #0]
	}

	encoderJ3.AMT21_Read();
 8002e44:	48bc      	ldr	r0, [pc, #752]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002e46:	f7fd fdfa 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8002e4a:	48bb      	ldr	r0, [pc, #748]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002e4c:	f7fd fe26 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461a      	mov	r2, r3
 8002e54:	4bb9      	ldr	r3, [pc, #740]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002e56:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 8002e58:	4bb8      	ldr	r3, [pc, #736]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <HAL_TIM_PeriodElapsedCallback+0x6e>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
 8002e60:	48b5      	ldr	r0, [pc, #724]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002e62:	f7fd fe7f 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4bb5      	ldr	r3, [pc, #724]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002e6c:	801a      	strh	r2, [r3, #0]
	}

	float sethome_q1 = -0.4137;
 8002e6e:	4bb5      	ldr	r3, [pc, #724]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	float sethome_q2 = 0.1;
 8002e74:	4bb4      	ldr	r3, [pc, #720]	; (8003148 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002e76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float sethome_q3 =   0.9638;
 8002e7a:	4bb4      	ldr	r3, [pc, #720]	; (800314c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8002e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	float sethome_yaw = -0.5501;
 8002e80:	4bb3      	ldr	r3, [pc, #716]	; (8003150 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002e82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	error_q1 = sethome_q1*2609.0 - fcb_joint1.Encoder;
 8002e86:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002e8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e8e:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8003118 <HAL_TIM_PeriodElapsedCallback+0x318>
 8002e92:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002e96:	4ba7      	ldr	r3, [pc, #668]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	b21b      	sxth	r3, r3
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ea4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ea8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002eac:	4ba9      	ldr	r3, [pc, #676]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8002eae:	edc3 7a00 	vstr	s15, [r3]
	error_q3 = sethome_q3*2609.0 - fcb_joint3.Encoder;
 8002eb2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002eb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002eba:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8003118 <HAL_TIM_PeriodElapsedCallback+0x318>
 8002ebe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002ec2:	4b9f      	ldr	r3, [pc, #636]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b21b      	sxth	r3, r3
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ed0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ed4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ed8:	4b9f      	ldr	r3, [pc, #636]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002eda:	edc3 7a00 	vstr	s15, [r3]

	stepperJ1.StepperSetFrequency(error_q1*-2.0);
 8002ede:	4b9d      	ldr	r3, [pc, #628]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8002ee0:	edd3 7a00 	vldr	s15, [r3]
 8002ee4:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eec:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef0:	489a      	ldr	r0, [pc, #616]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002ef2:	f7fe f961 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetFrequency(error_q3/3);
 8002ef6:	4b98      	ldr	r3, [pc, #608]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002ef8:	edd3 7a00 	vldr	s15, [r3]
 8002efc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002f00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f04:	eeb0 0a47 	vmov.f32	s0, s14
 8002f08:	4895      	ldr	r0, [pc, #596]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002f0a:	f7fe f955 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	if (abs(error_q3) < 20.0)
 8002f0e:	4b92      	ldr	r3, [pc, #584]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	eeb0 0a67 	vmov.f32	s0, s15
 8002f18:	f7fe fe04 	bl	8001b24 <_ZSt3absf>
 8002f1c:	eef0 7a40 	vmov.f32	s15, s0
 8002f20:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2c:	bf4c      	ite	mi
 8002f2e:	2301      	movmi	r3, #1
 8002f30:	2300      	movpl	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0x142>
	{
		stepperJ3.StepperSetFrequency(0);
 8002f38:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8003164 <HAL_TIM_PeriodElapsedCallback+0x364>
 8002f3c:	4888      	ldr	r0, [pc, #544]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002f3e:	f7fe f93b 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	}
	if ( abs(error_q1) < 15.0 )
 8002f42:	4b84      	ldr	r3, [pc, #528]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	eeb0 0a67 	vmov.f32	s0, s15
 8002f4c:	f7fe fdea 	bl	8001b24 <_ZSt3absf>
 8002f50:	eef0 7a40 	vmov.f32	s15, s0
 8002f54:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f60:	bf4c      	ite	mi
 8002f62:	2301      	movmi	r3, #1
 8002f64:	2300      	movpl	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d012      	beq.n	8002f92 <HAL_TIM_PeriodElapsedCallback+0x192>
	{
		State_Sethome = 0;
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
		stepperJ1.StepperSetFrequency(0);
 8002f72:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8003164 <HAL_TIM_PeriodElapsedCallback+0x364>
 8002f76:	4879      	ldr	r0, [pc, #484]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002f78:	f7fe f91e 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
		stepperJ3.StepperSetFrequency(0);
 8002f7c:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8003164 <HAL_TIM_PeriodElapsedCallback+0x364>
 8002f80:	4877      	ldr	r0, [pc, #476]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002f82:	f7fe f919 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
		HAL_TIM_Base_Stop_IT(&htim6);
 8002f86:	4868      	ldr	r0, [pc, #416]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002f88:	f008 fed6 	bl	800bd38 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim7);
 8002f8c:	4877      	ldr	r0, [pc, #476]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8002f8e:	f008 fe5b 	bl	800bc48 <HAL_TIM_Base_Start_IT>

if (htim == &htim12) {	//

}

if (htim == &htim5) {	//
 8002f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f96:	4a76      	ldr	r2, [pc, #472]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	f040 81db 	bne.w	8003354 <HAL_TIM_PeriodElapsedCallback+0x554>

		encoderJ1.AMT21_Read();
 8002f9e:	4863      	ldr	r0, [pc, #396]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002fa0:	f7fd fd4d 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8002fa4:	4861      	ldr	r0, [pc, #388]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002fa6:	f7fd fd79 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002faa:	4603      	mov	r3, r0
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b60      	ldr	r3, [pc, #384]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002fb0:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8002fb2:	4b5f      	ldr	r3, [pc, #380]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 8002fba:	485c      	ldr	r0, [pc, #368]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002fbc:	f7fd fdd2 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b5b      	ldr	r3, [pc, #364]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002fc6:	801a      	strh	r2, [r3, #0]
//		if(HALENCJ2OK == HAL_OK){
//			encoderJ2.unwarp();
//			posJ2 = encoderJ2.getUnwarpValue();
//		}

		encoderJ3.AMT21_Read();
 8002fc8:	485b      	ldr	r0, [pc, #364]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002fca:	f7fd fd38 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8002fce:	485a      	ldr	r0, [pc, #360]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002fd0:	f7fd fd64 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b58      	ldr	r3, [pc, #352]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002fda:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8002fdc:	4b57      	ldr	r3, [pc, #348]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_TIM_PeriodElapsedCallback+0x1f2>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
 8002fe4:	4854      	ldr	r0, [pc, #336]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002fe6:	f7fd fdbd 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002fea:	4603      	mov	r3, r0
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b54      	ldr	r3, [pc, #336]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002ff0:	801a      	strh	r2, [r3, #0]
//		stepperJ1.StepperSetFrequency(dq1);
//		stepperJ2.StepperSetFrequency(dq2);
//		stepperJ3.StepperSetFrequency(dq3);
//		stepperJ4.StepperSetFrequency(dq4);

		Update_ivk(fcb_joint1.Encoder / 2609.0 , 0.0,fcb_joint3.Encoder / 2609.0, 0.0, dx/1000.0, dy/1000.0, dz/1000.0, 0.0);
 8002ff2:	4b50      	ldr	r3, [pc, #320]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b21b      	sxth	r3, r3
 8002ff8:	ee07 3a90 	vmov	s15, r3
 8002ffc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003000:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8003118 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003004:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003008:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 800300c:	4b4c      	ldr	r3, [pc, #304]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b21b      	sxth	r3, r3
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800301a:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8003118 <HAL_TIM_PeriodElapsedCallback+0x318>
 800301e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003022:	eeb7 4bc7 	vcvt.f32.f64	s8, d7
 8003026:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	b25b      	sxtb	r3, r3
 800302c:	ee07 3a90 	vmov	s15, r3
 8003030:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003034:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8003120 <HAL_TIM_PeriodElapsedCallback+0x320>
 8003038:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800303c:	eeb7 2bc7 	vcvt.f32.f64	s4, d7
 8003040:	4b4d      	ldr	r3, [pc, #308]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b25b      	sxtb	r3, r3
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800304e:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8003120 <HAL_TIM_PeriodElapsedCallback+0x320>
 8003052:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003056:	eef7 2bc7 	vcvt.f32.f64	s5, d7
 800305a:	4b48      	ldr	r3, [pc, #288]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	b25b      	sxtb	r3, r3
 8003060:	ee07 3a90 	vmov	s15, r3
 8003064:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003068:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8003120 <HAL_TIM_PeriodElapsedCallback+0x320>
 800306c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003070:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003074:	eddf 3a3b 	vldr	s7, [pc, #236]	; 8003164 <HAL_TIM_PeriodElapsedCallback+0x364>
 8003078:	eeb0 3a67 	vmov.f32	s6, s15
 800307c:	eddf 1a39 	vldr	s3, [pc, #228]	; 8003164 <HAL_TIM_PeriodElapsedCallback+0x364>
 8003080:	eeb0 1a44 	vmov.f32	s2, s8
 8003084:	eddf 0a37 	vldr	s1, [pc, #220]	; 8003164 <HAL_TIM_PeriodElapsedCallback+0x364>
 8003088:	eeb0 0a64 	vmov.f32	s0, s9
 800308c:	f7ff f886 	bl	800219c <_Z10Update_ivkffffffff>

		int i;
				for (i = 1 ; i<num ; i++)
 8003090:	2301      	movs	r3, #1
 8003092:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003096:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800309e:	429a      	cmp	r2, r3
 80030a0:	da78      	bge.n	8003194 <HAL_TIM_PeriodElapsedCallback+0x394>
				{
					box_q1[i-1] = box_q1[i];
 80030a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030a6:	3b01      	subs	r3, #1
 80030a8:	4936      	ldr	r1, [pc, #216]	; (8003184 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80030aa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80030ae:	0092      	lsls	r2, r2, #2
 80030b0:	440a      	add	r2, r1
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	4933      	ldr	r1, [pc, #204]	; (8003184 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	601a      	str	r2, [r3, #0]
					box_q2[i-1] = box_q2[i];
 80030bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030c0:	3b01      	subs	r3, #1
 80030c2:	4931      	ldr	r1, [pc, #196]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80030c4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80030c8:	0092      	lsls	r2, r2, #2
 80030ca:	440a      	add	r2, r1
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	492e      	ldr	r1, [pc, #184]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	601a      	str	r2, [r3, #0]
					box_q3[i-1] = box_q3[i];
 80030d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030da:	3b01      	subs	r3, #1
 80030dc:	492b      	ldr	r1, [pc, #172]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80030de:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80030e2:	0092      	lsls	r2, r2, #2
 80030e4:	440a      	add	r2, r1
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	4928      	ldr	r1, [pc, #160]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	601a      	str	r2, [r3, #0]
					box_q4[i-1] = box_q4[i];
 80030f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030f4:	3b01      	subs	r3, #1
 80030f6:	4926      	ldr	r1, [pc, #152]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80030f8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	440a      	add	r2, r1
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	4923      	ldr	r1, [pc, #140]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	601a      	str	r2, [r3, #0]
				for (i = 1 ; i<num ; i++)
 800310a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800310e:	3301      	adds	r3, #1
 8003110:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003114:	e7bf      	b.n	8003096 <HAL_TIM_PeriodElapsedCallback+0x296>
 8003116:	bf00      	nop
 8003118:	00000000 	.word	0x00000000
 800311c:	40a46200 	.word	0x40a46200
 8003120:	00000000 	.word	0x00000000
 8003124:	408f4000 	.word	0x408f4000
 8003128:	24000a88 	.word	0x24000a88
 800312c:	24000228 	.word	0x24000228
 8003130:	2400031c 	.word	0x2400031c
 8003134:	240005b0 	.word	0x240005b0
 8003138:	24000244 	.word	0x24000244
 800313c:	2400031d 	.word	0x2400031d
 8003140:	240006f0 	.word	0x240006f0
 8003144:	bed3d07d 	.word	0xbed3d07d
 8003148:	3dcccccd 	.word	0x3dcccccd
 800314c:	3f76bb99 	.word	0x3f76bb99
 8003150:	bf0cd35b 	.word	0xbf0cd35b
 8003154:	2400036c 	.word	0x2400036c
 8003158:	24000370 	.word	0x24000370
 800315c:	24000260 	.word	0x24000260
 8003160:	240002b0 	.word	0x240002b0
 8003164:	00000000 	.word	0x00000000
 8003168:	24000000 	.word	0x24000000
 800316c:	24000c04 	.word	0x24000c04
 8003170:	240009a4 	.word	0x240009a4
 8003174:	24000322 	.word	0x24000322
 8003178:	24000323 	.word	0x24000323
 800317c:	24000324 	.word	0x24000324
 8003180:	24000028 	.word	0x24000028
 8003184:	240003d0 	.word	0x240003d0
 8003188:	24000448 	.word	0x24000448
 800318c:	240004c0 	.word	0x240004c0
 8003190:	24000538 	.word	0x24000538
				}
				 box_q1[num-1] = w_q1;
 8003194:	4b42      	ldr	r3, [pc, #264]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3b01      	subs	r3, #1
 800319a:	4a42      	ldr	r2, [pc, #264]	; (80032a4 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	4942      	ldr	r1, [pc, #264]	; (80032a8 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	601a      	str	r2, [r3, #0]
				 box_q2[num-1] = dz;
 80031a6:	4b41      	ldr	r3, [pc, #260]	; (80032ac <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	b25a      	sxtb	r2, r3
 80031ac:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	ee07 2a90 	vmov	s15, r2
 80031b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ba:	4a3d      	ldr	r2, [pc, #244]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	edc3 7a00 	vstr	s15, [r3]
				 box_q3[num-1] = w_q3;
 80031c4:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	493a      	ldr	r1, [pc, #232]	; (80032b8 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	601a      	str	r2, [r3, #0]
				 box_q4[num-1] = w_q4;
 80031d6:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3b01      	subs	r3, #1
 80031dc:	4a37      	ldr	r2, [pc, #220]	; (80032bc <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	4937      	ldr	r1, [pc, #220]	; (80032c0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	601a      	str	r2, [r3, #0]

				u_q1 = 0.0;
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
				u_q2 = 0.0;
 80031f0:	4b35      	ldr	r3, [pc, #212]	; (80032c8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
				u_q3 = 0.0;
 80031f8:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
				u_q4 = 0.0;
 8003200:	4b33      	ldr	r3, [pc, #204]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

				for(i = 0; i < num; i++)
 8003208:	2300      	movs	r3, #0
 800320a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003216:	429a      	cmp	r2, r3
 8003218:	da5c      	bge.n	80032d4 <HAL_TIM_PeriodElapsedCallback+0x4d4>
				{
					u_q1 += box_q1[i];
 800321a:	4a23      	ldr	r2, [pc, #140]	; (80032a8 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800321c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	ed93 7a00 	vldr	s14, [r3]
 8003228:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8003234:	edc3 7a00 	vstr	s15, [r3]
					u_q2 += box_q2[i];
 8003238:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 800323a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	ed93 7a00 	vldr	s14, [r3]
 8003246:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003250:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8003252:	edc3 7a00 	vstr	s15, [r3]
					u_q3 += box_q3[i];
 8003256:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8003258:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	ed93 7a00 	vldr	s14, [r3]
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8003270:	edc3 7a00 	vstr	s15, [r3]
					u_q4 += box_q4[i];
 8003274:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8003276:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	ed93 7a00 	vldr	s14, [r3]
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8003284:	edd3 7a00 	vldr	s15, [r3]
 8003288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 800328e:	edc3 7a00 	vstr	s15, [r3]
				for(i = 0; i < num; i++)
 8003292:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003296:	3301      	adds	r3, #1
 8003298:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800329c:	e7b7      	b.n	800320e <HAL_TIM_PeriodElapsedCallback+0x40e>
 800329e:	bf00      	nop
 80032a0:	24000028 	.word	0x24000028
 80032a4:	24000398 	.word	0x24000398
 80032a8:	240003d0 	.word	0x240003d0
 80032ac:	24000324 	.word	0x24000324
 80032b0:	24000448 	.word	0x24000448
 80032b4:	240003a0 	.word	0x240003a0
 80032b8:	240004c0 	.word	0x240004c0
 80032bc:	240003a4 	.word	0x240003a4
 80032c0:	24000538 	.word	0x24000538
 80032c4:	240003a8 	.word	0x240003a8
 80032c8:	240003ac 	.word	0x240003ac
 80032cc:	240003b0 	.word	0x240003b0
 80032d0:	240003b4 	.word	0x240003b4
				}

				stepperJ1.StepperOpenLoopSpeed(u_q1/num*-1.0);
 80032d4:	4bd3      	ldr	r3, [pc, #844]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x824>)
 80032d6:	edd3 6a00 	vldr	s13, [r3]
 80032da:	4bd3      	ldr	r3, [pc, #844]	; (8003628 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032ea:	eef1 7a67 	vneg.f32	s15, s15
 80032ee:	eeb0 0a67 	vmov.f32	s0, s15
 80032f2:	48ce      	ldr	r0, [pc, #824]	; (800362c <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80032f4:	f7fe fa14 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ2.StepperSetFrequency(u_q2/3.0);
 80032f8:	4bcd      	ldr	r3, [pc, #820]	; (8003630 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80032fa:	edd3 7a00 	vldr	s15, [r3]
 80032fe:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003302:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003306:	eeb0 0a47 	vmov.f32	s0, s14
 800330a:	48ca      	ldr	r0, [pc, #808]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x834>)
 800330c:	f7fd ff54 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
				stepperJ3.StepperOpenLoopSpeed(u_q3/num*1.0);
 8003310:	4bc9      	ldr	r3, [pc, #804]	; (8003638 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8003312:	ed93 7a00 	vldr	s14, [r3]
 8003316:	4bc4      	ldr	r3, [pc, #784]	; (8003628 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003322:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003326:	eeb0 0a66 	vmov.f32	s0, s13
 800332a:	48c4      	ldr	r0, [pc, #784]	; (800363c <HAL_TIM_PeriodElapsedCallback+0x83c>)
 800332c:	f7fe f9f8 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ4.StepperOpenLoopSpeed(u_q4/num*-1.0);
 8003330:	4bc3      	ldr	r3, [pc, #780]	; (8003640 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003332:	edd3 6a00 	vldr	s13, [r3]
 8003336:	4bbc      	ldr	r3, [pc, #752]	; (8003628 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003346:	eef1 7a67 	vneg.f32	s15, s15
 800334a:	eeb0 0a67 	vmov.f32	s0, s15
 800334e:	48bd      	ldr	r0, [pc, #756]	; (8003644 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003350:	f7fe f9e6 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>


}


	if (htim == &htim7) {
 8003354:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003358:	4abb      	ldr	r2, [pc, #748]	; (8003648 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800335a:	4293      	cmp	r3, r2
 800335c:	f040 830b 	bne.w	8003976 <HAL_TIM_PeriodElapsedCallback+0xb76>

		encoderJ1.AMT21_Read();
 8003360:	48ba      	ldr	r0, [pc, #744]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8003362:	f7fd fb6c 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003366:	48b9      	ldr	r0, [pc, #740]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8003368:	f7fd fb98 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 800336c:	4603      	mov	r3, r0
 800336e:	461a      	mov	r2, r3
 8003370:	4bb7      	ldr	r3, [pc, #732]	; (8003650 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8003372:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8003374:	4bb6      	ldr	r3, [pc, #728]	; (8003650 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <HAL_TIM_PeriodElapsedCallback+0x58a>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 800337c:	48b3      	ldr	r0, [pc, #716]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x84c>)
 800337e:	f7fd fbf1 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8003382:	4603      	mov	r3, r0
 8003384:	461a      	mov	r2, r3
 8003386:	4bb3      	ldr	r3, [pc, #716]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8003388:	801a      	strh	r2, [r3, #0]
//		if(HALENCJ2OK == HAL_OK){
//			encoderJ2.unwarp();
//			fcb_joint2.Encoder = encoderJ2.getUnwarpValue();
//		}

		encoderJ3.AMT21_Read();
 800338a:	48b3      	ldr	r0, [pc, #716]	; (8003658 <HAL_TIM_PeriodElapsedCallback+0x858>)
 800338c:	f7fd fb57 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003390:	48b1      	ldr	r0, [pc, #708]	; (8003658 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8003392:	f7fd fb83 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	4bb0      	ldr	r3, [pc, #704]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x85c>)
 800339c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 800339e:	4baf      	ldr	r3, [pc, #700]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x85c>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_TIM_PeriodElapsedCallback+0x5b4>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
 80033a6:	48ac      	ldr	r0, [pc, #688]	; (8003658 <HAL_TIM_PeriodElapsedCallback+0x858>)
 80033a8:	f7fd fbdc 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 80033ac:	4603      	mov	r3, r0
 80033ae:	461a      	mov	r2, r3
 80033b0:	4bab      	ldr	r3, [pc, #684]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80033b2:	801a      	strh	r2, [r3, #0]
//		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
//		if (HALENCJ4OK == HAL_OK) {
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() ;
//		}

		float t2 = t * t;
 80033b4:	4bab      	ldr	r3, [pc, #684]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 80033b6:	ed93 7a00 	vldr	s14, [r3]
 80033ba:	4baa      	ldr	r3, [pc, #680]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 80033bc:	edd3 7a00 	vldr	s15, [r3]
 80033c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
		float t3 = t * t * t;
 80033c8:	4ba6      	ldr	r3, [pc, #664]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 80033ca:	ed93 7a00 	vldr	s14, [r3]
 80033ce:	4ba5      	ldr	r3, [pc, #660]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033d8:	4ba2      	ldr	r3, [pc, #648]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		float t4 = t * t * t * t;
 80033e6:	4b9f      	ldr	r3, [pc, #636]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 80033e8:	ed93 7a00 	vldr	s14, [r3]
 80033ec:	4b9d      	ldr	r3, [pc, #628]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033f6:	4b9b      	ldr	r3, [pc, #620]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 80033f8:	edd3 7a00 	vldr	s15, [r3]
 80033fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003400:	4b98      	ldr	r3, [pc, #608]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003402:	edd3 7a00 	vldr	s15, [r3]
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		float t5 = t * t * t * t * t;
 800340e:	4b95      	ldr	r3, [pc, #596]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003410:	ed93 7a00 	vldr	s14, [r3]
 8003414:	4b93      	ldr	r3, [pc, #588]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003416:	edd3 7a00 	vldr	s15, [r3]
 800341a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800341e:	4b91      	ldr	r3, [pc, #580]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003420:	edd3 7a00 	vldr	s15, [r3]
 8003424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003428:	4b8e      	ldr	r3, [pc, #568]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003432:	4b8c      	ldr	r3, [pc, #560]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003434:	edd3 7a00 	vldr	s15, [r3]
 8003438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
//			v = fcb_joint1.C1 + (2.0*fcb_joint1.C2*t) + (3.0*fcb_joint1.C3*t2) + (4.0*fcb_joint1.C4*t3) + (5.0*fcb_joint1.C5*t4);
//			p = (fcb_joint1.C0 + (fcb_joint1.C1*t) + (fcb_joint1.C2*t2) + (fcb_joint1.C3*t3) + (fcb_joint1.C4*t4) + (fcb_joint1.C5*t5));
//			a = ((2.0*fcb_joint1.C2) + (6.0*fcb_joint1.C3*t) + (12.0*fcb_joint1.C4*t2) + (20.0*fcb_joint1.C5*t3));
//		}

		v = fcb_joint3.C1 + (2.0*fcb_joint3.C2*t) + (3.0*fcb_joint3.C3*t2) + (4.0*fcb_joint3.C4*t3) + (5.0*fcb_joint3.C5*t4);
 8003440:	4b87      	ldr	r3, [pc, #540]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8003442:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003446:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800344a:	4b85      	ldr	r3, [pc, #532]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 800344c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003450:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003454:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003458:	4b82      	ldr	r3, [pc, #520]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 800345a:	edd3 7a00 	vldr	s15, [r3]
 800345e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003462:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003466:	ee36 6b07 	vadd.f64	d6, d6, d7
 800346a:	4b7d      	ldr	r3, [pc, #500]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 800346c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003470:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003474:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003478:	ee27 5b05 	vmul.f64	d5, d7, d5
 800347c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003480:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003484:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003488:	ee36 6b07 	vadd.f64	d6, d6, d7
 800348c:	4b74      	ldr	r3, [pc, #464]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 800348e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003492:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003496:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800349a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800349e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80034a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80034aa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80034ae:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80034b0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80034b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034b8:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80034bc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80034c0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80034c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034c8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80034cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80034d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80034d4:	4b64      	ldr	r3, [pc, #400]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x868>)
 80034d6:	edc3 7a00 	vstr	s15, [r3]
		p = (fcb_joint3.C0 + (fcb_joint3.C1*t) + (fcb_joint3.C2*t2) + (fcb_joint3.C3*t3) + (fcb_joint3.C4*t4) + (fcb_joint3.C5*t5));
 80034da:	4b61      	ldr	r3, [pc, #388]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80034dc:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80034e0:	4b5f      	ldr	r3, [pc, #380]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80034e2:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 80034e6:	4b5f      	ldr	r3, [pc, #380]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f4:	4b5a      	ldr	r3, [pc, #360]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80034f6:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 80034fa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80034fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003502:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003506:	4b56      	ldr	r3, [pc, #344]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8003508:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 800350c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003514:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003518:	4b51      	ldr	r3, [pc, #324]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 800351a:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800351e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800352a:	4b4d      	ldr	r3, [pc, #308]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 800352c:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8003530:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353c:	4b4b      	ldr	r3, [pc, #300]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x86c>)
 800353e:	edc3 7a00 	vstr	s15, [r3]
		a = ((2.0*fcb_joint3.C2) + (6.0*fcb_joint3.C3*t) + (12.0*fcb_joint3.C4*t2) + (20.0*fcb_joint3.C5*t3));
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8003544:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003548:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800354c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003550:	4b43      	ldr	r3, [pc, #268]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8003552:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003556:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800355a:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800355e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003562:	4b40      	ldr	r3, [pc, #256]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800356c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003570:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003574:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8003576:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800357a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800357e:	eeb2 5b08 	vmov.f64	d5, #40	; 0x41400000  12.0
 8003582:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003586:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800358a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800358e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003592:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003596:	4b32      	ldr	r3, [pc, #200]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8003598:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800359c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035a0:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 80035a4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80035a8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80035ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035b0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80035b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80035b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80035bc:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x870>)
 80035be:	edc3 7a00 	vstr	s15, [r3]
//		findchessbot_joint_state = find_IK(debug_pos_x, debug_pos_y, 0, 0);
//		Update_ivk(fcb_joint1.Encoder / 2609.0 , 0, fcb_joint3.Encoder / 2609.0, 0, idx, idy, 0.0, 0.0);
// Fuck you


		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x854>)
 80035c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80035c8:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x854>)
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	ee07 3a90 	vmov	s15, r3
 80035d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035da:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x854>)
 80035dc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 80035e0:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80035e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80035e6:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	ee07 3a90 	vmov	s15, r3
 80035f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80035fa:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8003600:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8003606:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800360a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800360e:	4b11      	ldr	r3, [pc, #68]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8003610:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8003614:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8003616:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800361a:	4b11      	ldr	r3, [pc, #68]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x860>)
 800361c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003620:	e028      	b.n	8003674 <HAL_TIM_PeriodElapsedCallback+0x874>
 8003622:	bf00      	nop
 8003624:	240003a8 	.word	0x240003a8
 8003628:	24000028 	.word	0x24000028
 800362c:	24000260 	.word	0x24000260
 8003630:	240003ac 	.word	0x240003ac
 8003634:	24000288 	.word	0x24000288
 8003638:	240003b0 	.word	0x240003b0
 800363c:	240002b0 	.word	0x240002b0
 8003640:	240003b4 	.word	0x240003b4
 8003644:	240002d8 	.word	0x240002d8
 8003648:	24000c04 	.word	0x24000c04
 800364c:	24000228 	.word	0x24000228
 8003650:	2400031c 	.word	0x2400031c
 8003654:	240005b0 	.word	0x240005b0
 8003658:	24000244 	.word	0x24000244
 800365c:	2400031d 	.word	0x2400031d
 8003660:	240006f0 	.word	0x240006f0
 8003664:	24000378 	.word	0x24000378
 8003668:	24000830 	.word	0x24000830
 800366c:	24000834 	.word	0x24000834
 8003670:	24000838 	.word	0x24000838
 8003674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003678:	4bc7      	ldr	r3, [pc, #796]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800367a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

		fcb_joint1 = KalmanFilter(fcb_joint1.Encoder / 2609.0, fcb_joint1);
 800367e:	4bc7      	ldr	r3, [pc, #796]	; (800399c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	b21b      	sxth	r3, r3
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800368c:	ed9f 5bbe 	vldr	d5, [pc, #760]	; 8003988 <HAL_TIM_PeriodElapsedCallback+0xb88>
 8003690:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003694:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 8003698:	4ec0      	ldr	r6, [pc, #768]	; (800399c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 800369a:	463d      	mov	r5, r7
 800369c:	4cbf      	ldr	r4, [pc, #764]	; (800399c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 800369e:	4668      	mov	r0, sp
 80036a0:	f104 030c 	add.w	r3, r4, #12
 80036a4:	2294      	movs	r2, #148	; 0x94
 80036a6:	4619      	mov	r1, r3
 80036a8:	f00c fc84 	bl	800ffb4 <memcpy>
 80036ac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80036b0:	eeb0 0a48 	vmov.f32	s0, s16
 80036b4:	4628      	mov	r0, r5
 80036b6:	f7fe ff83 	bl	80025c0 <_Z12KalmanFilterf11robot_joint>
 80036ba:	4630      	mov	r0, r6
 80036bc:	463b      	mov	r3, r7
 80036be:	22a0      	movs	r2, #160	; 0xa0
 80036c0:	4619      	mov	r1, r3
 80036c2:	f00c fc77 	bl	800ffb4 <memcpy>
		fcb_joint3 = KalmanFilter(fcb_joint3.Encoder/ 2609.0 ,fcb_joint3);
 80036c6:	4bb4      	ldr	r3, [pc, #720]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b21b      	sxth	r3, r3
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80036d4:	ed9f 5bac 	vldr	d5, [pc, #688]	; 8003988 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80036d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80036dc:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 80036e0:	4ead      	ldr	r6, [pc, #692]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80036e2:	463d      	mov	r5, r7
 80036e4:	4cac      	ldr	r4, [pc, #688]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80036e6:	4668      	mov	r0, sp
 80036e8:	f104 030c 	add.w	r3, r4, #12
 80036ec:	2294      	movs	r2, #148	; 0x94
 80036ee:	4619      	mov	r1, r3
 80036f0:	f00c fc60 	bl	800ffb4 <memcpy>
 80036f4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80036f8:	eeb0 0a48 	vmov.f32	s0, s16
 80036fc:	4628      	mov	r0, r5
 80036fe:	f7fe ff5f 	bl	80025c0 <_Z12KalmanFilterf11robot_joint>
 8003702:	4630      	mov	r0, r6
 8003704:	463b      	mov	r3, r7
 8003706:	22a0      	movs	r2, #160	; 0xa0
 8003708:	4619      	mov	r1, r3
 800370a:	f00c fc53 	bl	800ffb4 <memcpy>
//		fcb_joint3.Output_Stepper_Frequency = (fcb_joint3.Kp_p * fcb_joint3.Error_p);

//		fcb_joint1.Output_Stepper_Frequency = fcb_joint1.Goal_Position;
//		fcb_joint3.Output_Stepper_Frequency = fcb_joint3.Goal_Position;

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 800370e:	4ba3      	ldr	r3, [pc, #652]	; (800399c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8003710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003712:	4aa2      	ldr	r2, [pc, #648]	; (800399c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8003714:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8003716:	4ba0      	ldr	r3, [pc, #640]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371a:	4a9f      	ldr	r2, [pc, #636]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800371c:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint1.Old_p = fcb_joint1.Encoder;
 800371e:	4b9f      	ldr	r3, [pc, #636]	; (800399c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	b21b      	sxth	r3, r3
 8003724:	ee07 3a90 	vmov	s15, r3
 8003728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372c:	4b9b      	ldr	r3, [pc, #620]	; (800399c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 800372e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 8003732:	4b99      	ldr	r3, [pc, #612]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b21b      	sxth	r3, r3
 8003738:	ee07 3a90 	vmov	s15, r3
 800373c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003740:	4b95      	ldr	r3, [pc, #596]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003742:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c



//		stepperJ1.StepperOpenLoopSpeed(-1.0 * w_q1);
//		stepperJ3.StepperOpenLoopSpeed(w_q3);
		printw_q1 = v * 1000;
 8003746:	4b96      	ldr	r3, [pc, #600]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80039a4 <HAL_TIM_PeriodElapsedCallback+0xba4>
 8003750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003754:	4b94      	ldr	r3, [pc, #592]	; (80039a8 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 8003756:	edc3 7a00 	vstr	s15, [r3]
		printw_q2 = 0 * 1000;
 800375a:	4b94      	ldr	r3, [pc, #592]	; (80039ac <HAL_TIM_PeriodElapsedCallback+0xbac>)
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
		printw_q3 = v * 2000;
 8003762:	4b8f      	ldr	r3, [pc, #572]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8003764:	edd3 7a00 	vldr	s15, [r3]
 8003768:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80039b0 <HAL_TIM_PeriodElapsedCallback+0xbb0>
 800376c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003770:	4b90      	ldr	r3, [pc, #576]	; (80039b4 <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 8003772:	edc3 7a00 	vstr	s15, [r3]
		printw_q4 = v * 1000;
 8003776:	4b8a      	ldr	r3, [pc, #552]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8003778:	edd3 7a00 	vldr	s15, [r3]
 800377c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80039a4 <HAL_TIM_PeriodElapsedCallback+0xba4>
 8003780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003784:	4b8c      	ldr	r3, [pc, #560]	; (80039b8 <HAL_TIM_PeriodElapsedCallback+0xbb8>)
 8003786:	edc3 7a00 	vstr	s15, [r3]

		printp_q3 = p * 1000.0;
 800378a:	4b8c      	ldr	r3, [pc, #560]	; (80039bc <HAL_TIM_PeriodElapsedCallback+0xbbc>)
 800378c:	edd3 7a00 	vldr	s15, [r3]
 8003790:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80039a4 <HAL_TIM_PeriodElapsedCallback+0xba4>
 8003794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003798:	4b89      	ldr	r3, [pc, #548]	; (80039c0 <HAL_TIM_PeriodElapsedCallback+0xbc0>)
 800379a:	edc3 7a00 	vstr	s15, [r3]
		printa_q3 = a * 1000.0;
 800379e:	4b89      	ldr	r3, [pc, #548]	; (80039c4 <HAL_TIM_PeriodElapsedCallback+0xbc4>)
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80039a4 <HAL_TIM_PeriodElapsedCallback+0xba4>
 80037a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ac:	4b86      	ldr	r3, [pc, #536]	; (80039c8 <HAL_TIM_PeriodElapsedCallback+0xbc8>)
 80037ae:	edc3 7a00 	vstr	s15, [r3]
//		stepperJ1.StepperOpenLoopSpeed(v);
//		stepperJ2.StepperOpenLoopSpeed(0);
		stepperJ3.StepperOpenLoopSpeed(v);
 80037b2:	4b7b      	ldr	r3, [pc, #492]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 80037b4:	edd3 7a00 	vldr	s15, [r3]
 80037b8:	eeb0 0a67 	vmov.f32	s0, s15
 80037bc:	4883      	ldr	r0, [pc, #524]	; (80039cc <HAL_TIM_PeriodElapsedCallback+0xbcc>)
 80037be:	f7fd ffaf 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
//		stepperJ4.StepperOpenLoopSpeed(v);

//		stepperJ1.StepperOpenLoopSpeed
		debug_j1_x11 = fcb_joint1.X11 * 1000.0;
 80037c2:	4b76      	ldr	r3, [pc, #472]	; (800399c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80037c4:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80037c8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80039a4 <HAL_TIM_PeriodElapsedCallback+0xba4>
 80037cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037d0:	4b7f      	ldr	r3, [pc, #508]	; (80039d0 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 80037d2:	edc3 7a00 	vstr	s15, [r3]
		debug_j3_x11 = fcb_joint3.X11 * 1000.0;
 80037d6:	4b70      	ldr	r3, [pc, #448]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80037d8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80037dc:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80039a4 <HAL_TIM_PeriodElapsedCallback+0xba4>
 80037e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e4:	4b7b      	ldr	r3, [pc, #492]	; (80039d4 <HAL_TIM_PeriodElapsedCallback+0xbd4>)
 80037e6:	edc3 7a00 	vstr	s15, [r3]
		debug_j1_x21 = fcb_joint1.X21 * 1000.0;
 80037ea:	4b6c      	ldr	r3, [pc, #432]	; (800399c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80037ec:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80037f0:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80039a4 <HAL_TIM_PeriodElapsedCallback+0xba4>
 80037f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037f8:	4b77      	ldr	r3, [pc, #476]	; (80039d8 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 80037fa:	edc3 7a00 	vstr	s15, [r3]
		debug_j3_x21 = fcb_joint3.X21 * 1000.0;
 80037fe:	4b66      	ldr	r3, [pc, #408]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003800:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003804:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80039a4 <HAL_TIM_PeriodElapsedCallback+0xba4>
 8003808:	ee67 7a87 	vmul.f32	s15, s15, s14
 800380c:	4b73      	ldr	r3, [pc, #460]	; (80039dc <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 800380e:	edc3 7a00 	vstr	s15, [r3]
		debug_wq1 = w_q1 * 1000.0;
 8003812:	4b73      	ldr	r3, [pc, #460]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80039a4 <HAL_TIM_PeriodElapsedCallback+0xba4>
 800381c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003820:	4b70      	ldr	r3, [pc, #448]	; (80039e4 <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 8003822:	edc3 7a00 	vstr	s15, [r3]
		debug_wq3 = w_q3 * 1000.0;
 8003826:	4b70      	ldr	r3, [pc, #448]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80039a4 <HAL_TIM_PeriodElapsedCallback+0xba4>
 8003830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003834:	4b6d      	ldr	r3, [pc, #436]	; (80039ec <HAL_TIM_PeriodElapsedCallback+0xbec>)
 8003836:	edc3 7a00 	vstr	s15, [r3]

		t = t + (sample_time_1000);
 800383a:	4b6d      	ldr	r3, [pc, #436]	; (80039f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800383c:	ed93 7a00 	vldr	s14, [r3]
 8003840:	4b6c      	ldr	r3, [pc, #432]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 8003842:	edd3 7a00 	vldr	s15, [r3]
 8003846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800384a:	4b69      	ldr	r3, [pc, #420]	; (80039f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800384c:	edc3 7a00 	vstr	s15, [r3]


		if (t >= fcb_joint3.T) {
 8003850:	4b51      	ldr	r3, [pc, #324]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003852:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8003856:	4b66      	ldr	r3, [pc, #408]	; (80039f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8003858:	edd3 7a00 	vldr	s15, [r3]
 800385c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003864:	bf94      	ite	ls
 8003866:	2301      	movls	r3, #1
 8003868:	2300      	movhi	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8082 	beq.w	8003976 <HAL_TIM_PeriodElapsedCallback+0xb76>
			t = 0.0;
 8003872:	4b5f      	ldr	r3, [pc, #380]	; (80039f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
			direction_traj ^= 1;
 800387a:	4b5f      	ldr	r3, [pc, #380]	; (80039f8 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f083 0301 	eor.w	r3, r3, #1
 8003882:	4a5d      	ldr	r2, [pc, #372]	; (80039f8 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 8003884:	6013      	str	r3, [r2, #0]
//			HAL_TIM_Base_Stop_IT(&htim7);
			if (direction_traj == 0)
 8003886:	4b5c      	ldr	r3, [pc, #368]	; (80039f8 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf0c      	ite	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	2300      	movne	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d037      	beq.n	8003908 <HAL_TIM_PeriodElapsedCallback+0xb08>
			{
				fcb_joint3 = Update_quintic_Coff(6.0, (fcb_joint3.Encoder / 2609.0), (fcb_joint3.Encoder / 2609.0) - 1.57, 0.0, 0.0, 0.0, 0.0);
 8003898:	4b3f      	ldr	r3, [pc, #252]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	b21b      	sxth	r3, r3
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80038a6:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8003988 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80038aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038ae:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 80038b2:	4b39      	ldr	r3, [pc, #228]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b21b      	sxth	r3, r3
 80038b8:	ee07 3a90 	vmov	s15, r3
 80038bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80038c0:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8003988 <HAL_TIM_PeriodElapsedCallback+0xb88>
 80038c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038c8:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8003990 <HAL_TIM_PeriodElapsedCallback+0xb90>
 80038cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80038d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038d4:	4c30      	ldr	r4, [pc, #192]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80038d6:	463b      	mov	r3, r7
 80038d8:	ed9f 3a48 	vldr	s6, [pc, #288]	; 80039fc <HAL_TIM_PeriodElapsedCallback+0xbfc>
 80038dc:	eddf 2a47 	vldr	s5, [pc, #284]	; 80039fc <HAL_TIM_PeriodElapsedCallback+0xbfc>
 80038e0:	ed9f 2a46 	vldr	s4, [pc, #280]	; 80039fc <HAL_TIM_PeriodElapsedCallback+0xbfc>
 80038e4:	eddf 1a45 	vldr	s3, [pc, #276]	; 80039fc <HAL_TIM_PeriodElapsedCallback+0xbfc>
 80038e8:	eeb0 1a67 	vmov.f32	s2, s15
 80038ec:	eef0 0a64 	vmov.f32	s1, s9
 80038f0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fe fd3d 	bl	8002374 <_Z19Update_quintic_Cofffffffff>
 80038fa:	4620      	mov	r0, r4
 80038fc:	463b      	mov	r3, r7
 80038fe:	22a0      	movs	r2, #160	; 0xa0
 8003900:	4619      	mov	r1, r3
 8003902:	f00c fb57 	bl	800ffb4 <memcpy>
//					chess_board_ang = 0.0;
//					direction_traj ^= 1;
//				}

	}
}
 8003906:	e036      	b.n	8003976 <HAL_TIM_PeriodElapsedCallback+0xb76>
				fcb_joint3 = Update_quintic_Coff(6.0, (fcb_joint3.Encoder / 2609.0), (fcb_joint3.Encoder / 2609.0) + 1.57, 0.0, 0.0, 0.0, 0.0);
 8003908:	4b23      	ldr	r3, [pc, #140]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	b21b      	sxth	r3, r3
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003916:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8003988 <HAL_TIM_PeriodElapsedCallback+0xb88>
 800391a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800391e:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b21b      	sxth	r3, r3
 8003928:	ee07 3a90 	vmov	s15, r3
 800392c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003930:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8003988 <HAL_TIM_PeriodElapsedCallback+0xb88>
 8003934:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003938:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8003990 <HAL_TIM_PeriodElapsedCallback+0xb90>
 800393c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003940:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003944:	4c14      	ldr	r4, [pc, #80]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003946:	463b      	mov	r3, r7
 8003948:	ed9f 3a2c 	vldr	s6, [pc, #176]	; 80039fc <HAL_TIM_PeriodElapsedCallback+0xbfc>
 800394c:	eddf 2a2b 	vldr	s5, [pc, #172]	; 80039fc <HAL_TIM_PeriodElapsedCallback+0xbfc>
 8003950:	ed9f 2a2a 	vldr	s4, [pc, #168]	; 80039fc <HAL_TIM_PeriodElapsedCallback+0xbfc>
 8003954:	eddf 1a29 	vldr	s3, [pc, #164]	; 80039fc <HAL_TIM_PeriodElapsedCallback+0xbfc>
 8003958:	eeb0 1a67 	vmov.f32	s2, s15
 800395c:	eef0 0a64 	vmov.f32	s1, s9
 8003960:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe fd05 	bl	8002374 <_Z19Update_quintic_Cofffffffff>
 800396a:	4620      	mov	r0, r4
 800396c:	463b      	mov	r3, r7
 800396e:	22a0      	movs	r2, #160	; 0xa0
 8003970:	4619      	mov	r1, r3
 8003972:	f00c fb1f 	bl	800ffb4 <memcpy>
}
 8003976:	bf00      	nop
 8003978:	37d4      	adds	r7, #212	; 0xd4
 800397a:	46bd      	mov	sp, r7
 800397c:	ecbd 8b02 	vpop	{d8}
 8003980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003982:	bf00      	nop
 8003984:	f3af 8000 	nop.w
 8003988:	00000000 	.word	0x00000000
 800398c:	40a46200 	.word	0x40a46200
 8003990:	51eb851f 	.word	0x51eb851f
 8003994:	3ff91eb8 	.word	0x3ff91eb8
 8003998:	240006f0 	.word	0x240006f0
 800399c:	240005b0 	.word	0x240005b0
 80039a0:	24000830 	.word	0x24000830
 80039a4:	447a0000 	.word	0x447a0000
 80039a8:	2400083c 	.word	0x2400083c
 80039ac:	24000840 	.word	0x24000840
 80039b0:	44fa0000 	.word	0x44fa0000
 80039b4:	24000844 	.word	0x24000844
 80039b8:	24000848 	.word	0x24000848
 80039bc:	24000834 	.word	0x24000834
 80039c0:	2400084c 	.word	0x2400084c
 80039c4:	24000838 	.word	0x24000838
 80039c8:	24000850 	.word	0x24000850
 80039cc:	240002b0 	.word	0x240002b0
 80039d0:	240003b8 	.word	0x240003b8
 80039d4:	240003bc 	.word	0x240003bc
 80039d8:	240003c0 	.word	0x240003c0
 80039dc:	240003c4 	.word	0x240003c4
 80039e0:	24000398 	.word	0x24000398
 80039e4:	240003c8 	.word	0x240003c8
 80039e8:	240003a0 	.word	0x240003a0
 80039ec:	240003cc 	.word	0x240003cc
 80039f0:	24000378 	.word	0x24000378
 80039f4:	24000020 	.word	0x24000020
 80039f8:	24000374 	.word	0x24000374
 80039fc:	00000000 	.word	0x00000000

08003a00 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b0a9      	sub	sp, #164	; 0xa4
 8003a04:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003a06:	f002 f859 	bl	8005abc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003a0a:	f000 f9d9 	bl	8003dc0 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003a0e:	f7fd ff53 	bl	80018b8 <MX_GPIO_Init>
	MX_DMA_Init();
 8003a12:	f7fd ff11 	bl	8001838 <MX_DMA_Init>
	MX_USART3_UART_Init();
 8003a16:	f001 fda5 	bl	8005564 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8003a1a:	f000 ffa9 	bl	8004970 <MX_TIM2_Init>
	MX_UART4_Init();
 8003a1e:	f001 fcff 	bl	8005420 <MX_UART4_Init>
	MX_TIM4_Init();
 8003a22:	f001 f895 	bl	8004b50 <MX_TIM4_Init>
	MX_SPI3_Init();
 8003a26:	f000 fbf7 	bl	8004218 <MX_SPI3_Init>
	MX_TIM1_Init();
 8003a2a:	f000 fef3 	bl	8004814 <MX_TIM1_Init>
	MX_TIM3_Init();
 8003a2e:	f001 f817 	bl	8004a60 <MX_TIM3_Init>
	MX_TIM5_Init();
 8003a32:	f001 f905 	bl	8004c40 <MX_TIM5_Init>
	MX_TIM15_Init();
 8003a36:	f001 fa3f 	bl	8004eb8 <MX_TIM15_Init>
	MX_CRC_Init();
 8003a3a:	f7fd fead 	bl	8001798 <MX_CRC_Init>
	MX_UART7_Init();
 8003a3e:	f001 fd43 	bl	80054c8 <MX_UART7_Init>
	MX_TIM6_Init();
 8003a42:	f001 f94b 	bl	8004cdc <MX_TIM6_Init>
	MX_TIM7_Init();
 8003a46:	f001 f97f 	bl	8004d48 <MX_TIM7_Init>
	MX_TIM12_Init();
 8003a4a:	f001 f9b3 	bl	8004db4 <MX_TIM12_Init>
	MX_TIM13_Init();
 8003a4e:	f001 f9eb 	bl	8004e28 <MX_TIM13_Init>
	MX_TIM14_Init();
 8003a52:	f001 fa0d 	bl	8004e70 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8003a56:	2201      	movs	r2, #1
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4861      	ldr	r0, [pc, #388]	; (8003be0 <main+0x1e0>)
 8003a5c:	f005 fbf4 	bl	8009248 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003a60:	2201      	movs	r2, #1
 8003a62:	2102      	movs	r1, #2
 8003a64:	485f      	ldr	r0, [pc, #380]	; (8003be4 <main+0x1e4>)
 8003a66:	f005 fbef 	bl	8009248 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a70:	485b      	ldr	r0, [pc, #364]	; (8003be0 <main+0x1e0>)
 8003a72:	f005 fbe9 	bl	8009248 <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8003a76:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8003be8 <main+0x1e8>
 8003a7a:	485c      	ldr	r0, [pc, #368]	; (8003bec <main+0x1ec>)
 8003a7c:	f7fd fb9c 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 8003a80:	2108      	movs	r1, #8
 8003a82:	485a      	ldr	r0, [pc, #360]	; (8003bec <main+0x1ec>)
 8003a84:	f7fd fe34 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 8003a88:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8003bf0 <main+0x1f0>
 8003a8c:	4857      	ldr	r0, [pc, #348]	; (8003bec <main+0x1ec>)
 8003a8e:	f7fd fe0b 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8003a92:	4856      	ldr	r0, [pc, #344]	; (8003bec <main+0x1ec>)
 8003a94:	f7fd fb7f 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 8003a98:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8003be8 <main+0x1e8>
 8003a9c:	4855      	ldr	r0, [pc, #340]	; (8003bf4 <main+0x1f4>)
 8003a9e:	f7fd fb8b 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(8);
 8003aa2:	2108      	movs	r1, #8
 8003aa4:	4853      	ldr	r0, [pc, #332]	; (8003bf4 <main+0x1f4>)
 8003aa6:	f7fd fe23 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 8003aaa:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003aae:	4851      	ldr	r0, [pc, #324]	; (8003bf4 <main+0x1f4>)
 8003ab0:	f7fd fdfa 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 8003ab4:	484f      	ldr	r0, [pc, #316]	; (8003bf4 <main+0x1f4>)
 8003ab6:	f7fd fb6e 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 8003aba:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8003be8 <main+0x1e8>
 8003abe:	484e      	ldr	r0, [pc, #312]	; (8003bf8 <main+0x1f8>)
 8003ac0:	f7fd fb7a 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8);
 8003ac4:	2108      	movs	r1, #8
 8003ac6:	484c      	ldr	r0, [pc, #304]	; (8003bf8 <main+0x1f8>)
 8003ac8:	f7fd fe12 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 8003acc:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8003ad0:	4849      	ldr	r0, [pc, #292]	; (8003bf8 <main+0x1f8>)
 8003ad2:	f7fd fde9 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8003ad6:	4848      	ldr	r0, [pc, #288]	; (8003bf8 <main+0x1f8>)
 8003ad8:	f7fd fb5d 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 8003adc:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8003be8 <main+0x1e8>
 8003ae0:	4846      	ldr	r0, [pc, #280]	; (8003bfc <main+0x1fc>)
 8003ae2:	f7fd fb69 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(8);
 8003ae6:	2108      	movs	r1, #8
 8003ae8:	4844      	ldr	r0, [pc, #272]	; (8003bfc <main+0x1fc>)
 8003aea:	f7fd fe01 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 8003aee:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003af2:	4842      	ldr	r0, [pc, #264]	; (8003bfc <main+0x1fc>)
 8003af4:	f7fd fdd8 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 8003af8:	4840      	ldr	r0, [pc, #256]	; (8003bfc <main+0x1fc>)
 8003afa:	f7fd fb4c 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	//	stepperJ4.StepperSetMicrostep(1);
	//	stepperJ4.StepperSetRatio(1);

	gripper.setDegreeGripperClose(65);
 8003afe:	2141      	movs	r1, #65	; 0x41
 8003b00:	483f      	ldr	r0, [pc, #252]	; (8003c00 <main+0x200>)
 8003b02:	f7fd fa90 	bl	8001026 <_ZN10ServoMotor21setDegreeGripperCloseEl>
	gripper.setDegreeGripperOpen(0);
 8003b06:	2100      	movs	r1, #0
 8003b08:	483d      	ldr	r0, [pc, #244]	; (8003c00 <main+0x200>)
 8003b0a:	f7fd fa7b 	bl	8001004 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	//	gripper.ServoRotateDegree(90);
	gripper.ServoEnable();
 8003b0e:	483c      	ldr	r0, [pc, #240]	; (8003c00 <main+0x200>)
 8003b10:	f7fd f8a4 	bl	8000c5c <_ZN10ServoMotor11ServoEnableEv>
	HAL_Delay(3000);
 8003b14:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003b18:	f002 f862 	bl	8005be0 <HAL_Delay>
	#endif

		HAL_TIM_Base_Start_IT(&htim5); // Jog 		100 Hz
 8003b1c:	4839      	ldr	r0, [pc, #228]	; (8003c04 <main+0x204>)
 8003b1e:	f008 f893 	bl	800bc48 <HAL_TIM_Base_Start_IT>
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
	//	HAL_TIM_Base_Start_IT(&htim14); // 			500Hz

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8003b22:	2214      	movs	r2, #20
 8003b24:	4938      	ldr	r1, [pc, #224]	; (8003c08 <main+0x208>)
 8003b26:	4839      	ldr	r0, [pc, #228]	; (8003c0c <main+0x20c>)
 8003b28:	f00b fc63 	bl	800f3f2 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003b2c:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <main+0x210>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a38      	ldr	r2, [pc, #224]	; (8003c14 <main+0x214>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d04a      	beq.n	8003bcc <main+0x1cc>
 8003b36:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <main+0x210>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a37      	ldr	r2, [pc, #220]	; (8003c18 <main+0x218>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d045      	beq.n	8003bcc <main+0x1cc>
 8003b40:	4b33      	ldr	r3, [pc, #204]	; (8003c10 <main+0x210>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a35      	ldr	r2, [pc, #212]	; (8003c1c <main+0x21c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d040      	beq.n	8003bcc <main+0x1cc>
 8003b4a:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <main+0x210>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a34      	ldr	r2, [pc, #208]	; (8003c20 <main+0x220>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d03b      	beq.n	8003bcc <main+0x1cc>
 8003b54:	4b2e      	ldr	r3, [pc, #184]	; (8003c10 <main+0x210>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a32      	ldr	r2, [pc, #200]	; (8003c24 <main+0x224>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d036      	beq.n	8003bcc <main+0x1cc>
 8003b5e:	4b2c      	ldr	r3, [pc, #176]	; (8003c10 <main+0x210>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a31      	ldr	r2, [pc, #196]	; (8003c28 <main+0x228>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d031      	beq.n	8003bcc <main+0x1cc>
 8003b68:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <main+0x210>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a2f      	ldr	r2, [pc, #188]	; (8003c2c <main+0x22c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02c      	beq.n	8003bcc <main+0x1cc>
 8003b72:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <main+0x210>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2e      	ldr	r2, [pc, #184]	; (8003c30 <main+0x230>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d027      	beq.n	8003bcc <main+0x1cc>
 8003b7c:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <main+0x210>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <main+0x234>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d022      	beq.n	8003bcc <main+0x1cc>
 8003b86:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <main+0x210>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a2b      	ldr	r2, [pc, #172]	; (8003c38 <main+0x238>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d01d      	beq.n	8003bcc <main+0x1cc>
 8003b90:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <main+0x210>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a29      	ldr	r2, [pc, #164]	; (8003c3c <main+0x23c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d018      	beq.n	8003bcc <main+0x1cc>
 8003b9a:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <main+0x210>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a28      	ldr	r2, [pc, #160]	; (8003c40 <main+0x240>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <main+0x1cc>
 8003ba4:	4b1a      	ldr	r3, [pc, #104]	; (8003c10 <main+0x210>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a26      	ldr	r2, [pc, #152]	; (8003c44 <main+0x244>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00e      	beq.n	8003bcc <main+0x1cc>
 8003bae:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <main+0x210>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a25      	ldr	r2, [pc, #148]	; (8003c48 <main+0x248>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <main+0x1cc>
 8003bb8:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <main+0x210>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a23      	ldr	r2, [pc, #140]	; (8003c4c <main+0x24c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <main+0x1cc>
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <main+0x210>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a22      	ldr	r2, [pc, #136]	; (8003c50 <main+0x250>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d143      	bne.n	8003c54 <main+0x254>
 8003bcc:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <main+0x210>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <main+0x210>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0208 	bic.w	r2, r2, #8
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e042      	b.n	8003c64 <main+0x264>
 8003bde:	bf00      	nop
 8003be0:	58020400 	.word	0x58020400
 8003be4:	58021000 	.word	0x58021000
 8003be8:	00000000 	.word	0x00000000
 8003bec:	24000260 	.word	0x24000260
 8003bf0:	42280000 	.word	0x42280000
 8003bf4:	24000288 	.word	0x24000288
 8003bf8:	240002b0 	.word	0x240002b0
 8003bfc:	240002d8 	.word	0x240002d8
 8003c00:	24000300 	.word	0x24000300
 8003c04:	240009a4 	.word	0x240009a4
 8003c08:	24000354 	.word	0x24000354
 8003c0c:	24000dd0 	.word	0x24000dd0
 8003c10:	24000d58 	.word	0x24000d58
 8003c14:	40020010 	.word	0x40020010
 8003c18:	40020028 	.word	0x40020028
 8003c1c:	40020040 	.word	0x40020040
 8003c20:	40020058 	.word	0x40020058
 8003c24:	40020070 	.word	0x40020070
 8003c28:	40020088 	.word	0x40020088
 8003c2c:	400200a0 	.word	0x400200a0
 8003c30:	400200b8 	.word	0x400200b8
 8003c34:	40020410 	.word	0x40020410
 8003c38:	40020428 	.word	0x40020428
 8003c3c:	40020440 	.word	0x40020440
 8003c40:	40020458 	.word	0x40020458
 8003c44:	40020470 	.word	0x40020470
 8003c48:	40020488 	.word	0x40020488
 8003c4c:	400204a0 	.word	0x400204a0
 8003c50:	400204b8 	.word	0x400204b8
 8003c54:	4b54      	ldr	r3, [pc, #336]	; (8003da8 <main+0x3a8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4b53      	ldr	r3, [pc, #332]	; (8003da8 <main+0x3a8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	601a      	str	r2, [r3, #0]
//	{
//		HAL_TIM_Base_Stop_IT(&htim6); // Set home 	200 Hz
//	}

	// Backup
	fcb_joint1.Kp_p = 0.0;
 8003c64:	4b51      	ldr	r3, [pc, #324]	; (8003dac <main+0x3ac>)
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	61da      	str	r2, [r3, #28]
	fcb_joint1.Kp_v = 0.0;
 8003c6c:	4b4f      	ldr	r3, [pc, #316]	; (8003dac <main+0x3ac>)
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint1.Ki_p = 0.0;
 8003c74:	4b4d      	ldr	r3, [pc, #308]	; (8003dac <main+0x3ac>)
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	621a      	str	r2, [r3, #32]
	fcb_joint1.Ki_v = 0.0;
 8003c7c:	4b4b      	ldr	r3, [pc, #300]	; (8003dac <main+0x3ac>)
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint1.Kd_p = 0.0;
 8003c84:	4b49      	ldr	r3, [pc, #292]	; (8003dac <main+0x3ac>)
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint1.Kd_p = 0.0;
 8003c8c:	4b47      	ldr	r3, [pc, #284]	; (8003dac <main+0x3ac>)
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint2.Kp_p = 0.0;
 8003c94:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <main+0x3b0>)
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	61da      	str	r2, [r3, #28]
	fcb_joint2.Kp_v = 0.0;
 8003c9c:	4b44      	ldr	r3, [pc, #272]	; (8003db0 <main+0x3b0>)
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint2.Ki_p = 0.0;
 8003ca4:	4b42      	ldr	r3, [pc, #264]	; (8003db0 <main+0x3b0>)
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	621a      	str	r2, [r3, #32]
	fcb_joint2.Ki_v = 0.0;
 8003cac:	4b40      	ldr	r3, [pc, #256]	; (8003db0 <main+0x3b0>)
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint2.Kd_p = 0.0;
 8003cb4:	4b3e      	ldr	r3, [pc, #248]	; (8003db0 <main+0x3b0>)
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint2.Kd_p = 0.0;
 8003cbc:	4b3c      	ldr	r3, [pc, #240]	; (8003db0 <main+0x3b0>)
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint3.Kp_p = 0.0;
 8003cc4:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <main+0x3b4>)
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	61da      	str	r2, [r3, #28]
	fcb_joint3.Kp_v = 0.0;
 8003ccc:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <main+0x3b4>)
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint3.Ki_p = 0.0;
 8003cd4:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <main+0x3b4>)
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	621a      	str	r2, [r3, #32]
	fcb_joint3.Ki_v = 0.0;
 8003cdc:	4b35      	ldr	r3, [pc, #212]	; (8003db4 <main+0x3b4>)
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint3.Kd_p = 0.0;
 8003ce4:	4b33      	ldr	r3, [pc, #204]	; (8003db4 <main+0x3b4>)
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint3.Kd_p = 0.0;
 8003cec:	4b31      	ldr	r3, [pc, #196]	; (8003db4 <main+0x3b4>)
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint4.Kp_p = 0.0;
 8003cf4:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <main+0x3b8>)
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	61da      	str	r2, [r3, #28]
	fcb_joint4.Kp_v = 0.0;
 8003cfc:	4b2e      	ldr	r3, [pc, #184]	; (8003db8 <main+0x3b8>)
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint4.Ki_p = 0.0;
 8003d04:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <main+0x3b8>)
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	621a      	str	r2, [r3, #32]
	fcb_joint4.Ki_v = 0.0;
 8003d0c:	4b2a      	ldr	r3, [pc, #168]	; (8003db8 <main+0x3b8>)
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint4.Kd_p = 0.0;
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <main+0x3b8>)
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint4.Kd_p = 0.0;
 8003d1c:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <main+0x3b8>)
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint3 = Update_quintic_Coff(6.0, fcb_joint3.Encoder / 2609.0, (fcb_joint3.Encoder / 2609.0) + 0.785, 0.0, 0.0, 0.0, 0.0);
 8003d24:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <main+0x3b4>)
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b21b      	sxth	r3, r3
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003d32:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8003d98 <main+0x398>
 8003d36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003d3a:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 8003d3e:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <main+0x3b4>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b21b      	sxth	r3, r3
 8003d44:	ee07 3a90 	vmov	s15, r3
 8003d48:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003d4c:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8003d98 <main+0x398>
 8003d50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003d54:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8003da0 <main+0x3a0>
 8003d58:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003d60:	4c14      	ldr	r4, [pc, #80]	; (8003db4 <main+0x3b4>)
 8003d62:	463b      	mov	r3, r7
 8003d64:	ed9f 3a15 	vldr	s6, [pc, #84]	; 8003dbc <main+0x3bc>
 8003d68:	eddf 2a14 	vldr	s5, [pc, #80]	; 8003dbc <main+0x3bc>
 8003d6c:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8003dbc <main+0x3bc>
 8003d70:	eddf 1a12 	vldr	s3, [pc, #72]	; 8003dbc <main+0x3bc>
 8003d74:	eeb0 1a67 	vmov.f32	s2, s15
 8003d78:	eef0 0a64 	vmov.f32	s1, s9
 8003d7c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe faf7 	bl	8002374 <_Z19Update_quintic_Cofffffffff>
 8003d86:	4620      	mov	r0, r4
 8003d88:	463b      	mov	r3, r7
 8003d8a:	22a0      	movs	r2, #160	; 0xa0
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f00c f911 	bl	800ffb4 <memcpy>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8003d92:	e7fe      	b.n	8003d92 <main+0x392>
 8003d94:	f3af 8000 	nop.w
 8003d98:	00000000 	.word	0x00000000
 8003d9c:	40a46200 	.word	0x40a46200
 8003da0:	51eb851f 	.word	0x51eb851f
 8003da4:	3fe91eb8 	.word	0x3fe91eb8
 8003da8:	24000d58 	.word	0x24000d58
 8003dac:	240005b0 	.word	0x240005b0
 8003db0:	24000650 	.word	0x24000650
 8003db4:	240006f0 	.word	0x240006f0
 8003db8:	24000790 	.word	0x24000790
 8003dbc:	00000000 	.word	0x00000000

08003dc0 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b09c      	sub	sp, #112	; 0x70
 8003dc4:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dca:	224c      	movs	r2, #76	; 0x4c
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f00c f8fe 	bl	800ffd0 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dd4:	1d3b      	adds	r3, r7, #4
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f00c f8f8 	bl	800ffd0 <memset>

/** Supply configuration update enable
 */
HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003de0:	2002      	movs	r0, #2
 8003de2:	f005 fa65 	bl	80092b0 <HAL_PWREx_ConfigSupply>
/** Configure the main internal regulator output voltage
 */
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003de6:	2300      	movs	r3, #0
 8003de8:	603b      	str	r3, [r7, #0]
 8003dea:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <_Z18SystemClock_Configv+0x10c>)
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	4a37      	ldr	r2, [pc, #220]	; (8003ecc <_Z18SystemClock_Configv+0x10c>)
 8003df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003df4:	6193      	str	r3, [r2, #24]
 8003df6:	4b35      	ldr	r3, [pc, #212]	; (8003ecc <_Z18SystemClock_Configv+0x10c>)
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	4b33      	ldr	r3, [pc, #204]	; (8003ed0 <_Z18SystemClock_Configv+0x110>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	4a32      	ldr	r2, [pc, #200]	; (8003ed0 <_Z18SystemClock_Configv+0x110>)
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e0c:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <_Z18SystemClock_Configv+0x110>)
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	603b      	str	r3, [r7, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]

while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003e18:	4b2c      	ldr	r3, [pc, #176]	; (8003ecc <_Z18SystemClock_Configv+0x10c>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e24:	bf14      	ite	ne
 8003e26:	2301      	movne	r3, #1
 8003e28:	2300      	moveq	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d000      	beq.n	8003e32 <_Z18SystemClock_Configv+0x72>
 8003e30:	e7f2      	b.n	8003e18 <_Z18SystemClock_Configv+0x58>
/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e32:	2302      	movs	r3, #2
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e3a:	2340      	movs	r3, #64	; 0x40
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e42:	2300      	movs	r3, #0
 8003e44:	64fb      	str	r3, [r7, #76]	; 0x4c
RCC_OscInitStruct.PLL.PLLM = 4;
 8003e46:	2304      	movs	r3, #4
 8003e48:	653b      	str	r3, [r7, #80]	; 0x50
RCC_OscInitStruct.PLL.PLLN = 60;
 8003e4a:	233c      	movs	r3, #60	; 0x3c
 8003e4c:	657b      	str	r3, [r7, #84]	; 0x54
RCC_OscInitStruct.PLL.PLLP = 2;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	65bb      	str	r3, [r7, #88]	; 0x58
RCC_OscInitStruct.PLL.PLLQ = 6;
 8003e52:	2306      	movs	r3, #6
 8003e54:	65fb      	str	r3, [r7, #92]	; 0x5c
RCC_OscInitStruct.PLL.PLLR = 2;
 8003e56:	2302      	movs	r3, #2
 8003e58:	663b      	str	r3, [r7, #96]	; 0x60
RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	667b      	str	r3, [r7, #100]	; 0x64
RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	66bb      	str	r3, [r7, #104]	; 0x68
RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	66fb      	str	r3, [r7, #108]	; 0x6c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f005 fa5a 	bl	8009324 <HAL_RCC_OscConfig>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bf14      	ite	ne
 8003e76:	2301      	movne	r3, #1
 8003e78:	2300      	moveq	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <_Z18SystemClock_Configv+0xc4>
{
	Error_Handler();
 8003e80:	f000 f83e 	bl	8003f00 <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e84:	233f      	movs	r3, #63	; 0x3f
 8003e86:	607b      	str	r3, [r7, #4]
|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003e90:	2308      	movs	r3, #8
 8003e92:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003e94:	2340      	movs	r3, #64	; 0x40
 8003e96:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003e98:	2340      	movs	r3, #64	; 0x40
 8003e9a:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea0:	61fb      	str	r3, [r7, #28]
RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003ea2:	2340      	movs	r3, #64	; 0x40
 8003ea4:	623b      	str	r3, [r7, #32]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003ea6:	1d3b      	adds	r3, r7, #4
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f005 fe66 	bl	8009b7c <HAL_RCC_ClockConfig>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bf14      	ite	ne
 8003eb6:	2301      	movne	r3, #1
 8003eb8:	2300      	moveq	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <_Z18SystemClock_Configv+0x104>
{
	Error_Handler();
 8003ec0:	f000 f81e 	bl	8003f00 <Error_Handler>
}
}
 8003ec4:	bf00      	nop
 8003ec6:	3770      	adds	r7, #112	; 0x70
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	58024800 	.word	0x58024800
 8003ed0:	58000400 	.word	0x58000400

08003ed4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]

}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	80fb      	strh	r3, [r7, #6]

}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8003f04:	2200      	movs	r2, #0
 8003f06:	2101      	movs	r1, #1
 8003f08:	4808      	ldr	r0, [pc, #32]	; (8003f2c <Error_Handler+0x2c>)
 8003f0a:	f005 f99d 	bl	8009248 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2102      	movs	r1, #2
 8003f12:	4807      	ldr	r0, [pc, #28]	; (8003f30 <Error_Handler+0x30>)
 8003f14:	f005 f998 	bl	8009248 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f1e:	4803      	ldr	r0, [pc, #12]	; (8003f2c <Error_Handler+0x2c>)
 8003f20:	f005 f992 	bl	8009248 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f24:	b672      	cpsid	i
}
 8003f26:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8003f28:	e7fe      	b.n	8003f28 <Error_Handler+0x28>
 8003f2a:	bf00      	nop
 8003f2c:	58020400 	.word	0x58020400
 8003f30:	58021000 	.word	0x58021000

08003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f3e:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8003f40:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	ee06 3a90 	vmov	s13, r3
 8003f4e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003f52:	eeb0 1b46 	vmov.f64	d1, d6
 8003f56:	eeb0 0b47 	vmov.f64	d0, d7
 8003f5a:	f00b fc05 	bl	800f768 <pow>
 8003f5e:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8003f62:	eeb0 0b47 	vmov.f64	d0, d7
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_Z41__static_initialization_and_destruction_0ii>:
}
/* USER CODE END Error_Handler_Debug */
}
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	f040 80df 	bne.w	800413c <_Z41__static_initialization_and_destruction_0ii+0x1d0>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f84:	4293      	cmp	r3, r2
 8003f86:	f040 80d9 	bne.w	800413c <_Z41__static_initialization_and_destruction_0ii+0x1d0>
AMT21 encoderJ1(&huart4, 0xD4);
 8003f8a:	22d4      	movs	r2, #212	; 0xd4
 8003f8c:	497c      	ldr	r1, [pc, #496]	; (8004180 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003f8e:	487d      	ldr	r0, [pc, #500]	; (8004184 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003f90:	f7fc fd36 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8003f94:	22c4      	movs	r2, #196	; 0xc4
 8003f96:	497a      	ldr	r1, [pc, #488]	; (8004180 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003f98:	487b      	ldr	r0, [pc, #492]	; (8004188 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003f9a:	f7fc fd31 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8003f9e:	2320      	movs	r3, #32
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	4b7a      	ldr	r3, [pc, #488]	; (800418c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	497a      	ldr	r1, [pc, #488]	; (8004190 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8003fa8:	487a      	ldr	r0, [pc, #488]	; (8004194 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8003faa:	f7fd f8a5 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8003fae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4b78      	ldr	r3, [pc, #480]	; (8004198 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	4978      	ldr	r1, [pc, #480]	; (800419c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8003fba:	4879      	ldr	r0, [pc, #484]	; (80041a0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003fbc:	f7fd f89c 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8003fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	4b74      	ldr	r3, [pc, #464]	; (8004198 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8003fc8:	2204      	movs	r2, #4
 8003fca:	4976      	ldr	r1, [pc, #472]	; (80041a4 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8003fcc:	4876      	ldr	r0, [pc, #472]	; (80041a8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003fce:	f7fd f893 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8003fd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	4b6c      	ldr	r3, [pc, #432]	; (800418c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8003fda:	2208      	movs	r2, #8
 8003fdc:	4973      	ldr	r1, [pc, #460]	; (80041ac <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8003fde:	4874      	ldr	r0, [pc, #464]	; (80041b0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003fe0:	f7fd f88a 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	4973      	ldr	r1, [pc, #460]	; (80041b4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8003fe8:	4873      	ldr	r0, [pc, #460]	; (80041b8 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003fea:	f7fc fdfc 	bl	8000be6 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
volatile const float C2_q1 = (3.0 * C0_q1) / (Time * Time);
 8003fee:	4b73      	ldr	r3, [pc, #460]	; (80041bc <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003ff0:	edd3 7a00 	vldr	s15, [r3]
 8003ff4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ff8:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003ffc:	ee27 5b06 	vmul.f64	d5, d7, d6
 8004000:	4b6f      	ldr	r3, [pc, #444]	; (80041c0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004002:	ed93 7a00 	vldr	s14, [r3]
 8004006:	4b6e      	ldr	r3, [pc, #440]	; (80041c0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004008:	edd3 7a00 	vldr	s15, [r3]
 800400c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004010:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004014:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004018:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800401c:	4b69      	ldr	r3, [pc, #420]	; (80041c4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800401e:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0 * C0_q1) / (Time * Time * Time);
 8004022:	4b66      	ldr	r3, [pc, #408]	; (80041bc <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8004024:	edd3 7a00 	vldr	s15, [r3]
 8004028:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800402c:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004030:	4b63      	ldr	r3, [pc, #396]	; (80041c0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004032:	ed93 7a00 	vldr	s14, [r3]
 8004036:	4b62      	ldr	r3, [pc, #392]	; (80041c0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004038:	edd3 7a00 	vldr	s15, [r3]
 800403c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004040:	4b5f      	ldr	r3, [pc, #380]	; (80041c0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004042:	edd3 7a00 	vldr	s15, [r3]
 8004046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800404e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004052:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004056:	4b5c      	ldr	r3, [pc, #368]	; (80041c8 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8004058:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0 * C0_q3) / (Time * Time);
 800405c:	4b5b      	ldr	r3, [pc, #364]	; (80041cc <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800405e:	edd3 7a00 	vldr	s15, [r3]
 8004062:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004066:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800406a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800406e:	4b54      	ldr	r3, [pc, #336]	; (80041c0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004070:	ed93 7a00 	vldr	s14, [r3]
 8004074:	4b52      	ldr	r3, [pc, #328]	; (80041c0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004076:	edd3 7a00 	vldr	s15, [r3]
 800407a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004082:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004086:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800408a:	4b51      	ldr	r3, [pc, #324]	; (80041d0 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800408c:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0 * C0_q3) / (Time * Time * Time);
 8004090:	4b4e      	ldr	r3, [pc, #312]	; (80041cc <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8004092:	edd3 7a00 	vldr	s15, [r3]
 8004096:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800409a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800409e:	4b48      	ldr	r3, [pc, #288]	; (80041c0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80040a0:	ed93 7a00 	vldr	s14, [r3]
 80040a4:	4b46      	ldr	r3, [pc, #280]	; (80041c0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80040a6:	edd3 7a00 	vldr	s15, [r3]
 80040aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ae:	4b44      	ldr	r3, [pc, #272]	; (80041c0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80040b0:	edd3 7a00 	vldr	s15, [r3]
 80040b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80040bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80040c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80040c4:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80040c6:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt2 = pow(dt, 2);
 80040ca:	4b43      	ldr	r3, [pc, #268]	; (80041d8 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80040cc:	edd3 7a00 	vldr	s15, [r3]
 80040d0:	2002      	movs	r0, #2
 80040d2:	eeb0 0a67 	vmov.f32	s0, s15
 80040d6:	f7ff ff2d 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80040da:	eeb0 7b40 	vmov.f64	d7, d0
 80040de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80040e2:	4b3e      	ldr	r3, [pc, #248]	; (80041dc <_Z41__static_initialization_and_destruction_0ii+0x270>)
 80040e4:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt3 = pow(dt, 3);
 80040e8:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80040ea:	edd3 7a00 	vldr	s15, [r3]
 80040ee:	2003      	movs	r0, #3
 80040f0:	eeb0 0a67 	vmov.f32	s0, s15
 80040f4:	f7ff ff1e 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80040f8:	eeb0 7b40 	vmov.f64	d7, d0
 80040fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004100:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8004102:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt4 = pow(dt, 4);
 8004106:	4b34      	ldr	r3, [pc, #208]	; (80041d8 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8004108:	edd3 7a00 	vldr	s15, [r3]
 800410c:	2004      	movs	r0, #4
 800410e:	eeb0 0a67 	vmov.f32	s0, s15
 8004112:	f7ff ff0f 	bl	8003f34 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004116:	eeb0 7b40 	vmov.f64	d7, d0
 800411a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800411e:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8004120:	edc3 7a00 	vstr	s15, [r3]
fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;
 8004124:	4830      	ldr	r0, [pc, #192]	; (80041e8 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8004126:	f7fe f803 	bl	8002130 <_ZN11robot_jointC1Ev>
 800412a:	4830      	ldr	r0, [pc, #192]	; (80041ec <_Z41__static_initialization_and_destruction_0ii+0x280>)
 800412c:	f7fe f800 	bl	8002130 <_ZN11robot_jointC1Ev>
 8004130:	482f      	ldr	r0, [pc, #188]	; (80041f0 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8004132:	f7fd fffd 	bl	8002130 <_ZN11robot_jointC1Ev>
 8004136:	482f      	ldr	r0, [pc, #188]	; (80041f4 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8004138:	f7fd fffa 	bl	8002130 <_ZN11robot_jointC1Ev>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d119      	bne.n	8004176 <_Z41__static_initialization_and_destruction_0ii+0x20a>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004148:	4293      	cmp	r3, r2
 800414a:	d114      	bne.n	8004176 <_Z41__static_initialization_and_destruction_0ii+0x20a>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 800414c:	481a      	ldr	r0, [pc, #104]	; (80041b8 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800414e:	f7fc fd7a 	bl	8000c46 <_ZN10ServoMotorD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004152:	4817      	ldr	r0, [pc, #92]	; (80041b0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8004154:	f7fd f814 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004158:	4813      	ldr	r0, [pc, #76]	; (80041a8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800415a:	f7fd f811 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 800415e:	4810      	ldr	r0, [pc, #64]	; (80041a0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8004160:	f7fd f80e 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004164:	480b      	ldr	r0, [pc, #44]	; (8004194 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8004166:	f7fd f80b 	bl	8001180 <_ZN7StepperD1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 800416a:	4807      	ldr	r0, [pc, #28]	; (8004188 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800416c:	f7fc fc5c 	bl	8000a28 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8004170:	4804      	ldr	r0, [pc, #16]	; (8004184 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8004172:	f7fc fc59 	bl	8000a28 <_ZN5AMT21D1Ev>
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	24000f50 	.word	0x24000f50
 8004184:	24000228 	.word	0x24000228
 8004188:	24000244 	.word	0x24000244
 800418c:	58020400 	.word	0x58020400
 8004190:	240009f0 	.word	0x240009f0
 8004194:	24000260 	.word	0x24000260
 8004198:	58021000 	.word	0x58021000
 800419c:	24000ad4 	.word	0x24000ad4
 80041a0:	24000288 	.word	0x24000288
 80041a4:	24000958 	.word	0x24000958
 80041a8:	240002b0 	.word	0x240002b0
 80041ac:	24000b20 	.word	0x24000b20
 80041b0:	240002d8 	.word	0x240002d8
 80041b4:	2400090c 	.word	0x2400090c
 80041b8:	24000300 	.word	0x24000300
 80041bc:	24000018 	.word	0x24000018
 80041c0:	24000014 	.word	0x24000014
 80041c4:	2400037c 	.word	0x2400037c
 80041c8:	24000380 	.word	0x24000380
 80041cc:	2400001c 	.word	0x2400001c
 80041d0:	24000384 	.word	0x24000384
 80041d4:	24000388 	.word	0x24000388
 80041d8:	24000024 	.word	0x24000024
 80041dc:	2400038c 	.word	0x2400038c
 80041e0:	24000390 	.word	0x24000390
 80041e4:	24000394 	.word	0x24000394
 80041e8:	240005b0 	.word	0x240005b0
 80041ec:	24000650 	.word	0x24000650
 80041f0:	240006f0 	.word	0x240006f0
 80041f4:	24000790 	.word	0x24000790

080041f8 <_GLOBAL__sub_I_TIM_MS>:
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004200:	2001      	movs	r0, #1
 8004202:	f7ff feb3 	bl	8003f6c <_Z41__static_initialization_and_destruction_0ii>
 8004206:	bd80      	pop	{r7, pc}

08004208 <_GLOBAL__sub_D_TIM_MS>:
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
 800420c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004210:	2000      	movs	r0, #0
 8004212:	f7ff feab 	bl	8003f6c <_Z41__static_initialization_and_destruction_0ii>
 8004216:	bd80      	pop	{r7, pc}

08004218 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800421c:	4b27      	ldr	r3, [pc, #156]	; (80042bc <MX_SPI3_Init+0xa4>)
 800421e:	4a28      	ldr	r2, [pc, #160]	; (80042c0 <MX_SPI3_Init+0xa8>)
 8004220:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004222:	4b26      	ldr	r3, [pc, #152]	; (80042bc <MX_SPI3_Init+0xa4>)
 8004224:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004228:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800422a:	4b24      	ldr	r3, [pc, #144]	; (80042bc <MX_SPI3_Init+0xa4>)
 800422c:	2200      	movs	r2, #0
 800422e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004230:	4b22      	ldr	r3, [pc, #136]	; (80042bc <MX_SPI3_Init+0xa4>)
 8004232:	2203      	movs	r2, #3
 8004234:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004236:	4b21      	ldr	r3, [pc, #132]	; (80042bc <MX_SPI3_Init+0xa4>)
 8004238:	2200      	movs	r2, #0
 800423a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800423c:	4b1f      	ldr	r3, [pc, #124]	; (80042bc <MX_SPI3_Init+0xa4>)
 800423e:	2200      	movs	r2, #0
 8004240:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004242:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <MX_SPI3_Init+0xa4>)
 8004244:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004248:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800424a:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <MX_SPI3_Init+0xa4>)
 800424c:	2200      	movs	r2, #0
 800424e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <MX_SPI3_Init+0xa4>)
 8004252:	2200      	movs	r2, #0
 8004254:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004256:	4b19      	ldr	r3, [pc, #100]	; (80042bc <MX_SPI3_Init+0xa4>)
 8004258:	2200      	movs	r2, #0
 800425a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800425c:	4b17      	ldr	r3, [pc, #92]	; (80042bc <MX_SPI3_Init+0xa4>)
 800425e:	2200      	movs	r2, #0
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004262:	4b16      	ldr	r3, [pc, #88]	; (80042bc <MX_SPI3_Init+0xa4>)
 8004264:	2200      	movs	r2, #0
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004268:	4b14      	ldr	r3, [pc, #80]	; (80042bc <MX_SPI3_Init+0xa4>)
 800426a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800426e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004270:	4b12      	ldr	r3, [pc, #72]	; (80042bc <MX_SPI3_Init+0xa4>)
 8004272:	2200      	movs	r2, #0
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <MX_SPI3_Init+0xa4>)
 8004278:	2200      	movs	r2, #0
 800427a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800427c:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <MX_SPI3_Init+0xa4>)
 800427e:	2200      	movs	r2, #0
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004282:	4b0e      	ldr	r3, [pc, #56]	; (80042bc <MX_SPI3_Init+0xa4>)
 8004284:	2200      	movs	r2, #0
 8004286:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <MX_SPI3_Init+0xa4>)
 800428a:	2200      	movs	r2, #0
 800428c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800428e:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <MX_SPI3_Init+0xa4>)
 8004290:	2200      	movs	r2, #0
 8004292:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <MX_SPI3_Init+0xa4>)
 8004296:	2200      	movs	r2, #0
 8004298:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800429a:	4b08      	ldr	r3, [pc, #32]	; (80042bc <MX_SPI3_Init+0xa4>)
 800429c:	2200      	movs	r2, #0
 800429e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <MX_SPI3_Init+0xa4>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80042a6:	4805      	ldr	r0, [pc, #20]	; (80042bc <MX_SPI3_Init+0xa4>)
 80042a8:	f007 fb56 	bl	800b958 <HAL_SPI_Init>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80042b2:	f7ff fe25 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	24000884 	.word	0x24000884
 80042c0:	40003c00 	.word	0x40003c00

080042c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b0b8      	sub	sp, #224	; 0xe0
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	609a      	str	r2, [r3, #8]
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042dc:	f107 0310 	add.w	r3, r7, #16
 80042e0:	22bc      	movs	r2, #188	; 0xbc
 80042e2:	2100      	movs	r1, #0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f00b fe73 	bl	800ffd0 <memset>
  if(spiHandle->Instance==SPI3)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a25      	ldr	r2, [pc, #148]	; (8004384 <HAL_SPI_MspInit+0xc0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d142      	bne.n	800437a <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80042f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042fe:	f107 0310 	add.w	r3, r7, #16
 8004302:	4618      	mov	r0, r3
 8004304:	f005 ffc6 	bl	800a294 <HAL_RCCEx_PeriphCLKConfig>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800430e:	f7ff fdf7 	bl	8003f00 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_SPI_MspInit+0xc4>)
 8004314:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004318:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <HAL_SPI_MspInit+0xc4>)
 800431a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800431e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004322:	4b19      	ldr	r3, [pc, #100]	; (8004388 <HAL_SPI_MspInit+0xc4>)
 8004324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004330:	4b15      	ldr	r3, [pc, #84]	; (8004388 <HAL_SPI_MspInit+0xc4>)
 8004332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004336:	4a14      	ldr	r2, [pc, #80]	; (8004388 <HAL_SPI_MspInit+0xc4>)
 8004338:	f043 0304 	orr.w	r3, r3, #4
 800433c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004340:	4b11      	ldr	r3, [pc, #68]	; (8004388 <HAL_SPI_MspInit+0xc4>)
 8004342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800434e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004352:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004356:	2302      	movs	r3, #2
 8004358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435c:	2300      	movs	r3, #0
 800435e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004362:	2300      	movs	r3, #0
 8004364:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004368:	2306      	movs	r3, #6
 800436a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800436e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004372:	4619      	mov	r1, r3
 8004374:	4805      	ldr	r0, [pc, #20]	; (800438c <HAL_SPI_MspInit+0xc8>)
 8004376:	f004 fdb7 	bl	8008ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800437a:	bf00      	nop
 800437c:	37e0      	adds	r7, #224	; 0xe0
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40003c00 	.word	0x40003c00
 8004388:	58024400 	.word	0x58024400
 800438c:	58020800 	.word	0x58020800

08004390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <HAL_MspInit+0x30>)
 8004398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800439c:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <HAL_MspInit+0x30>)
 800439e:	f043 0302 	orr.w	r3, r3, #2
 80043a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_MspInit+0x30>)
 80043a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	58024400 	.word	0x58024400

080043c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043c8:	e7fe      	b.n	80043c8 <NMI_Handler+0x4>

080043ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043ca:	b480      	push	{r7}
 80043cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043ce:	e7fe      	b.n	80043ce <HardFault_Handler+0x4>

080043d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043d4:	e7fe      	b.n	80043d4 <MemManage_Handler+0x4>

080043d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043d6:	b480      	push	{r7}
 80043d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043da:	e7fe      	b.n	80043da <BusFault_Handler+0x4>

080043dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043e0:	e7fe      	b.n	80043e0 <UsageFault_Handler+0x4>

080043e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043e2:	b480      	push	{r7}
 80043e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043e6:	bf00      	nop
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043f4:	bf00      	nop
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043fe:	b480      	push	{r7}
 8004400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004402:	bf00      	nop
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004410:	f001 fbc6 	bl	8005ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8004414:	f001 fd23 	bl	8005e5e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004418:	bf00      	nop
 800441a:	bd80      	pop	{r7, pc}

0800441c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8004420:	4802      	ldr	r0, [pc, #8]	; (800442c <DMA1_Stream0_IRQHandler+0x10>)
 8004422:	f003 fa4f 	bl	80078c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	24000ed8 	.word	0x24000ed8

08004430 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004434:	4802      	ldr	r0, [pc, #8]	; (8004440 <DMA1_Stream1_IRQHandler+0x10>)
 8004436:	f003 fa45 	bl	80078c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	24000d58 	.word	0x24000d58

08004444 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004448:	4802      	ldr	r0, [pc, #8]	; (8004454 <DMA1_Stream2_IRQHandler+0x10>)
 800444a:	f003 fa3b 	bl	80078c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	24000e60 	.word	0x24000e60

08004458 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800445c:	4802      	ldr	r0, [pc, #8]	; (8004468 <DMA1_Stream3_IRQHandler+0x10>)
 800445e:	f003 fa31 	bl	80078c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004462:	bf00      	nop
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	24000c50 	.word	0x24000c50

0800446c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004470:	4802      	ldr	r0, [pc, #8]	; (800447c <DMA1_Stream4_IRQHandler+0x10>)
 8004472:	f003 fa27 	bl	80078c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004476:	bf00      	nop
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	24000fe0 	.word	0x24000fe0

08004480 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8004484:	2040      	movs	r0, #64	; 0x40
 8004486:	f004 fef8 	bl	800927a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 800448a:	2080      	movs	r0, #128	; 0x80
 800448c:	f004 fef5 	bl	800927a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004490:	bf00      	nop
 8004492:	bd80      	pop	{r7, pc}

08004494 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004498:	4802      	ldr	r0, [pc, #8]	; (80044a4 <USART3_IRQHandler+0x10>)
 800449a:	f009 f8e9 	bl	800d670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800449e:	bf00      	nop
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	24000dd0 	.word	0x24000dd0

080044a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 80044ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80044b0:	f004 fee3 	bl	800927a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 80044b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80044b8:	f004 fedf 	bl	800927a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 80044bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80044c0:	f004 fedb 	bl	800927a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 80044c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80044c8:	f004 fed7 	bl	800927a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80044d4:	4802      	ldr	r0, [pc, #8]	; (80044e0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80044d6:	f007 fdcd 	bl	800c074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	24000bb8 	.word	0x24000bb8

080044e4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80044e8:	4802      	ldr	r0, [pc, #8]	; (80044f4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80044ea:	f007 fdc3 	bl	800c074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	24000a3c 	.word	0x24000a3c

080044f8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80044fc:	4802      	ldr	r0, [pc, #8]	; (8004508 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80044fe:	f007 fdb9 	bl	800c074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004502:	bf00      	nop
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	24000b6c 	.word	0x24000b6c

0800450c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004510:	4802      	ldr	r0, [pc, #8]	; (800451c <TIM5_IRQHandler+0x10>)
 8004512:	f007 fdaf 	bl	800c074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	240009a4 	.word	0x240009a4

08004520 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004524:	4802      	ldr	r0, [pc, #8]	; (8004530 <UART4_IRQHandler+0x10>)
 8004526:	f009 f8a3 	bl	800d670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800452a:	bf00      	nop
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	24000f50 	.word	0x24000f50

08004534 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004538:	4802      	ldr	r0, [pc, #8]	; (8004544 <TIM6_DAC_IRQHandler+0x10>)
 800453a:	f007 fd9b 	bl	800c074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	24000a88 	.word	0x24000a88

08004548 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800454c:	4802      	ldr	r0, [pc, #8]	; (8004558 <TIM7_IRQHandler+0x10>)
 800454e:	f007 fd91 	bl	800c074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	24000c04 	.word	0x24000c04

0800455c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004560:	4802      	ldr	r0, [pc, #8]	; (800456c <UART7_IRQHandler+0x10>)
 8004562:	f009 f885 	bl	800d670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	24000cc8 	.word	0x24000cc8

08004570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
	return 1;
 8004574:	2301      	movs	r3, #1
}
 8004576:	4618      	mov	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <_kill>:

int _kill(int pid, int sig)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800458a:	f00b fce9 	bl	800ff60 <__errno>
 800458e:	4603      	mov	r3, r0
 8004590:	2216      	movs	r2, #22
 8004592:	601a      	str	r2, [r3, #0]
	return -1;
 8004594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <_exit>:

void _exit (int status)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80045a8:	f04f 31ff 	mov.w	r1, #4294967295
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff ffe7 	bl	8004580 <_kill>
	while (1) {}		/* Make sure we hang here */
 80045b2:	e7fe      	b.n	80045b2 <_exit+0x12>

080045b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e00a      	b.n	80045dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80045c6:	f3af 8000 	nop.w
 80045ca:	4601      	mov	r1, r0
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	60ba      	str	r2, [r7, #8]
 80045d2:	b2ca      	uxtb	r2, r1
 80045d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3301      	adds	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	dbf0      	blt.n	80045c6 <_read+0x12>
	}

return len;
 80045e4:	687b      	ldr	r3, [r7, #4]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b086      	sub	sp, #24
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	e009      	b.n	8004614 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	60ba      	str	r2, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	3301      	adds	r3, #1
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	429a      	cmp	r2, r3
 800461a:	dbf1      	blt.n	8004600 <_write+0x12>
	}
	return len;
 800461c:	687b      	ldr	r3, [r7, #4]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <_close>:

int _close(int file)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
	return -1;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800464e:	605a      	str	r2, [r3, #4]
	return 0;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <_isatty>:

int _isatty(int file)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
	return 1;
 8004666:	2301      	movs	r3, #1
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
	return 0;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004698:	4a14      	ldr	r2, [pc, #80]	; (80046ec <_sbrk+0x5c>)
 800469a:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <_sbrk+0x60>)
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046a4:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <_sbrk+0x64>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046ac:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <_sbrk+0x64>)
 80046ae:	4a12      	ldr	r2, [pc, #72]	; (80046f8 <_sbrk+0x68>)
 80046b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <_sbrk+0x64>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4413      	add	r3, r2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d207      	bcs.n	80046d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046c0:	f00b fc4e 	bl	800ff60 <__errno>
 80046c4:	4603      	mov	r3, r0
 80046c6:	220c      	movs	r2, #12
 80046c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
 80046ce:	e009      	b.n	80046e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046d0:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <_sbrk+0x64>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <_sbrk+0x64>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	4a05      	ldr	r2, [pc, #20]	; (80046f4 <_sbrk+0x64>)
 80046e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046e2:	68fb      	ldr	r3, [r7, #12]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	24001670 	.word	0x24001670
 80046f0:	00000400 	.word	0x00000400
 80046f4:	24000854 	.word	0x24000854
 80046f8:	24001070 	.word	0x24001070

080046fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004700:	4b39      	ldr	r3, [pc, #228]	; (80047e8 <SystemInit+0xec>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004706:	4a38      	ldr	r2, [pc, #224]	; (80047e8 <SystemInit+0xec>)
 8004708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800470c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004710:	4b36      	ldr	r3, [pc, #216]	; (80047ec <SystemInit+0xf0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	2b06      	cmp	r3, #6
 800471a:	d807      	bhi.n	800472c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800471c:	4b33      	ldr	r3, [pc, #204]	; (80047ec <SystemInit+0xf0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f023 030f 	bic.w	r3, r3, #15
 8004724:	4a31      	ldr	r2, [pc, #196]	; (80047ec <SystemInit+0xf0>)
 8004726:	f043 0307 	orr.w	r3, r3, #7
 800472a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800472c:	4b30      	ldr	r3, [pc, #192]	; (80047f0 <SystemInit+0xf4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a2f      	ldr	r2, [pc, #188]	; (80047f0 <SystemInit+0xf4>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004738:	4b2d      	ldr	r3, [pc, #180]	; (80047f0 <SystemInit+0xf4>)
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800473e:	4b2c      	ldr	r3, [pc, #176]	; (80047f0 <SystemInit+0xf4>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	492b      	ldr	r1, [pc, #172]	; (80047f0 <SystemInit+0xf4>)
 8004744:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <SystemInit+0xf8>)
 8004746:	4013      	ands	r3, r2
 8004748:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800474a:	4b28      	ldr	r3, [pc, #160]	; (80047ec <SystemInit+0xf0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004756:	4b25      	ldr	r3, [pc, #148]	; (80047ec <SystemInit+0xf0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 030f 	bic.w	r3, r3, #15
 800475e:	4a23      	ldr	r2, [pc, #140]	; (80047ec <SystemInit+0xf0>)
 8004760:	f043 0307 	orr.w	r3, r3, #7
 8004764:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004766:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <SystemInit+0xf4>)
 8004768:	2200      	movs	r2, #0
 800476a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800476c:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <SystemInit+0xf4>)
 800476e:	2200      	movs	r2, #0
 8004770:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004772:	4b1f      	ldr	r3, [pc, #124]	; (80047f0 <SystemInit+0xf4>)
 8004774:	2200      	movs	r2, #0
 8004776:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004778:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <SystemInit+0xf4>)
 800477a:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <SystemInit+0xfc>)
 800477c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800477e:	4b1c      	ldr	r3, [pc, #112]	; (80047f0 <SystemInit+0xf4>)
 8004780:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <SystemInit+0x100>)
 8004782:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004784:	4b1a      	ldr	r3, [pc, #104]	; (80047f0 <SystemInit+0xf4>)
 8004786:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <SystemInit+0x104>)
 8004788:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800478a:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <SystemInit+0xf4>)
 800478c:	2200      	movs	r2, #0
 800478e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004790:	4b17      	ldr	r3, [pc, #92]	; (80047f0 <SystemInit+0xf4>)
 8004792:	4a1b      	ldr	r2, [pc, #108]	; (8004800 <SystemInit+0x104>)
 8004794:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004796:	4b16      	ldr	r3, [pc, #88]	; (80047f0 <SystemInit+0xf4>)
 8004798:	2200      	movs	r2, #0
 800479a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800479c:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <SystemInit+0xf4>)
 800479e:	4a18      	ldr	r2, [pc, #96]	; (8004800 <SystemInit+0x104>)
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80047a2:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <SystemInit+0xf4>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80047a8:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <SystemInit+0xf4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a10      	ldr	r2, [pc, #64]	; (80047f0 <SystemInit+0xf4>)
 80047ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80047b4:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <SystemInit+0xf4>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80047ba:	4b12      	ldr	r3, [pc, #72]	; (8004804 <SystemInit+0x108>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <SystemInit+0x10c>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047c6:	d202      	bcs.n	80047ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80047c8:	4b10      	ldr	r3, [pc, #64]	; (800480c <SystemInit+0x110>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80047ce:	4b10      	ldr	r3, [pc, #64]	; (8004810 <SystemInit+0x114>)
 80047d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80047d4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047d6:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <SystemInit+0xec>)
 80047d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047dc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80047de:	bf00      	nop
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	e000ed00 	.word	0xe000ed00
 80047ec:	52002000 	.word	0x52002000
 80047f0:	58024400 	.word	0x58024400
 80047f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80047f8:	02020200 	.word	0x02020200
 80047fc:	01ff0000 	.word	0x01ff0000
 8004800:	01010280 	.word	0x01010280
 8004804:	5c001000 	.word	0x5c001000
 8004808:	ffff0000 	.word	0xffff0000
 800480c:	51008108 	.word	0x51008108
 8004810:	52004000 	.word	0x52004000

08004814 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b09a      	sub	sp, #104	; 0x68
 8004818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800481a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	609a      	str	r2, [r3, #8]
 8004826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004828:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004834:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	60da      	str	r2, [r3, #12]
 8004842:	611a      	str	r2, [r3, #16]
 8004844:	615a      	str	r2, [r3, #20]
 8004846:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004848:	1d3b      	adds	r3, r7, #4
 800484a:	222c      	movs	r2, #44	; 0x2c
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f00b fbbe 	bl	800ffd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004854:	4b44      	ldr	r3, [pc, #272]	; (8004968 <MX_TIM1_Init+0x154>)
 8004856:	4a45      	ldr	r2, [pc, #276]	; (800496c <MX_TIM1_Init+0x158>)
 8004858:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800485a:	4b43      	ldr	r3, [pc, #268]	; (8004968 <MX_TIM1_Init+0x154>)
 800485c:	22c7      	movs	r2, #199	; 0xc7
 800485e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004860:	4b41      	ldr	r3, [pc, #260]	; (8004968 <MX_TIM1_Init+0x154>)
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8004866:	4b40      	ldr	r3, [pc, #256]	; (8004968 <MX_TIM1_Init+0x154>)
 8004868:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800486c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800486e:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <MX_TIM1_Init+0x154>)
 8004870:	2200      	movs	r2, #0
 8004872:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004874:	4b3c      	ldr	r3, [pc, #240]	; (8004968 <MX_TIM1_Init+0x154>)
 8004876:	2200      	movs	r2, #0
 8004878:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800487a:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <MX_TIM1_Init+0x154>)
 800487c:	2280      	movs	r2, #128	; 0x80
 800487e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004880:	4839      	ldr	r0, [pc, #228]	; (8004968 <MX_TIM1_Init+0x154>)
 8004882:	f007 f98a 	bl	800bb9a <HAL_TIM_Base_Init>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800488c:	f7ff fb38 	bl	8003f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004894:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004896:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800489a:	4619      	mov	r1, r3
 800489c:	4832      	ldr	r0, [pc, #200]	; (8004968 <MX_TIM1_Init+0x154>)
 800489e:	f007 fe1d 	bl	800c4dc <HAL_TIM_ConfigClockSource>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80048a8:	f7ff fb2a 	bl	8003f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80048ac:	482e      	ldr	r0, [pc, #184]	; (8004968 <MX_TIM1_Init+0x154>)
 80048ae:	f007 fa72 	bl	800bd96 <HAL_TIM_PWM_Init>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80048b8:	f7ff fb22 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048bc:	2300      	movs	r3, #0
 80048be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80048c0:	2300      	movs	r3, #0
 80048c2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80048c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80048cc:	4619      	mov	r1, r3
 80048ce:	4826      	ldr	r0, [pc, #152]	; (8004968 <MX_TIM1_Init+0x154>)
 80048d0:	f008 fb58 	bl	800cf84 <HAL_TIMEx_MasterConfigSynchronization>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80048da:	f7ff fb11 	bl	8003f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048de:	2360      	movs	r3, #96	; 0x60
 80048e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80048e2:	f240 1339 	movw	r3, #313	; 0x139
 80048e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048e8:	2300      	movs	r3, #0
 80048ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80048ec:	2300      	movs	r3, #0
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048f0:	2300      	movs	r3, #0
 80048f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80048f4:	2300      	movs	r3, #0
 80048f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80048f8:	2300      	movs	r3, #0
 80048fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80048fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004900:	2204      	movs	r2, #4
 8004902:	4619      	mov	r1, r3
 8004904:	4818      	ldr	r0, [pc, #96]	; (8004968 <MX_TIM1_Init+0x154>)
 8004906:	f007 fcd5 	bl	800c2b4 <HAL_TIM_PWM_ConfigChannel>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004910:	f7ff faf6 	bl	8003f00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004914:	2300      	movs	r3, #0
 8004916:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004918:	2300      	movs	r3, #0
 800491a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800491c:	2300      	movs	r3, #0
 800491e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800492c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004932:	2300      	movs	r3, #0
 8004934:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004940:	2300      	movs	r3, #0
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004944:	1d3b      	adds	r3, r7, #4
 8004946:	4619      	mov	r1, r3
 8004948:	4807      	ldr	r0, [pc, #28]	; (8004968 <MX_TIM1_Init+0x154>)
 800494a:	f008 fba9 	bl	800d0a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004954:	f7ff fad4 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004958:	4803      	ldr	r0, [pc, #12]	; (8004968 <MX_TIM1_Init+0x154>)
 800495a:	f000 fc85 	bl	8005268 <HAL_TIM_MspPostInit>

}
 800495e:	bf00      	nop
 8004960:	3768      	adds	r7, #104	; 0x68
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	24000ad4 	.word	0x24000ad4
 800496c:	40010000 	.word	0x40010000

08004970 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08e      	sub	sp, #56	; 0x38
 8004974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	605a      	str	r2, [r3, #4]
 8004980:	609a      	str	r2, [r3, #8]
 8004982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004984:	f107 031c 	add.w	r3, r7, #28
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004990:	463b      	mov	r3, r7
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	605a      	str	r2, [r3, #4]
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	611a      	str	r2, [r3, #16]
 800499e:	615a      	str	r2, [r3, #20]
 80049a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80049a2:	4b2e      	ldr	r3, [pc, #184]	; (8004a5c <MX_TIM2_Init+0xec>)
 80049a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80049a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 80049aa:	4b2c      	ldr	r3, [pc, #176]	; (8004a5c <MX_TIM2_Init+0xec>)
 80049ac:	22c7      	movs	r2, #199	; 0xc7
 80049ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b0:	4b2a      	ldr	r3, [pc, #168]	; (8004a5c <MX_TIM2_Init+0xec>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 80049b6:	4b29      	ldr	r3, [pc, #164]	; (8004a5c <MX_TIM2_Init+0xec>)
 80049b8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80049bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049be:	4b27      	ldr	r3, [pc, #156]	; (8004a5c <MX_TIM2_Init+0xec>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049c4:	4b25      	ldr	r3, [pc, #148]	; (8004a5c <MX_TIM2_Init+0xec>)
 80049c6:	2280      	movs	r2, #128	; 0x80
 80049c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80049ca:	4824      	ldr	r0, [pc, #144]	; (8004a5c <MX_TIM2_Init+0xec>)
 80049cc:	f007 f8e5 	bl	800bb9a <HAL_TIM_Base_Init>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80049d6:	f7ff fa93 	bl	8003f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80049e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049e4:	4619      	mov	r1, r3
 80049e6:	481d      	ldr	r0, [pc, #116]	; (8004a5c <MX_TIM2_Init+0xec>)
 80049e8:	f007 fd78 	bl	800c4dc <HAL_TIM_ConfigClockSource>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80049f2:	f7ff fa85 	bl	8003f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80049f6:	4819      	ldr	r0, [pc, #100]	; (8004a5c <MX_TIM2_Init+0xec>)
 80049f8:	f007 f9cd 	bl	800bd96 <HAL_TIM_PWM_Init>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004a02:	f7ff fa7d 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a0e:	f107 031c 	add.w	r3, r7, #28
 8004a12:	4619      	mov	r1, r3
 8004a14:	4811      	ldr	r0, [pc, #68]	; (8004a5c <MX_TIM2_Init+0xec>)
 8004a16:	f008 fab5 	bl	800cf84 <HAL_TIMEx_MasterConfigSynchronization>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004a20:	f7ff fa6e 	bl	8003f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a24:	2360      	movs	r3, #96	; 0x60
 8004a26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8004a28:	f240 1339 	movw	r3, #313	; 0x139
 8004a2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a36:	463b      	mov	r3, r7
 8004a38:	2208      	movs	r2, #8
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4807      	ldr	r0, [pc, #28]	; (8004a5c <MX_TIM2_Init+0xec>)
 8004a3e:	f007 fc39 	bl	800c2b4 <HAL_TIM_PWM_ConfigChannel>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004a48:	f7ff fa5a 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004a4c:	4803      	ldr	r0, [pc, #12]	; (8004a5c <MX_TIM2_Init+0xec>)
 8004a4e:	f000 fc0b 	bl	8005268 <HAL_TIM_MspPostInit>

}
 8004a52:	bf00      	nop
 8004a54:	3738      	adds	r7, #56	; 0x38
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	24000b20 	.word	0x24000b20

08004a60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08e      	sub	sp, #56	; 0x38
 8004a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	605a      	str	r2, [r3, #4]
 8004a70:	609a      	str	r2, [r3, #8]
 8004a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a74:	f107 031c 	add.w	r3, r7, #28
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a80:	463b      	mov	r3, r7
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	605a      	str	r2, [r3, #4]
 8004a88:	609a      	str	r2, [r3, #8]
 8004a8a:	60da      	str	r2, [r3, #12]
 8004a8c:	611a      	str	r2, [r3, #16]
 8004a8e:	615a      	str	r2, [r3, #20]
 8004a90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004a92:	4b2d      	ldr	r3, [pc, #180]	; (8004b48 <MX_TIM3_Init+0xe8>)
 8004a94:	4a2d      	ldr	r2, [pc, #180]	; (8004b4c <MX_TIM3_Init+0xec>)
 8004a96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8004a98:	4b2b      	ldr	r3, [pc, #172]	; (8004b48 <MX_TIM3_Init+0xe8>)
 8004a9a:	22c7      	movs	r2, #199	; 0xc7
 8004a9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a9e:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <MX_TIM3_Init+0xe8>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8004aa4:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <MX_TIM3_Init+0xe8>)
 8004aa6:	f640 125f 	movw	r2, #2399	; 0x95f
 8004aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004aac:	4b26      	ldr	r3, [pc, #152]	; (8004b48 <MX_TIM3_Init+0xe8>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ab2:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <MX_TIM3_Init+0xe8>)
 8004ab4:	2280      	movs	r2, #128	; 0x80
 8004ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004ab8:	4823      	ldr	r0, [pc, #140]	; (8004b48 <MX_TIM3_Init+0xe8>)
 8004aba:	f007 f86e 	bl	800bb9a <HAL_TIM_Base_Init>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004ac4:	f7ff fa1c 	bl	8003f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	481c      	ldr	r0, [pc, #112]	; (8004b48 <MX_TIM3_Init+0xe8>)
 8004ad6:	f007 fd01 	bl	800c4dc <HAL_TIM_ConfigClockSource>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004ae0:	f7ff fa0e 	bl	8003f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004ae4:	4818      	ldr	r0, [pc, #96]	; (8004b48 <MX_TIM3_Init+0xe8>)
 8004ae6:	f007 f956 	bl	800bd96 <HAL_TIM_PWM_Init>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004af0:	f7ff fa06 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004afc:	f107 031c 	add.w	r3, r7, #28
 8004b00:	4619      	mov	r1, r3
 8004b02:	4811      	ldr	r0, [pc, #68]	; (8004b48 <MX_TIM3_Init+0xe8>)
 8004b04:	f008 fa3e 	bl	800cf84 <HAL_TIMEx_MasterConfigSynchronization>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004b0e:	f7ff f9f7 	bl	8003f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b12:	2360      	movs	r3, #96	; 0x60
 8004b14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b22:	463b      	mov	r3, r7
 8004b24:	2200      	movs	r2, #0
 8004b26:	4619      	mov	r1, r3
 8004b28:	4807      	ldr	r0, [pc, #28]	; (8004b48 <MX_TIM3_Init+0xe8>)
 8004b2a:	f007 fbc3 	bl	800c2b4 <HAL_TIM_PWM_ConfigChannel>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004b34:	f7ff f9e4 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004b38:	4803      	ldr	r0, [pc, #12]	; (8004b48 <MX_TIM3_Init+0xe8>)
 8004b3a:	f000 fb95 	bl	8005268 <HAL_TIM_MspPostInit>

}
 8004b3e:	bf00      	nop
 8004b40:	3738      	adds	r7, #56	; 0x38
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	240009f0 	.word	0x240009f0
 8004b4c:	40000400 	.word	0x40000400

08004b50 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08e      	sub	sp, #56	; 0x38
 8004b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	605a      	str	r2, [r3, #4]
 8004b60:	609a      	str	r2, [r3, #8]
 8004b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b64:	f107 031c 	add.w	r3, r7, #28
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b70:	463b      	mov	r3, r7
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	605a      	str	r2, [r3, #4]
 8004b78:	609a      	str	r2, [r3, #8]
 8004b7a:	60da      	str	r2, [r3, #12]
 8004b7c:	611a      	str	r2, [r3, #16]
 8004b7e:	615a      	str	r2, [r3, #20]
 8004b80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004b82:	4b2d      	ldr	r3, [pc, #180]	; (8004c38 <MX_TIM4_Init+0xe8>)
 8004b84:	4a2d      	ldr	r2, [pc, #180]	; (8004c3c <MX_TIM4_Init+0xec>)
 8004b86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8004b88:	4b2b      	ldr	r3, [pc, #172]	; (8004c38 <MX_TIM4_Init+0xe8>)
 8004b8a:	22ef      	movs	r2, #239	; 0xef
 8004b8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b8e:	4b2a      	ldr	r3, [pc, #168]	; (8004c38 <MX_TIM4_Init+0xe8>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8004b94:	4b28      	ldr	r3, [pc, #160]	; (8004c38 <MX_TIM4_Init+0xe8>)
 8004b96:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004b9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b9c:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <MX_TIM4_Init+0xe8>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ba2:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <MX_TIM4_Init+0xe8>)
 8004ba4:	2280      	movs	r2, #128	; 0x80
 8004ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004ba8:	4823      	ldr	r0, [pc, #140]	; (8004c38 <MX_TIM4_Init+0xe8>)
 8004baa:	f006 fff6 	bl	800bb9a <HAL_TIM_Base_Init>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004bb4:	f7ff f9a4 	bl	8003f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	481c      	ldr	r0, [pc, #112]	; (8004c38 <MX_TIM4_Init+0xe8>)
 8004bc6:	f007 fc89 	bl	800c4dc <HAL_TIM_ConfigClockSource>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004bd0:	f7ff f996 	bl	8003f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004bd4:	4818      	ldr	r0, [pc, #96]	; (8004c38 <MX_TIM4_Init+0xe8>)
 8004bd6:	f007 f8de 	bl	800bd96 <HAL_TIM_PWM_Init>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004be0:	f7ff f98e 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004bec:	f107 031c 	add.w	r3, r7, #28
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4811      	ldr	r0, [pc, #68]	; (8004c38 <MX_TIM4_Init+0xe8>)
 8004bf4:	f008 f9c6 	bl	800cf84 <HAL_TIMEx_MasterConfigSynchronization>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004bfe:	f7ff f97f 	bl	8003f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c02:	2360      	movs	r3, #96	; 0x60
 8004c04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c12:	463b      	mov	r3, r7
 8004c14:	2208      	movs	r2, #8
 8004c16:	4619      	mov	r1, r3
 8004c18:	4807      	ldr	r0, [pc, #28]	; (8004c38 <MX_TIM4_Init+0xe8>)
 8004c1a:	f007 fb4b 	bl	800c2b4 <HAL_TIM_PWM_ConfigChannel>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004c24:	f7ff f96c 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004c28:	4803      	ldr	r0, [pc, #12]	; (8004c38 <MX_TIM4_Init+0xe8>)
 8004c2a:	f000 fb1d 	bl	8005268 <HAL_TIM_MspPostInit>

}
 8004c2e:	bf00      	nop
 8004c30:	3738      	adds	r7, #56	; 0x38
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	2400090c 	.word	0x2400090c
 8004c3c:	40000800 	.word	0x40000800

08004c40 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c46:	f107 0310 	add.w	r3, r7, #16
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	605a      	str	r2, [r3, #4]
 8004c50:	609a      	str	r2, [r3, #8]
 8004c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c54:	1d3b      	adds	r3, r7, #4
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	605a      	str	r2, [r3, #4]
 8004c5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004c5e:	4b1d      	ldr	r3, [pc, #116]	; (8004cd4 <MX_TIM5_Init+0x94>)
 8004c60:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <MX_TIM5_Init+0x98>)
 8004c62:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8004c64:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <MX_TIM5_Init+0x94>)
 8004c66:	22c7      	movs	r2, #199	; 0xc7
 8004c68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c6a:	4b1a      	ldr	r3, [pc, #104]	; (8004cd4 <MX_TIM5_Init+0x94>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8004c70:	4b18      	ldr	r3, [pc, #96]	; (8004cd4 <MX_TIM5_Init+0x94>)
 8004c72:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004c76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c78:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <MX_TIM5_Init+0x94>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c7e:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <MX_TIM5_Init+0x94>)
 8004c80:	2280      	movs	r2, #128	; 0x80
 8004c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004c84:	4813      	ldr	r0, [pc, #76]	; (8004cd4 <MX_TIM5_Init+0x94>)
 8004c86:	f006 ff88 	bl	800bb9a <HAL_TIM_Base_Init>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004c90:	f7ff f936 	bl	8003f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004c9a:	f107 0310 	add.w	r3, r7, #16
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	480c      	ldr	r0, [pc, #48]	; (8004cd4 <MX_TIM5_Init+0x94>)
 8004ca2:	f007 fc1b 	bl	800c4dc <HAL_TIM_ConfigClockSource>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004cac:	f7ff f928 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4805      	ldr	r0, [pc, #20]	; (8004cd4 <MX_TIM5_Init+0x94>)
 8004cbe:	f008 f961 	bl	800cf84 <HAL_TIMEx_MasterConfigSynchronization>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004cc8:	f7ff f91a 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004ccc:	bf00      	nop
 8004cce:	3720      	adds	r7, #32
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	240009a4 	.word	0x240009a4
 8004cd8:	40000c00 	.word	0x40000c00

08004cdc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ce2:	1d3b      	adds	r3, r7, #4
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	605a      	str	r2, [r3, #4]
 8004cea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004cec:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <MX_TIM6_Init+0x64>)
 8004cee:	4a15      	ldr	r2, [pc, #84]	; (8004d44 <MX_TIM6_Init+0x68>)
 8004cf0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8004cf2:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <MX_TIM6_Init+0x64>)
 8004cf4:	22c7      	movs	r2, #199	; 0xc7
 8004cf6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf8:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <MX_TIM6_Init+0x64>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <MX_TIM6_Init+0x64>)
 8004d00:	f241 726f 	movw	r2, #5999	; 0x176f
 8004d04:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d06:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <MX_TIM6_Init+0x64>)
 8004d08:	2280      	movs	r2, #128	; 0x80
 8004d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004d0c:	480c      	ldr	r0, [pc, #48]	; (8004d40 <MX_TIM6_Init+0x64>)
 8004d0e:	f006 ff44 	bl	800bb9a <HAL_TIM_Base_Init>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004d18:	f7ff f8f2 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004d24:	1d3b      	adds	r3, r7, #4
 8004d26:	4619      	mov	r1, r3
 8004d28:	4805      	ldr	r0, [pc, #20]	; (8004d40 <MX_TIM6_Init+0x64>)
 8004d2a:	f008 f92b 	bl	800cf84 <HAL_TIMEx_MasterConfigSynchronization>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004d34:	f7ff f8e4 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	24000a88 	.word	0x24000a88
 8004d44:	40001000 	.word	0x40001000

08004d48 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d4e:	1d3b      	adds	r3, r7, #4
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	605a      	str	r2, [r3, #4]
 8004d56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004d58:	4b14      	ldr	r3, [pc, #80]	; (8004dac <MX_TIM7_Init+0x64>)
 8004d5a:	4a15      	ldr	r2, [pc, #84]	; (8004db0 <MX_TIM7_Init+0x68>)
 8004d5c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8004d5e:	4b13      	ldr	r3, [pc, #76]	; (8004dac <MX_TIM7_Init+0x64>)
 8004d60:	22c7      	movs	r2, #199	; 0xc7
 8004d62:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d64:	4b11      	ldr	r3, [pc, #68]	; (8004dac <MX_TIM7_Init+0x64>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8004d6a:	4b10      	ldr	r3, [pc, #64]	; (8004dac <MX_TIM7_Init+0x64>)
 8004d6c:	f240 42af 	movw	r2, #1199	; 0x4af
 8004d70:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d72:	4b0e      	ldr	r3, [pc, #56]	; (8004dac <MX_TIM7_Init+0x64>)
 8004d74:	2280      	movs	r2, #128	; 0x80
 8004d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004d78:	480c      	ldr	r0, [pc, #48]	; (8004dac <MX_TIM7_Init+0x64>)
 8004d7a:	f006 ff0e 	bl	800bb9a <HAL_TIM_Base_Init>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004d84:	f7ff f8bc 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004d90:	1d3b      	adds	r3, r7, #4
 8004d92:	4619      	mov	r1, r3
 8004d94:	4805      	ldr	r0, [pc, #20]	; (8004dac <MX_TIM7_Init+0x64>)
 8004d96:	f008 f8f5 	bl	800cf84 <HAL_TIMEx_MasterConfigSynchronization>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004da0:	f7ff f8ae 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	24000c04 	.word	0x24000c04
 8004db0:	40001400 	.word	0x40001400

08004db4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dba:	463b      	mov	r3, r7
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	605a      	str	r2, [r3, #4]
 8004dc2:	609a      	str	r2, [r3, #8]
 8004dc4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004dc6:	4b16      	ldr	r3, [pc, #88]	; (8004e20 <MX_TIM12_Init+0x6c>)
 8004dc8:	4a16      	ldr	r2, [pc, #88]	; (8004e24 <MX_TIM12_Init+0x70>)
 8004dca:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8004dcc:	4b14      	ldr	r3, [pc, #80]	; (8004e20 <MX_TIM12_Init+0x6c>)
 8004dce:	22c7      	movs	r2, #199	; 0xc7
 8004dd0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dd2:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <MX_TIM12_Init+0x6c>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8004dd8:	4b11      	ldr	r3, [pc, #68]	; (8004e20 <MX_TIM12_Init+0x6c>)
 8004dda:	f240 2257 	movw	r2, #599	; 0x257
 8004dde:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004de0:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <MX_TIM12_Init+0x6c>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004de6:	4b0e      	ldr	r3, [pc, #56]	; (8004e20 <MX_TIM12_Init+0x6c>)
 8004de8:	2280      	movs	r2, #128	; 0x80
 8004dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004dec:	480c      	ldr	r0, [pc, #48]	; (8004e20 <MX_TIM12_Init+0x6c>)
 8004dee:	f006 fed4 	bl	800bb9a <HAL_TIM_Base_Init>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8004df8:	f7ff f882 	bl	8003f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e00:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004e02:	463b      	mov	r3, r7
 8004e04:	4619      	mov	r1, r3
 8004e06:	4806      	ldr	r0, [pc, #24]	; (8004e20 <MX_TIM12_Init+0x6c>)
 8004e08:	f007 fb68 	bl	800c4dc <HAL_TIM_ConfigClockSource>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8004e12:	f7ff f875 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	24000bb8 	.word	0x24000bb8
 8004e24:	40001800 	.word	0x40001800

08004e28 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004e2c:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <MX_TIM13_Init+0x40>)
 8004e2e:	4a0f      	ldr	r2, [pc, #60]	; (8004e6c <MX_TIM13_Init+0x44>)
 8004e30:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8004e32:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <MX_TIM13_Init+0x40>)
 8004e34:	22c7      	movs	r2, #199	; 0xc7
 8004e36:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e38:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <MX_TIM13_Init+0x40>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <MX_TIM13_Init+0x40>)
 8004e40:	f240 2257 	movw	r2, #599	; 0x257
 8004e44:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <MX_TIM13_Init+0x40>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e4c:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <MX_TIM13_Init+0x40>)
 8004e4e:	2280      	movs	r2, #128	; 0x80
 8004e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004e52:	4805      	ldr	r0, [pc, #20]	; (8004e68 <MX_TIM13_Init+0x40>)
 8004e54:	f006 fea1 	bl	800bb9a <HAL_TIM_Base_Init>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004e5e:	f7ff f84f 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	24000a3c 	.word	0x24000a3c
 8004e6c:	40001c00 	.word	0x40001c00

08004e70 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004e74:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <MX_TIM14_Init+0x40>)
 8004e76:	4a0f      	ldr	r2, [pc, #60]	; (8004eb4 <MX_TIM14_Init+0x44>)
 8004e78:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8004e7a:	4b0d      	ldr	r3, [pc, #52]	; (8004eb0 <MX_TIM14_Init+0x40>)
 8004e7c:	22c7      	movs	r2, #199	; 0xc7
 8004e7e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <MX_TIM14_Init+0x40>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8004e86:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <MX_TIM14_Init+0x40>)
 8004e88:	f640 125f 	movw	r2, #2399	; 0x95f
 8004e8c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e8e:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <MX_TIM14_Init+0x40>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <MX_TIM14_Init+0x40>)
 8004e96:	2280      	movs	r2, #128	; 0x80
 8004e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004e9a:	4805      	ldr	r0, [pc, #20]	; (8004eb0 <MX_TIM14_Init+0x40>)
 8004e9c:	f006 fe7d 	bl	800bb9a <HAL_TIM_Base_Init>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004ea6:	f7ff f82b 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004eaa:	bf00      	nop
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	24000b6c 	.word	0x24000b6c
 8004eb4:	40002000 	.word	0x40002000

08004eb8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b09a      	sub	sp, #104	; 0x68
 8004ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ebe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	605a      	str	r2, [r3, #4]
 8004ec8:	609a      	str	r2, [r3, #8]
 8004eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ecc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ed8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	605a      	str	r2, [r3, #4]
 8004ee2:	609a      	str	r2, [r3, #8]
 8004ee4:	60da      	str	r2, [r3, #12]
 8004ee6:	611a      	str	r2, [r3, #16]
 8004ee8:	615a      	str	r2, [r3, #20]
 8004eea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004eec:	1d3b      	adds	r3, r7, #4
 8004eee:	222c      	movs	r2, #44	; 0x2c
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f00b f86c 	bl	800ffd0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004ef8:	4b3f      	ldr	r3, [pc, #252]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004efa:	4a40      	ldr	r2, [pc, #256]	; (8004ffc <MX_TIM15_Init+0x144>)
 8004efc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8004efe:	4b3e      	ldr	r3, [pc, #248]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004f00:	22ef      	movs	r2, #239	; 0xef
 8004f02:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f04:	4b3c      	ldr	r3, [pc, #240]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8004f0a:	4b3b      	ldr	r3, [pc, #236]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004f0c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004f10:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f12:	4b39      	ldr	r3, [pc, #228]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004f18:	4b37      	ldr	r3, [pc, #220]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f1e:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004f20:	2280      	movs	r2, #128	; 0x80
 8004f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004f24:	4834      	ldr	r0, [pc, #208]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004f26:	f006 fe38 	bl	800bb9a <HAL_TIM_Base_Init>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8004f30:	f7fe ffe6 	bl	8003f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f38:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004f3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f3e:	4619      	mov	r1, r3
 8004f40:	482d      	ldr	r0, [pc, #180]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004f42:	f007 facb 	bl	800c4dc <HAL_TIM_ConfigClockSource>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8004f4c:	f7fe ffd8 	bl	8003f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004f50:	4829      	ldr	r0, [pc, #164]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004f52:	f006 ff20 	bl	800bd96 <HAL_TIM_PWM_Init>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8004f5c:	f7fe ffd0 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f60:	2300      	movs	r3, #0
 8004f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f64:	2300      	movs	r3, #0
 8004f66:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004f68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4822      	ldr	r0, [pc, #136]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004f70:	f008 f808 	bl	800cf84 <HAL_TIMEx_MasterConfigSynchronization>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8004f7a:	f7fe ffc1 	bl	8003f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f7e:	2360      	movs	r3, #96	; 0x60
 8004f80:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8004f82:	f240 1339 	movw	r3, #313	; 0x139
 8004f86:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004f94:	2300      	movs	r3, #0
 8004f96:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4814      	ldr	r0, [pc, #80]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004fa6:	f007 f985 	bl	800c2b4 <HAL_TIM_PWM_ConfigChannel>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8004fb0:	f7fe ffa6 	bl	8003f00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004fd6:	1d3b      	adds	r3, r7, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4807      	ldr	r0, [pc, #28]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004fdc:	f008 f860 	bl	800d0a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8004fe6:	f7fe ff8b 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004fea:	4803      	ldr	r0, [pc, #12]	; (8004ff8 <MX_TIM15_Init+0x140>)
 8004fec:	f000 f93c 	bl	8005268 <HAL_TIM_MspPostInit>

}
 8004ff0:	bf00      	nop
 8004ff2:	3768      	adds	r7, #104	; 0x68
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	24000958 	.word	0x24000958
 8004ffc:	40014000 	.word	0x40014000

08005000 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08e      	sub	sp, #56	; 0x38
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a8b      	ldr	r2, [pc, #556]	; (800523c <HAL_TIM_Base_MspInit+0x23c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10f      	bne.n	8005032 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005012:	4b8b      	ldr	r3, [pc, #556]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005018:	4a89      	ldr	r2, [pc, #548]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005022:	4b87      	ldr	r3, [pc, #540]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	637b      	str	r3, [r7, #52]	; 0x34
 800502e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8005030:	e100      	b.n	8005234 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM2)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503a:	d10f      	bne.n	800505c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800503c:	4b80      	ldr	r3, [pc, #512]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 800503e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005042:	4a7f      	ldr	r2, [pc, #508]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800504c:	4b7c      	ldr	r3, [pc, #496]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 800504e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	633b      	str	r3, [r7, #48]	; 0x30
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800505a:	e0eb      	b.n	8005234 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM3)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a78      	ldr	r2, [pc, #480]	; (8005244 <HAL_TIM_Base_MspInit+0x244>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d10f      	bne.n	8005086 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005066:	4b76      	ldr	r3, [pc, #472]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800506c:	4a74      	ldr	r2, [pc, #464]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 800506e:	f043 0302 	orr.w	r3, r3, #2
 8005072:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005076:	4b72      	ldr	r3, [pc, #456]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005084:	e0d6      	b.n	8005234 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM4)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a6f      	ldr	r2, [pc, #444]	; (8005248 <HAL_TIM_Base_MspInit+0x248>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10f      	bne.n	80050b0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005090:	4b6b      	ldr	r3, [pc, #428]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005096:	4a6a      	ldr	r2, [pc, #424]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005098:	f043 0304 	orr.w	r3, r3, #4
 800509c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050a0:	4b67      	ldr	r3, [pc, #412]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 80050a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80050ae:	e0c1      	b.n	8005234 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM5)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a65      	ldr	r2, [pc, #404]	; (800524c <HAL_TIM_Base_MspInit+0x24c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d117      	bne.n	80050ea <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80050ba:	4b61      	ldr	r3, [pc, #388]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 80050bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050c0:	4a5f      	ldr	r2, [pc, #380]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 80050c2:	f043 0308 	orr.w	r3, r3, #8
 80050c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050ca:	4b5d      	ldr	r3, [pc, #372]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 80050cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80050d8:	2200      	movs	r2, #0
 80050da:	2100      	movs	r1, #0
 80050dc:	2032      	movs	r0, #50	; 0x32
 80050de:	f000 fe8a 	bl	8005df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80050e2:	2032      	movs	r0, #50	; 0x32
 80050e4:	f000 fea1 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 80050e8:	e0a4      	b.n	8005234 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM6)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a58      	ldr	r2, [pc, #352]	; (8005250 <HAL_TIM_Base_MspInit+0x250>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d117      	bne.n	8005124 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80050f4:	4b52      	ldr	r3, [pc, #328]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 80050f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050fa:	4a51      	ldr	r2, [pc, #324]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 80050fc:	f043 0310 	orr.w	r3, r3, #16
 8005100:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005104:	4b4e      	ldr	r3, [pc, #312]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	623b      	str	r3, [r7, #32]
 8005110:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005112:	2200      	movs	r2, #0
 8005114:	2100      	movs	r1, #0
 8005116:	2036      	movs	r0, #54	; 0x36
 8005118:	f000 fe6d 	bl	8005df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800511c:	2036      	movs	r0, #54	; 0x36
 800511e:	f000 fe84 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 8005122:	e087      	b.n	8005234 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM7)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a4a      	ldr	r2, [pc, #296]	; (8005254 <HAL_TIM_Base_MspInit+0x254>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d117      	bne.n	800515e <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800512e:	4b44      	ldr	r3, [pc, #272]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005134:	4a42      	ldr	r2, [pc, #264]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005136:	f043 0320 	orr.w	r3, r3, #32
 800513a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800513e:	4b40      	ldr	r3, [pc, #256]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800514c:	2200      	movs	r2, #0
 800514e:	2100      	movs	r1, #0
 8005150:	2037      	movs	r0, #55	; 0x37
 8005152:	f000 fe50 	bl	8005df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005156:	2037      	movs	r0, #55	; 0x37
 8005158:	f000 fe67 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 800515c:	e06a      	b.n	8005234 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM12)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a3d      	ldr	r2, [pc, #244]	; (8005258 <HAL_TIM_Base_MspInit+0x258>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d117      	bne.n	8005198 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005168:	4b35      	ldr	r3, [pc, #212]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 800516a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800516e:	4a34      	ldr	r2, [pc, #208]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005174:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005178:	4b31      	ldr	r3, [pc, #196]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 800517a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005186:	2200      	movs	r2, #0
 8005188:	2100      	movs	r1, #0
 800518a:	202b      	movs	r0, #43	; 0x2b
 800518c:	f000 fe33 	bl	8005df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005190:	202b      	movs	r0, #43	; 0x2b
 8005192:	f000 fe4a 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 8005196:	e04d      	b.n	8005234 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM13)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2f      	ldr	r2, [pc, #188]	; (800525c <HAL_TIM_Base_MspInit+0x25c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d117      	bne.n	80051d2 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80051a2:	4b27      	ldr	r3, [pc, #156]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 80051a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051a8:	4a25      	ldr	r2, [pc, #148]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 80051aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051b2:	4b23      	ldr	r3, [pc, #140]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 80051b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80051c0:	2200      	movs	r2, #0
 80051c2:	2100      	movs	r1, #0
 80051c4:	202c      	movs	r0, #44	; 0x2c
 80051c6:	f000 fe16 	bl	8005df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80051ca:	202c      	movs	r0, #44	; 0x2c
 80051cc:	f000 fe2d 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 80051d0:	e030      	b.n	8005234 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM14)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a22      	ldr	r2, [pc, #136]	; (8005260 <HAL_TIM_Base_MspInit+0x260>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d117      	bne.n	800520c <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80051dc:	4b18      	ldr	r3, [pc, #96]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 80051de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051e2:	4a17      	ldr	r2, [pc, #92]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 80051e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051ec:	4b14      	ldr	r3, [pc, #80]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 80051ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80051fa:	2200      	movs	r2, #0
 80051fc:	2100      	movs	r1, #0
 80051fe:	202d      	movs	r0, #45	; 0x2d
 8005200:	f000 fdf9 	bl	8005df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005204:	202d      	movs	r0, #45	; 0x2d
 8005206:	f000 fe10 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 800520a:	e013      	b.n	8005234 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM15)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a14      	ldr	r2, [pc, #80]	; (8005264 <HAL_TIM_Base_MspInit+0x264>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d10e      	bne.n	8005234 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005216:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800521c:	4a08      	ldr	r2, [pc, #32]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 800521e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005222:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005226:	4b06      	ldr	r3, [pc, #24]	; (8005240 <HAL_TIM_Base_MspInit+0x240>)
 8005228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800522c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	68fb      	ldr	r3, [r7, #12]
}
 8005234:	bf00      	nop
 8005236:	3738      	adds	r7, #56	; 0x38
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40010000 	.word	0x40010000
 8005240:	58024400 	.word	0x58024400
 8005244:	40000400 	.word	0x40000400
 8005248:	40000800 	.word	0x40000800
 800524c:	40000c00 	.word	0x40000c00
 8005250:	40001000 	.word	0x40001000
 8005254:	40001400 	.word	0x40001400
 8005258:	40001800 	.word	0x40001800
 800525c:	40001c00 	.word	0x40001c00
 8005260:	40002000 	.word	0x40002000
 8005264:	40014000 	.word	0x40014000

08005268 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08c      	sub	sp, #48	; 0x30
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005270:	f107 031c 	add.w	r3, r7, #28
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	609a      	str	r2, [r3, #8]
 800527c:	60da      	str	r2, [r3, #12]
 800527e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a5e      	ldr	r2, [pc, #376]	; (8005400 <HAL_TIM_MspPostInit+0x198>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d120      	bne.n	80052cc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800528a:	4b5e      	ldr	r3, [pc, #376]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 800528c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005290:	4a5c      	ldr	r2, [pc, #368]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 8005292:	f043 0310 	orr.w	r3, r3, #16
 8005296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800529a:	4b5a      	ldr	r3, [pc, #360]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 800529c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	61bb      	str	r3, [r7, #24]
 80052a6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 80052a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ae:	2302      	movs	r3, #2
 80052b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052b6:	2300      	movs	r3, #0
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80052ba:	2301      	movs	r3, #1
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 80052be:	f107 031c 	add.w	r3, r7, #28
 80052c2:	4619      	mov	r1, r3
 80052c4:	4850      	ldr	r0, [pc, #320]	; (8005408 <HAL_TIM_MspPostInit+0x1a0>)
 80052c6:	f003 fe0f 	bl	8008ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80052ca:	e094      	b.n	80053f6 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d4:	d120      	bne.n	8005318 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052d6:	4b4b      	ldr	r3, [pc, #300]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 80052d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052dc:	4a49      	ldr	r2, [pc, #292]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 80052de:	f043 0302 	orr.w	r3, r3, #2
 80052e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052e6:	4b47      	ldr	r3, [pc, #284]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 80052e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 80052f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052fa:	2302      	movs	r3, #2
 80052fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005302:	2300      	movs	r3, #0
 8005304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005306:	2301      	movs	r3, #1
 8005308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800530a:	f107 031c 	add.w	r3, r7, #28
 800530e:	4619      	mov	r1, r3
 8005310:	483e      	ldr	r0, [pc, #248]	; (800540c <HAL_TIM_MspPostInit+0x1a4>)
 8005312:	f003 fde9 	bl	8008ee8 <HAL_GPIO_Init>
}
 8005316:	e06e      	b.n	80053f6 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a3c      	ldr	r2, [pc, #240]	; (8005410 <HAL_TIM_MspPostInit+0x1a8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d11f      	bne.n	8005362 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005322:	4b38      	ldr	r3, [pc, #224]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 8005324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005328:	4a36      	ldr	r2, [pc, #216]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005332:	4b34      	ldr	r3, [pc, #208]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 8005334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8005340:	2340      	movs	r3, #64	; 0x40
 8005342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005344:	2302      	movs	r3, #2
 8005346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005348:	2300      	movs	r3, #0
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800534c:	2300      	movs	r3, #0
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005350:	2302      	movs	r3, #2
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8005354:	f107 031c 	add.w	r3, r7, #28
 8005358:	4619      	mov	r1, r3
 800535a:	482e      	ldr	r0, [pc, #184]	; (8005414 <HAL_TIM_MspPostInit+0x1ac>)
 800535c:	f003 fdc4 	bl	8008ee8 <HAL_GPIO_Init>
}
 8005360:	e049      	b.n	80053f6 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a2c      	ldr	r2, [pc, #176]	; (8005418 <HAL_TIM_MspPostInit+0x1b0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d120      	bne.n	80053ae <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800536c:	4b25      	ldr	r3, [pc, #148]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 800536e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005372:	4a24      	ldr	r2, [pc, #144]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 8005374:	f043 0302 	orr.w	r3, r3, #2
 8005378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800537c:	4b21      	ldr	r3, [pc, #132]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 800537e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 800538a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800538e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005390:	2302      	movs	r3, #2
 8005392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005394:	2300      	movs	r3, #0
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005398:	2300      	movs	r3, #0
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800539c:	2302      	movs	r3, #2
 800539e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80053a0:	f107 031c 	add.w	r3, r7, #28
 80053a4:	4619      	mov	r1, r3
 80053a6:	4819      	ldr	r0, [pc, #100]	; (800540c <HAL_TIM_MspPostInit+0x1a4>)
 80053a8:	f003 fd9e 	bl	8008ee8 <HAL_GPIO_Init>
}
 80053ac:	e023      	b.n	80053f6 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1a      	ldr	r2, [pc, #104]	; (800541c <HAL_TIM_MspPostInit+0x1b4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d11e      	bne.n	80053f6 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80053b8:	4b12      	ldr	r3, [pc, #72]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 80053ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053be:	4a11      	ldr	r2, [pc, #68]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 80053c0:	f043 0310 	orr.w	r3, r3, #16
 80053c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053c8:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <HAL_TIM_MspPostInit+0x19c>)
 80053ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	60bb      	str	r3, [r7, #8]
 80053d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 80053d6:	2340      	movs	r3, #64	; 0x40
 80053d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053da:	2302      	movs	r3, #2
 80053dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e2:	2300      	movs	r3, #0
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80053e6:	2304      	movs	r3, #4
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 80053ea:	f107 031c 	add.w	r3, r7, #28
 80053ee:	4619      	mov	r1, r3
 80053f0:	4805      	ldr	r0, [pc, #20]	; (8005408 <HAL_TIM_MspPostInit+0x1a0>)
 80053f2:	f003 fd79 	bl	8008ee8 <HAL_GPIO_Init>
}
 80053f6:	bf00      	nop
 80053f8:	3730      	adds	r7, #48	; 0x30
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000
 8005404:	58024400 	.word	0x58024400
 8005408:	58021000 	.word	0x58021000
 800540c:	58020400 	.word	0x58020400
 8005410:	40000400 	.word	0x40000400
 8005414:	58020000 	.word	0x58020000
 8005418:	40000800 	.word	0x40000800
 800541c:	40014000 	.word	0x40014000

08005420 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005424:	4b25      	ldr	r3, [pc, #148]	; (80054bc <MX_UART4_Init+0x9c>)
 8005426:	4a26      	ldr	r2, [pc, #152]	; (80054c0 <MX_UART4_Init+0xa0>)
 8005428:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 800542a:	4b24      	ldr	r3, [pc, #144]	; (80054bc <MX_UART4_Init+0x9c>)
 800542c:	4a25      	ldr	r2, [pc, #148]	; (80054c4 <MX_UART4_Init+0xa4>)
 800542e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005430:	4b22      	ldr	r3, [pc, #136]	; (80054bc <MX_UART4_Init+0x9c>)
 8005432:	2200      	movs	r2, #0
 8005434:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005436:	4b21      	ldr	r3, [pc, #132]	; (80054bc <MX_UART4_Init+0x9c>)
 8005438:	2200      	movs	r2, #0
 800543a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800543c:	4b1f      	ldr	r3, [pc, #124]	; (80054bc <MX_UART4_Init+0x9c>)
 800543e:	2200      	movs	r2, #0
 8005440:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005442:	4b1e      	ldr	r3, [pc, #120]	; (80054bc <MX_UART4_Init+0x9c>)
 8005444:	220c      	movs	r2, #12
 8005446:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005448:	4b1c      	ldr	r3, [pc, #112]	; (80054bc <MX_UART4_Init+0x9c>)
 800544a:	2200      	movs	r2, #0
 800544c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800544e:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <MX_UART4_Init+0x9c>)
 8005450:	2200      	movs	r2, #0
 8005452:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005454:	4b19      	ldr	r3, [pc, #100]	; (80054bc <MX_UART4_Init+0x9c>)
 8005456:	2200      	movs	r2, #0
 8005458:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800545a:	4b18      	ldr	r3, [pc, #96]	; (80054bc <MX_UART4_Init+0x9c>)
 800545c:	2200      	movs	r2, #0
 800545e:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005460:	4b16      	ldr	r3, [pc, #88]	; (80054bc <MX_UART4_Init+0x9c>)
 8005462:	2208      	movs	r2, #8
 8005464:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005466:	4b15      	ldr	r3, [pc, #84]	; (80054bc <MX_UART4_Init+0x9c>)
 8005468:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800546c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800546e:	4813      	ldr	r0, [pc, #76]	; (80054bc <MX_UART4_Init+0x9c>)
 8005470:	f007 feb2 	bl	800d1d8 <HAL_UART_Init>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 800547a:	f7fe fd41 	bl	8003f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800547e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005482:	480e      	ldr	r0, [pc, #56]	; (80054bc <MX_UART4_Init+0x9c>)
 8005484:	f009 ff39 	bl	800f2fa <HAL_UARTEx_SetTxFifoThreshold>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 800548e:	f7fe fd37 	bl	8003f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005492:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8005496:	4809      	ldr	r0, [pc, #36]	; (80054bc <MX_UART4_Init+0x9c>)
 8005498:	f009 ff6d 	bl	800f376 <HAL_UARTEx_SetRxFifoThreshold>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 80054a2:	f7fe fd2d 	bl	8003f00 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80054a6:	4805      	ldr	r0, [pc, #20]	; (80054bc <MX_UART4_Init+0x9c>)
 80054a8:	f009 feb3 	bl	800f212 <HAL_UARTEx_EnableFifoMode>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 80054b2:	f7fe fd25 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80054b6:	bf00      	nop
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	24000f50 	.word	0x24000f50
 80054c0:	40004c00 	.word	0x40004c00
 80054c4:	001e8480 	.word	0x001e8480

080054c8 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80054cc:	4b23      	ldr	r3, [pc, #140]	; (800555c <MX_UART7_Init+0x94>)
 80054ce:	4a24      	ldr	r2, [pc, #144]	; (8005560 <MX_UART7_Init+0x98>)
 80054d0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80054d2:	4b22      	ldr	r3, [pc, #136]	; (800555c <MX_UART7_Init+0x94>)
 80054d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054d8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80054da:	4b20      	ldr	r3, [pc, #128]	; (800555c <MX_UART7_Init+0x94>)
 80054dc:	2200      	movs	r2, #0
 80054de:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80054e0:	4b1e      	ldr	r3, [pc, #120]	; (800555c <MX_UART7_Init+0x94>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80054e6:	4b1d      	ldr	r3, [pc, #116]	; (800555c <MX_UART7_Init+0x94>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80054ec:	4b1b      	ldr	r3, [pc, #108]	; (800555c <MX_UART7_Init+0x94>)
 80054ee:	220c      	movs	r2, #12
 80054f0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054f2:	4b1a      	ldr	r3, [pc, #104]	; (800555c <MX_UART7_Init+0x94>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80054f8:	4b18      	ldr	r3, [pc, #96]	; (800555c <MX_UART7_Init+0x94>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054fe:	4b17      	ldr	r3, [pc, #92]	; (800555c <MX_UART7_Init+0x94>)
 8005500:	2200      	movs	r2, #0
 8005502:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005504:	4b15      	ldr	r3, [pc, #84]	; (800555c <MX_UART7_Init+0x94>)
 8005506:	2200      	movs	r2, #0
 8005508:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800550a:	4b14      	ldr	r3, [pc, #80]	; (800555c <MX_UART7_Init+0x94>)
 800550c:	2200      	movs	r2, #0
 800550e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005510:	4812      	ldr	r0, [pc, #72]	; (800555c <MX_UART7_Init+0x94>)
 8005512:	f007 fe61 	bl	800d1d8 <HAL_UART_Init>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800551c:	f7fe fcf0 	bl	8003f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005520:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005524:	480d      	ldr	r0, [pc, #52]	; (800555c <MX_UART7_Init+0x94>)
 8005526:	f009 fee8 	bl	800f2fa <HAL_UARTEx_SetTxFifoThreshold>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8005530:	f7fe fce6 	bl	8003f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005534:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8005538:	4808      	ldr	r0, [pc, #32]	; (800555c <MX_UART7_Init+0x94>)
 800553a:	f009 ff1c 	bl	800f376 <HAL_UARTEx_SetRxFifoThreshold>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8005544:	f7fe fcdc 	bl	8003f00 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8005548:	4804      	ldr	r0, [pc, #16]	; (800555c <MX_UART7_Init+0x94>)
 800554a:	f009 fe62 	bl	800f212 <HAL_UARTEx_EnableFifoMode>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8005554:	f7fe fcd4 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005558:	bf00      	nop
 800555a:	bd80      	pop	{r7, pc}
 800555c:	24000cc8 	.word	0x24000cc8
 8005560:	40007800 	.word	0x40007800

08005564 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005568:	4b22      	ldr	r3, [pc, #136]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 800556a:	4a23      	ldr	r2, [pc, #140]	; (80055f8 <MX_USART3_UART_Init+0x94>)
 800556c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800556e:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 8005570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005574:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005576:	4b1f      	ldr	r3, [pc, #124]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 8005578:	2200      	movs	r2, #0
 800557a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800557c:	4b1d      	ldr	r3, [pc, #116]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 800557e:	2200      	movs	r2, #0
 8005580:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005582:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 8005584:	2200      	movs	r2, #0
 8005586:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005588:	4b1a      	ldr	r3, [pc, #104]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 800558a:	220c      	movs	r2, #12
 800558c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800558e:	4b19      	ldr	r3, [pc, #100]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 8005590:	2200      	movs	r2, #0
 8005592:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005594:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 8005596:	2200      	movs	r2, #0
 8005598:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800559a:	4b16      	ldr	r3, [pc, #88]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 800559c:	2200      	movs	r2, #0
 800559e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80055a0:	4b14      	ldr	r3, [pc, #80]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055a6:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80055ac:	4811      	ldr	r0, [pc, #68]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 80055ae:	f007 fe13 	bl	800d1d8 <HAL_UART_Init>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80055b8:	f7fe fca2 	bl	8003f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055bc:	2100      	movs	r1, #0
 80055be:	480d      	ldr	r0, [pc, #52]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 80055c0:	f009 fe9b 	bl	800f2fa <HAL_UARTEx_SetTxFifoThreshold>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80055ca:	f7fe fc99 	bl	8003f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055ce:	2100      	movs	r1, #0
 80055d0:	4808      	ldr	r0, [pc, #32]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 80055d2:	f009 fed0 	bl	800f376 <HAL_UARTEx_SetRxFifoThreshold>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80055dc:	f7fe fc90 	bl	8003f00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80055e0:	4804      	ldr	r0, [pc, #16]	; (80055f4 <MX_USART3_UART_Init+0x90>)
 80055e2:	f009 fe51 	bl	800f288 <HAL_UARTEx_DisableFifoMode>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80055ec:	f7fe fc88 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80055f0:	bf00      	nop
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	24000dd0 	.word	0x24000dd0
 80055f8:	40004800 	.word	0x40004800

080055fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b0bc      	sub	sp, #240	; 0xf0
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005604:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	60da      	str	r2, [r3, #12]
 8005612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005614:	f107 0320 	add.w	r3, r7, #32
 8005618:	22bc      	movs	r2, #188	; 0xbc
 800561a:	2100      	movs	r1, #0
 800561c:	4618      	mov	r0, r3
 800561e:	f00a fcd7 	bl	800ffd0 <memset>
  if(uartHandle->Instance==UART4)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4aa1      	ldr	r2, [pc, #644]	; (80058ac <HAL_UART_MspInit+0x2b0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	f040 80b7 	bne.w	800579c <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800562e:	2302      	movs	r3, #2
 8005630:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005632:	2300      	movs	r3, #0
 8005634:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005638:	f107 0320 	add.w	r3, r7, #32
 800563c:	4618      	mov	r0, r3
 800563e:	f004 fe29 	bl	800a294 <HAL_RCCEx_PeriphCLKConfig>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005648:	f7fe fc5a 	bl	8003f00 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800564c:	4b98      	ldr	r3, [pc, #608]	; (80058b0 <HAL_UART_MspInit+0x2b4>)
 800564e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005652:	4a97      	ldr	r2, [pc, #604]	; (80058b0 <HAL_UART_MspInit+0x2b4>)
 8005654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005658:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800565c:	4b94      	ldr	r3, [pc, #592]	; (80058b0 <HAL_UART_MspInit+0x2b4>)
 800565e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005666:	61fb      	str	r3, [r7, #28]
 8005668:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800566a:	4b91      	ldr	r3, [pc, #580]	; (80058b0 <HAL_UART_MspInit+0x2b4>)
 800566c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005670:	4a8f      	ldr	r2, [pc, #572]	; (80058b0 <HAL_UART_MspInit+0x2b4>)
 8005672:	f043 0308 	orr.w	r3, r3, #8
 8005676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800567a:	4b8d      	ldr	r3, [pc, #564]	; (80058b0 <HAL_UART_MspInit+0x2b4>)
 800567c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005688:	2303      	movs	r3, #3
 800568a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800568e:	2302      	movs	r3, #2
 8005690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005694:	2300      	movs	r3, #0
 8005696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800569a:	2300      	movs	r3, #0
 800569c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80056a0:	2308      	movs	r3, #8
 80056a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80056aa:	4619      	mov	r1, r3
 80056ac:	4881      	ldr	r0, [pc, #516]	; (80058b4 <HAL_UART_MspInit+0x2b8>)
 80056ae:	f003 fc1b 	bl	8008ee8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80056b2:	4b81      	ldr	r3, [pc, #516]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 80056b4:	4a81      	ldr	r2, [pc, #516]	; (80058bc <HAL_UART_MspInit+0x2c0>)
 80056b6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80056b8:	4b7f      	ldr	r3, [pc, #508]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 80056ba:	223f      	movs	r2, #63	; 0x3f
 80056bc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056be:	4b7e      	ldr	r3, [pc, #504]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056c4:	4b7c      	ldr	r3, [pc, #496]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056ca:	4b7b      	ldr	r3, [pc, #492]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 80056cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056d0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056d2:	4b79      	ldr	r3, [pc, #484]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056d8:	4b77      	ldr	r3, [pc, #476]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 80056da:	2200      	movs	r2, #0
 80056dc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80056de:	4b76      	ldr	r3, [pc, #472]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056e4:	4b74      	ldr	r3, [pc, #464]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80056ea:	4b73      	ldr	r3, [pc, #460]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 80056ec:	2204      	movs	r2, #4
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80056f0:	4b71      	ldr	r3, [pc, #452]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 80056f2:	2203      	movs	r2, #3
 80056f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80056f6:	4b70      	ldr	r3, [pc, #448]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80056fc:	4b6e      	ldr	r3, [pc, #440]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005702:	486d      	ldr	r0, [pc, #436]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 8005704:	f000 fdb6 	bl	8006274 <HAL_DMA_Init>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800570e:	f7fe fbf7 	bl	8003f00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a68      	ldr	r2, [pc, #416]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 8005716:	67da      	str	r2, [r3, #124]	; 0x7c
 8005718:	4a67      	ldr	r2, [pc, #412]	; (80058b8 <HAL_UART_MspInit+0x2bc>)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800571e:	4b68      	ldr	r3, [pc, #416]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 8005720:	4a68      	ldr	r2, [pc, #416]	; (80058c4 <HAL_UART_MspInit+0x2c8>)
 8005722:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8005724:	4b66      	ldr	r3, [pc, #408]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 8005726:	2240      	movs	r2, #64	; 0x40
 8005728:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800572a:	4b65      	ldr	r3, [pc, #404]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 800572c:	2240      	movs	r2, #64	; 0x40
 800572e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005730:	4b63      	ldr	r3, [pc, #396]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 8005732:	2200      	movs	r2, #0
 8005734:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005736:	4b62      	ldr	r3, [pc, #392]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 8005738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800573c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800573e:	4b60      	ldr	r3, [pc, #384]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 8005740:	2200      	movs	r2, #0
 8005742:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005744:	4b5e      	ldr	r3, [pc, #376]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 8005746:	2200      	movs	r2, #0
 8005748:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800574a:	4b5d      	ldr	r3, [pc, #372]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 800574c:	2200      	movs	r2, #0
 800574e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005750:	4b5b      	ldr	r3, [pc, #364]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 8005752:	2200      	movs	r2, #0
 8005754:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005756:	4b5a      	ldr	r3, [pc, #360]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 8005758:	2204      	movs	r2, #4
 800575a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800575c:	4b58      	ldr	r3, [pc, #352]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 800575e:	2203      	movs	r2, #3
 8005760:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005762:	4b57      	ldr	r3, [pc, #348]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 8005764:	2200      	movs	r2, #0
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005768:	4b55      	ldr	r3, [pc, #340]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 800576a:	2200      	movs	r2, #0
 800576c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800576e:	4854      	ldr	r0, [pc, #336]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 8005770:	f000 fd80 	bl	8006274 <HAL_DMA_Init>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800577a:	f7fe fbc1 	bl	8003f00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a4f      	ldr	r2, [pc, #316]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 8005782:	679a      	str	r2, [r3, #120]	; 0x78
 8005784:	4a4e      	ldr	r2, [pc, #312]	; (80058c0 <HAL_UART_MspInit+0x2c4>)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800578a:	2200      	movs	r2, #0
 800578c:	2100      	movs	r1, #0
 800578e:	2034      	movs	r0, #52	; 0x34
 8005790:	f000 fb31 	bl	8005df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005794:	2034      	movs	r0, #52	; 0x34
 8005796:	f000 fb48 	bl	8005e2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800579a:	e153      	b.n	8005a44 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a49      	ldr	r2, [pc, #292]	; (80058c8 <HAL_UART_MspInit+0x2cc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	f040 8098 	bne.w	80058d8 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80057a8:	2302      	movs	r3, #2
 80057aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057b2:	f107 0320 	add.w	r3, r7, #32
 80057b6:	4618      	mov	r0, r3
 80057b8:	f004 fd6c 	bl	800a294 <HAL_RCCEx_PeriphCLKConfig>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80057c2:	f7fe fb9d 	bl	8003f00 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80057c6:	4b3a      	ldr	r3, [pc, #232]	; (80058b0 <HAL_UART_MspInit+0x2b4>)
 80057c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057cc:	4a38      	ldr	r2, [pc, #224]	; (80058b0 <HAL_UART_MspInit+0x2b4>)
 80057ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80057d6:	4b36      	ldr	r3, [pc, #216]	; (80058b0 <HAL_UART_MspInit+0x2b4>)
 80057d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80057e4:	4b32      	ldr	r3, [pc, #200]	; (80058b0 <HAL_UART_MspInit+0x2b4>)
 80057e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057ea:	4a31      	ldr	r2, [pc, #196]	; (80058b0 <HAL_UART_MspInit+0x2b4>)
 80057ec:	f043 0310 	orr.w	r3, r3, #16
 80057f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057f4:	4b2e      	ldr	r3, [pc, #184]	; (80058b0 <HAL_UART_MspInit+0x2b4>)
 80057f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005802:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005806:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800580a:	2302      	movs	r3, #2
 800580c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005810:	2300      	movs	r3, #0
 8005812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005816:	2300      	movs	r3, #0
 8005818:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800581c:	2307      	movs	r3, #7
 800581e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005822:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005826:	4619      	mov	r1, r3
 8005828:	4828      	ldr	r0, [pc, #160]	; (80058cc <HAL_UART_MspInit+0x2d0>)
 800582a:	f003 fb5d 	bl	8008ee8 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 800582e:	4b28      	ldr	r3, [pc, #160]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 8005830:	4a28      	ldr	r2, [pc, #160]	; (80058d4 <HAL_UART_MspInit+0x2d8>)
 8005832:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8005834:	4b26      	ldr	r3, [pc, #152]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 8005836:	2250      	movs	r2, #80	; 0x50
 8005838:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800583a:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 800583c:	2240      	movs	r2, #64	; 0x40
 800583e:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005840:	4b23      	ldr	r3, [pc, #140]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 8005842:	2200      	movs	r2, #0
 8005844:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005846:	4b22      	ldr	r3, [pc, #136]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 8005848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800584c:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800584e:	4b20      	ldr	r3, [pc, #128]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 8005850:	2200      	movs	r2, #0
 8005852:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005854:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 8005856:	2200      	movs	r2, #0
 8005858:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800585a:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 800585c:	2200      	movs	r2, #0
 800585e:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 8005862:	2200      	movs	r2, #0
 8005864:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005866:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 8005868:	2204      	movs	r2, #4
 800586a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800586c:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 800586e:	2203      	movs	r2, #3
 8005870:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005872:	4b17      	ldr	r3, [pc, #92]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 8005874:	2200      	movs	r2, #0
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005878:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 800587a:	2200      	movs	r2, #0
 800587c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800587e:	4814      	ldr	r0, [pc, #80]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 8005880:	f000 fcf8 	bl	8006274 <HAL_DMA_Init>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_UART_MspInit+0x292>
      Error_Handler();
 800588a:	f7fe fb39 	bl	8003f00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a0f      	ldr	r2, [pc, #60]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 8005892:	679a      	str	r2, [r3, #120]	; 0x78
 8005894:	4a0e      	ldr	r2, [pc, #56]	; (80058d0 <HAL_UART_MspInit+0x2d4>)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800589a:	2200      	movs	r2, #0
 800589c:	2100      	movs	r1, #0
 800589e:	2052      	movs	r0, #82	; 0x52
 80058a0:	f000 faa9 	bl	8005df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80058a4:	2052      	movs	r0, #82	; 0x52
 80058a6:	f000 fac0 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 80058aa:	e0cb      	b.n	8005a44 <HAL_UART_MspInit+0x448>
 80058ac:	40004c00 	.word	0x40004c00
 80058b0:	58024400 	.word	0x58024400
 80058b4:	58020c00 	.word	0x58020c00
 80058b8:	24000c50 	.word	0x24000c50
 80058bc:	40020058 	.word	0x40020058
 80058c0:	24000fe0 	.word	0x24000fe0
 80058c4:	40020070 	.word	0x40020070
 80058c8:	40007800 	.word	0x40007800
 80058cc:	58021000 	.word	0x58021000
 80058d0:	24000ed8 	.word	0x24000ed8
 80058d4:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a5b      	ldr	r2, [pc, #364]	; (8005a4c <HAL_UART_MspInit+0x450>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	f040 80b0 	bne.w	8005a44 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80058e4:	2302      	movs	r3, #2
 80058e6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80058e8:	2300      	movs	r3, #0
 80058ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058ee:	f107 0320 	add.w	r3, r7, #32
 80058f2:	4618      	mov	r0, r3
 80058f4:	f004 fcce 	bl	800a294 <HAL_RCCEx_PeriphCLKConfig>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_UART_MspInit+0x306>
      Error_Handler();
 80058fe:	f7fe faff 	bl	8003f00 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005902:	4b53      	ldr	r3, [pc, #332]	; (8005a50 <HAL_UART_MspInit+0x454>)
 8005904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005908:	4a51      	ldr	r2, [pc, #324]	; (8005a50 <HAL_UART_MspInit+0x454>)
 800590a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800590e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005912:	4b4f      	ldr	r3, [pc, #316]	; (8005a50 <HAL_UART_MspInit+0x454>)
 8005914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005920:	4b4b      	ldr	r3, [pc, #300]	; (8005a50 <HAL_UART_MspInit+0x454>)
 8005922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005926:	4a4a      	ldr	r2, [pc, #296]	; (8005a50 <HAL_UART_MspInit+0x454>)
 8005928:	f043 0308 	orr.w	r3, r3, #8
 800592c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005930:	4b47      	ldr	r3, [pc, #284]	; (8005a50 <HAL_UART_MspInit+0x454>)
 8005932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	60bb      	str	r3, [r7, #8]
 800593c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800593e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005946:	2302      	movs	r3, #2
 8005948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594c:	2300      	movs	r3, #0
 800594e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005952:	2300      	movs	r3, #0
 8005954:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005958:	2307      	movs	r3, #7
 800595a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800595e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005962:	4619      	mov	r1, r3
 8005964:	483b      	ldr	r0, [pc, #236]	; (8005a54 <HAL_UART_MspInit+0x458>)
 8005966:	f003 fabf 	bl	8008ee8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800596a:	4b3b      	ldr	r3, [pc, #236]	; (8005a58 <HAL_UART_MspInit+0x45c>)
 800596c:	4a3b      	ldr	r2, [pc, #236]	; (8005a5c <HAL_UART_MspInit+0x460>)
 800596e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005970:	4b39      	ldr	r3, [pc, #228]	; (8005a58 <HAL_UART_MspInit+0x45c>)
 8005972:	222d      	movs	r2, #45	; 0x2d
 8005974:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005976:	4b38      	ldr	r3, [pc, #224]	; (8005a58 <HAL_UART_MspInit+0x45c>)
 8005978:	2200      	movs	r2, #0
 800597a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800597c:	4b36      	ldr	r3, [pc, #216]	; (8005a58 <HAL_UART_MspInit+0x45c>)
 800597e:	2200      	movs	r2, #0
 8005980:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005982:	4b35      	ldr	r3, [pc, #212]	; (8005a58 <HAL_UART_MspInit+0x45c>)
 8005984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005988:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800598a:	4b33      	ldr	r3, [pc, #204]	; (8005a58 <HAL_UART_MspInit+0x45c>)
 800598c:	2200      	movs	r2, #0
 800598e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005990:	4b31      	ldr	r3, [pc, #196]	; (8005a58 <HAL_UART_MspInit+0x45c>)
 8005992:	2200      	movs	r2, #0
 8005994:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005996:	4b30      	ldr	r3, [pc, #192]	; (8005a58 <HAL_UART_MspInit+0x45c>)
 8005998:	2200      	movs	r2, #0
 800599a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800599c:	4b2e      	ldr	r3, [pc, #184]	; (8005a58 <HAL_UART_MspInit+0x45c>)
 800599e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80059a2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059a4:	4b2c      	ldr	r3, [pc, #176]	; (8005a58 <HAL_UART_MspInit+0x45c>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80059aa:	482b      	ldr	r0, [pc, #172]	; (8005a58 <HAL_UART_MspInit+0x45c>)
 80059ac:	f000 fc62 	bl	8006274 <HAL_DMA_Init>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_UART_MspInit+0x3be>
      Error_Handler();
 80059b6:	f7fe faa3 	bl	8003f00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a26      	ldr	r2, [pc, #152]	; (8005a58 <HAL_UART_MspInit+0x45c>)
 80059be:	67da      	str	r2, [r3, #124]	; 0x7c
 80059c0:	4a25      	ldr	r2, [pc, #148]	; (8005a58 <HAL_UART_MspInit+0x45c>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80059c6:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <HAL_UART_MspInit+0x464>)
 80059c8:	4a26      	ldr	r2, [pc, #152]	; (8005a64 <HAL_UART_MspInit+0x468>)
 80059ca:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80059cc:	4b24      	ldr	r3, [pc, #144]	; (8005a60 <HAL_UART_MspInit+0x464>)
 80059ce:	222e      	movs	r2, #46	; 0x2e
 80059d0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059d2:	4b23      	ldr	r3, [pc, #140]	; (8005a60 <HAL_UART_MspInit+0x464>)
 80059d4:	2240      	movs	r2, #64	; 0x40
 80059d6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059d8:	4b21      	ldr	r3, [pc, #132]	; (8005a60 <HAL_UART_MspInit+0x464>)
 80059da:	2200      	movs	r2, #0
 80059dc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059de:	4b20      	ldr	r3, [pc, #128]	; (8005a60 <HAL_UART_MspInit+0x464>)
 80059e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059e4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059e6:	4b1e      	ldr	r3, [pc, #120]	; (8005a60 <HAL_UART_MspInit+0x464>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059ec:	4b1c      	ldr	r3, [pc, #112]	; (8005a60 <HAL_UART_MspInit+0x464>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80059f2:	4b1b      	ldr	r3, [pc, #108]	; (8005a60 <HAL_UART_MspInit+0x464>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80059f8:	4b19      	ldr	r3, [pc, #100]	; (8005a60 <HAL_UART_MspInit+0x464>)
 80059fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80059fe:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005a00:	4b17      	ldr	r3, [pc, #92]	; (8005a60 <HAL_UART_MspInit+0x464>)
 8005a02:	2204      	movs	r2, #4
 8005a04:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005a06:	4b16      	ldr	r3, [pc, #88]	; (8005a60 <HAL_UART_MspInit+0x464>)
 8005a08:	2203      	movs	r2, #3
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005a0c:	4b14      	ldr	r3, [pc, #80]	; (8005a60 <HAL_UART_MspInit+0x464>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005a12:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <HAL_UART_MspInit+0x464>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005a18:	4811      	ldr	r0, [pc, #68]	; (8005a60 <HAL_UART_MspInit+0x464>)
 8005a1a:	f000 fc2b 	bl	8006274 <HAL_DMA_Init>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8005a24:	f7fe fa6c 	bl	8003f00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a0d      	ldr	r2, [pc, #52]	; (8005a60 <HAL_UART_MspInit+0x464>)
 8005a2c:	679a      	str	r2, [r3, #120]	; 0x78
 8005a2e:	4a0c      	ldr	r2, [pc, #48]	; (8005a60 <HAL_UART_MspInit+0x464>)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005a34:	2200      	movs	r2, #0
 8005a36:	2100      	movs	r1, #0
 8005a38:	2027      	movs	r0, #39	; 0x27
 8005a3a:	f000 f9dc 	bl	8005df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a3e:	2027      	movs	r0, #39	; 0x27
 8005a40:	f000 f9f3 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 8005a44:	bf00      	nop
 8005a46:	37f0      	adds	r7, #240	; 0xf0
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40004800 	.word	0x40004800
 8005a50:	58024400 	.word	0x58024400
 8005a54:	58020c00 	.word	0x58020c00
 8005a58:	24000d58 	.word	0x24000d58
 8005a5c:	40020028 	.word	0x40020028
 8005a60:	24000e60 	.word	0x24000e60
 8005a64:	40020040 	.word	0x40020040

08005a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8005a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005aa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005a6c:	f7fe fe46 	bl	80046fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a70:	480c      	ldr	r0, [pc, #48]	; (8005aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005a72:	490d      	ldr	r1, [pc, #52]	; (8005aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005a74:	4a0d      	ldr	r2, [pc, #52]	; (8005aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a78:	e002      	b.n	8005a80 <LoopCopyDataInit>

08005a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a7e:	3304      	adds	r3, #4

08005a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a84:	d3f9      	bcc.n	8005a7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a86:	4a0a      	ldr	r2, [pc, #40]	; (8005ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005a88:	4c0a      	ldr	r4, [pc, #40]	; (8005ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a8c:	e001      	b.n	8005a92 <LoopFillZerobss>

08005a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a90:	3204      	adds	r2, #4

08005a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a94:	d3fb      	bcc.n	8005a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a96:	f00a fa69 	bl	800ff6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a9a:	f7fd ffb1 	bl	8003a00 <main>
  bx  lr
 8005a9e:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8005aa0:	24001670 	.word	0x24001670
  ldr r0, =_sdata
 8005aa4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005aa8:	2400020c 	.word	0x2400020c
  ldr r2, =_sidata
 8005aac:	080146bc 	.word	0x080146bc
  ldr r2, =_sbss
 8005ab0:	2400020c 	.word	0x2400020c
  ldr r4, =_ebss
 8005ab4:	2400106c 	.word	0x2400106c

08005ab8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ab8:	e7fe      	b.n	8005ab8 <ADC3_IRQHandler>
	...

08005abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ac2:	2003      	movs	r0, #3
 8005ac4:	f000 f98c 	bl	8005de0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ac8:	f004 fa0e 	bl	8009ee8 <HAL_RCC_GetSysClockFreq>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <HAL_Init+0x68>)
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	4913      	ldr	r1, [pc, #76]	; (8005b28 <HAL_Init+0x6c>)
 8005ada:	5ccb      	ldrb	r3, [r1, r3]
 8005adc:	f003 031f 	and.w	r3, r3, #31
 8005ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ae6:	4b0f      	ldr	r3, [pc, #60]	; (8005b24 <HAL_Init+0x68>)
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	4a0e      	ldr	r2, [pc, #56]	; (8005b28 <HAL_Init+0x6c>)
 8005af0:	5cd3      	ldrb	r3, [r2, r3]
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
 8005afc:	4a0b      	ldr	r2, [pc, #44]	; (8005b2c <HAL_Init+0x70>)
 8005afe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b00:	4a0b      	ldr	r2, [pc, #44]	; (8005b30 <HAL_Init+0x74>)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b06:	2000      	movs	r0, #0
 8005b08:	f000 f814 	bl	8005b34 <HAL_InitTick>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e002      	b.n	8005b1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005b16:	f7fe fc3b 	bl	8004390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	58024400 	.word	0x58024400
 8005b28:	08012888 	.word	0x08012888
 8005b2c:	24000030 	.word	0x24000030
 8005b30:	2400002c 	.word	0x2400002c

08005b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005b3c:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <HAL_InitTick+0x60>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e021      	b.n	8005b8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005b48:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <HAL_InitTick+0x64>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	4b11      	ldr	r3, [pc, #68]	; (8005b94 <HAL_InitTick+0x60>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	4619      	mov	r1, r3
 8005b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f971 	bl	8005e46 <HAL_SYSTICK_Config>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e00e      	b.n	8005b8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b0f      	cmp	r3, #15
 8005b72:	d80a      	bhi.n	8005b8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b74:	2200      	movs	r2, #0
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	f000 f93b 	bl	8005df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b80:	4a06      	ldr	r2, [pc, #24]	; (8005b9c <HAL_InitTick+0x68>)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e000      	b.n	8005b8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	24000038 	.word	0x24000038
 8005b98:	2400002c 	.word	0x2400002c
 8005b9c:	24000034 	.word	0x24000034

08005ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005ba4:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <HAL_IncTick+0x20>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <HAL_IncTick+0x24>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4413      	add	r3, r2
 8005bb0:	4a04      	ldr	r2, [pc, #16]	; (8005bc4 <HAL_IncTick+0x24>)
 8005bb2:	6013      	str	r3, [r2, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	24000038 	.word	0x24000038
 8005bc4:	24001058 	.word	0x24001058

08005bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  return uwTick;
 8005bcc:	4b03      	ldr	r3, [pc, #12]	; (8005bdc <HAL_GetTick+0x14>)
 8005bce:	681b      	ldr	r3, [r3, #0]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	24001058 	.word	0x24001058

08005be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005be8:	f7ff ffee 	bl	8005bc8 <HAL_GetTick>
 8005bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf8:	d005      	beq.n	8005c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <HAL_Delay+0x44>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c06:	bf00      	nop
 8005c08:	f7ff ffde 	bl	8005bc8 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d8f7      	bhi.n	8005c08 <HAL_Delay+0x28>
  {
  }
}
 8005c18:	bf00      	nop
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	24000038 	.word	0x24000038

08005c28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005c2c:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <HAL_GetREVID+0x14>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	0c1b      	lsrs	r3, r3, #16
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	5c001000 	.word	0x5c001000

08005c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c50:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <__NVIC_SetPriorityGrouping+0x40>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c68:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <__NVIC_SetPriorityGrouping+0x44>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c6e:	4a04      	ldr	r2, [pc, #16]	; (8005c80 <__NVIC_SetPriorityGrouping+0x40>)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	60d3      	str	r3, [r2, #12]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	e000ed00 	.word	0xe000ed00
 8005c84:	05fa0000 	.word	0x05fa0000

08005c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c8c:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	0a1b      	lsrs	r3, r3, #8
 8005c92:	f003 0307 	and.w	r3, r3, #7
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	e000ed00 	.word	0xe000ed00

08005ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	db0b      	blt.n	8005cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cb6:	88fb      	ldrh	r3, [r7, #6]
 8005cb8:	f003 021f 	and.w	r2, r3, #31
 8005cbc:	4907      	ldr	r1, [pc, #28]	; (8005cdc <__NVIC_EnableIRQ+0x38>)
 8005cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8005cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	e000e100 	.word	0xe000e100

08005ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	6039      	str	r1, [r7, #0]
 8005cea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	db0a      	blt.n	8005d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	490c      	ldr	r1, [pc, #48]	; (8005d2c <__NVIC_SetPriority+0x4c>)
 8005cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cfe:	0112      	lsls	r2, r2, #4
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	440b      	add	r3, r1
 8005d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d08:	e00a      	b.n	8005d20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	4908      	ldr	r1, [pc, #32]	; (8005d30 <__NVIC_SetPriority+0x50>)
 8005d10:	88fb      	ldrh	r3, [r7, #6]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	3b04      	subs	r3, #4
 8005d18:	0112      	lsls	r2, r2, #4
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	761a      	strb	r2, [r3, #24]
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	e000e100 	.word	0xe000e100
 8005d30:	e000ed00 	.word	0xe000ed00

08005d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f1c3 0307 	rsb	r3, r3, #7
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	bf28      	it	cs
 8005d52:	2304      	movcs	r3, #4
 8005d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d902      	bls.n	8005d64 <NVIC_EncodePriority+0x30>
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	3b03      	subs	r3, #3
 8005d62:	e000      	b.n	8005d66 <NVIC_EncodePriority+0x32>
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d68:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43da      	mvns	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	401a      	ands	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	fa01 f303 	lsl.w	r3, r1, r3
 8005d86:	43d9      	mvns	r1, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d8c:	4313      	orrs	r3, r2
         );
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3724      	adds	r7, #36	; 0x24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dac:	d301      	bcc.n	8005db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dae:	2301      	movs	r3, #1
 8005db0:	e00f      	b.n	8005dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005db2:	4a0a      	ldr	r2, [pc, #40]	; (8005ddc <SysTick_Config+0x40>)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dba:	210f      	movs	r1, #15
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc0:	f7ff ff8e 	bl	8005ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <SysTick_Config+0x40>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dca:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <SysTick_Config+0x40>)
 8005dcc:	2207      	movs	r2, #7
 8005dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	e000e010 	.word	0xe000e010

08005de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ff29 	bl	8005c40 <__NVIC_SetPriorityGrouping>
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b086      	sub	sp, #24
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	607a      	str	r2, [r7, #4]
 8005e02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e04:	f7ff ff40 	bl	8005c88 <__NVIC_GetPriorityGrouping>
 8005e08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	6978      	ldr	r0, [r7, #20]
 8005e10:	f7ff ff90 	bl	8005d34 <NVIC_EncodePriority>
 8005e14:	4602      	mov	r2, r0
 8005e16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff ff5f 	bl	8005ce0 <__NVIC_SetPriority>
}
 8005e22:	bf00      	nop
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	4603      	mov	r3, r0
 8005e32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7ff ff33 	bl	8005ca4 <__NVIC_EnableIRQ>
}
 8005e3e:	bf00      	nop
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff ffa4 	bl	8005d9c <SysTick_Config>
 8005e54:	4603      	mov	r3, r0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005e62:	f000 f802 	bl	8005e6a <HAL_SYSTICK_Callback>
}
 8005e66:	bf00      	nop
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005e6e:	bf00      	nop
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e054      	b.n	8005f34 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	7f5b      	ldrb	r3, [r3, #29]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d105      	bne.n	8005ea0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fb fcaa 	bl	80017f4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	791b      	ldrb	r3, [r3, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10c      	bne.n	8005ec8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a22      	ldr	r2, [pc, #136]	; (8005f3c <HAL_CRC_Init+0xc4>)
 8005eb4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0218 	bic.w	r2, r2, #24
 8005ec4:	609a      	str	r2, [r3, #8]
 8005ec6:	e00c      	b.n	8005ee2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6899      	ldr	r1, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f948 	bl	8006168 <HAL_CRCEx_Polynomial_Set>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e028      	b.n	8005f34 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	795b      	ldrb	r3, [r3, #5]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d105      	bne.n	8005ef6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef2:	611a      	str	r2, [r3, #16]
 8005ef4:	e004      	b.n	8005f00 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6912      	ldr	r2, [r2, #16]
 8005efe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695a      	ldr	r2, [r3, #20]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699a      	ldr	r2, [r3, #24]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	04c11db7 	.word	0x04c11db7

08005f40 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2202      	movs	r2, #2
 8005f54:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0201 	orr.w	r2, r2, #1
 8005f64:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d006      	beq.n	8005f7c <HAL_CRC_Calculate+0x3c>
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d829      	bhi.n	8005fc6 <HAL_CRC_Calculate+0x86>
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d019      	beq.n	8005faa <HAL_CRC_Calculate+0x6a>
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d01e      	beq.n	8005fb8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005f7a:	e024      	b.n	8005fc6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	e00a      	b.n	8005f98 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	441a      	add	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	3301      	adds	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d3f0      	bcc.n	8005f82 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	613b      	str	r3, [r7, #16]
      break;
 8005fa8:	e00e      	b.n	8005fc8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	68b9      	ldr	r1, [r7, #8]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 f812 	bl	8005fd8 <CRC_Handle_8>
 8005fb4:	6138      	str	r0, [r7, #16]
      break;
 8005fb6:	e007      	b.n	8005fc8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f899 	bl	80060f4 <CRC_Handle_16>
 8005fc2:	6138      	str	r0, [r7, #16]
      break;
 8005fc4:	e000      	b.n	8005fc8 <HAL_CRC_Calculate+0x88>
      break;
 8005fc6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005fce:	693b      	ldr	r3, [r7, #16]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b089      	sub	sp, #36	; 0x24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	e023      	b.n	8006032 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	440b      	add	r3, r1
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006004:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	3302      	adds	r3, #2
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	440b      	add	r3, r1
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006014:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	3303      	adds	r3, #3
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	440b      	add	r3, r1
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006028:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800602a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	3301      	adds	r3, #1
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	089b      	lsrs	r3, r3, #2
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	429a      	cmp	r2, r3
 800603a:	d3d6      	bcc.n	8005fea <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d04d      	beq.n	80060e2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f003 0303 	and.w	r3, r3, #3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d107      	bne.n	8006060 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	4413      	add	r3, r2
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	6812      	ldr	r2, [r2, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d116      	bne.n	8006098 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	4413      	add	r3, r2
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	021b      	lsls	r3, r3, #8
 8006076:	b21a      	sxth	r2, r3
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	3301      	adds	r3, #1
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	440b      	add	r3, r1
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	b21b      	sxth	r3, r3
 8006086:	4313      	orrs	r3, r2
 8006088:	b21b      	sxth	r3, r3
 800608a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	8b7a      	ldrh	r2, [r7, #26]
 8006096:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d11f      	bne.n	80060e2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	4413      	add	r3, r2
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	b21a      	sxth	r2, r3
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	3301      	adds	r3, #1
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	440b      	add	r3, r1
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	b21b      	sxth	r3, r3
 80060be:	4313      	orrs	r3, r2
 80060c0:	b21b      	sxth	r3, r3
 80060c2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	8b7a      	ldrh	r2, [r7, #26]
 80060ce:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	3302      	adds	r3, #2
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	4413      	add	r3, r2
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	6812      	ldr	r2, [r2, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3724      	adds	r7, #36	; 0x24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	e013      	b.n	800612e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	4413      	add	r3, r2
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	041a      	lsls	r2, r3, #16
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	3302      	adds	r3, #2
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	440b      	add	r3, r1
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	4619      	mov	r1, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3301      	adds	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	429a      	cmp	r2, r3
 8006136:	d3e6      	bcc.n	8006106 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	4413      	add	r3, r2
 8006150:	881a      	ldrh	r2, [r3, #0]
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
}
 800615c:	4618      	mov	r0, r3
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006178:	231f      	movs	r3, #31
 800617a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800617c:	bf00      	nop
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1e5a      	subs	r2, r3, #1
 8006182:	613a      	str	r2, [r7, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <HAL_CRCEx_Polynomial_Set+0x34>
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0f0      	beq.n	800617e <HAL_CRCEx_Polynomial_Set+0x16>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b18      	cmp	r3, #24
 80061a0:	d846      	bhi.n	8006230 <HAL_CRCEx_Polynomial_Set+0xc8>
 80061a2:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	08006237 	.word	0x08006237
 80061ac:	08006231 	.word	0x08006231
 80061b0:	08006231 	.word	0x08006231
 80061b4:	08006231 	.word	0x08006231
 80061b8:	08006231 	.word	0x08006231
 80061bc:	08006231 	.word	0x08006231
 80061c0:	08006231 	.word	0x08006231
 80061c4:	08006231 	.word	0x08006231
 80061c8:	08006225 	.word	0x08006225
 80061cc:	08006231 	.word	0x08006231
 80061d0:	08006231 	.word	0x08006231
 80061d4:	08006231 	.word	0x08006231
 80061d8:	08006231 	.word	0x08006231
 80061dc:	08006231 	.word	0x08006231
 80061e0:	08006231 	.word	0x08006231
 80061e4:	08006231 	.word	0x08006231
 80061e8:	08006219 	.word	0x08006219
 80061ec:	08006231 	.word	0x08006231
 80061f0:	08006231 	.word	0x08006231
 80061f4:	08006231 	.word	0x08006231
 80061f8:	08006231 	.word	0x08006231
 80061fc:	08006231 	.word	0x08006231
 8006200:	08006231 	.word	0x08006231
 8006204:	08006231 	.word	0x08006231
 8006208:	0800620d 	.word	0x0800620d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b06      	cmp	r3, #6
 8006210:	d913      	bls.n	800623a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006216:	e010      	b.n	800623a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b07      	cmp	r3, #7
 800621c:	d90f      	bls.n	800623e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006222:	e00c      	b.n	800623e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2b0f      	cmp	r3, #15
 8006228:	d90b      	bls.n	8006242 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800622e:	e008      	b.n	8006242 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	75fb      	strb	r3, [r7, #23]
      break;
 8006234:	e006      	b.n	8006244 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006236:	bf00      	nop
 8006238:	e004      	b.n	8006244 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800623a:	bf00      	nop
 800623c:	e002      	b.n	8006244 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800623e:	bf00      	nop
 8006240:	e000      	b.n	8006244 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006242:	bf00      	nop
  }
  if (status == HAL_OK)
 8006244:	7dfb      	ldrb	r3, [r7, #23]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10d      	bne.n	8006266 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f023 0118 	bic.w	r1, r3, #24
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	430a      	orrs	r2, r1
 8006264:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006266:	7dfb      	ldrb	r3, [r7, #23]
}
 8006268:	4618      	mov	r0, r3
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800627c:	f7ff fca4 	bl	8005bc8 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e316      	b.n	80068ba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a66      	ldr	r2, [pc, #408]	; (800642c <HAL_DMA_Init+0x1b8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d04a      	beq.n	800632c <HAL_DMA_Init+0xb8>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a65      	ldr	r2, [pc, #404]	; (8006430 <HAL_DMA_Init+0x1bc>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d045      	beq.n	800632c <HAL_DMA_Init+0xb8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a63      	ldr	r2, [pc, #396]	; (8006434 <HAL_DMA_Init+0x1c0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d040      	beq.n	800632c <HAL_DMA_Init+0xb8>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a62      	ldr	r2, [pc, #392]	; (8006438 <HAL_DMA_Init+0x1c4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d03b      	beq.n	800632c <HAL_DMA_Init+0xb8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a60      	ldr	r2, [pc, #384]	; (800643c <HAL_DMA_Init+0x1c8>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d036      	beq.n	800632c <HAL_DMA_Init+0xb8>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a5f      	ldr	r2, [pc, #380]	; (8006440 <HAL_DMA_Init+0x1cc>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d031      	beq.n	800632c <HAL_DMA_Init+0xb8>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a5d      	ldr	r2, [pc, #372]	; (8006444 <HAL_DMA_Init+0x1d0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d02c      	beq.n	800632c <HAL_DMA_Init+0xb8>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a5c      	ldr	r2, [pc, #368]	; (8006448 <HAL_DMA_Init+0x1d4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d027      	beq.n	800632c <HAL_DMA_Init+0xb8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a5a      	ldr	r2, [pc, #360]	; (800644c <HAL_DMA_Init+0x1d8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d022      	beq.n	800632c <HAL_DMA_Init+0xb8>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a59      	ldr	r2, [pc, #356]	; (8006450 <HAL_DMA_Init+0x1dc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d01d      	beq.n	800632c <HAL_DMA_Init+0xb8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a57      	ldr	r2, [pc, #348]	; (8006454 <HAL_DMA_Init+0x1e0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d018      	beq.n	800632c <HAL_DMA_Init+0xb8>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a56      	ldr	r2, [pc, #344]	; (8006458 <HAL_DMA_Init+0x1e4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d013      	beq.n	800632c <HAL_DMA_Init+0xb8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a54      	ldr	r2, [pc, #336]	; (800645c <HAL_DMA_Init+0x1e8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00e      	beq.n	800632c <HAL_DMA_Init+0xb8>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a53      	ldr	r2, [pc, #332]	; (8006460 <HAL_DMA_Init+0x1ec>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d009      	beq.n	800632c <HAL_DMA_Init+0xb8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a51      	ldr	r2, [pc, #324]	; (8006464 <HAL_DMA_Init+0x1f0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d004      	beq.n	800632c <HAL_DMA_Init+0xb8>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a50      	ldr	r2, [pc, #320]	; (8006468 <HAL_DMA_Init+0x1f4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d101      	bne.n	8006330 <HAL_DMA_Init+0xbc>
 800632c:	2301      	movs	r3, #1
 800632e:	e000      	b.n	8006332 <HAL_DMA_Init+0xbe>
 8006330:	2300      	movs	r3, #0
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 813b 	beq.w	80065ae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a37      	ldr	r2, [pc, #220]	; (800642c <HAL_DMA_Init+0x1b8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d04a      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a36      	ldr	r2, [pc, #216]	; (8006430 <HAL_DMA_Init+0x1bc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d045      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a34      	ldr	r2, [pc, #208]	; (8006434 <HAL_DMA_Init+0x1c0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d040      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a33      	ldr	r2, [pc, #204]	; (8006438 <HAL_DMA_Init+0x1c4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d03b      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a31      	ldr	r2, [pc, #196]	; (800643c <HAL_DMA_Init+0x1c8>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d036      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a30      	ldr	r2, [pc, #192]	; (8006440 <HAL_DMA_Init+0x1cc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d031      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a2e      	ldr	r2, [pc, #184]	; (8006444 <HAL_DMA_Init+0x1d0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d02c      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a2d      	ldr	r2, [pc, #180]	; (8006448 <HAL_DMA_Init+0x1d4>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d027      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a2b      	ldr	r2, [pc, #172]	; (800644c <HAL_DMA_Init+0x1d8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d022      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a2a      	ldr	r2, [pc, #168]	; (8006450 <HAL_DMA_Init+0x1dc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d01d      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a28      	ldr	r2, [pc, #160]	; (8006454 <HAL_DMA_Init+0x1e0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d018      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a27      	ldr	r2, [pc, #156]	; (8006458 <HAL_DMA_Init+0x1e4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d013      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a25      	ldr	r2, [pc, #148]	; (800645c <HAL_DMA_Init+0x1e8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00e      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a24      	ldr	r2, [pc, #144]	; (8006460 <HAL_DMA_Init+0x1ec>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d009      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a22      	ldr	r2, [pc, #136]	; (8006464 <HAL_DMA_Init+0x1f0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d004      	beq.n	80063e8 <HAL_DMA_Init+0x174>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a21      	ldr	r2, [pc, #132]	; (8006468 <HAL_DMA_Init+0x1f4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d108      	bne.n	80063fa <HAL_DMA_Init+0x186>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0201 	bic.w	r2, r2, #1
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	e007      	b.n	800640a <HAL_DMA_Init+0x196>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0201 	bic.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800640a:	e02f      	b.n	800646c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800640c:	f7ff fbdc 	bl	8005bc8 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b05      	cmp	r3, #5
 8006418:	d928      	bls.n	800646c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2203      	movs	r2, #3
 8006424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e246      	b.n	80068ba <HAL_DMA_Init+0x646>
 800642c:	40020010 	.word	0x40020010
 8006430:	40020028 	.word	0x40020028
 8006434:	40020040 	.word	0x40020040
 8006438:	40020058 	.word	0x40020058
 800643c:	40020070 	.word	0x40020070
 8006440:	40020088 	.word	0x40020088
 8006444:	400200a0 	.word	0x400200a0
 8006448:	400200b8 	.word	0x400200b8
 800644c:	40020410 	.word	0x40020410
 8006450:	40020428 	.word	0x40020428
 8006454:	40020440 	.word	0x40020440
 8006458:	40020458 	.word	0x40020458
 800645c:	40020470 	.word	0x40020470
 8006460:	40020488 	.word	0x40020488
 8006464:	400204a0 	.word	0x400204a0
 8006468:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1c8      	bne.n	800640c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4b83      	ldr	r3, [pc, #524]	; (8006694 <HAL_DMA_Init+0x420>)
 8006486:	4013      	ands	r3, r2
 8006488:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006492:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800649e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d107      	bne.n	80064d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c8:	4313      	orrs	r3, r2
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80064d0:	4b71      	ldr	r3, [pc, #452]	; (8006698 <HAL_DMA_Init+0x424>)
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	4b71      	ldr	r3, [pc, #452]	; (800669c <HAL_DMA_Init+0x428>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064dc:	d328      	bcc.n	8006530 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2b28      	cmp	r3, #40	; 0x28
 80064e4:	d903      	bls.n	80064ee <HAL_DMA_Init+0x27a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b2e      	cmp	r3, #46	; 0x2e
 80064ec:	d917      	bls.n	800651e <HAL_DMA_Init+0x2aa>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b3e      	cmp	r3, #62	; 0x3e
 80064f4:	d903      	bls.n	80064fe <HAL_DMA_Init+0x28a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b42      	cmp	r3, #66	; 0x42
 80064fc:	d90f      	bls.n	800651e <HAL_DMA_Init+0x2aa>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b46      	cmp	r3, #70	; 0x46
 8006504:	d903      	bls.n	800650e <HAL_DMA_Init+0x29a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b48      	cmp	r3, #72	; 0x48
 800650c:	d907      	bls.n	800651e <HAL_DMA_Init+0x2aa>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b4e      	cmp	r3, #78	; 0x4e
 8006514:	d905      	bls.n	8006522 <HAL_DMA_Init+0x2ae>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b52      	cmp	r3, #82	; 0x52
 800651c:	d801      	bhi.n	8006522 <HAL_DMA_Init+0x2ae>
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <HAL_DMA_Init+0x2b0>
 8006522:	2300      	movs	r3, #0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800652e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f023 0307 	bic.w	r3, r3, #7
 8006546:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	2b04      	cmp	r3, #4
 8006558:	d117      	bne.n	800658a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00e      	beq.n	800658a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f002 fb31 	bl	8008bd4 <DMA_CheckFifoParam>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d008      	beq.n	800658a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2240      	movs	r2, #64	; 0x40
 800657c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e197      	b.n	80068ba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f002 fa6c 	bl	8008a70 <DMA_CalcBaseAndBitshift>
 8006598:	4603      	mov	r3, r0
 800659a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	223f      	movs	r2, #63	; 0x3f
 80065a6:	409a      	lsls	r2, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]
 80065ac:	e0cd      	b.n	800674a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a3b      	ldr	r2, [pc, #236]	; (80066a0 <HAL_DMA_Init+0x42c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d022      	beq.n	80065fe <HAL_DMA_Init+0x38a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a39      	ldr	r2, [pc, #228]	; (80066a4 <HAL_DMA_Init+0x430>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01d      	beq.n	80065fe <HAL_DMA_Init+0x38a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a38      	ldr	r2, [pc, #224]	; (80066a8 <HAL_DMA_Init+0x434>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d018      	beq.n	80065fe <HAL_DMA_Init+0x38a>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a36      	ldr	r2, [pc, #216]	; (80066ac <HAL_DMA_Init+0x438>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <HAL_DMA_Init+0x38a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a35      	ldr	r2, [pc, #212]	; (80066b0 <HAL_DMA_Init+0x43c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00e      	beq.n	80065fe <HAL_DMA_Init+0x38a>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a33      	ldr	r2, [pc, #204]	; (80066b4 <HAL_DMA_Init+0x440>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d009      	beq.n	80065fe <HAL_DMA_Init+0x38a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a32      	ldr	r2, [pc, #200]	; (80066b8 <HAL_DMA_Init+0x444>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d004      	beq.n	80065fe <HAL_DMA_Init+0x38a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a30      	ldr	r2, [pc, #192]	; (80066bc <HAL_DMA_Init+0x448>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d101      	bne.n	8006602 <HAL_DMA_Init+0x38e>
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <HAL_DMA_Init+0x390>
 8006602:	2300      	movs	r3, #0
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 8097 	beq.w	8006738 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a24      	ldr	r2, [pc, #144]	; (80066a0 <HAL_DMA_Init+0x42c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d021      	beq.n	8006658 <HAL_DMA_Init+0x3e4>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a22      	ldr	r2, [pc, #136]	; (80066a4 <HAL_DMA_Init+0x430>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01c      	beq.n	8006658 <HAL_DMA_Init+0x3e4>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a21      	ldr	r2, [pc, #132]	; (80066a8 <HAL_DMA_Init+0x434>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d017      	beq.n	8006658 <HAL_DMA_Init+0x3e4>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a1f      	ldr	r2, [pc, #124]	; (80066ac <HAL_DMA_Init+0x438>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d012      	beq.n	8006658 <HAL_DMA_Init+0x3e4>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a1e      	ldr	r2, [pc, #120]	; (80066b0 <HAL_DMA_Init+0x43c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00d      	beq.n	8006658 <HAL_DMA_Init+0x3e4>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1c      	ldr	r2, [pc, #112]	; (80066b4 <HAL_DMA_Init+0x440>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d008      	beq.n	8006658 <HAL_DMA_Init+0x3e4>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1b      	ldr	r2, [pc, #108]	; (80066b8 <HAL_DMA_Init+0x444>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d003      	beq.n	8006658 <HAL_DMA_Init+0x3e4>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a19      	ldr	r2, [pc, #100]	; (80066bc <HAL_DMA_Init+0x448>)
 8006656:	4293      	cmp	r3, r2
 8006658:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2202      	movs	r2, #2
 800665e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4b12      	ldr	r3, [pc, #72]	; (80066c0 <HAL_DMA_Init+0x44c>)
 8006676:	4013      	ands	r3, r2
 8006678:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d020      	beq.n	80066c4 <HAL_DMA_Init+0x450>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	2b80      	cmp	r3, #128	; 0x80
 8006688:	d102      	bne.n	8006690 <HAL_DMA_Init+0x41c>
 800668a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800668e:	e01a      	b.n	80066c6 <HAL_DMA_Init+0x452>
 8006690:	2300      	movs	r3, #0
 8006692:	e018      	b.n	80066c6 <HAL_DMA_Init+0x452>
 8006694:	fe10803f 	.word	0xfe10803f
 8006698:	5c001000 	.word	0x5c001000
 800669c:	ffff0000 	.word	0xffff0000
 80066a0:	58025408 	.word	0x58025408
 80066a4:	5802541c 	.word	0x5802541c
 80066a8:	58025430 	.word	0x58025430
 80066ac:	58025444 	.word	0x58025444
 80066b0:	58025458 	.word	0x58025458
 80066b4:	5802546c 	.word	0x5802546c
 80066b8:	58025480 	.word	0x58025480
 80066bc:	58025494 	.word	0x58025494
 80066c0:	fffe000f 	.word	0xfffe000f
 80066c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	68d2      	ldr	r2, [r2, #12]
 80066ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80066cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80066d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80066dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80066e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80066ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80066f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	4b6e      	ldr	r3, [pc, #440]	; (80068c4 <HAL_DMA_Init+0x650>)
 800670c:	4413      	add	r3, r2
 800670e:	4a6e      	ldr	r2, [pc, #440]	; (80068c8 <HAL_DMA_Init+0x654>)
 8006710:	fba2 2303 	umull	r2, r3, r2, r3
 8006714:	091b      	lsrs	r3, r3, #4
 8006716:	009a      	lsls	r2, r3, #2
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f002 f9a7 	bl	8008a70 <DMA_CalcBaseAndBitshift>
 8006722:	4603      	mov	r3, r0
 8006724:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672a:	f003 031f 	and.w	r3, r3, #31
 800672e:	2201      	movs	r2, #1
 8006730:	409a      	lsls	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	e008      	b.n	800674a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2240      	movs	r2, #64	; 0x40
 800673c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2203      	movs	r2, #3
 8006742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e0b7      	b.n	80068ba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a5f      	ldr	r2, [pc, #380]	; (80068cc <HAL_DMA_Init+0x658>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d072      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a5d      	ldr	r2, [pc, #372]	; (80068d0 <HAL_DMA_Init+0x65c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d06d      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a5c      	ldr	r2, [pc, #368]	; (80068d4 <HAL_DMA_Init+0x660>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d068      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a5a      	ldr	r2, [pc, #360]	; (80068d8 <HAL_DMA_Init+0x664>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d063      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a59      	ldr	r2, [pc, #356]	; (80068dc <HAL_DMA_Init+0x668>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d05e      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a57      	ldr	r2, [pc, #348]	; (80068e0 <HAL_DMA_Init+0x66c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d059      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a56      	ldr	r2, [pc, #344]	; (80068e4 <HAL_DMA_Init+0x670>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d054      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a54      	ldr	r2, [pc, #336]	; (80068e8 <HAL_DMA_Init+0x674>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d04f      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a53      	ldr	r2, [pc, #332]	; (80068ec <HAL_DMA_Init+0x678>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d04a      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a51      	ldr	r2, [pc, #324]	; (80068f0 <HAL_DMA_Init+0x67c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d045      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a50      	ldr	r2, [pc, #320]	; (80068f4 <HAL_DMA_Init+0x680>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d040      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a4e      	ldr	r2, [pc, #312]	; (80068f8 <HAL_DMA_Init+0x684>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d03b      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a4d      	ldr	r2, [pc, #308]	; (80068fc <HAL_DMA_Init+0x688>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d036      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a4b      	ldr	r2, [pc, #300]	; (8006900 <HAL_DMA_Init+0x68c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d031      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a4a      	ldr	r2, [pc, #296]	; (8006904 <HAL_DMA_Init+0x690>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d02c      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a48      	ldr	r2, [pc, #288]	; (8006908 <HAL_DMA_Init+0x694>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d027      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a47      	ldr	r2, [pc, #284]	; (800690c <HAL_DMA_Init+0x698>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d022      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a45      	ldr	r2, [pc, #276]	; (8006910 <HAL_DMA_Init+0x69c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d01d      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a44      	ldr	r2, [pc, #272]	; (8006914 <HAL_DMA_Init+0x6a0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d018      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a42      	ldr	r2, [pc, #264]	; (8006918 <HAL_DMA_Init+0x6a4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d013      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a41      	ldr	r2, [pc, #260]	; (800691c <HAL_DMA_Init+0x6a8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00e      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a3f      	ldr	r2, [pc, #252]	; (8006920 <HAL_DMA_Init+0x6ac>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d009      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a3e      	ldr	r2, [pc, #248]	; (8006924 <HAL_DMA_Init+0x6b0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d004      	beq.n	800683a <HAL_DMA_Init+0x5c6>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a3c      	ldr	r2, [pc, #240]	; (8006928 <HAL_DMA_Init+0x6b4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d101      	bne.n	800683e <HAL_DMA_Init+0x5ca>
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <HAL_DMA_Init+0x5cc>
 800683e:	2300      	movs	r3, #0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d032      	beq.n	80068aa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f002 fa41 	bl	8008ccc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b80      	cmp	r3, #128	; 0x80
 8006850:	d102      	bne.n	8006858 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800686c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d010      	beq.n	8006898 <HAL_DMA_Init+0x624>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b08      	cmp	r3, #8
 800687c:	d80c      	bhi.n	8006898 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f002 fabe 	bl	8008e00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006894:	605a      	str	r2, [r3, #4]
 8006896:	e008      	b.n	80068aa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	a7fdabf8 	.word	0xa7fdabf8
 80068c8:	cccccccd 	.word	0xcccccccd
 80068cc:	40020010 	.word	0x40020010
 80068d0:	40020028 	.word	0x40020028
 80068d4:	40020040 	.word	0x40020040
 80068d8:	40020058 	.word	0x40020058
 80068dc:	40020070 	.word	0x40020070
 80068e0:	40020088 	.word	0x40020088
 80068e4:	400200a0 	.word	0x400200a0
 80068e8:	400200b8 	.word	0x400200b8
 80068ec:	40020410 	.word	0x40020410
 80068f0:	40020428 	.word	0x40020428
 80068f4:	40020440 	.word	0x40020440
 80068f8:	40020458 	.word	0x40020458
 80068fc:	40020470 	.word	0x40020470
 8006900:	40020488 	.word	0x40020488
 8006904:	400204a0 	.word	0x400204a0
 8006908:	400204b8 	.word	0x400204b8
 800690c:	58025408 	.word	0x58025408
 8006910:	5802541c 	.word	0x5802541c
 8006914:	58025430 	.word	0x58025430
 8006918:	58025444 	.word	0x58025444
 800691c:	58025458 	.word	0x58025458
 8006920:	5802546c 	.word	0x5802546c
 8006924:	58025480 	.word	0x58025480
 8006928:	58025494 	.word	0x58025494

0800692c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e226      	b.n	8006d96 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <HAL_DMA_Start_IT+0x2a>
 8006952:	2302      	movs	r3, #2
 8006954:	e21f      	b.n	8006d96 <HAL_DMA_Start_IT+0x46a>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b01      	cmp	r3, #1
 8006968:	f040 820a 	bne.w	8006d80 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a68      	ldr	r2, [pc, #416]	; (8006b20 <HAL_DMA_Start_IT+0x1f4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d04a      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a66      	ldr	r2, [pc, #408]	; (8006b24 <HAL_DMA_Start_IT+0x1f8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d045      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a65      	ldr	r2, [pc, #404]	; (8006b28 <HAL_DMA_Start_IT+0x1fc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d040      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a63      	ldr	r2, [pc, #396]	; (8006b2c <HAL_DMA_Start_IT+0x200>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d03b      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a62      	ldr	r2, [pc, #392]	; (8006b30 <HAL_DMA_Start_IT+0x204>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d036      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a60      	ldr	r2, [pc, #384]	; (8006b34 <HAL_DMA_Start_IT+0x208>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d031      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a5f      	ldr	r2, [pc, #380]	; (8006b38 <HAL_DMA_Start_IT+0x20c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d02c      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a5d      	ldr	r2, [pc, #372]	; (8006b3c <HAL_DMA_Start_IT+0x210>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d027      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a5c      	ldr	r2, [pc, #368]	; (8006b40 <HAL_DMA_Start_IT+0x214>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d022      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a5a      	ldr	r2, [pc, #360]	; (8006b44 <HAL_DMA_Start_IT+0x218>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01d      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a59      	ldr	r2, [pc, #356]	; (8006b48 <HAL_DMA_Start_IT+0x21c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d018      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a57      	ldr	r2, [pc, #348]	; (8006b4c <HAL_DMA_Start_IT+0x220>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d013      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a56      	ldr	r2, [pc, #344]	; (8006b50 <HAL_DMA_Start_IT+0x224>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00e      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a54      	ldr	r2, [pc, #336]	; (8006b54 <HAL_DMA_Start_IT+0x228>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d009      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a53      	ldr	r2, [pc, #332]	; (8006b58 <HAL_DMA_Start_IT+0x22c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <HAL_DMA_Start_IT+0xee>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a51      	ldr	r2, [pc, #324]	; (8006b5c <HAL_DMA_Start_IT+0x230>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d108      	bne.n	8006a2c <HAL_DMA_Start_IT+0x100>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0201 	bic.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	e007      	b.n	8006a3c <HAL_DMA_Start_IT+0x110>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 0201 	bic.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f001 fe68 	bl	8008718 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a34      	ldr	r2, [pc, #208]	; (8006b20 <HAL_DMA_Start_IT+0x1f4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d04a      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a33      	ldr	r2, [pc, #204]	; (8006b24 <HAL_DMA_Start_IT+0x1f8>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d045      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a31      	ldr	r2, [pc, #196]	; (8006b28 <HAL_DMA_Start_IT+0x1fc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d040      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a30      	ldr	r2, [pc, #192]	; (8006b2c <HAL_DMA_Start_IT+0x200>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d03b      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a2e      	ldr	r2, [pc, #184]	; (8006b30 <HAL_DMA_Start_IT+0x204>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d036      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a2d      	ldr	r2, [pc, #180]	; (8006b34 <HAL_DMA_Start_IT+0x208>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d031      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a2b      	ldr	r2, [pc, #172]	; (8006b38 <HAL_DMA_Start_IT+0x20c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d02c      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2a      	ldr	r2, [pc, #168]	; (8006b3c <HAL_DMA_Start_IT+0x210>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d027      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a28      	ldr	r2, [pc, #160]	; (8006b40 <HAL_DMA_Start_IT+0x214>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d022      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a27      	ldr	r2, [pc, #156]	; (8006b44 <HAL_DMA_Start_IT+0x218>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d01d      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a25      	ldr	r2, [pc, #148]	; (8006b48 <HAL_DMA_Start_IT+0x21c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d018      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a24      	ldr	r2, [pc, #144]	; (8006b4c <HAL_DMA_Start_IT+0x220>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d013      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a22      	ldr	r2, [pc, #136]	; (8006b50 <HAL_DMA_Start_IT+0x224>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00e      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a21      	ldr	r2, [pc, #132]	; (8006b54 <HAL_DMA_Start_IT+0x228>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d009      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a1f      	ldr	r2, [pc, #124]	; (8006b58 <HAL_DMA_Start_IT+0x22c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d004      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x1bc>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a1e      	ldr	r2, [pc, #120]	; (8006b5c <HAL_DMA_Start_IT+0x230>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d101      	bne.n	8006aec <HAL_DMA_Start_IT+0x1c0>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <HAL_DMA_Start_IT+0x1c2>
 8006aec:	2300      	movs	r3, #0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d036      	beq.n	8006b60 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f023 021e 	bic.w	r2, r3, #30
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f042 0216 	orr.w	r2, r2, #22
 8006b04:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d03e      	beq.n	8006b8c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0208 	orr.w	r2, r2, #8
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	e035      	b.n	8006b8c <HAL_DMA_Start_IT+0x260>
 8006b20:	40020010 	.word	0x40020010
 8006b24:	40020028 	.word	0x40020028
 8006b28:	40020040 	.word	0x40020040
 8006b2c:	40020058 	.word	0x40020058
 8006b30:	40020070 	.word	0x40020070
 8006b34:	40020088 	.word	0x40020088
 8006b38:	400200a0 	.word	0x400200a0
 8006b3c:	400200b8 	.word	0x400200b8
 8006b40:	40020410 	.word	0x40020410
 8006b44:	40020428 	.word	0x40020428
 8006b48:	40020440 	.word	0x40020440
 8006b4c:	40020458 	.word	0x40020458
 8006b50:	40020470 	.word	0x40020470
 8006b54:	40020488 	.word	0x40020488
 8006b58:	400204a0 	.word	0x400204a0
 8006b5c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f023 020e 	bic.w	r2, r3, #14
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 020a 	orr.w	r2, r2, #10
 8006b72:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d007      	beq.n	8006b8c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0204 	orr.w	r2, r2, #4
 8006b8a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a83      	ldr	r2, [pc, #524]	; (8006da0 <HAL_DMA_Start_IT+0x474>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d072      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a82      	ldr	r2, [pc, #520]	; (8006da4 <HAL_DMA_Start_IT+0x478>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d06d      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a80      	ldr	r2, [pc, #512]	; (8006da8 <HAL_DMA_Start_IT+0x47c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d068      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a7f      	ldr	r2, [pc, #508]	; (8006dac <HAL_DMA_Start_IT+0x480>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d063      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a7d      	ldr	r2, [pc, #500]	; (8006db0 <HAL_DMA_Start_IT+0x484>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d05e      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a7c      	ldr	r2, [pc, #496]	; (8006db4 <HAL_DMA_Start_IT+0x488>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d059      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a7a      	ldr	r2, [pc, #488]	; (8006db8 <HAL_DMA_Start_IT+0x48c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d054      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a79      	ldr	r2, [pc, #484]	; (8006dbc <HAL_DMA_Start_IT+0x490>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d04f      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a77      	ldr	r2, [pc, #476]	; (8006dc0 <HAL_DMA_Start_IT+0x494>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d04a      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a76      	ldr	r2, [pc, #472]	; (8006dc4 <HAL_DMA_Start_IT+0x498>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d045      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a74      	ldr	r2, [pc, #464]	; (8006dc8 <HAL_DMA_Start_IT+0x49c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d040      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a73      	ldr	r2, [pc, #460]	; (8006dcc <HAL_DMA_Start_IT+0x4a0>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d03b      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a71      	ldr	r2, [pc, #452]	; (8006dd0 <HAL_DMA_Start_IT+0x4a4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d036      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a70      	ldr	r2, [pc, #448]	; (8006dd4 <HAL_DMA_Start_IT+0x4a8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d031      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a6e      	ldr	r2, [pc, #440]	; (8006dd8 <HAL_DMA_Start_IT+0x4ac>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d02c      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a6d      	ldr	r2, [pc, #436]	; (8006ddc <HAL_DMA_Start_IT+0x4b0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d027      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a6b      	ldr	r2, [pc, #428]	; (8006de0 <HAL_DMA_Start_IT+0x4b4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d022      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a6a      	ldr	r2, [pc, #424]	; (8006de4 <HAL_DMA_Start_IT+0x4b8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d01d      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a68      	ldr	r2, [pc, #416]	; (8006de8 <HAL_DMA_Start_IT+0x4bc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d018      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a67      	ldr	r2, [pc, #412]	; (8006dec <HAL_DMA_Start_IT+0x4c0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d013      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a65      	ldr	r2, [pc, #404]	; (8006df0 <HAL_DMA_Start_IT+0x4c4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00e      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a64      	ldr	r2, [pc, #400]	; (8006df4 <HAL_DMA_Start_IT+0x4c8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d009      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a62      	ldr	r2, [pc, #392]	; (8006df8 <HAL_DMA_Start_IT+0x4cc>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d004      	beq.n	8006c7c <HAL_DMA_Start_IT+0x350>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a61      	ldr	r2, [pc, #388]	; (8006dfc <HAL_DMA_Start_IT+0x4d0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d101      	bne.n	8006c80 <HAL_DMA_Start_IT+0x354>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <HAL_DMA_Start_IT+0x356>
 8006c80:	2300      	movs	r3, #0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d01a      	beq.n	8006cbc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ca2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d007      	beq.n	8006cbc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a37      	ldr	r2, [pc, #220]	; (8006da0 <HAL_DMA_Start_IT+0x474>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d04a      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a36      	ldr	r2, [pc, #216]	; (8006da4 <HAL_DMA_Start_IT+0x478>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d045      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a34      	ldr	r2, [pc, #208]	; (8006da8 <HAL_DMA_Start_IT+0x47c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d040      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a33      	ldr	r2, [pc, #204]	; (8006dac <HAL_DMA_Start_IT+0x480>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d03b      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a31      	ldr	r2, [pc, #196]	; (8006db0 <HAL_DMA_Start_IT+0x484>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d036      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a30      	ldr	r2, [pc, #192]	; (8006db4 <HAL_DMA_Start_IT+0x488>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d031      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a2e      	ldr	r2, [pc, #184]	; (8006db8 <HAL_DMA_Start_IT+0x48c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d02c      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a2d      	ldr	r2, [pc, #180]	; (8006dbc <HAL_DMA_Start_IT+0x490>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d027      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2b      	ldr	r2, [pc, #172]	; (8006dc0 <HAL_DMA_Start_IT+0x494>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d022      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2a      	ldr	r2, [pc, #168]	; (8006dc4 <HAL_DMA_Start_IT+0x498>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d01d      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a28      	ldr	r2, [pc, #160]	; (8006dc8 <HAL_DMA_Start_IT+0x49c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d018      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a27      	ldr	r2, [pc, #156]	; (8006dcc <HAL_DMA_Start_IT+0x4a0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d013      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a25      	ldr	r2, [pc, #148]	; (8006dd0 <HAL_DMA_Start_IT+0x4a4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00e      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a24      	ldr	r2, [pc, #144]	; (8006dd4 <HAL_DMA_Start_IT+0x4a8>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d009      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a22      	ldr	r2, [pc, #136]	; (8006dd8 <HAL_DMA_Start_IT+0x4ac>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d004      	beq.n	8006d5c <HAL_DMA_Start_IT+0x430>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a21      	ldr	r2, [pc, #132]	; (8006ddc <HAL_DMA_Start_IT+0x4b0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d108      	bne.n	8006d6e <HAL_DMA_Start_IT+0x442>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0201 	orr.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e012      	b.n	8006d94 <HAL_DMA_Start_IT+0x468>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0201 	orr.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e009      	b.n	8006d94 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	40020010 	.word	0x40020010
 8006da4:	40020028 	.word	0x40020028
 8006da8:	40020040 	.word	0x40020040
 8006dac:	40020058 	.word	0x40020058
 8006db0:	40020070 	.word	0x40020070
 8006db4:	40020088 	.word	0x40020088
 8006db8:	400200a0 	.word	0x400200a0
 8006dbc:	400200b8 	.word	0x400200b8
 8006dc0:	40020410 	.word	0x40020410
 8006dc4:	40020428 	.word	0x40020428
 8006dc8:	40020440 	.word	0x40020440
 8006dcc:	40020458 	.word	0x40020458
 8006dd0:	40020470 	.word	0x40020470
 8006dd4:	40020488 	.word	0x40020488
 8006dd8:	400204a0 	.word	0x400204a0
 8006ddc:	400204b8 	.word	0x400204b8
 8006de0:	58025408 	.word	0x58025408
 8006de4:	5802541c 	.word	0x5802541c
 8006de8:	58025430 	.word	0x58025430
 8006dec:	58025444 	.word	0x58025444
 8006df0:	58025458 	.word	0x58025458
 8006df4:	5802546c 	.word	0x5802546c
 8006df8:	58025480 	.word	0x58025480
 8006dfc:	58025494 	.word	0x58025494

08006e00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006e08:	f7fe fede 	bl	8005bc8 <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e2dc      	b.n	80073d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d008      	beq.n	8006e36 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2280      	movs	r2, #128	; 0x80
 8006e28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e2cd      	b.n	80073d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a76      	ldr	r2, [pc, #472]	; (8007014 <HAL_DMA_Abort+0x214>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d04a      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a74      	ldr	r2, [pc, #464]	; (8007018 <HAL_DMA_Abort+0x218>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d045      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a73      	ldr	r2, [pc, #460]	; (800701c <HAL_DMA_Abort+0x21c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d040      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a71      	ldr	r2, [pc, #452]	; (8007020 <HAL_DMA_Abort+0x220>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d03b      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a70      	ldr	r2, [pc, #448]	; (8007024 <HAL_DMA_Abort+0x224>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d036      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a6e      	ldr	r2, [pc, #440]	; (8007028 <HAL_DMA_Abort+0x228>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d031      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a6d      	ldr	r2, [pc, #436]	; (800702c <HAL_DMA_Abort+0x22c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d02c      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a6b      	ldr	r2, [pc, #428]	; (8007030 <HAL_DMA_Abort+0x230>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d027      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a6a      	ldr	r2, [pc, #424]	; (8007034 <HAL_DMA_Abort+0x234>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d022      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a68      	ldr	r2, [pc, #416]	; (8007038 <HAL_DMA_Abort+0x238>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d01d      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a67      	ldr	r2, [pc, #412]	; (800703c <HAL_DMA_Abort+0x23c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d018      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a65      	ldr	r2, [pc, #404]	; (8007040 <HAL_DMA_Abort+0x240>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d013      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a64      	ldr	r2, [pc, #400]	; (8007044 <HAL_DMA_Abort+0x244>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00e      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a62      	ldr	r2, [pc, #392]	; (8007048 <HAL_DMA_Abort+0x248>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d009      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a61      	ldr	r2, [pc, #388]	; (800704c <HAL_DMA_Abort+0x24c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d004      	beq.n	8006ed6 <HAL_DMA_Abort+0xd6>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a5f      	ldr	r2, [pc, #380]	; (8007050 <HAL_DMA_Abort+0x250>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d101      	bne.n	8006eda <HAL_DMA_Abort+0xda>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <HAL_DMA_Abort+0xdc>
 8006eda:	2300      	movs	r3, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d013      	beq.n	8006f08 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 021e 	bic.w	r2, r2, #30
 8006eee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	695a      	ldr	r2, [r3, #20]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006efe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	617b      	str	r3, [r7, #20]
 8006f06:	e00a      	b.n	8006f1e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 020e 	bic.w	r2, r2, #14
 8006f16:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a3c      	ldr	r2, [pc, #240]	; (8007014 <HAL_DMA_Abort+0x214>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d072      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a3a      	ldr	r2, [pc, #232]	; (8007018 <HAL_DMA_Abort+0x218>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d06d      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a39      	ldr	r2, [pc, #228]	; (800701c <HAL_DMA_Abort+0x21c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d068      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a37      	ldr	r2, [pc, #220]	; (8007020 <HAL_DMA_Abort+0x220>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d063      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a36      	ldr	r2, [pc, #216]	; (8007024 <HAL_DMA_Abort+0x224>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d05e      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a34      	ldr	r2, [pc, #208]	; (8007028 <HAL_DMA_Abort+0x228>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d059      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a33      	ldr	r2, [pc, #204]	; (800702c <HAL_DMA_Abort+0x22c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d054      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a31      	ldr	r2, [pc, #196]	; (8007030 <HAL_DMA_Abort+0x230>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d04f      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a30      	ldr	r2, [pc, #192]	; (8007034 <HAL_DMA_Abort+0x234>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d04a      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a2e      	ldr	r2, [pc, #184]	; (8007038 <HAL_DMA_Abort+0x238>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d045      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a2d      	ldr	r2, [pc, #180]	; (800703c <HAL_DMA_Abort+0x23c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d040      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a2b      	ldr	r2, [pc, #172]	; (8007040 <HAL_DMA_Abort+0x240>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d03b      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a2a      	ldr	r2, [pc, #168]	; (8007044 <HAL_DMA_Abort+0x244>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d036      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a28      	ldr	r2, [pc, #160]	; (8007048 <HAL_DMA_Abort+0x248>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d031      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a27      	ldr	r2, [pc, #156]	; (800704c <HAL_DMA_Abort+0x24c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d02c      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a25      	ldr	r2, [pc, #148]	; (8007050 <HAL_DMA_Abort+0x250>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d027      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a24      	ldr	r2, [pc, #144]	; (8007054 <HAL_DMA_Abort+0x254>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d022      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a22      	ldr	r2, [pc, #136]	; (8007058 <HAL_DMA_Abort+0x258>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d01d      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a21      	ldr	r2, [pc, #132]	; (800705c <HAL_DMA_Abort+0x25c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d018      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <HAL_DMA_Abort+0x260>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d013      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a1e      	ldr	r2, [pc, #120]	; (8007064 <HAL_DMA_Abort+0x264>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00e      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1c      	ldr	r2, [pc, #112]	; (8007068 <HAL_DMA_Abort+0x268>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d009      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a1b      	ldr	r2, [pc, #108]	; (800706c <HAL_DMA_Abort+0x26c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d004      	beq.n	800700e <HAL_DMA_Abort+0x20e>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a19      	ldr	r2, [pc, #100]	; (8007070 <HAL_DMA_Abort+0x270>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d132      	bne.n	8007074 <HAL_DMA_Abort+0x274>
 800700e:	2301      	movs	r3, #1
 8007010:	e031      	b.n	8007076 <HAL_DMA_Abort+0x276>
 8007012:	bf00      	nop
 8007014:	40020010 	.word	0x40020010
 8007018:	40020028 	.word	0x40020028
 800701c:	40020040 	.word	0x40020040
 8007020:	40020058 	.word	0x40020058
 8007024:	40020070 	.word	0x40020070
 8007028:	40020088 	.word	0x40020088
 800702c:	400200a0 	.word	0x400200a0
 8007030:	400200b8 	.word	0x400200b8
 8007034:	40020410 	.word	0x40020410
 8007038:	40020428 	.word	0x40020428
 800703c:	40020440 	.word	0x40020440
 8007040:	40020458 	.word	0x40020458
 8007044:	40020470 	.word	0x40020470
 8007048:	40020488 	.word	0x40020488
 800704c:	400204a0 	.word	0x400204a0
 8007050:	400204b8 	.word	0x400204b8
 8007054:	58025408 	.word	0x58025408
 8007058:	5802541c 	.word	0x5802541c
 800705c:	58025430 	.word	0x58025430
 8007060:	58025444 	.word	0x58025444
 8007064:	58025458 	.word	0x58025458
 8007068:	5802546c 	.word	0x5802546c
 800706c:	58025480 	.word	0x58025480
 8007070:	58025494 	.word	0x58025494
 8007074:	2300      	movs	r3, #0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d007      	beq.n	800708a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007088:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a6d      	ldr	r2, [pc, #436]	; (8007244 <HAL_DMA_Abort+0x444>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d04a      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a6b      	ldr	r2, [pc, #428]	; (8007248 <HAL_DMA_Abort+0x448>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d045      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a6a      	ldr	r2, [pc, #424]	; (800724c <HAL_DMA_Abort+0x44c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d040      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a68      	ldr	r2, [pc, #416]	; (8007250 <HAL_DMA_Abort+0x450>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d03b      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a67      	ldr	r2, [pc, #412]	; (8007254 <HAL_DMA_Abort+0x454>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d036      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a65      	ldr	r2, [pc, #404]	; (8007258 <HAL_DMA_Abort+0x458>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d031      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a64      	ldr	r2, [pc, #400]	; (800725c <HAL_DMA_Abort+0x45c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d02c      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a62      	ldr	r2, [pc, #392]	; (8007260 <HAL_DMA_Abort+0x460>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d027      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a61      	ldr	r2, [pc, #388]	; (8007264 <HAL_DMA_Abort+0x464>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d022      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a5f      	ldr	r2, [pc, #380]	; (8007268 <HAL_DMA_Abort+0x468>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d01d      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a5e      	ldr	r2, [pc, #376]	; (800726c <HAL_DMA_Abort+0x46c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d018      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a5c      	ldr	r2, [pc, #368]	; (8007270 <HAL_DMA_Abort+0x470>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d013      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a5b      	ldr	r2, [pc, #364]	; (8007274 <HAL_DMA_Abort+0x474>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00e      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a59      	ldr	r2, [pc, #356]	; (8007278 <HAL_DMA_Abort+0x478>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d009      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a58      	ldr	r2, [pc, #352]	; (800727c <HAL_DMA_Abort+0x47c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <HAL_DMA_Abort+0x32a>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a56      	ldr	r2, [pc, #344]	; (8007280 <HAL_DMA_Abort+0x480>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d108      	bne.n	800713c <HAL_DMA_Abort+0x33c>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0201 	bic.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	e007      	b.n	800714c <HAL_DMA_Abort+0x34c>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 0201 	bic.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800714c:	e013      	b.n	8007176 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800714e:	f7fe fd3b 	bl	8005bc8 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b05      	cmp	r3, #5
 800715a:	d90c      	bls.n	8007176 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2203      	movs	r2, #3
 8007166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e12d      	b.n	80073d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e5      	bne.n	800714e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a2f      	ldr	r2, [pc, #188]	; (8007244 <HAL_DMA_Abort+0x444>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d04a      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a2d      	ldr	r2, [pc, #180]	; (8007248 <HAL_DMA_Abort+0x448>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d045      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a2c      	ldr	r2, [pc, #176]	; (800724c <HAL_DMA_Abort+0x44c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d040      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a2a      	ldr	r2, [pc, #168]	; (8007250 <HAL_DMA_Abort+0x450>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d03b      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a29      	ldr	r2, [pc, #164]	; (8007254 <HAL_DMA_Abort+0x454>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d036      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a27      	ldr	r2, [pc, #156]	; (8007258 <HAL_DMA_Abort+0x458>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d031      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a26      	ldr	r2, [pc, #152]	; (800725c <HAL_DMA_Abort+0x45c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d02c      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a24      	ldr	r2, [pc, #144]	; (8007260 <HAL_DMA_Abort+0x460>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d027      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a23      	ldr	r2, [pc, #140]	; (8007264 <HAL_DMA_Abort+0x464>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d022      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a21      	ldr	r2, [pc, #132]	; (8007268 <HAL_DMA_Abort+0x468>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d01d      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a20      	ldr	r2, [pc, #128]	; (800726c <HAL_DMA_Abort+0x46c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d018      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a1e      	ldr	r2, [pc, #120]	; (8007270 <HAL_DMA_Abort+0x470>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d013      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <HAL_DMA_Abort+0x474>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00e      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a1b      	ldr	r2, [pc, #108]	; (8007278 <HAL_DMA_Abort+0x478>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d009      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a1a      	ldr	r2, [pc, #104]	; (800727c <HAL_DMA_Abort+0x47c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d004      	beq.n	8007222 <HAL_DMA_Abort+0x422>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a18      	ldr	r2, [pc, #96]	; (8007280 <HAL_DMA_Abort+0x480>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d101      	bne.n	8007226 <HAL_DMA_Abort+0x426>
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <HAL_DMA_Abort+0x428>
 8007226:	2300      	movs	r3, #0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d02b      	beq.n	8007284 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007230:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007236:	f003 031f 	and.w	r3, r3, #31
 800723a:	223f      	movs	r2, #63	; 0x3f
 800723c:	409a      	lsls	r2, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	609a      	str	r2, [r3, #8]
 8007242:	e02a      	b.n	800729a <HAL_DMA_Abort+0x49a>
 8007244:	40020010 	.word	0x40020010
 8007248:	40020028 	.word	0x40020028
 800724c:	40020040 	.word	0x40020040
 8007250:	40020058 	.word	0x40020058
 8007254:	40020070 	.word	0x40020070
 8007258:	40020088 	.word	0x40020088
 800725c:	400200a0 	.word	0x400200a0
 8007260:	400200b8 	.word	0x400200b8
 8007264:	40020410 	.word	0x40020410
 8007268:	40020428 	.word	0x40020428
 800726c:	40020440 	.word	0x40020440
 8007270:	40020458 	.word	0x40020458
 8007274:	40020470 	.word	0x40020470
 8007278:	40020488 	.word	0x40020488
 800727c:	400204a0 	.word	0x400204a0
 8007280:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007288:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728e:	f003 031f 	and.w	r3, r3, #31
 8007292:	2201      	movs	r2, #1
 8007294:	409a      	lsls	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a4f      	ldr	r2, [pc, #316]	; (80073dc <HAL_DMA_Abort+0x5dc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d072      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a4d      	ldr	r2, [pc, #308]	; (80073e0 <HAL_DMA_Abort+0x5e0>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d06d      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a4c      	ldr	r2, [pc, #304]	; (80073e4 <HAL_DMA_Abort+0x5e4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d068      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a4a      	ldr	r2, [pc, #296]	; (80073e8 <HAL_DMA_Abort+0x5e8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d063      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a49      	ldr	r2, [pc, #292]	; (80073ec <HAL_DMA_Abort+0x5ec>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d05e      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a47      	ldr	r2, [pc, #284]	; (80073f0 <HAL_DMA_Abort+0x5f0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d059      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a46      	ldr	r2, [pc, #280]	; (80073f4 <HAL_DMA_Abort+0x5f4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d054      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a44      	ldr	r2, [pc, #272]	; (80073f8 <HAL_DMA_Abort+0x5f8>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d04f      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a43      	ldr	r2, [pc, #268]	; (80073fc <HAL_DMA_Abort+0x5fc>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d04a      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a41      	ldr	r2, [pc, #260]	; (8007400 <HAL_DMA_Abort+0x600>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d045      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a40      	ldr	r2, [pc, #256]	; (8007404 <HAL_DMA_Abort+0x604>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d040      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a3e      	ldr	r2, [pc, #248]	; (8007408 <HAL_DMA_Abort+0x608>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d03b      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a3d      	ldr	r2, [pc, #244]	; (800740c <HAL_DMA_Abort+0x60c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d036      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a3b      	ldr	r2, [pc, #236]	; (8007410 <HAL_DMA_Abort+0x610>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d031      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a3a      	ldr	r2, [pc, #232]	; (8007414 <HAL_DMA_Abort+0x614>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d02c      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a38      	ldr	r2, [pc, #224]	; (8007418 <HAL_DMA_Abort+0x618>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d027      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a37      	ldr	r2, [pc, #220]	; (800741c <HAL_DMA_Abort+0x61c>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d022      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a35      	ldr	r2, [pc, #212]	; (8007420 <HAL_DMA_Abort+0x620>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d01d      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a34      	ldr	r2, [pc, #208]	; (8007424 <HAL_DMA_Abort+0x624>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d018      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a32      	ldr	r2, [pc, #200]	; (8007428 <HAL_DMA_Abort+0x628>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a31      	ldr	r2, [pc, #196]	; (800742c <HAL_DMA_Abort+0x62c>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d00e      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a2f      	ldr	r2, [pc, #188]	; (8007430 <HAL_DMA_Abort+0x630>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d009      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a2e      	ldr	r2, [pc, #184]	; (8007434 <HAL_DMA_Abort+0x634>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <HAL_DMA_Abort+0x58a>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a2c      	ldr	r2, [pc, #176]	; (8007438 <HAL_DMA_Abort+0x638>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d101      	bne.n	800738e <HAL_DMA_Abort+0x58e>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <HAL_DMA_Abort+0x590>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d015      	beq.n	80073c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800739c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00c      	beq.n	80073c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	40020010 	.word	0x40020010
 80073e0:	40020028 	.word	0x40020028
 80073e4:	40020040 	.word	0x40020040
 80073e8:	40020058 	.word	0x40020058
 80073ec:	40020070 	.word	0x40020070
 80073f0:	40020088 	.word	0x40020088
 80073f4:	400200a0 	.word	0x400200a0
 80073f8:	400200b8 	.word	0x400200b8
 80073fc:	40020410 	.word	0x40020410
 8007400:	40020428 	.word	0x40020428
 8007404:	40020440 	.word	0x40020440
 8007408:	40020458 	.word	0x40020458
 800740c:	40020470 	.word	0x40020470
 8007410:	40020488 	.word	0x40020488
 8007414:	400204a0 	.word	0x400204a0
 8007418:	400204b8 	.word	0x400204b8
 800741c:	58025408 	.word	0x58025408
 8007420:	5802541c 	.word	0x5802541c
 8007424:	58025430 	.word	0x58025430
 8007428:	58025444 	.word	0x58025444
 800742c:	58025458 	.word	0x58025458
 8007430:	5802546c 	.word	0x5802546c
 8007434:	58025480 	.word	0x58025480
 8007438:	58025494 	.word	0x58025494

0800743c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e205      	b.n	800785a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b02      	cmp	r3, #2
 8007458:	d004      	beq.n	8007464 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2280      	movs	r2, #128	; 0x80
 800745e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e1fa      	b.n	800785a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a8c      	ldr	r2, [pc, #560]	; (800769c <HAL_DMA_Abort_IT+0x260>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d04a      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a8b      	ldr	r2, [pc, #556]	; (80076a0 <HAL_DMA_Abort_IT+0x264>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d045      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a89      	ldr	r2, [pc, #548]	; (80076a4 <HAL_DMA_Abort_IT+0x268>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d040      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a88      	ldr	r2, [pc, #544]	; (80076a8 <HAL_DMA_Abort_IT+0x26c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d03b      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a86      	ldr	r2, [pc, #536]	; (80076ac <HAL_DMA_Abort_IT+0x270>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d036      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a85      	ldr	r2, [pc, #532]	; (80076b0 <HAL_DMA_Abort_IT+0x274>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d031      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a83      	ldr	r2, [pc, #524]	; (80076b4 <HAL_DMA_Abort_IT+0x278>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d02c      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a82      	ldr	r2, [pc, #520]	; (80076b8 <HAL_DMA_Abort_IT+0x27c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d027      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a80      	ldr	r2, [pc, #512]	; (80076bc <HAL_DMA_Abort_IT+0x280>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d022      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a7f      	ldr	r2, [pc, #508]	; (80076c0 <HAL_DMA_Abort_IT+0x284>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d01d      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a7d      	ldr	r2, [pc, #500]	; (80076c4 <HAL_DMA_Abort_IT+0x288>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d018      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a7c      	ldr	r2, [pc, #496]	; (80076c8 <HAL_DMA_Abort_IT+0x28c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d013      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a7a      	ldr	r2, [pc, #488]	; (80076cc <HAL_DMA_Abort_IT+0x290>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00e      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a79      	ldr	r2, [pc, #484]	; (80076d0 <HAL_DMA_Abort_IT+0x294>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d009      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a77      	ldr	r2, [pc, #476]	; (80076d4 <HAL_DMA_Abort_IT+0x298>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d004      	beq.n	8007504 <HAL_DMA_Abort_IT+0xc8>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a76      	ldr	r2, [pc, #472]	; (80076d8 <HAL_DMA_Abort_IT+0x29c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d101      	bne.n	8007508 <HAL_DMA_Abort_IT+0xcc>
 8007504:	2301      	movs	r3, #1
 8007506:	e000      	b.n	800750a <HAL_DMA_Abort_IT+0xce>
 8007508:	2300      	movs	r3, #0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d065      	beq.n	80075da <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2204      	movs	r2, #4
 8007512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a60      	ldr	r2, [pc, #384]	; (800769c <HAL_DMA_Abort_IT+0x260>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d04a      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a5e      	ldr	r2, [pc, #376]	; (80076a0 <HAL_DMA_Abort_IT+0x264>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d045      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a5d      	ldr	r2, [pc, #372]	; (80076a4 <HAL_DMA_Abort_IT+0x268>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d040      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a5b      	ldr	r2, [pc, #364]	; (80076a8 <HAL_DMA_Abort_IT+0x26c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d03b      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a5a      	ldr	r2, [pc, #360]	; (80076ac <HAL_DMA_Abort_IT+0x270>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d036      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a58      	ldr	r2, [pc, #352]	; (80076b0 <HAL_DMA_Abort_IT+0x274>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d031      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a57      	ldr	r2, [pc, #348]	; (80076b4 <HAL_DMA_Abort_IT+0x278>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d02c      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a55      	ldr	r2, [pc, #340]	; (80076b8 <HAL_DMA_Abort_IT+0x27c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d027      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a54      	ldr	r2, [pc, #336]	; (80076bc <HAL_DMA_Abort_IT+0x280>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d022      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a52      	ldr	r2, [pc, #328]	; (80076c0 <HAL_DMA_Abort_IT+0x284>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d01d      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a51      	ldr	r2, [pc, #324]	; (80076c4 <HAL_DMA_Abort_IT+0x288>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d018      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a4f      	ldr	r2, [pc, #316]	; (80076c8 <HAL_DMA_Abort_IT+0x28c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d013      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a4e      	ldr	r2, [pc, #312]	; (80076cc <HAL_DMA_Abort_IT+0x290>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00e      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a4c      	ldr	r2, [pc, #304]	; (80076d0 <HAL_DMA_Abort_IT+0x294>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d009      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a4b      	ldr	r2, [pc, #300]	; (80076d4 <HAL_DMA_Abort_IT+0x298>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d004      	beq.n	80075b6 <HAL_DMA_Abort_IT+0x17a>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a49      	ldr	r2, [pc, #292]	; (80076d8 <HAL_DMA_Abort_IT+0x29c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d108      	bne.n	80075c8 <HAL_DMA_Abort_IT+0x18c>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0201 	bic.w	r2, r2, #1
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	e147      	b.n	8007858 <HAL_DMA_Abort_IT+0x41c>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0201 	bic.w	r2, r2, #1
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	e13e      	b.n	8007858 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 020e 	bic.w	r2, r2, #14
 80075e8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a2b      	ldr	r2, [pc, #172]	; (800769c <HAL_DMA_Abort_IT+0x260>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d04a      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a29      	ldr	r2, [pc, #164]	; (80076a0 <HAL_DMA_Abort_IT+0x264>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d045      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a28      	ldr	r2, [pc, #160]	; (80076a4 <HAL_DMA_Abort_IT+0x268>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d040      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a26      	ldr	r2, [pc, #152]	; (80076a8 <HAL_DMA_Abort_IT+0x26c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d03b      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a25      	ldr	r2, [pc, #148]	; (80076ac <HAL_DMA_Abort_IT+0x270>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d036      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a23      	ldr	r2, [pc, #140]	; (80076b0 <HAL_DMA_Abort_IT+0x274>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d031      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a22      	ldr	r2, [pc, #136]	; (80076b4 <HAL_DMA_Abort_IT+0x278>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d02c      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a20      	ldr	r2, [pc, #128]	; (80076b8 <HAL_DMA_Abort_IT+0x27c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d027      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1f      	ldr	r2, [pc, #124]	; (80076bc <HAL_DMA_Abort_IT+0x280>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d022      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1d      	ldr	r2, [pc, #116]	; (80076c0 <HAL_DMA_Abort_IT+0x284>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d01d      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <HAL_DMA_Abort_IT+0x288>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d018      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a1a      	ldr	r2, [pc, #104]	; (80076c8 <HAL_DMA_Abort_IT+0x28c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d013      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a19      	ldr	r2, [pc, #100]	; (80076cc <HAL_DMA_Abort_IT+0x290>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00e      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a17      	ldr	r2, [pc, #92]	; (80076d0 <HAL_DMA_Abort_IT+0x294>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d009      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a16      	ldr	r2, [pc, #88]	; (80076d4 <HAL_DMA_Abort_IT+0x298>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d004      	beq.n	800768a <HAL_DMA_Abort_IT+0x24e>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a14      	ldr	r2, [pc, #80]	; (80076d8 <HAL_DMA_Abort_IT+0x29c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d128      	bne.n	80076dc <HAL_DMA_Abort_IT+0x2a0>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0201 	bic.w	r2, r2, #1
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	e027      	b.n	80076ec <HAL_DMA_Abort_IT+0x2b0>
 800769c:	40020010 	.word	0x40020010
 80076a0:	40020028 	.word	0x40020028
 80076a4:	40020040 	.word	0x40020040
 80076a8:	40020058 	.word	0x40020058
 80076ac:	40020070 	.word	0x40020070
 80076b0:	40020088 	.word	0x40020088
 80076b4:	400200a0 	.word	0x400200a0
 80076b8:	400200b8 	.word	0x400200b8
 80076bc:	40020410 	.word	0x40020410
 80076c0:	40020428 	.word	0x40020428
 80076c4:	40020440 	.word	0x40020440
 80076c8:	40020458 	.word	0x40020458
 80076cc:	40020470 	.word	0x40020470
 80076d0:	40020488 	.word	0x40020488
 80076d4:	400204a0 	.word	0x400204a0
 80076d8:	400204b8 	.word	0x400204b8
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0201 	bic.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a5c      	ldr	r2, [pc, #368]	; (8007864 <HAL_DMA_Abort_IT+0x428>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d072      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a5b      	ldr	r2, [pc, #364]	; (8007868 <HAL_DMA_Abort_IT+0x42c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d06d      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a59      	ldr	r2, [pc, #356]	; (800786c <HAL_DMA_Abort_IT+0x430>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d068      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a58      	ldr	r2, [pc, #352]	; (8007870 <HAL_DMA_Abort_IT+0x434>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d063      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a56      	ldr	r2, [pc, #344]	; (8007874 <HAL_DMA_Abort_IT+0x438>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d05e      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a55      	ldr	r2, [pc, #340]	; (8007878 <HAL_DMA_Abort_IT+0x43c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d059      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a53      	ldr	r2, [pc, #332]	; (800787c <HAL_DMA_Abort_IT+0x440>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d054      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a52      	ldr	r2, [pc, #328]	; (8007880 <HAL_DMA_Abort_IT+0x444>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d04f      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a50      	ldr	r2, [pc, #320]	; (8007884 <HAL_DMA_Abort_IT+0x448>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d04a      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a4f      	ldr	r2, [pc, #316]	; (8007888 <HAL_DMA_Abort_IT+0x44c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d045      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a4d      	ldr	r2, [pc, #308]	; (800788c <HAL_DMA_Abort_IT+0x450>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d040      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a4c      	ldr	r2, [pc, #304]	; (8007890 <HAL_DMA_Abort_IT+0x454>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d03b      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a4a      	ldr	r2, [pc, #296]	; (8007894 <HAL_DMA_Abort_IT+0x458>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d036      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a49      	ldr	r2, [pc, #292]	; (8007898 <HAL_DMA_Abort_IT+0x45c>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d031      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a47      	ldr	r2, [pc, #284]	; (800789c <HAL_DMA_Abort_IT+0x460>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d02c      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a46      	ldr	r2, [pc, #280]	; (80078a0 <HAL_DMA_Abort_IT+0x464>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d027      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a44      	ldr	r2, [pc, #272]	; (80078a4 <HAL_DMA_Abort_IT+0x468>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d022      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a43      	ldr	r2, [pc, #268]	; (80078a8 <HAL_DMA_Abort_IT+0x46c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d01d      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a41      	ldr	r2, [pc, #260]	; (80078ac <HAL_DMA_Abort_IT+0x470>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d018      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a40      	ldr	r2, [pc, #256]	; (80078b0 <HAL_DMA_Abort_IT+0x474>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d013      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a3e      	ldr	r2, [pc, #248]	; (80078b4 <HAL_DMA_Abort_IT+0x478>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d00e      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a3d      	ldr	r2, [pc, #244]	; (80078b8 <HAL_DMA_Abort_IT+0x47c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d009      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a3b      	ldr	r2, [pc, #236]	; (80078bc <HAL_DMA_Abort_IT+0x480>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d004      	beq.n	80077dc <HAL_DMA_Abort_IT+0x3a0>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a3a      	ldr	r2, [pc, #232]	; (80078c0 <HAL_DMA_Abort_IT+0x484>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d101      	bne.n	80077e0 <HAL_DMA_Abort_IT+0x3a4>
 80077dc:	2301      	movs	r3, #1
 80077de:	e000      	b.n	80077e2 <HAL_DMA_Abort_IT+0x3a6>
 80077e0:	2300      	movs	r3, #0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d028      	beq.n	8007838 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	2201      	movs	r2, #1
 8007806:	409a      	lsls	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007814:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00c      	beq.n	8007838 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800782c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007836:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	40020010 	.word	0x40020010
 8007868:	40020028 	.word	0x40020028
 800786c:	40020040 	.word	0x40020040
 8007870:	40020058 	.word	0x40020058
 8007874:	40020070 	.word	0x40020070
 8007878:	40020088 	.word	0x40020088
 800787c:	400200a0 	.word	0x400200a0
 8007880:	400200b8 	.word	0x400200b8
 8007884:	40020410 	.word	0x40020410
 8007888:	40020428 	.word	0x40020428
 800788c:	40020440 	.word	0x40020440
 8007890:	40020458 	.word	0x40020458
 8007894:	40020470 	.word	0x40020470
 8007898:	40020488 	.word	0x40020488
 800789c:	400204a0 	.word	0x400204a0
 80078a0:	400204b8 	.word	0x400204b8
 80078a4:	58025408 	.word	0x58025408
 80078a8:	5802541c 	.word	0x5802541c
 80078ac:	58025430 	.word	0x58025430
 80078b0:	58025444 	.word	0x58025444
 80078b4:	58025458 	.word	0x58025458
 80078b8:	5802546c 	.word	0x5802546c
 80078bc:	58025480 	.word	0x58025480
 80078c0:	58025494 	.word	0x58025494

080078c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08a      	sub	sp, #40	; 0x28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80078d0:	4b67      	ldr	r3, [pc, #412]	; (8007a70 <HAL_DMA_IRQHandler+0x1ac>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a67      	ldr	r2, [pc, #412]	; (8007a74 <HAL_DMA_IRQHandler+0x1b0>)
 80078d6:	fba2 2303 	umull	r2, r3, r2, r3
 80078da:	0a9b      	lsrs	r3, r3, #10
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a5f      	ldr	r2, [pc, #380]	; (8007a78 <HAL_DMA_IRQHandler+0x1b4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d04a      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a5d      	ldr	r2, [pc, #372]	; (8007a7c <HAL_DMA_IRQHandler+0x1b8>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d045      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a5c      	ldr	r2, [pc, #368]	; (8007a80 <HAL_DMA_IRQHandler+0x1bc>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d040      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a5a      	ldr	r2, [pc, #360]	; (8007a84 <HAL_DMA_IRQHandler+0x1c0>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d03b      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a59      	ldr	r2, [pc, #356]	; (8007a88 <HAL_DMA_IRQHandler+0x1c4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d036      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a57      	ldr	r2, [pc, #348]	; (8007a8c <HAL_DMA_IRQHandler+0x1c8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d031      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a56      	ldr	r2, [pc, #344]	; (8007a90 <HAL_DMA_IRQHandler+0x1cc>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d02c      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a54      	ldr	r2, [pc, #336]	; (8007a94 <HAL_DMA_IRQHandler+0x1d0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d027      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a53      	ldr	r2, [pc, #332]	; (8007a98 <HAL_DMA_IRQHandler+0x1d4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d022      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a51      	ldr	r2, [pc, #324]	; (8007a9c <HAL_DMA_IRQHandler+0x1d8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d01d      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a50      	ldr	r2, [pc, #320]	; (8007aa0 <HAL_DMA_IRQHandler+0x1dc>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d018      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a4e      	ldr	r2, [pc, #312]	; (8007aa4 <HAL_DMA_IRQHandler+0x1e0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a4d      	ldr	r2, [pc, #308]	; (8007aa8 <HAL_DMA_IRQHandler+0x1e4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00e      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a4b      	ldr	r2, [pc, #300]	; (8007aac <HAL_DMA_IRQHandler+0x1e8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d009      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a4a      	ldr	r2, [pc, #296]	; (8007ab0 <HAL_DMA_IRQHandler+0x1ec>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d004      	beq.n	8007996 <HAL_DMA_IRQHandler+0xd2>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a48      	ldr	r2, [pc, #288]	; (8007ab4 <HAL_DMA_IRQHandler+0x1f0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d101      	bne.n	800799a <HAL_DMA_IRQHandler+0xd6>
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <HAL_DMA_IRQHandler+0xd8>
 800799a:	2300      	movs	r3, #0
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 842b 	beq.w	80081f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a6:	f003 031f 	and.w	r3, r3, #31
 80079aa:	2208      	movs	r2, #8
 80079ac:	409a      	lsls	r2, r3
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	4013      	ands	r3, r2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 80a2 	beq.w	8007afc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a2e      	ldr	r2, [pc, #184]	; (8007a78 <HAL_DMA_IRQHandler+0x1b4>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d04a      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a2d      	ldr	r2, [pc, #180]	; (8007a7c <HAL_DMA_IRQHandler+0x1b8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d045      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a2b      	ldr	r2, [pc, #172]	; (8007a80 <HAL_DMA_IRQHandler+0x1bc>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d040      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a2a      	ldr	r2, [pc, #168]	; (8007a84 <HAL_DMA_IRQHandler+0x1c0>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d03b      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a28      	ldr	r2, [pc, #160]	; (8007a88 <HAL_DMA_IRQHandler+0x1c4>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d036      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a27      	ldr	r2, [pc, #156]	; (8007a8c <HAL_DMA_IRQHandler+0x1c8>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d031      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a25      	ldr	r2, [pc, #148]	; (8007a90 <HAL_DMA_IRQHandler+0x1cc>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d02c      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a24      	ldr	r2, [pc, #144]	; (8007a94 <HAL_DMA_IRQHandler+0x1d0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d027      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a22      	ldr	r2, [pc, #136]	; (8007a98 <HAL_DMA_IRQHandler+0x1d4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d022      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a21      	ldr	r2, [pc, #132]	; (8007a9c <HAL_DMA_IRQHandler+0x1d8>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d01d      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a1f      	ldr	r2, [pc, #124]	; (8007aa0 <HAL_DMA_IRQHandler+0x1dc>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d018      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a1e      	ldr	r2, [pc, #120]	; (8007aa4 <HAL_DMA_IRQHandler+0x1e0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d013      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a1c      	ldr	r2, [pc, #112]	; (8007aa8 <HAL_DMA_IRQHandler+0x1e4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d00e      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a1b      	ldr	r2, [pc, #108]	; (8007aac <HAL_DMA_IRQHandler+0x1e8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d009      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a19      	ldr	r2, [pc, #100]	; (8007ab0 <HAL_DMA_IRQHandler+0x1ec>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d004      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x194>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a18      	ldr	r2, [pc, #96]	; (8007ab4 <HAL_DMA_IRQHandler+0x1f0>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d12f      	bne.n	8007ab8 <HAL_DMA_IRQHandler+0x1f4>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bf14      	ite	ne
 8007a66:	2301      	movne	r3, #1
 8007a68:	2300      	moveq	r3, #0
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	e02e      	b.n	8007acc <HAL_DMA_IRQHandler+0x208>
 8007a6e:	bf00      	nop
 8007a70:	2400002c 	.word	0x2400002c
 8007a74:	1b4e81b5 	.word	0x1b4e81b5
 8007a78:	40020010 	.word	0x40020010
 8007a7c:	40020028 	.word	0x40020028
 8007a80:	40020040 	.word	0x40020040
 8007a84:	40020058 	.word	0x40020058
 8007a88:	40020070 	.word	0x40020070
 8007a8c:	40020088 	.word	0x40020088
 8007a90:	400200a0 	.word	0x400200a0
 8007a94:	400200b8 	.word	0x400200b8
 8007a98:	40020410 	.word	0x40020410
 8007a9c:	40020428 	.word	0x40020428
 8007aa0:	40020440 	.word	0x40020440
 8007aa4:	40020458 	.word	0x40020458
 8007aa8:	40020470 	.word	0x40020470
 8007aac:	40020488 	.word	0x40020488
 8007ab0:	400204a0 	.word	0x400204a0
 8007ab4:	400204b8 	.word	0x400204b8
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0308 	and.w	r3, r3, #8
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bf14      	ite	ne
 8007ac6:	2301      	movne	r3, #1
 8007ac8:	2300      	moveq	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d015      	beq.n	8007afc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 0204 	bic.w	r2, r2, #4
 8007ade:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae4:	f003 031f 	and.w	r3, r3, #31
 8007ae8:	2208      	movs	r2, #8
 8007aea:	409a      	lsls	r2, r3
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af4:	f043 0201 	orr.w	r2, r3, #1
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b00:	f003 031f 	and.w	r3, r3, #31
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d06e      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a69      	ldr	r2, [pc, #420]	; (8007cbc <HAL_DMA_IRQHandler+0x3f8>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d04a      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a67      	ldr	r2, [pc, #412]	; (8007cc0 <HAL_DMA_IRQHandler+0x3fc>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d045      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a66      	ldr	r2, [pc, #408]	; (8007cc4 <HAL_DMA_IRQHandler+0x400>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d040      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a64      	ldr	r2, [pc, #400]	; (8007cc8 <HAL_DMA_IRQHandler+0x404>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d03b      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a63      	ldr	r2, [pc, #396]	; (8007ccc <HAL_DMA_IRQHandler+0x408>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d036      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a61      	ldr	r2, [pc, #388]	; (8007cd0 <HAL_DMA_IRQHandler+0x40c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d031      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a60      	ldr	r2, [pc, #384]	; (8007cd4 <HAL_DMA_IRQHandler+0x410>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d02c      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a5e      	ldr	r2, [pc, #376]	; (8007cd8 <HAL_DMA_IRQHandler+0x414>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d027      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a5d      	ldr	r2, [pc, #372]	; (8007cdc <HAL_DMA_IRQHandler+0x418>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d022      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a5b      	ldr	r2, [pc, #364]	; (8007ce0 <HAL_DMA_IRQHandler+0x41c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d01d      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a5a      	ldr	r2, [pc, #360]	; (8007ce4 <HAL_DMA_IRQHandler+0x420>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d018      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a58      	ldr	r2, [pc, #352]	; (8007ce8 <HAL_DMA_IRQHandler+0x424>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d013      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a57      	ldr	r2, [pc, #348]	; (8007cec <HAL_DMA_IRQHandler+0x428>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d00e      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a55      	ldr	r2, [pc, #340]	; (8007cf0 <HAL_DMA_IRQHandler+0x42c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d009      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a54      	ldr	r2, [pc, #336]	; (8007cf4 <HAL_DMA_IRQHandler+0x430>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d004      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x2ee>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a52      	ldr	r2, [pc, #328]	; (8007cf8 <HAL_DMA_IRQHandler+0x434>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d10a      	bne.n	8007bc8 <HAL_DMA_IRQHandler+0x304>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bf14      	ite	ne
 8007bc0:	2301      	movne	r3, #1
 8007bc2:	2300      	moveq	r3, #0
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	e003      	b.n	8007bd0 <HAL_DMA_IRQHandler+0x30c>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00d      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd8:	f003 031f 	and.w	r3, r3, #31
 8007bdc:	2201      	movs	r2, #1
 8007bde:	409a      	lsls	r2, r3
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be8:	f043 0202 	orr.w	r2, r3, #2
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf4:	f003 031f 	and.w	r3, r3, #31
 8007bf8:	2204      	movs	r2, #4
 8007bfa:	409a      	lsls	r2, r3
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 808f 	beq.w	8007d24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a2c      	ldr	r2, [pc, #176]	; (8007cbc <HAL_DMA_IRQHandler+0x3f8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d04a      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a2a      	ldr	r2, [pc, #168]	; (8007cc0 <HAL_DMA_IRQHandler+0x3fc>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d045      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a29      	ldr	r2, [pc, #164]	; (8007cc4 <HAL_DMA_IRQHandler+0x400>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d040      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a27      	ldr	r2, [pc, #156]	; (8007cc8 <HAL_DMA_IRQHandler+0x404>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d03b      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a26      	ldr	r2, [pc, #152]	; (8007ccc <HAL_DMA_IRQHandler+0x408>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d036      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a24      	ldr	r2, [pc, #144]	; (8007cd0 <HAL_DMA_IRQHandler+0x40c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d031      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a23      	ldr	r2, [pc, #140]	; (8007cd4 <HAL_DMA_IRQHandler+0x410>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d02c      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a21      	ldr	r2, [pc, #132]	; (8007cd8 <HAL_DMA_IRQHandler+0x414>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d027      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a20      	ldr	r2, [pc, #128]	; (8007cdc <HAL_DMA_IRQHandler+0x418>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d022      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a1e      	ldr	r2, [pc, #120]	; (8007ce0 <HAL_DMA_IRQHandler+0x41c>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d01d      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ce4 <HAL_DMA_IRQHandler+0x420>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d018      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a1b      	ldr	r2, [pc, #108]	; (8007ce8 <HAL_DMA_IRQHandler+0x424>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d013      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a1a      	ldr	r2, [pc, #104]	; (8007cec <HAL_DMA_IRQHandler+0x428>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d00e      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a18      	ldr	r2, [pc, #96]	; (8007cf0 <HAL_DMA_IRQHandler+0x42c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d009      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a17      	ldr	r2, [pc, #92]	; (8007cf4 <HAL_DMA_IRQHandler+0x430>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d004      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x3e2>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a15      	ldr	r2, [pc, #84]	; (8007cf8 <HAL_DMA_IRQHandler+0x434>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d12a      	bne.n	8007cfc <HAL_DMA_IRQHandler+0x438>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	bf14      	ite	ne
 8007cb4:	2301      	movne	r3, #1
 8007cb6:	2300      	moveq	r3, #0
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	e023      	b.n	8007d04 <HAL_DMA_IRQHandler+0x440>
 8007cbc:	40020010 	.word	0x40020010
 8007cc0:	40020028 	.word	0x40020028
 8007cc4:	40020040 	.word	0x40020040
 8007cc8:	40020058 	.word	0x40020058
 8007ccc:	40020070 	.word	0x40020070
 8007cd0:	40020088 	.word	0x40020088
 8007cd4:	400200a0 	.word	0x400200a0
 8007cd8:	400200b8 	.word	0x400200b8
 8007cdc:	40020410 	.word	0x40020410
 8007ce0:	40020428 	.word	0x40020428
 8007ce4:	40020440 	.word	0x40020440
 8007ce8:	40020458 	.word	0x40020458
 8007cec:	40020470 	.word	0x40020470
 8007cf0:	40020488 	.word	0x40020488
 8007cf4:	400204a0 	.word	0x400204a0
 8007cf8:	400204b8 	.word	0x400204b8
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2300      	movs	r3, #0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00d      	beq.n	8007d24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d0c:	f003 031f 	and.w	r3, r3, #31
 8007d10:	2204      	movs	r2, #4
 8007d12:	409a      	lsls	r2, r3
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1c:	f043 0204 	orr.w	r2, r3, #4
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d28:	f003 031f 	and.w	r3, r3, #31
 8007d2c:	2210      	movs	r2, #16
 8007d2e:	409a      	lsls	r2, r3
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	4013      	ands	r3, r2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 80a6 	beq.w	8007e86 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a85      	ldr	r2, [pc, #532]	; (8007f54 <HAL_DMA_IRQHandler+0x690>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d04a      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a83      	ldr	r2, [pc, #524]	; (8007f58 <HAL_DMA_IRQHandler+0x694>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d045      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a82      	ldr	r2, [pc, #520]	; (8007f5c <HAL_DMA_IRQHandler+0x698>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d040      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a80      	ldr	r2, [pc, #512]	; (8007f60 <HAL_DMA_IRQHandler+0x69c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d03b      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a7f      	ldr	r2, [pc, #508]	; (8007f64 <HAL_DMA_IRQHandler+0x6a0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d036      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a7d      	ldr	r2, [pc, #500]	; (8007f68 <HAL_DMA_IRQHandler+0x6a4>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d031      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a7c      	ldr	r2, [pc, #496]	; (8007f6c <HAL_DMA_IRQHandler+0x6a8>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d02c      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a7a      	ldr	r2, [pc, #488]	; (8007f70 <HAL_DMA_IRQHandler+0x6ac>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d027      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a79      	ldr	r2, [pc, #484]	; (8007f74 <HAL_DMA_IRQHandler+0x6b0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d022      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a77      	ldr	r2, [pc, #476]	; (8007f78 <HAL_DMA_IRQHandler+0x6b4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d01d      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a76      	ldr	r2, [pc, #472]	; (8007f7c <HAL_DMA_IRQHandler+0x6b8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d018      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a74      	ldr	r2, [pc, #464]	; (8007f80 <HAL_DMA_IRQHandler+0x6bc>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d013      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a73      	ldr	r2, [pc, #460]	; (8007f84 <HAL_DMA_IRQHandler+0x6c0>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d00e      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a71      	ldr	r2, [pc, #452]	; (8007f88 <HAL_DMA_IRQHandler+0x6c4>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d009      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a70      	ldr	r2, [pc, #448]	; (8007f8c <HAL_DMA_IRQHandler+0x6c8>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d004      	beq.n	8007dda <HAL_DMA_IRQHandler+0x516>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a6e      	ldr	r2, [pc, #440]	; (8007f90 <HAL_DMA_IRQHandler+0x6cc>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d10a      	bne.n	8007df0 <HAL_DMA_IRQHandler+0x52c>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0308 	and.w	r3, r3, #8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bf14      	ite	ne
 8007de8:	2301      	movne	r3, #1
 8007dea:	2300      	moveq	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	e009      	b.n	8007e04 <HAL_DMA_IRQHandler+0x540>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0304 	and.w	r3, r3, #4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	bf14      	ite	ne
 8007dfe:	2301      	movne	r3, #1
 8007e00:	2300      	moveq	r3, #0
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d03e      	beq.n	8007e86 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e0c:	f003 031f 	and.w	r3, r3, #31
 8007e10:	2210      	movs	r2, #16
 8007e12:	409a      	lsls	r2, r3
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d018      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d108      	bne.n	8007e46 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d024      	beq.n	8007e86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	4798      	blx	r3
 8007e44:	e01f      	b.n	8007e86 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d01b      	beq.n	8007e86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
 8007e56:	e016      	b.n	8007e86 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d107      	bne.n	8007e76 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f022 0208 	bic.w	r2, r2, #8
 8007e74:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e8a:	f003 031f 	and.w	r3, r3, #31
 8007e8e:	2220      	movs	r2, #32
 8007e90:	409a      	lsls	r2, r3
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	4013      	ands	r3, r2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 8110 	beq.w	80080bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a2c      	ldr	r2, [pc, #176]	; (8007f54 <HAL_DMA_IRQHandler+0x690>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d04a      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a2b      	ldr	r2, [pc, #172]	; (8007f58 <HAL_DMA_IRQHandler+0x694>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d045      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a29      	ldr	r2, [pc, #164]	; (8007f5c <HAL_DMA_IRQHandler+0x698>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d040      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a28      	ldr	r2, [pc, #160]	; (8007f60 <HAL_DMA_IRQHandler+0x69c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d03b      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a26      	ldr	r2, [pc, #152]	; (8007f64 <HAL_DMA_IRQHandler+0x6a0>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d036      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a25      	ldr	r2, [pc, #148]	; (8007f68 <HAL_DMA_IRQHandler+0x6a4>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d031      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a23      	ldr	r2, [pc, #140]	; (8007f6c <HAL_DMA_IRQHandler+0x6a8>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d02c      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a22      	ldr	r2, [pc, #136]	; (8007f70 <HAL_DMA_IRQHandler+0x6ac>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d027      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a20      	ldr	r2, [pc, #128]	; (8007f74 <HAL_DMA_IRQHandler+0x6b0>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d022      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a1f      	ldr	r2, [pc, #124]	; (8007f78 <HAL_DMA_IRQHandler+0x6b4>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d01d      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1d      	ldr	r2, [pc, #116]	; (8007f7c <HAL_DMA_IRQHandler+0x6b8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d018      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a1c      	ldr	r2, [pc, #112]	; (8007f80 <HAL_DMA_IRQHandler+0x6bc>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d013      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a1a      	ldr	r2, [pc, #104]	; (8007f84 <HAL_DMA_IRQHandler+0x6c0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00e      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a19      	ldr	r2, [pc, #100]	; (8007f88 <HAL_DMA_IRQHandler+0x6c4>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d009      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a17      	ldr	r2, [pc, #92]	; (8007f8c <HAL_DMA_IRQHandler+0x6c8>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d004      	beq.n	8007f3c <HAL_DMA_IRQHandler+0x678>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a16      	ldr	r2, [pc, #88]	; (8007f90 <HAL_DMA_IRQHandler+0x6cc>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d12b      	bne.n	8007f94 <HAL_DMA_IRQHandler+0x6d0>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0310 	and.w	r3, r3, #16
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bf14      	ite	ne
 8007f4a:	2301      	movne	r3, #1
 8007f4c:	2300      	moveq	r3, #0
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	e02a      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x6e4>
 8007f52:	bf00      	nop
 8007f54:	40020010 	.word	0x40020010
 8007f58:	40020028 	.word	0x40020028
 8007f5c:	40020040 	.word	0x40020040
 8007f60:	40020058 	.word	0x40020058
 8007f64:	40020070 	.word	0x40020070
 8007f68:	40020088 	.word	0x40020088
 8007f6c:	400200a0 	.word	0x400200a0
 8007f70:	400200b8 	.word	0x400200b8
 8007f74:	40020410 	.word	0x40020410
 8007f78:	40020428 	.word	0x40020428
 8007f7c:	40020440 	.word	0x40020440
 8007f80:	40020458 	.word	0x40020458
 8007f84:	40020470 	.word	0x40020470
 8007f88:	40020488 	.word	0x40020488
 8007f8c:	400204a0 	.word	0x400204a0
 8007f90:	400204b8 	.word	0x400204b8
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	bf14      	ite	ne
 8007fa2:	2301      	movne	r3, #1
 8007fa4:	2300      	moveq	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 8087 	beq.w	80080bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb2:	f003 031f 	and.w	r3, r3, #31
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	409a      	lsls	r2, r3
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d139      	bne.n	800803e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0216 	bic.w	r2, r2, #22
 8007fd8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	695a      	ldr	r2, [r3, #20]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fe8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d103      	bne.n	8007ffa <HAL_DMA_IRQHandler+0x736>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d007      	beq.n	800800a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0208 	bic.w	r2, r2, #8
 8008008:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800e:	f003 031f 	and.w	r3, r3, #31
 8008012:	223f      	movs	r2, #63	; 0x3f
 8008014:	409a      	lsls	r2, r3
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 834a 	beq.w	80086c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	4798      	blx	r3
          }
          return;
 800803c:	e344      	b.n	80086c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d018      	beq.n	800807e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d108      	bne.n	800806c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805e:	2b00      	cmp	r3, #0
 8008060:	d02c      	beq.n	80080bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3
 800806a:	e027      	b.n	80080bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008070:	2b00      	cmp	r3, #0
 8008072:	d023      	beq.n	80080bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	4798      	blx	r3
 800807c:	e01e      	b.n	80080bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10f      	bne.n	80080ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 0210 	bic.w	r2, r2, #16
 800809a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 8306 	beq.w	80086d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 8088 	beq.w	80081e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2204      	movs	r2, #4
 80080d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a7a      	ldr	r2, [pc, #488]	; (80082cc <HAL_DMA_IRQHandler+0xa08>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d04a      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a79      	ldr	r2, [pc, #484]	; (80082d0 <HAL_DMA_IRQHandler+0xa0c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d045      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a77      	ldr	r2, [pc, #476]	; (80082d4 <HAL_DMA_IRQHandler+0xa10>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d040      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a76      	ldr	r2, [pc, #472]	; (80082d8 <HAL_DMA_IRQHandler+0xa14>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d03b      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a74      	ldr	r2, [pc, #464]	; (80082dc <HAL_DMA_IRQHandler+0xa18>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d036      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a73      	ldr	r2, [pc, #460]	; (80082e0 <HAL_DMA_IRQHandler+0xa1c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d031      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a71      	ldr	r2, [pc, #452]	; (80082e4 <HAL_DMA_IRQHandler+0xa20>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d02c      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a70      	ldr	r2, [pc, #448]	; (80082e8 <HAL_DMA_IRQHandler+0xa24>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d027      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a6e      	ldr	r2, [pc, #440]	; (80082ec <HAL_DMA_IRQHandler+0xa28>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d022      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a6d      	ldr	r2, [pc, #436]	; (80082f0 <HAL_DMA_IRQHandler+0xa2c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d01d      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a6b      	ldr	r2, [pc, #428]	; (80082f4 <HAL_DMA_IRQHandler+0xa30>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d018      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a6a      	ldr	r2, [pc, #424]	; (80082f8 <HAL_DMA_IRQHandler+0xa34>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d013      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a68      	ldr	r2, [pc, #416]	; (80082fc <HAL_DMA_IRQHandler+0xa38>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d00e      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a67      	ldr	r2, [pc, #412]	; (8008300 <HAL_DMA_IRQHandler+0xa3c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d009      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a65      	ldr	r2, [pc, #404]	; (8008304 <HAL_DMA_IRQHandler+0xa40>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d004      	beq.n	800817c <HAL_DMA_IRQHandler+0x8b8>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a64      	ldr	r2, [pc, #400]	; (8008308 <HAL_DMA_IRQHandler+0xa44>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d108      	bne.n	800818e <HAL_DMA_IRQHandler+0x8ca>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0201 	bic.w	r2, r2, #1
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	e007      	b.n	800819e <HAL_DMA_IRQHandler+0x8da>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0201 	bic.w	r2, r2, #1
 800819c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3301      	adds	r3, #1
 80081a2:	60fb      	str	r3, [r7, #12]
 80081a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d307      	bcc.n	80081ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1f2      	bne.n	800819e <HAL_DMA_IRQHandler+0x8da>
 80081b8:	e000      	b.n	80081bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80081ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2203      	movs	r2, #3
 80081ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80081d2:	e003      	b.n	80081dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 8272 	beq.w	80086d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
 80081f6:	e26c      	b.n	80086d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a43      	ldr	r2, [pc, #268]	; (800830c <HAL_DMA_IRQHandler+0xa48>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d022      	beq.n	8008248 <HAL_DMA_IRQHandler+0x984>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a42      	ldr	r2, [pc, #264]	; (8008310 <HAL_DMA_IRQHandler+0xa4c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d01d      	beq.n	8008248 <HAL_DMA_IRQHandler+0x984>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a40      	ldr	r2, [pc, #256]	; (8008314 <HAL_DMA_IRQHandler+0xa50>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d018      	beq.n	8008248 <HAL_DMA_IRQHandler+0x984>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a3f      	ldr	r2, [pc, #252]	; (8008318 <HAL_DMA_IRQHandler+0xa54>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d013      	beq.n	8008248 <HAL_DMA_IRQHandler+0x984>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a3d      	ldr	r2, [pc, #244]	; (800831c <HAL_DMA_IRQHandler+0xa58>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d00e      	beq.n	8008248 <HAL_DMA_IRQHandler+0x984>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a3c      	ldr	r2, [pc, #240]	; (8008320 <HAL_DMA_IRQHandler+0xa5c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d009      	beq.n	8008248 <HAL_DMA_IRQHandler+0x984>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a3a      	ldr	r2, [pc, #232]	; (8008324 <HAL_DMA_IRQHandler+0xa60>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d004      	beq.n	8008248 <HAL_DMA_IRQHandler+0x984>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a39      	ldr	r2, [pc, #228]	; (8008328 <HAL_DMA_IRQHandler+0xa64>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d101      	bne.n	800824c <HAL_DMA_IRQHandler+0x988>
 8008248:	2301      	movs	r3, #1
 800824a:	e000      	b.n	800824e <HAL_DMA_IRQHandler+0x98a>
 800824c:	2300      	movs	r3, #0
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 823f 	beq.w	80086d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008260:	f003 031f 	and.w	r3, r3, #31
 8008264:	2204      	movs	r2, #4
 8008266:	409a      	lsls	r2, r3
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	4013      	ands	r3, r2
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 80cd 	beq.w	800840c <HAL_DMA_IRQHandler+0xb48>
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 80c7 	beq.w	800840c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008282:	f003 031f 	and.w	r3, r3, #31
 8008286:	2204      	movs	r2, #4
 8008288:	409a      	lsls	r2, r3
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d049      	beq.n	800832c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 8210 	beq.w	80086cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082b4:	e20a      	b.n	80086cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 8206 	beq.w	80086cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082c8:	e200      	b.n	80086cc <HAL_DMA_IRQHandler+0xe08>
 80082ca:	bf00      	nop
 80082cc:	40020010 	.word	0x40020010
 80082d0:	40020028 	.word	0x40020028
 80082d4:	40020040 	.word	0x40020040
 80082d8:	40020058 	.word	0x40020058
 80082dc:	40020070 	.word	0x40020070
 80082e0:	40020088 	.word	0x40020088
 80082e4:	400200a0 	.word	0x400200a0
 80082e8:	400200b8 	.word	0x400200b8
 80082ec:	40020410 	.word	0x40020410
 80082f0:	40020428 	.word	0x40020428
 80082f4:	40020440 	.word	0x40020440
 80082f8:	40020458 	.word	0x40020458
 80082fc:	40020470 	.word	0x40020470
 8008300:	40020488 	.word	0x40020488
 8008304:	400204a0 	.word	0x400204a0
 8008308:	400204b8 	.word	0x400204b8
 800830c:	58025408 	.word	0x58025408
 8008310:	5802541c 	.word	0x5802541c
 8008314:	58025430 	.word	0x58025430
 8008318:	58025444 	.word	0x58025444
 800831c:	58025458 	.word	0x58025458
 8008320:	5802546c 	.word	0x5802546c
 8008324:	58025480 	.word	0x58025480
 8008328:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f003 0320 	and.w	r3, r3, #32
 8008332:	2b00      	cmp	r3, #0
 8008334:	d160      	bne.n	80083f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a8c      	ldr	r2, [pc, #560]	; (800856c <HAL_DMA_IRQHandler+0xca8>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d04a      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a8a      	ldr	r2, [pc, #552]	; (8008570 <HAL_DMA_IRQHandler+0xcac>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d045      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a89      	ldr	r2, [pc, #548]	; (8008574 <HAL_DMA_IRQHandler+0xcb0>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d040      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a87      	ldr	r2, [pc, #540]	; (8008578 <HAL_DMA_IRQHandler+0xcb4>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d03b      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a86      	ldr	r2, [pc, #536]	; (800857c <HAL_DMA_IRQHandler+0xcb8>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d036      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a84      	ldr	r2, [pc, #528]	; (8008580 <HAL_DMA_IRQHandler+0xcbc>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d031      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a83      	ldr	r2, [pc, #524]	; (8008584 <HAL_DMA_IRQHandler+0xcc0>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d02c      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a81      	ldr	r2, [pc, #516]	; (8008588 <HAL_DMA_IRQHandler+0xcc4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d027      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a80      	ldr	r2, [pc, #512]	; (800858c <HAL_DMA_IRQHandler+0xcc8>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d022      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a7e      	ldr	r2, [pc, #504]	; (8008590 <HAL_DMA_IRQHandler+0xccc>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d01d      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a7d      	ldr	r2, [pc, #500]	; (8008594 <HAL_DMA_IRQHandler+0xcd0>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d018      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a7b      	ldr	r2, [pc, #492]	; (8008598 <HAL_DMA_IRQHandler+0xcd4>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d013      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a7a      	ldr	r2, [pc, #488]	; (800859c <HAL_DMA_IRQHandler+0xcd8>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d00e      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a78      	ldr	r2, [pc, #480]	; (80085a0 <HAL_DMA_IRQHandler+0xcdc>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d009      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a77      	ldr	r2, [pc, #476]	; (80085a4 <HAL_DMA_IRQHandler+0xce0>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d004      	beq.n	80083d6 <HAL_DMA_IRQHandler+0xb12>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a75      	ldr	r2, [pc, #468]	; (80085a8 <HAL_DMA_IRQHandler+0xce4>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d108      	bne.n	80083e8 <HAL_DMA_IRQHandler+0xb24>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0208 	bic.w	r2, r2, #8
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	e007      	b.n	80083f8 <HAL_DMA_IRQHandler+0xb34>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 0204 	bic.w	r2, r2, #4
 80083f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 8165 	beq.w	80086cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800840a:	e15f      	b.n	80086cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008410:	f003 031f 	and.w	r3, r3, #31
 8008414:	2202      	movs	r2, #2
 8008416:	409a      	lsls	r2, r3
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	4013      	ands	r3, r2
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 80c5 	beq.w	80085ac <HAL_DMA_IRQHandler+0xce8>
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 80bf 	beq.w	80085ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008432:	f003 031f 	and.w	r3, r3, #31
 8008436:	2202      	movs	r2, #2
 8008438:	409a      	lsls	r2, r3
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d018      	beq.n	800847a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d109      	bne.n	8008466 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 813a 	beq.w	80086d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008464:	e134      	b.n	80086d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 8130 	beq.w	80086d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008478:	e12a      	b.n	80086d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	f003 0320 	and.w	r3, r3, #32
 8008480:	2b00      	cmp	r3, #0
 8008482:	d168      	bne.n	8008556 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a38      	ldr	r2, [pc, #224]	; (800856c <HAL_DMA_IRQHandler+0xca8>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d04a      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a37      	ldr	r2, [pc, #220]	; (8008570 <HAL_DMA_IRQHandler+0xcac>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d045      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a35      	ldr	r2, [pc, #212]	; (8008574 <HAL_DMA_IRQHandler+0xcb0>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d040      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a34      	ldr	r2, [pc, #208]	; (8008578 <HAL_DMA_IRQHandler+0xcb4>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d03b      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a32      	ldr	r2, [pc, #200]	; (800857c <HAL_DMA_IRQHandler+0xcb8>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d036      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a31      	ldr	r2, [pc, #196]	; (8008580 <HAL_DMA_IRQHandler+0xcbc>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d031      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a2f      	ldr	r2, [pc, #188]	; (8008584 <HAL_DMA_IRQHandler+0xcc0>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d02c      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a2e      	ldr	r2, [pc, #184]	; (8008588 <HAL_DMA_IRQHandler+0xcc4>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d027      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a2c      	ldr	r2, [pc, #176]	; (800858c <HAL_DMA_IRQHandler+0xcc8>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d022      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a2b      	ldr	r2, [pc, #172]	; (8008590 <HAL_DMA_IRQHandler+0xccc>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d01d      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a29      	ldr	r2, [pc, #164]	; (8008594 <HAL_DMA_IRQHandler+0xcd0>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d018      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a28      	ldr	r2, [pc, #160]	; (8008598 <HAL_DMA_IRQHandler+0xcd4>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d013      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a26      	ldr	r2, [pc, #152]	; (800859c <HAL_DMA_IRQHandler+0xcd8>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d00e      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a25      	ldr	r2, [pc, #148]	; (80085a0 <HAL_DMA_IRQHandler+0xcdc>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d009      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a23      	ldr	r2, [pc, #140]	; (80085a4 <HAL_DMA_IRQHandler+0xce0>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d004      	beq.n	8008524 <HAL_DMA_IRQHandler+0xc60>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a22      	ldr	r2, [pc, #136]	; (80085a8 <HAL_DMA_IRQHandler+0xce4>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d108      	bne.n	8008536 <HAL_DMA_IRQHandler+0xc72>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0214 	bic.w	r2, r2, #20
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	e007      	b.n	8008546 <HAL_DMA_IRQHandler+0xc82>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f022 020a 	bic.w	r2, r2, #10
 8008544:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 80b8 	beq.w	80086d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008568:	e0b2      	b.n	80086d0 <HAL_DMA_IRQHandler+0xe0c>
 800856a:	bf00      	nop
 800856c:	40020010 	.word	0x40020010
 8008570:	40020028 	.word	0x40020028
 8008574:	40020040 	.word	0x40020040
 8008578:	40020058 	.word	0x40020058
 800857c:	40020070 	.word	0x40020070
 8008580:	40020088 	.word	0x40020088
 8008584:	400200a0 	.word	0x400200a0
 8008588:	400200b8 	.word	0x400200b8
 800858c:	40020410 	.word	0x40020410
 8008590:	40020428 	.word	0x40020428
 8008594:	40020440 	.word	0x40020440
 8008598:	40020458 	.word	0x40020458
 800859c:	40020470 	.word	0x40020470
 80085a0:	40020488 	.word	0x40020488
 80085a4:	400204a0 	.word	0x400204a0
 80085a8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b0:	f003 031f 	and.w	r3, r3, #31
 80085b4:	2208      	movs	r2, #8
 80085b6:	409a      	lsls	r2, r3
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	4013      	ands	r3, r2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 8088 	beq.w	80086d2 <HAL_DMA_IRQHandler+0xe0e>
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8082 	beq.w	80086d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a41      	ldr	r2, [pc, #260]	; (80086d8 <HAL_DMA_IRQHandler+0xe14>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d04a      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a3f      	ldr	r2, [pc, #252]	; (80086dc <HAL_DMA_IRQHandler+0xe18>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d045      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a3e      	ldr	r2, [pc, #248]	; (80086e0 <HAL_DMA_IRQHandler+0xe1c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d040      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a3c      	ldr	r2, [pc, #240]	; (80086e4 <HAL_DMA_IRQHandler+0xe20>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d03b      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a3b      	ldr	r2, [pc, #236]	; (80086e8 <HAL_DMA_IRQHandler+0xe24>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d036      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a39      	ldr	r2, [pc, #228]	; (80086ec <HAL_DMA_IRQHandler+0xe28>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d031      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a38      	ldr	r2, [pc, #224]	; (80086f0 <HAL_DMA_IRQHandler+0xe2c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d02c      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a36      	ldr	r2, [pc, #216]	; (80086f4 <HAL_DMA_IRQHandler+0xe30>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d027      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a35      	ldr	r2, [pc, #212]	; (80086f8 <HAL_DMA_IRQHandler+0xe34>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d022      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a33      	ldr	r2, [pc, #204]	; (80086fc <HAL_DMA_IRQHandler+0xe38>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d01d      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a32      	ldr	r2, [pc, #200]	; (8008700 <HAL_DMA_IRQHandler+0xe3c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d018      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a30      	ldr	r2, [pc, #192]	; (8008704 <HAL_DMA_IRQHandler+0xe40>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d013      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a2f      	ldr	r2, [pc, #188]	; (8008708 <HAL_DMA_IRQHandler+0xe44>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00e      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a2d      	ldr	r2, [pc, #180]	; (800870c <HAL_DMA_IRQHandler+0xe48>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d009      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a2c      	ldr	r2, [pc, #176]	; (8008710 <HAL_DMA_IRQHandler+0xe4c>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d004      	beq.n	800866e <HAL_DMA_IRQHandler+0xdaa>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a2a      	ldr	r2, [pc, #168]	; (8008714 <HAL_DMA_IRQHandler+0xe50>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d108      	bne.n	8008680 <HAL_DMA_IRQHandler+0xdbc>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 021c 	bic.w	r2, r2, #28
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	e007      	b.n	8008690 <HAL_DMA_IRQHandler+0xdcc>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 020e 	bic.w	r2, r2, #14
 800868e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008694:	f003 031f 	and.w	r3, r3, #31
 8008698:	2201      	movs	r2, #1
 800869a:	409a      	lsls	r2, r3
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d009      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	4798      	blx	r3
 80086c6:	e004      	b.n	80086d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80086c8:	bf00      	nop
 80086ca:	e002      	b.n	80086d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086cc:	bf00      	nop
 80086ce:	e000      	b.n	80086d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80086d2:	3728      	adds	r7, #40	; 0x28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	40020010 	.word	0x40020010
 80086dc:	40020028 	.word	0x40020028
 80086e0:	40020040 	.word	0x40020040
 80086e4:	40020058 	.word	0x40020058
 80086e8:	40020070 	.word	0x40020070
 80086ec:	40020088 	.word	0x40020088
 80086f0:	400200a0 	.word	0x400200a0
 80086f4:	400200b8 	.word	0x400200b8
 80086f8:	40020410 	.word	0x40020410
 80086fc:	40020428 	.word	0x40020428
 8008700:	40020440 	.word	0x40020440
 8008704:	40020458 	.word	0x40020458
 8008708:	40020470 	.word	0x40020470
 800870c:	40020488 	.word	0x40020488
 8008710:	400204a0 	.word	0x400204a0
 8008714:	400204b8 	.word	0x400204b8

08008718 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800872a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008730:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a84      	ldr	r2, [pc, #528]	; (8008948 <DMA_SetConfig+0x230>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d072      	beq.n	8008822 <DMA_SetConfig+0x10a>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a82      	ldr	r2, [pc, #520]	; (800894c <DMA_SetConfig+0x234>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d06d      	beq.n	8008822 <DMA_SetConfig+0x10a>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a81      	ldr	r2, [pc, #516]	; (8008950 <DMA_SetConfig+0x238>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d068      	beq.n	8008822 <DMA_SetConfig+0x10a>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a7f      	ldr	r2, [pc, #508]	; (8008954 <DMA_SetConfig+0x23c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d063      	beq.n	8008822 <DMA_SetConfig+0x10a>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a7e      	ldr	r2, [pc, #504]	; (8008958 <DMA_SetConfig+0x240>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d05e      	beq.n	8008822 <DMA_SetConfig+0x10a>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a7c      	ldr	r2, [pc, #496]	; (800895c <DMA_SetConfig+0x244>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d059      	beq.n	8008822 <DMA_SetConfig+0x10a>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a7b      	ldr	r2, [pc, #492]	; (8008960 <DMA_SetConfig+0x248>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d054      	beq.n	8008822 <DMA_SetConfig+0x10a>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a79      	ldr	r2, [pc, #484]	; (8008964 <DMA_SetConfig+0x24c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d04f      	beq.n	8008822 <DMA_SetConfig+0x10a>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a78      	ldr	r2, [pc, #480]	; (8008968 <DMA_SetConfig+0x250>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d04a      	beq.n	8008822 <DMA_SetConfig+0x10a>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a76      	ldr	r2, [pc, #472]	; (800896c <DMA_SetConfig+0x254>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d045      	beq.n	8008822 <DMA_SetConfig+0x10a>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a75      	ldr	r2, [pc, #468]	; (8008970 <DMA_SetConfig+0x258>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d040      	beq.n	8008822 <DMA_SetConfig+0x10a>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a73      	ldr	r2, [pc, #460]	; (8008974 <DMA_SetConfig+0x25c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d03b      	beq.n	8008822 <DMA_SetConfig+0x10a>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a72      	ldr	r2, [pc, #456]	; (8008978 <DMA_SetConfig+0x260>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d036      	beq.n	8008822 <DMA_SetConfig+0x10a>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a70      	ldr	r2, [pc, #448]	; (800897c <DMA_SetConfig+0x264>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d031      	beq.n	8008822 <DMA_SetConfig+0x10a>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a6f      	ldr	r2, [pc, #444]	; (8008980 <DMA_SetConfig+0x268>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d02c      	beq.n	8008822 <DMA_SetConfig+0x10a>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a6d      	ldr	r2, [pc, #436]	; (8008984 <DMA_SetConfig+0x26c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d027      	beq.n	8008822 <DMA_SetConfig+0x10a>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a6c      	ldr	r2, [pc, #432]	; (8008988 <DMA_SetConfig+0x270>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d022      	beq.n	8008822 <DMA_SetConfig+0x10a>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a6a      	ldr	r2, [pc, #424]	; (800898c <DMA_SetConfig+0x274>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d01d      	beq.n	8008822 <DMA_SetConfig+0x10a>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a69      	ldr	r2, [pc, #420]	; (8008990 <DMA_SetConfig+0x278>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d018      	beq.n	8008822 <DMA_SetConfig+0x10a>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a67      	ldr	r2, [pc, #412]	; (8008994 <DMA_SetConfig+0x27c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d013      	beq.n	8008822 <DMA_SetConfig+0x10a>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a66      	ldr	r2, [pc, #408]	; (8008998 <DMA_SetConfig+0x280>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d00e      	beq.n	8008822 <DMA_SetConfig+0x10a>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a64      	ldr	r2, [pc, #400]	; (800899c <DMA_SetConfig+0x284>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d009      	beq.n	8008822 <DMA_SetConfig+0x10a>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a63      	ldr	r2, [pc, #396]	; (80089a0 <DMA_SetConfig+0x288>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d004      	beq.n	8008822 <DMA_SetConfig+0x10a>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a61      	ldr	r2, [pc, #388]	; (80089a4 <DMA_SetConfig+0x28c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d101      	bne.n	8008826 <DMA_SetConfig+0x10e>
 8008822:	2301      	movs	r3, #1
 8008824:	e000      	b.n	8008828 <DMA_SetConfig+0x110>
 8008826:	2300      	movs	r3, #0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00d      	beq.n	8008848 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008834:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800883a:	2b00      	cmp	r3, #0
 800883c:	d004      	beq.n	8008848 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008846:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a3e      	ldr	r2, [pc, #248]	; (8008948 <DMA_SetConfig+0x230>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d04a      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a3d      	ldr	r2, [pc, #244]	; (800894c <DMA_SetConfig+0x234>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d045      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a3b      	ldr	r2, [pc, #236]	; (8008950 <DMA_SetConfig+0x238>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d040      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a3a      	ldr	r2, [pc, #232]	; (8008954 <DMA_SetConfig+0x23c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d03b      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a38      	ldr	r2, [pc, #224]	; (8008958 <DMA_SetConfig+0x240>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d036      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a37      	ldr	r2, [pc, #220]	; (800895c <DMA_SetConfig+0x244>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d031      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a35      	ldr	r2, [pc, #212]	; (8008960 <DMA_SetConfig+0x248>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d02c      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a34      	ldr	r2, [pc, #208]	; (8008964 <DMA_SetConfig+0x24c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d027      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a32      	ldr	r2, [pc, #200]	; (8008968 <DMA_SetConfig+0x250>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d022      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a31      	ldr	r2, [pc, #196]	; (800896c <DMA_SetConfig+0x254>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d01d      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a2f      	ldr	r2, [pc, #188]	; (8008970 <DMA_SetConfig+0x258>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d018      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a2e      	ldr	r2, [pc, #184]	; (8008974 <DMA_SetConfig+0x25c>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d013      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a2c      	ldr	r2, [pc, #176]	; (8008978 <DMA_SetConfig+0x260>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d00e      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a2b      	ldr	r2, [pc, #172]	; (800897c <DMA_SetConfig+0x264>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d009      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a29      	ldr	r2, [pc, #164]	; (8008980 <DMA_SetConfig+0x268>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d004      	beq.n	80088e8 <DMA_SetConfig+0x1d0>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a28      	ldr	r2, [pc, #160]	; (8008984 <DMA_SetConfig+0x26c>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d101      	bne.n	80088ec <DMA_SetConfig+0x1d4>
 80088e8:	2301      	movs	r3, #1
 80088ea:	e000      	b.n	80088ee <DMA_SetConfig+0x1d6>
 80088ec:	2300      	movs	r3, #0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d05a      	beq.n	80089a8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f6:	f003 031f 	and.w	r3, r3, #31
 80088fa:	223f      	movs	r2, #63	; 0x3f
 80088fc:	409a      	lsls	r2, r3
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008910:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	2b40      	cmp	r3, #64	; 0x40
 8008920:	d108      	bne.n	8008934 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008932:	e087      	b.n	8008a44 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	60da      	str	r2, [r3, #12]
}
 8008944:	e07e      	b.n	8008a44 <DMA_SetConfig+0x32c>
 8008946:	bf00      	nop
 8008948:	40020010 	.word	0x40020010
 800894c:	40020028 	.word	0x40020028
 8008950:	40020040 	.word	0x40020040
 8008954:	40020058 	.word	0x40020058
 8008958:	40020070 	.word	0x40020070
 800895c:	40020088 	.word	0x40020088
 8008960:	400200a0 	.word	0x400200a0
 8008964:	400200b8 	.word	0x400200b8
 8008968:	40020410 	.word	0x40020410
 800896c:	40020428 	.word	0x40020428
 8008970:	40020440 	.word	0x40020440
 8008974:	40020458 	.word	0x40020458
 8008978:	40020470 	.word	0x40020470
 800897c:	40020488 	.word	0x40020488
 8008980:	400204a0 	.word	0x400204a0
 8008984:	400204b8 	.word	0x400204b8
 8008988:	58025408 	.word	0x58025408
 800898c:	5802541c 	.word	0x5802541c
 8008990:	58025430 	.word	0x58025430
 8008994:	58025444 	.word	0x58025444
 8008998:	58025458 	.word	0x58025458
 800899c:	5802546c 	.word	0x5802546c
 80089a0:	58025480 	.word	0x58025480
 80089a4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a28      	ldr	r2, [pc, #160]	; (8008a50 <DMA_SetConfig+0x338>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d022      	beq.n	80089f8 <DMA_SetConfig+0x2e0>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a27      	ldr	r2, [pc, #156]	; (8008a54 <DMA_SetConfig+0x33c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d01d      	beq.n	80089f8 <DMA_SetConfig+0x2e0>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a25      	ldr	r2, [pc, #148]	; (8008a58 <DMA_SetConfig+0x340>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d018      	beq.n	80089f8 <DMA_SetConfig+0x2e0>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a24      	ldr	r2, [pc, #144]	; (8008a5c <DMA_SetConfig+0x344>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d013      	beq.n	80089f8 <DMA_SetConfig+0x2e0>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a22      	ldr	r2, [pc, #136]	; (8008a60 <DMA_SetConfig+0x348>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d00e      	beq.n	80089f8 <DMA_SetConfig+0x2e0>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a21      	ldr	r2, [pc, #132]	; (8008a64 <DMA_SetConfig+0x34c>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d009      	beq.n	80089f8 <DMA_SetConfig+0x2e0>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a1f      	ldr	r2, [pc, #124]	; (8008a68 <DMA_SetConfig+0x350>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d004      	beq.n	80089f8 <DMA_SetConfig+0x2e0>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a1e      	ldr	r2, [pc, #120]	; (8008a6c <DMA_SetConfig+0x354>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d101      	bne.n	80089fc <DMA_SetConfig+0x2e4>
 80089f8:	2301      	movs	r3, #1
 80089fa:	e000      	b.n	80089fe <DMA_SetConfig+0x2e6>
 80089fc:	2300      	movs	r3, #0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d020      	beq.n	8008a44 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a06:	f003 031f 	and.w	r3, r3, #31
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	409a      	lsls	r2, r3
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	2b40      	cmp	r3, #64	; 0x40
 8008a20:	d108      	bne.n	8008a34 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	60da      	str	r2, [r3, #12]
}
 8008a32:	e007      	b.n	8008a44 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	60da      	str	r2, [r3, #12]
}
 8008a44:	bf00      	nop
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	58025408 	.word	0x58025408
 8008a54:	5802541c 	.word	0x5802541c
 8008a58:	58025430 	.word	0x58025430
 8008a5c:	58025444 	.word	0x58025444
 8008a60:	58025458 	.word	0x58025458
 8008a64:	5802546c 	.word	0x5802546c
 8008a68:	58025480 	.word	0x58025480
 8008a6c:	58025494 	.word	0x58025494

08008a70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a42      	ldr	r2, [pc, #264]	; (8008b88 <DMA_CalcBaseAndBitshift+0x118>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d04a      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a41      	ldr	r2, [pc, #260]	; (8008b8c <DMA_CalcBaseAndBitshift+0x11c>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d045      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a3f      	ldr	r2, [pc, #252]	; (8008b90 <DMA_CalcBaseAndBitshift+0x120>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d040      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a3e      	ldr	r2, [pc, #248]	; (8008b94 <DMA_CalcBaseAndBitshift+0x124>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d03b      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a3c      	ldr	r2, [pc, #240]	; (8008b98 <DMA_CalcBaseAndBitshift+0x128>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d036      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a3b      	ldr	r2, [pc, #236]	; (8008b9c <DMA_CalcBaseAndBitshift+0x12c>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d031      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a39      	ldr	r2, [pc, #228]	; (8008ba0 <DMA_CalcBaseAndBitshift+0x130>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d02c      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a38      	ldr	r2, [pc, #224]	; (8008ba4 <DMA_CalcBaseAndBitshift+0x134>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d027      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a36      	ldr	r2, [pc, #216]	; (8008ba8 <DMA_CalcBaseAndBitshift+0x138>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d022      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a35      	ldr	r2, [pc, #212]	; (8008bac <DMA_CalcBaseAndBitshift+0x13c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d01d      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a33      	ldr	r2, [pc, #204]	; (8008bb0 <DMA_CalcBaseAndBitshift+0x140>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d018      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a32      	ldr	r2, [pc, #200]	; (8008bb4 <DMA_CalcBaseAndBitshift+0x144>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d013      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a30      	ldr	r2, [pc, #192]	; (8008bb8 <DMA_CalcBaseAndBitshift+0x148>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d00e      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a2f      	ldr	r2, [pc, #188]	; (8008bbc <DMA_CalcBaseAndBitshift+0x14c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d009      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a2d      	ldr	r2, [pc, #180]	; (8008bc0 <DMA_CalcBaseAndBitshift+0x150>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d004      	beq.n	8008b18 <DMA_CalcBaseAndBitshift+0xa8>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a2c      	ldr	r2, [pc, #176]	; (8008bc4 <DMA_CalcBaseAndBitshift+0x154>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d101      	bne.n	8008b1c <DMA_CalcBaseAndBitshift+0xac>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e000      	b.n	8008b1e <DMA_CalcBaseAndBitshift+0xae>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d024      	beq.n	8008b6c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	3b10      	subs	r3, #16
 8008b2a:	4a27      	ldr	r2, [pc, #156]	; (8008bc8 <DMA_CalcBaseAndBitshift+0x158>)
 8008b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b30:	091b      	lsrs	r3, r3, #4
 8008b32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f003 0307 	and.w	r3, r3, #7
 8008b3a:	4a24      	ldr	r2, [pc, #144]	; (8008bcc <DMA_CalcBaseAndBitshift+0x15c>)
 8008b3c:	5cd3      	ldrb	r3, [r2, r3]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d908      	bls.n	8008b5c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4b1f      	ldr	r3, [pc, #124]	; (8008bd0 <DMA_CalcBaseAndBitshift+0x160>)
 8008b52:	4013      	ands	r3, r2
 8008b54:	1d1a      	adds	r2, r3, #4
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	659a      	str	r2, [r3, #88]	; 0x58
 8008b5a:	e00d      	b.n	8008b78 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	461a      	mov	r2, r3
 8008b62:	4b1b      	ldr	r3, [pc, #108]	; (8008bd0 <DMA_CalcBaseAndBitshift+0x160>)
 8008b64:	4013      	ands	r3, r2
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	6593      	str	r3, [r2, #88]	; 0x58
 8008b6a:	e005      	b.n	8008b78 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	40020010 	.word	0x40020010
 8008b8c:	40020028 	.word	0x40020028
 8008b90:	40020040 	.word	0x40020040
 8008b94:	40020058 	.word	0x40020058
 8008b98:	40020070 	.word	0x40020070
 8008b9c:	40020088 	.word	0x40020088
 8008ba0:	400200a0 	.word	0x400200a0
 8008ba4:	400200b8 	.word	0x400200b8
 8008ba8:	40020410 	.word	0x40020410
 8008bac:	40020428 	.word	0x40020428
 8008bb0:	40020440 	.word	0x40020440
 8008bb4:	40020458 	.word	0x40020458
 8008bb8:	40020470 	.word	0x40020470
 8008bbc:	40020488 	.word	0x40020488
 8008bc0:	400204a0 	.word	0x400204a0
 8008bc4:	400204b8 	.word	0x400204b8
 8008bc8:	aaaaaaab 	.word	0xaaaaaaab
 8008bcc:	08012898 	.word	0x08012898
 8008bd0:	fffffc00 	.word	0xfffffc00

08008bd4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d120      	bne.n	8008c2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d858      	bhi.n	8008ca2 <DMA_CheckFifoParam+0xce>
 8008bf0:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <DMA_CheckFifoParam+0x24>)
 8008bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf6:	bf00      	nop
 8008bf8:	08008c09 	.word	0x08008c09
 8008bfc:	08008c1b 	.word	0x08008c1b
 8008c00:	08008c09 	.word	0x08008c09
 8008c04:	08008ca3 	.word	0x08008ca3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d048      	beq.n	8008ca6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c18:	e045      	b.n	8008ca6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c22:	d142      	bne.n	8008caa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c28:	e03f      	b.n	8008caa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c32:	d123      	bne.n	8008c7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	d838      	bhi.n	8008cae <DMA_CheckFifoParam+0xda>
 8008c3c:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <DMA_CheckFifoParam+0x70>)
 8008c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c42:	bf00      	nop
 8008c44:	08008c55 	.word	0x08008c55
 8008c48:	08008c5b 	.word	0x08008c5b
 8008c4c:	08008c55 	.word	0x08008c55
 8008c50:	08008c6d 	.word	0x08008c6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	73fb      	strb	r3, [r7, #15]
        break;
 8008c58:	e030      	b.n	8008cbc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d025      	beq.n	8008cb2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c6a:	e022      	b.n	8008cb2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c74:	d11f      	bne.n	8008cb6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c7a:	e01c      	b.n	8008cb6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d902      	bls.n	8008c8a <DMA_CheckFifoParam+0xb6>
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d003      	beq.n	8008c90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008c88:	e018      	b.n	8008cbc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	73fb      	strb	r3, [r7, #15]
        break;
 8008c8e:	e015      	b.n	8008cbc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00e      	beq.n	8008cba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca0:	e00b      	b.n	8008cba <DMA_CheckFifoParam+0xe6>
        break;
 8008ca2:	bf00      	nop
 8008ca4:	e00a      	b.n	8008cbc <DMA_CheckFifoParam+0xe8>
        break;
 8008ca6:	bf00      	nop
 8008ca8:	e008      	b.n	8008cbc <DMA_CheckFifoParam+0xe8>
        break;
 8008caa:	bf00      	nop
 8008cac:	e006      	b.n	8008cbc <DMA_CheckFifoParam+0xe8>
        break;
 8008cae:	bf00      	nop
 8008cb0:	e004      	b.n	8008cbc <DMA_CheckFifoParam+0xe8>
        break;
 8008cb2:	bf00      	nop
 8008cb4:	e002      	b.n	8008cbc <DMA_CheckFifoParam+0xe8>
        break;
 8008cb6:	bf00      	nop
 8008cb8:	e000      	b.n	8008cbc <DMA_CheckFifoParam+0xe8>
    break;
 8008cba:	bf00      	nop
    }
  }

  return status;
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop

08008ccc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a38      	ldr	r2, [pc, #224]	; (8008dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d022      	beq.n	8008d2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a36      	ldr	r2, [pc, #216]	; (8008dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d01d      	beq.n	8008d2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a35      	ldr	r2, [pc, #212]	; (8008dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d018      	beq.n	8008d2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a33      	ldr	r2, [pc, #204]	; (8008dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d013      	beq.n	8008d2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a32      	ldr	r2, [pc, #200]	; (8008dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00e      	beq.n	8008d2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a30      	ldr	r2, [pc, #192]	; (8008dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d009      	beq.n	8008d2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a2f      	ldr	r2, [pc, #188]	; (8008dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d004      	beq.n	8008d2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a2d      	ldr	r2, [pc, #180]	; (8008ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d101      	bne.n	8008d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d01a      	beq.n	8008d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	3b08      	subs	r3, #8
 8008d3c:	4a28      	ldr	r2, [pc, #160]	; (8008de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d42:	091b      	lsrs	r3, r3, #4
 8008d44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	4b26      	ldr	r3, [pc, #152]	; (8008de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008d4a:	4413      	add	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	461a      	mov	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a24      	ldr	r2, [pc, #144]	; (8008de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008d58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f003 031f 	and.w	r3, r3, #31
 8008d60:	2201      	movs	r2, #1
 8008d62:	409a      	lsls	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008d68:	e024      	b.n	8008db4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	3b10      	subs	r3, #16
 8008d72:	4a1e      	ldr	r2, [pc, #120]	; (8008dec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008d74:	fba2 2303 	umull	r2, r3, r2, r3
 8008d78:	091b      	lsrs	r3, r3, #4
 8008d7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	4a1c      	ldr	r2, [pc, #112]	; (8008df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d806      	bhi.n	8008d92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	4a1b      	ldr	r2, [pc, #108]	; (8008df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d902      	bls.n	8008d92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3308      	adds	r3, #8
 8008d90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	4b18      	ldr	r3, [pc, #96]	; (8008df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a16      	ldr	r2, [pc, #88]	; (8008dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008da4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f003 031f 	and.w	r3, r3, #31
 8008dac:	2201      	movs	r2, #1
 8008dae:	409a      	lsls	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008db4:	bf00      	nop
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	58025408 	.word	0x58025408
 8008dc4:	5802541c 	.word	0x5802541c
 8008dc8:	58025430 	.word	0x58025430
 8008dcc:	58025444 	.word	0x58025444
 8008dd0:	58025458 	.word	0x58025458
 8008dd4:	5802546c 	.word	0x5802546c
 8008dd8:	58025480 	.word	0x58025480
 8008ddc:	58025494 	.word	0x58025494
 8008de0:	cccccccd 	.word	0xcccccccd
 8008de4:	16009600 	.word	0x16009600
 8008de8:	58025880 	.word	0x58025880
 8008dec:	aaaaaaab 	.word	0xaaaaaaab
 8008df0:	400204b8 	.word	0x400204b8
 8008df4:	4002040f 	.word	0x4002040f
 8008df8:	10008200 	.word	0x10008200
 8008dfc:	40020880 	.word	0x40020880

08008e00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d04a      	beq.n	8008eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d847      	bhi.n	8008eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a25      	ldr	r2, [pc, #148]	; (8008eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d022      	beq.n	8008e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a24      	ldr	r2, [pc, #144]	; (8008ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d01d      	beq.n	8008e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a22      	ldr	r2, [pc, #136]	; (8008ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d018      	beq.n	8008e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a21      	ldr	r2, [pc, #132]	; (8008ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d013      	beq.n	8008e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a1f      	ldr	r2, [pc, #124]	; (8008ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d00e      	beq.n	8008e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a1e      	ldr	r2, [pc, #120]	; (8008ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d009      	beq.n	8008e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a1c      	ldr	r2, [pc, #112]	; (8008ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d004      	beq.n	8008e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a1b      	ldr	r2, [pc, #108]	; (8008ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d101      	bne.n	8008e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e000      	b.n	8008e72 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008e70:	2300      	movs	r3, #0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00a      	beq.n	8008e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	4b17      	ldr	r3, [pc, #92]	; (8008ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008e7a:	4413      	add	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	461a      	mov	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a15      	ldr	r2, [pc, #84]	; (8008edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008e88:	671a      	str	r2, [r3, #112]	; 0x70
 8008e8a:	e009      	b.n	8008ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	4b14      	ldr	r3, [pc, #80]	; (8008ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008e90:	4413      	add	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	461a      	mov	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a11      	ldr	r2, [pc, #68]	; (8008ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008e9e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	409a      	lsls	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008eac:	bf00      	nop
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	58025408 	.word	0x58025408
 8008ebc:	5802541c 	.word	0x5802541c
 8008ec0:	58025430 	.word	0x58025430
 8008ec4:	58025444 	.word	0x58025444
 8008ec8:	58025458 	.word	0x58025458
 8008ecc:	5802546c 	.word	0x5802546c
 8008ed0:	58025480 	.word	0x58025480
 8008ed4:	58025494 	.word	0x58025494
 8008ed8:	1600963f 	.word	0x1600963f
 8008edc:	58025940 	.word	0x58025940
 8008ee0:	1000823f 	.word	0x1000823f
 8008ee4:	40020940 	.word	0x40020940

08008ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b089      	sub	sp, #36	; 0x24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008ef6:	4b89      	ldr	r3, [pc, #548]	; (800911c <HAL_GPIO_Init+0x234>)
 8008ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008efa:	e194      	b.n	8009226 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	2101      	movs	r1, #1
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	fa01 f303 	lsl.w	r3, r1, r3
 8008f08:	4013      	ands	r3, r2
 8008f0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 8186 	beq.w	8009220 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f003 0303 	and.w	r3, r3, #3
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d005      	beq.n	8008f2c <HAL_GPIO_Init+0x44>
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f003 0303 	and.w	r3, r3, #3
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d130      	bne.n	8008f8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	2203      	movs	r2, #3
 8008f38:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3c:	43db      	mvns	r3, r3
 8008f3e:	69ba      	ldr	r2, [r7, #24]
 8008f40:	4013      	ands	r3, r2
 8008f42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f50:	69ba      	ldr	r2, [r7, #24]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f62:	2201      	movs	r2, #1
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6a:	43db      	mvns	r3, r3
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	091b      	lsrs	r3, r3, #4
 8008f78:	f003 0201 	and.w	r2, r3, #1
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f003 0303 	and.w	r3, r3, #3
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d017      	beq.n	8008fca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	005b      	lsls	r3, r3, #1
 8008fa4:	2203      	movs	r2, #3
 8008fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008faa:	43db      	mvns	r3, r3
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	4013      	ands	r3, r2
 8008fb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	689a      	ldr	r2, [r3, #8]
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d123      	bne.n	800901e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	08da      	lsrs	r2, r3, #3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	3208      	adds	r2, #8
 8008fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	220f      	movs	r2, #15
 8008fee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff2:	43db      	mvns	r3, r3
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	691a      	ldr	r2, [r3, #16]
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	f003 0307 	and.w	r3, r3, #7
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	fa02 f303 	lsl.w	r3, r2, r3
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	4313      	orrs	r3, r2
 800900e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	08da      	lsrs	r2, r3, #3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	3208      	adds	r2, #8
 8009018:	69b9      	ldr	r1, [r7, #24]
 800901a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	2203      	movs	r2, #3
 800902a:	fa02 f303 	lsl.w	r3, r2, r3
 800902e:	43db      	mvns	r3, r3
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	4013      	ands	r3, r2
 8009034:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f003 0203 	and.w	r2, r3, #3
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	005b      	lsls	r3, r3, #1
 8009042:	fa02 f303 	lsl.w	r3, r2, r3
 8009046:	69ba      	ldr	r2, [r7, #24]
 8009048:	4313      	orrs	r3, r2
 800904a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 80e0 	beq.w	8009220 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009060:	4b2f      	ldr	r3, [pc, #188]	; (8009120 <HAL_GPIO_Init+0x238>)
 8009062:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009066:	4a2e      	ldr	r2, [pc, #184]	; (8009120 <HAL_GPIO_Init+0x238>)
 8009068:	f043 0302 	orr.w	r3, r3, #2
 800906c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009070:	4b2b      	ldr	r3, [pc, #172]	; (8009120 <HAL_GPIO_Init+0x238>)
 8009072:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800907e:	4a29      	ldr	r2, [pc, #164]	; (8009124 <HAL_GPIO_Init+0x23c>)
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	089b      	lsrs	r3, r3, #2
 8009084:	3302      	adds	r3, #2
 8009086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800908a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f003 0303 	and.w	r3, r3, #3
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	220f      	movs	r2, #15
 8009096:	fa02 f303 	lsl.w	r3, r2, r3
 800909a:	43db      	mvns	r3, r3
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	4013      	ands	r3, r2
 80090a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a20      	ldr	r2, [pc, #128]	; (8009128 <HAL_GPIO_Init+0x240>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d052      	beq.n	8009150 <HAL_GPIO_Init+0x268>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a1f      	ldr	r2, [pc, #124]	; (800912c <HAL_GPIO_Init+0x244>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d031      	beq.n	8009116 <HAL_GPIO_Init+0x22e>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a1e      	ldr	r2, [pc, #120]	; (8009130 <HAL_GPIO_Init+0x248>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d02b      	beq.n	8009112 <HAL_GPIO_Init+0x22a>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a1d      	ldr	r2, [pc, #116]	; (8009134 <HAL_GPIO_Init+0x24c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d025      	beq.n	800910e <HAL_GPIO_Init+0x226>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a1c      	ldr	r2, [pc, #112]	; (8009138 <HAL_GPIO_Init+0x250>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d01f      	beq.n	800910a <HAL_GPIO_Init+0x222>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a1b      	ldr	r2, [pc, #108]	; (800913c <HAL_GPIO_Init+0x254>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d019      	beq.n	8009106 <HAL_GPIO_Init+0x21e>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a1a      	ldr	r2, [pc, #104]	; (8009140 <HAL_GPIO_Init+0x258>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d013      	beq.n	8009102 <HAL_GPIO_Init+0x21a>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a19      	ldr	r2, [pc, #100]	; (8009144 <HAL_GPIO_Init+0x25c>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d00d      	beq.n	80090fe <HAL_GPIO_Init+0x216>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a18      	ldr	r2, [pc, #96]	; (8009148 <HAL_GPIO_Init+0x260>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d007      	beq.n	80090fa <HAL_GPIO_Init+0x212>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a17      	ldr	r2, [pc, #92]	; (800914c <HAL_GPIO_Init+0x264>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d101      	bne.n	80090f6 <HAL_GPIO_Init+0x20e>
 80090f2:	2309      	movs	r3, #9
 80090f4:	e02d      	b.n	8009152 <HAL_GPIO_Init+0x26a>
 80090f6:	230a      	movs	r3, #10
 80090f8:	e02b      	b.n	8009152 <HAL_GPIO_Init+0x26a>
 80090fa:	2308      	movs	r3, #8
 80090fc:	e029      	b.n	8009152 <HAL_GPIO_Init+0x26a>
 80090fe:	2307      	movs	r3, #7
 8009100:	e027      	b.n	8009152 <HAL_GPIO_Init+0x26a>
 8009102:	2306      	movs	r3, #6
 8009104:	e025      	b.n	8009152 <HAL_GPIO_Init+0x26a>
 8009106:	2305      	movs	r3, #5
 8009108:	e023      	b.n	8009152 <HAL_GPIO_Init+0x26a>
 800910a:	2304      	movs	r3, #4
 800910c:	e021      	b.n	8009152 <HAL_GPIO_Init+0x26a>
 800910e:	2303      	movs	r3, #3
 8009110:	e01f      	b.n	8009152 <HAL_GPIO_Init+0x26a>
 8009112:	2302      	movs	r3, #2
 8009114:	e01d      	b.n	8009152 <HAL_GPIO_Init+0x26a>
 8009116:	2301      	movs	r3, #1
 8009118:	e01b      	b.n	8009152 <HAL_GPIO_Init+0x26a>
 800911a:	bf00      	nop
 800911c:	58000080 	.word	0x58000080
 8009120:	58024400 	.word	0x58024400
 8009124:	58000400 	.word	0x58000400
 8009128:	58020000 	.word	0x58020000
 800912c:	58020400 	.word	0x58020400
 8009130:	58020800 	.word	0x58020800
 8009134:	58020c00 	.word	0x58020c00
 8009138:	58021000 	.word	0x58021000
 800913c:	58021400 	.word	0x58021400
 8009140:	58021800 	.word	0x58021800
 8009144:	58021c00 	.word	0x58021c00
 8009148:	58022000 	.word	0x58022000
 800914c:	58022400 	.word	0x58022400
 8009150:	2300      	movs	r3, #0
 8009152:	69fa      	ldr	r2, [r7, #28]
 8009154:	f002 0203 	and.w	r2, r2, #3
 8009158:	0092      	lsls	r2, r2, #2
 800915a:	4093      	lsls	r3, r2
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	4313      	orrs	r3, r2
 8009160:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009162:	4938      	ldr	r1, [pc, #224]	; (8009244 <HAL_GPIO_Init+0x35c>)
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	089b      	lsrs	r3, r3, #2
 8009168:	3302      	adds	r3, #2
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	43db      	mvns	r3, r3
 800917c:	69ba      	ldr	r2, [r7, #24]
 800917e:	4013      	ands	r3, r2
 8009180:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	4313      	orrs	r3, r2
 8009194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800919e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	43db      	mvns	r3, r3
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	4013      	ands	r3, r2
 80091ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80091c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	43db      	mvns	r3, r3
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	4013      	ands	r3, r2
 80091da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d003      	beq.n	80091f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	43db      	mvns	r3, r3
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	4013      	ands	r3, r2
 8009204:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	4313      	orrs	r3, r2
 8009218:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	69ba      	ldr	r2, [r7, #24]
 800921e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	3301      	adds	r3, #1
 8009224:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	fa22 f303 	lsr.w	r3, r2, r3
 8009230:	2b00      	cmp	r3, #0
 8009232:	f47f ae63 	bne.w	8008efc <HAL_GPIO_Init+0x14>
  }
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	3724      	adds	r7, #36	; 0x24
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	58000400 	.word	0x58000400

08009248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	807b      	strh	r3, [r7, #2]
 8009254:	4613      	mov	r3, r2
 8009256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009258:	787b      	ldrb	r3, [r7, #1]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800925e:	887a      	ldrh	r2, [r7, #2]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009264:	e003      	b.n	800926e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009266:	887b      	ldrh	r3, [r7, #2]
 8009268:	041a      	lsls	r2, r3, #16
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	619a      	str	r2, [r3, #24]
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b082      	sub	sp, #8
 800927e:	af00      	add	r7, sp, #0
 8009280:	4603      	mov	r3, r0
 8009282:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009288:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800928c:	88fb      	ldrh	r3, [r7, #6]
 800928e:	4013      	ands	r3, r2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d008      	beq.n	80092a6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009298:	88fb      	ldrh	r3, [r7, #6]
 800929a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800929e:	88fb      	ldrh	r3, [r7, #6]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7fa fe21 	bl	8003ee8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80092a6:	bf00      	nop
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
	...

080092b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80092b8:	4b19      	ldr	r3, [pc, #100]	; (8009320 <HAL_PWREx_ConfigSupply+0x70>)
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b04      	cmp	r3, #4
 80092c2:	d00a      	beq.n	80092da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80092c4:	4b16      	ldr	r3, [pc, #88]	; (8009320 <HAL_PWREx_ConfigSupply+0x70>)
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f003 0307 	and.w	r3, r3, #7
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d001      	beq.n	80092d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e01f      	b.n	8009316 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	e01d      	b.n	8009316 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80092da:	4b11      	ldr	r3, [pc, #68]	; (8009320 <HAL_PWREx_ConfigSupply+0x70>)
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	f023 0207 	bic.w	r2, r3, #7
 80092e2:	490f      	ldr	r1, [pc, #60]	; (8009320 <HAL_PWREx_ConfigSupply+0x70>)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80092ea:	f7fc fc6d 	bl	8005bc8 <HAL_GetTick>
 80092ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80092f0:	e009      	b.n	8009306 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80092f2:	f7fc fc69 	bl	8005bc8 <HAL_GetTick>
 80092f6:	4602      	mov	r2, r0
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009300:	d901      	bls.n	8009306 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e007      	b.n	8009316 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009306:	4b06      	ldr	r3, [pc, #24]	; (8009320 <HAL_PWREx_ConfigSupply+0x70>)
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800930e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009312:	d1ee      	bne.n	80092f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	58024800 	.word	0x58024800

08009324 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b08c      	sub	sp, #48	; 0x30
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d102      	bne.n	8009338 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	f000 bc1c 	b.w	8009b70 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 8087 	beq.w	8009454 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009346:	4b9e      	ldr	r3, [pc, #632]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800934e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009350:	4b9b      	ldr	r3, [pc, #620]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009354:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	2b10      	cmp	r3, #16
 800935a:	d007      	beq.n	800936c <HAL_RCC_OscConfig+0x48>
 800935c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935e:	2b18      	cmp	r3, #24
 8009360:	d110      	bne.n	8009384 <HAL_RCC_OscConfig+0x60>
 8009362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009364:	f003 0303 	and.w	r3, r3, #3
 8009368:	2b02      	cmp	r3, #2
 800936a:	d10b      	bne.n	8009384 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800936c:	4b94      	ldr	r3, [pc, #592]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d06c      	beq.n	8009452 <HAL_RCC_OscConfig+0x12e>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d168      	bne.n	8009452 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e3f5      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800938c:	d106      	bne.n	800939c <HAL_RCC_OscConfig+0x78>
 800938e:	4b8c      	ldr	r3, [pc, #560]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a8b      	ldr	r2, [pc, #556]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009398:	6013      	str	r3, [r2, #0]
 800939a:	e02e      	b.n	80093fa <HAL_RCC_OscConfig+0xd6>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10c      	bne.n	80093be <HAL_RCC_OscConfig+0x9a>
 80093a4:	4b86      	ldr	r3, [pc, #536]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a85      	ldr	r2, [pc, #532]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80093aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ae:	6013      	str	r3, [r2, #0]
 80093b0:	4b83      	ldr	r3, [pc, #524]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a82      	ldr	r2, [pc, #520]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80093b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093ba:	6013      	str	r3, [r2, #0]
 80093bc:	e01d      	b.n	80093fa <HAL_RCC_OscConfig+0xd6>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093c6:	d10c      	bne.n	80093e2 <HAL_RCC_OscConfig+0xbe>
 80093c8:	4b7d      	ldr	r3, [pc, #500]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a7c      	ldr	r2, [pc, #496]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80093ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	4b7a      	ldr	r3, [pc, #488]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a79      	ldr	r2, [pc, #484]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80093da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	e00b      	b.n	80093fa <HAL_RCC_OscConfig+0xd6>
 80093e2:	4b77      	ldr	r3, [pc, #476]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a76      	ldr	r2, [pc, #472]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80093e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	4b74      	ldr	r3, [pc, #464]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a73      	ldr	r2, [pc, #460]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80093f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d013      	beq.n	800942a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009402:	f7fc fbe1 	bl	8005bc8 <HAL_GetTick>
 8009406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009408:	e008      	b.n	800941c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800940a:	f7fc fbdd 	bl	8005bc8 <HAL_GetTick>
 800940e:	4602      	mov	r2, r0
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	2b64      	cmp	r3, #100	; 0x64
 8009416:	d901      	bls.n	800941c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e3a9      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800941c:	4b68      	ldr	r3, [pc, #416]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0f0      	beq.n	800940a <HAL_RCC_OscConfig+0xe6>
 8009428:	e014      	b.n	8009454 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800942a:	f7fc fbcd 	bl	8005bc8 <HAL_GetTick>
 800942e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009430:	e008      	b.n	8009444 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009432:	f7fc fbc9 	bl	8005bc8 <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	2b64      	cmp	r3, #100	; 0x64
 800943e:	d901      	bls.n	8009444 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e395      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009444:	4b5e      	ldr	r3, [pc, #376]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1f0      	bne.n	8009432 <HAL_RCC_OscConfig+0x10e>
 8009450:	e000      	b.n	8009454 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009452:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 80ca 	beq.w	80095f6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009462:	4b57      	ldr	r3, [pc, #348]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800946a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800946c:	4b54      	ldr	r3, [pc, #336]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 800946e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009470:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d007      	beq.n	8009488 <HAL_RCC_OscConfig+0x164>
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	2b18      	cmp	r3, #24
 800947c:	d156      	bne.n	800952c <HAL_RCC_OscConfig+0x208>
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	f003 0303 	and.w	r3, r3, #3
 8009484:	2b00      	cmp	r3, #0
 8009486:	d151      	bne.n	800952c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009488:	4b4d      	ldr	r3, [pc, #308]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <HAL_RCC_OscConfig+0x17c>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e367      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80094a0:	4b47      	ldr	r3, [pc, #284]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f023 0219 	bic.w	r2, r3, #25
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	4944      	ldr	r1, [pc, #272]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80094b2:	f7fc fb89 	bl	8005bc8 <HAL_GetTick>
 80094b6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094b8:	e008      	b.n	80094cc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094ba:	f7fc fb85 	bl	8005bc8 <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d901      	bls.n	80094cc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e351      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094cc:	4b3c      	ldr	r3, [pc, #240]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d0f0      	beq.n	80094ba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094d8:	f7fc fba6 	bl	8005c28 <HAL_GetREVID>
 80094dc:	4603      	mov	r3, r0
 80094de:	f241 0203 	movw	r2, #4099	; 0x1003
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d817      	bhi.n	8009516 <HAL_RCC_OscConfig+0x1f2>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	2b40      	cmp	r3, #64	; 0x40
 80094ec:	d108      	bne.n	8009500 <HAL_RCC_OscConfig+0x1dc>
 80094ee:	4b34      	ldr	r3, [pc, #208]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80094f6:	4a32      	ldr	r2, [pc, #200]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80094f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094fe:	e07a      	b.n	80095f6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009500:	4b2f      	ldr	r3, [pc, #188]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	031b      	lsls	r3, r3, #12
 800950e:	492c      	ldr	r1, [pc, #176]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009510:	4313      	orrs	r3, r2
 8009512:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009514:	e06f      	b.n	80095f6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009516:	4b2a      	ldr	r3, [pc, #168]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	061b      	lsls	r3, r3, #24
 8009524:	4926      	ldr	r1, [pc, #152]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009526:	4313      	orrs	r3, r2
 8009528:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800952a:	e064      	b.n	80095f6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d047      	beq.n	80095c4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009534:	4b22      	ldr	r3, [pc, #136]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f023 0219 	bic.w	r2, r3, #25
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	491f      	ldr	r1, [pc, #124]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009542:	4313      	orrs	r3, r2
 8009544:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009546:	f7fc fb3f 	bl	8005bc8 <HAL_GetTick>
 800954a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800954c:	e008      	b.n	8009560 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800954e:	f7fc fb3b 	bl	8005bc8 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	2b02      	cmp	r3, #2
 800955a:	d901      	bls.n	8009560 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	e307      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009560:	4b17      	ldr	r3, [pc, #92]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 0304 	and.w	r3, r3, #4
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0f0      	beq.n	800954e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800956c:	f7fc fb5c 	bl	8005c28 <HAL_GetREVID>
 8009570:	4603      	mov	r3, r0
 8009572:	f241 0203 	movw	r2, #4099	; 0x1003
 8009576:	4293      	cmp	r3, r2
 8009578:	d817      	bhi.n	80095aa <HAL_RCC_OscConfig+0x286>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	2b40      	cmp	r3, #64	; 0x40
 8009580:	d108      	bne.n	8009594 <HAL_RCC_OscConfig+0x270>
 8009582:	4b0f      	ldr	r3, [pc, #60]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800958a:	4a0d      	ldr	r2, [pc, #52]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 800958c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009590:	6053      	str	r3, [r2, #4]
 8009592:	e030      	b.n	80095f6 <HAL_RCC_OscConfig+0x2d2>
 8009594:	4b0a      	ldr	r3, [pc, #40]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	031b      	lsls	r3, r3, #12
 80095a2:	4907      	ldr	r1, [pc, #28]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	604b      	str	r3, [r1, #4]
 80095a8:	e025      	b.n	80095f6 <HAL_RCC_OscConfig+0x2d2>
 80095aa:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	061b      	lsls	r3, r3, #24
 80095b8:	4901      	ldr	r1, [pc, #4]	; (80095c0 <HAL_RCC_OscConfig+0x29c>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	604b      	str	r3, [r1, #4]
 80095be:	e01a      	b.n	80095f6 <HAL_RCC_OscConfig+0x2d2>
 80095c0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095c4:	4b9e      	ldr	r3, [pc, #632]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a9d      	ldr	r2, [pc, #628]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80095ca:	f023 0301 	bic.w	r3, r3, #1
 80095ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095d0:	f7fc fafa 	bl	8005bc8 <HAL_GetTick>
 80095d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80095d6:	e008      	b.n	80095ea <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095d8:	f7fc faf6 	bl	8005bc8 <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d901      	bls.n	80095ea <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e2c2      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80095ea:	4b95      	ldr	r3, [pc, #596]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0304 	and.w	r3, r3, #4
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1f0      	bne.n	80095d8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 0310 	and.w	r3, r3, #16
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 80a9 	beq.w	8009756 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009604:	4b8e      	ldr	r3, [pc, #568]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800960c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800960e:	4b8c      	ldr	r3, [pc, #560]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 8009610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009612:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	2b08      	cmp	r3, #8
 8009618:	d007      	beq.n	800962a <HAL_RCC_OscConfig+0x306>
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2b18      	cmp	r3, #24
 800961e:	d13a      	bne.n	8009696 <HAL_RCC_OscConfig+0x372>
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f003 0303 	and.w	r3, r3, #3
 8009626:	2b01      	cmp	r3, #1
 8009628:	d135      	bne.n	8009696 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800962a:	4b85      	ldr	r3, [pc, #532]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009632:	2b00      	cmp	r3, #0
 8009634:	d005      	beq.n	8009642 <HAL_RCC_OscConfig+0x31e>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	2b80      	cmp	r3, #128	; 0x80
 800963c:	d001      	beq.n	8009642 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e296      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009642:	f7fc faf1 	bl	8005c28 <HAL_GetREVID>
 8009646:	4603      	mov	r3, r0
 8009648:	f241 0203 	movw	r2, #4099	; 0x1003
 800964c:	4293      	cmp	r3, r2
 800964e:	d817      	bhi.n	8009680 <HAL_RCC_OscConfig+0x35c>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	2b20      	cmp	r3, #32
 8009656:	d108      	bne.n	800966a <HAL_RCC_OscConfig+0x346>
 8009658:	4b79      	ldr	r3, [pc, #484]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009660:	4a77      	ldr	r2, [pc, #476]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 8009662:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009666:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009668:	e075      	b.n	8009756 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800966a:	4b75      	ldr	r3, [pc, #468]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	069b      	lsls	r3, r3, #26
 8009678:	4971      	ldr	r1, [pc, #452]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 800967a:	4313      	orrs	r3, r2
 800967c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800967e:	e06a      	b.n	8009756 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009680:	4b6f      	ldr	r3, [pc, #444]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	061b      	lsls	r3, r3, #24
 800968e:	496c      	ldr	r1, [pc, #432]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 8009690:	4313      	orrs	r3, r2
 8009692:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009694:	e05f      	b.n	8009756 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	69db      	ldr	r3, [r3, #28]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d042      	beq.n	8009724 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800969e:	4b68      	ldr	r3, [pc, #416]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a67      	ldr	r2, [pc, #412]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80096a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096aa:	f7fc fa8d 	bl	8005bc8 <HAL_GetTick>
 80096ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096b0:	e008      	b.n	80096c4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80096b2:	f7fc fa89 	bl	8005bc8 <HAL_GetTick>
 80096b6:	4602      	mov	r2, r0
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d901      	bls.n	80096c4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e255      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096c4:	4b5e      	ldr	r3, [pc, #376]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d0f0      	beq.n	80096b2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096d0:	f7fc faaa 	bl	8005c28 <HAL_GetREVID>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80096da:	4293      	cmp	r3, r2
 80096dc:	d817      	bhi.n	800970e <HAL_RCC_OscConfig+0x3ea>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	2b20      	cmp	r3, #32
 80096e4:	d108      	bne.n	80096f8 <HAL_RCC_OscConfig+0x3d4>
 80096e6:	4b56      	ldr	r3, [pc, #344]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80096ee:	4a54      	ldr	r2, [pc, #336]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80096f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096f4:	6053      	str	r3, [r2, #4]
 80096f6:	e02e      	b.n	8009756 <HAL_RCC_OscConfig+0x432>
 80096f8:	4b51      	ldr	r3, [pc, #324]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	069b      	lsls	r3, r3, #26
 8009706:	494e      	ldr	r1, [pc, #312]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 8009708:	4313      	orrs	r3, r2
 800970a:	604b      	str	r3, [r1, #4]
 800970c:	e023      	b.n	8009756 <HAL_RCC_OscConfig+0x432>
 800970e:	4b4c      	ldr	r3, [pc, #304]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	061b      	lsls	r3, r3, #24
 800971c:	4948      	ldr	r1, [pc, #288]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 800971e:	4313      	orrs	r3, r2
 8009720:	60cb      	str	r3, [r1, #12]
 8009722:	e018      	b.n	8009756 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009724:	4b46      	ldr	r3, [pc, #280]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a45      	ldr	r2, [pc, #276]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 800972a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800972e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009730:	f7fc fa4a 	bl	8005bc8 <HAL_GetTick>
 8009734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009736:	e008      	b.n	800974a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009738:	f7fc fa46 	bl	8005bc8 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	2b02      	cmp	r3, #2
 8009744:	d901      	bls.n	800974a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e212      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800974a:	4b3d      	ldr	r3, [pc, #244]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1f0      	bne.n	8009738 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0308 	and.w	r3, r3, #8
 800975e:	2b00      	cmp	r3, #0
 8009760:	d036      	beq.n	80097d0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d019      	beq.n	800979e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800976a:	4b35      	ldr	r3, [pc, #212]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 800976c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800976e:	4a34      	ldr	r2, [pc, #208]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 8009770:	f043 0301 	orr.w	r3, r3, #1
 8009774:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009776:	f7fc fa27 	bl	8005bc8 <HAL_GetTick>
 800977a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800977c:	e008      	b.n	8009790 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800977e:	f7fc fa23 	bl	8005bc8 <HAL_GetTick>
 8009782:	4602      	mov	r2, r0
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	2b02      	cmp	r3, #2
 800978a:	d901      	bls.n	8009790 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e1ef      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009790:	4b2b      	ldr	r3, [pc, #172]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 8009792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009794:	f003 0302 	and.w	r3, r3, #2
 8009798:	2b00      	cmp	r3, #0
 800979a:	d0f0      	beq.n	800977e <HAL_RCC_OscConfig+0x45a>
 800979c:	e018      	b.n	80097d0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800979e:	4b28      	ldr	r3, [pc, #160]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80097a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a2:	4a27      	ldr	r2, [pc, #156]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80097a4:	f023 0301 	bic.w	r3, r3, #1
 80097a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097aa:	f7fc fa0d 	bl	8005bc8 <HAL_GetTick>
 80097ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097b0:	e008      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097b2:	f7fc fa09 	bl	8005bc8 <HAL_GetTick>
 80097b6:	4602      	mov	r2, r0
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	2b02      	cmp	r3, #2
 80097be:	d901      	bls.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e1d5      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097c4:	4b1e      	ldr	r3, [pc, #120]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80097c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097c8:	f003 0302 	and.w	r3, r3, #2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1f0      	bne.n	80097b2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0320 	and.w	r3, r3, #32
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d039      	beq.n	8009850 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d019      	beq.n	8009818 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80097e4:	4b16      	ldr	r3, [pc, #88]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a15      	ldr	r2, [pc, #84]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 80097ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80097ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80097f0:	f7fc f9ea 	bl	8005bc8 <HAL_GetTick>
 80097f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80097f6:	e008      	b.n	800980a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80097f8:	f7fc f9e6 	bl	8005bc8 <HAL_GetTick>
 80097fc:	4602      	mov	r2, r0
 80097fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	2b02      	cmp	r3, #2
 8009804:	d901      	bls.n	800980a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8009806:	2303      	movs	r3, #3
 8009808:	e1b2      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800980a:	4b0d      	ldr	r3, [pc, #52]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009812:	2b00      	cmp	r3, #0
 8009814:	d0f0      	beq.n	80097f8 <HAL_RCC_OscConfig+0x4d4>
 8009816:	e01b      	b.n	8009850 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009818:	4b09      	ldr	r3, [pc, #36]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a08      	ldr	r2, [pc, #32]	; (8009840 <HAL_RCC_OscConfig+0x51c>)
 800981e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009822:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009824:	f7fc f9d0 	bl	8005bc8 <HAL_GetTick>
 8009828:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800982a:	e00b      	b.n	8009844 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800982c:	f7fc f9cc 	bl	8005bc8 <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	2b02      	cmp	r3, #2
 8009838:	d904      	bls.n	8009844 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e198      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
 800983e:	bf00      	nop
 8009840:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009844:	4ba3      	ldr	r3, [pc, #652]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1ed      	bne.n	800982c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 8081 	beq.w	8009960 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800985e:	4b9e      	ldr	r3, [pc, #632]	; (8009ad8 <HAL_RCC_OscConfig+0x7b4>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a9d      	ldr	r2, [pc, #628]	; (8009ad8 <HAL_RCC_OscConfig+0x7b4>)
 8009864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009868:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800986a:	f7fc f9ad 	bl	8005bc8 <HAL_GetTick>
 800986e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009870:	e008      	b.n	8009884 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009872:	f7fc f9a9 	bl	8005bc8 <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	2b64      	cmp	r3, #100	; 0x64
 800987e:	d901      	bls.n	8009884 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e175      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009884:	4b94      	ldr	r3, [pc, #592]	; (8009ad8 <HAL_RCC_OscConfig+0x7b4>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800988c:	2b00      	cmp	r3, #0
 800988e:	d0f0      	beq.n	8009872 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d106      	bne.n	80098a6 <HAL_RCC_OscConfig+0x582>
 8009898:	4b8e      	ldr	r3, [pc, #568]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 800989a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800989c:	4a8d      	ldr	r2, [pc, #564]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 800989e:	f043 0301 	orr.w	r3, r3, #1
 80098a2:	6713      	str	r3, [r2, #112]	; 0x70
 80098a4:	e02d      	b.n	8009902 <HAL_RCC_OscConfig+0x5de>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10c      	bne.n	80098c8 <HAL_RCC_OscConfig+0x5a4>
 80098ae:	4b89      	ldr	r3, [pc, #548]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80098b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b2:	4a88      	ldr	r2, [pc, #544]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80098b4:	f023 0301 	bic.w	r3, r3, #1
 80098b8:	6713      	str	r3, [r2, #112]	; 0x70
 80098ba:	4b86      	ldr	r3, [pc, #536]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80098bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098be:	4a85      	ldr	r2, [pc, #532]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80098c0:	f023 0304 	bic.w	r3, r3, #4
 80098c4:	6713      	str	r3, [r2, #112]	; 0x70
 80098c6:	e01c      	b.n	8009902 <HAL_RCC_OscConfig+0x5de>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	2b05      	cmp	r3, #5
 80098ce:	d10c      	bne.n	80098ea <HAL_RCC_OscConfig+0x5c6>
 80098d0:	4b80      	ldr	r3, [pc, #512]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80098d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d4:	4a7f      	ldr	r2, [pc, #508]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80098d6:	f043 0304 	orr.w	r3, r3, #4
 80098da:	6713      	str	r3, [r2, #112]	; 0x70
 80098dc:	4b7d      	ldr	r3, [pc, #500]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80098de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e0:	4a7c      	ldr	r2, [pc, #496]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80098e2:	f043 0301 	orr.w	r3, r3, #1
 80098e6:	6713      	str	r3, [r2, #112]	; 0x70
 80098e8:	e00b      	b.n	8009902 <HAL_RCC_OscConfig+0x5de>
 80098ea:	4b7a      	ldr	r3, [pc, #488]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80098ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ee:	4a79      	ldr	r2, [pc, #484]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80098f0:	f023 0301 	bic.w	r3, r3, #1
 80098f4:	6713      	str	r3, [r2, #112]	; 0x70
 80098f6:	4b77      	ldr	r3, [pc, #476]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80098f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fa:	4a76      	ldr	r2, [pc, #472]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80098fc:	f023 0304 	bic.w	r3, r3, #4
 8009900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d015      	beq.n	8009936 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800990a:	f7fc f95d 	bl	8005bc8 <HAL_GetTick>
 800990e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009910:	e00a      	b.n	8009928 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009912:	f7fc f959 	bl	8005bc8 <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009920:	4293      	cmp	r3, r2
 8009922:	d901      	bls.n	8009928 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8009924:	2303      	movs	r3, #3
 8009926:	e123      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009928:	4b6a      	ldr	r3, [pc, #424]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 800992a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992c:	f003 0302 	and.w	r3, r3, #2
 8009930:	2b00      	cmp	r3, #0
 8009932:	d0ee      	beq.n	8009912 <HAL_RCC_OscConfig+0x5ee>
 8009934:	e014      	b.n	8009960 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009936:	f7fc f947 	bl	8005bc8 <HAL_GetTick>
 800993a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800993c:	e00a      	b.n	8009954 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800993e:	f7fc f943 	bl	8005bc8 <HAL_GetTick>
 8009942:	4602      	mov	r2, r0
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	f241 3288 	movw	r2, #5000	; 0x1388
 800994c:	4293      	cmp	r3, r2
 800994e:	d901      	bls.n	8009954 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	e10d      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009954:	4b5f      	ldr	r3, [pc, #380]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009958:	f003 0302 	and.w	r3, r3, #2
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1ee      	bne.n	800993e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 8102 	beq.w	8009b6e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800996a:	4b5a      	ldr	r3, [pc, #360]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009972:	2b18      	cmp	r3, #24
 8009974:	f000 80bd 	beq.w	8009af2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	2b02      	cmp	r3, #2
 800997e:	f040 8095 	bne.w	8009aac <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009982:	4b54      	ldr	r3, [pc, #336]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a53      	ldr	r2, [pc, #332]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009988:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800998c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800998e:	f7fc f91b 	bl	8005bc8 <HAL_GetTick>
 8009992:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009994:	e008      	b.n	80099a8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009996:	f7fc f917 	bl	8005bc8 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d901      	bls.n	80099a8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e0e3      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099a8:	4b4a      	ldr	r3, [pc, #296]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1f0      	bne.n	8009996 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80099b4:	4b47      	ldr	r3, [pc, #284]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80099b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099b8:	4b48      	ldr	r3, [pc, #288]	; (8009adc <HAL_RCC_OscConfig+0x7b8>)
 80099ba:	4013      	ands	r3, r2
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80099c4:	0112      	lsls	r2, r2, #4
 80099c6:	430a      	orrs	r2, r1
 80099c8:	4942      	ldr	r1, [pc, #264]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	628b      	str	r3, [r1, #40]	; 0x28
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d2:	3b01      	subs	r3, #1
 80099d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099dc:	3b01      	subs	r3, #1
 80099de:	025b      	lsls	r3, r3, #9
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	431a      	orrs	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e8:	3b01      	subs	r3, #1
 80099ea:	041b      	lsls	r3, r3, #16
 80099ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80099f0:	431a      	orrs	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099f6:	3b01      	subs	r3, #1
 80099f8:	061b      	lsls	r3, r3, #24
 80099fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80099fe:	4935      	ldr	r1, [pc, #212]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009a04:	4b33      	ldr	r3, [pc, #204]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a08:	4a32      	ldr	r2, [pc, #200]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a0a:	f023 0301 	bic.w	r3, r3, #1
 8009a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009a10:	4b30      	ldr	r3, [pc, #192]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a14:	4b32      	ldr	r3, [pc, #200]	; (8009ae0 <HAL_RCC_OscConfig+0x7bc>)
 8009a16:	4013      	ands	r3, r2
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009a1c:	00d2      	lsls	r2, r2, #3
 8009a1e:	492d      	ldr	r1, [pc, #180]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009a24:	4b2b      	ldr	r3, [pc, #172]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a28:	f023 020c 	bic.w	r2, r3, #12
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a30:	4928      	ldr	r1, [pc, #160]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009a36:	4b27      	ldr	r3, [pc, #156]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3a:	f023 0202 	bic.w	r2, r3, #2
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a42:	4924      	ldr	r1, [pc, #144]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009a48:	4b22      	ldr	r3, [pc, #136]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4c:	4a21      	ldr	r2, [pc, #132]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a54:	4b1f      	ldr	r3, [pc, #124]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a58:	4a1e      	ldr	r2, [pc, #120]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009a60:	4b1c      	ldr	r3, [pc, #112]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a64:	4a1b      	ldr	r2, [pc, #108]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009a6c:	4b19      	ldr	r3, [pc, #100]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	4a18      	ldr	r2, [pc, #96]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a72:	f043 0301 	orr.w	r3, r3, #1
 8009a76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a78:	4b16      	ldr	r3, [pc, #88]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a15      	ldr	r2, [pc, #84]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a84:	f7fc f8a0 	bl	8005bc8 <HAL_GetTick>
 8009a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009a8a:	e008      	b.n	8009a9e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a8c:	f7fc f89c 	bl	8005bc8 <HAL_GetTick>
 8009a90:	4602      	mov	r2, r0
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d901      	bls.n	8009a9e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e068      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009a9e:	4b0d      	ldr	r3, [pc, #52]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d0f0      	beq.n	8009a8c <HAL_RCC_OscConfig+0x768>
 8009aaa:	e060      	b.n	8009b6e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009aac:	4b09      	ldr	r3, [pc, #36]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a08      	ldr	r2, [pc, #32]	; (8009ad4 <HAL_RCC_OscConfig+0x7b0>)
 8009ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ab8:	f7fc f886 	bl	8005bc8 <HAL_GetTick>
 8009abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009abe:	e011      	b.n	8009ae4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ac0:	f7fc f882 	bl	8005bc8 <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d90a      	bls.n	8009ae4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e04e      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
 8009ad2:	bf00      	nop
 8009ad4:	58024400 	.word	0x58024400
 8009ad8:	58024800 	.word	0x58024800
 8009adc:	fffffc0c 	.word	0xfffffc0c
 8009ae0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ae4:	4b24      	ldr	r3, [pc, #144]	; (8009b78 <HAL_RCC_OscConfig+0x854>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e7      	bne.n	8009ac0 <HAL_RCC_OscConfig+0x79c>
 8009af0:	e03d      	b.n	8009b6e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009af2:	4b21      	ldr	r3, [pc, #132]	; (8009b78 <HAL_RCC_OscConfig+0x854>)
 8009af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009af8:	4b1f      	ldr	r3, [pc, #124]	; (8009b78 <HAL_RCC_OscConfig+0x854>)
 8009afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009afc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d031      	beq.n	8009b6a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f003 0203 	and.w	r2, r3, #3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d12a      	bne.n	8009b6a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	091b      	lsrs	r3, r3, #4
 8009b18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d122      	bne.n	8009b6a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d11a      	bne.n	8009b6a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	0a5b      	lsrs	r3, r3, #9
 8009b38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b40:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d111      	bne.n	8009b6a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	0c1b      	lsrs	r3, r3, #16
 8009b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b52:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d108      	bne.n	8009b6a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	0e1b      	lsrs	r3, r3, #24
 8009b5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b64:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d001      	beq.n	8009b6e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3730      	adds	r7, #48	; 0x30
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	58024400 	.word	0x58024400

08009b7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e19c      	b.n	8009eca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b90:	4b8a      	ldr	r3, [pc, #552]	; (8009dbc <HAL_RCC_ClockConfig+0x240>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 030f 	and.w	r3, r3, #15
 8009b98:	683a      	ldr	r2, [r7, #0]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d910      	bls.n	8009bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b9e:	4b87      	ldr	r3, [pc, #540]	; (8009dbc <HAL_RCC_ClockConfig+0x240>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f023 020f 	bic.w	r2, r3, #15
 8009ba6:	4985      	ldr	r1, [pc, #532]	; (8009dbc <HAL_RCC_ClockConfig+0x240>)
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bae:	4b83      	ldr	r3, [pc, #524]	; (8009dbc <HAL_RCC_ClockConfig+0x240>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 030f 	and.w	r3, r3, #15
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d001      	beq.n	8009bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e184      	b.n	8009eca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 0304 	and.w	r3, r3, #4
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d010      	beq.n	8009bee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	691a      	ldr	r2, [r3, #16]
 8009bd0:	4b7b      	ldr	r3, [pc, #492]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d908      	bls.n	8009bee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009bdc:	4b78      	ldr	r3, [pc, #480]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	4975      	ldr	r1, [pc, #468]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 0308 	and.w	r3, r3, #8
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d010      	beq.n	8009c1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	695a      	ldr	r2, [r3, #20]
 8009bfe:	4b70      	ldr	r3, [pc, #448]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009c00:	69db      	ldr	r3, [r3, #28]
 8009c02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d908      	bls.n	8009c1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c0a:	4b6d      	ldr	r3, [pc, #436]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	496a      	ldr	r1, [pc, #424]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0310 	and.w	r3, r3, #16
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d010      	beq.n	8009c4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	699a      	ldr	r2, [r3, #24]
 8009c2c:	4b64      	ldr	r3, [pc, #400]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009c2e:	69db      	ldr	r3, [r3, #28]
 8009c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d908      	bls.n	8009c4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c38:	4b61      	ldr	r3, [pc, #388]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	495e      	ldr	r1, [pc, #376]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 0320 	and.w	r3, r3, #32
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d010      	beq.n	8009c78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	69da      	ldr	r2, [r3, #28]
 8009c5a:	4b59      	ldr	r3, [pc, #356]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009c5c:	6a1b      	ldr	r3, [r3, #32]
 8009c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d908      	bls.n	8009c78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009c66:	4b56      	ldr	r3, [pc, #344]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	69db      	ldr	r3, [r3, #28]
 8009c72:	4953      	ldr	r1, [pc, #332]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009c74:	4313      	orrs	r3, r2
 8009c76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0302 	and.w	r3, r3, #2
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d010      	beq.n	8009ca6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68da      	ldr	r2, [r3, #12]
 8009c88:	4b4d      	ldr	r3, [pc, #308]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	f003 030f 	and.w	r3, r3, #15
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d908      	bls.n	8009ca6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c94:	4b4a      	ldr	r3, [pc, #296]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	f023 020f 	bic.w	r2, r3, #15
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	4947      	ldr	r1, [pc, #284]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 0301 	and.w	r3, r3, #1
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d055      	beq.n	8009d5e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009cb2:	4b43      	ldr	r3, [pc, #268]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	4940      	ldr	r1, [pc, #256]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d107      	bne.n	8009cdc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ccc:	4b3c      	ldr	r3, [pc, #240]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d121      	bne.n	8009d1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e0f6      	b.n	8009eca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	2b03      	cmp	r3, #3
 8009ce2:	d107      	bne.n	8009cf4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ce4:	4b36      	ldr	r3, [pc, #216]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d115      	bne.n	8009d1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e0ea      	b.n	8009eca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d107      	bne.n	8009d0c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009cfc:	4b30      	ldr	r3, [pc, #192]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d109      	bne.n	8009d1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e0de      	b.n	8009eca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d0c:	4b2c      	ldr	r3, [pc, #176]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0304 	and.w	r3, r3, #4
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d101      	bne.n	8009d1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e0d6      	b.n	8009eca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d1c:	4b28      	ldr	r3, [pc, #160]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	f023 0207 	bic.w	r2, r3, #7
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	4925      	ldr	r1, [pc, #148]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d2e:	f7fb ff4b 	bl	8005bc8 <HAL_GetTick>
 8009d32:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d34:	e00a      	b.n	8009d4c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d36:	f7fb ff47 	bl	8005bc8 <HAL_GetTick>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d901      	bls.n	8009d4c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e0be      	b.n	8009eca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d4c:	4b1c      	ldr	r3, [pc, #112]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	00db      	lsls	r3, r3, #3
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d1eb      	bne.n	8009d36 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 0302 	and.w	r3, r3, #2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d010      	beq.n	8009d8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	68da      	ldr	r2, [r3, #12]
 8009d6e:	4b14      	ldr	r3, [pc, #80]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	f003 030f 	and.w	r3, r3, #15
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d208      	bcs.n	8009d8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d7a:	4b11      	ldr	r3, [pc, #68]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	f023 020f 	bic.w	r2, r3, #15
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	490e      	ldr	r1, [pc, #56]	; (8009dc0 <HAL_RCC_ClockConfig+0x244>)
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d8c:	4b0b      	ldr	r3, [pc, #44]	; (8009dbc <HAL_RCC_ClockConfig+0x240>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 030f 	and.w	r3, r3, #15
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d214      	bcs.n	8009dc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d9a:	4b08      	ldr	r3, [pc, #32]	; (8009dbc <HAL_RCC_ClockConfig+0x240>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f023 020f 	bic.w	r2, r3, #15
 8009da2:	4906      	ldr	r1, [pc, #24]	; (8009dbc <HAL_RCC_ClockConfig+0x240>)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009daa:	4b04      	ldr	r3, [pc, #16]	; (8009dbc <HAL_RCC_ClockConfig+0x240>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 030f 	and.w	r3, r3, #15
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d005      	beq.n	8009dc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e086      	b.n	8009eca <HAL_RCC_ClockConfig+0x34e>
 8009dbc:	52002000 	.word	0x52002000
 8009dc0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0304 	and.w	r3, r3, #4
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d010      	beq.n	8009df2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	691a      	ldr	r2, [r3, #16]
 8009dd4:	4b3f      	ldr	r3, [pc, #252]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d208      	bcs.n	8009df2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009de0:	4b3c      	ldr	r3, [pc, #240]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	4939      	ldr	r1, [pc, #228]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009dee:	4313      	orrs	r3, r2
 8009df0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0308 	and.w	r3, r3, #8
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d010      	beq.n	8009e20 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	695a      	ldr	r2, [r3, #20]
 8009e02:	4b34      	ldr	r3, [pc, #208]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d208      	bcs.n	8009e20 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009e0e:	4b31      	ldr	r3, [pc, #196]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009e10:	69db      	ldr	r3, [r3, #28]
 8009e12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	492e      	ldr	r1, [pc, #184]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 0310 	and.w	r3, r3, #16
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d010      	beq.n	8009e4e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	699a      	ldr	r2, [r3, #24]
 8009e30:	4b28      	ldr	r3, [pc, #160]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009e32:	69db      	ldr	r3, [r3, #28]
 8009e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d208      	bcs.n	8009e4e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e3c:	4b25      	ldr	r3, [pc, #148]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	4922      	ldr	r1, [pc, #136]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 0320 	and.w	r3, r3, #32
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d010      	beq.n	8009e7c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	69da      	ldr	r2, [r3, #28]
 8009e5e:	4b1d      	ldr	r3, [pc, #116]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d208      	bcs.n	8009e7c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009e6a:	4b1a      	ldr	r3, [pc, #104]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	4917      	ldr	r1, [pc, #92]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009e7c:	f000 f834 	bl	8009ee8 <HAL_RCC_GetSysClockFreq>
 8009e80:	4602      	mov	r2, r0
 8009e82:	4b14      	ldr	r3, [pc, #80]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	0a1b      	lsrs	r3, r3, #8
 8009e88:	f003 030f 	and.w	r3, r3, #15
 8009e8c:	4912      	ldr	r1, [pc, #72]	; (8009ed8 <HAL_RCC_ClockConfig+0x35c>)
 8009e8e:	5ccb      	ldrb	r3, [r1, r3]
 8009e90:	f003 031f 	and.w	r3, r3, #31
 8009e94:	fa22 f303 	lsr.w	r3, r2, r3
 8009e98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e9a:	4b0e      	ldr	r3, [pc, #56]	; (8009ed4 <HAL_RCC_ClockConfig+0x358>)
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	f003 030f 	and.w	r3, r3, #15
 8009ea2:	4a0d      	ldr	r2, [pc, #52]	; (8009ed8 <HAL_RCC_ClockConfig+0x35c>)
 8009ea4:	5cd3      	ldrb	r3, [r2, r3]
 8009ea6:	f003 031f 	and.w	r3, r3, #31
 8009eaa:	693a      	ldr	r2, [r7, #16]
 8009eac:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb0:	4a0a      	ldr	r2, [pc, #40]	; (8009edc <HAL_RCC_ClockConfig+0x360>)
 8009eb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009eb4:	4a0a      	ldr	r2, [pc, #40]	; (8009ee0 <HAL_RCC_ClockConfig+0x364>)
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009eba:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <HAL_RCC_ClockConfig+0x368>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7fb fe38 	bl	8005b34 <HAL_InitTick>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	58024400 	.word	0x58024400
 8009ed8:	08012888 	.word	0x08012888
 8009edc:	24000030 	.word	0x24000030
 8009ee0:	2400002c 	.word	0x2400002c
 8009ee4:	24000034 	.word	0x24000034

08009ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b089      	sub	sp, #36	; 0x24
 8009eec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009eee:	4bb3      	ldr	r3, [pc, #716]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ef6:	2b18      	cmp	r3, #24
 8009ef8:	f200 8155 	bhi.w	800a1a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8009efc:	a201      	add	r2, pc, #4	; (adr r2, 8009f04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f02:	bf00      	nop
 8009f04:	08009f69 	.word	0x08009f69
 8009f08:	0800a1a7 	.word	0x0800a1a7
 8009f0c:	0800a1a7 	.word	0x0800a1a7
 8009f10:	0800a1a7 	.word	0x0800a1a7
 8009f14:	0800a1a7 	.word	0x0800a1a7
 8009f18:	0800a1a7 	.word	0x0800a1a7
 8009f1c:	0800a1a7 	.word	0x0800a1a7
 8009f20:	0800a1a7 	.word	0x0800a1a7
 8009f24:	08009f8f 	.word	0x08009f8f
 8009f28:	0800a1a7 	.word	0x0800a1a7
 8009f2c:	0800a1a7 	.word	0x0800a1a7
 8009f30:	0800a1a7 	.word	0x0800a1a7
 8009f34:	0800a1a7 	.word	0x0800a1a7
 8009f38:	0800a1a7 	.word	0x0800a1a7
 8009f3c:	0800a1a7 	.word	0x0800a1a7
 8009f40:	0800a1a7 	.word	0x0800a1a7
 8009f44:	08009f95 	.word	0x08009f95
 8009f48:	0800a1a7 	.word	0x0800a1a7
 8009f4c:	0800a1a7 	.word	0x0800a1a7
 8009f50:	0800a1a7 	.word	0x0800a1a7
 8009f54:	0800a1a7 	.word	0x0800a1a7
 8009f58:	0800a1a7 	.word	0x0800a1a7
 8009f5c:	0800a1a7 	.word	0x0800a1a7
 8009f60:	0800a1a7 	.word	0x0800a1a7
 8009f64:	08009f9b 	.word	0x08009f9b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f68:	4b94      	ldr	r3, [pc, #592]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0320 	and.w	r3, r3, #32
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d009      	beq.n	8009f88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f74:	4b91      	ldr	r3, [pc, #580]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	08db      	lsrs	r3, r3, #3
 8009f7a:	f003 0303 	and.w	r3, r3, #3
 8009f7e:	4a90      	ldr	r2, [pc, #576]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f80:	fa22 f303 	lsr.w	r3, r2, r3
 8009f84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009f86:	e111      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009f88:	4b8d      	ldr	r3, [pc, #564]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f8a:	61bb      	str	r3, [r7, #24]
    break;
 8009f8c:	e10e      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009f8e:	4b8d      	ldr	r3, [pc, #564]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009f90:	61bb      	str	r3, [r7, #24]
    break;
 8009f92:	e10b      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009f94:	4b8c      	ldr	r3, [pc, #560]	; (800a1c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009f96:	61bb      	str	r3, [r7, #24]
    break;
 8009f98:	e108      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f9a:	4b88      	ldr	r3, [pc, #544]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009fa4:	4b85      	ldr	r3, [pc, #532]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa8:	091b      	lsrs	r3, r3, #4
 8009faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009fb0:	4b82      	ldr	r3, [pc, #520]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009fba:	4b80      	ldr	r3, [pc, #512]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fbe:	08db      	lsrs	r3, r3, #3
 8009fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	fb02 f303 	mul.w	r3, r2, r3
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 80e1 	beq.w	800a1a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	f000 8083 	beq.w	800a0ec <HAL_RCC_GetSysClockFreq+0x204>
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	f200 80a1 	bhi.w	800a130 <HAL_RCC_GetSysClockFreq+0x248>
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d003      	beq.n	8009ffc <HAL_RCC_GetSysClockFreq+0x114>
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d056      	beq.n	800a0a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009ffa:	e099      	b.n	800a130 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ffc:	4b6f      	ldr	r3, [pc, #444]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 0320 	and.w	r3, r3, #32
 800a004:	2b00      	cmp	r3, #0
 800a006:	d02d      	beq.n	800a064 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a008:	4b6c      	ldr	r3, [pc, #432]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	08db      	lsrs	r3, r3, #3
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	4a6b      	ldr	r2, [pc, #428]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a014:	fa22 f303 	lsr.w	r3, r2, r3
 800a018:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	ee07 3a90 	vmov	s15, r3
 800a020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	ee07 3a90 	vmov	s15, r3
 800a02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a032:	4b62      	ldr	r3, [pc, #392]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a042:	ed97 6a02 	vldr	s12, [r7, #8]
 800a046:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a05e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a062:	e087      	b.n	800a174 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	ee07 3a90 	vmov	s15, r3
 800a06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a06e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a1d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a076:	4b51      	ldr	r3, [pc, #324]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a07e:	ee07 3a90 	vmov	s15, r3
 800a082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a086:	ed97 6a02 	vldr	s12, [r7, #8]
 800a08a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0a6:	e065      	b.n	800a174 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	ee07 3a90 	vmov	s15, r3
 800a0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a1d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ba:	4b40      	ldr	r3, [pc, #256]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c2:	ee07 3a90 	vmov	s15, r3
 800a0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0ea:	e043      	b.n	800a174 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	ee07 3a90 	vmov	s15, r3
 800a0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a1d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0fe:	4b2f      	ldr	r3, [pc, #188]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a106:	ee07 3a90 	vmov	s15, r3
 800a10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a10e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a112:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a11e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a12e:	e021      	b.n	800a174 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	ee07 3a90 	vmov	s15, r3
 800a136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a1d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a142:	4b1e      	ldr	r3, [pc, #120]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a152:	ed97 6a02 	vldr	s12, [r7, #8]
 800a156:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a172:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a174:	4b11      	ldr	r3, [pc, #68]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a178:	0a5b      	lsrs	r3, r3, #9
 800a17a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a17e:	3301      	adds	r3, #1
 800a180:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	ee07 3a90 	vmov	s15, r3
 800a188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a18c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a198:	ee17 3a90 	vmov	r3, s15
 800a19c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a19e:	e005      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	61bb      	str	r3, [r7, #24]
    break;
 800a1a4:	e002      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a1a6:	4b07      	ldr	r3, [pc, #28]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a1a8:	61bb      	str	r3, [r7, #24]
    break;
 800a1aa:	bf00      	nop
  }

  return sysclockfreq;
 800a1ac:	69bb      	ldr	r3, [r7, #24]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3724      	adds	r7, #36	; 0x24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	58024400 	.word	0x58024400
 800a1c0:	03d09000 	.word	0x03d09000
 800a1c4:	003d0900 	.word	0x003d0900
 800a1c8:	02dc6c00 	.word	0x02dc6c00
 800a1cc:	46000000 	.word	0x46000000
 800a1d0:	4c742400 	.word	0x4c742400
 800a1d4:	4a742400 	.word	0x4a742400
 800a1d8:	4c371b00 	.word	0x4c371b00

0800a1dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a1e2:	f7ff fe81 	bl	8009ee8 <HAL_RCC_GetSysClockFreq>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	4b10      	ldr	r3, [pc, #64]	; (800a22c <HAL_RCC_GetHCLKFreq+0x50>)
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	0a1b      	lsrs	r3, r3, #8
 800a1ee:	f003 030f 	and.w	r3, r3, #15
 800a1f2:	490f      	ldr	r1, [pc, #60]	; (800a230 <HAL_RCC_GetHCLKFreq+0x54>)
 800a1f4:	5ccb      	ldrb	r3, [r1, r3]
 800a1f6:	f003 031f 	and.w	r3, r3, #31
 800a1fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a1fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a200:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <HAL_RCC_GetHCLKFreq+0x50>)
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	f003 030f 	and.w	r3, r3, #15
 800a208:	4a09      	ldr	r2, [pc, #36]	; (800a230 <HAL_RCC_GetHCLKFreq+0x54>)
 800a20a:	5cd3      	ldrb	r3, [r2, r3]
 800a20c:	f003 031f 	and.w	r3, r3, #31
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	fa22 f303 	lsr.w	r3, r2, r3
 800a216:	4a07      	ldr	r2, [pc, #28]	; (800a234 <HAL_RCC_GetHCLKFreq+0x58>)
 800a218:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a21a:	4a07      	ldr	r2, [pc, #28]	; (800a238 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a220:	4b04      	ldr	r3, [pc, #16]	; (800a234 <HAL_RCC_GetHCLKFreq+0x58>)
 800a222:	681b      	ldr	r3, [r3, #0]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	58024400 	.word	0x58024400
 800a230:	08012888 	.word	0x08012888
 800a234:	24000030 	.word	0x24000030
 800a238:	2400002c 	.word	0x2400002c

0800a23c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a240:	f7ff ffcc 	bl	800a1dc <HAL_RCC_GetHCLKFreq>
 800a244:	4602      	mov	r2, r0
 800a246:	4b06      	ldr	r3, [pc, #24]	; (800a260 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	091b      	lsrs	r3, r3, #4
 800a24c:	f003 0307 	and.w	r3, r3, #7
 800a250:	4904      	ldr	r1, [pc, #16]	; (800a264 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a252:	5ccb      	ldrb	r3, [r1, r3]
 800a254:	f003 031f 	and.w	r3, r3, #31
 800a258:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	58024400 	.word	0x58024400
 800a264:	08012888 	.word	0x08012888

0800a268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a26c:	f7ff ffb6 	bl	800a1dc <HAL_RCC_GetHCLKFreq>
 800a270:	4602      	mov	r2, r0
 800a272:	4b06      	ldr	r3, [pc, #24]	; (800a28c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	0a1b      	lsrs	r3, r3, #8
 800a278:	f003 0307 	and.w	r3, r3, #7
 800a27c:	4904      	ldr	r1, [pc, #16]	; (800a290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a27e:	5ccb      	ldrb	r3, [r1, r3]
 800a280:	f003 031f 	and.w	r3, r3, #31
 800a284:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a288:	4618      	mov	r0, r3
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	58024400 	.word	0x58024400
 800a290:	08012888 	.word	0x08012888

0800a294 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a29c:	2300      	movs	r3, #0
 800a29e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d03f      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2b8:	d02a      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a2ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2be:	d824      	bhi.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a2c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2c4:	d018      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a2c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2ca:	d81e      	bhi.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a2d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2d4:	d007      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a2d6:	e018      	b.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2d8:	4bab      	ldr	r3, [pc, #684]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2dc:	4aaa      	ldr	r2, [pc, #680]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a2e4:	e015      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	2102      	movs	r1, #2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f001 f9cf 	bl	800b690 <RCCEx_PLL2_Config>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a2f6:	e00c      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3324      	adds	r3, #36	; 0x24
 800a2fc:	2102      	movs	r1, #2
 800a2fe:	4618      	mov	r0, r3
 800a300:	f001 fa78 	bl	800b7f4 <RCCEx_PLL3_Config>
 800a304:	4603      	mov	r3, r0
 800a306:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a308:	e003      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	75fb      	strb	r3, [r7, #23]
      break;
 800a30e:	e000      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a310:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a312:	7dfb      	ldrb	r3, [r7, #23]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d109      	bne.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a318:	4b9b      	ldr	r3, [pc, #620]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a31a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a31c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a324:	4998      	ldr	r1, [pc, #608]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a326:	4313      	orrs	r3, r2
 800a328:	650b      	str	r3, [r1, #80]	; 0x50
 800a32a:	e001      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a32c:	7dfb      	ldrb	r3, [r7, #23]
 800a32e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d03d      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a340:	2b04      	cmp	r3, #4
 800a342:	d826      	bhi.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a344:	a201      	add	r2, pc, #4	; (adr r2, 800a34c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34a:	bf00      	nop
 800a34c:	0800a361 	.word	0x0800a361
 800a350:	0800a36f 	.word	0x0800a36f
 800a354:	0800a381 	.word	0x0800a381
 800a358:	0800a399 	.word	0x0800a399
 800a35c:	0800a399 	.word	0x0800a399
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a360:	4b89      	ldr	r3, [pc, #548]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a364:	4a88      	ldr	r2, [pc, #544]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a36a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a36c:	e015      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	3304      	adds	r3, #4
 800a372:	2100      	movs	r1, #0
 800a374:	4618      	mov	r0, r3
 800a376:	f001 f98b 	bl	800b690 <RCCEx_PLL2_Config>
 800a37a:	4603      	mov	r3, r0
 800a37c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a37e:	e00c      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	3324      	adds	r3, #36	; 0x24
 800a384:	2100      	movs	r1, #0
 800a386:	4618      	mov	r0, r3
 800a388:	f001 fa34 	bl	800b7f4 <RCCEx_PLL3_Config>
 800a38c:	4603      	mov	r3, r0
 800a38e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a390:	e003      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	75fb      	strb	r3, [r7, #23]
      break;
 800a396:	e000      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a39a:	7dfb      	ldrb	r3, [r7, #23]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d109      	bne.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a3a0:	4b79      	ldr	r3, [pc, #484]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3a4:	f023 0207 	bic.w	r2, r3, #7
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ac:	4976      	ldr	r1, [pc, #472]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	650b      	str	r3, [r1, #80]	; 0x50
 800a3b2:	e001      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b4:	7dfb      	ldrb	r3, [r7, #23]
 800a3b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d042      	beq.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3cc:	d02b      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a3ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d2:	d825      	bhi.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a3d4:	2bc0      	cmp	r3, #192	; 0xc0
 800a3d6:	d028      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a3d8:	2bc0      	cmp	r3, #192	; 0xc0
 800a3da:	d821      	bhi.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a3dc:	2b80      	cmp	r3, #128	; 0x80
 800a3de:	d016      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a3e0:	2b80      	cmp	r3, #128	; 0x80
 800a3e2:	d81d      	bhi.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a3e8:	2b40      	cmp	r3, #64	; 0x40
 800a3ea:	d007      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a3ec:	e018      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3ee:	4b66      	ldr	r3, [pc, #408]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f2:	4a65      	ldr	r2, [pc, #404]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a3fa:	e017      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3304      	adds	r3, #4
 800a400:	2100      	movs	r1, #0
 800a402:	4618      	mov	r0, r3
 800a404:	f001 f944 	bl	800b690 <RCCEx_PLL2_Config>
 800a408:	4603      	mov	r3, r0
 800a40a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a40c:	e00e      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	3324      	adds	r3, #36	; 0x24
 800a412:	2100      	movs	r1, #0
 800a414:	4618      	mov	r0, r3
 800a416:	f001 f9ed 	bl	800b7f4 <RCCEx_PLL3_Config>
 800a41a:	4603      	mov	r3, r0
 800a41c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a41e:	e005      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	75fb      	strb	r3, [r7, #23]
      break;
 800a424:	e002      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a426:	bf00      	nop
 800a428:	e000      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a42a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d109      	bne.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a432:	4b55      	ldr	r3, [pc, #340]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a436:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a43e:	4952      	ldr	r1, [pc, #328]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a440:	4313      	orrs	r3, r2
 800a442:	650b      	str	r3, [r1, #80]	; 0x50
 800a444:	e001      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a446:	7dfb      	ldrb	r3, [r7, #23]
 800a448:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a452:	2b00      	cmp	r3, #0
 800a454:	d049      	beq.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a45c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a460:	d030      	beq.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a462:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a466:	d82a      	bhi.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a468:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a46c:	d02c      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a46e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a472:	d824      	bhi.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a478:	d018      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a47a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a47e:	d81e      	bhi.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a480:	2b00      	cmp	r3, #0
 800a482:	d003      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a488:	d007      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a48a:	e018      	b.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a48c:	4b3e      	ldr	r3, [pc, #248]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a490:	4a3d      	ldr	r2, [pc, #244]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a496:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a498:	e017      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	3304      	adds	r3, #4
 800a49e:	2100      	movs	r1, #0
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f001 f8f5 	bl	800b690 <RCCEx_PLL2_Config>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a4aa:	e00e      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	3324      	adds	r3, #36	; 0x24
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f001 f99e 	bl	800b7f4 <RCCEx_PLL3_Config>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a4bc:	e005      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a4c2:	e002      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a4c4:	bf00      	nop
 800a4c6:	e000      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a4c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4ca:	7dfb      	ldrb	r3, [r7, #23]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10a      	bne.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a4d0:	4b2d      	ldr	r3, [pc, #180]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4d4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a4de:	492a      	ldr	r1, [pc, #168]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	658b      	str	r3, [r1, #88]	; 0x58
 800a4e4:	e001      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d04c      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a4fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a500:	d030      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a502:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a506:	d82a      	bhi.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a508:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a50c:	d02c      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800a50e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a512:	d824      	bhi.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a514:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a518:	d018      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a51a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a51e:	d81e      	bhi.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a528:	d007      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a52a:	e018      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a52c:	4b16      	ldr	r3, [pc, #88]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a530:	4a15      	ldr	r2, [pc, #84]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a536:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a538:	e017      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	3304      	adds	r3, #4
 800a53e:	2100      	movs	r1, #0
 800a540:	4618      	mov	r0, r3
 800a542:	f001 f8a5 	bl	800b690 <RCCEx_PLL2_Config>
 800a546:	4603      	mov	r3, r0
 800a548:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a54a:	e00e      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3324      	adds	r3, #36	; 0x24
 800a550:	2100      	movs	r1, #0
 800a552:	4618      	mov	r0, r3
 800a554:	f001 f94e 	bl	800b7f4 <RCCEx_PLL3_Config>
 800a558:	4603      	mov	r3, r0
 800a55a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a55c:	e005      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	75fb      	strb	r3, [r7, #23]
      break;
 800a562:	e002      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a564:	bf00      	nop
 800a566:	e000      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10d      	bne.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a570:	4b05      	ldr	r3, [pc, #20]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a574:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a57e:	4902      	ldr	r1, [pc, #8]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a580:	4313      	orrs	r3, r2
 800a582:	658b      	str	r3, [r1, #88]	; 0x58
 800a584:	e004      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a586:	bf00      	nop
 800a588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
 800a58e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d032      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5a0:	2b30      	cmp	r3, #48	; 0x30
 800a5a2:	d01c      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a5a4:	2b30      	cmp	r3, #48	; 0x30
 800a5a6:	d817      	bhi.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a5a8:	2b20      	cmp	r3, #32
 800a5aa:	d00c      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a5ac:	2b20      	cmp	r3, #32
 800a5ae:	d813      	bhi.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d016      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a5b4:	2b10      	cmp	r3, #16
 800a5b6:	d10f      	bne.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5b8:	4baf      	ldr	r3, [pc, #700]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	4aae      	ldr	r2, [pc, #696]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a5be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a5c4:	e00e      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	3304      	adds	r3, #4
 800a5ca:	2102      	movs	r1, #2
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f001 f85f 	bl	800b690 <RCCEx_PLL2_Config>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a5d6:	e005      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	75fb      	strb	r3, [r7, #23]
      break;
 800a5dc:	e002      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a5de:	bf00      	nop
 800a5e0:	e000      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a5e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5e4:	7dfb      	ldrb	r3, [r7, #23]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d109      	bne.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a5ea:	4ba3      	ldr	r3, [pc, #652]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a5ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5f6:	49a0      	ldr	r1, [pc, #640]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a5fc:	e001      	b.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d047      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a616:	d030      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a61c:	d82a      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a61e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a622:	d02c      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a624:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a628:	d824      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a62a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a62e:	d018      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a634:	d81e      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a636:	2b00      	cmp	r3, #0
 800a638:	d003      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a63a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a63e:	d007      	beq.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a640:	e018      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a642:	4b8d      	ldr	r3, [pc, #564]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a646:	4a8c      	ldr	r2, [pc, #560]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a64c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a64e:	e017      	b.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	3304      	adds	r3, #4
 800a654:	2100      	movs	r1, #0
 800a656:	4618      	mov	r0, r3
 800a658:	f001 f81a 	bl	800b690 <RCCEx_PLL2_Config>
 800a65c:	4603      	mov	r3, r0
 800a65e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a660:	e00e      	b.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	3324      	adds	r3, #36	; 0x24
 800a666:	2100      	movs	r1, #0
 800a668:	4618      	mov	r0, r3
 800a66a:	f001 f8c3 	bl	800b7f4 <RCCEx_PLL3_Config>
 800a66e:	4603      	mov	r3, r0
 800a670:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a672:	e005      	b.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	75fb      	strb	r3, [r7, #23]
      break;
 800a678:	e002      	b.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a67a:	bf00      	nop
 800a67c:	e000      	b.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a67e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a680:	7dfb      	ldrb	r3, [r7, #23]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d109      	bne.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a686:	4b7c      	ldr	r3, [pc, #496]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a68a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a692:	4979      	ldr	r1, [pc, #484]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a694:	4313      	orrs	r3, r2
 800a696:	650b      	str	r3, [r1, #80]	; 0x50
 800a698:	e001      	b.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a69a:	7dfb      	ldrb	r3, [r7, #23]
 800a69c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d049      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6b2:	d02e      	beq.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a6b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6b8:	d828      	bhi.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a6ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a6be:	d02a      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a6c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a6c4:	d822      	bhi.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a6c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a6ca:	d026      	beq.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a6cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a6d0:	d81c      	bhi.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a6d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6d6:	d010      	beq.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a6d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6dc:	d816      	bhi.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d01d      	beq.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a6e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6e6:	d111      	bne.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	3304      	adds	r3, #4
 800a6ec:	2101      	movs	r1, #1
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 ffce 	bl	800b690 <RCCEx_PLL2_Config>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a6f8:	e012      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	3324      	adds	r3, #36	; 0x24
 800a6fe:	2101      	movs	r1, #1
 800a700:	4618      	mov	r0, r3
 800a702:	f001 f877 	bl	800b7f4 <RCCEx_PLL3_Config>
 800a706:	4603      	mov	r3, r0
 800a708:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a70a:	e009      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	75fb      	strb	r3, [r7, #23]
      break;
 800a710:	e006      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a712:	bf00      	nop
 800a714:	e004      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a716:	bf00      	nop
 800a718:	e002      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a71a:	bf00      	nop
 800a71c:	e000      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a71e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a720:	7dfb      	ldrb	r3, [r7, #23]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d109      	bne.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a726:	4b54      	ldr	r3, [pc, #336]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a72a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a732:	4951      	ldr	r1, [pc, #324]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a734:	4313      	orrs	r3, r2
 800a736:	650b      	str	r3, [r1, #80]	; 0x50
 800a738:	e001      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
 800a73c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a746:	2b00      	cmp	r3, #0
 800a748:	d04b      	beq.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a754:	d02e      	beq.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a75a:	d828      	bhi.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a75c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a760:	d02a      	beq.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a766:	d822      	bhi.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a768:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a76c:	d026      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a76e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a772:	d81c      	bhi.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a778:	d010      	beq.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a77a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a77e:	d816      	bhi.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a780:	2b00      	cmp	r3, #0
 800a782:	d01d      	beq.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a784:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a788:	d111      	bne.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	3304      	adds	r3, #4
 800a78e:	2101      	movs	r1, #1
 800a790:	4618      	mov	r0, r3
 800a792:	f000 ff7d 	bl	800b690 <RCCEx_PLL2_Config>
 800a796:	4603      	mov	r3, r0
 800a798:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a79a:	e012      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	3324      	adds	r3, #36	; 0x24
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f001 f826 	bl	800b7f4 <RCCEx_PLL3_Config>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a7ac:	e009      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	75fb      	strb	r3, [r7, #23]
      break;
 800a7b2:	e006      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a7b4:	bf00      	nop
 800a7b6:	e004      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a7b8:	bf00      	nop
 800a7ba:	e002      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a7bc:	bf00      	nop
 800a7be:	e000      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a7c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7c2:	7dfb      	ldrb	r3, [r7, #23]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10a      	bne.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a7c8:	4b2b      	ldr	r3, [pc, #172]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a7ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7cc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a7d6:	4928      	ldr	r1, [pc, #160]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	658b      	str	r3, [r1, #88]	; 0x58
 800a7dc:	e001      	b.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d02f      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7f6:	d00e      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a7f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7fc:	d814      	bhi.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d015      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a806:	d10f      	bne.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a808:	4b1b      	ldr	r3, [pc, #108]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80c:	4a1a      	ldr	r2, [pc, #104]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a80e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a812:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a814:	e00c      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	3304      	adds	r3, #4
 800a81a:	2101      	movs	r1, #1
 800a81c:	4618      	mov	r0, r3
 800a81e:	f000 ff37 	bl	800b690 <RCCEx_PLL2_Config>
 800a822:	4603      	mov	r3, r0
 800a824:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a826:	e003      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	75fb      	strb	r3, [r7, #23]
      break;
 800a82c:	e000      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a82e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d109      	bne.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a836:	4b10      	ldr	r3, [pc, #64]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a83a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a842:	490d      	ldr	r1, [pc, #52]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a844:	4313      	orrs	r3, r2
 800a846:	650b      	str	r3, [r1, #80]	; 0x50
 800a848:	e001      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a84a:	7dfb      	ldrb	r3, [r7, #23]
 800a84c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d033      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a85e:	2b03      	cmp	r3, #3
 800a860:	d81c      	bhi.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a862:	a201      	add	r2, pc, #4	; (adr r2, 800a868 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a868:	0800a8a3 	.word	0x0800a8a3
 800a86c:	0800a87d 	.word	0x0800a87d
 800a870:	0800a88b 	.word	0x0800a88b
 800a874:	0800a8a3 	.word	0x0800a8a3
 800a878:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a87c:	4bb8      	ldr	r3, [pc, #736]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a880:	4ab7      	ldr	r2, [pc, #732]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a888:	e00c      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	3304      	adds	r3, #4
 800a88e:	2102      	movs	r1, #2
 800a890:	4618      	mov	r0, r3
 800a892:	f000 fefd 	bl	800b690 <RCCEx_PLL2_Config>
 800a896:	4603      	mov	r3, r0
 800a898:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a89a:	e003      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	75fb      	strb	r3, [r7, #23]
      break;
 800a8a0:	e000      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a8a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8a4:	7dfb      	ldrb	r3, [r7, #23]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d109      	bne.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a8aa:	4bad      	ldr	r3, [pc, #692]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a8ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ae:	f023 0203 	bic.w	r2, r3, #3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8b6:	49aa      	ldr	r1, [pc, #680]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a8bc:	e001      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8be:	7dfb      	ldrb	r3, [r7, #23]
 800a8c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 8086 	beq.w	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a8d0:	4ba4      	ldr	r3, [pc, #656]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4aa3      	ldr	r2, [pc, #652]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a8d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a8dc:	f7fb f974 	bl	8005bc8 <HAL_GetTick>
 800a8e0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8e2:	e009      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8e4:	f7fb f970 	bl	8005bc8 <HAL_GetTick>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	2b64      	cmp	r3, #100	; 0x64
 800a8f0:	d902      	bls.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	75fb      	strb	r3, [r7, #23]
        break;
 800a8f6:	e005      	b.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8f8:	4b9a      	ldr	r3, [pc, #616]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a900:	2b00      	cmp	r3, #0
 800a902:	d0ef      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a904:	7dfb      	ldrb	r3, [r7, #23]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d166      	bne.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a90a:	4b95      	ldr	r3, [pc, #596]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a90c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a914:	4053      	eors	r3, r2
 800a916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d013      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a91e:	4b90      	ldr	r3, [pc, #576]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a926:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a928:	4b8d      	ldr	r3, [pc, #564]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a92c:	4a8c      	ldr	r2, [pc, #560]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a92e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a932:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a934:	4b8a      	ldr	r3, [pc, #552]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a938:	4a89      	ldr	r2, [pc, #548]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a93a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a93e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a940:	4a87      	ldr	r2, [pc, #540]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a94c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a950:	d115      	bne.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a952:	f7fb f939 	bl	8005bc8 <HAL_GetTick>
 800a956:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a958:	e00b      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a95a:	f7fb f935 	bl	8005bc8 <HAL_GetTick>
 800a95e:	4602      	mov	r2, r0
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	f241 3288 	movw	r2, #5000	; 0x1388
 800a968:	4293      	cmp	r3, r2
 800a96a:	d902      	bls.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a96c:	2303      	movs	r3, #3
 800a96e:	75fb      	strb	r3, [r7, #23]
            break;
 800a970:	e005      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a972:	4b7b      	ldr	r3, [pc, #492]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a976:	f003 0302 	and.w	r3, r3, #2
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0ed      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a97e:	7dfb      	ldrb	r3, [r7, #23]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d126      	bne.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a98a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a98e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a992:	d10d      	bne.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a994:	4b72      	ldr	r3, [pc, #456]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9a2:	0919      	lsrs	r1, r3, #4
 800a9a4:	4b70      	ldr	r3, [pc, #448]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a9a6:	400b      	ands	r3, r1
 800a9a8:	496d      	ldr	r1, [pc, #436]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	610b      	str	r3, [r1, #16]
 800a9ae:	e005      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a9b0:	4b6b      	ldr	r3, [pc, #428]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	4a6a      	ldr	r2, [pc, #424]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a9ba:	6113      	str	r3, [r2, #16]
 800a9bc:	4b68      	ldr	r3, [pc, #416]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a9ca:	4965      	ldr	r1, [pc, #404]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	670b      	str	r3, [r1, #112]	; 0x70
 800a9d0:	e004      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a9d2:	7dfb      	ldrb	r3, [r7, #23]
 800a9d4:	75bb      	strb	r3, [r7, #22]
 800a9d6:	e001      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d8:	7dfb      	ldrb	r3, [r7, #23]
 800a9da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d07e      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9ec:	2b28      	cmp	r3, #40	; 0x28
 800a9ee:	d867      	bhi.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a9f0:	a201      	add	r2, pc, #4	; (adr r2, 800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f6:	bf00      	nop
 800a9f8:	0800aac7 	.word	0x0800aac7
 800a9fc:	0800aac1 	.word	0x0800aac1
 800aa00:	0800aac1 	.word	0x0800aac1
 800aa04:	0800aac1 	.word	0x0800aac1
 800aa08:	0800aac1 	.word	0x0800aac1
 800aa0c:	0800aac1 	.word	0x0800aac1
 800aa10:	0800aac1 	.word	0x0800aac1
 800aa14:	0800aac1 	.word	0x0800aac1
 800aa18:	0800aa9d 	.word	0x0800aa9d
 800aa1c:	0800aac1 	.word	0x0800aac1
 800aa20:	0800aac1 	.word	0x0800aac1
 800aa24:	0800aac1 	.word	0x0800aac1
 800aa28:	0800aac1 	.word	0x0800aac1
 800aa2c:	0800aac1 	.word	0x0800aac1
 800aa30:	0800aac1 	.word	0x0800aac1
 800aa34:	0800aac1 	.word	0x0800aac1
 800aa38:	0800aaaf 	.word	0x0800aaaf
 800aa3c:	0800aac1 	.word	0x0800aac1
 800aa40:	0800aac1 	.word	0x0800aac1
 800aa44:	0800aac1 	.word	0x0800aac1
 800aa48:	0800aac1 	.word	0x0800aac1
 800aa4c:	0800aac1 	.word	0x0800aac1
 800aa50:	0800aac1 	.word	0x0800aac1
 800aa54:	0800aac1 	.word	0x0800aac1
 800aa58:	0800aac7 	.word	0x0800aac7
 800aa5c:	0800aac1 	.word	0x0800aac1
 800aa60:	0800aac1 	.word	0x0800aac1
 800aa64:	0800aac1 	.word	0x0800aac1
 800aa68:	0800aac1 	.word	0x0800aac1
 800aa6c:	0800aac1 	.word	0x0800aac1
 800aa70:	0800aac1 	.word	0x0800aac1
 800aa74:	0800aac1 	.word	0x0800aac1
 800aa78:	0800aac7 	.word	0x0800aac7
 800aa7c:	0800aac1 	.word	0x0800aac1
 800aa80:	0800aac1 	.word	0x0800aac1
 800aa84:	0800aac1 	.word	0x0800aac1
 800aa88:	0800aac1 	.word	0x0800aac1
 800aa8c:	0800aac1 	.word	0x0800aac1
 800aa90:	0800aac1 	.word	0x0800aac1
 800aa94:	0800aac1 	.word	0x0800aac1
 800aa98:	0800aac7 	.word	0x0800aac7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	2101      	movs	r1, #1
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f000 fdf4 	bl	800b690 <RCCEx_PLL2_Config>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800aaac:	e00c      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	3324      	adds	r3, #36	; 0x24
 800aab2:	2101      	movs	r1, #1
 800aab4:	4618      	mov	r0, r3
 800aab6:	f000 fe9d 	bl	800b7f4 <RCCEx_PLL3_Config>
 800aaba:	4603      	mov	r3, r0
 800aabc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800aabe:	e003      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	75fb      	strb	r3, [r7, #23]
      break;
 800aac4:	e000      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800aac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d109      	bne.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aace:	4b24      	ldr	r3, [pc, #144]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aad2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aada:	4921      	ldr	r1, [pc, #132]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aadc:	4313      	orrs	r3, r2
 800aade:	654b      	str	r3, [r1, #84]	; 0x54
 800aae0:	e001      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae2:	7dfb      	ldrb	r3, [r7, #23]
 800aae4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d03e      	beq.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf6:	2b05      	cmp	r3, #5
 800aaf8:	d820      	bhi.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800aafa:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab00:	0800ab43 	.word	0x0800ab43
 800ab04:	0800ab19 	.word	0x0800ab19
 800ab08:	0800ab2b 	.word	0x0800ab2b
 800ab0c:	0800ab43 	.word	0x0800ab43
 800ab10:	0800ab43 	.word	0x0800ab43
 800ab14:	0800ab43 	.word	0x0800ab43
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 fdb6 	bl	800b690 <RCCEx_PLL2_Config>
 800ab24:	4603      	mov	r3, r0
 800ab26:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ab28:	e00c      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	3324      	adds	r3, #36	; 0x24
 800ab2e:	2101      	movs	r1, #1
 800ab30:	4618      	mov	r0, r3
 800ab32:	f000 fe5f 	bl	800b7f4 <RCCEx_PLL3_Config>
 800ab36:	4603      	mov	r3, r0
 800ab38:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ab3a:	e003      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab40:	e000      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800ab42:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab44:	7dfb      	ldrb	r3, [r7, #23]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d110      	bne.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ab4a:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ab4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab4e:	f023 0207 	bic.w	r2, r3, #7
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab56:	4902      	ldr	r1, [pc, #8]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	654b      	str	r3, [r1, #84]	; 0x54
 800ab5c:	e008      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800ab5e:	bf00      	nop
 800ab60:	58024400 	.word	0x58024400
 800ab64:	58024800 	.word	0x58024800
 800ab68:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 0304 	and.w	r3, r3, #4
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d039      	beq.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab82:	2b05      	cmp	r3, #5
 800ab84:	d820      	bhi.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800ab86:	a201      	add	r2, pc, #4	; (adr r2, 800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800ab88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8c:	0800abcf 	.word	0x0800abcf
 800ab90:	0800aba5 	.word	0x0800aba5
 800ab94:	0800abb7 	.word	0x0800abb7
 800ab98:	0800abcf 	.word	0x0800abcf
 800ab9c:	0800abcf 	.word	0x0800abcf
 800aba0:	0800abcf 	.word	0x0800abcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3304      	adds	r3, #4
 800aba8:	2101      	movs	r1, #1
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 fd70 	bl	800b690 <RCCEx_PLL2_Config>
 800abb0:	4603      	mov	r3, r0
 800abb2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800abb4:	e00c      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	3324      	adds	r3, #36	; 0x24
 800abba:	2101      	movs	r1, #1
 800abbc:	4618      	mov	r0, r3
 800abbe:	f000 fe19 	bl	800b7f4 <RCCEx_PLL3_Config>
 800abc2:	4603      	mov	r3, r0
 800abc4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800abc6:	e003      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	75fb      	strb	r3, [r7, #23]
      break;
 800abcc:	e000      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800abce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10a      	bne.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800abd6:	4bb7      	ldr	r3, [pc, #732]	; (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800abd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abda:	f023 0207 	bic.w	r2, r3, #7
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abe4:	49b3      	ldr	r1, [pc, #716]	; (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800abe6:	4313      	orrs	r3, r2
 800abe8:	658b      	str	r3, [r1, #88]	; 0x58
 800abea:	e001      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abec:	7dfb      	ldrb	r3, [r7, #23]
 800abee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0320 	and.w	r3, r3, #32
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d04b      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac06:	d02e      	beq.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800ac08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac0c:	d828      	bhi.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ac0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac12:	d02a      	beq.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800ac14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac18:	d822      	bhi.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ac1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac1e:	d026      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800ac20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac24:	d81c      	bhi.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ac26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac2a:	d010      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800ac2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac30:	d816      	bhi.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d01d      	beq.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800ac36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac3a:	d111      	bne.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	3304      	adds	r3, #4
 800ac40:	2100      	movs	r1, #0
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 fd24 	bl	800b690 <RCCEx_PLL2_Config>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ac4c:	e012      	b.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	3324      	adds	r3, #36	; 0x24
 800ac52:	2102      	movs	r1, #2
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 fdcd 	bl	800b7f4 <RCCEx_PLL3_Config>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ac5e:	e009      	b.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	75fb      	strb	r3, [r7, #23]
      break;
 800ac64:	e006      	b.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ac66:	bf00      	nop
 800ac68:	e004      	b.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ac6a:	bf00      	nop
 800ac6c:	e002      	b.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ac6e:	bf00      	nop
 800ac70:	e000      	b.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ac72:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10a      	bne.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac7a:	4b8e      	ldr	r3, [pc, #568]	; (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac7e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac88:	498a      	ldr	r1, [pc, #552]	; (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	654b      	str	r3, [r1, #84]	; 0x54
 800ac8e:	e001      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac90:	7dfb      	ldrb	r3, [r7, #23]
 800ac92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d04b      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aca6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800acaa:	d02e      	beq.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800acac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800acb0:	d828      	bhi.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800acb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acb6:	d02a      	beq.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800acb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acbc:	d822      	bhi.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800acbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800acc2:	d026      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800acc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800acc8:	d81c      	bhi.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800acca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acce:	d010      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800acd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acd4:	d816      	bhi.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d01d      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800acda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acde:	d111      	bne.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	3304      	adds	r3, #4
 800ace4:	2100      	movs	r1, #0
 800ace6:	4618      	mov	r0, r3
 800ace8:	f000 fcd2 	bl	800b690 <RCCEx_PLL2_Config>
 800acec:	4603      	mov	r3, r0
 800acee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800acf0:	e012      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	3324      	adds	r3, #36	; 0x24
 800acf6:	2102      	movs	r1, #2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 fd7b 	bl	800b7f4 <RCCEx_PLL3_Config>
 800acfe:	4603      	mov	r3, r0
 800ad00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ad02:	e009      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	75fb      	strb	r3, [r7, #23]
      break;
 800ad08:	e006      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ad0a:	bf00      	nop
 800ad0c:	e004      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ad0e:	bf00      	nop
 800ad10:	e002      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ad12:	bf00      	nop
 800ad14:	e000      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ad16:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad18:	7dfb      	ldrb	r3, [r7, #23]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d10a      	bne.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ad1e:	4b65      	ldr	r3, [pc, #404]	; (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ad20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad2c:	4961      	ldr	r1, [pc, #388]	; (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	658b      	str	r3, [r1, #88]	; 0x58
 800ad32:	e001      	b.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad34:	7dfb      	ldrb	r3, [r7, #23]
 800ad36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d04b      	beq.n	800addc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ad4e:	d02e      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800ad50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ad54:	d828      	bhi.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ad56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad5a:	d02a      	beq.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800ad5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad60:	d822      	bhi.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ad62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ad66:	d026      	beq.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800ad68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ad6c:	d81c      	bhi.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ad6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad72:	d010      	beq.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800ad74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad78:	d816      	bhi.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d01d      	beq.n	800adba <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800ad7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad82:	d111      	bne.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3304      	adds	r3, #4
 800ad88:	2100      	movs	r1, #0
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 fc80 	bl	800b690 <RCCEx_PLL2_Config>
 800ad90:	4603      	mov	r3, r0
 800ad92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ad94:	e012      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	3324      	adds	r3, #36	; 0x24
 800ad9a:	2102      	movs	r1, #2
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 fd29 	bl	800b7f4 <RCCEx_PLL3_Config>
 800ada2:	4603      	mov	r3, r0
 800ada4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ada6:	e009      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	75fb      	strb	r3, [r7, #23]
      break;
 800adac:	e006      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800adae:	bf00      	nop
 800adb0:	e004      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800adb2:	bf00      	nop
 800adb4:	e002      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800adb6:	bf00      	nop
 800adb8:	e000      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800adba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adbc:	7dfb      	ldrb	r3, [r7, #23]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10a      	bne.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800adc2:	4b3c      	ldr	r3, [pc, #240]	; (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800adc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800add0:	4938      	ldr	r1, [pc, #224]	; (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800add2:	4313      	orrs	r3, r2
 800add4:	658b      	str	r3, [r1, #88]	; 0x58
 800add6:	e001      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add8:	7dfb      	ldrb	r3, [r7, #23]
 800adda:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0308 	and.w	r3, r3, #8
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d01a      	beq.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adf2:	d10a      	bne.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	3324      	adds	r3, #36	; 0x24
 800adf8:	2102      	movs	r1, #2
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 fcfa 	bl	800b7f4 <RCCEx_PLL3_Config>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d001      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ae0a:	4b2a      	ldr	r3, [pc, #168]	; (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae18:	4926      	ldr	r1, [pc, #152]	; (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f003 0310 	and.w	r3, r3, #16
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d01a      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae34:	d10a      	bne.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3324      	adds	r3, #36	; 0x24
 800ae3a:	2102      	movs	r1, #2
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 fcd9 	bl	800b7f4 <RCCEx_PLL3_Config>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d001      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ae4c:	4b19      	ldr	r3, [pc, #100]	; (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae5a:	4916      	ldr	r1, [pc, #88]	; (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d036      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ae72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae76:	d01f      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ae78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae7c:	d817      	bhi.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800ae82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae86:	d009      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800ae88:	e011      	b.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	2100      	movs	r1, #0
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 fbfd 	bl	800b690 <RCCEx_PLL2_Config>
 800ae96:	4603      	mov	r3, r0
 800ae98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ae9a:	e00e      	b.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3324      	adds	r3, #36	; 0x24
 800aea0:	2102      	movs	r1, #2
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 fca6 	bl	800b7f4 <RCCEx_PLL3_Config>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aeac:	e005      	b.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	75fb      	strb	r3, [r7, #23]
      break;
 800aeb2:	e002      	b.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800aeb4:	58024400 	.word	0x58024400
      break;
 800aeb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10a      	bne.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aec0:	4b93      	ldr	r3, [pc, #588]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aec4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aece:	4990      	ldr	r1, [pc, #576]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aed0:	4313      	orrs	r3, r2
 800aed2:	658b      	str	r3, [r1, #88]	; 0x58
 800aed4:	e001      	b.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
 800aed8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d033      	beq.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aeec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aef0:	d01c      	beq.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800aef2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aef6:	d816      	bhi.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800aef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aefc:	d003      	beq.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800aefe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af02:	d007      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800af04:	e00f      	b.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af06:	4b82      	ldr	r3, [pc, #520]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	4a81      	ldr	r2, [pc, #516]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800af12:	e00c      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	3324      	adds	r3, #36	; 0x24
 800af18:	2101      	movs	r1, #1
 800af1a:	4618      	mov	r0, r3
 800af1c:	f000 fc6a 	bl	800b7f4 <RCCEx_PLL3_Config>
 800af20:	4603      	mov	r3, r0
 800af22:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800af24:	e003      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	75fb      	strb	r3, [r7, #23]
      break;
 800af2a:	e000      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800af2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af2e:	7dfb      	ldrb	r3, [r7, #23]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10a      	bne.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800af34:	4b76      	ldr	r3, [pc, #472]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af42:	4973      	ldr	r1, [pc, #460]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af44:	4313      	orrs	r3, r2
 800af46:	654b      	str	r3, [r1, #84]	; 0x54
 800af48:	e001      	b.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af4a:	7dfb      	ldrb	r3, [r7, #23]
 800af4c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d029      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d003      	beq.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800af62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af66:	d007      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800af68:	e00f      	b.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af6a:	4b69      	ldr	r3, [pc, #420]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6e:	4a68      	ldr	r2, [pc, #416]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800af76:	e00b      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3304      	adds	r3, #4
 800af7c:	2102      	movs	r1, #2
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 fb86 	bl	800b690 <RCCEx_PLL2_Config>
 800af84:	4603      	mov	r3, r0
 800af86:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800af88:	e002      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	75fb      	strb	r3, [r7, #23]
      break;
 800af8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af90:	7dfb      	ldrb	r3, [r7, #23]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d109      	bne.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800af96:	4b5e      	ldr	r3, [pc, #376]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afa2:	495b      	ldr	r1, [pc, #364]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afa4:	4313      	orrs	r3, r2
 800afa6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800afa8:	e001      	b.n	800afae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afaa:	7dfb      	ldrb	r3, [r7, #23]
 800afac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00a      	beq.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	3324      	adds	r3, #36	; 0x24
 800afbe:	2102      	movs	r1, #2
 800afc0:	4618      	mov	r0, r3
 800afc2:	f000 fc17 	bl	800b7f4 <RCCEx_PLL3_Config>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d030      	beq.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afe4:	d017      	beq.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800afe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afea:	d811      	bhi.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800afec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aff0:	d013      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800aff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aff6:	d80b      	bhi.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d010      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800affc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b000:	d106      	bne.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b002:	4b43      	ldr	r3, [pc, #268]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b006:	4a42      	ldr	r2, [pc, #264]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b00c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b00e:	e007      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	75fb      	strb	r3, [r7, #23]
      break;
 800b014:	e004      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b016:	bf00      	nop
 800b018:	e002      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b01a:	bf00      	nop
 800b01c:	e000      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b01e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b020:	7dfb      	ldrb	r3, [r7, #23]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d109      	bne.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b026:	4b3a      	ldr	r3, [pc, #232]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b02a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b032:	4937      	ldr	r1, [pc, #220]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b034:	4313      	orrs	r3, r2
 800b036:	654b      	str	r3, [r1, #84]	; 0x54
 800b038:	e001      	b.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b03a:	7dfb      	ldrb	r3, [r7, #23]
 800b03c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b046:	2b00      	cmp	r3, #0
 800b048:	d008      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b04a:	4b31      	ldr	r3, [pc, #196]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b04e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b056:	492e      	ldr	r1, [pc, #184]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b058:	4313      	orrs	r3, r2
 800b05a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d009      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b068:	4b29      	ldr	r3, [pc, #164]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b076:	4926      	ldr	r1, [pc, #152]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b078:	4313      	orrs	r3, r2
 800b07a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d008      	beq.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b088:	4b21      	ldr	r3, [pc, #132]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b08a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b08c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b094:	491e      	ldr	r1, [pc, #120]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b096:	4313      	orrs	r3, r2
 800b098:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00d      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b0a6:	4b1a      	ldr	r3, [pc, #104]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	4a19      	ldr	r2, [pc, #100]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b0b0:	6113      	str	r3, [r2, #16]
 800b0b2:	4b17      	ldr	r3, [pc, #92]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0b4:	691a      	ldr	r2, [r3, #16]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b0bc:	4914      	ldr	r1, [pc, #80]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	da08      	bge.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b0ca:	4b11      	ldr	r3, [pc, #68]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0d6:	490e      	ldr	r1, [pc, #56]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d009      	beq.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b0e8:	4b09      	ldr	r3, [pc, #36]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f6:	4906      	ldr	r1, [pc, #24]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b0fc:	7dbb      	ldrb	r3, [r7, #22]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	e000      	b.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3718      	adds	r7, #24
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	58024400 	.word	0x58024400

0800b114 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b118:	f7ff f860 	bl	800a1dc <HAL_RCC_GetHCLKFreq>
 800b11c:	4602      	mov	r2, r0
 800b11e:	4b06      	ldr	r3, [pc, #24]	; (800b138 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	091b      	lsrs	r3, r3, #4
 800b124:	f003 0307 	and.w	r3, r3, #7
 800b128:	4904      	ldr	r1, [pc, #16]	; (800b13c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b12a:	5ccb      	ldrb	r3, [r1, r3]
 800b12c:	f003 031f 	and.w	r3, r3, #31
 800b130:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b134:	4618      	mov	r0, r3
 800b136:	bd80      	pop	{r7, pc}
 800b138:	58024400 	.word	0x58024400
 800b13c:	08012888 	.word	0x08012888

0800b140 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b140:	b480      	push	{r7}
 800b142:	b089      	sub	sp, #36	; 0x24
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b148:	4ba1      	ldr	r3, [pc, #644]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14c:	f003 0303 	and.w	r3, r3, #3
 800b150:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b152:	4b9f      	ldr	r3, [pc, #636]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b156:	0b1b      	lsrs	r3, r3, #12
 800b158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b15c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b15e:	4b9c      	ldr	r3, [pc, #624]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b162:	091b      	lsrs	r3, r3, #4
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b16a:	4b99      	ldr	r3, [pc, #612]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b16e:	08db      	lsrs	r3, r3, #3
 800b170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	fb02 f303 	mul.w	r3, r2, r3
 800b17a:	ee07 3a90 	vmov	s15, r3
 800b17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b182:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 8111 	beq.w	800b3b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	2b02      	cmp	r3, #2
 800b192:	f000 8083 	beq.w	800b29c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	2b02      	cmp	r3, #2
 800b19a:	f200 80a1 	bhi.w	800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d003      	beq.n	800b1ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d056      	beq.n	800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b1aa:	e099      	b.n	800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1ac:	4b88      	ldr	r3, [pc, #544]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0320 	and.w	r3, r3, #32
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d02d      	beq.n	800b214 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b1b8:	4b85      	ldr	r3, [pc, #532]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	08db      	lsrs	r3, r3, #3
 800b1be:	f003 0303 	and.w	r3, r3, #3
 800b1c2:	4a84      	ldr	r2, [pc, #528]	; (800b3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b1c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1c8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	ee07 3a90 	vmov	s15, r3
 800b1d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	ee07 3a90 	vmov	s15, r3
 800b1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1e2:	4b7b      	ldr	r3, [pc, #492]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ea:	ee07 3a90 	vmov	s15, r3
 800b1ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b20a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b20e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b212:	e087      	b.n	800b324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	ee07 3a90 	vmov	s15, r3
 800b21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b21e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b3dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b226:	4b6a      	ldr	r3, [pc, #424]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b22e:	ee07 3a90 	vmov	s15, r3
 800b232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b236:	ed97 6a03 	vldr	s12, [r7, #12]
 800b23a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b23e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b24a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b252:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b256:	e065      	b.n	800b324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	ee07 3a90 	vmov	s15, r3
 800b25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b262:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b26a:	4b59      	ldr	r3, [pc, #356]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b272:	ee07 3a90 	vmov	s15, r3
 800b276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b27a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b27e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b28a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b29a:	e043      	b.n	800b324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ae:	4b48      	ldr	r3, [pc, #288]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2b6:	ee07 3a90 	vmov	s15, r3
 800b2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2de:	e021      	b.n	800b324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	ee07 3a90 	vmov	s15, r3
 800b2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2f2:	4b37      	ldr	r3, [pc, #220]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2fa:	ee07 3a90 	vmov	s15, r3
 800b2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b302:	ed97 6a03 	vldr	s12, [r7, #12]
 800b306:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b30a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b30e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b31e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b322:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b324:	4b2a      	ldr	r3, [pc, #168]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b328:	0a5b      	lsrs	r3, r3, #9
 800b32a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b32e:	ee07 3a90 	vmov	s15, r3
 800b332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b33a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b33e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b34a:	ee17 2a90 	vmov	r2, s15
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b352:	4b1f      	ldr	r3, [pc, #124]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b356:	0c1b      	lsrs	r3, r3, #16
 800b358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b35c:	ee07 3a90 	vmov	s15, r3
 800b360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b368:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b36c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b378:	ee17 2a90 	vmov	r2, s15
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b380:	4b13      	ldr	r3, [pc, #76]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b384:	0e1b      	lsrs	r3, r3, #24
 800b386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b38a:	ee07 3a90 	vmov	s15, r3
 800b38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b39a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b39e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3a6:	ee17 2a90 	vmov	r2, s15
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b3ae:	e008      	b.n	800b3c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	609a      	str	r2, [r3, #8]
}
 800b3c2:	bf00      	nop
 800b3c4:	3724      	adds	r7, #36	; 0x24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	58024400 	.word	0x58024400
 800b3d4:	03d09000 	.word	0x03d09000
 800b3d8:	46000000 	.word	0x46000000
 800b3dc:	4c742400 	.word	0x4c742400
 800b3e0:	4a742400 	.word	0x4a742400
 800b3e4:	4c371b00 	.word	0x4c371b00

0800b3e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b089      	sub	sp, #36	; 0x24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3f0:	4ba1      	ldr	r3, [pc, #644]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f4:	f003 0303 	and.w	r3, r3, #3
 800b3f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b3fa:	4b9f      	ldr	r3, [pc, #636]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fe:	0d1b      	lsrs	r3, r3, #20
 800b400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b404:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b406:	4b9c      	ldr	r3, [pc, #624]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40a:	0a1b      	lsrs	r3, r3, #8
 800b40c:	f003 0301 	and.w	r3, r3, #1
 800b410:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b412:	4b99      	ldr	r3, [pc, #612]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b416:	08db      	lsrs	r3, r3, #3
 800b418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b41c:	693a      	ldr	r2, [r7, #16]
 800b41e:	fb02 f303 	mul.w	r3, r2, r3
 800b422:	ee07 3a90 	vmov	s15, r3
 800b426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b42a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	2b00      	cmp	r3, #0
 800b432:	f000 8111 	beq.w	800b658 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	2b02      	cmp	r3, #2
 800b43a:	f000 8083 	beq.w	800b544 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	2b02      	cmp	r3, #2
 800b442:	f200 80a1 	bhi.w	800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d003      	beq.n	800b454 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d056      	beq.n	800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b452:	e099      	b.n	800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b454:	4b88      	ldr	r3, [pc, #544]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0320 	and.w	r3, r3, #32
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d02d      	beq.n	800b4bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b460:	4b85      	ldr	r3, [pc, #532]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	08db      	lsrs	r3, r3, #3
 800b466:	f003 0303 	and.w	r3, r3, #3
 800b46a:	4a84      	ldr	r2, [pc, #528]	; (800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b46c:	fa22 f303 	lsr.w	r3, r2, r3
 800b470:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	ee07 3a90 	vmov	s15, r3
 800b478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	ee07 3a90 	vmov	s15, r3
 800b482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b48a:	4b7b      	ldr	r3, [pc, #492]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b492:	ee07 3a90 	vmov	s15, r3
 800b496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b49a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b49e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b4ba:	e087      	b.n	800b5cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	ee07 3a90 	vmov	s15, r3
 800b4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b684 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ce:	4b6a      	ldr	r3, [pc, #424]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4d6:	ee07 3a90 	vmov	s15, r3
 800b4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4de:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4fe:	e065      	b.n	800b5cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	ee07 3a90 	vmov	s15, r3
 800b506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b50a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b50e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b512:	4b59      	ldr	r3, [pc, #356]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b51a:	ee07 3a90 	vmov	s15, r3
 800b51e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b522:	ed97 6a03 	vldr	s12, [r7, #12]
 800b526:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b52a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b52e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b53e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b542:	e043      	b.n	800b5cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	ee07 3a90 	vmov	s15, r3
 800b54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b54e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b68c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b556:	4b48      	ldr	r3, [pc, #288]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b55e:	ee07 3a90 	vmov	s15, r3
 800b562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b566:	ed97 6a03 	vldr	s12, [r7, #12]
 800b56a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b582:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b586:	e021      	b.n	800b5cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	ee07 3a90 	vmov	s15, r3
 800b58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b592:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b59a:	4b37      	ldr	r3, [pc, #220]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5a2:	ee07 3a90 	vmov	s15, r3
 800b5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b5cc:	4b2a      	ldr	r3, [pc, #168]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d0:	0a5b      	lsrs	r3, r3, #9
 800b5d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5d6:	ee07 3a90 	vmov	s15, r3
 800b5da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5f2:	ee17 2a90 	vmov	r2, s15
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b5fa:	4b1f      	ldr	r3, [pc, #124]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fe:	0c1b      	lsrs	r3, r3, #16
 800b600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b604:	ee07 3a90 	vmov	s15, r3
 800b608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b60c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b610:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b614:	edd7 6a07 	vldr	s13, [r7, #28]
 800b618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b61c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b620:	ee17 2a90 	vmov	r2, s15
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b628:	4b13      	ldr	r3, [pc, #76]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b62c:	0e1b      	lsrs	r3, r3, #24
 800b62e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b632:	ee07 3a90 	vmov	s15, r3
 800b636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b63a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b63e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b642:	edd7 6a07 	vldr	s13, [r7, #28]
 800b646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b64a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b64e:	ee17 2a90 	vmov	r2, s15
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b656:	e008      	b.n	800b66a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	609a      	str	r2, [r3, #8]
}
 800b66a:	bf00      	nop
 800b66c:	3724      	adds	r7, #36	; 0x24
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	58024400 	.word	0x58024400
 800b67c:	03d09000 	.word	0x03d09000
 800b680:	46000000 	.word	0x46000000
 800b684:	4c742400 	.word	0x4c742400
 800b688:	4a742400 	.word	0x4a742400
 800b68c:	4c371b00 	.word	0x4c371b00

0800b690 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b69a:	2300      	movs	r3, #0
 800b69c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b69e:	4b53      	ldr	r3, [pc, #332]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a2:	f003 0303 	and.w	r3, r3, #3
 800b6a6:	2b03      	cmp	r3, #3
 800b6a8:	d101      	bne.n	800b6ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e099      	b.n	800b7e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b6ae:	4b4f      	ldr	r3, [pc, #316]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a4e      	ldr	r2, [pc, #312]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b6b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b6b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6ba:	f7fa fa85 	bl	8005bc8 <HAL_GetTick>
 800b6be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b6c0:	e008      	b.n	800b6d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b6c2:	f7fa fa81 	bl	8005bc8 <HAL_GetTick>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	1ad3      	subs	r3, r2, r3
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	d901      	bls.n	800b6d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b6d0:	2303      	movs	r3, #3
 800b6d2:	e086      	b.n	800b7e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b6d4:	4b45      	ldr	r3, [pc, #276]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1f0      	bne.n	800b6c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b6e0:	4b42      	ldr	r3, [pc, #264]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	031b      	lsls	r3, r3, #12
 800b6ee:	493f      	ldr	r1, [pc, #252]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	628b      	str	r3, [r1, #40]	; 0x28
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	3b01      	subs	r3, #1
 800b704:	025b      	lsls	r3, r3, #9
 800b706:	b29b      	uxth	r3, r3
 800b708:	431a      	orrs	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	3b01      	subs	r3, #1
 800b710:	041b      	lsls	r3, r3, #16
 800b712:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b716:	431a      	orrs	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	3b01      	subs	r3, #1
 800b71e:	061b      	lsls	r3, r3, #24
 800b720:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b724:	4931      	ldr	r1, [pc, #196]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b726:	4313      	orrs	r3, r2
 800b728:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b72a:	4b30      	ldr	r3, [pc, #192]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	492d      	ldr	r1, [pc, #180]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b738:	4313      	orrs	r3, r2
 800b73a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b73c:	4b2b      	ldr	r3, [pc, #172]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b740:	f023 0220 	bic.w	r2, r3, #32
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	4928      	ldr	r1, [pc, #160]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b74a:	4313      	orrs	r3, r2
 800b74c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b74e:	4b27      	ldr	r3, [pc, #156]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b752:	4a26      	ldr	r2, [pc, #152]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b754:	f023 0310 	bic.w	r3, r3, #16
 800b758:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b75a:	4b24      	ldr	r3, [pc, #144]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b75c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b75e:	4b24      	ldr	r3, [pc, #144]	; (800b7f0 <RCCEx_PLL2_Config+0x160>)
 800b760:	4013      	ands	r3, r2
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	69d2      	ldr	r2, [r2, #28]
 800b766:	00d2      	lsls	r2, r2, #3
 800b768:	4920      	ldr	r1, [pc, #128]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b76a:	4313      	orrs	r3, r2
 800b76c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b76e:	4b1f      	ldr	r3, [pc, #124]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b772:	4a1e      	ldr	r2, [pc, #120]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b774:	f043 0310 	orr.w	r3, r3, #16
 800b778:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d106      	bne.n	800b78e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b780:	4b1a      	ldr	r3, [pc, #104]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b784:	4a19      	ldr	r2, [pc, #100]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b786:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b78a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b78c:	e00f      	b.n	800b7ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d106      	bne.n	800b7a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b794:	4b15      	ldr	r3, [pc, #84]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b798:	4a14      	ldr	r2, [pc, #80]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b79a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b79e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7a0:	e005      	b.n	800b7ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b7a2:	4b12      	ldr	r3, [pc, #72]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a6:	4a11      	ldr	r2, [pc, #68]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b7a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b7ae:	4b0f      	ldr	r3, [pc, #60]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a0e      	ldr	r2, [pc, #56]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b7b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b7b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7ba:	f7fa fa05 	bl	8005bc8 <HAL_GetTick>
 800b7be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b7c0:	e008      	b.n	800b7d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b7c2:	f7fa fa01 	bl	8005bc8 <HAL_GetTick>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d901      	bls.n	800b7d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	e006      	b.n	800b7e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b7d4:	4b05      	ldr	r3, [pc, #20]	; (800b7ec <RCCEx_PLL2_Config+0x15c>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d0f0      	beq.n	800b7c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	58024400 	.word	0x58024400
 800b7f0:	ffff0007 	.word	0xffff0007

0800b7f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7fe:	2300      	movs	r3, #0
 800b800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b802:	4b53      	ldr	r3, [pc, #332]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b806:	f003 0303 	and.w	r3, r3, #3
 800b80a:	2b03      	cmp	r3, #3
 800b80c:	d101      	bne.n	800b812 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	e099      	b.n	800b946 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b812:	4b4f      	ldr	r3, [pc, #316]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a4e      	ldr	r2, [pc, #312]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b81c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b81e:	f7fa f9d3 	bl	8005bc8 <HAL_GetTick>
 800b822:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b824:	e008      	b.n	800b838 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b826:	f7fa f9cf 	bl	8005bc8 <HAL_GetTick>
 800b82a:	4602      	mov	r2, r0
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	2b02      	cmp	r3, #2
 800b832:	d901      	bls.n	800b838 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b834:	2303      	movs	r3, #3
 800b836:	e086      	b.n	800b946 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b838:	4b45      	ldr	r3, [pc, #276]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1f0      	bne.n	800b826 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b844:	4b42      	ldr	r3, [pc, #264]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b848:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	051b      	lsls	r3, r3, #20
 800b852:	493f      	ldr	r1, [pc, #252]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b854:	4313      	orrs	r3, r2
 800b856:	628b      	str	r3, [r1, #40]	; 0x28
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	3b01      	subs	r3, #1
 800b868:	025b      	lsls	r3, r3, #9
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	431a      	orrs	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	3b01      	subs	r3, #1
 800b874:	041b      	lsls	r3, r3, #16
 800b876:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b87a:	431a      	orrs	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	691b      	ldr	r3, [r3, #16]
 800b880:	3b01      	subs	r3, #1
 800b882:	061b      	lsls	r3, r3, #24
 800b884:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b888:	4931      	ldr	r1, [pc, #196]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b88a:	4313      	orrs	r3, r2
 800b88c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b88e:	4b30      	ldr	r3, [pc, #192]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b892:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	695b      	ldr	r3, [r3, #20]
 800b89a:	492d      	ldr	r1, [pc, #180]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b89c:	4313      	orrs	r3, r2
 800b89e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b8a0:	4b2b      	ldr	r3, [pc, #172]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	4928      	ldr	r1, [pc, #160]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b8b2:	4b27      	ldr	r3, [pc, #156]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b6:	4a26      	ldr	r2, [pc, #152]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b8b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b8be:	4b24      	ldr	r3, [pc, #144]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b8c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8c2:	4b24      	ldr	r3, [pc, #144]	; (800b954 <RCCEx_PLL3_Config+0x160>)
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	69d2      	ldr	r2, [r2, #28]
 800b8ca:	00d2      	lsls	r2, r2, #3
 800b8cc:	4920      	ldr	r1, [pc, #128]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b8d2:	4b1f      	ldr	r3, [pc, #124]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d6:	4a1e      	ldr	r2, [pc, #120]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b8d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d106      	bne.n	800b8f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b8e4:	4b1a      	ldr	r3, [pc, #104]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e8:	4a19      	ldr	r2, [pc, #100]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b8ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b8ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b8f0:	e00f      	b.n	800b912 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d106      	bne.n	800b906 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b8f8:	4b15      	ldr	r3, [pc, #84]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fc:	4a14      	ldr	r2, [pc, #80]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b8fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b902:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b904:	e005      	b.n	800b912 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b906:	4b12      	ldr	r3, [pc, #72]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90a:	4a11      	ldr	r2, [pc, #68]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b90c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b910:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b912:	4b0f      	ldr	r3, [pc, #60]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a0e      	ldr	r2, [pc, #56]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b91c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b91e:	f7fa f953 	bl	8005bc8 <HAL_GetTick>
 800b922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b924:	e008      	b.n	800b938 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b926:	f7fa f94f 	bl	8005bc8 <HAL_GetTick>
 800b92a:	4602      	mov	r2, r0
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	2b02      	cmp	r3, #2
 800b932:	d901      	bls.n	800b938 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b934:	2303      	movs	r3, #3
 800b936:	e006      	b.n	800b946 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b938:	4b05      	ldr	r3, [pc, #20]	; (800b950 <RCCEx_PLL3_Config+0x15c>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0f0      	beq.n	800b926 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b944:	7bfb      	ldrb	r3, [r7, #15]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	58024400 	.word	0x58024400
 800b954:	ffff0007 	.word	0xffff0007

0800b958 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	e0f1      	b.n	800bb4e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a78      	ldr	r2, [pc, #480]	; (800bb58 <HAL_SPI_Init+0x200>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d00f      	beq.n	800b99a <HAL_SPI_Init+0x42>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a77      	ldr	r2, [pc, #476]	; (800bb5c <HAL_SPI_Init+0x204>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d00a      	beq.n	800b99a <HAL_SPI_Init+0x42>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a75      	ldr	r2, [pc, #468]	; (800bb60 <HAL_SPI_Init+0x208>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d005      	beq.n	800b99a <HAL_SPI_Init+0x42>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	2b0f      	cmp	r3, #15
 800b994:	d901      	bls.n	800b99a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e0d9      	b.n	800bb4e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f8e2 	bl	800bb64 <SPI_GetPacketSize>
 800b9a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a6c      	ldr	r2, [pc, #432]	; (800bb58 <HAL_SPI_Init+0x200>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d00c      	beq.n	800b9c6 <HAL_SPI_Init+0x6e>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a6a      	ldr	r2, [pc, #424]	; (800bb5c <HAL_SPI_Init+0x204>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d007      	beq.n	800b9c6 <HAL_SPI_Init+0x6e>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a69      	ldr	r2, [pc, #420]	; (800bb60 <HAL_SPI_Init+0x208>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d002      	beq.n	800b9c6 <HAL_SPI_Init+0x6e>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2b08      	cmp	r3, #8
 800b9c4:	d811      	bhi.n	800b9ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9ca:	4a63      	ldr	r2, [pc, #396]	; (800bb58 <HAL_SPI_Init+0x200>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d009      	beq.n	800b9e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a61      	ldr	r2, [pc, #388]	; (800bb5c <HAL_SPI_Init+0x204>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d004      	beq.n	800b9e4 <HAL_SPI_Init+0x8c>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a60      	ldr	r2, [pc, #384]	; (800bb60 <HAL_SPI_Init+0x208>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d104      	bne.n	800b9ee <HAL_SPI_Init+0x96>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b10      	cmp	r3, #16
 800b9e8:	d901      	bls.n	800b9ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e0af      	b.n	800bb4e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d106      	bne.n	800ba08 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f7f8 fc5e 	bl	80042c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f022 0201 	bic.w	r2, r2, #1
 800ba1e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ba2a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba34:	d119      	bne.n	800ba6a <HAL_SPI_Init+0x112>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba3e:	d103      	bne.n	800ba48 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d008      	beq.n	800ba5a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10c      	bne.n	800ba6a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba58:	d107      	bne.n	800ba6a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	69da      	ldr	r2, [r3, #28]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba72:	431a      	orrs	r2, r3
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	431a      	orrs	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba7c:	ea42 0103 	orr.w	r1, r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68da      	ldr	r2, [r3, #12]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	430a      	orrs	r2, r1
 800ba8a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba94:	431a      	orrs	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba9a:	431a      	orrs	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	699b      	ldr	r3, [r3, #24]
 800baa0:	431a      	orrs	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	431a      	orrs	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	695b      	ldr	r3, [r3, #20]
 800baac:	431a      	orrs	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	431a      	orrs	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	431a      	orrs	r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800babe:	431a      	orrs	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	431a      	orrs	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baca:	ea42 0103 	orr.w	r1, r2, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	430a      	orrs	r2, r1
 800bad8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d113      	bne.n	800bb0a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800baf4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb08:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f022 0201 	bic.w	r2, r2, #1
 800bb18:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00a      	beq.n	800bb3c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	430a      	orrs	r2, r1
 800bb3a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	40013000 	.word	0x40013000
 800bb5c:	40003800 	.word	0x40003800
 800bb60:	40003c00 	.word	0x40003c00

0800bb64 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb70:	095b      	lsrs	r3, r3, #5
 800bb72:	3301      	adds	r3, #1
 800bb74:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	3307      	adds	r3, #7
 800bb82:	08db      	lsrs	r3, r3, #3
 800bb84:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	fb02 f303 	mul.w	r3, r2, r3
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b082      	sub	sp, #8
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d101      	bne.n	800bbac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e049      	b.n	800bc40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d106      	bne.n	800bbc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f7f9 fa1d 	bl	8005000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2202      	movs	r2, #2
 800bbca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	4610      	mov	r0, r2
 800bbda:	f000 fd9f 	bl	800c71c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2201      	movs	r2, #1
 800bc02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2201      	movs	r2, #1
 800bc12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2201      	movs	r2, #1
 800bc22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2201      	movs	r2, #1
 800bc32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d001      	beq.n	800bc60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e054      	b.n	800bd0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2202      	movs	r2, #2
 800bc64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68da      	ldr	r2, [r3, #12]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f042 0201 	orr.w	r2, r2, #1
 800bc76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a26      	ldr	r2, [pc, #152]	; (800bd18 <HAL_TIM_Base_Start_IT+0xd0>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d022      	beq.n	800bcc8 <HAL_TIM_Base_Start_IT+0x80>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc8a:	d01d      	beq.n	800bcc8 <HAL_TIM_Base_Start_IT+0x80>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a22      	ldr	r2, [pc, #136]	; (800bd1c <HAL_TIM_Base_Start_IT+0xd4>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d018      	beq.n	800bcc8 <HAL_TIM_Base_Start_IT+0x80>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a21      	ldr	r2, [pc, #132]	; (800bd20 <HAL_TIM_Base_Start_IT+0xd8>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d013      	beq.n	800bcc8 <HAL_TIM_Base_Start_IT+0x80>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a1f      	ldr	r2, [pc, #124]	; (800bd24 <HAL_TIM_Base_Start_IT+0xdc>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d00e      	beq.n	800bcc8 <HAL_TIM_Base_Start_IT+0x80>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a1e      	ldr	r2, [pc, #120]	; (800bd28 <HAL_TIM_Base_Start_IT+0xe0>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d009      	beq.n	800bcc8 <HAL_TIM_Base_Start_IT+0x80>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a1c      	ldr	r2, [pc, #112]	; (800bd2c <HAL_TIM_Base_Start_IT+0xe4>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d004      	beq.n	800bcc8 <HAL_TIM_Base_Start_IT+0x80>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a1b      	ldr	r2, [pc, #108]	; (800bd30 <HAL_TIM_Base_Start_IT+0xe8>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d115      	bne.n	800bcf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	689a      	ldr	r2, [r3, #8]
 800bcce:	4b19      	ldr	r3, [pc, #100]	; (800bd34 <HAL_TIM_Base_Start_IT+0xec>)
 800bcd0:	4013      	ands	r3, r2
 800bcd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2b06      	cmp	r3, #6
 800bcd8:	d015      	beq.n	800bd06 <HAL_TIM_Base_Start_IT+0xbe>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bce0:	d011      	beq.n	800bd06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f042 0201 	orr.w	r2, r2, #1
 800bcf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcf2:	e008      	b.n	800bd06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f042 0201 	orr.w	r2, r2, #1
 800bd02:	601a      	str	r2, [r3, #0]
 800bd04:	e000      	b.n	800bd08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3714      	adds	r7, #20
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	40010000 	.word	0x40010000
 800bd1c:	40000400 	.word	0x40000400
 800bd20:	40000800 	.word	0x40000800
 800bd24:	40000c00 	.word	0x40000c00
 800bd28:	40010400 	.word	0x40010400
 800bd2c:	40001800 	.word	0x40001800
 800bd30:	40014000 	.word	0x40014000
 800bd34:	00010007 	.word	0x00010007

0800bd38 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68da      	ldr	r2, [r3, #12]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f022 0201 	bic.w	r2, r2, #1
 800bd4e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6a1a      	ldr	r2, [r3, #32]
 800bd56:	f241 1311 	movw	r3, #4369	; 0x1111
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10f      	bne.n	800bd80 <HAL_TIM_Base_Stop_IT+0x48>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6a1a      	ldr	r2, [r3, #32]
 800bd66:	f240 4344 	movw	r3, #1092	; 0x444
 800bd6a:	4013      	ands	r3, r2
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d107      	bne.n	800bd80 <HAL_TIM_Base_Stop_IT+0x48>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f022 0201 	bic.w	r2, r2, #1
 800bd7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b082      	sub	sp, #8
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	e049      	b.n	800be3c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d106      	bne.n	800bdc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 f841 	bl	800be44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2202      	movs	r2, #2
 800bdc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	f000 fca1 	bl	800c71c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2201      	movs	r2, #1
 800bde6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2201      	movs	r2, #1
 800be06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2201      	movs	r2, #1
 800be0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2201      	movs	r2, #1
 800be16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2201      	movs	r2, #1
 800be1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2201      	movs	r2, #1
 800be26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be4c:	bf00      	nop
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d109      	bne.n	800be7c <HAL_TIM_PWM_Start+0x24>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b01      	cmp	r3, #1
 800be72:	bf14      	ite	ne
 800be74:	2301      	movne	r3, #1
 800be76:	2300      	moveq	r3, #0
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	e03c      	b.n	800bef6 <HAL_TIM_PWM_Start+0x9e>
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	2b04      	cmp	r3, #4
 800be80:	d109      	bne.n	800be96 <HAL_TIM_PWM_Start+0x3e>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	bf14      	ite	ne
 800be8e:	2301      	movne	r3, #1
 800be90:	2300      	moveq	r3, #0
 800be92:	b2db      	uxtb	r3, r3
 800be94:	e02f      	b.n	800bef6 <HAL_TIM_PWM_Start+0x9e>
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	2b08      	cmp	r3, #8
 800be9a:	d109      	bne.n	800beb0 <HAL_TIM_PWM_Start+0x58>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	bf14      	ite	ne
 800bea8:	2301      	movne	r3, #1
 800beaa:	2300      	moveq	r3, #0
 800beac:	b2db      	uxtb	r3, r3
 800beae:	e022      	b.n	800bef6 <HAL_TIM_PWM_Start+0x9e>
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	2b0c      	cmp	r3, #12
 800beb4:	d109      	bne.n	800beca <HAL_TIM_PWM_Start+0x72>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	bf14      	ite	ne
 800bec2:	2301      	movne	r3, #1
 800bec4:	2300      	moveq	r3, #0
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	e015      	b.n	800bef6 <HAL_TIM_PWM_Start+0x9e>
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2b10      	cmp	r3, #16
 800bece:	d109      	bne.n	800bee4 <HAL_TIM_PWM_Start+0x8c>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	2b01      	cmp	r3, #1
 800beda:	bf14      	ite	ne
 800bedc:	2301      	movne	r3, #1
 800bede:	2300      	moveq	r3, #0
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	e008      	b.n	800bef6 <HAL_TIM_PWM_Start+0x9e>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800beea:	b2db      	uxtb	r3, r3
 800beec:	2b01      	cmp	r3, #1
 800beee:	bf14      	ite	ne
 800bef0:	2301      	movne	r3, #1
 800bef2:	2300      	moveq	r3, #0
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e0a1      	b.n	800c042 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d104      	bne.n	800bf0e <HAL_TIM_PWM_Start+0xb6>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2202      	movs	r2, #2
 800bf08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf0c:	e023      	b.n	800bf56 <HAL_TIM_PWM_Start+0xfe>
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	2b04      	cmp	r3, #4
 800bf12:	d104      	bne.n	800bf1e <HAL_TIM_PWM_Start+0xc6>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf1c:	e01b      	b.n	800bf56 <HAL_TIM_PWM_Start+0xfe>
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b08      	cmp	r3, #8
 800bf22:	d104      	bne.n	800bf2e <HAL_TIM_PWM_Start+0xd6>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2202      	movs	r2, #2
 800bf28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf2c:	e013      	b.n	800bf56 <HAL_TIM_PWM_Start+0xfe>
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b0c      	cmp	r3, #12
 800bf32:	d104      	bne.n	800bf3e <HAL_TIM_PWM_Start+0xe6>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2202      	movs	r2, #2
 800bf38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf3c:	e00b      	b.n	800bf56 <HAL_TIM_PWM_Start+0xfe>
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	2b10      	cmp	r3, #16
 800bf42:	d104      	bne.n	800bf4e <HAL_TIM_PWM_Start+0xf6>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2202      	movs	r2, #2
 800bf48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf4c:	e003      	b.n	800bf56 <HAL_TIM_PWM_Start+0xfe>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2202      	movs	r2, #2
 800bf52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 ffea 	bl	800cf38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a38      	ldr	r2, [pc, #224]	; (800c04c <HAL_TIM_PWM_Start+0x1f4>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d013      	beq.n	800bf96 <HAL_TIM_PWM_Start+0x13e>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a37      	ldr	r2, [pc, #220]	; (800c050 <HAL_TIM_PWM_Start+0x1f8>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d00e      	beq.n	800bf96 <HAL_TIM_PWM_Start+0x13e>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a35      	ldr	r2, [pc, #212]	; (800c054 <HAL_TIM_PWM_Start+0x1fc>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d009      	beq.n	800bf96 <HAL_TIM_PWM_Start+0x13e>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a34      	ldr	r2, [pc, #208]	; (800c058 <HAL_TIM_PWM_Start+0x200>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d004      	beq.n	800bf96 <HAL_TIM_PWM_Start+0x13e>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a32      	ldr	r2, [pc, #200]	; (800c05c <HAL_TIM_PWM_Start+0x204>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d101      	bne.n	800bf9a <HAL_TIM_PWM_Start+0x142>
 800bf96:	2301      	movs	r3, #1
 800bf98:	e000      	b.n	800bf9c <HAL_TIM_PWM_Start+0x144>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d007      	beq.n	800bfb0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bfae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a25      	ldr	r2, [pc, #148]	; (800c04c <HAL_TIM_PWM_Start+0x1f4>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d022      	beq.n	800c000 <HAL_TIM_PWM_Start+0x1a8>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfc2:	d01d      	beq.n	800c000 <HAL_TIM_PWM_Start+0x1a8>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a25      	ldr	r2, [pc, #148]	; (800c060 <HAL_TIM_PWM_Start+0x208>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d018      	beq.n	800c000 <HAL_TIM_PWM_Start+0x1a8>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a24      	ldr	r2, [pc, #144]	; (800c064 <HAL_TIM_PWM_Start+0x20c>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d013      	beq.n	800c000 <HAL_TIM_PWM_Start+0x1a8>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a22      	ldr	r2, [pc, #136]	; (800c068 <HAL_TIM_PWM_Start+0x210>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d00e      	beq.n	800c000 <HAL_TIM_PWM_Start+0x1a8>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a1a      	ldr	r2, [pc, #104]	; (800c050 <HAL_TIM_PWM_Start+0x1f8>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d009      	beq.n	800c000 <HAL_TIM_PWM_Start+0x1a8>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a1e      	ldr	r2, [pc, #120]	; (800c06c <HAL_TIM_PWM_Start+0x214>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d004      	beq.n	800c000 <HAL_TIM_PWM_Start+0x1a8>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a16      	ldr	r2, [pc, #88]	; (800c054 <HAL_TIM_PWM_Start+0x1fc>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d115      	bne.n	800c02c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	689a      	ldr	r2, [r3, #8]
 800c006:	4b1a      	ldr	r3, [pc, #104]	; (800c070 <HAL_TIM_PWM_Start+0x218>)
 800c008:	4013      	ands	r3, r2
 800c00a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2b06      	cmp	r3, #6
 800c010:	d015      	beq.n	800c03e <HAL_TIM_PWM_Start+0x1e6>
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c018:	d011      	beq.n	800c03e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f042 0201 	orr.w	r2, r2, #1
 800c028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c02a:	e008      	b.n	800c03e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f042 0201 	orr.w	r2, r2, #1
 800c03a:	601a      	str	r2, [r3, #0]
 800c03c:	e000      	b.n	800c040 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c03e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	40010000 	.word	0x40010000
 800c050:	40010400 	.word	0x40010400
 800c054:	40014000 	.word	0x40014000
 800c058:	40014400 	.word	0x40014400
 800c05c:	40014800 	.word	0x40014800
 800c060:	40000400 	.word	0x40000400
 800c064:	40000800 	.word	0x40000800
 800c068:	40000c00 	.word	0x40000c00
 800c06c:	40001800 	.word	0x40001800
 800c070:	00010007 	.word	0x00010007

0800c074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	f003 0302 	and.w	r3, r3, #2
 800c086:	2b02      	cmp	r3, #2
 800c088:	d122      	bne.n	800c0d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	f003 0302 	and.w	r3, r3, #2
 800c094:	2b02      	cmp	r3, #2
 800c096:	d11b      	bne.n	800c0d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f06f 0202 	mvn.w	r2, #2
 800c0a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	699b      	ldr	r3, [r3, #24]
 800c0ae:	f003 0303 	and.w	r3, r3, #3
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d003      	beq.n	800c0be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fb12 	bl	800c6e0 <HAL_TIM_IC_CaptureCallback>
 800c0bc:	e005      	b.n	800c0ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fb04 	bl	800c6cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fb15 	bl	800c6f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	f003 0304 	and.w	r3, r3, #4
 800c0da:	2b04      	cmp	r3, #4
 800c0dc:	d122      	bne.n	800c124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	f003 0304 	and.w	r3, r3, #4
 800c0e8:	2b04      	cmp	r3, #4
 800c0ea:	d11b      	bne.n	800c124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f06f 0204 	mvn.w	r2, #4
 800c0f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2202      	movs	r2, #2
 800c0fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	699b      	ldr	r3, [r3, #24]
 800c102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c106:	2b00      	cmp	r3, #0
 800c108:	d003      	beq.n	800c112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fae8 	bl	800c6e0 <HAL_TIM_IC_CaptureCallback>
 800c110:	e005      	b.n	800c11e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fada 	bl	800c6cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 faeb 	bl	800c6f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2200      	movs	r2, #0
 800c122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	f003 0308 	and.w	r3, r3, #8
 800c12e:	2b08      	cmp	r3, #8
 800c130:	d122      	bne.n	800c178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	f003 0308 	and.w	r3, r3, #8
 800c13c:	2b08      	cmp	r3, #8
 800c13e:	d11b      	bne.n	800c178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f06f 0208 	mvn.w	r2, #8
 800c148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2204      	movs	r2, #4
 800c14e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	69db      	ldr	r3, [r3, #28]
 800c156:	f003 0303 	and.w	r3, r3, #3
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d003      	beq.n	800c166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fabe 	bl	800c6e0 <HAL_TIM_IC_CaptureCallback>
 800c164:	e005      	b.n	800c172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fab0 	bl	800c6cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fac1 	bl	800c6f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	f003 0310 	and.w	r3, r3, #16
 800c182:	2b10      	cmp	r3, #16
 800c184:	d122      	bne.n	800c1cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	f003 0310 	and.w	r3, r3, #16
 800c190:	2b10      	cmp	r3, #16
 800c192:	d11b      	bne.n	800c1cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f06f 0210 	mvn.w	r2, #16
 800c19c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2208      	movs	r2, #8
 800c1a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	69db      	ldr	r3, [r3, #28]
 800c1aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d003      	beq.n	800c1ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fa94 	bl	800c6e0 <HAL_TIM_IC_CaptureCallback>
 800c1b8:	e005      	b.n	800c1c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 fa86 	bl	800c6cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fa97 	bl	800c6f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d10e      	bne.n	800c1f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	f003 0301 	and.w	r3, r3, #1
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d107      	bne.n	800c1f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f06f 0201 	mvn.w	r2, #1
 800c1f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7f6 fe04 	bl	8002e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c202:	2b80      	cmp	r3, #128	; 0x80
 800c204:	d10e      	bne.n	800c224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c210:	2b80      	cmp	r3, #128	; 0x80
 800c212:	d107      	bne.n	800c224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c21c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 ffc6 	bl	800d1b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c22e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c232:	d10e      	bne.n	800c252 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c23e:	2b80      	cmp	r3, #128	; 0x80
 800c240:	d107      	bne.n	800c252 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c24a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 ffb9 	bl	800d1c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c25c:	2b40      	cmp	r3, #64	; 0x40
 800c25e:	d10e      	bne.n	800c27e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c26a:	2b40      	cmp	r3, #64	; 0x40
 800c26c:	d107      	bne.n	800c27e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fa45 	bl	800c708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	f003 0320 	and.w	r3, r3, #32
 800c288:	2b20      	cmp	r3, #32
 800c28a:	d10e      	bne.n	800c2aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	f003 0320 	and.w	r3, r3, #32
 800c296:	2b20      	cmp	r3, #32
 800c298:	d107      	bne.n	800c2aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f06f 0220 	mvn.w	r2, #32
 800c2a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 ff79 	bl	800d19c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c2aa:	bf00      	nop
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
	...

0800c2b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d101      	bne.n	800c2d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	e0ff      	b.n	800c4d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b14      	cmp	r3, #20
 800c2de:	f200 80f0 	bhi.w	800c4c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c2e2:	a201      	add	r2, pc, #4	; (adr r2, 800c2e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e8:	0800c33d 	.word	0x0800c33d
 800c2ec:	0800c4c3 	.word	0x0800c4c3
 800c2f0:	0800c4c3 	.word	0x0800c4c3
 800c2f4:	0800c4c3 	.word	0x0800c4c3
 800c2f8:	0800c37d 	.word	0x0800c37d
 800c2fc:	0800c4c3 	.word	0x0800c4c3
 800c300:	0800c4c3 	.word	0x0800c4c3
 800c304:	0800c4c3 	.word	0x0800c4c3
 800c308:	0800c3bf 	.word	0x0800c3bf
 800c30c:	0800c4c3 	.word	0x0800c4c3
 800c310:	0800c4c3 	.word	0x0800c4c3
 800c314:	0800c4c3 	.word	0x0800c4c3
 800c318:	0800c3ff 	.word	0x0800c3ff
 800c31c:	0800c4c3 	.word	0x0800c4c3
 800c320:	0800c4c3 	.word	0x0800c4c3
 800c324:	0800c4c3 	.word	0x0800c4c3
 800c328:	0800c441 	.word	0x0800c441
 800c32c:	0800c4c3 	.word	0x0800c4c3
 800c330:	0800c4c3 	.word	0x0800c4c3
 800c334:	0800c4c3 	.word	0x0800c4c3
 800c338:	0800c481 	.word	0x0800c481
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68b9      	ldr	r1, [r7, #8]
 800c342:	4618      	mov	r0, r3
 800c344:	f000 fa84 	bl	800c850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	699a      	ldr	r2, [r3, #24]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f042 0208 	orr.w	r2, r2, #8
 800c356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	699a      	ldr	r2, [r3, #24]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f022 0204 	bic.w	r2, r2, #4
 800c366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	6999      	ldr	r1, [r3, #24]
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	691a      	ldr	r2, [r3, #16]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	430a      	orrs	r2, r1
 800c378:	619a      	str	r2, [r3, #24]
      break;
 800c37a:	e0a5      	b.n	800c4c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	68b9      	ldr	r1, [r7, #8]
 800c382:	4618      	mov	r0, r3
 800c384:	f000 faf4 	bl	800c970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	699a      	ldr	r2, [r3, #24]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	699a      	ldr	r2, [r3, #24]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	6999      	ldr	r1, [r3, #24]
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	691b      	ldr	r3, [r3, #16]
 800c3b2:	021a      	lsls	r2, r3, #8
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	430a      	orrs	r2, r1
 800c3ba:	619a      	str	r2, [r3, #24]
      break;
 800c3bc:	e084      	b.n	800c4c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68b9      	ldr	r1, [r7, #8]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 fb5d 	bl	800ca84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	69da      	ldr	r2, [r3, #28]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f042 0208 	orr.w	r2, r2, #8
 800c3d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	69da      	ldr	r2, [r3, #28]
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f022 0204 	bic.w	r2, r2, #4
 800c3e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	69d9      	ldr	r1, [r3, #28]
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	691a      	ldr	r2, [r3, #16]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	430a      	orrs	r2, r1
 800c3fa:	61da      	str	r2, [r3, #28]
      break;
 800c3fc:	e064      	b.n	800c4c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68b9      	ldr	r1, [r7, #8]
 800c404:	4618      	mov	r0, r3
 800c406:	f000 fbc5 	bl	800cb94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	69da      	ldr	r2, [r3, #28]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	69da      	ldr	r2, [r3, #28]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	69d9      	ldr	r1, [r3, #28]
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	021a      	lsls	r2, r3, #8
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	430a      	orrs	r2, r1
 800c43c:	61da      	str	r2, [r3, #28]
      break;
 800c43e:	e043      	b.n	800c4c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	68b9      	ldr	r1, [r7, #8]
 800c446:	4618      	mov	r0, r3
 800c448:	f000 fc0e 	bl	800cc68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f042 0208 	orr.w	r2, r2, #8
 800c45a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f022 0204 	bic.w	r2, r2, #4
 800c46a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	691a      	ldr	r2, [r3, #16]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	430a      	orrs	r2, r1
 800c47c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c47e:	e023      	b.n	800c4c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	68b9      	ldr	r1, [r7, #8]
 800c486:	4618      	mov	r0, r3
 800c488:	f000 fc52 	bl	800cd30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c49a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	021a      	lsls	r2, r3, #8
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	430a      	orrs	r2, r1
 800c4be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c4c0:	e002      	b.n	800c4c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	75fb      	strb	r3, [r7, #23]
      break;
 800c4c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c4d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3718      	adds	r7, #24
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop

0800c4dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d101      	bne.n	800c4f8 <HAL_TIM_ConfigClockSource+0x1c>
 800c4f4:	2302      	movs	r3, #2
 800c4f6:	e0dc      	b.n	800c6b2 <HAL_TIM_ConfigClockSource+0x1d6>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2202      	movs	r2, #2
 800c504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	4b6a      	ldr	r3, [pc, #424]	; (800c6bc <HAL_TIM_ConfigClockSource+0x1e0>)
 800c514:	4013      	ands	r3, r2
 800c516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c51e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a64      	ldr	r2, [pc, #400]	; (800c6c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	f000 80a9 	beq.w	800c686 <HAL_TIM_ConfigClockSource+0x1aa>
 800c534:	4a62      	ldr	r2, [pc, #392]	; (800c6c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c536:	4293      	cmp	r3, r2
 800c538:	f200 80ae 	bhi.w	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
 800c53c:	4a61      	ldr	r2, [pc, #388]	; (800c6c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	f000 80a1 	beq.w	800c686 <HAL_TIM_ConfigClockSource+0x1aa>
 800c544:	4a5f      	ldr	r2, [pc, #380]	; (800c6c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c546:	4293      	cmp	r3, r2
 800c548:	f200 80a6 	bhi.w	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
 800c54c:	4a5e      	ldr	r2, [pc, #376]	; (800c6c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	f000 8099 	beq.w	800c686 <HAL_TIM_ConfigClockSource+0x1aa>
 800c554:	4a5c      	ldr	r2, [pc, #368]	; (800c6c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c556:	4293      	cmp	r3, r2
 800c558:	f200 809e 	bhi.w	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
 800c55c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c560:	f000 8091 	beq.w	800c686 <HAL_TIM_ConfigClockSource+0x1aa>
 800c564:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c568:	f200 8096 	bhi.w	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
 800c56c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c570:	f000 8089 	beq.w	800c686 <HAL_TIM_ConfigClockSource+0x1aa>
 800c574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c578:	f200 808e 	bhi.w	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
 800c57c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c580:	d03e      	beq.n	800c600 <HAL_TIM_ConfigClockSource+0x124>
 800c582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c586:	f200 8087 	bhi.w	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
 800c58a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c58e:	f000 8086 	beq.w	800c69e <HAL_TIM_ConfigClockSource+0x1c2>
 800c592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c596:	d87f      	bhi.n	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
 800c598:	2b70      	cmp	r3, #112	; 0x70
 800c59a:	d01a      	beq.n	800c5d2 <HAL_TIM_ConfigClockSource+0xf6>
 800c59c:	2b70      	cmp	r3, #112	; 0x70
 800c59e:	d87b      	bhi.n	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5a0:	2b60      	cmp	r3, #96	; 0x60
 800c5a2:	d050      	beq.n	800c646 <HAL_TIM_ConfigClockSource+0x16a>
 800c5a4:	2b60      	cmp	r3, #96	; 0x60
 800c5a6:	d877      	bhi.n	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5a8:	2b50      	cmp	r3, #80	; 0x50
 800c5aa:	d03c      	beq.n	800c626 <HAL_TIM_ConfigClockSource+0x14a>
 800c5ac:	2b50      	cmp	r3, #80	; 0x50
 800c5ae:	d873      	bhi.n	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5b0:	2b40      	cmp	r3, #64	; 0x40
 800c5b2:	d058      	beq.n	800c666 <HAL_TIM_ConfigClockSource+0x18a>
 800c5b4:	2b40      	cmp	r3, #64	; 0x40
 800c5b6:	d86f      	bhi.n	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5b8:	2b30      	cmp	r3, #48	; 0x30
 800c5ba:	d064      	beq.n	800c686 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5bc:	2b30      	cmp	r3, #48	; 0x30
 800c5be:	d86b      	bhi.n	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5c0:	2b20      	cmp	r3, #32
 800c5c2:	d060      	beq.n	800c686 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5c4:	2b20      	cmp	r3, #32
 800c5c6:	d867      	bhi.n	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d05c      	beq.n	800c686 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5cc:	2b10      	cmp	r3, #16
 800c5ce:	d05a      	beq.n	800c686 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5d0:	e062      	b.n	800c698 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6818      	ldr	r0, [r3, #0]
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	6899      	ldr	r1, [r3, #8]
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	685a      	ldr	r2, [r3, #4]
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	f000 fc89 	bl	800cef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c5f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	609a      	str	r2, [r3, #8]
      break;
 800c5fe:	e04f      	b.n	800c6a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6818      	ldr	r0, [r3, #0]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	6899      	ldr	r1, [r3, #8]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	685a      	ldr	r2, [r3, #4]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	f000 fc72 	bl	800cef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	689a      	ldr	r2, [r3, #8]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c622:	609a      	str	r2, [r3, #8]
      break;
 800c624:	e03c      	b.n	800c6a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6818      	ldr	r0, [r3, #0]
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	6859      	ldr	r1, [r3, #4]
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	461a      	mov	r2, r3
 800c634:	f000 fbe2 	bl	800cdfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2150      	movs	r1, #80	; 0x50
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 fc3c 	bl	800cebc <TIM_ITRx_SetConfig>
      break;
 800c644:	e02c      	b.n	800c6a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6818      	ldr	r0, [r3, #0]
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	6859      	ldr	r1, [r3, #4]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	68db      	ldr	r3, [r3, #12]
 800c652:	461a      	mov	r2, r3
 800c654:	f000 fc01 	bl	800ce5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2160      	movs	r1, #96	; 0x60
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 fc2c 	bl	800cebc <TIM_ITRx_SetConfig>
      break;
 800c664:	e01c      	b.n	800c6a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6818      	ldr	r0, [r3, #0]
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	6859      	ldr	r1, [r3, #4]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	461a      	mov	r2, r3
 800c674:	f000 fbc2 	bl	800cdfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2140      	movs	r1, #64	; 0x40
 800c67e:	4618      	mov	r0, r3
 800c680:	f000 fc1c 	bl	800cebc <TIM_ITRx_SetConfig>
      break;
 800c684:	e00c      	b.n	800c6a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4619      	mov	r1, r3
 800c690:	4610      	mov	r0, r2
 800c692:	f000 fc13 	bl	800cebc <TIM_ITRx_SetConfig>
      break;
 800c696:	e003      	b.n	800c6a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c698:	2301      	movs	r3, #1
 800c69a:	73fb      	strb	r3, [r7, #15]
      break;
 800c69c:	e000      	b.n	800c6a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c69e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	ffceff88 	.word	0xffceff88
 800c6c0:	00100040 	.word	0x00100040
 800c6c4:	00100030 	.word	0x00100030
 800c6c8:	00100020 	.word	0x00100020

0800c6cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c6e8:	bf00      	nop
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c6fc:	bf00      	nop
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c710:	bf00      	nop
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4a40      	ldr	r2, [pc, #256]	; (800c830 <TIM_Base_SetConfig+0x114>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d013      	beq.n	800c75c <TIM_Base_SetConfig+0x40>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c73a:	d00f      	beq.n	800c75c <TIM_Base_SetConfig+0x40>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4a3d      	ldr	r2, [pc, #244]	; (800c834 <TIM_Base_SetConfig+0x118>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d00b      	beq.n	800c75c <TIM_Base_SetConfig+0x40>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4a3c      	ldr	r2, [pc, #240]	; (800c838 <TIM_Base_SetConfig+0x11c>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d007      	beq.n	800c75c <TIM_Base_SetConfig+0x40>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4a3b      	ldr	r2, [pc, #236]	; (800c83c <TIM_Base_SetConfig+0x120>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d003      	beq.n	800c75c <TIM_Base_SetConfig+0x40>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4a3a      	ldr	r2, [pc, #232]	; (800c840 <TIM_Base_SetConfig+0x124>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d108      	bne.n	800c76e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4a2f      	ldr	r2, [pc, #188]	; (800c830 <TIM_Base_SetConfig+0x114>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d01f      	beq.n	800c7b6 <TIM_Base_SetConfig+0x9a>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c77c:	d01b      	beq.n	800c7b6 <TIM_Base_SetConfig+0x9a>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4a2c      	ldr	r2, [pc, #176]	; (800c834 <TIM_Base_SetConfig+0x118>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d017      	beq.n	800c7b6 <TIM_Base_SetConfig+0x9a>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	4a2b      	ldr	r2, [pc, #172]	; (800c838 <TIM_Base_SetConfig+0x11c>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d013      	beq.n	800c7b6 <TIM_Base_SetConfig+0x9a>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4a2a      	ldr	r2, [pc, #168]	; (800c83c <TIM_Base_SetConfig+0x120>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d00f      	beq.n	800c7b6 <TIM_Base_SetConfig+0x9a>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4a29      	ldr	r2, [pc, #164]	; (800c840 <TIM_Base_SetConfig+0x124>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d00b      	beq.n	800c7b6 <TIM_Base_SetConfig+0x9a>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4a28      	ldr	r2, [pc, #160]	; (800c844 <TIM_Base_SetConfig+0x128>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d007      	beq.n	800c7b6 <TIM_Base_SetConfig+0x9a>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4a27      	ldr	r2, [pc, #156]	; (800c848 <TIM_Base_SetConfig+0x12c>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d003      	beq.n	800c7b6 <TIM_Base_SetConfig+0x9a>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4a26      	ldr	r2, [pc, #152]	; (800c84c <TIM_Base_SetConfig+0x130>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d108      	bne.n	800c7c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	695b      	ldr	r3, [r3, #20]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	689a      	ldr	r2, [r3, #8]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	4a10      	ldr	r2, [pc, #64]	; (800c830 <TIM_Base_SetConfig+0x114>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d00f      	beq.n	800c814 <TIM_Base_SetConfig+0xf8>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	4a12      	ldr	r2, [pc, #72]	; (800c840 <TIM_Base_SetConfig+0x124>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d00b      	beq.n	800c814 <TIM_Base_SetConfig+0xf8>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4a11      	ldr	r2, [pc, #68]	; (800c844 <TIM_Base_SetConfig+0x128>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d007      	beq.n	800c814 <TIM_Base_SetConfig+0xf8>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4a10      	ldr	r2, [pc, #64]	; (800c848 <TIM_Base_SetConfig+0x12c>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d003      	beq.n	800c814 <TIM_Base_SetConfig+0xf8>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a0f      	ldr	r2, [pc, #60]	; (800c84c <TIM_Base_SetConfig+0x130>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d103      	bne.n	800c81c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	691a      	ldr	r2, [r3, #16]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2201      	movs	r2, #1
 800c820:	615a      	str	r2, [r3, #20]
}
 800c822:	bf00      	nop
 800c824:	3714      	adds	r7, #20
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop
 800c830:	40010000 	.word	0x40010000
 800c834:	40000400 	.word	0x40000400
 800c838:	40000800 	.word	0x40000800
 800c83c:	40000c00 	.word	0x40000c00
 800c840:	40010400 	.word	0x40010400
 800c844:	40014000 	.word	0x40014000
 800c848:	40014400 	.word	0x40014400
 800c84c:	40014800 	.word	0x40014800

0800c850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c850:	b480      	push	{r7}
 800c852:	b087      	sub	sp, #28
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a1b      	ldr	r3, [r3, #32]
 800c85e:	f023 0201 	bic.w	r2, r3, #1
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a1b      	ldr	r3, [r3, #32]
 800c86a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	699b      	ldr	r3, [r3, #24]
 800c876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	4b37      	ldr	r3, [pc, #220]	; (800c958 <TIM_OC1_SetConfig+0x108>)
 800c87c:	4013      	ands	r3, r2
 800c87e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f023 0303 	bic.w	r3, r3, #3
 800c886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	4313      	orrs	r3, r2
 800c890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	f023 0302 	bic.w	r3, r3, #2
 800c898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4a2d      	ldr	r2, [pc, #180]	; (800c95c <TIM_OC1_SetConfig+0x10c>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d00f      	beq.n	800c8cc <TIM_OC1_SetConfig+0x7c>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4a2c      	ldr	r2, [pc, #176]	; (800c960 <TIM_OC1_SetConfig+0x110>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d00b      	beq.n	800c8cc <TIM_OC1_SetConfig+0x7c>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a2b      	ldr	r2, [pc, #172]	; (800c964 <TIM_OC1_SetConfig+0x114>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d007      	beq.n	800c8cc <TIM_OC1_SetConfig+0x7c>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4a2a      	ldr	r2, [pc, #168]	; (800c968 <TIM_OC1_SetConfig+0x118>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d003      	beq.n	800c8cc <TIM_OC1_SetConfig+0x7c>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a29      	ldr	r2, [pc, #164]	; (800c96c <TIM_OC1_SetConfig+0x11c>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d10c      	bne.n	800c8e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	f023 0308 	bic.w	r3, r3, #8
 800c8d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	697a      	ldr	r2, [r7, #20]
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	f023 0304 	bic.w	r3, r3, #4
 800c8e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4a1c      	ldr	r2, [pc, #112]	; (800c95c <TIM_OC1_SetConfig+0x10c>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d00f      	beq.n	800c90e <TIM_OC1_SetConfig+0xbe>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4a1b      	ldr	r2, [pc, #108]	; (800c960 <TIM_OC1_SetConfig+0x110>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d00b      	beq.n	800c90e <TIM_OC1_SetConfig+0xbe>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a1a      	ldr	r2, [pc, #104]	; (800c964 <TIM_OC1_SetConfig+0x114>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d007      	beq.n	800c90e <TIM_OC1_SetConfig+0xbe>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4a19      	ldr	r2, [pc, #100]	; (800c968 <TIM_OC1_SetConfig+0x118>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d003      	beq.n	800c90e <TIM_OC1_SetConfig+0xbe>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4a18      	ldr	r2, [pc, #96]	; (800c96c <TIM_OC1_SetConfig+0x11c>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d111      	bne.n	800c932 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c91c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	695b      	ldr	r3, [r3, #20]
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	4313      	orrs	r3, r2
 800c926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	699b      	ldr	r3, [r3, #24]
 800c92c:	693a      	ldr	r2, [r7, #16]
 800c92e:	4313      	orrs	r3, r2
 800c930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	693a      	ldr	r2, [r7, #16]
 800c936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	685a      	ldr	r2, [r3, #4]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	697a      	ldr	r2, [r7, #20]
 800c94a:	621a      	str	r2, [r3, #32]
}
 800c94c:	bf00      	nop
 800c94e:	371c      	adds	r7, #28
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr
 800c958:	fffeff8f 	.word	0xfffeff8f
 800c95c:	40010000 	.word	0x40010000
 800c960:	40010400 	.word	0x40010400
 800c964:	40014000 	.word	0x40014000
 800c968:	40014400 	.word	0x40014400
 800c96c:	40014800 	.word	0x40014800

0800c970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c970:	b480      	push	{r7}
 800c972:	b087      	sub	sp, #28
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6a1b      	ldr	r3, [r3, #32]
 800c97e:	f023 0210 	bic.w	r2, r3, #16
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6a1b      	ldr	r3, [r3, #32]
 800c98a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	699b      	ldr	r3, [r3, #24]
 800c996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	4b34      	ldr	r3, [pc, #208]	; (800ca6c <TIM_OC2_SetConfig+0xfc>)
 800c99c:	4013      	ands	r3, r2
 800c99e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	021b      	lsls	r3, r3, #8
 800c9ae:	68fa      	ldr	r2, [r7, #12]
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	f023 0320 	bic.w	r3, r3, #32
 800c9ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	011b      	lsls	r3, r3, #4
 800c9c2:	697a      	ldr	r2, [r7, #20]
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a29      	ldr	r2, [pc, #164]	; (800ca70 <TIM_OC2_SetConfig+0x100>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d003      	beq.n	800c9d8 <TIM_OC2_SetConfig+0x68>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4a28      	ldr	r2, [pc, #160]	; (800ca74 <TIM_OC2_SetConfig+0x104>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d10d      	bne.n	800c9f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	011b      	lsls	r3, r3, #4
 800c9e6:	697a      	ldr	r2, [r7, #20]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4a1e      	ldr	r2, [pc, #120]	; (800ca70 <TIM_OC2_SetConfig+0x100>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d00f      	beq.n	800ca1c <TIM_OC2_SetConfig+0xac>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a1d      	ldr	r2, [pc, #116]	; (800ca74 <TIM_OC2_SetConfig+0x104>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d00b      	beq.n	800ca1c <TIM_OC2_SetConfig+0xac>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a1c      	ldr	r2, [pc, #112]	; (800ca78 <TIM_OC2_SetConfig+0x108>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d007      	beq.n	800ca1c <TIM_OC2_SetConfig+0xac>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4a1b      	ldr	r2, [pc, #108]	; (800ca7c <TIM_OC2_SetConfig+0x10c>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d003      	beq.n	800ca1c <TIM_OC2_SetConfig+0xac>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4a1a      	ldr	r2, [pc, #104]	; (800ca80 <TIM_OC2_SetConfig+0x110>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d113      	bne.n	800ca44 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	695b      	ldr	r3, [r3, #20]
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	693a      	ldr	r2, [r7, #16]
 800ca34:	4313      	orrs	r3, r2
 800ca36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	699b      	ldr	r3, [r3, #24]
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	693a      	ldr	r2, [r7, #16]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	693a      	ldr	r2, [r7, #16]
 800ca48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	685a      	ldr	r2, [r3, #4]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	697a      	ldr	r2, [r7, #20]
 800ca5c:	621a      	str	r2, [r3, #32]
}
 800ca5e:	bf00      	nop
 800ca60:	371c      	adds	r7, #28
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	feff8fff 	.word	0xfeff8fff
 800ca70:	40010000 	.word	0x40010000
 800ca74:	40010400 	.word	0x40010400
 800ca78:	40014000 	.word	0x40014000
 800ca7c:	40014400 	.word	0x40014400
 800ca80:	40014800 	.word	0x40014800

0800ca84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b087      	sub	sp, #28
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6a1b      	ldr	r3, [r3, #32]
 800ca92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6a1b      	ldr	r3, [r3, #32]
 800ca9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	4b33      	ldr	r3, [pc, #204]	; (800cb7c <TIM_OC3_SetConfig+0xf8>)
 800cab0:	4013      	ands	r3, r2
 800cab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f023 0303 	bic.w	r3, r3, #3
 800caba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	4313      	orrs	r3, r2
 800cac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cacc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	021b      	lsls	r3, r3, #8
 800cad4:	697a      	ldr	r2, [r7, #20]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4a28      	ldr	r2, [pc, #160]	; (800cb80 <TIM_OC3_SetConfig+0xfc>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d003      	beq.n	800caea <TIM_OC3_SetConfig+0x66>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	4a27      	ldr	r2, [pc, #156]	; (800cb84 <TIM_OC3_SetConfig+0x100>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d10d      	bne.n	800cb06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800caf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	021b      	lsls	r3, r3, #8
 800caf8:	697a      	ldr	r2, [r7, #20]
 800cafa:	4313      	orrs	r3, r2
 800cafc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	4a1d      	ldr	r2, [pc, #116]	; (800cb80 <TIM_OC3_SetConfig+0xfc>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d00f      	beq.n	800cb2e <TIM_OC3_SetConfig+0xaa>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4a1c      	ldr	r2, [pc, #112]	; (800cb84 <TIM_OC3_SetConfig+0x100>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d00b      	beq.n	800cb2e <TIM_OC3_SetConfig+0xaa>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a1b      	ldr	r2, [pc, #108]	; (800cb88 <TIM_OC3_SetConfig+0x104>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d007      	beq.n	800cb2e <TIM_OC3_SetConfig+0xaa>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a1a      	ldr	r2, [pc, #104]	; (800cb8c <TIM_OC3_SetConfig+0x108>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d003      	beq.n	800cb2e <TIM_OC3_SetConfig+0xaa>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4a19      	ldr	r2, [pc, #100]	; (800cb90 <TIM_OC3_SetConfig+0x10c>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d113      	bne.n	800cb56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	695b      	ldr	r3, [r3, #20]
 800cb42:	011b      	lsls	r3, r3, #4
 800cb44:	693a      	ldr	r2, [r7, #16]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	699b      	ldr	r3, [r3, #24]
 800cb4e:	011b      	lsls	r3, r3, #4
 800cb50:	693a      	ldr	r2, [r7, #16]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	693a      	ldr	r2, [r7, #16]
 800cb5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	685a      	ldr	r2, [r3, #4]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	697a      	ldr	r2, [r7, #20]
 800cb6e:	621a      	str	r2, [r3, #32]
}
 800cb70:	bf00      	nop
 800cb72:	371c      	adds	r7, #28
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr
 800cb7c:	fffeff8f 	.word	0xfffeff8f
 800cb80:	40010000 	.word	0x40010000
 800cb84:	40010400 	.word	0x40010400
 800cb88:	40014000 	.word	0x40014000
 800cb8c:	40014400 	.word	0x40014400
 800cb90:	40014800 	.word	0x40014800

0800cb94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b087      	sub	sp, #28
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	69db      	ldr	r3, [r3, #28]
 800cbba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	4b24      	ldr	r3, [pc, #144]	; (800cc50 <TIM_OC4_SetConfig+0xbc>)
 800cbc0:	4013      	ands	r3, r2
 800cbc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	021b      	lsls	r3, r3, #8
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cbde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	031b      	lsls	r3, r3, #12
 800cbe6:	693a      	ldr	r2, [r7, #16]
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	4a19      	ldr	r2, [pc, #100]	; (800cc54 <TIM_OC4_SetConfig+0xc0>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d00f      	beq.n	800cc14 <TIM_OC4_SetConfig+0x80>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	4a18      	ldr	r2, [pc, #96]	; (800cc58 <TIM_OC4_SetConfig+0xc4>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d00b      	beq.n	800cc14 <TIM_OC4_SetConfig+0x80>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	4a17      	ldr	r2, [pc, #92]	; (800cc5c <TIM_OC4_SetConfig+0xc8>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d007      	beq.n	800cc14 <TIM_OC4_SetConfig+0x80>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	4a16      	ldr	r2, [pc, #88]	; (800cc60 <TIM_OC4_SetConfig+0xcc>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d003      	beq.n	800cc14 <TIM_OC4_SetConfig+0x80>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4a15      	ldr	r2, [pc, #84]	; (800cc64 <TIM_OC4_SetConfig+0xd0>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d109      	bne.n	800cc28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	695b      	ldr	r3, [r3, #20]
 800cc20:	019b      	lsls	r3, r3, #6
 800cc22:	697a      	ldr	r2, [r7, #20]
 800cc24:	4313      	orrs	r3, r2
 800cc26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	697a      	ldr	r2, [r7, #20]
 800cc2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	685a      	ldr	r2, [r3, #4]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	693a      	ldr	r2, [r7, #16]
 800cc40:	621a      	str	r2, [r3, #32]
}
 800cc42:	bf00      	nop
 800cc44:	371c      	adds	r7, #28
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	feff8fff 	.word	0xfeff8fff
 800cc54:	40010000 	.word	0x40010000
 800cc58:	40010400 	.word	0x40010400
 800cc5c:	40014000 	.word	0x40014000
 800cc60:	40014400 	.word	0x40014400
 800cc64:	40014800 	.word	0x40014800

0800cc68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b087      	sub	sp, #28
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6a1b      	ldr	r3, [r3, #32]
 800cc76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	4b21      	ldr	r3, [pc, #132]	; (800cd18 <TIM_OC5_SetConfig+0xb0>)
 800cc94:	4013      	ands	r3, r2
 800cc96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cca8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	041b      	lsls	r3, r3, #16
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4a18      	ldr	r2, [pc, #96]	; (800cd1c <TIM_OC5_SetConfig+0xb4>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d00f      	beq.n	800ccde <TIM_OC5_SetConfig+0x76>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4a17      	ldr	r2, [pc, #92]	; (800cd20 <TIM_OC5_SetConfig+0xb8>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d00b      	beq.n	800ccde <TIM_OC5_SetConfig+0x76>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	4a16      	ldr	r2, [pc, #88]	; (800cd24 <TIM_OC5_SetConfig+0xbc>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d007      	beq.n	800ccde <TIM_OC5_SetConfig+0x76>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4a15      	ldr	r2, [pc, #84]	; (800cd28 <TIM_OC5_SetConfig+0xc0>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d003      	beq.n	800ccde <TIM_OC5_SetConfig+0x76>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	4a14      	ldr	r2, [pc, #80]	; (800cd2c <TIM_OC5_SetConfig+0xc4>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d109      	bne.n	800ccf2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cce4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	695b      	ldr	r3, [r3, #20]
 800ccea:	021b      	lsls	r3, r3, #8
 800ccec:	697a      	ldr	r2, [r7, #20]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	697a      	ldr	r2, [r7, #20]
 800ccf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	685a      	ldr	r2, [r3, #4]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	693a      	ldr	r2, [r7, #16]
 800cd0a:	621a      	str	r2, [r3, #32]
}
 800cd0c:	bf00      	nop
 800cd0e:	371c      	adds	r7, #28
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr
 800cd18:	fffeff8f 	.word	0xfffeff8f
 800cd1c:	40010000 	.word	0x40010000
 800cd20:	40010400 	.word	0x40010400
 800cd24:	40014000 	.word	0x40014000
 800cd28:	40014400 	.word	0x40014400
 800cd2c:	40014800 	.word	0x40014800

0800cd30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b087      	sub	sp, #28
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a1b      	ldr	r3, [r3, #32]
 800cd3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a1b      	ldr	r3, [r3, #32]
 800cd4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	4b22      	ldr	r3, [pc, #136]	; (800cde4 <TIM_OC6_SetConfig+0xb4>)
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	021b      	lsls	r3, r3, #8
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	051b      	lsls	r3, r3, #20
 800cd7a:	693a      	ldr	r2, [r7, #16]
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a19      	ldr	r2, [pc, #100]	; (800cde8 <TIM_OC6_SetConfig+0xb8>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d00f      	beq.n	800cda8 <TIM_OC6_SetConfig+0x78>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a18      	ldr	r2, [pc, #96]	; (800cdec <TIM_OC6_SetConfig+0xbc>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d00b      	beq.n	800cda8 <TIM_OC6_SetConfig+0x78>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a17      	ldr	r2, [pc, #92]	; (800cdf0 <TIM_OC6_SetConfig+0xc0>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d007      	beq.n	800cda8 <TIM_OC6_SetConfig+0x78>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a16      	ldr	r2, [pc, #88]	; (800cdf4 <TIM_OC6_SetConfig+0xc4>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d003      	beq.n	800cda8 <TIM_OC6_SetConfig+0x78>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4a15      	ldr	r2, [pc, #84]	; (800cdf8 <TIM_OC6_SetConfig+0xc8>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d109      	bne.n	800cdbc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cdae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	695b      	ldr	r3, [r3, #20]
 800cdb4:	029b      	lsls	r3, r3, #10
 800cdb6:	697a      	ldr	r2, [r7, #20]
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	697a      	ldr	r2, [r7, #20]
 800cdc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	68fa      	ldr	r2, [r7, #12]
 800cdc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	693a      	ldr	r2, [r7, #16]
 800cdd4:	621a      	str	r2, [r3, #32]
}
 800cdd6:	bf00      	nop
 800cdd8:	371c      	adds	r7, #28
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr
 800cde2:	bf00      	nop
 800cde4:	feff8fff 	.word	0xfeff8fff
 800cde8:	40010000 	.word	0x40010000
 800cdec:	40010400 	.word	0x40010400
 800cdf0:	40014000 	.word	0x40014000
 800cdf4:	40014400 	.word	0x40014400
 800cdf8:	40014800 	.word	0x40014800

0800cdfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b087      	sub	sp, #28
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6a1b      	ldr	r3, [r3, #32]
 800ce0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6a1b      	ldr	r3, [r3, #32]
 800ce12:	f023 0201 	bic.w	r2, r3, #1
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	699b      	ldr	r3, [r3, #24]
 800ce1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	011b      	lsls	r3, r3, #4
 800ce2c:	693a      	ldr	r2, [r7, #16]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	f023 030a 	bic.w	r3, r3, #10
 800ce38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	697a      	ldr	r2, [r7, #20]
 800ce4c:	621a      	str	r2, [r3, #32]
}
 800ce4e:	bf00      	nop
 800ce50:	371c      	adds	r7, #28
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr

0800ce5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce5a:	b480      	push	{r7}
 800ce5c:	b087      	sub	sp, #28
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	60f8      	str	r0, [r7, #12]
 800ce62:	60b9      	str	r1, [r7, #8]
 800ce64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	f023 0210 	bic.w	r2, r3, #16
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	699b      	ldr	r3, [r3, #24]
 800ce76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6a1b      	ldr	r3, [r3, #32]
 800ce7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	031b      	lsls	r3, r3, #12
 800ce8a:	697a      	ldr	r2, [r7, #20]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	011b      	lsls	r3, r3, #4
 800ce9c:	693a      	ldr	r2, [r7, #16]
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	697a      	ldr	r2, [r7, #20]
 800cea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	693a      	ldr	r2, [r7, #16]
 800ceac:	621a      	str	r2, [r3, #32]
}
 800ceae:	bf00      	nop
 800ceb0:	371c      	adds	r7, #28
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr
	...

0800cebc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <TIM_ITRx_SetConfig+0x38>)
 800ced0:	4013      	ands	r3, r2
 800ced2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	4313      	orrs	r3, r2
 800ceda:	f043 0307 	orr.w	r3, r3, #7
 800cede:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	68fa      	ldr	r2, [r7, #12]
 800cee4:	609a      	str	r2, [r3, #8]
}
 800cee6:	bf00      	nop
 800cee8:	3714      	adds	r7, #20
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	ffcfff8f 	.word	0xffcfff8f

0800cef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b087      	sub	sp, #28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	021a      	lsls	r2, r3, #8
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	431a      	orrs	r2, r3
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	697a      	ldr	r2, [r7, #20]
 800cf2a:	609a      	str	r2, [r3, #8]
}
 800cf2c:	bf00      	nop
 800cf2e:	371c      	adds	r7, #28
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b087      	sub	sp, #28
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	f003 031f 	and.w	r3, r3, #31
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	fa02 f303 	lsl.w	r3, r2, r3
 800cf50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6a1a      	ldr	r2, [r3, #32]
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	43db      	mvns	r3, r3
 800cf5a:	401a      	ands	r2, r3
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	6a1a      	ldr	r2, [r3, #32]
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	f003 031f 	and.w	r3, r3, #31
 800cf6a:	6879      	ldr	r1, [r7, #4]
 800cf6c:	fa01 f303 	lsl.w	r3, r1, r3
 800cf70:	431a      	orrs	r2, r3
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	621a      	str	r2, [r3, #32]
}
 800cf76:	bf00      	nop
 800cf78:	371c      	adds	r7, #28
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
	...

0800cf84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b085      	sub	sp, #20
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d101      	bne.n	800cf9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf98:	2302      	movs	r3, #2
 800cf9a:	e06d      	b.n	800d078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2202      	movs	r2, #2
 800cfa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a30      	ldr	r2, [pc, #192]	; (800d084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d004      	beq.n	800cfd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a2f      	ldr	r2, [pc, #188]	; (800d088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d108      	bne.n	800cfe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cfd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	4313      	orrs	r3, r2
 800cff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	68fa      	ldr	r2, [r7, #12]
 800cffa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a20      	ldr	r2, [pc, #128]	; (800d084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d022      	beq.n	800d04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d00e:	d01d      	beq.n	800d04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a1d      	ldr	r2, [pc, #116]	; (800d08c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d018      	beq.n	800d04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a1c      	ldr	r2, [pc, #112]	; (800d090 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d013      	beq.n	800d04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a1a      	ldr	r2, [pc, #104]	; (800d094 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d00e      	beq.n	800d04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a15      	ldr	r2, [pc, #84]	; (800d088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d009      	beq.n	800d04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a16      	ldr	r2, [pc, #88]	; (800d098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d004      	beq.n	800d04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a15      	ldr	r2, [pc, #84]	; (800d09c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d10c      	bne.n	800d066 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d052:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	68ba      	ldr	r2, [r7, #8]
 800d05a:	4313      	orrs	r3, r2
 800d05c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	68ba      	ldr	r2, [r7, #8]
 800d064:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2201      	movs	r2, #1
 800d06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3714      	adds	r7, #20
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr
 800d084:	40010000 	.word	0x40010000
 800d088:	40010400 	.word	0x40010400
 800d08c:	40000400 	.word	0x40000400
 800d090:	40000800 	.word	0x40000800
 800d094:	40000c00 	.word	0x40000c00
 800d098:	40001800 	.word	0x40001800
 800d09c:	40014000 	.word	0x40014000

0800d0a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d101      	bne.n	800d0bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d0b8:	2302      	movs	r3, #2
 800d0ba:	e065      	b.n	800d188 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	691b      	ldr	r3, [r3, #16]
 800d106:	4313      	orrs	r3, r2
 800d108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	695b      	ldr	r3, [r3, #20]
 800d114:	4313      	orrs	r3, r2
 800d116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d122:	4313      	orrs	r3, r2
 800d124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	699b      	ldr	r3, [r3, #24]
 800d130:	041b      	lsls	r3, r3, #16
 800d132:	4313      	orrs	r3, r2
 800d134:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4a16      	ldr	r2, [pc, #88]	; (800d194 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d004      	beq.n	800d14a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a14      	ldr	r2, [pc, #80]	; (800d198 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d115      	bne.n	800d176 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d154:	051b      	lsls	r3, r3, #20
 800d156:	4313      	orrs	r3, r2
 800d158:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	69db      	ldr	r3, [r3, #28]
 800d164:	4313      	orrs	r3, r2
 800d166:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	6a1b      	ldr	r3, [r3, #32]
 800d172:	4313      	orrs	r3, r2
 800d174:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d186:	2300      	movs	r3, #0
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3714      	adds	r7, #20
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr
 800d194:	40010000 	.word	0x40010000
 800d198:	40010400 	.word	0x40010400

0800d19c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d1a4:	bf00      	nop
 800d1a6:	370c      	adds	r7, #12
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d1b8:	bf00      	nop
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d1cc:	bf00      	nop
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d101      	bne.n	800d1ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e042      	b.n	800d270 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d106      	bne.n	800d202 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7f8 f9fd 	bl	80055fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2224      	movs	r2, #36	; 0x24
 800d206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f022 0201 	bic.w	r2, r2, #1
 800d218:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 fdee 	bl	800ddfc <UART_SetConfig>
 800d220:	4603      	mov	r3, r0
 800d222:	2b01      	cmp	r3, #1
 800d224:	d101      	bne.n	800d22a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d226:	2301      	movs	r3, #1
 800d228:	e022      	b.n	800d270 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d002      	beq.n	800d238 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f001 fb42 	bl	800e8bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	685a      	ldr	r2, [r3, #4]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	689a      	ldr	r2, [r3, #8]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f042 0201 	orr.w	r2, r2, #1
 800d266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f001 fbc9 	bl	800ea00 <UART_CheckIdleState>
 800d26e:	4603      	mov	r3, r0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b08a      	sub	sp, #40	; 0x28
 800d27c:	af02      	add	r7, sp, #8
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	603b      	str	r3, [r7, #0]
 800d284:	4613      	mov	r3, r2
 800d286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d28e:	2b20      	cmp	r3, #32
 800d290:	f040 8083 	bne.w	800d39a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d002      	beq.n	800d2a0 <HAL_UART_Transmit+0x28>
 800d29a:	88fb      	ldrh	r3, [r7, #6]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d101      	bne.n	800d2a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e07b      	b.n	800d39c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d101      	bne.n	800d2b2 <HAL_UART_Transmit+0x3a>
 800d2ae:	2302      	movs	r3, #2
 800d2b0:	e074      	b.n	800d39c <HAL_UART_Transmit+0x124>
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2221      	movs	r2, #33	; 0x21
 800d2c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d2ca:	f7f8 fc7d 	bl	8005bc8 <HAL_GetTick>
 800d2ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	88fa      	ldrh	r2, [r7, #6]
 800d2d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	88fa      	ldrh	r2, [r7, #6]
 800d2dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2e8:	d108      	bne.n	800d2fc <HAL_UART_Transmit+0x84>
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d104      	bne.n	800d2fc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	61bb      	str	r3, [r7, #24]
 800d2fa:	e003      	b.n	800d304 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d300:	2300      	movs	r3, #0
 800d302:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2200      	movs	r2, #0
 800d308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d30c:	e02c      	b.n	800d368 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	9300      	str	r3, [sp, #0]
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	2200      	movs	r2, #0
 800d316:	2180      	movs	r1, #128	; 0x80
 800d318:	68f8      	ldr	r0, [r7, #12]
 800d31a:	f001 fbbc 	bl	800ea96 <UART_WaitOnFlagUntilTimeout>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d001      	beq.n	800d328 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d324:	2303      	movs	r3, #3
 800d326:	e039      	b.n	800d39c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d10b      	bne.n	800d346 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	881b      	ldrh	r3, [r3, #0]
 800d332:	461a      	mov	r2, r3
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d33c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	3302      	adds	r3, #2
 800d342:	61bb      	str	r3, [r7, #24]
 800d344:	e007      	b.n	800d356 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	781a      	ldrb	r2, [r3, #0]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	3301      	adds	r3, #1
 800d354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	3b01      	subs	r3, #1
 800d360:	b29a      	uxth	r2, r3
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d36e:	b29b      	uxth	r3, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1cc      	bne.n	800d30e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	2200      	movs	r2, #0
 800d37c:	2140      	movs	r1, #64	; 0x40
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f001 fb89 	bl	800ea96 <UART_WaitOnFlagUntilTimeout>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	d001      	beq.n	800d38e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d38a:	2303      	movs	r3, #3
 800d38c:	e006      	b.n	800d39c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2220      	movs	r2, #32
 800d392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d396:	2300      	movs	r3, #0
 800d398:	e000      	b.n	800d39c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d39a:	2302      	movs	r3, #2
  }
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3720      	adds	r7, #32
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b08a      	sub	sp, #40	; 0x28
 800d3a8:	af02      	add	r7, sp, #8
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	603b      	str	r3, [r7, #0]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3ba:	2b20      	cmp	r3, #32
 800d3bc:	f040 80c0 	bne.w	800d540 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d002      	beq.n	800d3cc <HAL_UART_Receive+0x28>
 800d3c6:	88fb      	ldrh	r3, [r7, #6]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d101      	bne.n	800d3d0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e0b8      	b.n	800d542 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d101      	bne.n	800d3de <HAL_UART_Receive+0x3a>
 800d3da:	2302      	movs	r3, #2
 800d3dc:	e0b1      	b.n	800d542 <HAL_UART_Receive+0x19e>
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2222      	movs	r2, #34	; 0x22
 800d3f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d3fc:	f7f8 fbe4 	bl	8005bc8 <HAL_GetTick>
 800d400:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	88fa      	ldrh	r2, [r7, #6]
 800d406:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	88fa      	ldrh	r2, [r7, #6]
 800d40e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	689b      	ldr	r3, [r3, #8]
 800d416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d41a:	d10e      	bne.n	800d43a <HAL_UART_Receive+0x96>
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	691b      	ldr	r3, [r3, #16]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d105      	bne.n	800d430 <HAL_UART_Receive+0x8c>
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d42a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d42e:	e02d      	b.n	800d48c <HAL_UART_Receive+0xe8>
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	22ff      	movs	r2, #255	; 0xff
 800d434:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d438:	e028      	b.n	800d48c <HAL_UART_Receive+0xe8>
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	689b      	ldr	r3, [r3, #8]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d10d      	bne.n	800d45e <HAL_UART_Receive+0xba>
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d104      	bne.n	800d454 <HAL_UART_Receive+0xb0>
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	22ff      	movs	r2, #255	; 0xff
 800d44e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d452:	e01b      	b.n	800d48c <HAL_UART_Receive+0xe8>
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	227f      	movs	r2, #127	; 0x7f
 800d458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d45c:	e016      	b.n	800d48c <HAL_UART_Receive+0xe8>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d466:	d10d      	bne.n	800d484 <HAL_UART_Receive+0xe0>
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d104      	bne.n	800d47a <HAL_UART_Receive+0xd6>
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	227f      	movs	r2, #127	; 0x7f
 800d474:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d478:	e008      	b.n	800d48c <HAL_UART_Receive+0xe8>
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	223f      	movs	r2, #63	; 0x3f
 800d47e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d482:	e003      	b.n	800d48c <HAL_UART_Receive+0xe8>
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2200      	movs	r2, #0
 800d488:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d492:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d49c:	d108      	bne.n	800d4b0 <HAL_UART_Receive+0x10c>
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d104      	bne.n	800d4b0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	61bb      	str	r3, [r7, #24]
 800d4ae:	e003      	b.n	800d4b8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d4c0:	e032      	b.n	800d528 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	9300      	str	r3, [sp, #0]
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	2120      	movs	r1, #32
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f001 fae2 	bl	800ea96 <UART_WaitOnFlagUntilTimeout>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d001      	beq.n	800d4dc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800d4d8:	2303      	movs	r3, #3
 800d4da:	e032      	b.n	800d542 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d10c      	bne.n	800d4fc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	8a7b      	ldrh	r3, [r7, #18]
 800d4ec:	4013      	ands	r3, r2
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	3302      	adds	r3, #2
 800d4f8:	61bb      	str	r3, [r7, #24]
 800d4fa:	e00c      	b.n	800d516 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d502:	b2da      	uxtb	r2, r3
 800d504:	8a7b      	ldrh	r3, [r7, #18]
 800d506:	b2db      	uxtb	r3, r3
 800d508:	4013      	ands	r3, r2
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	3301      	adds	r3, #1
 800d514:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	3b01      	subs	r3, #1
 800d520:	b29a      	uxth	r2, r3
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d52e:	b29b      	uxth	r3, r3
 800d530:	2b00      	cmp	r3, #0
 800d532:	d1c6      	bne.n	800d4c2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2220      	movs	r2, #32
 800d538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d53c:	2300      	movs	r3, #0
 800d53e:	e000      	b.n	800d542 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800d540:	2302      	movs	r3, #2
  }
}
 800d542:	4618      	mov	r0, r3
 800d544:	3720      	adds	r7, #32
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
	...

0800d54c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b08a      	sub	sp, #40	; 0x28
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	4613      	mov	r3, r2
 800d558:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d560:	2b20      	cmp	r3, #32
 800d562:	d17a      	bne.n	800d65a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d002      	beq.n	800d570 <HAL_UART_Transmit_DMA+0x24>
 800d56a:	88fb      	ldrh	r3, [r7, #6]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d101      	bne.n	800d574 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d570:	2301      	movs	r3, #1
 800d572:	e073      	b.n	800d65c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d101      	bne.n	800d582 <HAL_UART_Transmit_DMA+0x36>
 800d57e:	2302      	movs	r3, #2
 800d580:	e06c      	b.n	800d65c <HAL_UART_Transmit_DMA+0x110>
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2201      	movs	r2, #1
 800d586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	68ba      	ldr	r2, [r7, #8]
 800d58e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	88fa      	ldrh	r2, [r7, #6]
 800d594:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	88fa      	ldrh	r2, [r7, #6]
 800d59c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2221      	movs	r2, #33	; 0x21
 800d5ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d02c      	beq.n	800d612 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5bc:	4a29      	ldr	r2, [pc, #164]	; (800d664 <HAL_UART_Transmit_DMA+0x118>)
 800d5be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5c4:	4a28      	ldr	r2, [pc, #160]	; (800d668 <HAL_UART_Transmit_DMA+0x11c>)
 800d5c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5cc:	4a27      	ldr	r2, [pc, #156]	; (800d66c <HAL_UART_Transmit_DMA+0x120>)
 800d5ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	3328      	adds	r3, #40	; 0x28
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	88fb      	ldrh	r3, [r7, #6]
 800d5ec:	f7f9 f99e 	bl	800692c <HAL_DMA_Start_IT>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d00d      	beq.n	800d612 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2210      	movs	r2, #16
 800d5fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2200      	movs	r2, #0
 800d602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2220      	movs	r2, #32
 800d60a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800d60e:	2301      	movs	r3, #1
 800d610:	e024      	b.n	800d65c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	2240      	movs	r2, #64	; 0x40
 800d618:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2200      	movs	r2, #0
 800d61e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	3308      	adds	r3, #8
 800d628:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	e853 3f00 	ldrex	r3, [r3]
 800d630:	613b      	str	r3, [r7, #16]
   return(result);
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d638:	627b      	str	r3, [r7, #36]	; 0x24
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	3308      	adds	r3, #8
 800d640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d642:	623a      	str	r2, [r7, #32]
 800d644:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d646:	69f9      	ldr	r1, [r7, #28]
 800d648:	6a3a      	ldr	r2, [r7, #32]
 800d64a:	e841 2300 	strex	r3, r2, [r1]
 800d64e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d1e5      	bne.n	800d622 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800d656:	2300      	movs	r3, #0
 800d658:	e000      	b.n	800d65c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800d65a:	2302      	movs	r3, #2
  }
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3728      	adds	r7, #40	; 0x28
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	0800eec9 	.word	0x0800eec9
 800d668:	0800ef5f 	.word	0x0800ef5f
 800d66c:	0800f0d5 	.word	0x0800f0d5

0800d670 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b0ba      	sub	sp, #232	; 0xe8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	69db      	ldr	r3, [r3, #28]
 800d67e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	689b      	ldr	r3, [r3, #8]
 800d692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d696:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d69a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d69e:	4013      	ands	r3, r2
 800d6a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d6a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d11b      	bne.n	800d6e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d6ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6b0:	f003 0320 	and.w	r3, r3, #32
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d015      	beq.n	800d6e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d6b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6bc:	f003 0320 	and.w	r3, r3, #32
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d105      	bne.n	800d6d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d6c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d6c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d009      	beq.n	800d6e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 835a 	beq.w	800dd8e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	4798      	blx	r3
      }
      return;
 800d6e2:	e354      	b.n	800dd8e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d6e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 811f 	beq.w	800d92c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d6ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d6f2:	4b8b      	ldr	r3, [pc, #556]	; (800d920 <HAL_UART_IRQHandler+0x2b0>)
 800d6f4:	4013      	ands	r3, r2
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d106      	bne.n	800d708 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d6fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d6fe:	4b89      	ldr	r3, [pc, #548]	; (800d924 <HAL_UART_IRQHandler+0x2b4>)
 800d700:	4013      	ands	r3, r2
 800d702:	2b00      	cmp	r3, #0
 800d704:	f000 8112 	beq.w	800d92c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d70c:	f003 0301 	and.w	r3, r3, #1
 800d710:	2b00      	cmp	r3, #0
 800d712:	d011      	beq.n	800d738 <HAL_UART_IRQHandler+0xc8>
 800d714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00b      	beq.n	800d738 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	2201      	movs	r2, #1
 800d726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d72e:	f043 0201 	orr.w	r2, r3, #1
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d73c:	f003 0302 	and.w	r3, r3, #2
 800d740:	2b00      	cmp	r3, #0
 800d742:	d011      	beq.n	800d768 <HAL_UART_IRQHandler+0xf8>
 800d744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d748:	f003 0301 	and.w	r3, r3, #1
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00b      	beq.n	800d768 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2202      	movs	r2, #2
 800d756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d75e:	f043 0204 	orr.w	r2, r3, #4
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d76c:	f003 0304 	and.w	r3, r3, #4
 800d770:	2b00      	cmp	r3, #0
 800d772:	d011      	beq.n	800d798 <HAL_UART_IRQHandler+0x128>
 800d774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d778:	f003 0301 	and.w	r3, r3, #1
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d00b      	beq.n	800d798 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2204      	movs	r2, #4
 800d786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d78e:	f043 0202 	orr.w	r2, r3, #2
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d79c:	f003 0308 	and.w	r3, r3, #8
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d017      	beq.n	800d7d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7a8:	f003 0320 	and.w	r3, r3, #32
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d105      	bne.n	800d7bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d7b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d7b4:	4b5a      	ldr	r3, [pc, #360]	; (800d920 <HAL_UART_IRQHandler+0x2b0>)
 800d7b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00b      	beq.n	800d7d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2208      	movs	r2, #8
 800d7c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7ca:	f043 0208 	orr.w	r2, r3, #8
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d7d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d012      	beq.n	800d806 <HAL_UART_IRQHandler+0x196>
 800d7e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00c      	beq.n	800d806 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7fc:	f043 0220 	orr.w	r2, r3, #32
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	f000 82c0 	beq.w	800dd92 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d816:	f003 0320 	and.w	r3, r3, #32
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d013      	beq.n	800d846 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d81e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d822:	f003 0320 	and.w	r3, r3, #32
 800d826:	2b00      	cmp	r3, #0
 800d828:	d105      	bne.n	800d836 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d82a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d82e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d832:	2b00      	cmp	r3, #0
 800d834:	d007      	beq.n	800d846 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d003      	beq.n	800d846 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d84c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d85a:	2b40      	cmp	r3, #64	; 0x40
 800d85c:	d005      	beq.n	800d86a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d85e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d862:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d866:	2b00      	cmp	r3, #0
 800d868:	d04f      	beq.n	800d90a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f001 fac6 	bl	800edfc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d87a:	2b40      	cmp	r3, #64	; 0x40
 800d87c:	d141      	bne.n	800d902 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	3308      	adds	r3, #8
 800d884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d88c:	e853 3f00 	ldrex	r3, [r3]
 800d890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d89c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	3308      	adds	r3, #8
 800d8a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d8aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d8ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d8b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d8ba:	e841 2300 	strex	r3, r2, [r1]
 800d8be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d8c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1d9      	bne.n	800d87e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d013      	beq.n	800d8fa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8d6:	4a14      	ldr	r2, [pc, #80]	; (800d928 <HAL_UART_IRQHandler+0x2b8>)
 800d8d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7f9 fdac 	bl	800743c <HAL_DMA_Abort_IT>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d017      	beq.n	800d91a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d8f4:	4610      	mov	r0, r2
 800d8f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8f8:	e00f      	b.n	800d91a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 fa74 	bl	800dde8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d900:	e00b      	b.n	800d91a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 fa70 	bl	800dde8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d908:	e007      	b.n	800d91a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 fa6c 	bl	800dde8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d918:	e23b      	b.n	800dd92 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d91a:	bf00      	nop
    return;
 800d91c:	e239      	b.n	800dd92 <HAL_UART_IRQHandler+0x722>
 800d91e:	bf00      	nop
 800d920:	10000001 	.word	0x10000001
 800d924:	04000120 	.word	0x04000120
 800d928:	0800f155 	.word	0x0800f155

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d930:	2b01      	cmp	r3, #1
 800d932:	f040 81ce 	bne.w	800dcd2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d93a:	f003 0310 	and.w	r3, r3, #16
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f000 81c7 	beq.w	800dcd2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d948:	f003 0310 	and.w	r3, r3, #16
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f000 81c0 	beq.w	800dcd2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	2210      	movs	r2, #16
 800d958:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d964:	2b40      	cmp	r3, #64	; 0x40
 800d966:	f040 813b 	bne.w	800dbe0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a8b      	ldr	r2, [pc, #556]	; (800dba0 <HAL_UART_IRQHandler+0x530>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d059      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a89      	ldr	r2, [pc, #548]	; (800dba4 <HAL_UART_IRQHandler+0x534>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d053      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4a87      	ldr	r2, [pc, #540]	; (800dba8 <HAL_UART_IRQHandler+0x538>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d04d      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a85      	ldr	r2, [pc, #532]	; (800dbac <HAL_UART_IRQHandler+0x53c>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d047      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a83      	ldr	r2, [pc, #524]	; (800dbb0 <HAL_UART_IRQHandler+0x540>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d041      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a81      	ldr	r2, [pc, #516]	; (800dbb4 <HAL_UART_IRQHandler+0x544>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d03b      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a7f      	ldr	r2, [pc, #508]	; (800dbb8 <HAL_UART_IRQHandler+0x548>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d035      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a7d      	ldr	r2, [pc, #500]	; (800dbbc <HAL_UART_IRQHandler+0x54c>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d02f      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a7b      	ldr	r2, [pc, #492]	; (800dbc0 <HAL_UART_IRQHandler+0x550>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d029      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4a79      	ldr	r2, [pc, #484]	; (800dbc4 <HAL_UART_IRQHandler+0x554>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d023      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a77      	ldr	r2, [pc, #476]	; (800dbc8 <HAL_UART_IRQHandler+0x558>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d01d      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a75      	ldr	r2, [pc, #468]	; (800dbcc <HAL_UART_IRQHandler+0x55c>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d017      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a73      	ldr	r2, [pc, #460]	; (800dbd0 <HAL_UART_IRQHandler+0x560>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d011      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a71      	ldr	r2, [pc, #452]	; (800dbd4 <HAL_UART_IRQHandler+0x564>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d00b      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a6f      	ldr	r2, [pc, #444]	; (800dbd8 <HAL_UART_IRQHandler+0x568>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d005      	beq.n	800da2a <HAL_UART_IRQHandler+0x3ba>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a6d      	ldr	r2, [pc, #436]	; (800dbdc <HAL_UART_IRQHandler+0x56c>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d105      	bne.n	800da36 <HAL_UART_IRQHandler+0x3c6>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	b29b      	uxth	r3, r3
 800da34:	e004      	b.n	800da40 <HAL_UART_IRQHandler+0x3d0>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	b29b      	uxth	r3, r3
 800da40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800da44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f000 81a4 	beq.w	800dd96 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da58:	429a      	cmp	r2, r3
 800da5a:	f080 819c 	bcs.w	800dd96 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da6c:	69db      	ldr	r3, [r3, #28]
 800da6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da72:	f000 8086 	beq.w	800db82 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da82:	e853 3f00 	ldrex	r3, [r3]
 800da86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800da8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	461a      	mov	r2, r3
 800da9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800daa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800daa4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800daac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dab0:	e841 2300 	strex	r3, r2, [r1]
 800dab4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1da      	bne.n	800da76 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	3308      	adds	r3, #8
 800dac6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800daca:	e853 3f00 	ldrex	r3, [r3]
 800dace:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dad2:	f023 0301 	bic.w	r3, r3, #1
 800dad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	3308      	adds	r3, #8
 800dae0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dae4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dae8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800daec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800daf0:	e841 2300 	strex	r3, r2, [r1]
 800daf4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800daf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d1e1      	bne.n	800dac0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	3308      	adds	r3, #8
 800db02:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db06:	e853 3f00 	ldrex	r3, [r3]
 800db0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800db0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	3308      	adds	r3, #8
 800db1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800db20:	66fa      	str	r2, [r7, #108]	; 0x6c
 800db22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800db26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db28:	e841 2300 	strex	r3, r2, [r1]
 800db2c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800db2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db30:	2b00      	cmp	r3, #0
 800db32:	d1e3      	bne.n	800dafc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2220      	movs	r2, #32
 800db38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2200      	movs	r2, #0
 800db40:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db4a:	e853 3f00 	ldrex	r3, [r3]
 800db4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db52:	f023 0310 	bic.w	r3, r3, #16
 800db56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	461a      	mov	r2, r3
 800db60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800db64:	65bb      	str	r3, [r7, #88]	; 0x58
 800db66:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db6c:	e841 2300 	strex	r3, r2, [r1]
 800db70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db74:	2b00      	cmp	r3, #0
 800db76:	d1e4      	bne.n	800db42 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7f9 f93f 	bl	8006e00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db8e:	b29b      	uxth	r3, r3
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	b29b      	uxth	r3, r3
 800db94:	4619      	mov	r1, r3
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7f3 fff4 	bl	8001b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800db9c:	e0fb      	b.n	800dd96 <HAL_UART_IRQHandler+0x726>
 800db9e:	bf00      	nop
 800dba0:	40020010 	.word	0x40020010
 800dba4:	40020028 	.word	0x40020028
 800dba8:	40020040 	.word	0x40020040
 800dbac:	40020058 	.word	0x40020058
 800dbb0:	40020070 	.word	0x40020070
 800dbb4:	40020088 	.word	0x40020088
 800dbb8:	400200a0 	.word	0x400200a0
 800dbbc:	400200b8 	.word	0x400200b8
 800dbc0:	40020410 	.word	0x40020410
 800dbc4:	40020428 	.word	0x40020428
 800dbc8:	40020440 	.word	0x40020440
 800dbcc:	40020458 	.word	0x40020458
 800dbd0:	40020470 	.word	0x40020470
 800dbd4:	40020488 	.word	0x40020488
 800dbd8:	400204a0 	.word	0x400204a0
 800dbdc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	1ad3      	subs	r3, r2, r3
 800dbf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f000 80cc 	beq.w	800dd9a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dc02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f000 80c7 	beq.w	800dd9a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc14:	e853 3f00 	ldrex	r3, [r3]
 800dc18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dc20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	461a      	mov	r2, r3
 800dc2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dc2e:	647b      	str	r3, [r7, #68]	; 0x44
 800dc30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dc34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc36:	e841 2300 	strex	r3, r2, [r1]
 800dc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1e4      	bne.n	800dc0c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3308      	adds	r3, #8
 800dc48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4c:	e853 3f00 	ldrex	r3, [r3]
 800dc50:	623b      	str	r3, [r7, #32]
   return(result);
 800dc52:	6a3a      	ldr	r2, [r7, #32]
 800dc54:	4b54      	ldr	r3, [pc, #336]	; (800dda8 <HAL_UART_IRQHandler+0x738>)
 800dc56:	4013      	ands	r3, r2
 800dc58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	3308      	adds	r3, #8
 800dc62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dc66:	633a      	str	r2, [r7, #48]	; 0x30
 800dc68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc6e:	e841 2300 	strex	r3, r2, [r1]
 800dc72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1e3      	bne.n	800dc42 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2220      	movs	r2, #32
 800dc7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	e853 3f00 	ldrex	r3, [r3]
 800dc9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f023 0310 	bic.w	r3, r3, #16
 800dca2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	461a      	mov	r2, r3
 800dcac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dcb0:	61fb      	str	r3, [r7, #28]
 800dcb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb4:	69b9      	ldr	r1, [r7, #24]
 800dcb6:	69fa      	ldr	r2, [r7, #28]
 800dcb8:	e841 2300 	strex	r3, r2, [r1]
 800dcbc:	617b      	str	r3, [r7, #20]
   return(result);
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d1e4      	bne.n	800dc8e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dcc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dcc8:	4619      	mov	r1, r3
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f7f3 ff5a 	bl	8001b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dcd0:	e063      	b.n	800dd9a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dcd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00e      	beq.n	800dcfc <HAL_UART_IRQHandler+0x68c>
 800dcde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d008      	beq.n	800dcfc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dcf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f001 fa6e 	bl	800f1d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dcfa:	e051      	b.n	800dda0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dcfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d014      	beq.n	800dd32 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dd08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d105      	bne.n	800dd20 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dd14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d008      	beq.n	800dd32 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d03a      	beq.n	800dd9e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	4798      	blx	r3
    }
    return;
 800dd30:	e035      	b.n	800dd9e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dd32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d009      	beq.n	800dd52 <HAL_UART_IRQHandler+0x6e2>
 800dd3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d003      	beq.n	800dd52 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f001 fa18 	bl	800f180 <UART_EndTransmit_IT>
    return;
 800dd50:	e026      	b.n	800dda0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dd52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d009      	beq.n	800dd72 <HAL_UART_IRQHandler+0x702>
 800dd5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d003      	beq.n	800dd72 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f001 fa47 	bl	800f1fe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd70:	e016      	b.n	800dda0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dd72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d010      	beq.n	800dda0 <HAL_UART_IRQHandler+0x730>
 800dd7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	da0c      	bge.n	800dda0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f001 fa2f 	bl	800f1ea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd8c:	e008      	b.n	800dda0 <HAL_UART_IRQHandler+0x730>
      return;
 800dd8e:	bf00      	nop
 800dd90:	e006      	b.n	800dda0 <HAL_UART_IRQHandler+0x730>
    return;
 800dd92:	bf00      	nop
 800dd94:	e004      	b.n	800dda0 <HAL_UART_IRQHandler+0x730>
      return;
 800dd96:	bf00      	nop
 800dd98:	e002      	b.n	800dda0 <HAL_UART_IRQHandler+0x730>
      return;
 800dd9a:	bf00      	nop
 800dd9c:	e000      	b.n	800dda0 <HAL_UART_IRQHandler+0x730>
    return;
 800dd9e:	bf00      	nop
  }
}
 800dda0:	37e8      	adds	r7, #232	; 0xe8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	effffffe 	.word	0xeffffffe

0800ddac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ddb4:	bf00      	nop
 800ddb6:	370c      	adds	r7, #12
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ddc8:	bf00      	nop
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800dddc:	bf00      	nop
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b083      	sub	sp, #12
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ddf0:	bf00      	nop
 800ddf2:	370c      	adds	r7, #12
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr

0800ddfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ddfc:	b5b0      	push	{r4, r5, r7, lr}
 800ddfe:	b08e      	sub	sp, #56	; 0x38
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800de04:	2300      	movs	r3, #0
 800de06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	689a      	ldr	r2, [r3, #8]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	431a      	orrs	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	695b      	ldr	r3, [r3, #20]
 800de18:	431a      	orrs	r2, r3
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	69db      	ldr	r3, [r3, #28]
 800de1e:	4313      	orrs	r3, r2
 800de20:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	4bbf      	ldr	r3, [pc, #764]	; (800e128 <UART_SetConfig+0x32c>)
 800de2a:	4013      	ands	r3, r2
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	6812      	ldr	r2, [r2, #0]
 800de30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800de32:	430b      	orrs	r3, r1
 800de34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	68da      	ldr	r2, [r3, #12]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	430a      	orrs	r2, r1
 800de4a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	699b      	ldr	r3, [r3, #24]
 800de50:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4ab5      	ldr	r2, [pc, #724]	; (800e12c <UART_SetConfig+0x330>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d004      	beq.n	800de66 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a1b      	ldr	r3, [r3, #32]
 800de60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de62:	4313      	orrs	r3, r2
 800de64:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	689a      	ldr	r2, [r3, #8]
 800de6c:	4bb0      	ldr	r3, [pc, #704]	; (800e130 <UART_SetConfig+0x334>)
 800de6e:	4013      	ands	r3, r2
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	6812      	ldr	r2, [r2, #0]
 800de74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800de76:	430b      	orrs	r3, r1
 800de78:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de80:	f023 010f 	bic.w	r1, r3, #15
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	430a      	orrs	r2, r1
 800de8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4aa7      	ldr	r2, [pc, #668]	; (800e134 <UART_SetConfig+0x338>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d176      	bne.n	800df88 <UART_SetConfig+0x18c>
 800de9a:	4ba7      	ldr	r3, [pc, #668]	; (800e138 <UART_SetConfig+0x33c>)
 800de9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dea2:	2b28      	cmp	r3, #40	; 0x28
 800dea4:	d86c      	bhi.n	800df80 <UART_SetConfig+0x184>
 800dea6:	a201      	add	r2, pc, #4	; (adr r2, 800deac <UART_SetConfig+0xb0>)
 800dea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deac:	0800df51 	.word	0x0800df51
 800deb0:	0800df81 	.word	0x0800df81
 800deb4:	0800df81 	.word	0x0800df81
 800deb8:	0800df81 	.word	0x0800df81
 800debc:	0800df81 	.word	0x0800df81
 800dec0:	0800df81 	.word	0x0800df81
 800dec4:	0800df81 	.word	0x0800df81
 800dec8:	0800df81 	.word	0x0800df81
 800decc:	0800df59 	.word	0x0800df59
 800ded0:	0800df81 	.word	0x0800df81
 800ded4:	0800df81 	.word	0x0800df81
 800ded8:	0800df81 	.word	0x0800df81
 800dedc:	0800df81 	.word	0x0800df81
 800dee0:	0800df81 	.word	0x0800df81
 800dee4:	0800df81 	.word	0x0800df81
 800dee8:	0800df81 	.word	0x0800df81
 800deec:	0800df61 	.word	0x0800df61
 800def0:	0800df81 	.word	0x0800df81
 800def4:	0800df81 	.word	0x0800df81
 800def8:	0800df81 	.word	0x0800df81
 800defc:	0800df81 	.word	0x0800df81
 800df00:	0800df81 	.word	0x0800df81
 800df04:	0800df81 	.word	0x0800df81
 800df08:	0800df81 	.word	0x0800df81
 800df0c:	0800df69 	.word	0x0800df69
 800df10:	0800df81 	.word	0x0800df81
 800df14:	0800df81 	.word	0x0800df81
 800df18:	0800df81 	.word	0x0800df81
 800df1c:	0800df81 	.word	0x0800df81
 800df20:	0800df81 	.word	0x0800df81
 800df24:	0800df81 	.word	0x0800df81
 800df28:	0800df81 	.word	0x0800df81
 800df2c:	0800df71 	.word	0x0800df71
 800df30:	0800df81 	.word	0x0800df81
 800df34:	0800df81 	.word	0x0800df81
 800df38:	0800df81 	.word	0x0800df81
 800df3c:	0800df81 	.word	0x0800df81
 800df40:	0800df81 	.word	0x0800df81
 800df44:	0800df81 	.word	0x0800df81
 800df48:	0800df81 	.word	0x0800df81
 800df4c:	0800df79 	.word	0x0800df79
 800df50:	2301      	movs	r3, #1
 800df52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df56:	e222      	b.n	800e39e <UART_SetConfig+0x5a2>
 800df58:	2304      	movs	r3, #4
 800df5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df5e:	e21e      	b.n	800e39e <UART_SetConfig+0x5a2>
 800df60:	2308      	movs	r3, #8
 800df62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df66:	e21a      	b.n	800e39e <UART_SetConfig+0x5a2>
 800df68:	2310      	movs	r3, #16
 800df6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df6e:	e216      	b.n	800e39e <UART_SetConfig+0x5a2>
 800df70:	2320      	movs	r3, #32
 800df72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df76:	e212      	b.n	800e39e <UART_SetConfig+0x5a2>
 800df78:	2340      	movs	r3, #64	; 0x40
 800df7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df7e:	e20e      	b.n	800e39e <UART_SetConfig+0x5a2>
 800df80:	2380      	movs	r3, #128	; 0x80
 800df82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df86:	e20a      	b.n	800e39e <UART_SetConfig+0x5a2>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a6b      	ldr	r2, [pc, #428]	; (800e13c <UART_SetConfig+0x340>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d130      	bne.n	800dff4 <UART_SetConfig+0x1f8>
 800df92:	4b69      	ldr	r3, [pc, #420]	; (800e138 <UART_SetConfig+0x33c>)
 800df94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df96:	f003 0307 	and.w	r3, r3, #7
 800df9a:	2b05      	cmp	r3, #5
 800df9c:	d826      	bhi.n	800dfec <UART_SetConfig+0x1f0>
 800df9e:	a201      	add	r2, pc, #4	; (adr r2, 800dfa4 <UART_SetConfig+0x1a8>)
 800dfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa4:	0800dfbd 	.word	0x0800dfbd
 800dfa8:	0800dfc5 	.word	0x0800dfc5
 800dfac:	0800dfcd 	.word	0x0800dfcd
 800dfb0:	0800dfd5 	.word	0x0800dfd5
 800dfb4:	0800dfdd 	.word	0x0800dfdd
 800dfb8:	0800dfe5 	.word	0x0800dfe5
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfc2:	e1ec      	b.n	800e39e <UART_SetConfig+0x5a2>
 800dfc4:	2304      	movs	r3, #4
 800dfc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfca:	e1e8      	b.n	800e39e <UART_SetConfig+0x5a2>
 800dfcc:	2308      	movs	r3, #8
 800dfce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfd2:	e1e4      	b.n	800e39e <UART_SetConfig+0x5a2>
 800dfd4:	2310      	movs	r3, #16
 800dfd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfda:	e1e0      	b.n	800e39e <UART_SetConfig+0x5a2>
 800dfdc:	2320      	movs	r3, #32
 800dfde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfe2:	e1dc      	b.n	800e39e <UART_SetConfig+0x5a2>
 800dfe4:	2340      	movs	r3, #64	; 0x40
 800dfe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfea:	e1d8      	b.n	800e39e <UART_SetConfig+0x5a2>
 800dfec:	2380      	movs	r3, #128	; 0x80
 800dfee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dff2:	e1d4      	b.n	800e39e <UART_SetConfig+0x5a2>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a51      	ldr	r2, [pc, #324]	; (800e140 <UART_SetConfig+0x344>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d130      	bne.n	800e060 <UART_SetConfig+0x264>
 800dffe:	4b4e      	ldr	r3, [pc, #312]	; (800e138 <UART_SetConfig+0x33c>)
 800e000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e002:	f003 0307 	and.w	r3, r3, #7
 800e006:	2b05      	cmp	r3, #5
 800e008:	d826      	bhi.n	800e058 <UART_SetConfig+0x25c>
 800e00a:	a201      	add	r2, pc, #4	; (adr r2, 800e010 <UART_SetConfig+0x214>)
 800e00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e010:	0800e029 	.word	0x0800e029
 800e014:	0800e031 	.word	0x0800e031
 800e018:	0800e039 	.word	0x0800e039
 800e01c:	0800e041 	.word	0x0800e041
 800e020:	0800e049 	.word	0x0800e049
 800e024:	0800e051 	.word	0x0800e051
 800e028:	2300      	movs	r3, #0
 800e02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e02e:	e1b6      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e030:	2304      	movs	r3, #4
 800e032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e036:	e1b2      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e038:	2308      	movs	r3, #8
 800e03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e03e:	e1ae      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e040:	2310      	movs	r3, #16
 800e042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e046:	e1aa      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e048:	2320      	movs	r3, #32
 800e04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e04e:	e1a6      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e050:	2340      	movs	r3, #64	; 0x40
 800e052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e056:	e1a2      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e058:	2380      	movs	r3, #128	; 0x80
 800e05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e05e:	e19e      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4a37      	ldr	r2, [pc, #220]	; (800e144 <UART_SetConfig+0x348>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d130      	bne.n	800e0cc <UART_SetConfig+0x2d0>
 800e06a:	4b33      	ldr	r3, [pc, #204]	; (800e138 <UART_SetConfig+0x33c>)
 800e06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e06e:	f003 0307 	and.w	r3, r3, #7
 800e072:	2b05      	cmp	r3, #5
 800e074:	d826      	bhi.n	800e0c4 <UART_SetConfig+0x2c8>
 800e076:	a201      	add	r2, pc, #4	; (adr r2, 800e07c <UART_SetConfig+0x280>)
 800e078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e07c:	0800e095 	.word	0x0800e095
 800e080:	0800e09d 	.word	0x0800e09d
 800e084:	0800e0a5 	.word	0x0800e0a5
 800e088:	0800e0ad 	.word	0x0800e0ad
 800e08c:	0800e0b5 	.word	0x0800e0b5
 800e090:	0800e0bd 	.word	0x0800e0bd
 800e094:	2300      	movs	r3, #0
 800e096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e09a:	e180      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e09c:	2304      	movs	r3, #4
 800e09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0a2:	e17c      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e0a4:	2308      	movs	r3, #8
 800e0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0aa:	e178      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e0ac:	2310      	movs	r3, #16
 800e0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0b2:	e174      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e0b4:	2320      	movs	r3, #32
 800e0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0ba:	e170      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e0bc:	2340      	movs	r3, #64	; 0x40
 800e0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0c2:	e16c      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e0c4:	2380      	movs	r3, #128	; 0x80
 800e0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0ca:	e168      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a1d      	ldr	r2, [pc, #116]	; (800e148 <UART_SetConfig+0x34c>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d142      	bne.n	800e15c <UART_SetConfig+0x360>
 800e0d6:	4b18      	ldr	r3, [pc, #96]	; (800e138 <UART_SetConfig+0x33c>)
 800e0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0da:	f003 0307 	and.w	r3, r3, #7
 800e0de:	2b05      	cmp	r3, #5
 800e0e0:	d838      	bhi.n	800e154 <UART_SetConfig+0x358>
 800e0e2:	a201      	add	r2, pc, #4	; (adr r2, 800e0e8 <UART_SetConfig+0x2ec>)
 800e0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e8:	0800e101 	.word	0x0800e101
 800e0ec:	0800e109 	.word	0x0800e109
 800e0f0:	0800e111 	.word	0x0800e111
 800e0f4:	0800e119 	.word	0x0800e119
 800e0f8:	0800e121 	.word	0x0800e121
 800e0fc:	0800e14d 	.word	0x0800e14d
 800e100:	2300      	movs	r3, #0
 800e102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e106:	e14a      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e108:	2304      	movs	r3, #4
 800e10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e10e:	e146      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e110:	2308      	movs	r3, #8
 800e112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e116:	e142      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e118:	2310      	movs	r3, #16
 800e11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e11e:	e13e      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e120:	2320      	movs	r3, #32
 800e122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e126:	e13a      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e128:	cfff69f3 	.word	0xcfff69f3
 800e12c:	58000c00 	.word	0x58000c00
 800e130:	11fff4ff 	.word	0x11fff4ff
 800e134:	40011000 	.word	0x40011000
 800e138:	58024400 	.word	0x58024400
 800e13c:	40004400 	.word	0x40004400
 800e140:	40004800 	.word	0x40004800
 800e144:	40004c00 	.word	0x40004c00
 800e148:	40005000 	.word	0x40005000
 800e14c:	2340      	movs	r3, #64	; 0x40
 800e14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e152:	e124      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e154:	2380      	movs	r3, #128	; 0x80
 800e156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e15a:	e120      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4acc      	ldr	r2, [pc, #816]	; (800e494 <UART_SetConfig+0x698>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d176      	bne.n	800e254 <UART_SetConfig+0x458>
 800e166:	4bcc      	ldr	r3, [pc, #816]	; (800e498 <UART_SetConfig+0x69c>)
 800e168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e16a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e16e:	2b28      	cmp	r3, #40	; 0x28
 800e170:	d86c      	bhi.n	800e24c <UART_SetConfig+0x450>
 800e172:	a201      	add	r2, pc, #4	; (adr r2, 800e178 <UART_SetConfig+0x37c>)
 800e174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e178:	0800e21d 	.word	0x0800e21d
 800e17c:	0800e24d 	.word	0x0800e24d
 800e180:	0800e24d 	.word	0x0800e24d
 800e184:	0800e24d 	.word	0x0800e24d
 800e188:	0800e24d 	.word	0x0800e24d
 800e18c:	0800e24d 	.word	0x0800e24d
 800e190:	0800e24d 	.word	0x0800e24d
 800e194:	0800e24d 	.word	0x0800e24d
 800e198:	0800e225 	.word	0x0800e225
 800e19c:	0800e24d 	.word	0x0800e24d
 800e1a0:	0800e24d 	.word	0x0800e24d
 800e1a4:	0800e24d 	.word	0x0800e24d
 800e1a8:	0800e24d 	.word	0x0800e24d
 800e1ac:	0800e24d 	.word	0x0800e24d
 800e1b0:	0800e24d 	.word	0x0800e24d
 800e1b4:	0800e24d 	.word	0x0800e24d
 800e1b8:	0800e22d 	.word	0x0800e22d
 800e1bc:	0800e24d 	.word	0x0800e24d
 800e1c0:	0800e24d 	.word	0x0800e24d
 800e1c4:	0800e24d 	.word	0x0800e24d
 800e1c8:	0800e24d 	.word	0x0800e24d
 800e1cc:	0800e24d 	.word	0x0800e24d
 800e1d0:	0800e24d 	.word	0x0800e24d
 800e1d4:	0800e24d 	.word	0x0800e24d
 800e1d8:	0800e235 	.word	0x0800e235
 800e1dc:	0800e24d 	.word	0x0800e24d
 800e1e0:	0800e24d 	.word	0x0800e24d
 800e1e4:	0800e24d 	.word	0x0800e24d
 800e1e8:	0800e24d 	.word	0x0800e24d
 800e1ec:	0800e24d 	.word	0x0800e24d
 800e1f0:	0800e24d 	.word	0x0800e24d
 800e1f4:	0800e24d 	.word	0x0800e24d
 800e1f8:	0800e23d 	.word	0x0800e23d
 800e1fc:	0800e24d 	.word	0x0800e24d
 800e200:	0800e24d 	.word	0x0800e24d
 800e204:	0800e24d 	.word	0x0800e24d
 800e208:	0800e24d 	.word	0x0800e24d
 800e20c:	0800e24d 	.word	0x0800e24d
 800e210:	0800e24d 	.word	0x0800e24d
 800e214:	0800e24d 	.word	0x0800e24d
 800e218:	0800e245 	.word	0x0800e245
 800e21c:	2301      	movs	r3, #1
 800e21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e222:	e0bc      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e224:	2304      	movs	r3, #4
 800e226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e22a:	e0b8      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e22c:	2308      	movs	r3, #8
 800e22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e232:	e0b4      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e234:	2310      	movs	r3, #16
 800e236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e23a:	e0b0      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e23c:	2320      	movs	r3, #32
 800e23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e242:	e0ac      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e244:	2340      	movs	r3, #64	; 0x40
 800e246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e24a:	e0a8      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e24c:	2380      	movs	r3, #128	; 0x80
 800e24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e252:	e0a4      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4a90      	ldr	r2, [pc, #576]	; (800e49c <UART_SetConfig+0x6a0>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d130      	bne.n	800e2c0 <UART_SetConfig+0x4c4>
 800e25e:	4b8e      	ldr	r3, [pc, #568]	; (800e498 <UART_SetConfig+0x69c>)
 800e260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e262:	f003 0307 	and.w	r3, r3, #7
 800e266:	2b05      	cmp	r3, #5
 800e268:	d826      	bhi.n	800e2b8 <UART_SetConfig+0x4bc>
 800e26a:	a201      	add	r2, pc, #4	; (adr r2, 800e270 <UART_SetConfig+0x474>)
 800e26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e270:	0800e289 	.word	0x0800e289
 800e274:	0800e291 	.word	0x0800e291
 800e278:	0800e299 	.word	0x0800e299
 800e27c:	0800e2a1 	.word	0x0800e2a1
 800e280:	0800e2a9 	.word	0x0800e2a9
 800e284:	0800e2b1 	.word	0x0800e2b1
 800e288:	2300      	movs	r3, #0
 800e28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e28e:	e086      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e290:	2304      	movs	r3, #4
 800e292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e296:	e082      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e298:	2308      	movs	r3, #8
 800e29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e29e:	e07e      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e2a0:	2310      	movs	r3, #16
 800e2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2a6:	e07a      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e2a8:	2320      	movs	r3, #32
 800e2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2ae:	e076      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e2b0:	2340      	movs	r3, #64	; 0x40
 800e2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2b6:	e072      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e2b8:	2380      	movs	r3, #128	; 0x80
 800e2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2be:	e06e      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4a76      	ldr	r2, [pc, #472]	; (800e4a0 <UART_SetConfig+0x6a4>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d130      	bne.n	800e32c <UART_SetConfig+0x530>
 800e2ca:	4b73      	ldr	r3, [pc, #460]	; (800e498 <UART_SetConfig+0x69c>)
 800e2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2ce:	f003 0307 	and.w	r3, r3, #7
 800e2d2:	2b05      	cmp	r3, #5
 800e2d4:	d826      	bhi.n	800e324 <UART_SetConfig+0x528>
 800e2d6:	a201      	add	r2, pc, #4	; (adr r2, 800e2dc <UART_SetConfig+0x4e0>)
 800e2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2dc:	0800e2f5 	.word	0x0800e2f5
 800e2e0:	0800e2fd 	.word	0x0800e2fd
 800e2e4:	0800e305 	.word	0x0800e305
 800e2e8:	0800e30d 	.word	0x0800e30d
 800e2ec:	0800e315 	.word	0x0800e315
 800e2f0:	0800e31d 	.word	0x0800e31d
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2fa:	e050      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e2fc:	2304      	movs	r3, #4
 800e2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e302:	e04c      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e304:	2308      	movs	r3, #8
 800e306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e30a:	e048      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e30c:	2310      	movs	r3, #16
 800e30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e312:	e044      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e314:	2320      	movs	r3, #32
 800e316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e31a:	e040      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e31c:	2340      	movs	r3, #64	; 0x40
 800e31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e322:	e03c      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e324:	2380      	movs	r3, #128	; 0x80
 800e326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e32a:	e038      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4a5c      	ldr	r2, [pc, #368]	; (800e4a4 <UART_SetConfig+0x6a8>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d130      	bne.n	800e398 <UART_SetConfig+0x59c>
 800e336:	4b58      	ldr	r3, [pc, #352]	; (800e498 <UART_SetConfig+0x69c>)
 800e338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e33a:	f003 0307 	and.w	r3, r3, #7
 800e33e:	2b05      	cmp	r3, #5
 800e340:	d826      	bhi.n	800e390 <UART_SetConfig+0x594>
 800e342:	a201      	add	r2, pc, #4	; (adr r2, 800e348 <UART_SetConfig+0x54c>)
 800e344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e348:	0800e361 	.word	0x0800e361
 800e34c:	0800e369 	.word	0x0800e369
 800e350:	0800e371 	.word	0x0800e371
 800e354:	0800e379 	.word	0x0800e379
 800e358:	0800e381 	.word	0x0800e381
 800e35c:	0800e389 	.word	0x0800e389
 800e360:	2302      	movs	r3, #2
 800e362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e366:	e01a      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e368:	2304      	movs	r3, #4
 800e36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e36e:	e016      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e370:	2308      	movs	r3, #8
 800e372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e376:	e012      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e378:	2310      	movs	r3, #16
 800e37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e37e:	e00e      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e380:	2320      	movs	r3, #32
 800e382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e386:	e00a      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e388:	2340      	movs	r3, #64	; 0x40
 800e38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e38e:	e006      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e390:	2380      	movs	r3, #128	; 0x80
 800e392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e396:	e002      	b.n	800e39e <UART_SetConfig+0x5a2>
 800e398:	2380      	movs	r3, #128	; 0x80
 800e39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4a40      	ldr	r2, [pc, #256]	; (800e4a4 <UART_SetConfig+0x6a8>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	f040 80ef 	bne.w	800e588 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e3aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e3ae:	2b20      	cmp	r3, #32
 800e3b0:	dc46      	bgt.n	800e440 <UART_SetConfig+0x644>
 800e3b2:	2b02      	cmp	r3, #2
 800e3b4:	f2c0 8081 	blt.w	800e4ba <UART_SetConfig+0x6be>
 800e3b8:	3b02      	subs	r3, #2
 800e3ba:	2b1e      	cmp	r3, #30
 800e3bc:	d87d      	bhi.n	800e4ba <UART_SetConfig+0x6be>
 800e3be:	a201      	add	r2, pc, #4	; (adr r2, 800e3c4 <UART_SetConfig+0x5c8>)
 800e3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c4:	0800e447 	.word	0x0800e447
 800e3c8:	0800e4bb 	.word	0x0800e4bb
 800e3cc:	0800e44f 	.word	0x0800e44f
 800e3d0:	0800e4bb 	.word	0x0800e4bb
 800e3d4:	0800e4bb 	.word	0x0800e4bb
 800e3d8:	0800e4bb 	.word	0x0800e4bb
 800e3dc:	0800e45f 	.word	0x0800e45f
 800e3e0:	0800e4bb 	.word	0x0800e4bb
 800e3e4:	0800e4bb 	.word	0x0800e4bb
 800e3e8:	0800e4bb 	.word	0x0800e4bb
 800e3ec:	0800e4bb 	.word	0x0800e4bb
 800e3f0:	0800e4bb 	.word	0x0800e4bb
 800e3f4:	0800e4bb 	.word	0x0800e4bb
 800e3f8:	0800e4bb 	.word	0x0800e4bb
 800e3fc:	0800e46f 	.word	0x0800e46f
 800e400:	0800e4bb 	.word	0x0800e4bb
 800e404:	0800e4bb 	.word	0x0800e4bb
 800e408:	0800e4bb 	.word	0x0800e4bb
 800e40c:	0800e4bb 	.word	0x0800e4bb
 800e410:	0800e4bb 	.word	0x0800e4bb
 800e414:	0800e4bb 	.word	0x0800e4bb
 800e418:	0800e4bb 	.word	0x0800e4bb
 800e41c:	0800e4bb 	.word	0x0800e4bb
 800e420:	0800e4bb 	.word	0x0800e4bb
 800e424:	0800e4bb 	.word	0x0800e4bb
 800e428:	0800e4bb 	.word	0x0800e4bb
 800e42c:	0800e4bb 	.word	0x0800e4bb
 800e430:	0800e4bb 	.word	0x0800e4bb
 800e434:	0800e4bb 	.word	0x0800e4bb
 800e438:	0800e4bb 	.word	0x0800e4bb
 800e43c:	0800e4ad 	.word	0x0800e4ad
 800e440:	2b40      	cmp	r3, #64	; 0x40
 800e442:	d036      	beq.n	800e4b2 <UART_SetConfig+0x6b6>
 800e444:	e039      	b.n	800e4ba <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e446:	f7fc fe65 	bl	800b114 <HAL_RCCEx_GetD3PCLK1Freq>
 800e44a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e44c:	e03b      	b.n	800e4c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e44e:	f107 0314 	add.w	r3, r7, #20
 800e452:	4618      	mov	r0, r3
 800e454:	f7fc fe74 	bl	800b140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e458:	69bb      	ldr	r3, [r7, #24]
 800e45a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e45c:	e033      	b.n	800e4c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e45e:	f107 0308 	add.w	r3, r7, #8
 800e462:	4618      	mov	r0, r3
 800e464:	f7fc ffc0 	bl	800b3e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e46c:	e02b      	b.n	800e4c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e46e:	4b0a      	ldr	r3, [pc, #40]	; (800e498 <UART_SetConfig+0x69c>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f003 0320 	and.w	r3, r3, #32
 800e476:	2b00      	cmp	r3, #0
 800e478:	d009      	beq.n	800e48e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e47a:	4b07      	ldr	r3, [pc, #28]	; (800e498 <UART_SetConfig+0x69c>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	08db      	lsrs	r3, r3, #3
 800e480:	f003 0303 	and.w	r3, r3, #3
 800e484:	4a08      	ldr	r2, [pc, #32]	; (800e4a8 <UART_SetConfig+0x6ac>)
 800e486:	fa22 f303 	lsr.w	r3, r2, r3
 800e48a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e48c:	e01b      	b.n	800e4c6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800e48e:	4b06      	ldr	r3, [pc, #24]	; (800e4a8 <UART_SetConfig+0x6ac>)
 800e490:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e492:	e018      	b.n	800e4c6 <UART_SetConfig+0x6ca>
 800e494:	40011400 	.word	0x40011400
 800e498:	58024400 	.word	0x58024400
 800e49c:	40007800 	.word	0x40007800
 800e4a0:	40007c00 	.word	0x40007c00
 800e4a4:	58000c00 	.word	0x58000c00
 800e4a8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e4ac:	4bc4      	ldr	r3, [pc, #784]	; (800e7c0 <UART_SetConfig+0x9c4>)
 800e4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e4b0:	e009      	b.n	800e4c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e4b8:	e005      	b.n	800e4c6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e4c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f000 81da 	beq.w	800e882 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d2:	4abc      	ldr	r2, [pc, #752]	; (800e7c4 <UART_SetConfig+0x9c8>)
 800e4d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4d8:	461a      	mov	r2, r3
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4e0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	685a      	ldr	r2, [r3, #4]
 800e4e6:	4613      	mov	r3, r2
 800e4e8:	005b      	lsls	r3, r3, #1
 800e4ea:	4413      	add	r3, r2
 800e4ec:	6a3a      	ldr	r2, [r7, #32]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d305      	bcc.n	800e4fe <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e4f8:	6a3a      	ldr	r2, [r7, #32]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d903      	bls.n	800e506 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800e4fe:	2301      	movs	r3, #1
 800e500:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e504:	e1bd      	b.n	800e882 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e508:	4618      	mov	r0, r3
 800e50a:	f04f 0100 	mov.w	r1, #0
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e512:	4aac      	ldr	r2, [pc, #688]	; (800e7c4 <UART_SetConfig+0x9c8>)
 800e514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e518:	b29a      	uxth	r2, r3
 800e51a:	f04f 0300 	mov.w	r3, #0
 800e51e:	f7f2 f8f3 	bl	8000708 <__aeabi_uldivmod>
 800e522:	4602      	mov	r2, r0
 800e524:	460b      	mov	r3, r1
 800e526:	4610      	mov	r0, r2
 800e528:	4619      	mov	r1, r3
 800e52a:	f04f 0200 	mov.w	r2, #0
 800e52e:	f04f 0300 	mov.w	r3, #0
 800e532:	020b      	lsls	r3, r1, #8
 800e534:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e538:	0202      	lsls	r2, r0, #8
 800e53a:	6879      	ldr	r1, [r7, #4]
 800e53c:	6849      	ldr	r1, [r1, #4]
 800e53e:	0849      	lsrs	r1, r1, #1
 800e540:	4608      	mov	r0, r1
 800e542:	f04f 0100 	mov.w	r1, #0
 800e546:	1814      	adds	r4, r2, r0
 800e548:	eb43 0501 	adc.w	r5, r3, r1
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	461a      	mov	r2, r3
 800e552:	f04f 0300 	mov.w	r3, #0
 800e556:	4620      	mov	r0, r4
 800e558:	4629      	mov	r1, r5
 800e55a:	f7f2 f8d5 	bl	8000708 <__aeabi_uldivmod>
 800e55e:	4602      	mov	r2, r0
 800e560:	460b      	mov	r3, r1
 800e562:	4613      	mov	r3, r2
 800e564:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e56c:	d308      	bcc.n	800e580 <UART_SetConfig+0x784>
 800e56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e574:	d204      	bcs.n	800e580 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e57c:	60da      	str	r2, [r3, #12]
 800e57e:	e180      	b.n	800e882 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800e580:	2301      	movs	r3, #1
 800e582:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e586:	e17c      	b.n	800e882 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	69db      	ldr	r3, [r3, #28]
 800e58c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e590:	f040 80be 	bne.w	800e710 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800e594:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e598:	2b20      	cmp	r3, #32
 800e59a:	dc49      	bgt.n	800e630 <UART_SetConfig+0x834>
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	db7c      	blt.n	800e69a <UART_SetConfig+0x89e>
 800e5a0:	2b20      	cmp	r3, #32
 800e5a2:	d87a      	bhi.n	800e69a <UART_SetConfig+0x89e>
 800e5a4:	a201      	add	r2, pc, #4	; (adr r2, 800e5ac <UART_SetConfig+0x7b0>)
 800e5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5aa:	bf00      	nop
 800e5ac:	0800e637 	.word	0x0800e637
 800e5b0:	0800e63f 	.word	0x0800e63f
 800e5b4:	0800e69b 	.word	0x0800e69b
 800e5b8:	0800e69b 	.word	0x0800e69b
 800e5bc:	0800e647 	.word	0x0800e647
 800e5c0:	0800e69b 	.word	0x0800e69b
 800e5c4:	0800e69b 	.word	0x0800e69b
 800e5c8:	0800e69b 	.word	0x0800e69b
 800e5cc:	0800e657 	.word	0x0800e657
 800e5d0:	0800e69b 	.word	0x0800e69b
 800e5d4:	0800e69b 	.word	0x0800e69b
 800e5d8:	0800e69b 	.word	0x0800e69b
 800e5dc:	0800e69b 	.word	0x0800e69b
 800e5e0:	0800e69b 	.word	0x0800e69b
 800e5e4:	0800e69b 	.word	0x0800e69b
 800e5e8:	0800e69b 	.word	0x0800e69b
 800e5ec:	0800e667 	.word	0x0800e667
 800e5f0:	0800e69b 	.word	0x0800e69b
 800e5f4:	0800e69b 	.word	0x0800e69b
 800e5f8:	0800e69b 	.word	0x0800e69b
 800e5fc:	0800e69b 	.word	0x0800e69b
 800e600:	0800e69b 	.word	0x0800e69b
 800e604:	0800e69b 	.word	0x0800e69b
 800e608:	0800e69b 	.word	0x0800e69b
 800e60c:	0800e69b 	.word	0x0800e69b
 800e610:	0800e69b 	.word	0x0800e69b
 800e614:	0800e69b 	.word	0x0800e69b
 800e618:	0800e69b 	.word	0x0800e69b
 800e61c:	0800e69b 	.word	0x0800e69b
 800e620:	0800e69b 	.word	0x0800e69b
 800e624:	0800e69b 	.word	0x0800e69b
 800e628:	0800e69b 	.word	0x0800e69b
 800e62c:	0800e68d 	.word	0x0800e68d
 800e630:	2b40      	cmp	r3, #64	; 0x40
 800e632:	d02e      	beq.n	800e692 <UART_SetConfig+0x896>
 800e634:	e031      	b.n	800e69a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e636:	f7fb fe01 	bl	800a23c <HAL_RCC_GetPCLK1Freq>
 800e63a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e63c:	e033      	b.n	800e6a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e63e:	f7fb fe13 	bl	800a268 <HAL_RCC_GetPCLK2Freq>
 800e642:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e644:	e02f      	b.n	800e6a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e646:	f107 0314 	add.w	r3, r7, #20
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7fc fd78 	bl	800b140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e654:	e027      	b.n	800e6a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e656:	f107 0308 	add.w	r3, r7, #8
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fc fec4 	bl	800b3e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e664:	e01f      	b.n	800e6a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e666:	4b58      	ldr	r3, [pc, #352]	; (800e7c8 <UART_SetConfig+0x9cc>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f003 0320 	and.w	r3, r3, #32
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d009      	beq.n	800e686 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e672:	4b55      	ldr	r3, [pc, #340]	; (800e7c8 <UART_SetConfig+0x9cc>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	08db      	lsrs	r3, r3, #3
 800e678:	f003 0303 	and.w	r3, r3, #3
 800e67c:	4a53      	ldr	r2, [pc, #332]	; (800e7cc <UART_SetConfig+0x9d0>)
 800e67e:	fa22 f303 	lsr.w	r3, r2, r3
 800e682:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e684:	e00f      	b.n	800e6a6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800e686:	4b51      	ldr	r3, [pc, #324]	; (800e7cc <UART_SetConfig+0x9d0>)
 800e688:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e68a:	e00c      	b.n	800e6a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e68c:	4b4c      	ldr	r3, [pc, #304]	; (800e7c0 <UART_SetConfig+0x9c4>)
 800e68e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e690:	e009      	b.n	800e6a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e696:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e698:	e005      	b.n	800e6a6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800e69a:	2300      	movs	r3, #0
 800e69c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e6a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	f000 80ea 	beq.w	800e882 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b2:	4a44      	ldr	r2, [pc, #272]	; (800e7c4 <UART_SetConfig+0x9c8>)
 800e6b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6c0:	005a      	lsls	r2, r3, #1
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	085b      	lsrs	r3, r3, #1
 800e6c8:	441a      	add	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d6:	2b0f      	cmp	r3, #15
 800e6d8:	d916      	bls.n	800e708 <UART_SetConfig+0x90c>
 800e6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6e0:	d212      	bcs.n	800e708 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	f023 030f 	bic.w	r3, r3, #15
 800e6ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ee:	085b      	lsrs	r3, r3, #1
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	f003 0307 	and.w	r3, r3, #7
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e704:	60da      	str	r2, [r3, #12]
 800e706:	e0bc      	b.n	800e882 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e708:	2301      	movs	r3, #1
 800e70a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e70e:	e0b8      	b.n	800e882 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e710:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e714:	2b20      	cmp	r3, #32
 800e716:	dc4b      	bgt.n	800e7b0 <UART_SetConfig+0x9b4>
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f2c0 8087 	blt.w	800e82c <UART_SetConfig+0xa30>
 800e71e:	2b20      	cmp	r3, #32
 800e720:	f200 8084 	bhi.w	800e82c <UART_SetConfig+0xa30>
 800e724:	a201      	add	r2, pc, #4	; (adr r2, 800e72c <UART_SetConfig+0x930>)
 800e726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e72a:	bf00      	nop
 800e72c:	0800e7b7 	.word	0x0800e7b7
 800e730:	0800e7d1 	.word	0x0800e7d1
 800e734:	0800e82d 	.word	0x0800e82d
 800e738:	0800e82d 	.word	0x0800e82d
 800e73c:	0800e7d9 	.word	0x0800e7d9
 800e740:	0800e82d 	.word	0x0800e82d
 800e744:	0800e82d 	.word	0x0800e82d
 800e748:	0800e82d 	.word	0x0800e82d
 800e74c:	0800e7e9 	.word	0x0800e7e9
 800e750:	0800e82d 	.word	0x0800e82d
 800e754:	0800e82d 	.word	0x0800e82d
 800e758:	0800e82d 	.word	0x0800e82d
 800e75c:	0800e82d 	.word	0x0800e82d
 800e760:	0800e82d 	.word	0x0800e82d
 800e764:	0800e82d 	.word	0x0800e82d
 800e768:	0800e82d 	.word	0x0800e82d
 800e76c:	0800e7f9 	.word	0x0800e7f9
 800e770:	0800e82d 	.word	0x0800e82d
 800e774:	0800e82d 	.word	0x0800e82d
 800e778:	0800e82d 	.word	0x0800e82d
 800e77c:	0800e82d 	.word	0x0800e82d
 800e780:	0800e82d 	.word	0x0800e82d
 800e784:	0800e82d 	.word	0x0800e82d
 800e788:	0800e82d 	.word	0x0800e82d
 800e78c:	0800e82d 	.word	0x0800e82d
 800e790:	0800e82d 	.word	0x0800e82d
 800e794:	0800e82d 	.word	0x0800e82d
 800e798:	0800e82d 	.word	0x0800e82d
 800e79c:	0800e82d 	.word	0x0800e82d
 800e7a0:	0800e82d 	.word	0x0800e82d
 800e7a4:	0800e82d 	.word	0x0800e82d
 800e7a8:	0800e82d 	.word	0x0800e82d
 800e7ac:	0800e81f 	.word	0x0800e81f
 800e7b0:	2b40      	cmp	r3, #64	; 0x40
 800e7b2:	d037      	beq.n	800e824 <UART_SetConfig+0xa28>
 800e7b4:	e03a      	b.n	800e82c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7b6:	f7fb fd41 	bl	800a23c <HAL_RCC_GetPCLK1Freq>
 800e7ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e7bc:	e03c      	b.n	800e838 <UART_SetConfig+0xa3c>
 800e7be:	bf00      	nop
 800e7c0:	003d0900 	.word	0x003d0900
 800e7c4:	080128a0 	.word	0x080128a0
 800e7c8:	58024400 	.word	0x58024400
 800e7cc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7d0:	f7fb fd4a 	bl	800a268 <HAL_RCC_GetPCLK2Freq>
 800e7d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e7d6:	e02f      	b.n	800e838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7d8:	f107 0314 	add.w	r3, r7, #20
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7fc fcaf 	bl	800b140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e7e6:	e027      	b.n	800e838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7e8:	f107 0308 	add.w	r3, r7, #8
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fc fdfb 	bl	800b3e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e7f6:	e01f      	b.n	800e838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e7f8:	4b2c      	ldr	r3, [pc, #176]	; (800e8ac <UART_SetConfig+0xab0>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f003 0320 	and.w	r3, r3, #32
 800e800:	2b00      	cmp	r3, #0
 800e802:	d009      	beq.n	800e818 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e804:	4b29      	ldr	r3, [pc, #164]	; (800e8ac <UART_SetConfig+0xab0>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	08db      	lsrs	r3, r3, #3
 800e80a:	f003 0303 	and.w	r3, r3, #3
 800e80e:	4a28      	ldr	r2, [pc, #160]	; (800e8b0 <UART_SetConfig+0xab4>)
 800e810:	fa22 f303 	lsr.w	r3, r2, r3
 800e814:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e816:	e00f      	b.n	800e838 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800e818:	4b25      	ldr	r3, [pc, #148]	; (800e8b0 <UART_SetConfig+0xab4>)
 800e81a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e81c:	e00c      	b.n	800e838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e81e:	4b25      	ldr	r3, [pc, #148]	; (800e8b4 <UART_SetConfig+0xab8>)
 800e820:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e822:	e009      	b.n	800e838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e828:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e82a:	e005      	b.n	800e838 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800e82c:	2300      	movs	r3, #0
 800e82e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e830:	2301      	movs	r3, #1
 800e832:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e836:	bf00      	nop
    }

    if (pclk != 0U)
 800e838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d021      	beq.n	800e882 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e842:	4a1d      	ldr	r2, [pc, #116]	; (800e8b8 <UART_SetConfig+0xabc>)
 800e844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e848:	461a      	mov	r2, r3
 800e84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	085b      	lsrs	r3, r3, #1
 800e856:	441a      	add	r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e860:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e864:	2b0f      	cmp	r3, #15
 800e866:	d909      	bls.n	800e87c <UART_SetConfig+0xa80>
 800e868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e86e:	d205      	bcs.n	800e87c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	b29a      	uxth	r2, r3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	60da      	str	r2, [r3, #12]
 800e87a:	e002      	b.n	800e882 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e87c:	2301      	movs	r3, #1
 800e87e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2201      	movs	r2, #1
 800e886:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2201      	movs	r2, #1
 800e88e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2200      	movs	r2, #0
 800e896:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e89e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3738      	adds	r7, #56	; 0x38
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bdb0      	pop	{r4, r5, r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	58024400 	.word	0x58024400
 800e8b0:	03d09000 	.word	0x03d09000
 800e8b4:	003d0900 	.word	0x003d0900
 800e8b8:	080128a0 	.word	0x080128a0

0800e8bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8c8:	f003 0301 	and.w	r3, r3, #1
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00a      	beq.n	800e8e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	430a      	orrs	r2, r1
 800e8e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ea:	f003 0302 	and.w	r3, r3, #2
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d00a      	beq.n	800e908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	430a      	orrs	r2, r1
 800e906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e90c:	f003 0304 	and.w	r3, r3, #4
 800e910:	2b00      	cmp	r3, #0
 800e912:	d00a      	beq.n	800e92a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	430a      	orrs	r2, r1
 800e928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e92e:	f003 0308 	and.w	r3, r3, #8
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00a      	beq.n	800e94c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	430a      	orrs	r2, r1
 800e94a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e950:	f003 0310 	and.w	r3, r3, #16
 800e954:	2b00      	cmp	r3, #0
 800e956:	d00a      	beq.n	800e96e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	430a      	orrs	r2, r1
 800e96c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e972:	f003 0320 	and.w	r3, r3, #32
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00a      	beq.n	800e990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	430a      	orrs	r2, r1
 800e98e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d01a      	beq.n	800e9d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	430a      	orrs	r2, r1
 800e9b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e9ba:	d10a      	bne.n	800e9d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	430a      	orrs	r2, r1
 800e9d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d00a      	beq.n	800e9f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	430a      	orrs	r2, r1
 800e9f2:	605a      	str	r2, [r3, #4]
  }
}
 800e9f4:	bf00      	nop
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af02      	add	r7, sp, #8
 800ea06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ea10:	f7f7 f8da 	bl	8005bc8 <HAL_GetTick>
 800ea14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f003 0308 	and.w	r3, r3, #8
 800ea20:	2b08      	cmp	r3, #8
 800ea22:	d10e      	bne.n	800ea42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ea28:	9300      	str	r3, [sp, #0]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 f82f 	bl	800ea96 <UART_WaitOnFlagUntilTimeout>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d001      	beq.n	800ea42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea3e:	2303      	movs	r3, #3
 800ea40:	e025      	b.n	800ea8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f003 0304 	and.w	r3, r3, #4
 800ea4c:	2b04      	cmp	r3, #4
 800ea4e:	d10e      	bne.n	800ea6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 f819 	bl	800ea96 <UART_WaitOnFlagUntilTimeout>
 800ea64:	4603      	mov	r3, r0
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d001      	beq.n	800ea6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	e00f      	b.n	800ea8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2220      	movs	r2, #32
 800ea72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2220      	movs	r2, #32
 800ea7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2200      	movs	r2, #0
 800ea82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2200      	movs	r2, #0
 800ea88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea8c:	2300      	movs	r3, #0
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b09c      	sub	sp, #112	; 0x70
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	60f8      	str	r0, [r7, #12]
 800ea9e:	60b9      	str	r1, [r7, #8]
 800eaa0:	603b      	str	r3, [r7, #0]
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eaa6:	e0a9      	b.n	800ebfc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eaa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eaaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaae:	f000 80a5 	beq.w	800ebfc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eab2:	f7f7 f889 	bl	8005bc8 <HAL_GetTick>
 800eab6:	4602      	mov	r2, r0
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	1ad3      	subs	r3, r2, r3
 800eabc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d302      	bcc.n	800eac8 <UART_WaitOnFlagUntilTimeout+0x32>
 800eac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d140      	bne.n	800eb4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ead0:	e853 3f00 	ldrex	r3, [r3]
 800ead4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ead6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ead8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eadc:	667b      	str	r3, [r7, #100]	; 0x64
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	461a      	mov	r2, r3
 800eae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eae8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eaec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eaee:	e841 2300 	strex	r3, r2, [r1]
 800eaf2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800eaf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1e6      	bne.n	800eac8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	3308      	adds	r3, #8
 800eb00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb04:	e853 3f00 	ldrex	r3, [r3]
 800eb08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb0c:	f023 0301 	bic.w	r3, r3, #1
 800eb10:	663b      	str	r3, [r7, #96]	; 0x60
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	3308      	adds	r3, #8
 800eb18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb1a:	64ba      	str	r2, [r7, #72]	; 0x48
 800eb1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb22:	e841 2300 	strex	r3, r2, [r1]
 800eb26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eb28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1e5      	bne.n	800eafa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2220      	movs	r2, #32
 800eb32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2220      	movs	r2, #32
 800eb3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800eb46:	2303      	movs	r3, #3
 800eb48:	e069      	b.n	800ec1e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f003 0304 	and.w	r3, r3, #4
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d051      	beq.n	800ebfc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	69db      	ldr	r3, [r3, #28]
 800eb5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb66:	d149      	bne.n	800ebfc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7a:	e853 3f00 	ldrex	r3, [r3]
 800eb7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eb86:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb90:	637b      	str	r3, [r7, #52]	; 0x34
 800eb92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb98:	e841 2300 	strex	r3, r2, [r1]
 800eb9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d1e6      	bne.n	800eb72 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	3308      	adds	r3, #8
 800ebaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	e853 3f00 	ldrex	r3, [r3]
 800ebb2:	613b      	str	r3, [r7, #16]
   return(result);
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	f023 0301 	bic.w	r3, r3, #1
 800ebba:	66bb      	str	r3, [r7, #104]	; 0x68
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	3308      	adds	r3, #8
 800ebc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ebc4:	623a      	str	r2, [r7, #32]
 800ebc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebc8:	69f9      	ldr	r1, [r7, #28]
 800ebca:	6a3a      	ldr	r2, [r7, #32]
 800ebcc:	e841 2300 	strex	r3, r2, [r1]
 800ebd0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d1e5      	bne.n	800eba4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2220      	movs	r2, #32
 800ebdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2220      	movs	r2, #32
 800ebe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2220      	movs	r2, #32
 800ebec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ebf8:	2303      	movs	r3, #3
 800ebfa:	e010      	b.n	800ec1e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	69da      	ldr	r2, [r3, #28]
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	4013      	ands	r3, r2
 800ec06:	68ba      	ldr	r2, [r7, #8]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	bf0c      	ite	eq
 800ec0c:	2301      	moveq	r3, #1
 800ec0e:	2300      	movne	r3, #0
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	461a      	mov	r2, r3
 800ec14:	79fb      	ldrb	r3, [r7, #7]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	f43f af46 	beq.w	800eaa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ec1c:	2300      	movs	r3, #0
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3770      	adds	r7, #112	; 0x70
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
	...

0800ec28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b096      	sub	sp, #88	; 0x58
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	4613      	mov	r3, r2
 800ec34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	68ba      	ldr	r2, [r7, #8]
 800ec3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	88fa      	ldrh	r2, [r7, #6]
 800ec40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2200      	movs	r2, #0
 800ec48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2222      	movs	r2, #34	; 0x22
 800ec50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d02c      	beq.n	800ecb6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec60:	4a42      	ldr	r2, [pc, #264]	; (800ed6c <UART_Start_Receive_DMA+0x144>)
 800ec62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec68:	4a41      	ldr	r2, [pc, #260]	; (800ed70 <UART_Start_Receive_DMA+0x148>)
 800ec6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec70:	4a40      	ldr	r2, [pc, #256]	; (800ed74 <UART_Start_Receive_DMA+0x14c>)
 800ec72:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec78:	2200      	movs	r2, #0
 800ec7a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	3324      	adds	r3, #36	; 0x24
 800ec86:	4619      	mov	r1, r3
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	88fb      	ldrh	r3, [r7, #6]
 800ec90:	f7f7 fe4c 	bl	800692c <HAL_DMA_Start_IT>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d00d      	beq.n	800ecb6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2210      	movs	r2, #16
 800ec9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2200      	movs	r2, #0
 800eca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2220      	movs	r2, #32
 800ecae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	e055      	b.n	800ed62 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	691b      	ldr	r3, [r3, #16]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d018      	beq.n	800ecf8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecce:	e853 3f00 	ldrex	r3, [r3]
 800ecd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ecd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ecda:	657b      	str	r3, [r7, #84]	; 0x54
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	461a      	mov	r2, r3
 800ece2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ece4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ece6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ecec:	e841 2300 	strex	r3, r2, [r1]
 800ecf0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ecf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d1e6      	bne.n	800ecc6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	3308      	adds	r3, #8
 800ecfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed02:	e853 3f00 	ldrex	r3, [r3]
 800ed06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0a:	f043 0301 	orr.w	r3, r3, #1
 800ed0e:	653b      	str	r3, [r7, #80]	; 0x50
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	3308      	adds	r3, #8
 800ed16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed18:	637a      	str	r2, [r7, #52]	; 0x34
 800ed1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed20:	e841 2300 	strex	r3, r2, [r1]
 800ed24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ed26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d1e5      	bne.n	800ecf8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	3308      	adds	r3, #8
 800ed32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	e853 3f00 	ldrex	r3, [r3]
 800ed3a:	613b      	str	r3, [r7, #16]
   return(result);
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	3308      	adds	r3, #8
 800ed4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed4c:	623a      	str	r2, [r7, #32]
 800ed4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed50:	69f9      	ldr	r1, [r7, #28]
 800ed52:	6a3a      	ldr	r2, [r7, #32]
 800ed54:	e841 2300 	strex	r3, r2, [r1]
 800ed58:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d1e5      	bne.n	800ed2c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800ed60:	2300      	movs	r3, #0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3758      	adds	r7, #88	; 0x58
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	0800ef7b 	.word	0x0800ef7b
 800ed70:	0800f09d 	.word	0x0800f09d
 800ed74:	0800f0d5 	.word	0x0800f0d5

0800ed78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b08f      	sub	sp, #60	; 0x3c
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed86:	6a3b      	ldr	r3, [r7, #32]
 800ed88:	e853 3f00 	ldrex	r3, [r3]
 800ed8c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ed94:	637b      	str	r3, [r7, #52]	; 0x34
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eda0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eda4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eda6:	e841 2300 	strex	r3, r2, [r1]
 800edaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800edac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d1e6      	bne.n	800ed80 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	3308      	adds	r3, #8
 800edb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	e853 3f00 	ldrex	r3, [r3]
 800edc0:	60bb      	str	r3, [r7, #8]
   return(result);
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800edc8:	633b      	str	r3, [r7, #48]	; 0x30
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	3308      	adds	r3, #8
 800edd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edd2:	61ba      	str	r2, [r7, #24]
 800edd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd6:	6979      	ldr	r1, [r7, #20]
 800edd8:	69ba      	ldr	r2, [r7, #24]
 800edda:	e841 2300 	strex	r3, r2, [r1]
 800edde:	613b      	str	r3, [r7, #16]
   return(result);
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1e5      	bne.n	800edb2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2220      	movs	r2, #32
 800edea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800edee:	bf00      	nop
 800edf0:	373c      	adds	r7, #60	; 0x3c
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
	...

0800edfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b095      	sub	sp, #84	; 0x54
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee0c:	e853 3f00 	ldrex	r3, [r3]
 800ee10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ee12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	461a      	mov	r2, r3
 800ee20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee22:	643b      	str	r3, [r7, #64]	; 0x40
 800ee24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee2a:	e841 2300 	strex	r3, r2, [r1]
 800ee2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d1e6      	bne.n	800ee04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	3308      	adds	r3, #8
 800ee3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee3e:	6a3b      	ldr	r3, [r7, #32]
 800ee40:	e853 3f00 	ldrex	r3, [r3]
 800ee44:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee46:	69fa      	ldr	r2, [r7, #28]
 800ee48:	4b1e      	ldr	r3, [pc, #120]	; (800eec4 <UART_EndRxTransfer+0xc8>)
 800ee4a:	4013      	ands	r3, r2
 800ee4c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	3308      	adds	r3, #8
 800ee54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee56:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ee58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee5e:	e841 2300 	strex	r3, r2, [r1]
 800ee62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d1e5      	bne.n	800ee36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	d118      	bne.n	800eea4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	e853 3f00 	ldrex	r3, [r3]
 800ee7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f023 0310 	bic.w	r3, r3, #16
 800ee86:	647b      	str	r3, [r7, #68]	; 0x44
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee90:	61bb      	str	r3, [r7, #24]
 800ee92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee94:	6979      	ldr	r1, [r7, #20]
 800ee96:	69ba      	ldr	r2, [r7, #24]
 800ee98:	e841 2300 	strex	r3, r2, [r1]
 800ee9c:	613b      	str	r3, [r7, #16]
   return(result);
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d1e6      	bne.n	800ee72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2220      	movs	r2, #32
 800eea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800eeb8:	bf00      	nop
 800eeba:	3754      	adds	r7, #84	; 0x54
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr
 800eec4:	effffffe 	.word	0xeffffffe

0800eec8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b090      	sub	sp, #64	; 0x40
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	69db      	ldr	r3, [r3, #28]
 800eeda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eede:	d037      	beq.n	800ef50 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800eee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eee2:	2200      	movs	r2, #0
 800eee4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	3308      	adds	r3, #8
 800eeee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	e853 3f00 	ldrex	r3, [r3]
 800eef6:	623b      	str	r3, [r7, #32]
   return(result);
 800eef8:	6a3b      	ldr	r3, [r7, #32]
 800eefa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eefe:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	3308      	adds	r3, #8
 800ef06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef08:	633a      	str	r2, [r7, #48]	; 0x30
 800ef0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef10:	e841 2300 	strex	r3, r2, [r1]
 800ef14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ef16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d1e5      	bne.n	800eee8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	e853 3f00 	ldrex	r3, [r3]
 800ef28:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef30:	637b      	str	r3, [r7, #52]	; 0x34
 800ef32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	461a      	mov	r2, r3
 800ef38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef3a:	61fb      	str	r3, [r7, #28]
 800ef3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef3e:	69b9      	ldr	r1, [r7, #24]
 800ef40:	69fa      	ldr	r2, [r7, #28]
 800ef42:	e841 2300 	strex	r3, r2, [r1]
 800ef46:	617b      	str	r3, [r7, #20]
   return(result);
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d1e6      	bne.n	800ef1c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ef4e:	e002      	b.n	800ef56 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ef50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ef52:	f7fe ff2b 	bl	800ddac <HAL_UART_TxCpltCallback>
}
 800ef56:	bf00      	nop
 800ef58:	3740      	adds	r7, #64	; 0x40
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}

0800ef5e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ef5e:	b580      	push	{r7, lr}
 800ef60:	b084      	sub	sp, #16
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef6a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ef6c:	68f8      	ldr	r0, [r7, #12]
 800ef6e:	f7fe ff27 	bl	800ddc0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef72:	bf00      	nop
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b09c      	sub	sp, #112	; 0x70
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef86:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	69db      	ldr	r3, [r3, #28]
 800ef8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef90:	d071      	beq.n	800f076 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ef92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef94:	2200      	movs	r2, #0
 800ef96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efa2:	e853 3f00 	ldrex	r3, [r3]
 800efa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800efa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800efae:	66bb      	str	r3, [r7, #104]	; 0x68
 800efb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	461a      	mov	r2, r3
 800efb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efb8:	65bb      	str	r3, [r7, #88]	; 0x58
 800efba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800efbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800efc0:	e841 2300 	strex	r3, r2, [r1]
 800efc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800efc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d1e6      	bne.n	800ef9a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	3308      	adds	r3, #8
 800efd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd6:	e853 3f00 	ldrex	r3, [r3]
 800efda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800efdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efde:	f023 0301 	bic.w	r3, r3, #1
 800efe2:	667b      	str	r3, [r7, #100]	; 0x64
 800efe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	3308      	adds	r3, #8
 800efea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800efec:	647a      	str	r2, [r7, #68]	; 0x44
 800efee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eff4:	e841 2300 	strex	r3, r2, [r1]
 800eff8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800effa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800effc:	2b00      	cmp	r3, #0
 800effe:	d1e5      	bne.n	800efcc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	3308      	adds	r3, #8
 800f006:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00a:	e853 3f00 	ldrex	r3, [r3]
 800f00e:	623b      	str	r3, [r7, #32]
   return(result);
 800f010:	6a3b      	ldr	r3, [r7, #32]
 800f012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f016:	663b      	str	r3, [r7, #96]	; 0x60
 800f018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	3308      	adds	r3, #8
 800f01e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f020:	633a      	str	r2, [r7, #48]	; 0x30
 800f022:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f024:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f028:	e841 2300 	strex	r3, r2, [r1]
 800f02c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f030:	2b00      	cmp	r3, #0
 800f032:	d1e5      	bne.n	800f000 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f036:	2220      	movs	r2, #32
 800f038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f03c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f040:	2b01      	cmp	r3, #1
 800f042:	d118      	bne.n	800f076 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	e853 3f00 	ldrex	r3, [r3]
 800f050:	60fb      	str	r3, [r7, #12]
   return(result);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f023 0310 	bic.w	r3, r3, #16
 800f058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f05a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	461a      	mov	r2, r3
 800f060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f062:	61fb      	str	r3, [r7, #28]
 800f064:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f066:	69b9      	ldr	r1, [r7, #24]
 800f068:	69fa      	ldr	r2, [r7, #28]
 800f06a:	e841 2300 	strex	r3, r2, [r1]
 800f06e:	617b      	str	r3, [r7, #20]
   return(result);
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d1e6      	bne.n	800f044 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d107      	bne.n	800f08e <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f07e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f080:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f084:	4619      	mov	r1, r3
 800f086:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f088:	f7f2 fd7c 	bl	8001b84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f08c:	e002      	b.n	800f094 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f08e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f090:	f7f4 ff20 	bl	8003ed4 <HAL_UART_RxCpltCallback>
}
 800f094:	bf00      	nop
 800f096:	3770      	adds	r7, #112	; 0x70
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0a8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d109      	bne.n	800f0c6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f0b8:	085b      	lsrs	r3, r3, #1
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	4619      	mov	r1, r3
 800f0be:	68f8      	ldr	r0, [r7, #12]
 800f0c0:	f7f2 fd60 	bl	8001b84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f0c4:	e002      	b.n	800f0cc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	f7fe fe84 	bl	800ddd4 <HAL_UART_RxHalfCpltCallback>
}
 800f0cc:	bf00      	nop
 800f0ce:	3710      	adds	r7, #16
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b086      	sub	sp, #24
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0e0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0f0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	689b      	ldr	r3, [r3, #8]
 800f0f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0fc:	2b80      	cmp	r3, #128	; 0x80
 800f0fe:	d109      	bne.n	800f114 <UART_DMAError+0x40>
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	2b21      	cmp	r3, #33	; 0x21
 800f104:	d106      	bne.n	800f114 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	2200      	movs	r2, #0
 800f10a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f10e:	6978      	ldr	r0, [r7, #20]
 800f110:	f7ff fe32 	bl	800ed78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	689b      	ldr	r3, [r3, #8]
 800f11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f11e:	2b40      	cmp	r3, #64	; 0x40
 800f120:	d109      	bne.n	800f136 <UART_DMAError+0x62>
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2b22      	cmp	r3, #34	; 0x22
 800f126:	d106      	bne.n	800f136 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	2200      	movs	r2, #0
 800f12c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f130:	6978      	ldr	r0, [r7, #20]
 800f132:	f7ff fe63 	bl	800edfc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f13c:	f043 0210 	orr.w	r2, r3, #16
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f146:	6978      	ldr	r0, [r7, #20]
 800f148:	f7fe fe4e 	bl	800dde8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f14c:	bf00      	nop
 800f14e:	3718      	adds	r7, #24
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f160:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2200      	movs	r2, #0
 800f166:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2200      	movs	r2, #0
 800f16e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f172:	68f8      	ldr	r0, [r7, #12]
 800f174:	f7fe fe38 	bl	800dde8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f178:	bf00      	nop
 800f17a:	3710      	adds	r7, #16
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b088      	sub	sp, #32
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	e853 3f00 	ldrex	r3, [r3]
 800f194:	60bb      	str	r3, [r7, #8]
   return(result);
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f19c:	61fb      	str	r3, [r7, #28]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	461a      	mov	r2, r3
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	61bb      	str	r3, [r7, #24]
 800f1a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1aa:	6979      	ldr	r1, [r7, #20]
 800f1ac:	69ba      	ldr	r2, [r7, #24]
 800f1ae:	e841 2300 	strex	r3, r2, [r1]
 800f1b2:	613b      	str	r3, [r7, #16]
   return(result);
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1e6      	bne.n	800f188 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2220      	movs	r2, #32
 800f1be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f7fe fdef 	bl	800ddac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1ce:	bf00      	nop
 800f1d0:	3720      	adds	r7, #32
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f1d6:	b480      	push	{r7}
 800f1d8:	b083      	sub	sp, #12
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f1de:	bf00      	nop
 800f1e0:	370c      	adds	r7, #12
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr

0800f1ea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f1ea:	b480      	push	{r7}
 800f1ec:	b083      	sub	sp, #12
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f1f2:	bf00      	nop
 800f1f4:	370c      	adds	r7, #12
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr

0800f1fe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f1fe:	b480      	push	{r7}
 800f200:	b083      	sub	sp, #12
 800f202:	af00      	add	r7, sp, #0
 800f204:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f206:	bf00      	nop
 800f208:	370c      	adds	r7, #12
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr

0800f212 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b084      	sub	sp, #16
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f220:	2b01      	cmp	r3, #1
 800f222:	d101      	bne.n	800f228 <HAL_UARTEx_EnableFifoMode+0x16>
 800f224:	2302      	movs	r3, #2
 800f226:	e02b      	b.n	800f280 <HAL_UARTEx_EnableFifoMode+0x6e>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2201      	movs	r2, #1
 800f22c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2224      	movs	r2, #36	; 0x24
 800f234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f022 0201 	bic.w	r2, r2, #1
 800f24e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f256:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f25e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	68fa      	ldr	r2, [r7, #12]
 800f266:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 f91f 	bl	800f4ac <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2220      	movs	r2, #32
 800f272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2200      	movs	r2, #0
 800f27a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f27e:	2300      	movs	r3, #0
}
 800f280:	4618      	mov	r0, r3
 800f282:	3710      	adds	r7, #16
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f288:	b480      	push	{r7}
 800f28a:	b085      	sub	sp, #20
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f296:	2b01      	cmp	r3, #1
 800f298:	d101      	bne.n	800f29e <HAL_UARTEx_DisableFifoMode+0x16>
 800f29a:	2302      	movs	r3, #2
 800f29c:	e027      	b.n	800f2ee <HAL_UARTEx_DisableFifoMode+0x66>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2224      	movs	r2, #36	; 0x24
 800f2aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f022 0201 	bic.w	r2, r2, #1
 800f2c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f2cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2220      	movs	r2, #32
 800f2e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f2ec:	2300      	movs	r3, #0
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3714      	adds	r7, #20
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr

0800f2fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b084      	sub	sp, #16
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
 800f302:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d101      	bne.n	800f312 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f30e:	2302      	movs	r3, #2
 800f310:	e02d      	b.n	800f36e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2201      	movs	r2, #1
 800f316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2224      	movs	r2, #36	; 0x24
 800f31e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	681a      	ldr	r2, [r3, #0]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	f022 0201 	bic.w	r2, r2, #1
 800f338:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	689b      	ldr	r3, [r3, #8]
 800f340:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	683a      	ldr	r2, [r7, #0]
 800f34a:	430a      	orrs	r2, r1
 800f34c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 f8ac 	bl	800f4ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2220      	movs	r2, #32
 800f360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2200      	movs	r2, #0
 800f368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f36c:	2300      	movs	r3, #0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3710      	adds	r7, #16
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f376:	b580      	push	{r7, lr}
 800f378:	b084      	sub	sp, #16
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
 800f37e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f386:	2b01      	cmp	r3, #1
 800f388:	d101      	bne.n	800f38e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f38a:	2302      	movs	r3, #2
 800f38c:	e02d      	b.n	800f3ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2201      	movs	r2, #1
 800f392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2224      	movs	r2, #36	; 0x24
 800f39a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f022 0201 	bic.w	r2, r2, #1
 800f3b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	683a      	ldr	r2, [r7, #0]
 800f3c6:	430a      	orrs	r2, r1
 800f3c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 f86e 	bl	800f4ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68fa      	ldr	r2, [r7, #12]
 800f3d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2220      	movs	r2, #32
 800f3dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f3e8:	2300      	movs	r3, #0
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3710      	adds	r7, #16
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b08c      	sub	sp, #48	; 0x30
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	60f8      	str	r0, [r7, #12]
 800f3fa:	60b9      	str	r1, [r7, #8]
 800f3fc:	4613      	mov	r3, r2
 800f3fe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f406:	2b20      	cmp	r3, #32
 800f408:	d14a      	bne.n	800f4a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d002      	beq.n	800f416 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800f410:	88fb      	ldrh	r3, [r7, #6]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d101      	bne.n	800f41a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800f416:	2301      	movs	r3, #1
 800f418:	e043      	b.n	800f4a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f420:	2b01      	cmp	r3, #1
 800f422:	d101      	bne.n	800f428 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800f424:	2302      	movs	r3, #2
 800f426:	e03c      	b.n	800f4a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2201      	movs	r2, #1
 800f42c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	2201      	movs	r2, #1
 800f434:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800f436:	88fb      	ldrh	r3, [r7, #6]
 800f438:	461a      	mov	r2, r3
 800f43a:	68b9      	ldr	r1, [r7, #8]
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	f7ff fbf3 	bl	800ec28 <UART_Start_Receive_DMA>
 800f442:	4603      	mov	r3, r0
 800f444:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800f448:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d124      	bne.n	800f49a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f454:	2b01      	cmp	r3, #1
 800f456:	d11d      	bne.n	800f494 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	2210      	movs	r2, #16
 800f45e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f466:	69bb      	ldr	r3, [r7, #24]
 800f468:	e853 3f00 	ldrex	r3, [r3]
 800f46c:	617b      	str	r3, [r7, #20]
   return(result);
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	f043 0310 	orr.w	r3, r3, #16
 800f474:	62bb      	str	r3, [r7, #40]	; 0x28
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	461a      	mov	r2, r3
 800f47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47e:	627b      	str	r3, [r7, #36]	; 0x24
 800f480:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f482:	6a39      	ldr	r1, [r7, #32]
 800f484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f486:	e841 2300 	strex	r3, r2, [r1]
 800f48a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d1e6      	bne.n	800f460 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800f492:	e002      	b.n	800f49a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800f494:	2301      	movs	r3, #1
 800f496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800f49a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f49e:	e000      	b.n	800f4a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800f4a0:	2302      	movs	r3, #2
  }
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3730      	adds	r7, #48	; 0x30
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
	...

0800f4ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b085      	sub	sp, #20
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d108      	bne.n	800f4ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f4cc:	e031      	b.n	800f532 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f4ce:	2310      	movs	r3, #16
 800f4d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f4d2:	2310      	movs	r3, #16
 800f4d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	689b      	ldr	r3, [r3, #8]
 800f4dc:	0e5b      	lsrs	r3, r3, #25
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	f003 0307 	and.w	r3, r3, #7
 800f4e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	689b      	ldr	r3, [r3, #8]
 800f4ec:	0f5b      	lsrs	r3, r3, #29
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	f003 0307 	and.w	r3, r3, #7
 800f4f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f4f6:	7bbb      	ldrb	r3, [r7, #14]
 800f4f8:	7b3a      	ldrb	r2, [r7, #12]
 800f4fa:	4911      	ldr	r1, [pc, #68]	; (800f540 <UARTEx_SetNbDataToProcess+0x94>)
 800f4fc:	5c8a      	ldrb	r2, [r1, r2]
 800f4fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f502:	7b3a      	ldrb	r2, [r7, #12]
 800f504:	490f      	ldr	r1, [pc, #60]	; (800f544 <UARTEx_SetNbDataToProcess+0x98>)
 800f506:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f508:	fb93 f3f2 	sdiv	r3, r3, r2
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f514:	7bfb      	ldrb	r3, [r7, #15]
 800f516:	7b7a      	ldrb	r2, [r7, #13]
 800f518:	4909      	ldr	r1, [pc, #36]	; (800f540 <UARTEx_SetNbDataToProcess+0x94>)
 800f51a:	5c8a      	ldrb	r2, [r1, r2]
 800f51c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f520:	7b7a      	ldrb	r2, [r7, #13]
 800f522:	4908      	ldr	r1, [pc, #32]	; (800f544 <UARTEx_SetNbDataToProcess+0x98>)
 800f524:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f526:	fb93 f3f2 	sdiv	r3, r3, r2
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f532:	bf00      	nop
 800f534:	3714      	adds	r7, #20
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr
 800f53e:	bf00      	nop
 800f540:	080128b8 	.word	0x080128b8
 800f544:	080128c0 	.word	0x080128c0

0800f548 <sinf_poly>:
 800f548:	07cb      	lsls	r3, r1, #31
 800f54a:	d412      	bmi.n	800f572 <sinf_poly+0x2a>
 800f54c:	ee21 6b00 	vmul.f64	d6, d1, d0
 800f550:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800f554:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800f558:	eea5 7b01 	vfma.f64	d7, d5, d1
 800f55c:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800f560:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f564:	eea5 0b06 	vfma.f64	d0, d5, d6
 800f568:	eea7 0b01 	vfma.f64	d0, d7, d1
 800f56c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f570:	4770      	bx	lr
 800f572:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800f576:	ee21 6b01 	vmul.f64	d6, d1, d1
 800f57a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800f57e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800f582:	eea1 7b05 	vfma.f64	d7, d1, d5
 800f586:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800f58a:	eea1 0b05 	vfma.f64	d0, d1, d5
 800f58e:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800f592:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f596:	eea6 0b05 	vfma.f64	d0, d6, d5
 800f59a:	e7e5      	b.n	800f568 <sinf_poly+0x20>
 800f59c:	0000      	movs	r0, r0
	...

0800f5a0 <cosf>:
 800f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5a2:	ee10 4a10 	vmov	r4, s0
 800f5a6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800f5aa:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800f5ae:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800f5b2:	d20c      	bcs.n	800f5ce <cosf+0x2e>
 800f5b4:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f5b8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800f5bc:	d378      	bcc.n	800f6b0 <cosf+0x110>
 800f5be:	eeb0 0b46 	vmov.f64	d0, d6
 800f5c2:	483f      	ldr	r0, [pc, #252]	; (800f6c0 <cosf+0x120>)
 800f5c4:	2101      	movs	r1, #1
 800f5c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f5ca:	f7ff bfbd 	b.w	800f548 <sinf_poly>
 800f5ce:	f240 422e 	movw	r2, #1070	; 0x42e
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d826      	bhi.n	800f624 <cosf+0x84>
 800f5d6:	4b3a      	ldr	r3, [pc, #232]	; (800f6c0 <cosf+0x120>)
 800f5d8:	ed93 7b08 	vldr	d7, [r3, #32]
 800f5dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f5e0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f5e4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f5e8:	ee17 1a90 	vmov	r1, s15
 800f5ec:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800f5f0:	1609      	asrs	r1, r1, #24
 800f5f2:	ee07 1a90 	vmov	s15, r1
 800f5f6:	f001 0203 	and.w	r2, r1, #3
 800f5fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f5fe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f602:	ed92 0b00 	vldr	d0, [r2]
 800f606:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800f60a:	f011 0f02 	tst.w	r1, #2
 800f60e:	eea5 6b47 	vfms.f64	d6, d5, d7
 800f612:	f081 0101 	eor.w	r1, r1, #1
 800f616:	bf08      	it	eq
 800f618:	4618      	moveq	r0, r3
 800f61a:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f61e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f622:	e7d0      	b.n	800f5c6 <cosf+0x26>
 800f624:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800f628:	d23e      	bcs.n	800f6a8 <cosf+0x108>
 800f62a:	4b26      	ldr	r3, [pc, #152]	; (800f6c4 <cosf+0x124>)
 800f62c:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800f630:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800f634:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800f638:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800f63c:	6a06      	ldr	r6, [r0, #32]
 800f63e:	6900      	ldr	r0, [r0, #16]
 800f640:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800f644:	40a9      	lsls	r1, r5
 800f646:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f64a:	fba1 6706 	umull	r6, r7, r1, r6
 800f64e:	fb05 f301 	mul.w	r3, r5, r1
 800f652:	463a      	mov	r2, r7
 800f654:	fbe0 2301 	umlal	r2, r3, r0, r1
 800f658:	1c11      	adds	r1, r2, #0
 800f65a:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800f65e:	2000      	movs	r0, #0
 800f660:	1a10      	subs	r0, r2, r0
 800f662:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800f666:	eb63 0101 	sbc.w	r1, r3, r1
 800f66a:	f7f1 f81f 	bl	80006ac <__aeabi_l2d>
 800f66e:	0fb5      	lsrs	r5, r6, #30
 800f670:	4b13      	ldr	r3, [pc, #76]	; (800f6c0 <cosf+0x120>)
 800f672:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800f676:	ed9f 0b10 	vldr	d0, [pc, #64]	; 800f6b8 <cosf+0x118>
 800f67a:	ec41 0b17 	vmov	d7, r0, r1
 800f67e:	f004 0203 	and.w	r2, r4, #3
 800f682:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f686:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f68a:	ed92 7b00 	vldr	d7, [r2]
 800f68e:	ee20 1b00 	vmul.f64	d1, d0, d0
 800f692:	f014 0f02 	tst.w	r4, #2
 800f696:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f69a:	f085 0101 	eor.w	r1, r5, #1
 800f69e:	bf08      	it	eq
 800f6a0:	4618      	moveq	r0, r3
 800f6a2:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f6a6:	e78e      	b.n	800f5c6 <cosf+0x26>
 800f6a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f6ac:	f000 b817 	b.w	800f6de <__math_invalidf>
 800f6b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	54442d18 	.word	0x54442d18
 800f6bc:	3c1921fb 	.word	0x3c1921fb
 800f6c0:	08013970 	.word	0x08013970
 800f6c4:	08013910 	.word	0x08013910

0800f6c8 <with_errnof>:
 800f6c8:	b513      	push	{r0, r1, r4, lr}
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f6d0:	f000 fc46 	bl	800ff60 <__errno>
 800f6d4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f6d8:	6004      	str	r4, [r0, #0]
 800f6da:	b002      	add	sp, #8
 800f6dc:	bd10      	pop	{r4, pc}

0800f6de <__math_invalidf>:
 800f6de:	eef0 7a40 	vmov.f32	s15, s0
 800f6e2:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f6e6:	eef4 7a67 	vcmp.f32	s15, s15
 800f6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ee:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800f6f2:	d602      	bvs.n	800f6fa <__math_invalidf+0x1c>
 800f6f4:	2021      	movs	r0, #33	; 0x21
 800f6f6:	f7ff bfe7 	b.w	800f6c8 <with_errnof>
 800f6fa:	4770      	bx	lr

0800f6fc <checkint>:
 800f6fc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f700:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800f704:	429a      	cmp	r2, r3
 800f706:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f708:	dd2b      	ble.n	800f762 <checkint+0x66>
 800f70a:	f240 4333 	movw	r3, #1075	; 0x433
 800f70e:	429a      	cmp	r2, r3
 800f710:	dc25      	bgt.n	800f75e <checkint+0x62>
 800f712:	1a9b      	subs	r3, r3, r2
 800f714:	f1a3 0620 	sub.w	r6, r3, #32
 800f718:	f04f 32ff 	mov.w	r2, #4294967295
 800f71c:	fa02 f606 	lsl.w	r6, r2, r6
 800f720:	fa02 f403 	lsl.w	r4, r2, r3
 800f724:	f1c3 0520 	rsb	r5, r3, #32
 800f728:	4334      	orrs	r4, r6
 800f72a:	fa22 f505 	lsr.w	r5, r2, r5
 800f72e:	432c      	orrs	r4, r5
 800f730:	409a      	lsls	r2, r3
 800f732:	ea20 0602 	bic.w	r6, r0, r2
 800f736:	ea21 0704 	bic.w	r7, r1, r4
 800f73a:	ea56 0207 	orrs.w	r2, r6, r7
 800f73e:	f1a3 0420 	sub.w	r4, r3, #32
 800f742:	f1c3 0220 	rsb	r2, r3, #32
 800f746:	d10c      	bne.n	800f762 <checkint+0x66>
 800f748:	40d8      	lsrs	r0, r3
 800f74a:	fa01 f302 	lsl.w	r3, r1, r2
 800f74e:	4318      	orrs	r0, r3
 800f750:	40e1      	lsrs	r1, r4
 800f752:	4308      	orrs	r0, r1
 800f754:	f000 0301 	and.w	r3, r0, #1
 800f758:	f1c3 0002 	rsb	r0, r3, #2
 800f75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f75e:	2002      	movs	r0, #2
 800f760:	e7fc      	b.n	800f75c <checkint+0x60>
 800f762:	2000      	movs	r0, #0
 800f764:	e7fa      	b.n	800f75c <checkint+0x60>
	...

0800f768 <pow>:
 800f768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76c:	ed2d 8b0a 	vpush	{d8-d12}
 800f770:	b09b      	sub	sp, #108	; 0x6c
 800f772:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f776:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f77a:	ed8d 1b00 	vstr	d1, [sp]
 800f77e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800f782:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f786:	f109 30ff 	add.w	r0, r9, #4294967295
 800f78a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800f78e:	4288      	cmp	r0, r1
 800f790:	46cc      	mov	ip, r9
 800f792:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800f796:	d806      	bhi.n	800f7a6 <pow+0x3e>
 800f798:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800f79c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800f7a0:	297f      	cmp	r1, #127	; 0x7f
 800f7a2:	f240 81ab 	bls.w	800fafc <pow+0x394>
 800f7a6:	19b1      	adds	r1, r6, r6
 800f7a8:	9104      	str	r1, [sp, #16]
 800f7aa:	eb47 0107 	adc.w	r1, r7, r7
 800f7ae:	9105      	str	r1, [sp, #20]
 800f7b0:	9904      	ldr	r1, [sp, #16]
 800f7b2:	f111 31ff 	adds.w	r1, r1, #4294967295
 800f7b6:	460a      	mov	r2, r1
 800f7b8:	9905      	ldr	r1, [sp, #20]
 800f7ba:	f141 31ff 	adc.w	r1, r1, #4294967295
 800f7be:	460b      	mov	r3, r1
 800f7c0:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800f7c4:	f06f 0001 	mvn.w	r0, #1
 800f7c8:	4299      	cmp	r1, r3
 800f7ca:	bf08      	it	eq
 800f7cc:	4290      	cmpeq	r0, r2
 800f7ce:	d260      	bcs.n	800f892 <pow+0x12a>
 800f7d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	d11a      	bne.n	800f80e <pow+0xa6>
 800f7d8:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800f7dc:	1923      	adds	r3, r4, r4
 800f7de:	930c      	str	r3, [sp, #48]	; 0x30
 800f7e0:	eb42 0302 	adc.w	r3, r2, r2
 800f7e4:	930d      	str	r3, [sp, #52]	; 0x34
 800f7e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f7ea:	4bcf      	ldr	r3, [pc, #828]	; (800fb28 <pow+0x3c0>)
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	428b      	cmp	r3, r1
 800f7f0:	bf08      	it	eq
 800f7f2:	4282      	cmpeq	r2, r0
 800f7f4:	f080 8265 	bcs.w	800fcc2 <pow+0x55a>
 800f7f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f7fc:	ed9d 6b00 	vldr	d6, [sp]
 800f800:	ee37 0b06 	vadd.f64	d0, d7, d6
 800f804:	b01b      	add	sp, #108	; 0x6c
 800f806:	ecbd 8b0a 	vpop	{d8-d12}
 800f80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f80e:	49c7      	ldr	r1, [pc, #796]	; (800fb2c <pow+0x3c4>)
 800f810:	2000      	movs	r0, #0
 800f812:	428d      	cmp	r5, r1
 800f814:	bf08      	it	eq
 800f816:	4284      	cmpeq	r4, r0
 800f818:	d10b      	bne.n	800f832 <pow+0xca>
 800f81a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f81e:	19b3      	adds	r3, r6, r6
 800f820:	930e      	str	r3, [sp, #56]	; 0x38
 800f822:	eb42 0302 	adc.w	r3, r2, r2
 800f826:	930f      	str	r3, [sp, #60]	; 0x3c
 800f828:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f82c:	4bbe      	ldr	r3, [pc, #760]	; (800fb28 <pow+0x3c0>)
 800f82e:	2200      	movs	r2, #0
 800f830:	e7dd      	b.n	800f7ee <pow+0x86>
 800f832:	1921      	adds	r1, r4, r4
 800f834:	9106      	str	r1, [sp, #24]
 800f836:	eb45 0105 	adc.w	r1, r5, r5
 800f83a:	9107      	str	r1, [sp, #28]
 800f83c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f840:	49bb      	ldr	r1, [pc, #748]	; (800fb30 <pow+0x3c8>)
 800f842:	2000      	movs	r0, #0
 800f844:	42a1      	cmp	r1, r4
 800f846:	bf08      	it	eq
 800f848:	4298      	cmpeq	r0, r3
 800f84a:	d3d5      	bcc.n	800f7f8 <pow+0x90>
 800f84c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f850:	428c      	cmp	r4, r1
 800f852:	bf08      	it	eq
 800f854:	4283      	cmpeq	r3, r0
 800f856:	d1cf      	bne.n	800f7f8 <pow+0x90>
 800f858:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f85c:	49b5      	ldr	r1, [pc, #724]	; (800fb34 <pow+0x3cc>)
 800f85e:	2000      	movs	r0, #0
 800f860:	428c      	cmp	r4, r1
 800f862:	bf08      	it	eq
 800f864:	4283      	cmpeq	r3, r0
 800f866:	f000 822c 	beq.w	800fcc2 <pow+0x55a>
 800f86a:	49b3      	ldr	r1, [pc, #716]	; (800fb38 <pow+0x3d0>)
 800f86c:	f04f 30ff 	mov.w	r0, #4294967295
 800f870:	42a1      	cmp	r1, r4
 800f872:	bf08      	it	eq
 800f874:	4298      	cmpeq	r0, r3
 800f876:	ea6f 0307 	mvn.w	r3, r7
 800f87a:	bf34      	ite	cc
 800f87c:	2201      	movcc	r2, #1
 800f87e:	2200      	movcs	r2, #0
 800f880:	0fdb      	lsrs	r3, r3, #31
 800f882:	429a      	cmp	r2, r3
 800f884:	f040 821a 	bne.w	800fcbc <pow+0x554>
 800f888:	ed9d 7b00 	vldr	d7, [sp]
 800f88c:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f890:	e7b8      	b.n	800f804 <pow+0x9c>
 800f892:	1923      	adds	r3, r4, r4
 800f894:	9308      	str	r3, [sp, #32]
 800f896:	eb45 0305 	adc.w	r3, r5, r5
 800f89a:	9309      	str	r3, [sp, #36]	; 0x24
 800f89c:	9b08      	ldr	r3, [sp, #32]
 800f89e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800f8a2:	9310      	str	r3, [sp, #64]	; 0x40
 800f8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 800f8aa:	9311      	str	r3, [sp, #68]	; 0x44
 800f8ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f8b0:	4299      	cmp	r1, r3
 800f8b2:	bf08      	it	eq
 800f8b4:	4290      	cmpeq	r0, r2
 800f8b6:	d22d      	bcs.n	800f914 <pow+0x1ac>
 800f8b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f8bc:	2c00      	cmp	r4, #0
 800f8be:	f175 0300 	sbcs.w	r3, r5, #0
 800f8c2:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f8c6:	da16      	bge.n	800f8f6 <pow+0x18e>
 800f8c8:	4630      	mov	r0, r6
 800f8ca:	4639      	mov	r1, r7
 800f8cc:	f7ff ff16 	bl	800f6fc <checkint>
 800f8d0:	2801      	cmp	r0, #1
 800f8d2:	d110      	bne.n	800f8f6 <pow+0x18e>
 800f8d4:	eeb1 0b40 	vneg.f64	d0, d0
 800f8d8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800f8dc:	4323      	orrs	r3, r4
 800f8de:	d10c      	bne.n	800f8fa <pow+0x192>
 800f8e0:	2e00      	cmp	r6, #0
 800f8e2:	f177 0300 	sbcs.w	r3, r7, #0
 800f8e6:	da8d      	bge.n	800f804 <pow+0x9c>
 800f8e8:	b01b      	add	sp, #108	; 0x6c
 800f8ea:	ecbd 8b0a 	vpop	{d8-d12}
 800f8ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f2:	f000 baf1 	b.w	800fed8 <__math_divzero>
 800f8f6:	2000      	movs	r0, #0
 800f8f8:	e7ee      	b.n	800f8d8 <pow+0x170>
 800f8fa:	2e00      	cmp	r6, #0
 800f8fc:	f177 0300 	sbcs.w	r3, r7, #0
 800f900:	da80      	bge.n	800f804 <pow+0x9c>
 800f902:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f906:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f90a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800f90e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800f912:	e777      	b.n	800f804 <pow+0x9c>
 800f914:	2c00      	cmp	r4, #0
 800f916:	f175 0300 	sbcs.w	r3, r5, #0
 800f91a:	da35      	bge.n	800f988 <pow+0x220>
 800f91c:	4630      	mov	r0, r6
 800f91e:	4639      	mov	r1, r7
 800f920:	f7ff feec 	bl	800f6fc <checkint>
 800f924:	b940      	cbnz	r0, 800f938 <pow+0x1d0>
 800f926:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f92a:	b01b      	add	sp, #108	; 0x6c
 800f92c:	ecbd 8b0a 	vpop	{d8-d12}
 800f930:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f934:	f000 bae8 	b.w	800ff08 <__math_invalid>
 800f938:	2801      	cmp	r0, #1
 800f93a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f93e:	bf14      	ite	ne
 800f940:	2000      	movne	r0, #0
 800f942:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800f946:	461d      	mov	r5, r3
 800f948:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800f94c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800f950:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800f954:	2a7f      	cmp	r2, #127	; 0x7f
 800f956:	d933      	bls.n	800f9c0 <pow+0x258>
 800f958:	4974      	ldr	r1, [pc, #464]	; (800fb2c <pow+0x3c4>)
 800f95a:	2000      	movs	r0, #0
 800f95c:	428d      	cmp	r5, r1
 800f95e:	bf08      	it	eq
 800f960:	4284      	cmpeq	r4, r0
 800f962:	f000 81ae 	beq.w	800fcc2 <pow+0x55a>
 800f966:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d80e      	bhi.n	800f98c <pow+0x224>
 800f96e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f972:	ed9d 7b00 	vldr	d7, [sp]
 800f976:	42a9      	cmp	r1, r5
 800f978:	bf08      	it	eq
 800f97a:	42a0      	cmpeq	r0, r4
 800f97c:	bf34      	ite	cc
 800f97e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800f982:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800f986:	e73d      	b.n	800f804 <pow+0x9c>
 800f988:	2000      	movs	r0, #0
 800f98a:	e7df      	b.n	800f94c <pow+0x1e4>
 800f98c:	42a9      	cmp	r1, r5
 800f98e:	bf08      	it	eq
 800f990:	42a0      	cmpeq	r0, r4
 800f992:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f996:	bf2c      	ite	cs
 800f998:	2301      	movcs	r3, #1
 800f99a:	2300      	movcc	r3, #0
 800f99c:	4590      	cmp	r8, r2
 800f99e:	bf8c      	ite	hi
 800f9a0:	f04f 0800 	movhi.w	r8, #0
 800f9a4:	f04f 0801 	movls.w	r8, #1
 800f9a8:	4543      	cmp	r3, r8
 800f9aa:	f04f 0000 	mov.w	r0, #0
 800f9ae:	f000 80af 	beq.w	800fb10 <pow+0x3a8>
 800f9b2:	b01b      	add	sp, #108	; 0x6c
 800f9b4:	ecbd 8b0a 	vpop	{d8-d12}
 800f9b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9bc:	f000 ba84 	b.w	800fec8 <__math_oflow>
 800f9c0:	f1bc 0f00 	cmp.w	ip, #0
 800f9c4:	d10e      	bne.n	800f9e4 <pow+0x27c>
 800f9c6:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800fb20 <pow+0x3b8>
 800f9ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f9ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f9d2:	ec57 6b17 	vmov	r6, r7, d7
 800f9d6:	4b59      	ldr	r3, [pc, #356]	; (800fb3c <pow+0x3d4>)
 800f9d8:	2100      	movs	r1, #0
 800f9da:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f9de:	1874      	adds	r4, r6, r1
 800f9e0:	eb42 0503 	adc.w	r5, r2, r3
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	18e3      	adds	r3, r4, r3
 800f9e8:	4b55      	ldr	r3, [pc, #340]	; (800fb40 <pow+0x3d8>)
 800f9ea:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f9ee:	eb45 0303 	adc.w	r3, r5, r3
 800f9f2:	1519      	asrs	r1, r3, #20
 800f9f4:	ee03 1a10 	vmov	s6, r1
 800f9f8:	0d1e      	lsrs	r6, r3, #20
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800fa00:	0536      	lsls	r6, r6, #20
 800fa02:	1a63      	subs	r3, r4, r1
 800fa04:	9312      	str	r3, [sp, #72]	; 0x48
 800fa06:	eb65 0306 	sbc.w	r3, r5, r6
 800fa0a:	9313      	str	r3, [sp, #76]	; 0x4c
 800fa0c:	4b4d      	ldr	r3, [pc, #308]	; (800fb44 <pow+0x3dc>)
 800fa0e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800fa12:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fa16:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800fa1a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800fa1e:	ed93 7b00 	vldr	d7, [r3]
 800fa22:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800fa26:	ed93 4b02 	vldr	d4, [r3, #8]
 800fa2a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800fa2e:	eea3 5b07 	vfma.f64	d5, d3, d7
 800fa32:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800fa36:	ee36 9b05 	vadd.f64	d9, d6, d5
 800fa3a:	ee35 5b49 	vsub.f64	d5, d5, d9
 800fa3e:	eea3 7b04 	vfma.f64	d7, d3, d4
 800fa42:	ed93 4b04 	vldr	d4, [r3, #16]
 800fa46:	ee35 5b06 	vadd.f64	d5, d5, d6
 800fa4a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fa4e:	ee26 4b04 	vmul.f64	d4, d6, d4
 800fa52:	ed93 3b08 	vldr	d3, [r3, #32]
 800fa56:	ee26 0b04 	vmul.f64	d0, d6, d4
 800fa5a:	eeb0 8b40 	vmov.f64	d8, d0
 800fa5e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800fa62:	ed93 4b06 	vldr	d4, [r3, #24]
 800fa66:	ee26 ab00 	vmul.f64	d10, d6, d0
 800fa6a:	ee39 1b00 	vadd.f64	d1, d9, d0
 800fa6e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800fa72:	eea6 4b03 	vfma.f64	d4, d6, d3
 800fa76:	ee39 9b41 	vsub.f64	d9, d9, d1
 800fa7a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800fa7e:	ee37 8b08 	vadd.f64	d8, d7, d8
 800fa82:	ee39 9b00 	vadd.f64	d9, d9, d0
 800fa86:	eea6 3b02 	vfma.f64	d3, d6, d2
 800fa8a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800fa8e:	ee38 9b09 	vadd.f64	d9, d8, d9
 800fa92:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800fa96:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800fa9a:	ed9d 6b00 	vldr	d6, [sp]
 800fa9e:	eea0 3b02 	vfma.f64	d3, d0, d2
 800faa2:	eea0 4b03 	vfma.f64	d4, d0, d3
 800faa6:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800faaa:	ee31 7b09 	vadd.f64	d7, d1, d9
 800faae:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fab2:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fab6:	eeb0 3b46 	vmov.f64	d3, d6
 800faba:	ee31 1b47 	vsub.f64	d1, d1, d7
 800fabe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fac2:	ee31 9b09 	vadd.f64	d9, d1, d9
 800fac6:	ed9d 6b00 	vldr	d6, [sp]
 800faca:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800face:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800fad2:	193c      	adds	r4, r7, r4
 800fad4:	2c3e      	cmp	r4, #62	; 0x3e
 800fad6:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800fada:	eea6 3b09 	vfma.f64	d3, d6, d9
 800fade:	d934      	bls.n	800fb4a <pow+0x3e2>
 800fae0:	428c      	cmp	r4, r1
 800fae2:	da0d      	bge.n	800fb00 <pow+0x398>
 800fae4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fae8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800faec:	ee37 0b00 	vadd.f64	d0, d7, d0
 800faf0:	2800      	cmp	r0, #0
 800faf2:	f43f ae87 	beq.w	800f804 <pow+0x9c>
 800faf6:	eeb1 0b40 	vneg.f64	d0, d0
 800fafa:	e683      	b.n	800f804 <pow+0x9c>
 800fafc:	2000      	movs	r0, #0
 800fafe:	e771      	b.n	800f9e4 <pow+0x27c>
 800fb00:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800fb04:	d920      	bls.n	800fb48 <pow+0x3e0>
 800fb06:	2a00      	cmp	r2, #0
 800fb08:	f173 0300 	sbcs.w	r3, r3, #0
 800fb0c:	f6bf af51 	bge.w	800f9b2 <pow+0x24a>
 800fb10:	b01b      	add	sp, #108	; 0x6c
 800fb12:	ecbd 8b0a 	vpop	{d8-d12}
 800fb16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1a:	f000 b9cd 	b.w	800feb8 <__math_uflow>
 800fb1e:	bf00      	nop
 800fb20:	00000000 	.word	0x00000000
 800fb24:	43300000 	.word	0x43300000
 800fb28:	fff00000 	.word	0xfff00000
 800fb2c:	3ff00000 	.word	0x3ff00000
 800fb30:	ffe00000 	.word	0xffe00000
 800fb34:	7fe00000 	.word	0x7fe00000
 800fb38:	7fdfffff 	.word	0x7fdfffff
 800fb3c:	fcc00000 	.word	0xfcc00000
 800fb40:	c0196aab 	.word	0xc0196aab
 800fb44:	080128c8 	.word	0x080128c8
 800fb48:	460f      	mov	r7, r1
 800fb4a:	4e65      	ldr	r6, [pc, #404]	; (800fce0 <pow+0x578>)
 800fb4c:	ed9d 4b02 	vldr	d4, [sp, #8]
 800fb50:	ed96 6b02 	vldr	d6, [r6, #8]
 800fb54:	ed96 7b00 	vldr	d7, [r6]
 800fb58:	eeb0 5b46 	vmov.f64	d5, d6
 800fb5c:	eea4 5b07 	vfma.f64	d5, d4, d7
 800fb60:	ed8d 5b00 	vstr	d5, [sp]
 800fb64:	ee35 6b46 	vsub.f64	d6, d5, d6
 800fb68:	eeb0 5b44 	vmov.f64	d5, d4
 800fb6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb70:	ed96 7b04 	vldr	d7, [r6, #16]
 800fb74:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800fb78:	eea6 5b07 	vfma.f64	d5, d6, d7
 800fb7c:	eeb0 7b45 	vmov.f64	d7, d5
 800fb80:	ed96 5b06 	vldr	d5, [r6, #24]
 800fb84:	1849      	adds	r1, r1, r1
 800fb86:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800fb8a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800fb8e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800fb92:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800fb96:	ee33 3b07 	vadd.f64	d3, d3, d7
 800fb9a:	ee23 6b03 	vmul.f64	d6, d3, d3
 800fb9e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800fba2:	ed96 5b08 	vldr	d5, [r6, #32]
 800fba6:	ee33 7b07 	vadd.f64	d7, d3, d7
 800fbaa:	1814      	adds	r4, r2, r0
 800fbac:	0365      	lsls	r5, r4, #13
 800fbae:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800fbb2:	eea3 5b04 	vfma.f64	d5, d3, d4
 800fbb6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800fbba:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800fbbe:	ee26 6b06 	vmul.f64	d6, d6, d6
 800fbc2:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800fbc6:	2000      	movs	r0, #0
 800fbc8:	eb10 0a04 	adds.w	sl, r0, r4
 800fbcc:	eea3 5b04 	vfma.f64	d5, d3, d4
 800fbd0:	eb45 0b0c 	adc.w	fp, r5, ip
 800fbd4:	eea6 7b05 	vfma.f64	d7, d6, d5
 800fbd8:	2f00      	cmp	r7, #0
 800fbda:	d16a      	bne.n	800fcb2 <pow+0x54a>
 800fbdc:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800fbe0:	4639      	mov	r1, r7
 800fbe2:	ea50 0301 	orrs.w	r3, r0, r1
 800fbe6:	f04f 0300 	mov.w	r3, #0
 800fbea:	d115      	bne.n	800fc18 <pow+0x4b0>
 800fbec:	eb1a 0303 	adds.w	r3, sl, r3
 800fbf0:	ee0b 3a10 	vmov	s22, r3
 800fbf4:	4b3b      	ldr	r3, [pc, #236]	; (800fce4 <pow+0x57c>)
 800fbf6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800fcc8 <pow+0x560>
 800fbfa:	eb4b 0303 	adc.w	r3, fp, r3
 800fbfe:	ee0b 3a90 	vmov	s23, r3
 800fc02:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800fc06:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800fc0a:	b01b      	add	sp, #108	; 0x6c
 800fc0c:	ecbd 8b0a 	vpop	{d8-d12}
 800fc10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc14:	f000 b990 	b.w	800ff38 <__math_check_oflow>
 800fc18:	eb1a 0303 	adds.w	r3, sl, r3
 800fc1c:	930a      	str	r3, [sp, #40]	; 0x28
 800fc1e:	4b32      	ldr	r3, [pc, #200]	; (800fce8 <pow+0x580>)
 800fc20:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800fc24:	eb4b 0303 	adc.w	r3, fp, r3
 800fc28:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc2a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800fc2e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800fc32:	ee35 7b06 	vadd.f64	d7, d5, d6
 800fc36:	eeb0 3bc7 	vabs.f64	d3, d7
 800fc3a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800fc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc42:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800fcd0 <pow+0x568>
 800fc46:	d52b      	bpl.n	800fca0 <pow+0x538>
 800fc48:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fc4c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800fc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc54:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800fc58:	ee35 6b06 	vadd.f64	d6, d5, d6
 800fc5c:	bf48      	it	mi
 800fc5e:	eeb0 4b43 	vmovmi.f64	d4, d3
 800fc62:	ee37 3b04 	vadd.f64	d3, d7, d4
 800fc66:	ee34 5b43 	vsub.f64	d5, d4, d3
 800fc6a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fc6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fc72:	ee37 7b03 	vadd.f64	d7, d7, d3
 800fc76:	ee37 7b44 	vsub.f64	d7, d7, d4
 800fc7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc82:	d105      	bne.n	800fc90 <pow+0x528>
 800fc84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc86:	463a      	mov	r2, r7
 800fc88:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800fc8c:	ec43 2b17 	vmov	d7, r2, r3
 800fc90:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800fc94:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800fc98:	ee26 6b00 	vmul.f64	d6, d6, d0
 800fc9c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800fca0:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fca4:	b01b      	add	sp, #108	; 0x6c
 800fca6:	ecbd 8b0a 	vpop	{d8-d12}
 800fcaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcae:	f000 b93a 	b.w	800ff26 <__math_check_uflow>
 800fcb2:	ec4b ab10 	vmov	d0, sl, fp
 800fcb6:	eea7 0b00 	vfma.f64	d0, d7, d0
 800fcba:	e5a3      	b.n	800f804 <pow+0x9c>
 800fcbc:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800fcd8 <pow+0x570>
 800fcc0:	e5a0      	b.n	800f804 <pow+0x9c>
 800fcc2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fcc6:	e59d      	b.n	800f804 <pow+0x9c>
 800fcc8:	00000000 	.word	0x00000000
 800fccc:	7f000000 	.word	0x7f000000
 800fcd0:	00000000 	.word	0x00000000
 800fcd4:	00100000 	.word	0x00100000
	...
 800fce0:	08013a50 	.word	0x08013a50
 800fce4:	c0f00000 	.word	0xc0f00000
 800fce8:	3fe00000 	.word	0x3fe00000

0800fcec <sinf_poly>:
 800fcec:	07cb      	lsls	r3, r1, #31
 800fcee:	d412      	bmi.n	800fd16 <sinf_poly+0x2a>
 800fcf0:	ee21 6b00 	vmul.f64	d6, d1, d0
 800fcf4:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800fcf8:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800fcfc:	eea5 7b01 	vfma.f64	d7, d5, d1
 800fd00:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800fd04:	ee21 1b06 	vmul.f64	d1, d1, d6
 800fd08:	eea5 0b06 	vfma.f64	d0, d5, d6
 800fd0c:	eea7 0b01 	vfma.f64	d0, d7, d1
 800fd10:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fd14:	4770      	bx	lr
 800fd16:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800fd1a:	ee21 6b01 	vmul.f64	d6, d1, d1
 800fd1e:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800fd22:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800fd26:	eea1 7b05 	vfma.f64	d7, d1, d5
 800fd2a:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800fd2e:	eea1 0b05 	vfma.f64	d0, d1, d5
 800fd32:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800fd36:	ee21 1b06 	vmul.f64	d1, d1, d6
 800fd3a:	eea6 0b05 	vfma.f64	d0, d6, d5
 800fd3e:	e7e5      	b.n	800fd0c <sinf_poly+0x20>

0800fd40 <sinf>:
 800fd40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd42:	ee10 4a10 	vmov	r4, s0
 800fd46:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800fd4a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800fd4e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800fd52:	eef0 7a40 	vmov.f32	s15, s0
 800fd56:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800fd5a:	d218      	bcs.n	800fd8e <sinf+0x4e>
 800fd5c:	ee26 1b06 	vmul.f64	d1, d6, d6
 800fd60:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800fd64:	d20a      	bcs.n	800fd7c <sinf+0x3c>
 800fd66:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800fd6a:	d103      	bne.n	800fd74 <sinf+0x34>
 800fd6c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800fd70:	ed8d 1a01 	vstr	s2, [sp, #4]
 800fd74:	eeb0 0a67 	vmov.f32	s0, s15
 800fd78:	b003      	add	sp, #12
 800fd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd7c:	483e      	ldr	r0, [pc, #248]	; (800fe78 <sinf+0x138>)
 800fd7e:	eeb0 0b46 	vmov.f64	d0, d6
 800fd82:	2100      	movs	r1, #0
 800fd84:	b003      	add	sp, #12
 800fd86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fd8a:	f7ff bfaf 	b.w	800fcec <sinf_poly>
 800fd8e:	f240 422e 	movw	r2, #1070	; 0x42e
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d824      	bhi.n	800fde0 <sinf+0xa0>
 800fd96:	4b38      	ldr	r3, [pc, #224]	; (800fe78 <sinf+0x138>)
 800fd98:	ed93 7b08 	vldr	d7, [r3, #32]
 800fd9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fda0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800fda4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800fda8:	ee17 1a90 	vmov	r1, s15
 800fdac:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800fdb0:	1609      	asrs	r1, r1, #24
 800fdb2:	ee07 1a90 	vmov	s15, r1
 800fdb6:	f001 0203 	and.w	r2, r1, #3
 800fdba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800fdbe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800fdc2:	ed92 0b00 	vldr	d0, [r2]
 800fdc6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800fdca:	f011 0f02 	tst.w	r1, #2
 800fdce:	eea5 6b47 	vfms.f64	d6, d5, d7
 800fdd2:	bf08      	it	eq
 800fdd4:	4618      	moveq	r0, r3
 800fdd6:	ee26 1b06 	vmul.f64	d1, d6, d6
 800fdda:	ee20 0b06 	vmul.f64	d0, d0, d6
 800fdde:	e7d1      	b.n	800fd84 <sinf+0x44>
 800fde0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800fde4:	d23d      	bcs.n	800fe62 <sinf+0x122>
 800fde6:	4b25      	ldr	r3, [pc, #148]	; (800fe7c <sinf+0x13c>)
 800fde8:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800fdec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800fdf0:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800fdf4:	6a06      	ldr	r6, [r0, #32]
 800fdf6:	6900      	ldr	r0, [r0, #16]
 800fdf8:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800fdfc:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800fe00:	40a9      	lsls	r1, r5
 800fe02:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800fe06:	fba1 6706 	umull	r6, r7, r1, r6
 800fe0a:	fb05 f301 	mul.w	r3, r5, r1
 800fe0e:	463a      	mov	r2, r7
 800fe10:	fbe0 2301 	umlal	r2, r3, r0, r1
 800fe14:	1c11      	adds	r1, r2, #0
 800fe16:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800fe1a:	2000      	movs	r0, #0
 800fe1c:	1a10      	subs	r0, r2, r0
 800fe1e:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800fe22:	eb63 0101 	sbc.w	r1, r3, r1
 800fe26:	f7f0 fc41 	bl	80006ac <__aeabi_l2d>
 800fe2a:	0fb5      	lsrs	r5, r6, #30
 800fe2c:	4a12      	ldr	r2, [pc, #72]	; (800fe78 <sinf+0x138>)
 800fe2e:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 800fe32:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800fe70 <sinf+0x130>
 800fe36:	ec41 0b17 	vmov	d7, r0, r1
 800fe3a:	f003 0103 	and.w	r1, r3, #3
 800fe3e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800fe42:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fe46:	ed91 7b00 	vldr	d7, [r1]
 800fe4a:	ee20 1b00 	vmul.f64	d1, d0, d0
 800fe4e:	f013 0f02 	tst.w	r3, #2
 800fe52:	f102 0070 	add.w	r0, r2, #112	; 0x70
 800fe56:	4629      	mov	r1, r5
 800fe58:	bf08      	it	eq
 800fe5a:	4610      	moveq	r0, r2
 800fe5c:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fe60:	e790      	b.n	800fd84 <sinf+0x44>
 800fe62:	b003      	add	sp, #12
 800fe64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fe68:	f7ff bc39 	b.w	800f6de <__math_invalidf>
 800fe6c:	f3af 8000 	nop.w
 800fe70:	54442d18 	.word	0x54442d18
 800fe74:	3c1921fb 	.word	0x3c1921fb
 800fe78:	08013970 	.word	0x08013970
 800fe7c:	08013910 	.word	0x08013910

0800fe80 <with_errno>:
 800fe80:	b513      	push	{r0, r1, r4, lr}
 800fe82:	4604      	mov	r4, r0
 800fe84:	ed8d 0b00 	vstr	d0, [sp]
 800fe88:	f000 f86a 	bl	800ff60 <__errno>
 800fe8c:	ed9d 0b00 	vldr	d0, [sp]
 800fe90:	6004      	str	r4, [r0, #0]
 800fe92:	b002      	add	sp, #8
 800fe94:	bd10      	pop	{r4, pc}

0800fe96 <xflow>:
 800fe96:	b082      	sub	sp, #8
 800fe98:	b158      	cbz	r0, 800feb2 <xflow+0x1c>
 800fe9a:	eeb1 7b40 	vneg.f64	d7, d0
 800fe9e:	ed8d 7b00 	vstr	d7, [sp]
 800fea2:	ed9d 7b00 	vldr	d7, [sp]
 800fea6:	2022      	movs	r0, #34	; 0x22
 800fea8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800feac:	b002      	add	sp, #8
 800feae:	f7ff bfe7 	b.w	800fe80 <with_errno>
 800feb2:	eeb0 7b40 	vmov.f64	d7, d0
 800feb6:	e7f2      	b.n	800fe9e <xflow+0x8>

0800feb8 <__math_uflow>:
 800feb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fec0 <__math_uflow+0x8>
 800febc:	f7ff bfeb 	b.w	800fe96 <xflow>
 800fec0:	00000000 	.word	0x00000000
 800fec4:	10000000 	.word	0x10000000

0800fec8 <__math_oflow>:
 800fec8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fed0 <__math_oflow+0x8>
 800fecc:	f7ff bfe3 	b.w	800fe96 <xflow>
 800fed0:	00000000 	.word	0x00000000
 800fed4:	70000000 	.word	0x70000000

0800fed8 <__math_divzero>:
 800fed8:	b082      	sub	sp, #8
 800feda:	2800      	cmp	r0, #0
 800fedc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fee0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800fee4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800fee8:	ed8d 7b00 	vstr	d7, [sp]
 800feec:	ed9d 0b00 	vldr	d0, [sp]
 800fef0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800ff00 <__math_divzero+0x28>
 800fef4:	2022      	movs	r0, #34	; 0x22
 800fef6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800fefa:	b002      	add	sp, #8
 800fefc:	f7ff bfc0 	b.w	800fe80 <with_errno>
	...

0800ff08 <__math_invalid>:
 800ff08:	eeb0 7b40 	vmov.f64	d7, d0
 800ff0c:	eeb4 7b47 	vcmp.f64	d7, d7
 800ff10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff14:	ee30 6b40 	vsub.f64	d6, d0, d0
 800ff18:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800ff1c:	d602      	bvs.n	800ff24 <__math_invalid+0x1c>
 800ff1e:	2021      	movs	r0, #33	; 0x21
 800ff20:	f7ff bfae 	b.w	800fe80 <with_errno>
 800ff24:	4770      	bx	lr

0800ff26 <__math_check_uflow>:
 800ff26:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ff2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff2e:	d102      	bne.n	800ff36 <__math_check_uflow+0x10>
 800ff30:	2022      	movs	r0, #34	; 0x22
 800ff32:	f7ff bfa5 	b.w	800fe80 <with_errno>
 800ff36:	4770      	bx	lr

0800ff38 <__math_check_oflow>:
 800ff38:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800ff58 <__math_check_oflow+0x20>
 800ff3c:	eeb0 7bc0 	vabs.f64	d7, d0
 800ff40:	eeb4 7b46 	vcmp.f64	d7, d6
 800ff44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff48:	dd02      	ble.n	800ff50 <__math_check_oflow+0x18>
 800ff4a:	2022      	movs	r0, #34	; 0x22
 800ff4c:	f7ff bf98 	b.w	800fe80 <with_errno>
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	f3af 8000 	nop.w
 800ff58:	ffffffff 	.word	0xffffffff
 800ff5c:	7fefffff 	.word	0x7fefffff

0800ff60 <__errno>:
 800ff60:	4b01      	ldr	r3, [pc, #4]	; (800ff68 <__errno+0x8>)
 800ff62:	6818      	ldr	r0, [r3, #0]
 800ff64:	4770      	bx	lr
 800ff66:	bf00      	nop
 800ff68:	2400003c 	.word	0x2400003c

0800ff6c <__libc_init_array>:
 800ff6c:	b570      	push	{r4, r5, r6, lr}
 800ff6e:	4d0d      	ldr	r5, [pc, #52]	; (800ffa4 <__libc_init_array+0x38>)
 800ff70:	4c0d      	ldr	r4, [pc, #52]	; (800ffa8 <__libc_init_array+0x3c>)
 800ff72:	1b64      	subs	r4, r4, r5
 800ff74:	10a4      	asrs	r4, r4, #2
 800ff76:	2600      	movs	r6, #0
 800ff78:	42a6      	cmp	r6, r4
 800ff7a:	d109      	bne.n	800ff90 <__libc_init_array+0x24>
 800ff7c:	4d0b      	ldr	r5, [pc, #44]	; (800ffac <__libc_init_array+0x40>)
 800ff7e:	4c0c      	ldr	r4, [pc, #48]	; (800ffb0 <__libc_init_array+0x44>)
 800ff80:	f002 fc60 	bl	8012844 <_init>
 800ff84:	1b64      	subs	r4, r4, r5
 800ff86:	10a4      	asrs	r4, r4, #2
 800ff88:	2600      	movs	r6, #0
 800ff8a:	42a6      	cmp	r6, r4
 800ff8c:	d105      	bne.n	800ff9a <__libc_init_array+0x2e>
 800ff8e:	bd70      	pop	{r4, r5, r6, pc}
 800ff90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff94:	4798      	blx	r3
 800ff96:	3601      	adds	r6, #1
 800ff98:	e7ee      	b.n	800ff78 <__libc_init_array+0xc>
 800ff9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff9e:	4798      	blx	r3
 800ffa0:	3601      	adds	r6, #1
 800ffa2:	e7f2      	b.n	800ff8a <__libc_init_array+0x1e>
 800ffa4:	080146ac 	.word	0x080146ac
 800ffa8:	080146ac 	.word	0x080146ac
 800ffac:	080146ac 	.word	0x080146ac
 800ffb0:	080146b4 	.word	0x080146b4

0800ffb4 <memcpy>:
 800ffb4:	440a      	add	r2, r1
 800ffb6:	4291      	cmp	r1, r2
 800ffb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ffbc:	d100      	bne.n	800ffc0 <memcpy+0xc>
 800ffbe:	4770      	bx	lr
 800ffc0:	b510      	push	{r4, lr}
 800ffc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffca:	4291      	cmp	r1, r2
 800ffcc:	d1f9      	bne.n	800ffc2 <memcpy+0xe>
 800ffce:	bd10      	pop	{r4, pc}

0800ffd0 <memset>:
 800ffd0:	4402      	add	r2, r0
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	d100      	bne.n	800ffda <memset+0xa>
 800ffd8:	4770      	bx	lr
 800ffda:	f803 1b01 	strb.w	r1, [r3], #1
 800ffde:	e7f9      	b.n	800ffd4 <memset+0x4>

0800ffe0 <__cvt>:
 800ffe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffe2:	ed2d 8b02 	vpush	{d8}
 800ffe6:	eeb0 8b40 	vmov.f64	d8, d0
 800ffea:	b085      	sub	sp, #20
 800ffec:	4617      	mov	r7, r2
 800ffee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fff0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fff2:	ee18 2a90 	vmov	r2, s17
 800fff6:	f025 0520 	bic.w	r5, r5, #32
 800fffa:	2a00      	cmp	r2, #0
 800fffc:	bfb6      	itet	lt
 800fffe:	222d      	movlt	r2, #45	; 0x2d
 8010000:	2200      	movge	r2, #0
 8010002:	eeb1 8b40 	vneglt.f64	d8, d0
 8010006:	2d46      	cmp	r5, #70	; 0x46
 8010008:	460c      	mov	r4, r1
 801000a:	701a      	strb	r2, [r3, #0]
 801000c:	d004      	beq.n	8010018 <__cvt+0x38>
 801000e:	2d45      	cmp	r5, #69	; 0x45
 8010010:	d100      	bne.n	8010014 <__cvt+0x34>
 8010012:	3401      	adds	r4, #1
 8010014:	2102      	movs	r1, #2
 8010016:	e000      	b.n	801001a <__cvt+0x3a>
 8010018:	2103      	movs	r1, #3
 801001a:	ab03      	add	r3, sp, #12
 801001c:	9301      	str	r3, [sp, #4]
 801001e:	ab02      	add	r3, sp, #8
 8010020:	9300      	str	r3, [sp, #0]
 8010022:	4622      	mov	r2, r4
 8010024:	4633      	mov	r3, r6
 8010026:	eeb0 0b48 	vmov.f64	d0, d8
 801002a:	f000 fca9 	bl	8010980 <_dtoa_r>
 801002e:	2d47      	cmp	r5, #71	; 0x47
 8010030:	d109      	bne.n	8010046 <__cvt+0x66>
 8010032:	07fb      	lsls	r3, r7, #31
 8010034:	d407      	bmi.n	8010046 <__cvt+0x66>
 8010036:	9b03      	ldr	r3, [sp, #12]
 8010038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801003a:	1a1b      	subs	r3, r3, r0
 801003c:	6013      	str	r3, [r2, #0]
 801003e:	b005      	add	sp, #20
 8010040:	ecbd 8b02 	vpop	{d8}
 8010044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010046:	2d46      	cmp	r5, #70	; 0x46
 8010048:	eb00 0204 	add.w	r2, r0, r4
 801004c:	d10c      	bne.n	8010068 <__cvt+0x88>
 801004e:	7803      	ldrb	r3, [r0, #0]
 8010050:	2b30      	cmp	r3, #48	; 0x30
 8010052:	d107      	bne.n	8010064 <__cvt+0x84>
 8010054:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801005c:	bf1c      	itt	ne
 801005e:	f1c4 0401 	rsbne	r4, r4, #1
 8010062:	6034      	strne	r4, [r6, #0]
 8010064:	6833      	ldr	r3, [r6, #0]
 8010066:	441a      	add	r2, r3
 8010068:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801006c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010070:	bf08      	it	eq
 8010072:	9203      	streq	r2, [sp, #12]
 8010074:	2130      	movs	r1, #48	; 0x30
 8010076:	9b03      	ldr	r3, [sp, #12]
 8010078:	4293      	cmp	r3, r2
 801007a:	d2dc      	bcs.n	8010036 <__cvt+0x56>
 801007c:	1c5c      	adds	r4, r3, #1
 801007e:	9403      	str	r4, [sp, #12]
 8010080:	7019      	strb	r1, [r3, #0]
 8010082:	e7f8      	b.n	8010076 <__cvt+0x96>

08010084 <__exponent>:
 8010084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010086:	4603      	mov	r3, r0
 8010088:	2900      	cmp	r1, #0
 801008a:	bfb8      	it	lt
 801008c:	4249      	neglt	r1, r1
 801008e:	f803 2b02 	strb.w	r2, [r3], #2
 8010092:	bfb4      	ite	lt
 8010094:	222d      	movlt	r2, #45	; 0x2d
 8010096:	222b      	movge	r2, #43	; 0x2b
 8010098:	2909      	cmp	r1, #9
 801009a:	7042      	strb	r2, [r0, #1]
 801009c:	dd2a      	ble.n	80100f4 <__exponent+0x70>
 801009e:	f10d 0407 	add.w	r4, sp, #7
 80100a2:	46a4      	mov	ip, r4
 80100a4:	270a      	movs	r7, #10
 80100a6:	46a6      	mov	lr, r4
 80100a8:	460a      	mov	r2, r1
 80100aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80100ae:	fb07 1516 	mls	r5, r7, r6, r1
 80100b2:	3530      	adds	r5, #48	; 0x30
 80100b4:	2a63      	cmp	r2, #99	; 0x63
 80100b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80100ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80100be:	4631      	mov	r1, r6
 80100c0:	dcf1      	bgt.n	80100a6 <__exponent+0x22>
 80100c2:	3130      	adds	r1, #48	; 0x30
 80100c4:	f1ae 0502 	sub.w	r5, lr, #2
 80100c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80100cc:	1c44      	adds	r4, r0, #1
 80100ce:	4629      	mov	r1, r5
 80100d0:	4561      	cmp	r1, ip
 80100d2:	d30a      	bcc.n	80100ea <__exponent+0x66>
 80100d4:	f10d 0209 	add.w	r2, sp, #9
 80100d8:	eba2 020e 	sub.w	r2, r2, lr
 80100dc:	4565      	cmp	r5, ip
 80100de:	bf88      	it	hi
 80100e0:	2200      	movhi	r2, #0
 80100e2:	4413      	add	r3, r2
 80100e4:	1a18      	subs	r0, r3, r0
 80100e6:	b003      	add	sp, #12
 80100e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80100f2:	e7ed      	b.n	80100d0 <__exponent+0x4c>
 80100f4:	2330      	movs	r3, #48	; 0x30
 80100f6:	3130      	adds	r1, #48	; 0x30
 80100f8:	7083      	strb	r3, [r0, #2]
 80100fa:	70c1      	strb	r1, [r0, #3]
 80100fc:	1d03      	adds	r3, r0, #4
 80100fe:	e7f1      	b.n	80100e4 <__exponent+0x60>

08010100 <_printf_float>:
 8010100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010104:	b08b      	sub	sp, #44	; 0x2c
 8010106:	460c      	mov	r4, r1
 8010108:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801010c:	4616      	mov	r6, r2
 801010e:	461f      	mov	r7, r3
 8010110:	4605      	mov	r5, r0
 8010112:	f001 f9b7 	bl	8011484 <_localeconv_r>
 8010116:	f8d0 b000 	ldr.w	fp, [r0]
 801011a:	4658      	mov	r0, fp
 801011c:	f7f0 f8e0 	bl	80002e0 <strlen>
 8010120:	2300      	movs	r3, #0
 8010122:	9308      	str	r3, [sp, #32]
 8010124:	f8d8 3000 	ldr.w	r3, [r8]
 8010128:	f894 9018 	ldrb.w	r9, [r4, #24]
 801012c:	6822      	ldr	r2, [r4, #0]
 801012e:	3307      	adds	r3, #7
 8010130:	f023 0307 	bic.w	r3, r3, #7
 8010134:	f103 0108 	add.w	r1, r3, #8
 8010138:	f8c8 1000 	str.w	r1, [r8]
 801013c:	4682      	mov	sl, r0
 801013e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010142:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010146:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80103a8 <_printf_float+0x2a8>
 801014a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801014e:	eeb0 6bc0 	vabs.f64	d6, d0
 8010152:	eeb4 6b47 	vcmp.f64	d6, d7
 8010156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801015a:	dd24      	ble.n	80101a6 <_printf_float+0xa6>
 801015c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010164:	d502      	bpl.n	801016c <_printf_float+0x6c>
 8010166:	232d      	movs	r3, #45	; 0x2d
 8010168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801016c:	4b90      	ldr	r3, [pc, #576]	; (80103b0 <_printf_float+0x2b0>)
 801016e:	4891      	ldr	r0, [pc, #580]	; (80103b4 <_printf_float+0x2b4>)
 8010170:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010174:	bf94      	ite	ls
 8010176:	4698      	movls	r8, r3
 8010178:	4680      	movhi	r8, r0
 801017a:	2303      	movs	r3, #3
 801017c:	6123      	str	r3, [r4, #16]
 801017e:	f022 0204 	bic.w	r2, r2, #4
 8010182:	2300      	movs	r3, #0
 8010184:	6022      	str	r2, [r4, #0]
 8010186:	9304      	str	r3, [sp, #16]
 8010188:	9700      	str	r7, [sp, #0]
 801018a:	4633      	mov	r3, r6
 801018c:	aa09      	add	r2, sp, #36	; 0x24
 801018e:	4621      	mov	r1, r4
 8010190:	4628      	mov	r0, r5
 8010192:	f000 f9d3 	bl	801053c <_printf_common>
 8010196:	3001      	adds	r0, #1
 8010198:	f040 808a 	bne.w	80102b0 <_printf_float+0x1b0>
 801019c:	f04f 30ff 	mov.w	r0, #4294967295
 80101a0:	b00b      	add	sp, #44	; 0x2c
 80101a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a6:	eeb4 0b40 	vcmp.f64	d0, d0
 80101aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ae:	d709      	bvc.n	80101c4 <_printf_float+0xc4>
 80101b0:	ee10 3a90 	vmov	r3, s1
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	bfbc      	itt	lt
 80101b8:	232d      	movlt	r3, #45	; 0x2d
 80101ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80101be:	487e      	ldr	r0, [pc, #504]	; (80103b8 <_printf_float+0x2b8>)
 80101c0:	4b7e      	ldr	r3, [pc, #504]	; (80103bc <_printf_float+0x2bc>)
 80101c2:	e7d5      	b.n	8010170 <_printf_float+0x70>
 80101c4:	6863      	ldr	r3, [r4, #4]
 80101c6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80101ca:	9104      	str	r1, [sp, #16]
 80101cc:	1c59      	adds	r1, r3, #1
 80101ce:	d13c      	bne.n	801024a <_printf_float+0x14a>
 80101d0:	2306      	movs	r3, #6
 80101d2:	6063      	str	r3, [r4, #4]
 80101d4:	2300      	movs	r3, #0
 80101d6:	9303      	str	r3, [sp, #12]
 80101d8:	ab08      	add	r3, sp, #32
 80101da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80101de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80101e2:	ab07      	add	r3, sp, #28
 80101e4:	6861      	ldr	r1, [r4, #4]
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	6022      	str	r2, [r4, #0]
 80101ea:	f10d 031b 	add.w	r3, sp, #27
 80101ee:	4628      	mov	r0, r5
 80101f0:	f7ff fef6 	bl	800ffe0 <__cvt>
 80101f4:	9b04      	ldr	r3, [sp, #16]
 80101f6:	9907      	ldr	r1, [sp, #28]
 80101f8:	2b47      	cmp	r3, #71	; 0x47
 80101fa:	4680      	mov	r8, r0
 80101fc:	d108      	bne.n	8010210 <_printf_float+0x110>
 80101fe:	1cc8      	adds	r0, r1, #3
 8010200:	db02      	blt.n	8010208 <_printf_float+0x108>
 8010202:	6863      	ldr	r3, [r4, #4]
 8010204:	4299      	cmp	r1, r3
 8010206:	dd41      	ble.n	801028c <_printf_float+0x18c>
 8010208:	f1a9 0902 	sub.w	r9, r9, #2
 801020c:	fa5f f989 	uxtb.w	r9, r9
 8010210:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010214:	d820      	bhi.n	8010258 <_printf_float+0x158>
 8010216:	3901      	subs	r1, #1
 8010218:	464a      	mov	r2, r9
 801021a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801021e:	9107      	str	r1, [sp, #28]
 8010220:	f7ff ff30 	bl	8010084 <__exponent>
 8010224:	9a08      	ldr	r2, [sp, #32]
 8010226:	9004      	str	r0, [sp, #16]
 8010228:	1813      	adds	r3, r2, r0
 801022a:	2a01      	cmp	r2, #1
 801022c:	6123      	str	r3, [r4, #16]
 801022e:	dc02      	bgt.n	8010236 <_printf_float+0x136>
 8010230:	6822      	ldr	r2, [r4, #0]
 8010232:	07d2      	lsls	r2, r2, #31
 8010234:	d501      	bpl.n	801023a <_printf_float+0x13a>
 8010236:	3301      	adds	r3, #1
 8010238:	6123      	str	r3, [r4, #16]
 801023a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d0a2      	beq.n	8010188 <_printf_float+0x88>
 8010242:	232d      	movs	r3, #45	; 0x2d
 8010244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010248:	e79e      	b.n	8010188 <_printf_float+0x88>
 801024a:	9904      	ldr	r1, [sp, #16]
 801024c:	2947      	cmp	r1, #71	; 0x47
 801024e:	d1c1      	bne.n	80101d4 <_printf_float+0xd4>
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1bf      	bne.n	80101d4 <_printf_float+0xd4>
 8010254:	2301      	movs	r3, #1
 8010256:	e7bc      	b.n	80101d2 <_printf_float+0xd2>
 8010258:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801025c:	d118      	bne.n	8010290 <_printf_float+0x190>
 801025e:	2900      	cmp	r1, #0
 8010260:	6863      	ldr	r3, [r4, #4]
 8010262:	dd0b      	ble.n	801027c <_printf_float+0x17c>
 8010264:	6121      	str	r1, [r4, #16]
 8010266:	b913      	cbnz	r3, 801026e <_printf_float+0x16e>
 8010268:	6822      	ldr	r2, [r4, #0]
 801026a:	07d0      	lsls	r0, r2, #31
 801026c:	d502      	bpl.n	8010274 <_printf_float+0x174>
 801026e:	3301      	adds	r3, #1
 8010270:	440b      	add	r3, r1
 8010272:	6123      	str	r3, [r4, #16]
 8010274:	2300      	movs	r3, #0
 8010276:	65a1      	str	r1, [r4, #88]	; 0x58
 8010278:	9304      	str	r3, [sp, #16]
 801027a:	e7de      	b.n	801023a <_printf_float+0x13a>
 801027c:	b913      	cbnz	r3, 8010284 <_printf_float+0x184>
 801027e:	6822      	ldr	r2, [r4, #0]
 8010280:	07d2      	lsls	r2, r2, #31
 8010282:	d501      	bpl.n	8010288 <_printf_float+0x188>
 8010284:	3302      	adds	r3, #2
 8010286:	e7f4      	b.n	8010272 <_printf_float+0x172>
 8010288:	2301      	movs	r3, #1
 801028a:	e7f2      	b.n	8010272 <_printf_float+0x172>
 801028c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010290:	9b08      	ldr	r3, [sp, #32]
 8010292:	4299      	cmp	r1, r3
 8010294:	db05      	blt.n	80102a2 <_printf_float+0x1a2>
 8010296:	6823      	ldr	r3, [r4, #0]
 8010298:	6121      	str	r1, [r4, #16]
 801029a:	07d8      	lsls	r0, r3, #31
 801029c:	d5ea      	bpl.n	8010274 <_printf_float+0x174>
 801029e:	1c4b      	adds	r3, r1, #1
 80102a0:	e7e7      	b.n	8010272 <_printf_float+0x172>
 80102a2:	2900      	cmp	r1, #0
 80102a4:	bfd4      	ite	le
 80102a6:	f1c1 0202 	rsble	r2, r1, #2
 80102aa:	2201      	movgt	r2, #1
 80102ac:	4413      	add	r3, r2
 80102ae:	e7e0      	b.n	8010272 <_printf_float+0x172>
 80102b0:	6823      	ldr	r3, [r4, #0]
 80102b2:	055a      	lsls	r2, r3, #21
 80102b4:	d407      	bmi.n	80102c6 <_printf_float+0x1c6>
 80102b6:	6923      	ldr	r3, [r4, #16]
 80102b8:	4642      	mov	r2, r8
 80102ba:	4631      	mov	r1, r6
 80102bc:	4628      	mov	r0, r5
 80102be:	47b8      	blx	r7
 80102c0:	3001      	adds	r0, #1
 80102c2:	d12a      	bne.n	801031a <_printf_float+0x21a>
 80102c4:	e76a      	b.n	801019c <_printf_float+0x9c>
 80102c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80102ca:	f240 80e2 	bls.w	8010492 <_printf_float+0x392>
 80102ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80102d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80102d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102da:	d133      	bne.n	8010344 <_printf_float+0x244>
 80102dc:	4a38      	ldr	r2, [pc, #224]	; (80103c0 <_printf_float+0x2c0>)
 80102de:	2301      	movs	r3, #1
 80102e0:	4631      	mov	r1, r6
 80102e2:	4628      	mov	r0, r5
 80102e4:	47b8      	blx	r7
 80102e6:	3001      	adds	r0, #1
 80102e8:	f43f af58 	beq.w	801019c <_printf_float+0x9c>
 80102ec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	db02      	blt.n	80102fa <_printf_float+0x1fa>
 80102f4:	6823      	ldr	r3, [r4, #0]
 80102f6:	07d8      	lsls	r0, r3, #31
 80102f8:	d50f      	bpl.n	801031a <_printf_float+0x21a>
 80102fa:	4653      	mov	r3, sl
 80102fc:	465a      	mov	r2, fp
 80102fe:	4631      	mov	r1, r6
 8010300:	4628      	mov	r0, r5
 8010302:	47b8      	blx	r7
 8010304:	3001      	adds	r0, #1
 8010306:	f43f af49 	beq.w	801019c <_printf_float+0x9c>
 801030a:	f04f 0800 	mov.w	r8, #0
 801030e:	f104 091a 	add.w	r9, r4, #26
 8010312:	9b08      	ldr	r3, [sp, #32]
 8010314:	3b01      	subs	r3, #1
 8010316:	4543      	cmp	r3, r8
 8010318:	dc09      	bgt.n	801032e <_printf_float+0x22e>
 801031a:	6823      	ldr	r3, [r4, #0]
 801031c:	079b      	lsls	r3, r3, #30
 801031e:	f100 8108 	bmi.w	8010532 <_printf_float+0x432>
 8010322:	68e0      	ldr	r0, [r4, #12]
 8010324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010326:	4298      	cmp	r0, r3
 8010328:	bfb8      	it	lt
 801032a:	4618      	movlt	r0, r3
 801032c:	e738      	b.n	80101a0 <_printf_float+0xa0>
 801032e:	2301      	movs	r3, #1
 8010330:	464a      	mov	r2, r9
 8010332:	4631      	mov	r1, r6
 8010334:	4628      	mov	r0, r5
 8010336:	47b8      	blx	r7
 8010338:	3001      	adds	r0, #1
 801033a:	f43f af2f 	beq.w	801019c <_printf_float+0x9c>
 801033e:	f108 0801 	add.w	r8, r8, #1
 8010342:	e7e6      	b.n	8010312 <_printf_float+0x212>
 8010344:	9b07      	ldr	r3, [sp, #28]
 8010346:	2b00      	cmp	r3, #0
 8010348:	dc3c      	bgt.n	80103c4 <_printf_float+0x2c4>
 801034a:	4a1d      	ldr	r2, [pc, #116]	; (80103c0 <_printf_float+0x2c0>)
 801034c:	2301      	movs	r3, #1
 801034e:	4631      	mov	r1, r6
 8010350:	4628      	mov	r0, r5
 8010352:	47b8      	blx	r7
 8010354:	3001      	adds	r0, #1
 8010356:	f43f af21 	beq.w	801019c <_printf_float+0x9c>
 801035a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801035e:	4313      	orrs	r3, r2
 8010360:	d102      	bne.n	8010368 <_printf_float+0x268>
 8010362:	6823      	ldr	r3, [r4, #0]
 8010364:	07d9      	lsls	r1, r3, #31
 8010366:	d5d8      	bpl.n	801031a <_printf_float+0x21a>
 8010368:	4653      	mov	r3, sl
 801036a:	465a      	mov	r2, fp
 801036c:	4631      	mov	r1, r6
 801036e:	4628      	mov	r0, r5
 8010370:	47b8      	blx	r7
 8010372:	3001      	adds	r0, #1
 8010374:	f43f af12 	beq.w	801019c <_printf_float+0x9c>
 8010378:	f04f 0900 	mov.w	r9, #0
 801037c:	f104 0a1a 	add.w	sl, r4, #26
 8010380:	9b07      	ldr	r3, [sp, #28]
 8010382:	425b      	negs	r3, r3
 8010384:	454b      	cmp	r3, r9
 8010386:	dc01      	bgt.n	801038c <_printf_float+0x28c>
 8010388:	9b08      	ldr	r3, [sp, #32]
 801038a:	e795      	b.n	80102b8 <_printf_float+0x1b8>
 801038c:	2301      	movs	r3, #1
 801038e:	4652      	mov	r2, sl
 8010390:	4631      	mov	r1, r6
 8010392:	4628      	mov	r0, r5
 8010394:	47b8      	blx	r7
 8010396:	3001      	adds	r0, #1
 8010398:	f43f af00 	beq.w	801019c <_printf_float+0x9c>
 801039c:	f109 0901 	add.w	r9, r9, #1
 80103a0:	e7ee      	b.n	8010380 <_printf_float+0x280>
 80103a2:	bf00      	nop
 80103a4:	f3af 8000 	nop.w
 80103a8:	ffffffff 	.word	0xffffffff
 80103ac:	7fefffff 	.word	0x7fefffff
 80103b0:	080142c4 	.word	0x080142c4
 80103b4:	080142c8 	.word	0x080142c8
 80103b8:	080142d0 	.word	0x080142d0
 80103bc:	080142cc 	.word	0x080142cc
 80103c0:	080142d4 	.word	0x080142d4
 80103c4:	9a08      	ldr	r2, [sp, #32]
 80103c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103c8:	429a      	cmp	r2, r3
 80103ca:	bfa8      	it	ge
 80103cc:	461a      	movge	r2, r3
 80103ce:	2a00      	cmp	r2, #0
 80103d0:	4691      	mov	r9, r2
 80103d2:	dc38      	bgt.n	8010446 <_printf_float+0x346>
 80103d4:	2300      	movs	r3, #0
 80103d6:	9305      	str	r3, [sp, #20]
 80103d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103dc:	f104 021a 	add.w	r2, r4, #26
 80103e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103e2:	9905      	ldr	r1, [sp, #20]
 80103e4:	9304      	str	r3, [sp, #16]
 80103e6:	eba3 0309 	sub.w	r3, r3, r9
 80103ea:	428b      	cmp	r3, r1
 80103ec:	dc33      	bgt.n	8010456 <_printf_float+0x356>
 80103ee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	db3c      	blt.n	8010470 <_printf_float+0x370>
 80103f6:	6823      	ldr	r3, [r4, #0]
 80103f8:	07da      	lsls	r2, r3, #31
 80103fa:	d439      	bmi.n	8010470 <_printf_float+0x370>
 80103fc:	9a08      	ldr	r2, [sp, #32]
 80103fe:	9b04      	ldr	r3, [sp, #16]
 8010400:	9907      	ldr	r1, [sp, #28]
 8010402:	1ad3      	subs	r3, r2, r3
 8010404:	eba2 0901 	sub.w	r9, r2, r1
 8010408:	4599      	cmp	r9, r3
 801040a:	bfa8      	it	ge
 801040c:	4699      	movge	r9, r3
 801040e:	f1b9 0f00 	cmp.w	r9, #0
 8010412:	dc35      	bgt.n	8010480 <_printf_float+0x380>
 8010414:	f04f 0800 	mov.w	r8, #0
 8010418:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801041c:	f104 0a1a 	add.w	sl, r4, #26
 8010420:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010424:	1a9b      	subs	r3, r3, r2
 8010426:	eba3 0309 	sub.w	r3, r3, r9
 801042a:	4543      	cmp	r3, r8
 801042c:	f77f af75 	ble.w	801031a <_printf_float+0x21a>
 8010430:	2301      	movs	r3, #1
 8010432:	4652      	mov	r2, sl
 8010434:	4631      	mov	r1, r6
 8010436:	4628      	mov	r0, r5
 8010438:	47b8      	blx	r7
 801043a:	3001      	adds	r0, #1
 801043c:	f43f aeae 	beq.w	801019c <_printf_float+0x9c>
 8010440:	f108 0801 	add.w	r8, r8, #1
 8010444:	e7ec      	b.n	8010420 <_printf_float+0x320>
 8010446:	4613      	mov	r3, r2
 8010448:	4631      	mov	r1, r6
 801044a:	4642      	mov	r2, r8
 801044c:	4628      	mov	r0, r5
 801044e:	47b8      	blx	r7
 8010450:	3001      	adds	r0, #1
 8010452:	d1bf      	bne.n	80103d4 <_printf_float+0x2d4>
 8010454:	e6a2      	b.n	801019c <_printf_float+0x9c>
 8010456:	2301      	movs	r3, #1
 8010458:	4631      	mov	r1, r6
 801045a:	4628      	mov	r0, r5
 801045c:	9204      	str	r2, [sp, #16]
 801045e:	47b8      	blx	r7
 8010460:	3001      	adds	r0, #1
 8010462:	f43f ae9b 	beq.w	801019c <_printf_float+0x9c>
 8010466:	9b05      	ldr	r3, [sp, #20]
 8010468:	9a04      	ldr	r2, [sp, #16]
 801046a:	3301      	adds	r3, #1
 801046c:	9305      	str	r3, [sp, #20]
 801046e:	e7b7      	b.n	80103e0 <_printf_float+0x2e0>
 8010470:	4653      	mov	r3, sl
 8010472:	465a      	mov	r2, fp
 8010474:	4631      	mov	r1, r6
 8010476:	4628      	mov	r0, r5
 8010478:	47b8      	blx	r7
 801047a:	3001      	adds	r0, #1
 801047c:	d1be      	bne.n	80103fc <_printf_float+0x2fc>
 801047e:	e68d      	b.n	801019c <_printf_float+0x9c>
 8010480:	9a04      	ldr	r2, [sp, #16]
 8010482:	464b      	mov	r3, r9
 8010484:	4442      	add	r2, r8
 8010486:	4631      	mov	r1, r6
 8010488:	4628      	mov	r0, r5
 801048a:	47b8      	blx	r7
 801048c:	3001      	adds	r0, #1
 801048e:	d1c1      	bne.n	8010414 <_printf_float+0x314>
 8010490:	e684      	b.n	801019c <_printf_float+0x9c>
 8010492:	9a08      	ldr	r2, [sp, #32]
 8010494:	2a01      	cmp	r2, #1
 8010496:	dc01      	bgt.n	801049c <_printf_float+0x39c>
 8010498:	07db      	lsls	r3, r3, #31
 801049a:	d537      	bpl.n	801050c <_printf_float+0x40c>
 801049c:	2301      	movs	r3, #1
 801049e:	4642      	mov	r2, r8
 80104a0:	4631      	mov	r1, r6
 80104a2:	4628      	mov	r0, r5
 80104a4:	47b8      	blx	r7
 80104a6:	3001      	adds	r0, #1
 80104a8:	f43f ae78 	beq.w	801019c <_printf_float+0x9c>
 80104ac:	4653      	mov	r3, sl
 80104ae:	465a      	mov	r2, fp
 80104b0:	4631      	mov	r1, r6
 80104b2:	4628      	mov	r0, r5
 80104b4:	47b8      	blx	r7
 80104b6:	3001      	adds	r0, #1
 80104b8:	f43f ae70 	beq.w	801019c <_printf_float+0x9c>
 80104bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80104c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80104c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104c8:	d01b      	beq.n	8010502 <_printf_float+0x402>
 80104ca:	9b08      	ldr	r3, [sp, #32]
 80104cc:	f108 0201 	add.w	r2, r8, #1
 80104d0:	3b01      	subs	r3, #1
 80104d2:	4631      	mov	r1, r6
 80104d4:	4628      	mov	r0, r5
 80104d6:	47b8      	blx	r7
 80104d8:	3001      	adds	r0, #1
 80104da:	d10e      	bne.n	80104fa <_printf_float+0x3fa>
 80104dc:	e65e      	b.n	801019c <_printf_float+0x9c>
 80104de:	2301      	movs	r3, #1
 80104e0:	464a      	mov	r2, r9
 80104e2:	4631      	mov	r1, r6
 80104e4:	4628      	mov	r0, r5
 80104e6:	47b8      	blx	r7
 80104e8:	3001      	adds	r0, #1
 80104ea:	f43f ae57 	beq.w	801019c <_printf_float+0x9c>
 80104ee:	f108 0801 	add.w	r8, r8, #1
 80104f2:	9b08      	ldr	r3, [sp, #32]
 80104f4:	3b01      	subs	r3, #1
 80104f6:	4543      	cmp	r3, r8
 80104f8:	dcf1      	bgt.n	80104de <_printf_float+0x3de>
 80104fa:	9b04      	ldr	r3, [sp, #16]
 80104fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010500:	e6db      	b.n	80102ba <_printf_float+0x1ba>
 8010502:	f04f 0800 	mov.w	r8, #0
 8010506:	f104 091a 	add.w	r9, r4, #26
 801050a:	e7f2      	b.n	80104f2 <_printf_float+0x3f2>
 801050c:	2301      	movs	r3, #1
 801050e:	4642      	mov	r2, r8
 8010510:	e7df      	b.n	80104d2 <_printf_float+0x3d2>
 8010512:	2301      	movs	r3, #1
 8010514:	464a      	mov	r2, r9
 8010516:	4631      	mov	r1, r6
 8010518:	4628      	mov	r0, r5
 801051a:	47b8      	blx	r7
 801051c:	3001      	adds	r0, #1
 801051e:	f43f ae3d 	beq.w	801019c <_printf_float+0x9c>
 8010522:	f108 0801 	add.w	r8, r8, #1
 8010526:	68e3      	ldr	r3, [r4, #12]
 8010528:	9909      	ldr	r1, [sp, #36]	; 0x24
 801052a:	1a5b      	subs	r3, r3, r1
 801052c:	4543      	cmp	r3, r8
 801052e:	dcf0      	bgt.n	8010512 <_printf_float+0x412>
 8010530:	e6f7      	b.n	8010322 <_printf_float+0x222>
 8010532:	f04f 0800 	mov.w	r8, #0
 8010536:	f104 0919 	add.w	r9, r4, #25
 801053a:	e7f4      	b.n	8010526 <_printf_float+0x426>

0801053c <_printf_common>:
 801053c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010540:	4616      	mov	r6, r2
 8010542:	4699      	mov	r9, r3
 8010544:	688a      	ldr	r2, [r1, #8]
 8010546:	690b      	ldr	r3, [r1, #16]
 8010548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801054c:	4293      	cmp	r3, r2
 801054e:	bfb8      	it	lt
 8010550:	4613      	movlt	r3, r2
 8010552:	6033      	str	r3, [r6, #0]
 8010554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010558:	4607      	mov	r7, r0
 801055a:	460c      	mov	r4, r1
 801055c:	b10a      	cbz	r2, 8010562 <_printf_common+0x26>
 801055e:	3301      	adds	r3, #1
 8010560:	6033      	str	r3, [r6, #0]
 8010562:	6823      	ldr	r3, [r4, #0]
 8010564:	0699      	lsls	r1, r3, #26
 8010566:	bf42      	ittt	mi
 8010568:	6833      	ldrmi	r3, [r6, #0]
 801056a:	3302      	addmi	r3, #2
 801056c:	6033      	strmi	r3, [r6, #0]
 801056e:	6825      	ldr	r5, [r4, #0]
 8010570:	f015 0506 	ands.w	r5, r5, #6
 8010574:	d106      	bne.n	8010584 <_printf_common+0x48>
 8010576:	f104 0a19 	add.w	sl, r4, #25
 801057a:	68e3      	ldr	r3, [r4, #12]
 801057c:	6832      	ldr	r2, [r6, #0]
 801057e:	1a9b      	subs	r3, r3, r2
 8010580:	42ab      	cmp	r3, r5
 8010582:	dc26      	bgt.n	80105d2 <_printf_common+0x96>
 8010584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010588:	1e13      	subs	r3, r2, #0
 801058a:	6822      	ldr	r2, [r4, #0]
 801058c:	bf18      	it	ne
 801058e:	2301      	movne	r3, #1
 8010590:	0692      	lsls	r2, r2, #26
 8010592:	d42b      	bmi.n	80105ec <_printf_common+0xb0>
 8010594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010598:	4649      	mov	r1, r9
 801059a:	4638      	mov	r0, r7
 801059c:	47c0      	blx	r8
 801059e:	3001      	adds	r0, #1
 80105a0:	d01e      	beq.n	80105e0 <_printf_common+0xa4>
 80105a2:	6823      	ldr	r3, [r4, #0]
 80105a4:	68e5      	ldr	r5, [r4, #12]
 80105a6:	6832      	ldr	r2, [r6, #0]
 80105a8:	f003 0306 	and.w	r3, r3, #6
 80105ac:	2b04      	cmp	r3, #4
 80105ae:	bf08      	it	eq
 80105b0:	1aad      	subeq	r5, r5, r2
 80105b2:	68a3      	ldr	r3, [r4, #8]
 80105b4:	6922      	ldr	r2, [r4, #16]
 80105b6:	bf0c      	ite	eq
 80105b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105bc:	2500      	movne	r5, #0
 80105be:	4293      	cmp	r3, r2
 80105c0:	bfc4      	itt	gt
 80105c2:	1a9b      	subgt	r3, r3, r2
 80105c4:	18ed      	addgt	r5, r5, r3
 80105c6:	2600      	movs	r6, #0
 80105c8:	341a      	adds	r4, #26
 80105ca:	42b5      	cmp	r5, r6
 80105cc:	d11a      	bne.n	8010604 <_printf_common+0xc8>
 80105ce:	2000      	movs	r0, #0
 80105d0:	e008      	b.n	80105e4 <_printf_common+0xa8>
 80105d2:	2301      	movs	r3, #1
 80105d4:	4652      	mov	r2, sl
 80105d6:	4649      	mov	r1, r9
 80105d8:	4638      	mov	r0, r7
 80105da:	47c0      	blx	r8
 80105dc:	3001      	adds	r0, #1
 80105de:	d103      	bne.n	80105e8 <_printf_common+0xac>
 80105e0:	f04f 30ff 	mov.w	r0, #4294967295
 80105e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105e8:	3501      	adds	r5, #1
 80105ea:	e7c6      	b.n	801057a <_printf_common+0x3e>
 80105ec:	18e1      	adds	r1, r4, r3
 80105ee:	1c5a      	adds	r2, r3, #1
 80105f0:	2030      	movs	r0, #48	; 0x30
 80105f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80105f6:	4422      	add	r2, r4
 80105f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80105fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010600:	3302      	adds	r3, #2
 8010602:	e7c7      	b.n	8010594 <_printf_common+0x58>
 8010604:	2301      	movs	r3, #1
 8010606:	4622      	mov	r2, r4
 8010608:	4649      	mov	r1, r9
 801060a:	4638      	mov	r0, r7
 801060c:	47c0      	blx	r8
 801060e:	3001      	adds	r0, #1
 8010610:	d0e6      	beq.n	80105e0 <_printf_common+0xa4>
 8010612:	3601      	adds	r6, #1
 8010614:	e7d9      	b.n	80105ca <_printf_common+0x8e>
	...

08010618 <_printf_i>:
 8010618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801061c:	460c      	mov	r4, r1
 801061e:	4691      	mov	r9, r2
 8010620:	7e27      	ldrb	r7, [r4, #24]
 8010622:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010624:	2f78      	cmp	r7, #120	; 0x78
 8010626:	4680      	mov	r8, r0
 8010628:	469a      	mov	sl, r3
 801062a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801062e:	d807      	bhi.n	8010640 <_printf_i+0x28>
 8010630:	2f62      	cmp	r7, #98	; 0x62
 8010632:	d80a      	bhi.n	801064a <_printf_i+0x32>
 8010634:	2f00      	cmp	r7, #0
 8010636:	f000 80d8 	beq.w	80107ea <_printf_i+0x1d2>
 801063a:	2f58      	cmp	r7, #88	; 0x58
 801063c:	f000 80a3 	beq.w	8010786 <_printf_i+0x16e>
 8010640:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010648:	e03a      	b.n	80106c0 <_printf_i+0xa8>
 801064a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801064e:	2b15      	cmp	r3, #21
 8010650:	d8f6      	bhi.n	8010640 <_printf_i+0x28>
 8010652:	a001      	add	r0, pc, #4	; (adr r0, 8010658 <_printf_i+0x40>)
 8010654:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010658:	080106b1 	.word	0x080106b1
 801065c:	080106c5 	.word	0x080106c5
 8010660:	08010641 	.word	0x08010641
 8010664:	08010641 	.word	0x08010641
 8010668:	08010641 	.word	0x08010641
 801066c:	08010641 	.word	0x08010641
 8010670:	080106c5 	.word	0x080106c5
 8010674:	08010641 	.word	0x08010641
 8010678:	08010641 	.word	0x08010641
 801067c:	08010641 	.word	0x08010641
 8010680:	08010641 	.word	0x08010641
 8010684:	080107d1 	.word	0x080107d1
 8010688:	080106f5 	.word	0x080106f5
 801068c:	080107b3 	.word	0x080107b3
 8010690:	08010641 	.word	0x08010641
 8010694:	08010641 	.word	0x08010641
 8010698:	080107f3 	.word	0x080107f3
 801069c:	08010641 	.word	0x08010641
 80106a0:	080106f5 	.word	0x080106f5
 80106a4:	08010641 	.word	0x08010641
 80106a8:	08010641 	.word	0x08010641
 80106ac:	080107bb 	.word	0x080107bb
 80106b0:	680b      	ldr	r3, [r1, #0]
 80106b2:	1d1a      	adds	r2, r3, #4
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	600a      	str	r2, [r1, #0]
 80106b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80106bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106c0:	2301      	movs	r3, #1
 80106c2:	e0a3      	b.n	801080c <_printf_i+0x1f4>
 80106c4:	6825      	ldr	r5, [r4, #0]
 80106c6:	6808      	ldr	r0, [r1, #0]
 80106c8:	062e      	lsls	r6, r5, #24
 80106ca:	f100 0304 	add.w	r3, r0, #4
 80106ce:	d50a      	bpl.n	80106e6 <_printf_i+0xce>
 80106d0:	6805      	ldr	r5, [r0, #0]
 80106d2:	600b      	str	r3, [r1, #0]
 80106d4:	2d00      	cmp	r5, #0
 80106d6:	da03      	bge.n	80106e0 <_printf_i+0xc8>
 80106d8:	232d      	movs	r3, #45	; 0x2d
 80106da:	426d      	negs	r5, r5
 80106dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106e0:	485e      	ldr	r0, [pc, #376]	; (801085c <_printf_i+0x244>)
 80106e2:	230a      	movs	r3, #10
 80106e4:	e019      	b.n	801071a <_printf_i+0x102>
 80106e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80106ea:	6805      	ldr	r5, [r0, #0]
 80106ec:	600b      	str	r3, [r1, #0]
 80106ee:	bf18      	it	ne
 80106f0:	b22d      	sxthne	r5, r5
 80106f2:	e7ef      	b.n	80106d4 <_printf_i+0xbc>
 80106f4:	680b      	ldr	r3, [r1, #0]
 80106f6:	6825      	ldr	r5, [r4, #0]
 80106f8:	1d18      	adds	r0, r3, #4
 80106fa:	6008      	str	r0, [r1, #0]
 80106fc:	0628      	lsls	r0, r5, #24
 80106fe:	d501      	bpl.n	8010704 <_printf_i+0xec>
 8010700:	681d      	ldr	r5, [r3, #0]
 8010702:	e002      	b.n	801070a <_printf_i+0xf2>
 8010704:	0669      	lsls	r1, r5, #25
 8010706:	d5fb      	bpl.n	8010700 <_printf_i+0xe8>
 8010708:	881d      	ldrh	r5, [r3, #0]
 801070a:	4854      	ldr	r0, [pc, #336]	; (801085c <_printf_i+0x244>)
 801070c:	2f6f      	cmp	r7, #111	; 0x6f
 801070e:	bf0c      	ite	eq
 8010710:	2308      	moveq	r3, #8
 8010712:	230a      	movne	r3, #10
 8010714:	2100      	movs	r1, #0
 8010716:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801071a:	6866      	ldr	r6, [r4, #4]
 801071c:	60a6      	str	r6, [r4, #8]
 801071e:	2e00      	cmp	r6, #0
 8010720:	bfa2      	ittt	ge
 8010722:	6821      	ldrge	r1, [r4, #0]
 8010724:	f021 0104 	bicge.w	r1, r1, #4
 8010728:	6021      	strge	r1, [r4, #0]
 801072a:	b90d      	cbnz	r5, 8010730 <_printf_i+0x118>
 801072c:	2e00      	cmp	r6, #0
 801072e:	d04d      	beq.n	80107cc <_printf_i+0x1b4>
 8010730:	4616      	mov	r6, r2
 8010732:	fbb5 f1f3 	udiv	r1, r5, r3
 8010736:	fb03 5711 	mls	r7, r3, r1, r5
 801073a:	5dc7      	ldrb	r7, [r0, r7]
 801073c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010740:	462f      	mov	r7, r5
 8010742:	42bb      	cmp	r3, r7
 8010744:	460d      	mov	r5, r1
 8010746:	d9f4      	bls.n	8010732 <_printf_i+0x11a>
 8010748:	2b08      	cmp	r3, #8
 801074a:	d10b      	bne.n	8010764 <_printf_i+0x14c>
 801074c:	6823      	ldr	r3, [r4, #0]
 801074e:	07df      	lsls	r7, r3, #31
 8010750:	d508      	bpl.n	8010764 <_printf_i+0x14c>
 8010752:	6923      	ldr	r3, [r4, #16]
 8010754:	6861      	ldr	r1, [r4, #4]
 8010756:	4299      	cmp	r1, r3
 8010758:	bfde      	ittt	le
 801075a:	2330      	movle	r3, #48	; 0x30
 801075c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010760:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010764:	1b92      	subs	r2, r2, r6
 8010766:	6122      	str	r2, [r4, #16]
 8010768:	f8cd a000 	str.w	sl, [sp]
 801076c:	464b      	mov	r3, r9
 801076e:	aa03      	add	r2, sp, #12
 8010770:	4621      	mov	r1, r4
 8010772:	4640      	mov	r0, r8
 8010774:	f7ff fee2 	bl	801053c <_printf_common>
 8010778:	3001      	adds	r0, #1
 801077a:	d14c      	bne.n	8010816 <_printf_i+0x1fe>
 801077c:	f04f 30ff 	mov.w	r0, #4294967295
 8010780:	b004      	add	sp, #16
 8010782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010786:	4835      	ldr	r0, [pc, #212]	; (801085c <_printf_i+0x244>)
 8010788:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801078c:	6823      	ldr	r3, [r4, #0]
 801078e:	680e      	ldr	r6, [r1, #0]
 8010790:	061f      	lsls	r7, r3, #24
 8010792:	f856 5b04 	ldr.w	r5, [r6], #4
 8010796:	600e      	str	r6, [r1, #0]
 8010798:	d514      	bpl.n	80107c4 <_printf_i+0x1ac>
 801079a:	07d9      	lsls	r1, r3, #31
 801079c:	bf44      	itt	mi
 801079e:	f043 0320 	orrmi.w	r3, r3, #32
 80107a2:	6023      	strmi	r3, [r4, #0]
 80107a4:	b91d      	cbnz	r5, 80107ae <_printf_i+0x196>
 80107a6:	6823      	ldr	r3, [r4, #0]
 80107a8:	f023 0320 	bic.w	r3, r3, #32
 80107ac:	6023      	str	r3, [r4, #0]
 80107ae:	2310      	movs	r3, #16
 80107b0:	e7b0      	b.n	8010714 <_printf_i+0xfc>
 80107b2:	6823      	ldr	r3, [r4, #0]
 80107b4:	f043 0320 	orr.w	r3, r3, #32
 80107b8:	6023      	str	r3, [r4, #0]
 80107ba:	2378      	movs	r3, #120	; 0x78
 80107bc:	4828      	ldr	r0, [pc, #160]	; (8010860 <_printf_i+0x248>)
 80107be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80107c2:	e7e3      	b.n	801078c <_printf_i+0x174>
 80107c4:	065e      	lsls	r6, r3, #25
 80107c6:	bf48      	it	mi
 80107c8:	b2ad      	uxthmi	r5, r5
 80107ca:	e7e6      	b.n	801079a <_printf_i+0x182>
 80107cc:	4616      	mov	r6, r2
 80107ce:	e7bb      	b.n	8010748 <_printf_i+0x130>
 80107d0:	680b      	ldr	r3, [r1, #0]
 80107d2:	6826      	ldr	r6, [r4, #0]
 80107d4:	6960      	ldr	r0, [r4, #20]
 80107d6:	1d1d      	adds	r5, r3, #4
 80107d8:	600d      	str	r5, [r1, #0]
 80107da:	0635      	lsls	r5, r6, #24
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	d501      	bpl.n	80107e4 <_printf_i+0x1cc>
 80107e0:	6018      	str	r0, [r3, #0]
 80107e2:	e002      	b.n	80107ea <_printf_i+0x1d2>
 80107e4:	0671      	lsls	r1, r6, #25
 80107e6:	d5fb      	bpl.n	80107e0 <_printf_i+0x1c8>
 80107e8:	8018      	strh	r0, [r3, #0]
 80107ea:	2300      	movs	r3, #0
 80107ec:	6123      	str	r3, [r4, #16]
 80107ee:	4616      	mov	r6, r2
 80107f0:	e7ba      	b.n	8010768 <_printf_i+0x150>
 80107f2:	680b      	ldr	r3, [r1, #0]
 80107f4:	1d1a      	adds	r2, r3, #4
 80107f6:	600a      	str	r2, [r1, #0]
 80107f8:	681e      	ldr	r6, [r3, #0]
 80107fa:	6862      	ldr	r2, [r4, #4]
 80107fc:	2100      	movs	r1, #0
 80107fe:	4630      	mov	r0, r6
 8010800:	f7ef fd76 	bl	80002f0 <memchr>
 8010804:	b108      	cbz	r0, 801080a <_printf_i+0x1f2>
 8010806:	1b80      	subs	r0, r0, r6
 8010808:	6060      	str	r0, [r4, #4]
 801080a:	6863      	ldr	r3, [r4, #4]
 801080c:	6123      	str	r3, [r4, #16]
 801080e:	2300      	movs	r3, #0
 8010810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010814:	e7a8      	b.n	8010768 <_printf_i+0x150>
 8010816:	6923      	ldr	r3, [r4, #16]
 8010818:	4632      	mov	r2, r6
 801081a:	4649      	mov	r1, r9
 801081c:	4640      	mov	r0, r8
 801081e:	47d0      	blx	sl
 8010820:	3001      	adds	r0, #1
 8010822:	d0ab      	beq.n	801077c <_printf_i+0x164>
 8010824:	6823      	ldr	r3, [r4, #0]
 8010826:	079b      	lsls	r3, r3, #30
 8010828:	d413      	bmi.n	8010852 <_printf_i+0x23a>
 801082a:	68e0      	ldr	r0, [r4, #12]
 801082c:	9b03      	ldr	r3, [sp, #12]
 801082e:	4298      	cmp	r0, r3
 8010830:	bfb8      	it	lt
 8010832:	4618      	movlt	r0, r3
 8010834:	e7a4      	b.n	8010780 <_printf_i+0x168>
 8010836:	2301      	movs	r3, #1
 8010838:	4632      	mov	r2, r6
 801083a:	4649      	mov	r1, r9
 801083c:	4640      	mov	r0, r8
 801083e:	47d0      	blx	sl
 8010840:	3001      	adds	r0, #1
 8010842:	d09b      	beq.n	801077c <_printf_i+0x164>
 8010844:	3501      	adds	r5, #1
 8010846:	68e3      	ldr	r3, [r4, #12]
 8010848:	9903      	ldr	r1, [sp, #12]
 801084a:	1a5b      	subs	r3, r3, r1
 801084c:	42ab      	cmp	r3, r5
 801084e:	dcf2      	bgt.n	8010836 <_printf_i+0x21e>
 8010850:	e7eb      	b.n	801082a <_printf_i+0x212>
 8010852:	2500      	movs	r5, #0
 8010854:	f104 0619 	add.w	r6, r4, #25
 8010858:	e7f5      	b.n	8010846 <_printf_i+0x22e>
 801085a:	bf00      	nop
 801085c:	080142d6 	.word	0x080142d6
 8010860:	080142e7 	.word	0x080142e7

08010864 <quorem>:
 8010864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010868:	6903      	ldr	r3, [r0, #16]
 801086a:	690c      	ldr	r4, [r1, #16]
 801086c:	42a3      	cmp	r3, r4
 801086e:	4607      	mov	r7, r0
 8010870:	f2c0 8081 	blt.w	8010976 <quorem+0x112>
 8010874:	3c01      	subs	r4, #1
 8010876:	f101 0814 	add.w	r8, r1, #20
 801087a:	f100 0514 	add.w	r5, r0, #20
 801087e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010882:	9301      	str	r3, [sp, #4]
 8010884:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801088c:	3301      	adds	r3, #1
 801088e:	429a      	cmp	r2, r3
 8010890:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010894:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010898:	fbb2 f6f3 	udiv	r6, r2, r3
 801089c:	d331      	bcc.n	8010902 <quorem+0x9e>
 801089e:	f04f 0e00 	mov.w	lr, #0
 80108a2:	4640      	mov	r0, r8
 80108a4:	46ac      	mov	ip, r5
 80108a6:	46f2      	mov	sl, lr
 80108a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80108ac:	b293      	uxth	r3, r2
 80108ae:	fb06 e303 	mla	r3, r6, r3, lr
 80108b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	ebaa 0303 	sub.w	r3, sl, r3
 80108bc:	0c12      	lsrs	r2, r2, #16
 80108be:	f8dc a000 	ldr.w	sl, [ip]
 80108c2:	fb06 e202 	mla	r2, r6, r2, lr
 80108c6:	fa13 f38a 	uxtah	r3, r3, sl
 80108ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80108ce:	fa1f fa82 	uxth.w	sl, r2
 80108d2:	f8dc 2000 	ldr.w	r2, [ip]
 80108d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80108da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80108de:	b29b      	uxth	r3, r3
 80108e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108e4:	4581      	cmp	r9, r0
 80108e6:	f84c 3b04 	str.w	r3, [ip], #4
 80108ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80108ee:	d2db      	bcs.n	80108a8 <quorem+0x44>
 80108f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80108f4:	b92b      	cbnz	r3, 8010902 <quorem+0x9e>
 80108f6:	9b01      	ldr	r3, [sp, #4]
 80108f8:	3b04      	subs	r3, #4
 80108fa:	429d      	cmp	r5, r3
 80108fc:	461a      	mov	r2, r3
 80108fe:	d32e      	bcc.n	801095e <quorem+0xfa>
 8010900:	613c      	str	r4, [r7, #16]
 8010902:	4638      	mov	r0, r7
 8010904:	f001 f848 	bl	8011998 <__mcmp>
 8010908:	2800      	cmp	r0, #0
 801090a:	db24      	blt.n	8010956 <quorem+0xf2>
 801090c:	3601      	adds	r6, #1
 801090e:	4628      	mov	r0, r5
 8010910:	f04f 0c00 	mov.w	ip, #0
 8010914:	f858 2b04 	ldr.w	r2, [r8], #4
 8010918:	f8d0 e000 	ldr.w	lr, [r0]
 801091c:	b293      	uxth	r3, r2
 801091e:	ebac 0303 	sub.w	r3, ip, r3
 8010922:	0c12      	lsrs	r2, r2, #16
 8010924:	fa13 f38e 	uxtah	r3, r3, lr
 8010928:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801092c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010930:	b29b      	uxth	r3, r3
 8010932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010936:	45c1      	cmp	r9, r8
 8010938:	f840 3b04 	str.w	r3, [r0], #4
 801093c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010940:	d2e8      	bcs.n	8010914 <quorem+0xb0>
 8010942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801094a:	b922      	cbnz	r2, 8010956 <quorem+0xf2>
 801094c:	3b04      	subs	r3, #4
 801094e:	429d      	cmp	r5, r3
 8010950:	461a      	mov	r2, r3
 8010952:	d30a      	bcc.n	801096a <quorem+0x106>
 8010954:	613c      	str	r4, [r7, #16]
 8010956:	4630      	mov	r0, r6
 8010958:	b003      	add	sp, #12
 801095a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801095e:	6812      	ldr	r2, [r2, #0]
 8010960:	3b04      	subs	r3, #4
 8010962:	2a00      	cmp	r2, #0
 8010964:	d1cc      	bne.n	8010900 <quorem+0x9c>
 8010966:	3c01      	subs	r4, #1
 8010968:	e7c7      	b.n	80108fa <quorem+0x96>
 801096a:	6812      	ldr	r2, [r2, #0]
 801096c:	3b04      	subs	r3, #4
 801096e:	2a00      	cmp	r2, #0
 8010970:	d1f0      	bne.n	8010954 <quorem+0xf0>
 8010972:	3c01      	subs	r4, #1
 8010974:	e7eb      	b.n	801094e <quorem+0xea>
 8010976:	2000      	movs	r0, #0
 8010978:	e7ee      	b.n	8010958 <quorem+0xf4>
 801097a:	0000      	movs	r0, r0
 801097c:	0000      	movs	r0, r0
	...

08010980 <_dtoa_r>:
 8010980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010984:	ec59 8b10 	vmov	r8, r9, d0
 8010988:	b095      	sub	sp, #84	; 0x54
 801098a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801098c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801098e:	9107      	str	r1, [sp, #28]
 8010990:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010994:	4606      	mov	r6, r0
 8010996:	9209      	str	r2, [sp, #36]	; 0x24
 8010998:	9310      	str	r3, [sp, #64]	; 0x40
 801099a:	b975      	cbnz	r5, 80109ba <_dtoa_r+0x3a>
 801099c:	2010      	movs	r0, #16
 801099e:	f000 fd75 	bl	801148c <malloc>
 80109a2:	4602      	mov	r2, r0
 80109a4:	6270      	str	r0, [r6, #36]	; 0x24
 80109a6:	b920      	cbnz	r0, 80109b2 <_dtoa_r+0x32>
 80109a8:	4bab      	ldr	r3, [pc, #684]	; (8010c58 <_dtoa_r+0x2d8>)
 80109aa:	21ea      	movs	r1, #234	; 0xea
 80109ac:	48ab      	ldr	r0, [pc, #684]	; (8010c5c <_dtoa_r+0x2dc>)
 80109ae:	f001 f9bd 	bl	8011d2c <__assert_func>
 80109b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80109b6:	6005      	str	r5, [r0, #0]
 80109b8:	60c5      	str	r5, [r0, #12]
 80109ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80109bc:	6819      	ldr	r1, [r3, #0]
 80109be:	b151      	cbz	r1, 80109d6 <_dtoa_r+0x56>
 80109c0:	685a      	ldr	r2, [r3, #4]
 80109c2:	604a      	str	r2, [r1, #4]
 80109c4:	2301      	movs	r3, #1
 80109c6:	4093      	lsls	r3, r2
 80109c8:	608b      	str	r3, [r1, #8]
 80109ca:	4630      	mov	r0, r6
 80109cc:	f000 fda6 	bl	801151c <_Bfree>
 80109d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80109d2:	2200      	movs	r2, #0
 80109d4:	601a      	str	r2, [r3, #0]
 80109d6:	f1b9 0300 	subs.w	r3, r9, #0
 80109da:	bfbb      	ittet	lt
 80109dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80109e0:	9303      	strlt	r3, [sp, #12]
 80109e2:	2300      	movge	r3, #0
 80109e4:	2201      	movlt	r2, #1
 80109e6:	bfac      	ite	ge
 80109e8:	6023      	strge	r3, [r4, #0]
 80109ea:	6022      	strlt	r2, [r4, #0]
 80109ec:	4b9c      	ldr	r3, [pc, #624]	; (8010c60 <_dtoa_r+0x2e0>)
 80109ee:	9c03      	ldr	r4, [sp, #12]
 80109f0:	43a3      	bics	r3, r4
 80109f2:	d11a      	bne.n	8010a2a <_dtoa_r+0xaa>
 80109f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80109f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80109fa:	6013      	str	r3, [r2, #0]
 80109fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010a00:	ea53 0308 	orrs.w	r3, r3, r8
 8010a04:	f000 8512 	beq.w	801142c <_dtoa_r+0xaac>
 8010a08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010a0a:	b953      	cbnz	r3, 8010a22 <_dtoa_r+0xa2>
 8010a0c:	4b95      	ldr	r3, [pc, #596]	; (8010c64 <_dtoa_r+0x2e4>)
 8010a0e:	e01f      	b.n	8010a50 <_dtoa_r+0xd0>
 8010a10:	4b95      	ldr	r3, [pc, #596]	; (8010c68 <_dtoa_r+0x2e8>)
 8010a12:	9300      	str	r3, [sp, #0]
 8010a14:	3308      	adds	r3, #8
 8010a16:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010a18:	6013      	str	r3, [r2, #0]
 8010a1a:	9800      	ldr	r0, [sp, #0]
 8010a1c:	b015      	add	sp, #84	; 0x54
 8010a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a22:	4b90      	ldr	r3, [pc, #576]	; (8010c64 <_dtoa_r+0x2e4>)
 8010a24:	9300      	str	r3, [sp, #0]
 8010a26:	3303      	adds	r3, #3
 8010a28:	e7f5      	b.n	8010a16 <_dtoa_r+0x96>
 8010a2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a36:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010a3a:	d10b      	bne.n	8010a54 <_dtoa_r+0xd4>
 8010a3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010a3e:	2301      	movs	r3, #1
 8010a40:	6013      	str	r3, [r2, #0]
 8010a42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f000 84ee 	beq.w	8011426 <_dtoa_r+0xaa6>
 8010a4a:	4888      	ldr	r0, [pc, #544]	; (8010c6c <_dtoa_r+0x2ec>)
 8010a4c:	6018      	str	r0, [r3, #0]
 8010a4e:	1e43      	subs	r3, r0, #1
 8010a50:	9300      	str	r3, [sp, #0]
 8010a52:	e7e2      	b.n	8010a1a <_dtoa_r+0x9a>
 8010a54:	a913      	add	r1, sp, #76	; 0x4c
 8010a56:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010a5a:	aa12      	add	r2, sp, #72	; 0x48
 8010a5c:	4630      	mov	r0, r6
 8010a5e:	f001 f83f 	bl	8011ae0 <__d2b>
 8010a62:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8010a66:	4605      	mov	r5, r0
 8010a68:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010a6a:	2900      	cmp	r1, #0
 8010a6c:	d047      	beq.n	8010afe <_dtoa_r+0x17e>
 8010a6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010a70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010a74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010a78:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8010a7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010a80:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010a84:	2400      	movs	r4, #0
 8010a86:	ec43 2b16 	vmov	d6, r2, r3
 8010a8a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010a8e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8010c40 <_dtoa_r+0x2c0>
 8010a92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010a96:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8010c48 <_dtoa_r+0x2c8>
 8010a9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010a9e:	eeb0 7b46 	vmov.f64	d7, d6
 8010aa2:	ee06 1a90 	vmov	s13, r1
 8010aa6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8010aaa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010c50 <_dtoa_r+0x2d0>
 8010aae:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010ab2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010ab6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010abe:	ee16 ba90 	vmov	fp, s13
 8010ac2:	9411      	str	r4, [sp, #68]	; 0x44
 8010ac4:	d508      	bpl.n	8010ad8 <_dtoa_r+0x158>
 8010ac6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010aca:	eeb4 6b47 	vcmp.f64	d6, d7
 8010ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad2:	bf18      	it	ne
 8010ad4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010ad8:	f1bb 0f16 	cmp.w	fp, #22
 8010adc:	d832      	bhi.n	8010b44 <_dtoa_r+0x1c4>
 8010ade:	4b64      	ldr	r3, [pc, #400]	; (8010c70 <_dtoa_r+0x2f0>)
 8010ae0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010ae4:	ed93 7b00 	vldr	d7, [r3]
 8010ae8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010aec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af4:	d501      	bpl.n	8010afa <_dtoa_r+0x17a>
 8010af6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010afa:	2300      	movs	r3, #0
 8010afc:	e023      	b.n	8010b46 <_dtoa_r+0x1c6>
 8010afe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010b00:	4401      	add	r1, r0
 8010b02:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010b06:	2b20      	cmp	r3, #32
 8010b08:	bfc3      	ittte	gt
 8010b0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010b0e:	fa04 f303 	lslgt.w	r3, r4, r3
 8010b12:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010b16:	f1c3 0320 	rsble	r3, r3, #32
 8010b1a:	bfc6      	itte	gt
 8010b1c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010b20:	ea43 0308 	orrgt.w	r3, r3, r8
 8010b24:	fa08 f303 	lslle.w	r3, r8, r3
 8010b28:	ee07 3a90 	vmov	s15, r3
 8010b2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010b30:	3901      	subs	r1, #1
 8010b32:	ed8d 7b00 	vstr	d7, [sp]
 8010b36:	9c01      	ldr	r4, [sp, #4]
 8010b38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b3c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010b40:	2401      	movs	r4, #1
 8010b42:	e7a0      	b.n	8010a86 <_dtoa_r+0x106>
 8010b44:	2301      	movs	r3, #1
 8010b46:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b48:	1a43      	subs	r3, r0, r1
 8010b4a:	1e5a      	subs	r2, r3, #1
 8010b4c:	bf45      	ittet	mi
 8010b4e:	f1c3 0301 	rsbmi	r3, r3, #1
 8010b52:	9305      	strmi	r3, [sp, #20]
 8010b54:	2300      	movpl	r3, #0
 8010b56:	2300      	movmi	r3, #0
 8010b58:	9206      	str	r2, [sp, #24]
 8010b5a:	bf54      	ite	pl
 8010b5c:	9305      	strpl	r3, [sp, #20]
 8010b5e:	9306      	strmi	r3, [sp, #24]
 8010b60:	f1bb 0f00 	cmp.w	fp, #0
 8010b64:	db18      	blt.n	8010b98 <_dtoa_r+0x218>
 8010b66:	9b06      	ldr	r3, [sp, #24]
 8010b68:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8010b6c:	445b      	add	r3, fp
 8010b6e:	9306      	str	r3, [sp, #24]
 8010b70:	2300      	movs	r3, #0
 8010b72:	9a07      	ldr	r2, [sp, #28]
 8010b74:	2a09      	cmp	r2, #9
 8010b76:	d849      	bhi.n	8010c0c <_dtoa_r+0x28c>
 8010b78:	2a05      	cmp	r2, #5
 8010b7a:	bfc4      	itt	gt
 8010b7c:	3a04      	subgt	r2, #4
 8010b7e:	9207      	strgt	r2, [sp, #28]
 8010b80:	9a07      	ldr	r2, [sp, #28]
 8010b82:	f1a2 0202 	sub.w	r2, r2, #2
 8010b86:	bfcc      	ite	gt
 8010b88:	2400      	movgt	r4, #0
 8010b8a:	2401      	movle	r4, #1
 8010b8c:	2a03      	cmp	r2, #3
 8010b8e:	d848      	bhi.n	8010c22 <_dtoa_r+0x2a2>
 8010b90:	e8df f002 	tbb	[pc, r2]
 8010b94:	3a2c2e0b 	.word	0x3a2c2e0b
 8010b98:	9b05      	ldr	r3, [sp, #20]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	eba3 030b 	sub.w	r3, r3, fp
 8010ba0:	9305      	str	r3, [sp, #20]
 8010ba2:	920e      	str	r2, [sp, #56]	; 0x38
 8010ba4:	f1cb 0300 	rsb	r3, fp, #0
 8010ba8:	e7e3      	b.n	8010b72 <_dtoa_r+0x1f2>
 8010baa:	2200      	movs	r2, #0
 8010bac:	9208      	str	r2, [sp, #32]
 8010bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bb0:	2a00      	cmp	r2, #0
 8010bb2:	dc39      	bgt.n	8010c28 <_dtoa_r+0x2a8>
 8010bb4:	f04f 0a01 	mov.w	sl, #1
 8010bb8:	46d1      	mov	r9, sl
 8010bba:	4652      	mov	r2, sl
 8010bbc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010bc0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010bc2:	2100      	movs	r1, #0
 8010bc4:	6079      	str	r1, [r7, #4]
 8010bc6:	2004      	movs	r0, #4
 8010bc8:	f100 0c14 	add.w	ip, r0, #20
 8010bcc:	4594      	cmp	ip, r2
 8010bce:	6879      	ldr	r1, [r7, #4]
 8010bd0:	d92f      	bls.n	8010c32 <_dtoa_r+0x2b2>
 8010bd2:	4630      	mov	r0, r6
 8010bd4:	930c      	str	r3, [sp, #48]	; 0x30
 8010bd6:	f000 fc61 	bl	801149c <_Balloc>
 8010bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010bdc:	9000      	str	r0, [sp, #0]
 8010bde:	4602      	mov	r2, r0
 8010be0:	2800      	cmp	r0, #0
 8010be2:	d149      	bne.n	8010c78 <_dtoa_r+0x2f8>
 8010be4:	4b23      	ldr	r3, [pc, #140]	; (8010c74 <_dtoa_r+0x2f4>)
 8010be6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010bea:	e6df      	b.n	80109ac <_dtoa_r+0x2c>
 8010bec:	2201      	movs	r2, #1
 8010bee:	e7dd      	b.n	8010bac <_dtoa_r+0x22c>
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	9208      	str	r2, [sp, #32]
 8010bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bf6:	eb0b 0a02 	add.w	sl, fp, r2
 8010bfa:	f10a 0901 	add.w	r9, sl, #1
 8010bfe:	464a      	mov	r2, r9
 8010c00:	2a01      	cmp	r2, #1
 8010c02:	bfb8      	it	lt
 8010c04:	2201      	movlt	r2, #1
 8010c06:	e7db      	b.n	8010bc0 <_dtoa_r+0x240>
 8010c08:	2201      	movs	r2, #1
 8010c0a:	e7f2      	b.n	8010bf2 <_dtoa_r+0x272>
 8010c0c:	2401      	movs	r4, #1
 8010c0e:	2200      	movs	r2, #0
 8010c10:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010c14:	f04f 3aff 	mov.w	sl, #4294967295
 8010c18:	2100      	movs	r1, #0
 8010c1a:	46d1      	mov	r9, sl
 8010c1c:	2212      	movs	r2, #18
 8010c1e:	9109      	str	r1, [sp, #36]	; 0x24
 8010c20:	e7ce      	b.n	8010bc0 <_dtoa_r+0x240>
 8010c22:	2201      	movs	r2, #1
 8010c24:	9208      	str	r2, [sp, #32]
 8010c26:	e7f5      	b.n	8010c14 <_dtoa_r+0x294>
 8010c28:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8010c2c:	46d1      	mov	r9, sl
 8010c2e:	4652      	mov	r2, sl
 8010c30:	e7c6      	b.n	8010bc0 <_dtoa_r+0x240>
 8010c32:	3101      	adds	r1, #1
 8010c34:	6079      	str	r1, [r7, #4]
 8010c36:	0040      	lsls	r0, r0, #1
 8010c38:	e7c6      	b.n	8010bc8 <_dtoa_r+0x248>
 8010c3a:	bf00      	nop
 8010c3c:	f3af 8000 	nop.w
 8010c40:	636f4361 	.word	0x636f4361
 8010c44:	3fd287a7 	.word	0x3fd287a7
 8010c48:	8b60c8b3 	.word	0x8b60c8b3
 8010c4c:	3fc68a28 	.word	0x3fc68a28
 8010c50:	509f79fb 	.word	0x509f79fb
 8010c54:	3fd34413 	.word	0x3fd34413
 8010c58:	08014305 	.word	0x08014305
 8010c5c:	0801431c 	.word	0x0801431c
 8010c60:	7ff00000 	.word	0x7ff00000
 8010c64:	08014301 	.word	0x08014301
 8010c68:	080142f8 	.word	0x080142f8
 8010c6c:	080142d5 	.word	0x080142d5
 8010c70:	08014418 	.word	0x08014418
 8010c74:	0801437b 	.word	0x0801437b
 8010c78:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010c7a:	9900      	ldr	r1, [sp, #0]
 8010c7c:	6011      	str	r1, [r2, #0]
 8010c7e:	f1b9 0f0e 	cmp.w	r9, #14
 8010c82:	d872      	bhi.n	8010d6a <_dtoa_r+0x3ea>
 8010c84:	2c00      	cmp	r4, #0
 8010c86:	d070      	beq.n	8010d6a <_dtoa_r+0x3ea>
 8010c88:	f1bb 0f00 	cmp.w	fp, #0
 8010c8c:	f340 80a6 	ble.w	8010ddc <_dtoa_r+0x45c>
 8010c90:	49ca      	ldr	r1, [pc, #808]	; (8010fbc <_dtoa_r+0x63c>)
 8010c92:	f00b 020f 	and.w	r2, fp, #15
 8010c96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010c9a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010c9e:	ed92 7b00 	vldr	d7, [r2]
 8010ca2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010ca6:	f000 808d 	beq.w	8010dc4 <_dtoa_r+0x444>
 8010caa:	4ac5      	ldr	r2, [pc, #788]	; (8010fc0 <_dtoa_r+0x640>)
 8010cac:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010cb0:	ed92 6b08 	vldr	d6, [r2, #32]
 8010cb4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010cb8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010cbc:	f001 010f 	and.w	r1, r1, #15
 8010cc0:	2203      	movs	r2, #3
 8010cc2:	48bf      	ldr	r0, [pc, #764]	; (8010fc0 <_dtoa_r+0x640>)
 8010cc4:	2900      	cmp	r1, #0
 8010cc6:	d17f      	bne.n	8010dc8 <_dtoa_r+0x448>
 8010cc8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010ccc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010cd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010cd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010cd6:	2900      	cmp	r1, #0
 8010cd8:	f000 80b2 	beq.w	8010e40 <_dtoa_r+0x4c0>
 8010cdc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010ce0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ce4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cec:	f140 80a8 	bpl.w	8010e40 <_dtoa_r+0x4c0>
 8010cf0:	f1b9 0f00 	cmp.w	r9, #0
 8010cf4:	f000 80a4 	beq.w	8010e40 <_dtoa_r+0x4c0>
 8010cf8:	f1ba 0f00 	cmp.w	sl, #0
 8010cfc:	dd31      	ble.n	8010d62 <_dtoa_r+0x3e2>
 8010cfe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010d02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d0a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010d0e:	3201      	adds	r2, #1
 8010d10:	4650      	mov	r0, sl
 8010d12:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010d16:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010d1a:	ee07 2a90 	vmov	s15, r2
 8010d1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010d22:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010d26:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010d2a:	9c03      	ldr	r4, [sp, #12]
 8010d2c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010d30:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010d34:	2800      	cmp	r0, #0
 8010d36:	f040 8086 	bne.w	8010e46 <_dtoa_r+0x4c6>
 8010d3a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010d3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010d42:	ec42 1b17 	vmov	d7, r1, r2
 8010d46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d4e:	f300 8272 	bgt.w	8011236 <_dtoa_r+0x8b6>
 8010d52:	eeb1 7b47 	vneg.f64	d7, d7
 8010d56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d5e:	f100 8267 	bmi.w	8011230 <_dtoa_r+0x8b0>
 8010d62:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8010d66:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010d6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010d6c:	2a00      	cmp	r2, #0
 8010d6e:	f2c0 8129 	blt.w	8010fc4 <_dtoa_r+0x644>
 8010d72:	f1bb 0f0e 	cmp.w	fp, #14
 8010d76:	f300 8125 	bgt.w	8010fc4 <_dtoa_r+0x644>
 8010d7a:	4b90      	ldr	r3, [pc, #576]	; (8010fbc <_dtoa_r+0x63c>)
 8010d7c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010d80:	ed93 6b00 	vldr	d6, [r3]
 8010d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	f280 80c3 	bge.w	8010f12 <_dtoa_r+0x592>
 8010d8c:	f1b9 0f00 	cmp.w	r9, #0
 8010d90:	f300 80bf 	bgt.w	8010f12 <_dtoa_r+0x592>
 8010d94:	f040 824c 	bne.w	8011230 <_dtoa_r+0x8b0>
 8010d98:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010d9c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010da0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010da4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dac:	464c      	mov	r4, r9
 8010dae:	464f      	mov	r7, r9
 8010db0:	f280 8222 	bge.w	80111f8 <_dtoa_r+0x878>
 8010db4:	f8dd 8000 	ldr.w	r8, [sp]
 8010db8:	2331      	movs	r3, #49	; 0x31
 8010dba:	f808 3b01 	strb.w	r3, [r8], #1
 8010dbe:	f10b 0b01 	add.w	fp, fp, #1
 8010dc2:	e21e      	b.n	8011202 <_dtoa_r+0x882>
 8010dc4:	2202      	movs	r2, #2
 8010dc6:	e77c      	b.n	8010cc2 <_dtoa_r+0x342>
 8010dc8:	07cc      	lsls	r4, r1, #31
 8010dca:	d504      	bpl.n	8010dd6 <_dtoa_r+0x456>
 8010dcc:	ed90 6b00 	vldr	d6, [r0]
 8010dd0:	3201      	adds	r2, #1
 8010dd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010dd6:	1049      	asrs	r1, r1, #1
 8010dd8:	3008      	adds	r0, #8
 8010dda:	e773      	b.n	8010cc4 <_dtoa_r+0x344>
 8010ddc:	d02e      	beq.n	8010e3c <_dtoa_r+0x4bc>
 8010dde:	f1cb 0100 	rsb	r1, fp, #0
 8010de2:	4a76      	ldr	r2, [pc, #472]	; (8010fbc <_dtoa_r+0x63c>)
 8010de4:	f001 000f 	and.w	r0, r1, #15
 8010de8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010dec:	ed92 7b00 	vldr	d7, [r2]
 8010df0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010df4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010df8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010dfc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8010e00:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010e04:	486e      	ldr	r0, [pc, #440]	; (8010fc0 <_dtoa_r+0x640>)
 8010e06:	1109      	asrs	r1, r1, #4
 8010e08:	2400      	movs	r4, #0
 8010e0a:	2202      	movs	r2, #2
 8010e0c:	b939      	cbnz	r1, 8010e1e <_dtoa_r+0x49e>
 8010e0e:	2c00      	cmp	r4, #0
 8010e10:	f43f af60 	beq.w	8010cd4 <_dtoa_r+0x354>
 8010e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010e18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e1c:	e75a      	b.n	8010cd4 <_dtoa_r+0x354>
 8010e1e:	07cf      	lsls	r7, r1, #31
 8010e20:	d509      	bpl.n	8010e36 <_dtoa_r+0x4b6>
 8010e22:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8010e26:	ed90 7b00 	vldr	d7, [r0]
 8010e2a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010e2e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010e32:	3201      	adds	r2, #1
 8010e34:	2401      	movs	r4, #1
 8010e36:	1049      	asrs	r1, r1, #1
 8010e38:	3008      	adds	r0, #8
 8010e3a:	e7e7      	b.n	8010e0c <_dtoa_r+0x48c>
 8010e3c:	2202      	movs	r2, #2
 8010e3e:	e749      	b.n	8010cd4 <_dtoa_r+0x354>
 8010e40:	465f      	mov	r7, fp
 8010e42:	4648      	mov	r0, r9
 8010e44:	e765      	b.n	8010d12 <_dtoa_r+0x392>
 8010e46:	ec42 1b17 	vmov	d7, r1, r2
 8010e4a:	4a5c      	ldr	r2, [pc, #368]	; (8010fbc <_dtoa_r+0x63c>)
 8010e4c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010e50:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010e54:	9a00      	ldr	r2, [sp, #0]
 8010e56:	1814      	adds	r4, r2, r0
 8010e58:	9a08      	ldr	r2, [sp, #32]
 8010e5a:	b352      	cbz	r2, 8010eb2 <_dtoa_r+0x532>
 8010e5c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010e60:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010e64:	f8dd 8000 	ldr.w	r8, [sp]
 8010e68:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010e6c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010e70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010e74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010e78:	ee14 2a90 	vmov	r2, s9
 8010e7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010e80:	3230      	adds	r2, #48	; 0x30
 8010e82:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010e86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8e:	f808 2b01 	strb.w	r2, [r8], #1
 8010e92:	d439      	bmi.n	8010f08 <_dtoa_r+0x588>
 8010e94:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010e98:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea0:	d472      	bmi.n	8010f88 <_dtoa_r+0x608>
 8010ea2:	45a0      	cmp	r8, r4
 8010ea4:	f43f af5d 	beq.w	8010d62 <_dtoa_r+0x3e2>
 8010ea8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010eac:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010eb0:	e7e0      	b.n	8010e74 <_dtoa_r+0x4f4>
 8010eb2:	f8dd 8000 	ldr.w	r8, [sp]
 8010eb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010eba:	4621      	mov	r1, r4
 8010ebc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010ec0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010ec4:	ee14 2a90 	vmov	r2, s9
 8010ec8:	3230      	adds	r2, #48	; 0x30
 8010eca:	f808 2b01 	strb.w	r2, [r8], #1
 8010ece:	45a0      	cmp	r8, r4
 8010ed0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010ed4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010ed8:	d118      	bne.n	8010f0c <_dtoa_r+0x58c>
 8010eda:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010ede:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010ee2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eea:	dc4d      	bgt.n	8010f88 <_dtoa_r+0x608>
 8010eec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010ef0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef8:	f57f af33 	bpl.w	8010d62 <_dtoa_r+0x3e2>
 8010efc:	4688      	mov	r8, r1
 8010efe:	3901      	subs	r1, #1
 8010f00:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010f04:	2b30      	cmp	r3, #48	; 0x30
 8010f06:	d0f9      	beq.n	8010efc <_dtoa_r+0x57c>
 8010f08:	46bb      	mov	fp, r7
 8010f0a:	e02a      	b.n	8010f62 <_dtoa_r+0x5e2>
 8010f0c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010f10:	e7d6      	b.n	8010ec0 <_dtoa_r+0x540>
 8010f12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f16:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010f1a:	f8dd 8000 	ldr.w	r8, [sp]
 8010f1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010f22:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010f26:	ee15 3a10 	vmov	r3, s10
 8010f2a:	3330      	adds	r3, #48	; 0x30
 8010f2c:	f808 3b01 	strb.w	r3, [r8], #1
 8010f30:	9b00      	ldr	r3, [sp, #0]
 8010f32:	eba8 0303 	sub.w	r3, r8, r3
 8010f36:	4599      	cmp	r9, r3
 8010f38:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010f3c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010f40:	d133      	bne.n	8010faa <_dtoa_r+0x62a>
 8010f42:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4e:	dc1a      	bgt.n	8010f86 <_dtoa_r+0x606>
 8010f50:	eeb4 7b46 	vcmp.f64	d7, d6
 8010f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f58:	d103      	bne.n	8010f62 <_dtoa_r+0x5e2>
 8010f5a:	ee15 3a10 	vmov	r3, s10
 8010f5e:	07d9      	lsls	r1, r3, #31
 8010f60:	d411      	bmi.n	8010f86 <_dtoa_r+0x606>
 8010f62:	4629      	mov	r1, r5
 8010f64:	4630      	mov	r0, r6
 8010f66:	f000 fad9 	bl	801151c <_Bfree>
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010f6e:	f888 3000 	strb.w	r3, [r8]
 8010f72:	f10b 0301 	add.w	r3, fp, #1
 8010f76:	6013      	str	r3, [r2, #0]
 8010f78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	f43f ad4d 	beq.w	8010a1a <_dtoa_r+0x9a>
 8010f80:	f8c3 8000 	str.w	r8, [r3]
 8010f84:	e549      	b.n	8010a1a <_dtoa_r+0x9a>
 8010f86:	465f      	mov	r7, fp
 8010f88:	4643      	mov	r3, r8
 8010f8a:	4698      	mov	r8, r3
 8010f8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f90:	2a39      	cmp	r2, #57	; 0x39
 8010f92:	d106      	bne.n	8010fa2 <_dtoa_r+0x622>
 8010f94:	9a00      	ldr	r2, [sp, #0]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d1f7      	bne.n	8010f8a <_dtoa_r+0x60a>
 8010f9a:	9900      	ldr	r1, [sp, #0]
 8010f9c:	2230      	movs	r2, #48	; 0x30
 8010f9e:	3701      	adds	r7, #1
 8010fa0:	700a      	strb	r2, [r1, #0]
 8010fa2:	781a      	ldrb	r2, [r3, #0]
 8010fa4:	3201      	adds	r2, #1
 8010fa6:	701a      	strb	r2, [r3, #0]
 8010fa8:	e7ae      	b.n	8010f08 <_dtoa_r+0x588>
 8010faa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010fae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb6:	d1b2      	bne.n	8010f1e <_dtoa_r+0x59e>
 8010fb8:	e7d3      	b.n	8010f62 <_dtoa_r+0x5e2>
 8010fba:	bf00      	nop
 8010fbc:	08014418 	.word	0x08014418
 8010fc0:	080143f0 	.word	0x080143f0
 8010fc4:	9908      	ldr	r1, [sp, #32]
 8010fc6:	2900      	cmp	r1, #0
 8010fc8:	f000 80d1 	beq.w	801116e <_dtoa_r+0x7ee>
 8010fcc:	9907      	ldr	r1, [sp, #28]
 8010fce:	2901      	cmp	r1, #1
 8010fd0:	f300 80b4 	bgt.w	801113c <_dtoa_r+0x7bc>
 8010fd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010fd6:	2900      	cmp	r1, #0
 8010fd8:	f000 80ac 	beq.w	8011134 <_dtoa_r+0x7b4>
 8010fdc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010fe0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010fe4:	461c      	mov	r4, r3
 8010fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8010fe8:	9b05      	ldr	r3, [sp, #20]
 8010fea:	4413      	add	r3, r2
 8010fec:	9305      	str	r3, [sp, #20]
 8010fee:	9b06      	ldr	r3, [sp, #24]
 8010ff0:	2101      	movs	r1, #1
 8010ff2:	4413      	add	r3, r2
 8010ff4:	4630      	mov	r0, r6
 8010ff6:	9306      	str	r3, [sp, #24]
 8010ff8:	f000 fb4c 	bl	8011694 <__i2b>
 8010ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ffe:	4607      	mov	r7, r0
 8011000:	f1b8 0f00 	cmp.w	r8, #0
 8011004:	dd0d      	ble.n	8011022 <_dtoa_r+0x6a2>
 8011006:	9a06      	ldr	r2, [sp, #24]
 8011008:	2a00      	cmp	r2, #0
 801100a:	dd0a      	ble.n	8011022 <_dtoa_r+0x6a2>
 801100c:	4542      	cmp	r2, r8
 801100e:	9905      	ldr	r1, [sp, #20]
 8011010:	bfa8      	it	ge
 8011012:	4642      	movge	r2, r8
 8011014:	1a89      	subs	r1, r1, r2
 8011016:	9105      	str	r1, [sp, #20]
 8011018:	9906      	ldr	r1, [sp, #24]
 801101a:	eba8 0802 	sub.w	r8, r8, r2
 801101e:	1a8a      	subs	r2, r1, r2
 8011020:	9206      	str	r2, [sp, #24]
 8011022:	b303      	cbz	r3, 8011066 <_dtoa_r+0x6e6>
 8011024:	9a08      	ldr	r2, [sp, #32]
 8011026:	2a00      	cmp	r2, #0
 8011028:	f000 80a6 	beq.w	8011178 <_dtoa_r+0x7f8>
 801102c:	2c00      	cmp	r4, #0
 801102e:	dd13      	ble.n	8011058 <_dtoa_r+0x6d8>
 8011030:	4639      	mov	r1, r7
 8011032:	4622      	mov	r2, r4
 8011034:	4630      	mov	r0, r6
 8011036:	930c      	str	r3, [sp, #48]	; 0x30
 8011038:	f000 fbe8 	bl	801180c <__pow5mult>
 801103c:	462a      	mov	r2, r5
 801103e:	4601      	mov	r1, r0
 8011040:	4607      	mov	r7, r0
 8011042:	4630      	mov	r0, r6
 8011044:	f000 fb3c 	bl	80116c0 <__multiply>
 8011048:	4629      	mov	r1, r5
 801104a:	900a      	str	r0, [sp, #40]	; 0x28
 801104c:	4630      	mov	r0, r6
 801104e:	f000 fa65 	bl	801151c <_Bfree>
 8011052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011056:	4615      	mov	r5, r2
 8011058:	1b1a      	subs	r2, r3, r4
 801105a:	d004      	beq.n	8011066 <_dtoa_r+0x6e6>
 801105c:	4629      	mov	r1, r5
 801105e:	4630      	mov	r0, r6
 8011060:	f000 fbd4 	bl	801180c <__pow5mult>
 8011064:	4605      	mov	r5, r0
 8011066:	2101      	movs	r1, #1
 8011068:	4630      	mov	r0, r6
 801106a:	f000 fb13 	bl	8011694 <__i2b>
 801106e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011070:	2b00      	cmp	r3, #0
 8011072:	4604      	mov	r4, r0
 8011074:	f340 8082 	ble.w	801117c <_dtoa_r+0x7fc>
 8011078:	461a      	mov	r2, r3
 801107a:	4601      	mov	r1, r0
 801107c:	4630      	mov	r0, r6
 801107e:	f000 fbc5 	bl	801180c <__pow5mult>
 8011082:	9b07      	ldr	r3, [sp, #28]
 8011084:	2b01      	cmp	r3, #1
 8011086:	4604      	mov	r4, r0
 8011088:	dd7b      	ble.n	8011182 <_dtoa_r+0x802>
 801108a:	2300      	movs	r3, #0
 801108c:	930a      	str	r3, [sp, #40]	; 0x28
 801108e:	6922      	ldr	r2, [r4, #16]
 8011090:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011094:	6910      	ldr	r0, [r2, #16]
 8011096:	f000 faad 	bl	80115f4 <__hi0bits>
 801109a:	f1c0 0020 	rsb	r0, r0, #32
 801109e:	9b06      	ldr	r3, [sp, #24]
 80110a0:	4418      	add	r0, r3
 80110a2:	f010 001f 	ands.w	r0, r0, #31
 80110a6:	f000 808d 	beq.w	80111c4 <_dtoa_r+0x844>
 80110aa:	f1c0 0220 	rsb	r2, r0, #32
 80110ae:	2a04      	cmp	r2, #4
 80110b0:	f340 8086 	ble.w	80111c0 <_dtoa_r+0x840>
 80110b4:	f1c0 001c 	rsb	r0, r0, #28
 80110b8:	9b05      	ldr	r3, [sp, #20]
 80110ba:	4403      	add	r3, r0
 80110bc:	9305      	str	r3, [sp, #20]
 80110be:	9b06      	ldr	r3, [sp, #24]
 80110c0:	4403      	add	r3, r0
 80110c2:	4480      	add	r8, r0
 80110c4:	9306      	str	r3, [sp, #24]
 80110c6:	9b05      	ldr	r3, [sp, #20]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	dd05      	ble.n	80110d8 <_dtoa_r+0x758>
 80110cc:	4629      	mov	r1, r5
 80110ce:	461a      	mov	r2, r3
 80110d0:	4630      	mov	r0, r6
 80110d2:	f000 fbf5 	bl	80118c0 <__lshift>
 80110d6:	4605      	mov	r5, r0
 80110d8:	9b06      	ldr	r3, [sp, #24]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	dd05      	ble.n	80110ea <_dtoa_r+0x76a>
 80110de:	4621      	mov	r1, r4
 80110e0:	461a      	mov	r2, r3
 80110e2:	4630      	mov	r0, r6
 80110e4:	f000 fbec 	bl	80118c0 <__lshift>
 80110e8:	4604      	mov	r4, r0
 80110ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d06b      	beq.n	80111c8 <_dtoa_r+0x848>
 80110f0:	4621      	mov	r1, r4
 80110f2:	4628      	mov	r0, r5
 80110f4:	f000 fc50 	bl	8011998 <__mcmp>
 80110f8:	2800      	cmp	r0, #0
 80110fa:	da65      	bge.n	80111c8 <_dtoa_r+0x848>
 80110fc:	2300      	movs	r3, #0
 80110fe:	4629      	mov	r1, r5
 8011100:	220a      	movs	r2, #10
 8011102:	4630      	mov	r0, r6
 8011104:	f000 fa2c 	bl	8011560 <__multadd>
 8011108:	9b08      	ldr	r3, [sp, #32]
 801110a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801110e:	4605      	mov	r5, r0
 8011110:	2b00      	cmp	r3, #0
 8011112:	f000 8192 	beq.w	801143a <_dtoa_r+0xaba>
 8011116:	4639      	mov	r1, r7
 8011118:	2300      	movs	r3, #0
 801111a:	220a      	movs	r2, #10
 801111c:	4630      	mov	r0, r6
 801111e:	f000 fa1f 	bl	8011560 <__multadd>
 8011122:	f1ba 0f00 	cmp.w	sl, #0
 8011126:	4607      	mov	r7, r0
 8011128:	f300 808e 	bgt.w	8011248 <_dtoa_r+0x8c8>
 801112c:	9b07      	ldr	r3, [sp, #28]
 801112e:	2b02      	cmp	r3, #2
 8011130:	dc51      	bgt.n	80111d6 <_dtoa_r+0x856>
 8011132:	e089      	b.n	8011248 <_dtoa_r+0x8c8>
 8011134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011136:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801113a:	e751      	b.n	8010fe0 <_dtoa_r+0x660>
 801113c:	f109 34ff 	add.w	r4, r9, #4294967295
 8011140:	42a3      	cmp	r3, r4
 8011142:	bfbf      	itttt	lt
 8011144:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8011146:	1ae3      	sublt	r3, r4, r3
 8011148:	18d2      	addlt	r2, r2, r3
 801114a:	4613      	movlt	r3, r2
 801114c:	bfb7      	itett	lt
 801114e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011150:	1b1c      	subge	r4, r3, r4
 8011152:	4623      	movlt	r3, r4
 8011154:	2400      	movlt	r4, #0
 8011156:	f1b9 0f00 	cmp.w	r9, #0
 801115a:	bfb5      	itete	lt
 801115c:	9a05      	ldrlt	r2, [sp, #20]
 801115e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8011162:	eba2 0809 	sublt.w	r8, r2, r9
 8011166:	464a      	movge	r2, r9
 8011168:	bfb8      	it	lt
 801116a:	2200      	movlt	r2, #0
 801116c:	e73b      	b.n	8010fe6 <_dtoa_r+0x666>
 801116e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011172:	9f08      	ldr	r7, [sp, #32]
 8011174:	461c      	mov	r4, r3
 8011176:	e743      	b.n	8011000 <_dtoa_r+0x680>
 8011178:	461a      	mov	r2, r3
 801117a:	e76f      	b.n	801105c <_dtoa_r+0x6dc>
 801117c:	9b07      	ldr	r3, [sp, #28]
 801117e:	2b01      	cmp	r3, #1
 8011180:	dc18      	bgt.n	80111b4 <_dtoa_r+0x834>
 8011182:	9b02      	ldr	r3, [sp, #8]
 8011184:	b9b3      	cbnz	r3, 80111b4 <_dtoa_r+0x834>
 8011186:	9b03      	ldr	r3, [sp, #12]
 8011188:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801118c:	b9a2      	cbnz	r2, 80111b8 <_dtoa_r+0x838>
 801118e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011192:	0d12      	lsrs	r2, r2, #20
 8011194:	0512      	lsls	r2, r2, #20
 8011196:	b18a      	cbz	r2, 80111bc <_dtoa_r+0x83c>
 8011198:	9b05      	ldr	r3, [sp, #20]
 801119a:	3301      	adds	r3, #1
 801119c:	9305      	str	r3, [sp, #20]
 801119e:	9b06      	ldr	r3, [sp, #24]
 80111a0:	3301      	adds	r3, #1
 80111a2:	9306      	str	r3, [sp, #24]
 80111a4:	2301      	movs	r3, #1
 80111a6:	930a      	str	r3, [sp, #40]	; 0x28
 80111a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f47f af6f 	bne.w	801108e <_dtoa_r+0x70e>
 80111b0:	2001      	movs	r0, #1
 80111b2:	e774      	b.n	801109e <_dtoa_r+0x71e>
 80111b4:	2300      	movs	r3, #0
 80111b6:	e7f6      	b.n	80111a6 <_dtoa_r+0x826>
 80111b8:	9b02      	ldr	r3, [sp, #8]
 80111ba:	e7f4      	b.n	80111a6 <_dtoa_r+0x826>
 80111bc:	920a      	str	r2, [sp, #40]	; 0x28
 80111be:	e7f3      	b.n	80111a8 <_dtoa_r+0x828>
 80111c0:	d081      	beq.n	80110c6 <_dtoa_r+0x746>
 80111c2:	4610      	mov	r0, r2
 80111c4:	301c      	adds	r0, #28
 80111c6:	e777      	b.n	80110b8 <_dtoa_r+0x738>
 80111c8:	f1b9 0f00 	cmp.w	r9, #0
 80111cc:	dc37      	bgt.n	801123e <_dtoa_r+0x8be>
 80111ce:	9b07      	ldr	r3, [sp, #28]
 80111d0:	2b02      	cmp	r3, #2
 80111d2:	dd34      	ble.n	801123e <_dtoa_r+0x8be>
 80111d4:	46ca      	mov	sl, r9
 80111d6:	f1ba 0f00 	cmp.w	sl, #0
 80111da:	d10d      	bne.n	80111f8 <_dtoa_r+0x878>
 80111dc:	4621      	mov	r1, r4
 80111de:	4653      	mov	r3, sl
 80111e0:	2205      	movs	r2, #5
 80111e2:	4630      	mov	r0, r6
 80111e4:	f000 f9bc 	bl	8011560 <__multadd>
 80111e8:	4601      	mov	r1, r0
 80111ea:	4604      	mov	r4, r0
 80111ec:	4628      	mov	r0, r5
 80111ee:	f000 fbd3 	bl	8011998 <__mcmp>
 80111f2:	2800      	cmp	r0, #0
 80111f4:	f73f adde 	bgt.w	8010db4 <_dtoa_r+0x434>
 80111f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111fa:	f8dd 8000 	ldr.w	r8, [sp]
 80111fe:	ea6f 0b03 	mvn.w	fp, r3
 8011202:	f04f 0900 	mov.w	r9, #0
 8011206:	4621      	mov	r1, r4
 8011208:	4630      	mov	r0, r6
 801120a:	f000 f987 	bl	801151c <_Bfree>
 801120e:	2f00      	cmp	r7, #0
 8011210:	f43f aea7 	beq.w	8010f62 <_dtoa_r+0x5e2>
 8011214:	f1b9 0f00 	cmp.w	r9, #0
 8011218:	d005      	beq.n	8011226 <_dtoa_r+0x8a6>
 801121a:	45b9      	cmp	r9, r7
 801121c:	d003      	beq.n	8011226 <_dtoa_r+0x8a6>
 801121e:	4649      	mov	r1, r9
 8011220:	4630      	mov	r0, r6
 8011222:	f000 f97b 	bl	801151c <_Bfree>
 8011226:	4639      	mov	r1, r7
 8011228:	4630      	mov	r0, r6
 801122a:	f000 f977 	bl	801151c <_Bfree>
 801122e:	e698      	b.n	8010f62 <_dtoa_r+0x5e2>
 8011230:	2400      	movs	r4, #0
 8011232:	4627      	mov	r7, r4
 8011234:	e7e0      	b.n	80111f8 <_dtoa_r+0x878>
 8011236:	46bb      	mov	fp, r7
 8011238:	4604      	mov	r4, r0
 801123a:	4607      	mov	r7, r0
 801123c:	e5ba      	b.n	8010db4 <_dtoa_r+0x434>
 801123e:	9b08      	ldr	r3, [sp, #32]
 8011240:	46ca      	mov	sl, r9
 8011242:	2b00      	cmp	r3, #0
 8011244:	f000 8100 	beq.w	8011448 <_dtoa_r+0xac8>
 8011248:	f1b8 0f00 	cmp.w	r8, #0
 801124c:	dd05      	ble.n	801125a <_dtoa_r+0x8da>
 801124e:	4639      	mov	r1, r7
 8011250:	4642      	mov	r2, r8
 8011252:	4630      	mov	r0, r6
 8011254:	f000 fb34 	bl	80118c0 <__lshift>
 8011258:	4607      	mov	r7, r0
 801125a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801125c:	2b00      	cmp	r3, #0
 801125e:	d05d      	beq.n	801131c <_dtoa_r+0x99c>
 8011260:	6879      	ldr	r1, [r7, #4]
 8011262:	4630      	mov	r0, r6
 8011264:	f000 f91a 	bl	801149c <_Balloc>
 8011268:	4680      	mov	r8, r0
 801126a:	b928      	cbnz	r0, 8011278 <_dtoa_r+0x8f8>
 801126c:	4b82      	ldr	r3, [pc, #520]	; (8011478 <_dtoa_r+0xaf8>)
 801126e:	4602      	mov	r2, r0
 8011270:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011274:	f7ff bb9a 	b.w	80109ac <_dtoa_r+0x2c>
 8011278:	693a      	ldr	r2, [r7, #16]
 801127a:	3202      	adds	r2, #2
 801127c:	0092      	lsls	r2, r2, #2
 801127e:	f107 010c 	add.w	r1, r7, #12
 8011282:	300c      	adds	r0, #12
 8011284:	f7fe fe96 	bl	800ffb4 <memcpy>
 8011288:	2201      	movs	r2, #1
 801128a:	4641      	mov	r1, r8
 801128c:	4630      	mov	r0, r6
 801128e:	f000 fb17 	bl	80118c0 <__lshift>
 8011292:	9b00      	ldr	r3, [sp, #0]
 8011294:	3301      	adds	r3, #1
 8011296:	9305      	str	r3, [sp, #20]
 8011298:	9b00      	ldr	r3, [sp, #0]
 801129a:	4453      	add	r3, sl
 801129c:	9309      	str	r3, [sp, #36]	; 0x24
 801129e:	9b02      	ldr	r3, [sp, #8]
 80112a0:	f003 0301 	and.w	r3, r3, #1
 80112a4:	46b9      	mov	r9, r7
 80112a6:	9308      	str	r3, [sp, #32]
 80112a8:	4607      	mov	r7, r0
 80112aa:	9b05      	ldr	r3, [sp, #20]
 80112ac:	4621      	mov	r1, r4
 80112ae:	3b01      	subs	r3, #1
 80112b0:	4628      	mov	r0, r5
 80112b2:	9302      	str	r3, [sp, #8]
 80112b4:	f7ff fad6 	bl	8010864 <quorem>
 80112b8:	4603      	mov	r3, r0
 80112ba:	3330      	adds	r3, #48	; 0x30
 80112bc:	9006      	str	r0, [sp, #24]
 80112be:	4649      	mov	r1, r9
 80112c0:	4628      	mov	r0, r5
 80112c2:	930a      	str	r3, [sp, #40]	; 0x28
 80112c4:	f000 fb68 	bl	8011998 <__mcmp>
 80112c8:	463a      	mov	r2, r7
 80112ca:	4682      	mov	sl, r0
 80112cc:	4621      	mov	r1, r4
 80112ce:	4630      	mov	r0, r6
 80112d0:	f000 fb7e 	bl	80119d0 <__mdiff>
 80112d4:	68c2      	ldr	r2, [r0, #12]
 80112d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112d8:	4680      	mov	r8, r0
 80112da:	bb0a      	cbnz	r2, 8011320 <_dtoa_r+0x9a0>
 80112dc:	4601      	mov	r1, r0
 80112de:	4628      	mov	r0, r5
 80112e0:	f000 fb5a 	bl	8011998 <__mcmp>
 80112e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112e6:	4602      	mov	r2, r0
 80112e8:	4641      	mov	r1, r8
 80112ea:	4630      	mov	r0, r6
 80112ec:	920e      	str	r2, [sp, #56]	; 0x38
 80112ee:	930a      	str	r3, [sp, #40]	; 0x28
 80112f0:	f000 f914 	bl	801151c <_Bfree>
 80112f4:	9b07      	ldr	r3, [sp, #28]
 80112f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80112f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80112fc:	ea43 0102 	orr.w	r1, r3, r2
 8011300:	9b08      	ldr	r3, [sp, #32]
 8011302:	430b      	orrs	r3, r1
 8011304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011306:	d10d      	bne.n	8011324 <_dtoa_r+0x9a4>
 8011308:	2b39      	cmp	r3, #57	; 0x39
 801130a:	d029      	beq.n	8011360 <_dtoa_r+0x9e0>
 801130c:	f1ba 0f00 	cmp.w	sl, #0
 8011310:	dd01      	ble.n	8011316 <_dtoa_r+0x996>
 8011312:	9b06      	ldr	r3, [sp, #24]
 8011314:	3331      	adds	r3, #49	; 0x31
 8011316:	9a02      	ldr	r2, [sp, #8]
 8011318:	7013      	strb	r3, [r2, #0]
 801131a:	e774      	b.n	8011206 <_dtoa_r+0x886>
 801131c:	4638      	mov	r0, r7
 801131e:	e7b8      	b.n	8011292 <_dtoa_r+0x912>
 8011320:	2201      	movs	r2, #1
 8011322:	e7e1      	b.n	80112e8 <_dtoa_r+0x968>
 8011324:	f1ba 0f00 	cmp.w	sl, #0
 8011328:	db06      	blt.n	8011338 <_dtoa_r+0x9b8>
 801132a:	9907      	ldr	r1, [sp, #28]
 801132c:	ea41 0a0a 	orr.w	sl, r1, sl
 8011330:	9908      	ldr	r1, [sp, #32]
 8011332:	ea5a 0101 	orrs.w	r1, sl, r1
 8011336:	d120      	bne.n	801137a <_dtoa_r+0x9fa>
 8011338:	2a00      	cmp	r2, #0
 801133a:	ddec      	ble.n	8011316 <_dtoa_r+0x996>
 801133c:	4629      	mov	r1, r5
 801133e:	2201      	movs	r2, #1
 8011340:	4630      	mov	r0, r6
 8011342:	9305      	str	r3, [sp, #20]
 8011344:	f000 fabc 	bl	80118c0 <__lshift>
 8011348:	4621      	mov	r1, r4
 801134a:	4605      	mov	r5, r0
 801134c:	f000 fb24 	bl	8011998 <__mcmp>
 8011350:	2800      	cmp	r0, #0
 8011352:	9b05      	ldr	r3, [sp, #20]
 8011354:	dc02      	bgt.n	801135c <_dtoa_r+0x9dc>
 8011356:	d1de      	bne.n	8011316 <_dtoa_r+0x996>
 8011358:	07da      	lsls	r2, r3, #31
 801135a:	d5dc      	bpl.n	8011316 <_dtoa_r+0x996>
 801135c:	2b39      	cmp	r3, #57	; 0x39
 801135e:	d1d8      	bne.n	8011312 <_dtoa_r+0x992>
 8011360:	9a02      	ldr	r2, [sp, #8]
 8011362:	2339      	movs	r3, #57	; 0x39
 8011364:	7013      	strb	r3, [r2, #0]
 8011366:	4643      	mov	r3, r8
 8011368:	4698      	mov	r8, r3
 801136a:	3b01      	subs	r3, #1
 801136c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011370:	2a39      	cmp	r2, #57	; 0x39
 8011372:	d051      	beq.n	8011418 <_dtoa_r+0xa98>
 8011374:	3201      	adds	r2, #1
 8011376:	701a      	strb	r2, [r3, #0]
 8011378:	e745      	b.n	8011206 <_dtoa_r+0x886>
 801137a:	2a00      	cmp	r2, #0
 801137c:	dd03      	ble.n	8011386 <_dtoa_r+0xa06>
 801137e:	2b39      	cmp	r3, #57	; 0x39
 8011380:	d0ee      	beq.n	8011360 <_dtoa_r+0x9e0>
 8011382:	3301      	adds	r3, #1
 8011384:	e7c7      	b.n	8011316 <_dtoa_r+0x996>
 8011386:	9a05      	ldr	r2, [sp, #20]
 8011388:	9909      	ldr	r1, [sp, #36]	; 0x24
 801138a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801138e:	428a      	cmp	r2, r1
 8011390:	d02b      	beq.n	80113ea <_dtoa_r+0xa6a>
 8011392:	4629      	mov	r1, r5
 8011394:	2300      	movs	r3, #0
 8011396:	220a      	movs	r2, #10
 8011398:	4630      	mov	r0, r6
 801139a:	f000 f8e1 	bl	8011560 <__multadd>
 801139e:	45b9      	cmp	r9, r7
 80113a0:	4605      	mov	r5, r0
 80113a2:	f04f 0300 	mov.w	r3, #0
 80113a6:	f04f 020a 	mov.w	r2, #10
 80113aa:	4649      	mov	r1, r9
 80113ac:	4630      	mov	r0, r6
 80113ae:	d107      	bne.n	80113c0 <_dtoa_r+0xa40>
 80113b0:	f000 f8d6 	bl	8011560 <__multadd>
 80113b4:	4681      	mov	r9, r0
 80113b6:	4607      	mov	r7, r0
 80113b8:	9b05      	ldr	r3, [sp, #20]
 80113ba:	3301      	adds	r3, #1
 80113bc:	9305      	str	r3, [sp, #20]
 80113be:	e774      	b.n	80112aa <_dtoa_r+0x92a>
 80113c0:	f000 f8ce 	bl	8011560 <__multadd>
 80113c4:	4639      	mov	r1, r7
 80113c6:	4681      	mov	r9, r0
 80113c8:	2300      	movs	r3, #0
 80113ca:	220a      	movs	r2, #10
 80113cc:	4630      	mov	r0, r6
 80113ce:	f000 f8c7 	bl	8011560 <__multadd>
 80113d2:	4607      	mov	r7, r0
 80113d4:	e7f0      	b.n	80113b8 <_dtoa_r+0xa38>
 80113d6:	f1ba 0f00 	cmp.w	sl, #0
 80113da:	9a00      	ldr	r2, [sp, #0]
 80113dc:	bfcc      	ite	gt
 80113de:	46d0      	movgt	r8, sl
 80113e0:	f04f 0801 	movle.w	r8, #1
 80113e4:	4490      	add	r8, r2
 80113e6:	f04f 0900 	mov.w	r9, #0
 80113ea:	4629      	mov	r1, r5
 80113ec:	2201      	movs	r2, #1
 80113ee:	4630      	mov	r0, r6
 80113f0:	9302      	str	r3, [sp, #8]
 80113f2:	f000 fa65 	bl	80118c0 <__lshift>
 80113f6:	4621      	mov	r1, r4
 80113f8:	4605      	mov	r5, r0
 80113fa:	f000 facd 	bl	8011998 <__mcmp>
 80113fe:	2800      	cmp	r0, #0
 8011400:	dcb1      	bgt.n	8011366 <_dtoa_r+0x9e6>
 8011402:	d102      	bne.n	801140a <_dtoa_r+0xa8a>
 8011404:	9b02      	ldr	r3, [sp, #8]
 8011406:	07db      	lsls	r3, r3, #31
 8011408:	d4ad      	bmi.n	8011366 <_dtoa_r+0x9e6>
 801140a:	4643      	mov	r3, r8
 801140c:	4698      	mov	r8, r3
 801140e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011412:	2a30      	cmp	r2, #48	; 0x30
 8011414:	d0fa      	beq.n	801140c <_dtoa_r+0xa8c>
 8011416:	e6f6      	b.n	8011206 <_dtoa_r+0x886>
 8011418:	9a00      	ldr	r2, [sp, #0]
 801141a:	429a      	cmp	r2, r3
 801141c:	d1a4      	bne.n	8011368 <_dtoa_r+0x9e8>
 801141e:	f10b 0b01 	add.w	fp, fp, #1
 8011422:	2331      	movs	r3, #49	; 0x31
 8011424:	e778      	b.n	8011318 <_dtoa_r+0x998>
 8011426:	4b15      	ldr	r3, [pc, #84]	; (801147c <_dtoa_r+0xafc>)
 8011428:	f7ff bb12 	b.w	8010a50 <_dtoa_r+0xd0>
 801142c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801142e:	2b00      	cmp	r3, #0
 8011430:	f47f aaee 	bne.w	8010a10 <_dtoa_r+0x90>
 8011434:	4b12      	ldr	r3, [pc, #72]	; (8011480 <_dtoa_r+0xb00>)
 8011436:	f7ff bb0b 	b.w	8010a50 <_dtoa_r+0xd0>
 801143a:	f1ba 0f00 	cmp.w	sl, #0
 801143e:	dc03      	bgt.n	8011448 <_dtoa_r+0xac8>
 8011440:	9b07      	ldr	r3, [sp, #28]
 8011442:	2b02      	cmp	r3, #2
 8011444:	f73f aec7 	bgt.w	80111d6 <_dtoa_r+0x856>
 8011448:	f8dd 8000 	ldr.w	r8, [sp]
 801144c:	4621      	mov	r1, r4
 801144e:	4628      	mov	r0, r5
 8011450:	f7ff fa08 	bl	8010864 <quorem>
 8011454:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011458:	f808 3b01 	strb.w	r3, [r8], #1
 801145c:	9a00      	ldr	r2, [sp, #0]
 801145e:	eba8 0202 	sub.w	r2, r8, r2
 8011462:	4592      	cmp	sl, r2
 8011464:	ddb7      	ble.n	80113d6 <_dtoa_r+0xa56>
 8011466:	4629      	mov	r1, r5
 8011468:	2300      	movs	r3, #0
 801146a:	220a      	movs	r2, #10
 801146c:	4630      	mov	r0, r6
 801146e:	f000 f877 	bl	8011560 <__multadd>
 8011472:	4605      	mov	r5, r0
 8011474:	e7ea      	b.n	801144c <_dtoa_r+0xacc>
 8011476:	bf00      	nop
 8011478:	0801437b 	.word	0x0801437b
 801147c:	080142d4 	.word	0x080142d4
 8011480:	080142f8 	.word	0x080142f8

08011484 <_localeconv_r>:
 8011484:	4800      	ldr	r0, [pc, #0]	; (8011488 <_localeconv_r+0x4>)
 8011486:	4770      	bx	lr
 8011488:	24000190 	.word	0x24000190

0801148c <malloc>:
 801148c:	4b02      	ldr	r3, [pc, #8]	; (8011498 <malloc+0xc>)
 801148e:	4601      	mov	r1, r0
 8011490:	6818      	ldr	r0, [r3, #0]
 8011492:	f000 bbe1 	b.w	8011c58 <_malloc_r>
 8011496:	bf00      	nop
 8011498:	2400003c 	.word	0x2400003c

0801149c <_Balloc>:
 801149c:	b570      	push	{r4, r5, r6, lr}
 801149e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80114a0:	4604      	mov	r4, r0
 80114a2:	460d      	mov	r5, r1
 80114a4:	b976      	cbnz	r6, 80114c4 <_Balloc+0x28>
 80114a6:	2010      	movs	r0, #16
 80114a8:	f7ff fff0 	bl	801148c <malloc>
 80114ac:	4602      	mov	r2, r0
 80114ae:	6260      	str	r0, [r4, #36]	; 0x24
 80114b0:	b920      	cbnz	r0, 80114bc <_Balloc+0x20>
 80114b2:	4b18      	ldr	r3, [pc, #96]	; (8011514 <_Balloc+0x78>)
 80114b4:	4818      	ldr	r0, [pc, #96]	; (8011518 <_Balloc+0x7c>)
 80114b6:	2166      	movs	r1, #102	; 0x66
 80114b8:	f000 fc38 	bl	8011d2c <__assert_func>
 80114bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114c0:	6006      	str	r6, [r0, #0]
 80114c2:	60c6      	str	r6, [r0, #12]
 80114c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80114c6:	68f3      	ldr	r3, [r6, #12]
 80114c8:	b183      	cbz	r3, 80114ec <_Balloc+0x50>
 80114ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114d2:	b9b8      	cbnz	r0, 8011504 <_Balloc+0x68>
 80114d4:	2101      	movs	r1, #1
 80114d6:	fa01 f605 	lsl.w	r6, r1, r5
 80114da:	1d72      	adds	r2, r6, #5
 80114dc:	0092      	lsls	r2, r2, #2
 80114de:	4620      	mov	r0, r4
 80114e0:	f000 fb5a 	bl	8011b98 <_calloc_r>
 80114e4:	b160      	cbz	r0, 8011500 <_Balloc+0x64>
 80114e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114ea:	e00e      	b.n	801150a <_Balloc+0x6e>
 80114ec:	2221      	movs	r2, #33	; 0x21
 80114ee:	2104      	movs	r1, #4
 80114f0:	4620      	mov	r0, r4
 80114f2:	f000 fb51 	bl	8011b98 <_calloc_r>
 80114f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114f8:	60f0      	str	r0, [r6, #12]
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d1e4      	bne.n	80114ca <_Balloc+0x2e>
 8011500:	2000      	movs	r0, #0
 8011502:	bd70      	pop	{r4, r5, r6, pc}
 8011504:	6802      	ldr	r2, [r0, #0]
 8011506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801150a:	2300      	movs	r3, #0
 801150c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011510:	e7f7      	b.n	8011502 <_Balloc+0x66>
 8011512:	bf00      	nop
 8011514:	08014305 	.word	0x08014305
 8011518:	0801438c 	.word	0x0801438c

0801151c <_Bfree>:
 801151c:	b570      	push	{r4, r5, r6, lr}
 801151e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011520:	4605      	mov	r5, r0
 8011522:	460c      	mov	r4, r1
 8011524:	b976      	cbnz	r6, 8011544 <_Bfree+0x28>
 8011526:	2010      	movs	r0, #16
 8011528:	f7ff ffb0 	bl	801148c <malloc>
 801152c:	4602      	mov	r2, r0
 801152e:	6268      	str	r0, [r5, #36]	; 0x24
 8011530:	b920      	cbnz	r0, 801153c <_Bfree+0x20>
 8011532:	4b09      	ldr	r3, [pc, #36]	; (8011558 <_Bfree+0x3c>)
 8011534:	4809      	ldr	r0, [pc, #36]	; (801155c <_Bfree+0x40>)
 8011536:	218a      	movs	r1, #138	; 0x8a
 8011538:	f000 fbf8 	bl	8011d2c <__assert_func>
 801153c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011540:	6006      	str	r6, [r0, #0]
 8011542:	60c6      	str	r6, [r0, #12]
 8011544:	b13c      	cbz	r4, 8011556 <_Bfree+0x3a>
 8011546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011548:	6862      	ldr	r2, [r4, #4]
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011550:	6021      	str	r1, [r4, #0]
 8011552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011556:	bd70      	pop	{r4, r5, r6, pc}
 8011558:	08014305 	.word	0x08014305
 801155c:	0801438c 	.word	0x0801438c

08011560 <__multadd>:
 8011560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011564:	690e      	ldr	r6, [r1, #16]
 8011566:	4607      	mov	r7, r0
 8011568:	4698      	mov	r8, r3
 801156a:	460c      	mov	r4, r1
 801156c:	f101 0014 	add.w	r0, r1, #20
 8011570:	2300      	movs	r3, #0
 8011572:	6805      	ldr	r5, [r0, #0]
 8011574:	b2a9      	uxth	r1, r5
 8011576:	fb02 8101 	mla	r1, r2, r1, r8
 801157a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801157e:	0c2d      	lsrs	r5, r5, #16
 8011580:	fb02 c505 	mla	r5, r2, r5, ip
 8011584:	b289      	uxth	r1, r1
 8011586:	3301      	adds	r3, #1
 8011588:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801158c:	429e      	cmp	r6, r3
 801158e:	f840 1b04 	str.w	r1, [r0], #4
 8011592:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011596:	dcec      	bgt.n	8011572 <__multadd+0x12>
 8011598:	f1b8 0f00 	cmp.w	r8, #0
 801159c:	d022      	beq.n	80115e4 <__multadd+0x84>
 801159e:	68a3      	ldr	r3, [r4, #8]
 80115a0:	42b3      	cmp	r3, r6
 80115a2:	dc19      	bgt.n	80115d8 <__multadd+0x78>
 80115a4:	6861      	ldr	r1, [r4, #4]
 80115a6:	4638      	mov	r0, r7
 80115a8:	3101      	adds	r1, #1
 80115aa:	f7ff ff77 	bl	801149c <_Balloc>
 80115ae:	4605      	mov	r5, r0
 80115b0:	b928      	cbnz	r0, 80115be <__multadd+0x5e>
 80115b2:	4602      	mov	r2, r0
 80115b4:	4b0d      	ldr	r3, [pc, #52]	; (80115ec <__multadd+0x8c>)
 80115b6:	480e      	ldr	r0, [pc, #56]	; (80115f0 <__multadd+0x90>)
 80115b8:	21b5      	movs	r1, #181	; 0xb5
 80115ba:	f000 fbb7 	bl	8011d2c <__assert_func>
 80115be:	6922      	ldr	r2, [r4, #16]
 80115c0:	3202      	adds	r2, #2
 80115c2:	f104 010c 	add.w	r1, r4, #12
 80115c6:	0092      	lsls	r2, r2, #2
 80115c8:	300c      	adds	r0, #12
 80115ca:	f7fe fcf3 	bl	800ffb4 <memcpy>
 80115ce:	4621      	mov	r1, r4
 80115d0:	4638      	mov	r0, r7
 80115d2:	f7ff ffa3 	bl	801151c <_Bfree>
 80115d6:	462c      	mov	r4, r5
 80115d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80115dc:	3601      	adds	r6, #1
 80115de:	f8c3 8014 	str.w	r8, [r3, #20]
 80115e2:	6126      	str	r6, [r4, #16]
 80115e4:	4620      	mov	r0, r4
 80115e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ea:	bf00      	nop
 80115ec:	0801437b 	.word	0x0801437b
 80115f0:	0801438c 	.word	0x0801438c

080115f4 <__hi0bits>:
 80115f4:	0c03      	lsrs	r3, r0, #16
 80115f6:	041b      	lsls	r3, r3, #16
 80115f8:	b9d3      	cbnz	r3, 8011630 <__hi0bits+0x3c>
 80115fa:	0400      	lsls	r0, r0, #16
 80115fc:	2310      	movs	r3, #16
 80115fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011602:	bf04      	itt	eq
 8011604:	0200      	lsleq	r0, r0, #8
 8011606:	3308      	addeq	r3, #8
 8011608:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801160c:	bf04      	itt	eq
 801160e:	0100      	lsleq	r0, r0, #4
 8011610:	3304      	addeq	r3, #4
 8011612:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011616:	bf04      	itt	eq
 8011618:	0080      	lsleq	r0, r0, #2
 801161a:	3302      	addeq	r3, #2
 801161c:	2800      	cmp	r0, #0
 801161e:	db05      	blt.n	801162c <__hi0bits+0x38>
 8011620:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011624:	f103 0301 	add.w	r3, r3, #1
 8011628:	bf08      	it	eq
 801162a:	2320      	moveq	r3, #32
 801162c:	4618      	mov	r0, r3
 801162e:	4770      	bx	lr
 8011630:	2300      	movs	r3, #0
 8011632:	e7e4      	b.n	80115fe <__hi0bits+0xa>

08011634 <__lo0bits>:
 8011634:	6803      	ldr	r3, [r0, #0]
 8011636:	f013 0207 	ands.w	r2, r3, #7
 801163a:	4601      	mov	r1, r0
 801163c:	d00b      	beq.n	8011656 <__lo0bits+0x22>
 801163e:	07da      	lsls	r2, r3, #31
 8011640:	d424      	bmi.n	801168c <__lo0bits+0x58>
 8011642:	0798      	lsls	r0, r3, #30
 8011644:	bf49      	itett	mi
 8011646:	085b      	lsrmi	r3, r3, #1
 8011648:	089b      	lsrpl	r3, r3, #2
 801164a:	2001      	movmi	r0, #1
 801164c:	600b      	strmi	r3, [r1, #0]
 801164e:	bf5c      	itt	pl
 8011650:	600b      	strpl	r3, [r1, #0]
 8011652:	2002      	movpl	r0, #2
 8011654:	4770      	bx	lr
 8011656:	b298      	uxth	r0, r3
 8011658:	b9b0      	cbnz	r0, 8011688 <__lo0bits+0x54>
 801165a:	0c1b      	lsrs	r3, r3, #16
 801165c:	2010      	movs	r0, #16
 801165e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011662:	bf04      	itt	eq
 8011664:	0a1b      	lsreq	r3, r3, #8
 8011666:	3008      	addeq	r0, #8
 8011668:	071a      	lsls	r2, r3, #28
 801166a:	bf04      	itt	eq
 801166c:	091b      	lsreq	r3, r3, #4
 801166e:	3004      	addeq	r0, #4
 8011670:	079a      	lsls	r2, r3, #30
 8011672:	bf04      	itt	eq
 8011674:	089b      	lsreq	r3, r3, #2
 8011676:	3002      	addeq	r0, #2
 8011678:	07da      	lsls	r2, r3, #31
 801167a:	d403      	bmi.n	8011684 <__lo0bits+0x50>
 801167c:	085b      	lsrs	r3, r3, #1
 801167e:	f100 0001 	add.w	r0, r0, #1
 8011682:	d005      	beq.n	8011690 <__lo0bits+0x5c>
 8011684:	600b      	str	r3, [r1, #0]
 8011686:	4770      	bx	lr
 8011688:	4610      	mov	r0, r2
 801168a:	e7e8      	b.n	801165e <__lo0bits+0x2a>
 801168c:	2000      	movs	r0, #0
 801168e:	4770      	bx	lr
 8011690:	2020      	movs	r0, #32
 8011692:	4770      	bx	lr

08011694 <__i2b>:
 8011694:	b510      	push	{r4, lr}
 8011696:	460c      	mov	r4, r1
 8011698:	2101      	movs	r1, #1
 801169a:	f7ff feff 	bl	801149c <_Balloc>
 801169e:	4602      	mov	r2, r0
 80116a0:	b928      	cbnz	r0, 80116ae <__i2b+0x1a>
 80116a2:	4b05      	ldr	r3, [pc, #20]	; (80116b8 <__i2b+0x24>)
 80116a4:	4805      	ldr	r0, [pc, #20]	; (80116bc <__i2b+0x28>)
 80116a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80116aa:	f000 fb3f 	bl	8011d2c <__assert_func>
 80116ae:	2301      	movs	r3, #1
 80116b0:	6144      	str	r4, [r0, #20]
 80116b2:	6103      	str	r3, [r0, #16]
 80116b4:	bd10      	pop	{r4, pc}
 80116b6:	bf00      	nop
 80116b8:	0801437b 	.word	0x0801437b
 80116bc:	0801438c 	.word	0x0801438c

080116c0 <__multiply>:
 80116c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c4:	4614      	mov	r4, r2
 80116c6:	690a      	ldr	r2, [r1, #16]
 80116c8:	6923      	ldr	r3, [r4, #16]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	bfb8      	it	lt
 80116ce:	460b      	movlt	r3, r1
 80116d0:	460d      	mov	r5, r1
 80116d2:	bfbc      	itt	lt
 80116d4:	4625      	movlt	r5, r4
 80116d6:	461c      	movlt	r4, r3
 80116d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80116dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80116e0:	68ab      	ldr	r3, [r5, #8]
 80116e2:	6869      	ldr	r1, [r5, #4]
 80116e4:	eb0a 0709 	add.w	r7, sl, r9
 80116e8:	42bb      	cmp	r3, r7
 80116ea:	b085      	sub	sp, #20
 80116ec:	bfb8      	it	lt
 80116ee:	3101      	addlt	r1, #1
 80116f0:	f7ff fed4 	bl	801149c <_Balloc>
 80116f4:	b930      	cbnz	r0, 8011704 <__multiply+0x44>
 80116f6:	4602      	mov	r2, r0
 80116f8:	4b42      	ldr	r3, [pc, #264]	; (8011804 <__multiply+0x144>)
 80116fa:	4843      	ldr	r0, [pc, #268]	; (8011808 <__multiply+0x148>)
 80116fc:	f240 115d 	movw	r1, #349	; 0x15d
 8011700:	f000 fb14 	bl	8011d2c <__assert_func>
 8011704:	f100 0614 	add.w	r6, r0, #20
 8011708:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801170c:	4633      	mov	r3, r6
 801170e:	2200      	movs	r2, #0
 8011710:	4543      	cmp	r3, r8
 8011712:	d31e      	bcc.n	8011752 <__multiply+0x92>
 8011714:	f105 0c14 	add.w	ip, r5, #20
 8011718:	f104 0314 	add.w	r3, r4, #20
 801171c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011720:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011724:	9202      	str	r2, [sp, #8]
 8011726:	ebac 0205 	sub.w	r2, ip, r5
 801172a:	3a15      	subs	r2, #21
 801172c:	f022 0203 	bic.w	r2, r2, #3
 8011730:	3204      	adds	r2, #4
 8011732:	f105 0115 	add.w	r1, r5, #21
 8011736:	458c      	cmp	ip, r1
 8011738:	bf38      	it	cc
 801173a:	2204      	movcc	r2, #4
 801173c:	9201      	str	r2, [sp, #4]
 801173e:	9a02      	ldr	r2, [sp, #8]
 8011740:	9303      	str	r3, [sp, #12]
 8011742:	429a      	cmp	r2, r3
 8011744:	d808      	bhi.n	8011758 <__multiply+0x98>
 8011746:	2f00      	cmp	r7, #0
 8011748:	dc55      	bgt.n	80117f6 <__multiply+0x136>
 801174a:	6107      	str	r7, [r0, #16]
 801174c:	b005      	add	sp, #20
 801174e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011752:	f843 2b04 	str.w	r2, [r3], #4
 8011756:	e7db      	b.n	8011710 <__multiply+0x50>
 8011758:	f8b3 a000 	ldrh.w	sl, [r3]
 801175c:	f1ba 0f00 	cmp.w	sl, #0
 8011760:	d020      	beq.n	80117a4 <__multiply+0xe4>
 8011762:	f105 0e14 	add.w	lr, r5, #20
 8011766:	46b1      	mov	r9, r6
 8011768:	2200      	movs	r2, #0
 801176a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801176e:	f8d9 b000 	ldr.w	fp, [r9]
 8011772:	b2a1      	uxth	r1, r4
 8011774:	fa1f fb8b 	uxth.w	fp, fp
 8011778:	fb0a b101 	mla	r1, sl, r1, fp
 801177c:	4411      	add	r1, r2
 801177e:	f8d9 2000 	ldr.w	r2, [r9]
 8011782:	0c24      	lsrs	r4, r4, #16
 8011784:	0c12      	lsrs	r2, r2, #16
 8011786:	fb0a 2404 	mla	r4, sl, r4, r2
 801178a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801178e:	b289      	uxth	r1, r1
 8011790:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011794:	45f4      	cmp	ip, lr
 8011796:	f849 1b04 	str.w	r1, [r9], #4
 801179a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801179e:	d8e4      	bhi.n	801176a <__multiply+0xaa>
 80117a0:	9901      	ldr	r1, [sp, #4]
 80117a2:	5072      	str	r2, [r6, r1]
 80117a4:	9a03      	ldr	r2, [sp, #12]
 80117a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80117aa:	3304      	adds	r3, #4
 80117ac:	f1b9 0f00 	cmp.w	r9, #0
 80117b0:	d01f      	beq.n	80117f2 <__multiply+0x132>
 80117b2:	6834      	ldr	r4, [r6, #0]
 80117b4:	f105 0114 	add.w	r1, r5, #20
 80117b8:	46b6      	mov	lr, r6
 80117ba:	f04f 0a00 	mov.w	sl, #0
 80117be:	880a      	ldrh	r2, [r1, #0]
 80117c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80117c4:	fb09 b202 	mla	r2, r9, r2, fp
 80117c8:	4492      	add	sl, r2
 80117ca:	b2a4      	uxth	r4, r4
 80117cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80117d0:	f84e 4b04 	str.w	r4, [lr], #4
 80117d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80117d8:	f8be 2000 	ldrh.w	r2, [lr]
 80117dc:	0c24      	lsrs	r4, r4, #16
 80117de:	fb09 2404 	mla	r4, r9, r4, r2
 80117e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80117e6:	458c      	cmp	ip, r1
 80117e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80117ec:	d8e7      	bhi.n	80117be <__multiply+0xfe>
 80117ee:	9a01      	ldr	r2, [sp, #4]
 80117f0:	50b4      	str	r4, [r6, r2]
 80117f2:	3604      	adds	r6, #4
 80117f4:	e7a3      	b.n	801173e <__multiply+0x7e>
 80117f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d1a5      	bne.n	801174a <__multiply+0x8a>
 80117fe:	3f01      	subs	r7, #1
 8011800:	e7a1      	b.n	8011746 <__multiply+0x86>
 8011802:	bf00      	nop
 8011804:	0801437b 	.word	0x0801437b
 8011808:	0801438c 	.word	0x0801438c

0801180c <__pow5mult>:
 801180c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011810:	4615      	mov	r5, r2
 8011812:	f012 0203 	ands.w	r2, r2, #3
 8011816:	4606      	mov	r6, r0
 8011818:	460f      	mov	r7, r1
 801181a:	d007      	beq.n	801182c <__pow5mult+0x20>
 801181c:	4c25      	ldr	r4, [pc, #148]	; (80118b4 <__pow5mult+0xa8>)
 801181e:	3a01      	subs	r2, #1
 8011820:	2300      	movs	r3, #0
 8011822:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011826:	f7ff fe9b 	bl	8011560 <__multadd>
 801182a:	4607      	mov	r7, r0
 801182c:	10ad      	asrs	r5, r5, #2
 801182e:	d03d      	beq.n	80118ac <__pow5mult+0xa0>
 8011830:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011832:	b97c      	cbnz	r4, 8011854 <__pow5mult+0x48>
 8011834:	2010      	movs	r0, #16
 8011836:	f7ff fe29 	bl	801148c <malloc>
 801183a:	4602      	mov	r2, r0
 801183c:	6270      	str	r0, [r6, #36]	; 0x24
 801183e:	b928      	cbnz	r0, 801184c <__pow5mult+0x40>
 8011840:	4b1d      	ldr	r3, [pc, #116]	; (80118b8 <__pow5mult+0xac>)
 8011842:	481e      	ldr	r0, [pc, #120]	; (80118bc <__pow5mult+0xb0>)
 8011844:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011848:	f000 fa70 	bl	8011d2c <__assert_func>
 801184c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011850:	6004      	str	r4, [r0, #0]
 8011852:	60c4      	str	r4, [r0, #12]
 8011854:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011858:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801185c:	b94c      	cbnz	r4, 8011872 <__pow5mult+0x66>
 801185e:	f240 2171 	movw	r1, #625	; 0x271
 8011862:	4630      	mov	r0, r6
 8011864:	f7ff ff16 	bl	8011694 <__i2b>
 8011868:	2300      	movs	r3, #0
 801186a:	f8c8 0008 	str.w	r0, [r8, #8]
 801186e:	4604      	mov	r4, r0
 8011870:	6003      	str	r3, [r0, #0]
 8011872:	f04f 0900 	mov.w	r9, #0
 8011876:	07eb      	lsls	r3, r5, #31
 8011878:	d50a      	bpl.n	8011890 <__pow5mult+0x84>
 801187a:	4639      	mov	r1, r7
 801187c:	4622      	mov	r2, r4
 801187e:	4630      	mov	r0, r6
 8011880:	f7ff ff1e 	bl	80116c0 <__multiply>
 8011884:	4639      	mov	r1, r7
 8011886:	4680      	mov	r8, r0
 8011888:	4630      	mov	r0, r6
 801188a:	f7ff fe47 	bl	801151c <_Bfree>
 801188e:	4647      	mov	r7, r8
 8011890:	106d      	asrs	r5, r5, #1
 8011892:	d00b      	beq.n	80118ac <__pow5mult+0xa0>
 8011894:	6820      	ldr	r0, [r4, #0]
 8011896:	b938      	cbnz	r0, 80118a8 <__pow5mult+0x9c>
 8011898:	4622      	mov	r2, r4
 801189a:	4621      	mov	r1, r4
 801189c:	4630      	mov	r0, r6
 801189e:	f7ff ff0f 	bl	80116c0 <__multiply>
 80118a2:	6020      	str	r0, [r4, #0]
 80118a4:	f8c0 9000 	str.w	r9, [r0]
 80118a8:	4604      	mov	r4, r0
 80118aa:	e7e4      	b.n	8011876 <__pow5mult+0x6a>
 80118ac:	4638      	mov	r0, r7
 80118ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118b2:	bf00      	nop
 80118b4:	080144e0 	.word	0x080144e0
 80118b8:	08014305 	.word	0x08014305
 80118bc:	0801438c 	.word	0x0801438c

080118c0 <__lshift>:
 80118c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118c4:	460c      	mov	r4, r1
 80118c6:	6849      	ldr	r1, [r1, #4]
 80118c8:	6923      	ldr	r3, [r4, #16]
 80118ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80118ce:	68a3      	ldr	r3, [r4, #8]
 80118d0:	4607      	mov	r7, r0
 80118d2:	4691      	mov	r9, r2
 80118d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80118d8:	f108 0601 	add.w	r6, r8, #1
 80118dc:	42b3      	cmp	r3, r6
 80118de:	db0b      	blt.n	80118f8 <__lshift+0x38>
 80118e0:	4638      	mov	r0, r7
 80118e2:	f7ff fddb 	bl	801149c <_Balloc>
 80118e6:	4605      	mov	r5, r0
 80118e8:	b948      	cbnz	r0, 80118fe <__lshift+0x3e>
 80118ea:	4602      	mov	r2, r0
 80118ec:	4b28      	ldr	r3, [pc, #160]	; (8011990 <__lshift+0xd0>)
 80118ee:	4829      	ldr	r0, [pc, #164]	; (8011994 <__lshift+0xd4>)
 80118f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80118f4:	f000 fa1a 	bl	8011d2c <__assert_func>
 80118f8:	3101      	adds	r1, #1
 80118fa:	005b      	lsls	r3, r3, #1
 80118fc:	e7ee      	b.n	80118dc <__lshift+0x1c>
 80118fe:	2300      	movs	r3, #0
 8011900:	f100 0114 	add.w	r1, r0, #20
 8011904:	f100 0210 	add.w	r2, r0, #16
 8011908:	4618      	mov	r0, r3
 801190a:	4553      	cmp	r3, sl
 801190c:	db33      	blt.n	8011976 <__lshift+0xb6>
 801190e:	6920      	ldr	r0, [r4, #16]
 8011910:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011914:	f104 0314 	add.w	r3, r4, #20
 8011918:	f019 091f 	ands.w	r9, r9, #31
 801191c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011920:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011924:	d02b      	beq.n	801197e <__lshift+0xbe>
 8011926:	f1c9 0e20 	rsb	lr, r9, #32
 801192a:	468a      	mov	sl, r1
 801192c:	2200      	movs	r2, #0
 801192e:	6818      	ldr	r0, [r3, #0]
 8011930:	fa00 f009 	lsl.w	r0, r0, r9
 8011934:	4302      	orrs	r2, r0
 8011936:	f84a 2b04 	str.w	r2, [sl], #4
 801193a:	f853 2b04 	ldr.w	r2, [r3], #4
 801193e:	459c      	cmp	ip, r3
 8011940:	fa22 f20e 	lsr.w	r2, r2, lr
 8011944:	d8f3      	bhi.n	801192e <__lshift+0x6e>
 8011946:	ebac 0304 	sub.w	r3, ip, r4
 801194a:	3b15      	subs	r3, #21
 801194c:	f023 0303 	bic.w	r3, r3, #3
 8011950:	3304      	adds	r3, #4
 8011952:	f104 0015 	add.w	r0, r4, #21
 8011956:	4584      	cmp	ip, r0
 8011958:	bf38      	it	cc
 801195a:	2304      	movcc	r3, #4
 801195c:	50ca      	str	r2, [r1, r3]
 801195e:	b10a      	cbz	r2, 8011964 <__lshift+0xa4>
 8011960:	f108 0602 	add.w	r6, r8, #2
 8011964:	3e01      	subs	r6, #1
 8011966:	4638      	mov	r0, r7
 8011968:	612e      	str	r6, [r5, #16]
 801196a:	4621      	mov	r1, r4
 801196c:	f7ff fdd6 	bl	801151c <_Bfree>
 8011970:	4628      	mov	r0, r5
 8011972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011976:	f842 0f04 	str.w	r0, [r2, #4]!
 801197a:	3301      	adds	r3, #1
 801197c:	e7c5      	b.n	801190a <__lshift+0x4a>
 801197e:	3904      	subs	r1, #4
 8011980:	f853 2b04 	ldr.w	r2, [r3], #4
 8011984:	f841 2f04 	str.w	r2, [r1, #4]!
 8011988:	459c      	cmp	ip, r3
 801198a:	d8f9      	bhi.n	8011980 <__lshift+0xc0>
 801198c:	e7ea      	b.n	8011964 <__lshift+0xa4>
 801198e:	bf00      	nop
 8011990:	0801437b 	.word	0x0801437b
 8011994:	0801438c 	.word	0x0801438c

08011998 <__mcmp>:
 8011998:	b530      	push	{r4, r5, lr}
 801199a:	6902      	ldr	r2, [r0, #16]
 801199c:	690c      	ldr	r4, [r1, #16]
 801199e:	1b12      	subs	r2, r2, r4
 80119a0:	d10e      	bne.n	80119c0 <__mcmp+0x28>
 80119a2:	f100 0314 	add.w	r3, r0, #20
 80119a6:	3114      	adds	r1, #20
 80119a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80119ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80119b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80119b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80119b8:	42a5      	cmp	r5, r4
 80119ba:	d003      	beq.n	80119c4 <__mcmp+0x2c>
 80119bc:	d305      	bcc.n	80119ca <__mcmp+0x32>
 80119be:	2201      	movs	r2, #1
 80119c0:	4610      	mov	r0, r2
 80119c2:	bd30      	pop	{r4, r5, pc}
 80119c4:	4283      	cmp	r3, r0
 80119c6:	d3f3      	bcc.n	80119b0 <__mcmp+0x18>
 80119c8:	e7fa      	b.n	80119c0 <__mcmp+0x28>
 80119ca:	f04f 32ff 	mov.w	r2, #4294967295
 80119ce:	e7f7      	b.n	80119c0 <__mcmp+0x28>

080119d0 <__mdiff>:
 80119d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d4:	460c      	mov	r4, r1
 80119d6:	4606      	mov	r6, r0
 80119d8:	4611      	mov	r1, r2
 80119da:	4620      	mov	r0, r4
 80119dc:	4617      	mov	r7, r2
 80119de:	f7ff ffdb 	bl	8011998 <__mcmp>
 80119e2:	1e05      	subs	r5, r0, #0
 80119e4:	d110      	bne.n	8011a08 <__mdiff+0x38>
 80119e6:	4629      	mov	r1, r5
 80119e8:	4630      	mov	r0, r6
 80119ea:	f7ff fd57 	bl	801149c <_Balloc>
 80119ee:	b930      	cbnz	r0, 80119fe <__mdiff+0x2e>
 80119f0:	4b39      	ldr	r3, [pc, #228]	; (8011ad8 <__mdiff+0x108>)
 80119f2:	4602      	mov	r2, r0
 80119f4:	f240 2132 	movw	r1, #562	; 0x232
 80119f8:	4838      	ldr	r0, [pc, #224]	; (8011adc <__mdiff+0x10c>)
 80119fa:	f000 f997 	bl	8011d2c <__assert_func>
 80119fe:	2301      	movs	r3, #1
 8011a00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a08:	bfa4      	itt	ge
 8011a0a:	463b      	movge	r3, r7
 8011a0c:	4627      	movge	r7, r4
 8011a0e:	4630      	mov	r0, r6
 8011a10:	6879      	ldr	r1, [r7, #4]
 8011a12:	bfa6      	itte	ge
 8011a14:	461c      	movge	r4, r3
 8011a16:	2500      	movge	r5, #0
 8011a18:	2501      	movlt	r5, #1
 8011a1a:	f7ff fd3f 	bl	801149c <_Balloc>
 8011a1e:	b920      	cbnz	r0, 8011a2a <__mdiff+0x5a>
 8011a20:	4b2d      	ldr	r3, [pc, #180]	; (8011ad8 <__mdiff+0x108>)
 8011a22:	4602      	mov	r2, r0
 8011a24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011a28:	e7e6      	b.n	80119f8 <__mdiff+0x28>
 8011a2a:	693e      	ldr	r6, [r7, #16]
 8011a2c:	60c5      	str	r5, [r0, #12]
 8011a2e:	6925      	ldr	r5, [r4, #16]
 8011a30:	f107 0114 	add.w	r1, r7, #20
 8011a34:	f104 0914 	add.w	r9, r4, #20
 8011a38:	f100 0e14 	add.w	lr, r0, #20
 8011a3c:	f107 0210 	add.w	r2, r7, #16
 8011a40:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011a44:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011a48:	46f2      	mov	sl, lr
 8011a4a:	2700      	movs	r7, #0
 8011a4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011a50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011a54:	fa1f f883 	uxth.w	r8, r3
 8011a58:	fa17 f78b 	uxtah	r7, r7, fp
 8011a5c:	0c1b      	lsrs	r3, r3, #16
 8011a5e:	eba7 0808 	sub.w	r8, r7, r8
 8011a62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011a66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011a6a:	fa1f f888 	uxth.w	r8, r8
 8011a6e:	141f      	asrs	r7, r3, #16
 8011a70:	454d      	cmp	r5, r9
 8011a72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011a76:	f84a 3b04 	str.w	r3, [sl], #4
 8011a7a:	d8e7      	bhi.n	8011a4c <__mdiff+0x7c>
 8011a7c:	1b2b      	subs	r3, r5, r4
 8011a7e:	3b15      	subs	r3, #21
 8011a80:	f023 0303 	bic.w	r3, r3, #3
 8011a84:	3304      	adds	r3, #4
 8011a86:	3415      	adds	r4, #21
 8011a88:	42a5      	cmp	r5, r4
 8011a8a:	bf38      	it	cc
 8011a8c:	2304      	movcc	r3, #4
 8011a8e:	4419      	add	r1, r3
 8011a90:	4473      	add	r3, lr
 8011a92:	469e      	mov	lr, r3
 8011a94:	460d      	mov	r5, r1
 8011a96:	4565      	cmp	r5, ip
 8011a98:	d30e      	bcc.n	8011ab8 <__mdiff+0xe8>
 8011a9a:	f10c 0203 	add.w	r2, ip, #3
 8011a9e:	1a52      	subs	r2, r2, r1
 8011aa0:	f022 0203 	bic.w	r2, r2, #3
 8011aa4:	3903      	subs	r1, #3
 8011aa6:	458c      	cmp	ip, r1
 8011aa8:	bf38      	it	cc
 8011aaa:	2200      	movcc	r2, #0
 8011aac:	441a      	add	r2, r3
 8011aae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011ab2:	b17b      	cbz	r3, 8011ad4 <__mdiff+0x104>
 8011ab4:	6106      	str	r6, [r0, #16]
 8011ab6:	e7a5      	b.n	8011a04 <__mdiff+0x34>
 8011ab8:	f855 8b04 	ldr.w	r8, [r5], #4
 8011abc:	fa17 f488 	uxtah	r4, r7, r8
 8011ac0:	1422      	asrs	r2, r4, #16
 8011ac2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011ac6:	b2a4      	uxth	r4, r4
 8011ac8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011acc:	f84e 4b04 	str.w	r4, [lr], #4
 8011ad0:	1417      	asrs	r7, r2, #16
 8011ad2:	e7e0      	b.n	8011a96 <__mdiff+0xc6>
 8011ad4:	3e01      	subs	r6, #1
 8011ad6:	e7ea      	b.n	8011aae <__mdiff+0xde>
 8011ad8:	0801437b 	.word	0x0801437b
 8011adc:	0801438c 	.word	0x0801438c

08011ae0 <__d2b>:
 8011ae0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ae4:	4689      	mov	r9, r1
 8011ae6:	2101      	movs	r1, #1
 8011ae8:	ec57 6b10 	vmov	r6, r7, d0
 8011aec:	4690      	mov	r8, r2
 8011aee:	f7ff fcd5 	bl	801149c <_Balloc>
 8011af2:	4604      	mov	r4, r0
 8011af4:	b930      	cbnz	r0, 8011b04 <__d2b+0x24>
 8011af6:	4602      	mov	r2, r0
 8011af8:	4b25      	ldr	r3, [pc, #148]	; (8011b90 <__d2b+0xb0>)
 8011afa:	4826      	ldr	r0, [pc, #152]	; (8011b94 <__d2b+0xb4>)
 8011afc:	f240 310a 	movw	r1, #778	; 0x30a
 8011b00:	f000 f914 	bl	8011d2c <__assert_func>
 8011b04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011b08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011b0c:	bb35      	cbnz	r5, 8011b5c <__d2b+0x7c>
 8011b0e:	2e00      	cmp	r6, #0
 8011b10:	9301      	str	r3, [sp, #4]
 8011b12:	d028      	beq.n	8011b66 <__d2b+0x86>
 8011b14:	4668      	mov	r0, sp
 8011b16:	9600      	str	r6, [sp, #0]
 8011b18:	f7ff fd8c 	bl	8011634 <__lo0bits>
 8011b1c:	9900      	ldr	r1, [sp, #0]
 8011b1e:	b300      	cbz	r0, 8011b62 <__d2b+0x82>
 8011b20:	9a01      	ldr	r2, [sp, #4]
 8011b22:	f1c0 0320 	rsb	r3, r0, #32
 8011b26:	fa02 f303 	lsl.w	r3, r2, r3
 8011b2a:	430b      	orrs	r3, r1
 8011b2c:	40c2      	lsrs	r2, r0
 8011b2e:	6163      	str	r3, [r4, #20]
 8011b30:	9201      	str	r2, [sp, #4]
 8011b32:	9b01      	ldr	r3, [sp, #4]
 8011b34:	61a3      	str	r3, [r4, #24]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	bf14      	ite	ne
 8011b3a:	2202      	movne	r2, #2
 8011b3c:	2201      	moveq	r2, #1
 8011b3e:	6122      	str	r2, [r4, #16]
 8011b40:	b1d5      	cbz	r5, 8011b78 <__d2b+0x98>
 8011b42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011b46:	4405      	add	r5, r0
 8011b48:	f8c9 5000 	str.w	r5, [r9]
 8011b4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011b50:	f8c8 0000 	str.w	r0, [r8]
 8011b54:	4620      	mov	r0, r4
 8011b56:	b003      	add	sp, #12
 8011b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011b60:	e7d5      	b.n	8011b0e <__d2b+0x2e>
 8011b62:	6161      	str	r1, [r4, #20]
 8011b64:	e7e5      	b.n	8011b32 <__d2b+0x52>
 8011b66:	a801      	add	r0, sp, #4
 8011b68:	f7ff fd64 	bl	8011634 <__lo0bits>
 8011b6c:	9b01      	ldr	r3, [sp, #4]
 8011b6e:	6163      	str	r3, [r4, #20]
 8011b70:	2201      	movs	r2, #1
 8011b72:	6122      	str	r2, [r4, #16]
 8011b74:	3020      	adds	r0, #32
 8011b76:	e7e3      	b.n	8011b40 <__d2b+0x60>
 8011b78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011b7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011b80:	f8c9 0000 	str.w	r0, [r9]
 8011b84:	6918      	ldr	r0, [r3, #16]
 8011b86:	f7ff fd35 	bl	80115f4 <__hi0bits>
 8011b8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011b8e:	e7df      	b.n	8011b50 <__d2b+0x70>
 8011b90:	0801437b 	.word	0x0801437b
 8011b94:	0801438c 	.word	0x0801438c

08011b98 <_calloc_r>:
 8011b98:	b513      	push	{r0, r1, r4, lr}
 8011b9a:	434a      	muls	r2, r1
 8011b9c:	4611      	mov	r1, r2
 8011b9e:	9201      	str	r2, [sp, #4]
 8011ba0:	f000 f85a 	bl	8011c58 <_malloc_r>
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	b118      	cbz	r0, 8011bb0 <_calloc_r+0x18>
 8011ba8:	9a01      	ldr	r2, [sp, #4]
 8011baa:	2100      	movs	r1, #0
 8011bac:	f7fe fa10 	bl	800ffd0 <memset>
 8011bb0:	4620      	mov	r0, r4
 8011bb2:	b002      	add	sp, #8
 8011bb4:	bd10      	pop	{r4, pc}
	...

08011bb8 <_free_r>:
 8011bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011bba:	2900      	cmp	r1, #0
 8011bbc:	d048      	beq.n	8011c50 <_free_r+0x98>
 8011bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011bc2:	9001      	str	r0, [sp, #4]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	f1a1 0404 	sub.w	r4, r1, #4
 8011bca:	bfb8      	it	lt
 8011bcc:	18e4      	addlt	r4, r4, r3
 8011bce:	f000 f8ef 	bl	8011db0 <__malloc_lock>
 8011bd2:	4a20      	ldr	r2, [pc, #128]	; (8011c54 <_free_r+0x9c>)
 8011bd4:	9801      	ldr	r0, [sp, #4]
 8011bd6:	6813      	ldr	r3, [r2, #0]
 8011bd8:	4615      	mov	r5, r2
 8011bda:	b933      	cbnz	r3, 8011bea <_free_r+0x32>
 8011bdc:	6063      	str	r3, [r4, #4]
 8011bde:	6014      	str	r4, [r2, #0]
 8011be0:	b003      	add	sp, #12
 8011be2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011be6:	f000 b8e9 	b.w	8011dbc <__malloc_unlock>
 8011bea:	42a3      	cmp	r3, r4
 8011bec:	d90b      	bls.n	8011c06 <_free_r+0x4e>
 8011bee:	6821      	ldr	r1, [r4, #0]
 8011bf0:	1862      	adds	r2, r4, r1
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	bf04      	itt	eq
 8011bf6:	681a      	ldreq	r2, [r3, #0]
 8011bf8:	685b      	ldreq	r3, [r3, #4]
 8011bfa:	6063      	str	r3, [r4, #4]
 8011bfc:	bf04      	itt	eq
 8011bfe:	1852      	addeq	r2, r2, r1
 8011c00:	6022      	streq	r2, [r4, #0]
 8011c02:	602c      	str	r4, [r5, #0]
 8011c04:	e7ec      	b.n	8011be0 <_free_r+0x28>
 8011c06:	461a      	mov	r2, r3
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	b10b      	cbz	r3, 8011c10 <_free_r+0x58>
 8011c0c:	42a3      	cmp	r3, r4
 8011c0e:	d9fa      	bls.n	8011c06 <_free_r+0x4e>
 8011c10:	6811      	ldr	r1, [r2, #0]
 8011c12:	1855      	adds	r5, r2, r1
 8011c14:	42a5      	cmp	r5, r4
 8011c16:	d10b      	bne.n	8011c30 <_free_r+0x78>
 8011c18:	6824      	ldr	r4, [r4, #0]
 8011c1a:	4421      	add	r1, r4
 8011c1c:	1854      	adds	r4, r2, r1
 8011c1e:	42a3      	cmp	r3, r4
 8011c20:	6011      	str	r1, [r2, #0]
 8011c22:	d1dd      	bne.n	8011be0 <_free_r+0x28>
 8011c24:	681c      	ldr	r4, [r3, #0]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	6053      	str	r3, [r2, #4]
 8011c2a:	4421      	add	r1, r4
 8011c2c:	6011      	str	r1, [r2, #0]
 8011c2e:	e7d7      	b.n	8011be0 <_free_r+0x28>
 8011c30:	d902      	bls.n	8011c38 <_free_r+0x80>
 8011c32:	230c      	movs	r3, #12
 8011c34:	6003      	str	r3, [r0, #0]
 8011c36:	e7d3      	b.n	8011be0 <_free_r+0x28>
 8011c38:	6825      	ldr	r5, [r4, #0]
 8011c3a:	1961      	adds	r1, r4, r5
 8011c3c:	428b      	cmp	r3, r1
 8011c3e:	bf04      	itt	eq
 8011c40:	6819      	ldreq	r1, [r3, #0]
 8011c42:	685b      	ldreq	r3, [r3, #4]
 8011c44:	6063      	str	r3, [r4, #4]
 8011c46:	bf04      	itt	eq
 8011c48:	1949      	addeq	r1, r1, r5
 8011c4a:	6021      	streq	r1, [r4, #0]
 8011c4c:	6054      	str	r4, [r2, #4]
 8011c4e:	e7c7      	b.n	8011be0 <_free_r+0x28>
 8011c50:	b003      	add	sp, #12
 8011c52:	bd30      	pop	{r4, r5, pc}
 8011c54:	24000858 	.word	0x24000858

08011c58 <_malloc_r>:
 8011c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c5a:	1ccd      	adds	r5, r1, #3
 8011c5c:	f025 0503 	bic.w	r5, r5, #3
 8011c60:	3508      	adds	r5, #8
 8011c62:	2d0c      	cmp	r5, #12
 8011c64:	bf38      	it	cc
 8011c66:	250c      	movcc	r5, #12
 8011c68:	2d00      	cmp	r5, #0
 8011c6a:	4606      	mov	r6, r0
 8011c6c:	db01      	blt.n	8011c72 <_malloc_r+0x1a>
 8011c6e:	42a9      	cmp	r1, r5
 8011c70:	d903      	bls.n	8011c7a <_malloc_r+0x22>
 8011c72:	230c      	movs	r3, #12
 8011c74:	6033      	str	r3, [r6, #0]
 8011c76:	2000      	movs	r0, #0
 8011c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c7a:	f000 f899 	bl	8011db0 <__malloc_lock>
 8011c7e:	4921      	ldr	r1, [pc, #132]	; (8011d04 <_malloc_r+0xac>)
 8011c80:	680a      	ldr	r2, [r1, #0]
 8011c82:	4614      	mov	r4, r2
 8011c84:	b99c      	cbnz	r4, 8011cae <_malloc_r+0x56>
 8011c86:	4f20      	ldr	r7, [pc, #128]	; (8011d08 <_malloc_r+0xb0>)
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	b923      	cbnz	r3, 8011c96 <_malloc_r+0x3e>
 8011c8c:	4621      	mov	r1, r4
 8011c8e:	4630      	mov	r0, r6
 8011c90:	f000 f83c 	bl	8011d0c <_sbrk_r>
 8011c94:	6038      	str	r0, [r7, #0]
 8011c96:	4629      	mov	r1, r5
 8011c98:	4630      	mov	r0, r6
 8011c9a:	f000 f837 	bl	8011d0c <_sbrk_r>
 8011c9e:	1c43      	adds	r3, r0, #1
 8011ca0:	d123      	bne.n	8011cea <_malloc_r+0x92>
 8011ca2:	230c      	movs	r3, #12
 8011ca4:	6033      	str	r3, [r6, #0]
 8011ca6:	4630      	mov	r0, r6
 8011ca8:	f000 f888 	bl	8011dbc <__malloc_unlock>
 8011cac:	e7e3      	b.n	8011c76 <_malloc_r+0x1e>
 8011cae:	6823      	ldr	r3, [r4, #0]
 8011cb0:	1b5b      	subs	r3, r3, r5
 8011cb2:	d417      	bmi.n	8011ce4 <_malloc_r+0x8c>
 8011cb4:	2b0b      	cmp	r3, #11
 8011cb6:	d903      	bls.n	8011cc0 <_malloc_r+0x68>
 8011cb8:	6023      	str	r3, [r4, #0]
 8011cba:	441c      	add	r4, r3
 8011cbc:	6025      	str	r5, [r4, #0]
 8011cbe:	e004      	b.n	8011cca <_malloc_r+0x72>
 8011cc0:	6863      	ldr	r3, [r4, #4]
 8011cc2:	42a2      	cmp	r2, r4
 8011cc4:	bf0c      	ite	eq
 8011cc6:	600b      	streq	r3, [r1, #0]
 8011cc8:	6053      	strne	r3, [r2, #4]
 8011cca:	4630      	mov	r0, r6
 8011ccc:	f000 f876 	bl	8011dbc <__malloc_unlock>
 8011cd0:	f104 000b 	add.w	r0, r4, #11
 8011cd4:	1d23      	adds	r3, r4, #4
 8011cd6:	f020 0007 	bic.w	r0, r0, #7
 8011cda:	1ac2      	subs	r2, r0, r3
 8011cdc:	d0cc      	beq.n	8011c78 <_malloc_r+0x20>
 8011cde:	1a1b      	subs	r3, r3, r0
 8011ce0:	50a3      	str	r3, [r4, r2]
 8011ce2:	e7c9      	b.n	8011c78 <_malloc_r+0x20>
 8011ce4:	4622      	mov	r2, r4
 8011ce6:	6864      	ldr	r4, [r4, #4]
 8011ce8:	e7cc      	b.n	8011c84 <_malloc_r+0x2c>
 8011cea:	1cc4      	adds	r4, r0, #3
 8011cec:	f024 0403 	bic.w	r4, r4, #3
 8011cf0:	42a0      	cmp	r0, r4
 8011cf2:	d0e3      	beq.n	8011cbc <_malloc_r+0x64>
 8011cf4:	1a21      	subs	r1, r4, r0
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	f000 f808 	bl	8011d0c <_sbrk_r>
 8011cfc:	3001      	adds	r0, #1
 8011cfe:	d1dd      	bne.n	8011cbc <_malloc_r+0x64>
 8011d00:	e7cf      	b.n	8011ca2 <_malloc_r+0x4a>
 8011d02:	bf00      	nop
 8011d04:	24000858 	.word	0x24000858
 8011d08:	2400085c 	.word	0x2400085c

08011d0c <_sbrk_r>:
 8011d0c:	b538      	push	{r3, r4, r5, lr}
 8011d0e:	4d06      	ldr	r5, [pc, #24]	; (8011d28 <_sbrk_r+0x1c>)
 8011d10:	2300      	movs	r3, #0
 8011d12:	4604      	mov	r4, r0
 8011d14:	4608      	mov	r0, r1
 8011d16:	602b      	str	r3, [r5, #0]
 8011d18:	f7f2 fcba 	bl	8004690 <_sbrk>
 8011d1c:	1c43      	adds	r3, r0, #1
 8011d1e:	d102      	bne.n	8011d26 <_sbrk_r+0x1a>
 8011d20:	682b      	ldr	r3, [r5, #0]
 8011d22:	b103      	cbz	r3, 8011d26 <_sbrk_r+0x1a>
 8011d24:	6023      	str	r3, [r4, #0]
 8011d26:	bd38      	pop	{r3, r4, r5, pc}
 8011d28:	2400105c 	.word	0x2400105c

08011d2c <__assert_func>:
 8011d2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d2e:	4614      	mov	r4, r2
 8011d30:	461a      	mov	r2, r3
 8011d32:	4b09      	ldr	r3, [pc, #36]	; (8011d58 <__assert_func+0x2c>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	4605      	mov	r5, r0
 8011d38:	68d8      	ldr	r0, [r3, #12]
 8011d3a:	b14c      	cbz	r4, 8011d50 <__assert_func+0x24>
 8011d3c:	4b07      	ldr	r3, [pc, #28]	; (8011d5c <__assert_func+0x30>)
 8011d3e:	9100      	str	r1, [sp, #0]
 8011d40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d44:	4906      	ldr	r1, [pc, #24]	; (8011d60 <__assert_func+0x34>)
 8011d46:	462b      	mov	r3, r5
 8011d48:	f000 f80e 	bl	8011d68 <fiprintf>
 8011d4c:	f000 fa64 	bl	8012218 <abort>
 8011d50:	4b04      	ldr	r3, [pc, #16]	; (8011d64 <__assert_func+0x38>)
 8011d52:	461c      	mov	r4, r3
 8011d54:	e7f3      	b.n	8011d3e <__assert_func+0x12>
 8011d56:	bf00      	nop
 8011d58:	2400003c 	.word	0x2400003c
 8011d5c:	080144ec 	.word	0x080144ec
 8011d60:	080144f9 	.word	0x080144f9
 8011d64:	08014527 	.word	0x08014527

08011d68 <fiprintf>:
 8011d68:	b40e      	push	{r1, r2, r3}
 8011d6a:	b503      	push	{r0, r1, lr}
 8011d6c:	4601      	mov	r1, r0
 8011d6e:	ab03      	add	r3, sp, #12
 8011d70:	4805      	ldr	r0, [pc, #20]	; (8011d88 <fiprintf+0x20>)
 8011d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d76:	6800      	ldr	r0, [r0, #0]
 8011d78:	9301      	str	r3, [sp, #4]
 8011d7a:	f000 f84f 	bl	8011e1c <_vfiprintf_r>
 8011d7e:	b002      	add	sp, #8
 8011d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d84:	b003      	add	sp, #12
 8011d86:	4770      	bx	lr
 8011d88:	2400003c 	.word	0x2400003c

08011d8c <__ascii_mbtowc>:
 8011d8c:	b082      	sub	sp, #8
 8011d8e:	b901      	cbnz	r1, 8011d92 <__ascii_mbtowc+0x6>
 8011d90:	a901      	add	r1, sp, #4
 8011d92:	b142      	cbz	r2, 8011da6 <__ascii_mbtowc+0x1a>
 8011d94:	b14b      	cbz	r3, 8011daa <__ascii_mbtowc+0x1e>
 8011d96:	7813      	ldrb	r3, [r2, #0]
 8011d98:	600b      	str	r3, [r1, #0]
 8011d9a:	7812      	ldrb	r2, [r2, #0]
 8011d9c:	1e10      	subs	r0, r2, #0
 8011d9e:	bf18      	it	ne
 8011da0:	2001      	movne	r0, #1
 8011da2:	b002      	add	sp, #8
 8011da4:	4770      	bx	lr
 8011da6:	4610      	mov	r0, r2
 8011da8:	e7fb      	b.n	8011da2 <__ascii_mbtowc+0x16>
 8011daa:	f06f 0001 	mvn.w	r0, #1
 8011dae:	e7f8      	b.n	8011da2 <__ascii_mbtowc+0x16>

08011db0 <__malloc_lock>:
 8011db0:	4801      	ldr	r0, [pc, #4]	; (8011db8 <__malloc_lock+0x8>)
 8011db2:	f000 bbf1 	b.w	8012598 <__retarget_lock_acquire_recursive>
 8011db6:	bf00      	nop
 8011db8:	24001064 	.word	0x24001064

08011dbc <__malloc_unlock>:
 8011dbc:	4801      	ldr	r0, [pc, #4]	; (8011dc4 <__malloc_unlock+0x8>)
 8011dbe:	f000 bbec 	b.w	801259a <__retarget_lock_release_recursive>
 8011dc2:	bf00      	nop
 8011dc4:	24001064 	.word	0x24001064

08011dc8 <__sfputc_r>:
 8011dc8:	6893      	ldr	r3, [r2, #8]
 8011dca:	3b01      	subs	r3, #1
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	b410      	push	{r4}
 8011dd0:	6093      	str	r3, [r2, #8]
 8011dd2:	da08      	bge.n	8011de6 <__sfputc_r+0x1e>
 8011dd4:	6994      	ldr	r4, [r2, #24]
 8011dd6:	42a3      	cmp	r3, r4
 8011dd8:	db01      	blt.n	8011dde <__sfputc_r+0x16>
 8011dda:	290a      	cmp	r1, #10
 8011ddc:	d103      	bne.n	8011de6 <__sfputc_r+0x1e>
 8011dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011de2:	f000 b94b 	b.w	801207c <__swbuf_r>
 8011de6:	6813      	ldr	r3, [r2, #0]
 8011de8:	1c58      	adds	r0, r3, #1
 8011dea:	6010      	str	r0, [r2, #0]
 8011dec:	7019      	strb	r1, [r3, #0]
 8011dee:	4608      	mov	r0, r1
 8011df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011df4:	4770      	bx	lr

08011df6 <__sfputs_r>:
 8011df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011df8:	4606      	mov	r6, r0
 8011dfa:	460f      	mov	r7, r1
 8011dfc:	4614      	mov	r4, r2
 8011dfe:	18d5      	adds	r5, r2, r3
 8011e00:	42ac      	cmp	r4, r5
 8011e02:	d101      	bne.n	8011e08 <__sfputs_r+0x12>
 8011e04:	2000      	movs	r0, #0
 8011e06:	e007      	b.n	8011e18 <__sfputs_r+0x22>
 8011e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e0c:	463a      	mov	r2, r7
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f7ff ffda 	bl	8011dc8 <__sfputc_r>
 8011e14:	1c43      	adds	r3, r0, #1
 8011e16:	d1f3      	bne.n	8011e00 <__sfputs_r+0xa>
 8011e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011e1c <_vfiprintf_r>:
 8011e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e20:	460d      	mov	r5, r1
 8011e22:	b09d      	sub	sp, #116	; 0x74
 8011e24:	4614      	mov	r4, r2
 8011e26:	4698      	mov	r8, r3
 8011e28:	4606      	mov	r6, r0
 8011e2a:	b118      	cbz	r0, 8011e34 <_vfiprintf_r+0x18>
 8011e2c:	6983      	ldr	r3, [r0, #24]
 8011e2e:	b90b      	cbnz	r3, 8011e34 <_vfiprintf_r+0x18>
 8011e30:	f000 fb14 	bl	801245c <__sinit>
 8011e34:	4b89      	ldr	r3, [pc, #548]	; (801205c <_vfiprintf_r+0x240>)
 8011e36:	429d      	cmp	r5, r3
 8011e38:	d11b      	bne.n	8011e72 <_vfiprintf_r+0x56>
 8011e3a:	6875      	ldr	r5, [r6, #4]
 8011e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e3e:	07d9      	lsls	r1, r3, #31
 8011e40:	d405      	bmi.n	8011e4e <_vfiprintf_r+0x32>
 8011e42:	89ab      	ldrh	r3, [r5, #12]
 8011e44:	059a      	lsls	r2, r3, #22
 8011e46:	d402      	bmi.n	8011e4e <_vfiprintf_r+0x32>
 8011e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e4a:	f000 fba5 	bl	8012598 <__retarget_lock_acquire_recursive>
 8011e4e:	89ab      	ldrh	r3, [r5, #12]
 8011e50:	071b      	lsls	r3, r3, #28
 8011e52:	d501      	bpl.n	8011e58 <_vfiprintf_r+0x3c>
 8011e54:	692b      	ldr	r3, [r5, #16]
 8011e56:	b9eb      	cbnz	r3, 8011e94 <_vfiprintf_r+0x78>
 8011e58:	4629      	mov	r1, r5
 8011e5a:	4630      	mov	r0, r6
 8011e5c:	f000 f96e 	bl	801213c <__swsetup_r>
 8011e60:	b1c0      	cbz	r0, 8011e94 <_vfiprintf_r+0x78>
 8011e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e64:	07dc      	lsls	r4, r3, #31
 8011e66:	d50e      	bpl.n	8011e86 <_vfiprintf_r+0x6a>
 8011e68:	f04f 30ff 	mov.w	r0, #4294967295
 8011e6c:	b01d      	add	sp, #116	; 0x74
 8011e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e72:	4b7b      	ldr	r3, [pc, #492]	; (8012060 <_vfiprintf_r+0x244>)
 8011e74:	429d      	cmp	r5, r3
 8011e76:	d101      	bne.n	8011e7c <_vfiprintf_r+0x60>
 8011e78:	68b5      	ldr	r5, [r6, #8]
 8011e7a:	e7df      	b.n	8011e3c <_vfiprintf_r+0x20>
 8011e7c:	4b79      	ldr	r3, [pc, #484]	; (8012064 <_vfiprintf_r+0x248>)
 8011e7e:	429d      	cmp	r5, r3
 8011e80:	bf08      	it	eq
 8011e82:	68f5      	ldreq	r5, [r6, #12]
 8011e84:	e7da      	b.n	8011e3c <_vfiprintf_r+0x20>
 8011e86:	89ab      	ldrh	r3, [r5, #12]
 8011e88:	0598      	lsls	r0, r3, #22
 8011e8a:	d4ed      	bmi.n	8011e68 <_vfiprintf_r+0x4c>
 8011e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e8e:	f000 fb84 	bl	801259a <__retarget_lock_release_recursive>
 8011e92:	e7e9      	b.n	8011e68 <_vfiprintf_r+0x4c>
 8011e94:	2300      	movs	r3, #0
 8011e96:	9309      	str	r3, [sp, #36]	; 0x24
 8011e98:	2320      	movs	r3, #32
 8011e9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ea2:	2330      	movs	r3, #48	; 0x30
 8011ea4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012068 <_vfiprintf_r+0x24c>
 8011ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011eac:	f04f 0901 	mov.w	r9, #1
 8011eb0:	4623      	mov	r3, r4
 8011eb2:	469a      	mov	sl, r3
 8011eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eb8:	b10a      	cbz	r2, 8011ebe <_vfiprintf_r+0xa2>
 8011eba:	2a25      	cmp	r2, #37	; 0x25
 8011ebc:	d1f9      	bne.n	8011eb2 <_vfiprintf_r+0x96>
 8011ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8011ec2:	d00b      	beq.n	8011edc <_vfiprintf_r+0xc0>
 8011ec4:	465b      	mov	r3, fp
 8011ec6:	4622      	mov	r2, r4
 8011ec8:	4629      	mov	r1, r5
 8011eca:	4630      	mov	r0, r6
 8011ecc:	f7ff ff93 	bl	8011df6 <__sfputs_r>
 8011ed0:	3001      	adds	r0, #1
 8011ed2:	f000 80aa 	beq.w	801202a <_vfiprintf_r+0x20e>
 8011ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ed8:	445a      	add	r2, fp
 8011eda:	9209      	str	r2, [sp, #36]	; 0x24
 8011edc:	f89a 3000 	ldrb.w	r3, [sl]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	f000 80a2 	beq.w	801202a <_vfiprintf_r+0x20e>
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8011eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ef0:	f10a 0a01 	add.w	sl, sl, #1
 8011ef4:	9304      	str	r3, [sp, #16]
 8011ef6:	9307      	str	r3, [sp, #28]
 8011ef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011efc:	931a      	str	r3, [sp, #104]	; 0x68
 8011efe:	4654      	mov	r4, sl
 8011f00:	2205      	movs	r2, #5
 8011f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f06:	4858      	ldr	r0, [pc, #352]	; (8012068 <_vfiprintf_r+0x24c>)
 8011f08:	f7ee f9f2 	bl	80002f0 <memchr>
 8011f0c:	9a04      	ldr	r2, [sp, #16]
 8011f0e:	b9d8      	cbnz	r0, 8011f48 <_vfiprintf_r+0x12c>
 8011f10:	06d1      	lsls	r1, r2, #27
 8011f12:	bf44      	itt	mi
 8011f14:	2320      	movmi	r3, #32
 8011f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f1a:	0713      	lsls	r3, r2, #28
 8011f1c:	bf44      	itt	mi
 8011f1e:	232b      	movmi	r3, #43	; 0x2b
 8011f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f24:	f89a 3000 	ldrb.w	r3, [sl]
 8011f28:	2b2a      	cmp	r3, #42	; 0x2a
 8011f2a:	d015      	beq.n	8011f58 <_vfiprintf_r+0x13c>
 8011f2c:	9a07      	ldr	r2, [sp, #28]
 8011f2e:	4654      	mov	r4, sl
 8011f30:	2000      	movs	r0, #0
 8011f32:	f04f 0c0a 	mov.w	ip, #10
 8011f36:	4621      	mov	r1, r4
 8011f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f3c:	3b30      	subs	r3, #48	; 0x30
 8011f3e:	2b09      	cmp	r3, #9
 8011f40:	d94e      	bls.n	8011fe0 <_vfiprintf_r+0x1c4>
 8011f42:	b1b0      	cbz	r0, 8011f72 <_vfiprintf_r+0x156>
 8011f44:	9207      	str	r2, [sp, #28]
 8011f46:	e014      	b.n	8011f72 <_vfiprintf_r+0x156>
 8011f48:	eba0 0308 	sub.w	r3, r0, r8
 8011f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8011f50:	4313      	orrs	r3, r2
 8011f52:	9304      	str	r3, [sp, #16]
 8011f54:	46a2      	mov	sl, r4
 8011f56:	e7d2      	b.n	8011efe <_vfiprintf_r+0xe2>
 8011f58:	9b03      	ldr	r3, [sp, #12]
 8011f5a:	1d19      	adds	r1, r3, #4
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	9103      	str	r1, [sp, #12]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	bfbb      	ittet	lt
 8011f64:	425b      	neglt	r3, r3
 8011f66:	f042 0202 	orrlt.w	r2, r2, #2
 8011f6a:	9307      	strge	r3, [sp, #28]
 8011f6c:	9307      	strlt	r3, [sp, #28]
 8011f6e:	bfb8      	it	lt
 8011f70:	9204      	strlt	r2, [sp, #16]
 8011f72:	7823      	ldrb	r3, [r4, #0]
 8011f74:	2b2e      	cmp	r3, #46	; 0x2e
 8011f76:	d10c      	bne.n	8011f92 <_vfiprintf_r+0x176>
 8011f78:	7863      	ldrb	r3, [r4, #1]
 8011f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8011f7c:	d135      	bne.n	8011fea <_vfiprintf_r+0x1ce>
 8011f7e:	9b03      	ldr	r3, [sp, #12]
 8011f80:	1d1a      	adds	r2, r3, #4
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	9203      	str	r2, [sp, #12]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	bfb8      	it	lt
 8011f8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f8e:	3402      	adds	r4, #2
 8011f90:	9305      	str	r3, [sp, #20]
 8011f92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012078 <_vfiprintf_r+0x25c>
 8011f96:	7821      	ldrb	r1, [r4, #0]
 8011f98:	2203      	movs	r2, #3
 8011f9a:	4650      	mov	r0, sl
 8011f9c:	f7ee f9a8 	bl	80002f0 <memchr>
 8011fa0:	b140      	cbz	r0, 8011fb4 <_vfiprintf_r+0x198>
 8011fa2:	2340      	movs	r3, #64	; 0x40
 8011fa4:	eba0 000a 	sub.w	r0, r0, sl
 8011fa8:	fa03 f000 	lsl.w	r0, r3, r0
 8011fac:	9b04      	ldr	r3, [sp, #16]
 8011fae:	4303      	orrs	r3, r0
 8011fb0:	3401      	adds	r4, #1
 8011fb2:	9304      	str	r3, [sp, #16]
 8011fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fb8:	482c      	ldr	r0, [pc, #176]	; (801206c <_vfiprintf_r+0x250>)
 8011fba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fbe:	2206      	movs	r2, #6
 8011fc0:	f7ee f996 	bl	80002f0 <memchr>
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	d03f      	beq.n	8012048 <_vfiprintf_r+0x22c>
 8011fc8:	4b29      	ldr	r3, [pc, #164]	; (8012070 <_vfiprintf_r+0x254>)
 8011fca:	bb1b      	cbnz	r3, 8012014 <_vfiprintf_r+0x1f8>
 8011fcc:	9b03      	ldr	r3, [sp, #12]
 8011fce:	3307      	adds	r3, #7
 8011fd0:	f023 0307 	bic.w	r3, r3, #7
 8011fd4:	3308      	adds	r3, #8
 8011fd6:	9303      	str	r3, [sp, #12]
 8011fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fda:	443b      	add	r3, r7
 8011fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8011fde:	e767      	b.n	8011eb0 <_vfiprintf_r+0x94>
 8011fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fe4:	460c      	mov	r4, r1
 8011fe6:	2001      	movs	r0, #1
 8011fe8:	e7a5      	b.n	8011f36 <_vfiprintf_r+0x11a>
 8011fea:	2300      	movs	r3, #0
 8011fec:	3401      	adds	r4, #1
 8011fee:	9305      	str	r3, [sp, #20]
 8011ff0:	4619      	mov	r1, r3
 8011ff2:	f04f 0c0a 	mov.w	ip, #10
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ffc:	3a30      	subs	r2, #48	; 0x30
 8011ffe:	2a09      	cmp	r2, #9
 8012000:	d903      	bls.n	801200a <_vfiprintf_r+0x1ee>
 8012002:	2b00      	cmp	r3, #0
 8012004:	d0c5      	beq.n	8011f92 <_vfiprintf_r+0x176>
 8012006:	9105      	str	r1, [sp, #20]
 8012008:	e7c3      	b.n	8011f92 <_vfiprintf_r+0x176>
 801200a:	fb0c 2101 	mla	r1, ip, r1, r2
 801200e:	4604      	mov	r4, r0
 8012010:	2301      	movs	r3, #1
 8012012:	e7f0      	b.n	8011ff6 <_vfiprintf_r+0x1da>
 8012014:	ab03      	add	r3, sp, #12
 8012016:	9300      	str	r3, [sp, #0]
 8012018:	462a      	mov	r2, r5
 801201a:	4b16      	ldr	r3, [pc, #88]	; (8012074 <_vfiprintf_r+0x258>)
 801201c:	a904      	add	r1, sp, #16
 801201e:	4630      	mov	r0, r6
 8012020:	f7fe f86e 	bl	8010100 <_printf_float>
 8012024:	4607      	mov	r7, r0
 8012026:	1c78      	adds	r0, r7, #1
 8012028:	d1d6      	bne.n	8011fd8 <_vfiprintf_r+0x1bc>
 801202a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801202c:	07d9      	lsls	r1, r3, #31
 801202e:	d405      	bmi.n	801203c <_vfiprintf_r+0x220>
 8012030:	89ab      	ldrh	r3, [r5, #12]
 8012032:	059a      	lsls	r2, r3, #22
 8012034:	d402      	bmi.n	801203c <_vfiprintf_r+0x220>
 8012036:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012038:	f000 faaf 	bl	801259a <__retarget_lock_release_recursive>
 801203c:	89ab      	ldrh	r3, [r5, #12]
 801203e:	065b      	lsls	r3, r3, #25
 8012040:	f53f af12 	bmi.w	8011e68 <_vfiprintf_r+0x4c>
 8012044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012046:	e711      	b.n	8011e6c <_vfiprintf_r+0x50>
 8012048:	ab03      	add	r3, sp, #12
 801204a:	9300      	str	r3, [sp, #0]
 801204c:	462a      	mov	r2, r5
 801204e:	4b09      	ldr	r3, [pc, #36]	; (8012074 <_vfiprintf_r+0x258>)
 8012050:	a904      	add	r1, sp, #16
 8012052:	4630      	mov	r0, r6
 8012054:	f7fe fae0 	bl	8010618 <_printf_i>
 8012058:	e7e4      	b.n	8012024 <_vfiprintf_r+0x208>
 801205a:	bf00      	nop
 801205c:	08014664 	.word	0x08014664
 8012060:	08014684 	.word	0x08014684
 8012064:	08014644 	.word	0x08014644
 8012068:	08014532 	.word	0x08014532
 801206c:	0801453c 	.word	0x0801453c
 8012070:	08010101 	.word	0x08010101
 8012074:	08011df7 	.word	0x08011df7
 8012078:	08014538 	.word	0x08014538

0801207c <__swbuf_r>:
 801207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801207e:	460e      	mov	r6, r1
 8012080:	4614      	mov	r4, r2
 8012082:	4605      	mov	r5, r0
 8012084:	b118      	cbz	r0, 801208e <__swbuf_r+0x12>
 8012086:	6983      	ldr	r3, [r0, #24]
 8012088:	b90b      	cbnz	r3, 801208e <__swbuf_r+0x12>
 801208a:	f000 f9e7 	bl	801245c <__sinit>
 801208e:	4b21      	ldr	r3, [pc, #132]	; (8012114 <__swbuf_r+0x98>)
 8012090:	429c      	cmp	r4, r3
 8012092:	d12b      	bne.n	80120ec <__swbuf_r+0x70>
 8012094:	686c      	ldr	r4, [r5, #4]
 8012096:	69a3      	ldr	r3, [r4, #24]
 8012098:	60a3      	str	r3, [r4, #8]
 801209a:	89a3      	ldrh	r3, [r4, #12]
 801209c:	071a      	lsls	r2, r3, #28
 801209e:	d52f      	bpl.n	8012100 <__swbuf_r+0x84>
 80120a0:	6923      	ldr	r3, [r4, #16]
 80120a2:	b36b      	cbz	r3, 8012100 <__swbuf_r+0x84>
 80120a4:	6923      	ldr	r3, [r4, #16]
 80120a6:	6820      	ldr	r0, [r4, #0]
 80120a8:	1ac0      	subs	r0, r0, r3
 80120aa:	6963      	ldr	r3, [r4, #20]
 80120ac:	b2f6      	uxtb	r6, r6
 80120ae:	4283      	cmp	r3, r0
 80120b0:	4637      	mov	r7, r6
 80120b2:	dc04      	bgt.n	80120be <__swbuf_r+0x42>
 80120b4:	4621      	mov	r1, r4
 80120b6:	4628      	mov	r0, r5
 80120b8:	f000 f93c 	bl	8012334 <_fflush_r>
 80120bc:	bb30      	cbnz	r0, 801210c <__swbuf_r+0x90>
 80120be:	68a3      	ldr	r3, [r4, #8]
 80120c0:	3b01      	subs	r3, #1
 80120c2:	60a3      	str	r3, [r4, #8]
 80120c4:	6823      	ldr	r3, [r4, #0]
 80120c6:	1c5a      	adds	r2, r3, #1
 80120c8:	6022      	str	r2, [r4, #0]
 80120ca:	701e      	strb	r6, [r3, #0]
 80120cc:	6963      	ldr	r3, [r4, #20]
 80120ce:	3001      	adds	r0, #1
 80120d0:	4283      	cmp	r3, r0
 80120d2:	d004      	beq.n	80120de <__swbuf_r+0x62>
 80120d4:	89a3      	ldrh	r3, [r4, #12]
 80120d6:	07db      	lsls	r3, r3, #31
 80120d8:	d506      	bpl.n	80120e8 <__swbuf_r+0x6c>
 80120da:	2e0a      	cmp	r6, #10
 80120dc:	d104      	bne.n	80120e8 <__swbuf_r+0x6c>
 80120de:	4621      	mov	r1, r4
 80120e0:	4628      	mov	r0, r5
 80120e2:	f000 f927 	bl	8012334 <_fflush_r>
 80120e6:	b988      	cbnz	r0, 801210c <__swbuf_r+0x90>
 80120e8:	4638      	mov	r0, r7
 80120ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120ec:	4b0a      	ldr	r3, [pc, #40]	; (8012118 <__swbuf_r+0x9c>)
 80120ee:	429c      	cmp	r4, r3
 80120f0:	d101      	bne.n	80120f6 <__swbuf_r+0x7a>
 80120f2:	68ac      	ldr	r4, [r5, #8]
 80120f4:	e7cf      	b.n	8012096 <__swbuf_r+0x1a>
 80120f6:	4b09      	ldr	r3, [pc, #36]	; (801211c <__swbuf_r+0xa0>)
 80120f8:	429c      	cmp	r4, r3
 80120fa:	bf08      	it	eq
 80120fc:	68ec      	ldreq	r4, [r5, #12]
 80120fe:	e7ca      	b.n	8012096 <__swbuf_r+0x1a>
 8012100:	4621      	mov	r1, r4
 8012102:	4628      	mov	r0, r5
 8012104:	f000 f81a 	bl	801213c <__swsetup_r>
 8012108:	2800      	cmp	r0, #0
 801210a:	d0cb      	beq.n	80120a4 <__swbuf_r+0x28>
 801210c:	f04f 37ff 	mov.w	r7, #4294967295
 8012110:	e7ea      	b.n	80120e8 <__swbuf_r+0x6c>
 8012112:	bf00      	nop
 8012114:	08014664 	.word	0x08014664
 8012118:	08014684 	.word	0x08014684
 801211c:	08014644 	.word	0x08014644

08012120 <__ascii_wctomb>:
 8012120:	b149      	cbz	r1, 8012136 <__ascii_wctomb+0x16>
 8012122:	2aff      	cmp	r2, #255	; 0xff
 8012124:	bf85      	ittet	hi
 8012126:	238a      	movhi	r3, #138	; 0x8a
 8012128:	6003      	strhi	r3, [r0, #0]
 801212a:	700a      	strbls	r2, [r1, #0]
 801212c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012130:	bf98      	it	ls
 8012132:	2001      	movls	r0, #1
 8012134:	4770      	bx	lr
 8012136:	4608      	mov	r0, r1
 8012138:	4770      	bx	lr
	...

0801213c <__swsetup_r>:
 801213c:	4b32      	ldr	r3, [pc, #200]	; (8012208 <__swsetup_r+0xcc>)
 801213e:	b570      	push	{r4, r5, r6, lr}
 8012140:	681d      	ldr	r5, [r3, #0]
 8012142:	4606      	mov	r6, r0
 8012144:	460c      	mov	r4, r1
 8012146:	b125      	cbz	r5, 8012152 <__swsetup_r+0x16>
 8012148:	69ab      	ldr	r3, [r5, #24]
 801214a:	b913      	cbnz	r3, 8012152 <__swsetup_r+0x16>
 801214c:	4628      	mov	r0, r5
 801214e:	f000 f985 	bl	801245c <__sinit>
 8012152:	4b2e      	ldr	r3, [pc, #184]	; (801220c <__swsetup_r+0xd0>)
 8012154:	429c      	cmp	r4, r3
 8012156:	d10f      	bne.n	8012178 <__swsetup_r+0x3c>
 8012158:	686c      	ldr	r4, [r5, #4]
 801215a:	89a3      	ldrh	r3, [r4, #12]
 801215c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012160:	0719      	lsls	r1, r3, #28
 8012162:	d42c      	bmi.n	80121be <__swsetup_r+0x82>
 8012164:	06dd      	lsls	r5, r3, #27
 8012166:	d411      	bmi.n	801218c <__swsetup_r+0x50>
 8012168:	2309      	movs	r3, #9
 801216a:	6033      	str	r3, [r6, #0]
 801216c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012170:	81a3      	strh	r3, [r4, #12]
 8012172:	f04f 30ff 	mov.w	r0, #4294967295
 8012176:	e03e      	b.n	80121f6 <__swsetup_r+0xba>
 8012178:	4b25      	ldr	r3, [pc, #148]	; (8012210 <__swsetup_r+0xd4>)
 801217a:	429c      	cmp	r4, r3
 801217c:	d101      	bne.n	8012182 <__swsetup_r+0x46>
 801217e:	68ac      	ldr	r4, [r5, #8]
 8012180:	e7eb      	b.n	801215a <__swsetup_r+0x1e>
 8012182:	4b24      	ldr	r3, [pc, #144]	; (8012214 <__swsetup_r+0xd8>)
 8012184:	429c      	cmp	r4, r3
 8012186:	bf08      	it	eq
 8012188:	68ec      	ldreq	r4, [r5, #12]
 801218a:	e7e6      	b.n	801215a <__swsetup_r+0x1e>
 801218c:	0758      	lsls	r0, r3, #29
 801218e:	d512      	bpl.n	80121b6 <__swsetup_r+0x7a>
 8012190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012192:	b141      	cbz	r1, 80121a6 <__swsetup_r+0x6a>
 8012194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012198:	4299      	cmp	r1, r3
 801219a:	d002      	beq.n	80121a2 <__swsetup_r+0x66>
 801219c:	4630      	mov	r0, r6
 801219e:	f7ff fd0b 	bl	8011bb8 <_free_r>
 80121a2:	2300      	movs	r3, #0
 80121a4:	6363      	str	r3, [r4, #52]	; 0x34
 80121a6:	89a3      	ldrh	r3, [r4, #12]
 80121a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80121ac:	81a3      	strh	r3, [r4, #12]
 80121ae:	2300      	movs	r3, #0
 80121b0:	6063      	str	r3, [r4, #4]
 80121b2:	6923      	ldr	r3, [r4, #16]
 80121b4:	6023      	str	r3, [r4, #0]
 80121b6:	89a3      	ldrh	r3, [r4, #12]
 80121b8:	f043 0308 	orr.w	r3, r3, #8
 80121bc:	81a3      	strh	r3, [r4, #12]
 80121be:	6923      	ldr	r3, [r4, #16]
 80121c0:	b94b      	cbnz	r3, 80121d6 <__swsetup_r+0x9a>
 80121c2:	89a3      	ldrh	r3, [r4, #12]
 80121c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80121c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80121cc:	d003      	beq.n	80121d6 <__swsetup_r+0x9a>
 80121ce:	4621      	mov	r1, r4
 80121d0:	4630      	mov	r0, r6
 80121d2:	f000 fa07 	bl	80125e4 <__smakebuf_r>
 80121d6:	89a0      	ldrh	r0, [r4, #12]
 80121d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80121dc:	f010 0301 	ands.w	r3, r0, #1
 80121e0:	d00a      	beq.n	80121f8 <__swsetup_r+0xbc>
 80121e2:	2300      	movs	r3, #0
 80121e4:	60a3      	str	r3, [r4, #8]
 80121e6:	6963      	ldr	r3, [r4, #20]
 80121e8:	425b      	negs	r3, r3
 80121ea:	61a3      	str	r3, [r4, #24]
 80121ec:	6923      	ldr	r3, [r4, #16]
 80121ee:	b943      	cbnz	r3, 8012202 <__swsetup_r+0xc6>
 80121f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80121f4:	d1ba      	bne.n	801216c <__swsetup_r+0x30>
 80121f6:	bd70      	pop	{r4, r5, r6, pc}
 80121f8:	0781      	lsls	r1, r0, #30
 80121fa:	bf58      	it	pl
 80121fc:	6963      	ldrpl	r3, [r4, #20]
 80121fe:	60a3      	str	r3, [r4, #8]
 8012200:	e7f4      	b.n	80121ec <__swsetup_r+0xb0>
 8012202:	2000      	movs	r0, #0
 8012204:	e7f7      	b.n	80121f6 <__swsetup_r+0xba>
 8012206:	bf00      	nop
 8012208:	2400003c 	.word	0x2400003c
 801220c:	08014664 	.word	0x08014664
 8012210:	08014684 	.word	0x08014684
 8012214:	08014644 	.word	0x08014644

08012218 <abort>:
 8012218:	b508      	push	{r3, lr}
 801221a:	2006      	movs	r0, #6
 801221c:	f000 fa4a 	bl	80126b4 <raise>
 8012220:	2001      	movs	r0, #1
 8012222:	f7f2 f9bd 	bl	80045a0 <_exit>
	...

08012228 <__sflush_r>:
 8012228:	898a      	ldrh	r2, [r1, #12]
 801222a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801222e:	4605      	mov	r5, r0
 8012230:	0710      	lsls	r0, r2, #28
 8012232:	460c      	mov	r4, r1
 8012234:	d458      	bmi.n	80122e8 <__sflush_r+0xc0>
 8012236:	684b      	ldr	r3, [r1, #4]
 8012238:	2b00      	cmp	r3, #0
 801223a:	dc05      	bgt.n	8012248 <__sflush_r+0x20>
 801223c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801223e:	2b00      	cmp	r3, #0
 8012240:	dc02      	bgt.n	8012248 <__sflush_r+0x20>
 8012242:	2000      	movs	r0, #0
 8012244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801224a:	2e00      	cmp	r6, #0
 801224c:	d0f9      	beq.n	8012242 <__sflush_r+0x1a>
 801224e:	2300      	movs	r3, #0
 8012250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012254:	682f      	ldr	r7, [r5, #0]
 8012256:	602b      	str	r3, [r5, #0]
 8012258:	d032      	beq.n	80122c0 <__sflush_r+0x98>
 801225a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801225c:	89a3      	ldrh	r3, [r4, #12]
 801225e:	075a      	lsls	r2, r3, #29
 8012260:	d505      	bpl.n	801226e <__sflush_r+0x46>
 8012262:	6863      	ldr	r3, [r4, #4]
 8012264:	1ac0      	subs	r0, r0, r3
 8012266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012268:	b10b      	cbz	r3, 801226e <__sflush_r+0x46>
 801226a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801226c:	1ac0      	subs	r0, r0, r3
 801226e:	2300      	movs	r3, #0
 8012270:	4602      	mov	r2, r0
 8012272:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012274:	6a21      	ldr	r1, [r4, #32]
 8012276:	4628      	mov	r0, r5
 8012278:	47b0      	blx	r6
 801227a:	1c43      	adds	r3, r0, #1
 801227c:	89a3      	ldrh	r3, [r4, #12]
 801227e:	d106      	bne.n	801228e <__sflush_r+0x66>
 8012280:	6829      	ldr	r1, [r5, #0]
 8012282:	291d      	cmp	r1, #29
 8012284:	d82c      	bhi.n	80122e0 <__sflush_r+0xb8>
 8012286:	4a2a      	ldr	r2, [pc, #168]	; (8012330 <__sflush_r+0x108>)
 8012288:	40ca      	lsrs	r2, r1
 801228a:	07d6      	lsls	r6, r2, #31
 801228c:	d528      	bpl.n	80122e0 <__sflush_r+0xb8>
 801228e:	2200      	movs	r2, #0
 8012290:	6062      	str	r2, [r4, #4]
 8012292:	04d9      	lsls	r1, r3, #19
 8012294:	6922      	ldr	r2, [r4, #16]
 8012296:	6022      	str	r2, [r4, #0]
 8012298:	d504      	bpl.n	80122a4 <__sflush_r+0x7c>
 801229a:	1c42      	adds	r2, r0, #1
 801229c:	d101      	bne.n	80122a2 <__sflush_r+0x7a>
 801229e:	682b      	ldr	r3, [r5, #0]
 80122a0:	b903      	cbnz	r3, 80122a4 <__sflush_r+0x7c>
 80122a2:	6560      	str	r0, [r4, #84]	; 0x54
 80122a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122a6:	602f      	str	r7, [r5, #0]
 80122a8:	2900      	cmp	r1, #0
 80122aa:	d0ca      	beq.n	8012242 <__sflush_r+0x1a>
 80122ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122b0:	4299      	cmp	r1, r3
 80122b2:	d002      	beq.n	80122ba <__sflush_r+0x92>
 80122b4:	4628      	mov	r0, r5
 80122b6:	f7ff fc7f 	bl	8011bb8 <_free_r>
 80122ba:	2000      	movs	r0, #0
 80122bc:	6360      	str	r0, [r4, #52]	; 0x34
 80122be:	e7c1      	b.n	8012244 <__sflush_r+0x1c>
 80122c0:	6a21      	ldr	r1, [r4, #32]
 80122c2:	2301      	movs	r3, #1
 80122c4:	4628      	mov	r0, r5
 80122c6:	47b0      	blx	r6
 80122c8:	1c41      	adds	r1, r0, #1
 80122ca:	d1c7      	bne.n	801225c <__sflush_r+0x34>
 80122cc:	682b      	ldr	r3, [r5, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d0c4      	beq.n	801225c <__sflush_r+0x34>
 80122d2:	2b1d      	cmp	r3, #29
 80122d4:	d001      	beq.n	80122da <__sflush_r+0xb2>
 80122d6:	2b16      	cmp	r3, #22
 80122d8:	d101      	bne.n	80122de <__sflush_r+0xb6>
 80122da:	602f      	str	r7, [r5, #0]
 80122dc:	e7b1      	b.n	8012242 <__sflush_r+0x1a>
 80122de:	89a3      	ldrh	r3, [r4, #12]
 80122e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122e4:	81a3      	strh	r3, [r4, #12]
 80122e6:	e7ad      	b.n	8012244 <__sflush_r+0x1c>
 80122e8:	690f      	ldr	r7, [r1, #16]
 80122ea:	2f00      	cmp	r7, #0
 80122ec:	d0a9      	beq.n	8012242 <__sflush_r+0x1a>
 80122ee:	0793      	lsls	r3, r2, #30
 80122f0:	680e      	ldr	r6, [r1, #0]
 80122f2:	bf08      	it	eq
 80122f4:	694b      	ldreq	r3, [r1, #20]
 80122f6:	600f      	str	r7, [r1, #0]
 80122f8:	bf18      	it	ne
 80122fa:	2300      	movne	r3, #0
 80122fc:	eba6 0807 	sub.w	r8, r6, r7
 8012300:	608b      	str	r3, [r1, #8]
 8012302:	f1b8 0f00 	cmp.w	r8, #0
 8012306:	dd9c      	ble.n	8012242 <__sflush_r+0x1a>
 8012308:	6a21      	ldr	r1, [r4, #32]
 801230a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801230c:	4643      	mov	r3, r8
 801230e:	463a      	mov	r2, r7
 8012310:	4628      	mov	r0, r5
 8012312:	47b0      	blx	r6
 8012314:	2800      	cmp	r0, #0
 8012316:	dc06      	bgt.n	8012326 <__sflush_r+0xfe>
 8012318:	89a3      	ldrh	r3, [r4, #12]
 801231a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801231e:	81a3      	strh	r3, [r4, #12]
 8012320:	f04f 30ff 	mov.w	r0, #4294967295
 8012324:	e78e      	b.n	8012244 <__sflush_r+0x1c>
 8012326:	4407      	add	r7, r0
 8012328:	eba8 0800 	sub.w	r8, r8, r0
 801232c:	e7e9      	b.n	8012302 <__sflush_r+0xda>
 801232e:	bf00      	nop
 8012330:	20400001 	.word	0x20400001

08012334 <_fflush_r>:
 8012334:	b538      	push	{r3, r4, r5, lr}
 8012336:	690b      	ldr	r3, [r1, #16]
 8012338:	4605      	mov	r5, r0
 801233a:	460c      	mov	r4, r1
 801233c:	b913      	cbnz	r3, 8012344 <_fflush_r+0x10>
 801233e:	2500      	movs	r5, #0
 8012340:	4628      	mov	r0, r5
 8012342:	bd38      	pop	{r3, r4, r5, pc}
 8012344:	b118      	cbz	r0, 801234e <_fflush_r+0x1a>
 8012346:	6983      	ldr	r3, [r0, #24]
 8012348:	b90b      	cbnz	r3, 801234e <_fflush_r+0x1a>
 801234a:	f000 f887 	bl	801245c <__sinit>
 801234e:	4b14      	ldr	r3, [pc, #80]	; (80123a0 <_fflush_r+0x6c>)
 8012350:	429c      	cmp	r4, r3
 8012352:	d11b      	bne.n	801238c <_fflush_r+0x58>
 8012354:	686c      	ldr	r4, [r5, #4]
 8012356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d0ef      	beq.n	801233e <_fflush_r+0xa>
 801235e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012360:	07d0      	lsls	r0, r2, #31
 8012362:	d404      	bmi.n	801236e <_fflush_r+0x3a>
 8012364:	0599      	lsls	r1, r3, #22
 8012366:	d402      	bmi.n	801236e <_fflush_r+0x3a>
 8012368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801236a:	f000 f915 	bl	8012598 <__retarget_lock_acquire_recursive>
 801236e:	4628      	mov	r0, r5
 8012370:	4621      	mov	r1, r4
 8012372:	f7ff ff59 	bl	8012228 <__sflush_r>
 8012376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012378:	07da      	lsls	r2, r3, #31
 801237a:	4605      	mov	r5, r0
 801237c:	d4e0      	bmi.n	8012340 <_fflush_r+0xc>
 801237e:	89a3      	ldrh	r3, [r4, #12]
 8012380:	059b      	lsls	r3, r3, #22
 8012382:	d4dd      	bmi.n	8012340 <_fflush_r+0xc>
 8012384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012386:	f000 f908 	bl	801259a <__retarget_lock_release_recursive>
 801238a:	e7d9      	b.n	8012340 <_fflush_r+0xc>
 801238c:	4b05      	ldr	r3, [pc, #20]	; (80123a4 <_fflush_r+0x70>)
 801238e:	429c      	cmp	r4, r3
 8012390:	d101      	bne.n	8012396 <_fflush_r+0x62>
 8012392:	68ac      	ldr	r4, [r5, #8]
 8012394:	e7df      	b.n	8012356 <_fflush_r+0x22>
 8012396:	4b04      	ldr	r3, [pc, #16]	; (80123a8 <_fflush_r+0x74>)
 8012398:	429c      	cmp	r4, r3
 801239a:	bf08      	it	eq
 801239c:	68ec      	ldreq	r4, [r5, #12]
 801239e:	e7da      	b.n	8012356 <_fflush_r+0x22>
 80123a0:	08014664 	.word	0x08014664
 80123a4:	08014684 	.word	0x08014684
 80123a8:	08014644 	.word	0x08014644

080123ac <std>:
 80123ac:	2300      	movs	r3, #0
 80123ae:	b510      	push	{r4, lr}
 80123b0:	4604      	mov	r4, r0
 80123b2:	e9c0 3300 	strd	r3, r3, [r0]
 80123b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80123ba:	6083      	str	r3, [r0, #8]
 80123bc:	8181      	strh	r1, [r0, #12]
 80123be:	6643      	str	r3, [r0, #100]	; 0x64
 80123c0:	81c2      	strh	r2, [r0, #14]
 80123c2:	6183      	str	r3, [r0, #24]
 80123c4:	4619      	mov	r1, r3
 80123c6:	2208      	movs	r2, #8
 80123c8:	305c      	adds	r0, #92	; 0x5c
 80123ca:	f7fd fe01 	bl	800ffd0 <memset>
 80123ce:	4b05      	ldr	r3, [pc, #20]	; (80123e4 <std+0x38>)
 80123d0:	6263      	str	r3, [r4, #36]	; 0x24
 80123d2:	4b05      	ldr	r3, [pc, #20]	; (80123e8 <std+0x3c>)
 80123d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80123d6:	4b05      	ldr	r3, [pc, #20]	; (80123ec <std+0x40>)
 80123d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80123da:	4b05      	ldr	r3, [pc, #20]	; (80123f0 <std+0x44>)
 80123dc:	6224      	str	r4, [r4, #32]
 80123de:	6323      	str	r3, [r4, #48]	; 0x30
 80123e0:	bd10      	pop	{r4, pc}
 80123e2:	bf00      	nop
 80123e4:	080126ed 	.word	0x080126ed
 80123e8:	0801270f 	.word	0x0801270f
 80123ec:	08012747 	.word	0x08012747
 80123f0:	0801276b 	.word	0x0801276b

080123f4 <_cleanup_r>:
 80123f4:	4901      	ldr	r1, [pc, #4]	; (80123fc <_cleanup_r+0x8>)
 80123f6:	f000 b8af 	b.w	8012558 <_fwalk_reent>
 80123fa:	bf00      	nop
 80123fc:	08012335 	.word	0x08012335

08012400 <__sfmoreglue>:
 8012400:	b570      	push	{r4, r5, r6, lr}
 8012402:	1e4a      	subs	r2, r1, #1
 8012404:	2568      	movs	r5, #104	; 0x68
 8012406:	4355      	muls	r5, r2
 8012408:	460e      	mov	r6, r1
 801240a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801240e:	f7ff fc23 	bl	8011c58 <_malloc_r>
 8012412:	4604      	mov	r4, r0
 8012414:	b140      	cbz	r0, 8012428 <__sfmoreglue+0x28>
 8012416:	2100      	movs	r1, #0
 8012418:	e9c0 1600 	strd	r1, r6, [r0]
 801241c:	300c      	adds	r0, #12
 801241e:	60a0      	str	r0, [r4, #8]
 8012420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012424:	f7fd fdd4 	bl	800ffd0 <memset>
 8012428:	4620      	mov	r0, r4
 801242a:	bd70      	pop	{r4, r5, r6, pc}

0801242c <__sfp_lock_acquire>:
 801242c:	4801      	ldr	r0, [pc, #4]	; (8012434 <__sfp_lock_acquire+0x8>)
 801242e:	f000 b8b3 	b.w	8012598 <__retarget_lock_acquire_recursive>
 8012432:	bf00      	nop
 8012434:	24001068 	.word	0x24001068

08012438 <__sfp_lock_release>:
 8012438:	4801      	ldr	r0, [pc, #4]	; (8012440 <__sfp_lock_release+0x8>)
 801243a:	f000 b8ae 	b.w	801259a <__retarget_lock_release_recursive>
 801243e:	bf00      	nop
 8012440:	24001068 	.word	0x24001068

08012444 <__sinit_lock_acquire>:
 8012444:	4801      	ldr	r0, [pc, #4]	; (801244c <__sinit_lock_acquire+0x8>)
 8012446:	f000 b8a7 	b.w	8012598 <__retarget_lock_acquire_recursive>
 801244a:	bf00      	nop
 801244c:	24001063 	.word	0x24001063

08012450 <__sinit_lock_release>:
 8012450:	4801      	ldr	r0, [pc, #4]	; (8012458 <__sinit_lock_release+0x8>)
 8012452:	f000 b8a2 	b.w	801259a <__retarget_lock_release_recursive>
 8012456:	bf00      	nop
 8012458:	24001063 	.word	0x24001063

0801245c <__sinit>:
 801245c:	b510      	push	{r4, lr}
 801245e:	4604      	mov	r4, r0
 8012460:	f7ff fff0 	bl	8012444 <__sinit_lock_acquire>
 8012464:	69a3      	ldr	r3, [r4, #24]
 8012466:	b11b      	cbz	r3, 8012470 <__sinit+0x14>
 8012468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801246c:	f7ff bff0 	b.w	8012450 <__sinit_lock_release>
 8012470:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012474:	6523      	str	r3, [r4, #80]	; 0x50
 8012476:	4b13      	ldr	r3, [pc, #76]	; (80124c4 <__sinit+0x68>)
 8012478:	4a13      	ldr	r2, [pc, #76]	; (80124c8 <__sinit+0x6c>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	62a2      	str	r2, [r4, #40]	; 0x28
 801247e:	42a3      	cmp	r3, r4
 8012480:	bf04      	itt	eq
 8012482:	2301      	moveq	r3, #1
 8012484:	61a3      	streq	r3, [r4, #24]
 8012486:	4620      	mov	r0, r4
 8012488:	f000 f820 	bl	80124cc <__sfp>
 801248c:	6060      	str	r0, [r4, #4]
 801248e:	4620      	mov	r0, r4
 8012490:	f000 f81c 	bl	80124cc <__sfp>
 8012494:	60a0      	str	r0, [r4, #8]
 8012496:	4620      	mov	r0, r4
 8012498:	f000 f818 	bl	80124cc <__sfp>
 801249c:	2200      	movs	r2, #0
 801249e:	60e0      	str	r0, [r4, #12]
 80124a0:	2104      	movs	r1, #4
 80124a2:	6860      	ldr	r0, [r4, #4]
 80124a4:	f7ff ff82 	bl	80123ac <std>
 80124a8:	68a0      	ldr	r0, [r4, #8]
 80124aa:	2201      	movs	r2, #1
 80124ac:	2109      	movs	r1, #9
 80124ae:	f7ff ff7d 	bl	80123ac <std>
 80124b2:	68e0      	ldr	r0, [r4, #12]
 80124b4:	2202      	movs	r2, #2
 80124b6:	2112      	movs	r1, #18
 80124b8:	f7ff ff78 	bl	80123ac <std>
 80124bc:	2301      	movs	r3, #1
 80124be:	61a3      	str	r3, [r4, #24]
 80124c0:	e7d2      	b.n	8012468 <__sinit+0xc>
 80124c2:	bf00      	nop
 80124c4:	080142c0 	.word	0x080142c0
 80124c8:	080123f5 	.word	0x080123f5

080124cc <__sfp>:
 80124cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ce:	4607      	mov	r7, r0
 80124d0:	f7ff ffac 	bl	801242c <__sfp_lock_acquire>
 80124d4:	4b1e      	ldr	r3, [pc, #120]	; (8012550 <__sfp+0x84>)
 80124d6:	681e      	ldr	r6, [r3, #0]
 80124d8:	69b3      	ldr	r3, [r6, #24]
 80124da:	b913      	cbnz	r3, 80124e2 <__sfp+0x16>
 80124dc:	4630      	mov	r0, r6
 80124de:	f7ff ffbd 	bl	801245c <__sinit>
 80124e2:	3648      	adds	r6, #72	; 0x48
 80124e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80124e8:	3b01      	subs	r3, #1
 80124ea:	d503      	bpl.n	80124f4 <__sfp+0x28>
 80124ec:	6833      	ldr	r3, [r6, #0]
 80124ee:	b30b      	cbz	r3, 8012534 <__sfp+0x68>
 80124f0:	6836      	ldr	r6, [r6, #0]
 80124f2:	e7f7      	b.n	80124e4 <__sfp+0x18>
 80124f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80124f8:	b9d5      	cbnz	r5, 8012530 <__sfp+0x64>
 80124fa:	4b16      	ldr	r3, [pc, #88]	; (8012554 <__sfp+0x88>)
 80124fc:	60e3      	str	r3, [r4, #12]
 80124fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012502:	6665      	str	r5, [r4, #100]	; 0x64
 8012504:	f000 f847 	bl	8012596 <__retarget_lock_init_recursive>
 8012508:	f7ff ff96 	bl	8012438 <__sfp_lock_release>
 801250c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012510:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012514:	6025      	str	r5, [r4, #0]
 8012516:	61a5      	str	r5, [r4, #24]
 8012518:	2208      	movs	r2, #8
 801251a:	4629      	mov	r1, r5
 801251c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012520:	f7fd fd56 	bl	800ffd0 <memset>
 8012524:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012528:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801252c:	4620      	mov	r0, r4
 801252e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012530:	3468      	adds	r4, #104	; 0x68
 8012532:	e7d9      	b.n	80124e8 <__sfp+0x1c>
 8012534:	2104      	movs	r1, #4
 8012536:	4638      	mov	r0, r7
 8012538:	f7ff ff62 	bl	8012400 <__sfmoreglue>
 801253c:	4604      	mov	r4, r0
 801253e:	6030      	str	r0, [r6, #0]
 8012540:	2800      	cmp	r0, #0
 8012542:	d1d5      	bne.n	80124f0 <__sfp+0x24>
 8012544:	f7ff ff78 	bl	8012438 <__sfp_lock_release>
 8012548:	230c      	movs	r3, #12
 801254a:	603b      	str	r3, [r7, #0]
 801254c:	e7ee      	b.n	801252c <__sfp+0x60>
 801254e:	bf00      	nop
 8012550:	080142c0 	.word	0x080142c0
 8012554:	ffff0001 	.word	0xffff0001

08012558 <_fwalk_reent>:
 8012558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801255c:	4606      	mov	r6, r0
 801255e:	4688      	mov	r8, r1
 8012560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012564:	2700      	movs	r7, #0
 8012566:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801256a:	f1b9 0901 	subs.w	r9, r9, #1
 801256e:	d505      	bpl.n	801257c <_fwalk_reent+0x24>
 8012570:	6824      	ldr	r4, [r4, #0]
 8012572:	2c00      	cmp	r4, #0
 8012574:	d1f7      	bne.n	8012566 <_fwalk_reent+0xe>
 8012576:	4638      	mov	r0, r7
 8012578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801257c:	89ab      	ldrh	r3, [r5, #12]
 801257e:	2b01      	cmp	r3, #1
 8012580:	d907      	bls.n	8012592 <_fwalk_reent+0x3a>
 8012582:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012586:	3301      	adds	r3, #1
 8012588:	d003      	beq.n	8012592 <_fwalk_reent+0x3a>
 801258a:	4629      	mov	r1, r5
 801258c:	4630      	mov	r0, r6
 801258e:	47c0      	blx	r8
 8012590:	4307      	orrs	r7, r0
 8012592:	3568      	adds	r5, #104	; 0x68
 8012594:	e7e9      	b.n	801256a <_fwalk_reent+0x12>

08012596 <__retarget_lock_init_recursive>:
 8012596:	4770      	bx	lr

08012598 <__retarget_lock_acquire_recursive>:
 8012598:	4770      	bx	lr

0801259a <__retarget_lock_release_recursive>:
 801259a:	4770      	bx	lr

0801259c <__swhatbuf_r>:
 801259c:	b570      	push	{r4, r5, r6, lr}
 801259e:	460e      	mov	r6, r1
 80125a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125a4:	2900      	cmp	r1, #0
 80125a6:	b096      	sub	sp, #88	; 0x58
 80125a8:	4614      	mov	r4, r2
 80125aa:	461d      	mov	r5, r3
 80125ac:	da07      	bge.n	80125be <__swhatbuf_r+0x22>
 80125ae:	2300      	movs	r3, #0
 80125b0:	602b      	str	r3, [r5, #0]
 80125b2:	89b3      	ldrh	r3, [r6, #12]
 80125b4:	061a      	lsls	r2, r3, #24
 80125b6:	d410      	bmi.n	80125da <__swhatbuf_r+0x3e>
 80125b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125bc:	e00e      	b.n	80125dc <__swhatbuf_r+0x40>
 80125be:	466a      	mov	r2, sp
 80125c0:	f000 f8fa 	bl	80127b8 <_fstat_r>
 80125c4:	2800      	cmp	r0, #0
 80125c6:	dbf2      	blt.n	80125ae <__swhatbuf_r+0x12>
 80125c8:	9a01      	ldr	r2, [sp, #4]
 80125ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80125ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80125d2:	425a      	negs	r2, r3
 80125d4:	415a      	adcs	r2, r3
 80125d6:	602a      	str	r2, [r5, #0]
 80125d8:	e7ee      	b.n	80125b8 <__swhatbuf_r+0x1c>
 80125da:	2340      	movs	r3, #64	; 0x40
 80125dc:	2000      	movs	r0, #0
 80125de:	6023      	str	r3, [r4, #0]
 80125e0:	b016      	add	sp, #88	; 0x58
 80125e2:	bd70      	pop	{r4, r5, r6, pc}

080125e4 <__smakebuf_r>:
 80125e4:	898b      	ldrh	r3, [r1, #12]
 80125e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80125e8:	079d      	lsls	r5, r3, #30
 80125ea:	4606      	mov	r6, r0
 80125ec:	460c      	mov	r4, r1
 80125ee:	d507      	bpl.n	8012600 <__smakebuf_r+0x1c>
 80125f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80125f4:	6023      	str	r3, [r4, #0]
 80125f6:	6123      	str	r3, [r4, #16]
 80125f8:	2301      	movs	r3, #1
 80125fa:	6163      	str	r3, [r4, #20]
 80125fc:	b002      	add	sp, #8
 80125fe:	bd70      	pop	{r4, r5, r6, pc}
 8012600:	ab01      	add	r3, sp, #4
 8012602:	466a      	mov	r2, sp
 8012604:	f7ff ffca 	bl	801259c <__swhatbuf_r>
 8012608:	9900      	ldr	r1, [sp, #0]
 801260a:	4605      	mov	r5, r0
 801260c:	4630      	mov	r0, r6
 801260e:	f7ff fb23 	bl	8011c58 <_malloc_r>
 8012612:	b948      	cbnz	r0, 8012628 <__smakebuf_r+0x44>
 8012614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012618:	059a      	lsls	r2, r3, #22
 801261a:	d4ef      	bmi.n	80125fc <__smakebuf_r+0x18>
 801261c:	f023 0303 	bic.w	r3, r3, #3
 8012620:	f043 0302 	orr.w	r3, r3, #2
 8012624:	81a3      	strh	r3, [r4, #12]
 8012626:	e7e3      	b.n	80125f0 <__smakebuf_r+0xc>
 8012628:	4b0d      	ldr	r3, [pc, #52]	; (8012660 <__smakebuf_r+0x7c>)
 801262a:	62b3      	str	r3, [r6, #40]	; 0x28
 801262c:	89a3      	ldrh	r3, [r4, #12]
 801262e:	6020      	str	r0, [r4, #0]
 8012630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012634:	81a3      	strh	r3, [r4, #12]
 8012636:	9b00      	ldr	r3, [sp, #0]
 8012638:	6163      	str	r3, [r4, #20]
 801263a:	9b01      	ldr	r3, [sp, #4]
 801263c:	6120      	str	r0, [r4, #16]
 801263e:	b15b      	cbz	r3, 8012658 <__smakebuf_r+0x74>
 8012640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012644:	4630      	mov	r0, r6
 8012646:	f000 f8c9 	bl	80127dc <_isatty_r>
 801264a:	b128      	cbz	r0, 8012658 <__smakebuf_r+0x74>
 801264c:	89a3      	ldrh	r3, [r4, #12]
 801264e:	f023 0303 	bic.w	r3, r3, #3
 8012652:	f043 0301 	orr.w	r3, r3, #1
 8012656:	81a3      	strh	r3, [r4, #12]
 8012658:	89a0      	ldrh	r0, [r4, #12]
 801265a:	4305      	orrs	r5, r0
 801265c:	81a5      	strh	r5, [r4, #12]
 801265e:	e7cd      	b.n	80125fc <__smakebuf_r+0x18>
 8012660:	080123f5 	.word	0x080123f5

08012664 <_raise_r>:
 8012664:	291f      	cmp	r1, #31
 8012666:	b538      	push	{r3, r4, r5, lr}
 8012668:	4604      	mov	r4, r0
 801266a:	460d      	mov	r5, r1
 801266c:	d904      	bls.n	8012678 <_raise_r+0x14>
 801266e:	2316      	movs	r3, #22
 8012670:	6003      	str	r3, [r0, #0]
 8012672:	f04f 30ff 	mov.w	r0, #4294967295
 8012676:	bd38      	pop	{r3, r4, r5, pc}
 8012678:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801267a:	b112      	cbz	r2, 8012682 <_raise_r+0x1e>
 801267c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012680:	b94b      	cbnz	r3, 8012696 <_raise_r+0x32>
 8012682:	4620      	mov	r0, r4
 8012684:	f000 f830 	bl	80126e8 <_getpid_r>
 8012688:	462a      	mov	r2, r5
 801268a:	4601      	mov	r1, r0
 801268c:	4620      	mov	r0, r4
 801268e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012692:	f000 b817 	b.w	80126c4 <_kill_r>
 8012696:	2b01      	cmp	r3, #1
 8012698:	d00a      	beq.n	80126b0 <_raise_r+0x4c>
 801269a:	1c59      	adds	r1, r3, #1
 801269c:	d103      	bne.n	80126a6 <_raise_r+0x42>
 801269e:	2316      	movs	r3, #22
 80126a0:	6003      	str	r3, [r0, #0]
 80126a2:	2001      	movs	r0, #1
 80126a4:	e7e7      	b.n	8012676 <_raise_r+0x12>
 80126a6:	2400      	movs	r4, #0
 80126a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80126ac:	4628      	mov	r0, r5
 80126ae:	4798      	blx	r3
 80126b0:	2000      	movs	r0, #0
 80126b2:	e7e0      	b.n	8012676 <_raise_r+0x12>

080126b4 <raise>:
 80126b4:	4b02      	ldr	r3, [pc, #8]	; (80126c0 <raise+0xc>)
 80126b6:	4601      	mov	r1, r0
 80126b8:	6818      	ldr	r0, [r3, #0]
 80126ba:	f7ff bfd3 	b.w	8012664 <_raise_r>
 80126be:	bf00      	nop
 80126c0:	2400003c 	.word	0x2400003c

080126c4 <_kill_r>:
 80126c4:	b538      	push	{r3, r4, r5, lr}
 80126c6:	4d07      	ldr	r5, [pc, #28]	; (80126e4 <_kill_r+0x20>)
 80126c8:	2300      	movs	r3, #0
 80126ca:	4604      	mov	r4, r0
 80126cc:	4608      	mov	r0, r1
 80126ce:	4611      	mov	r1, r2
 80126d0:	602b      	str	r3, [r5, #0]
 80126d2:	f7f1 ff55 	bl	8004580 <_kill>
 80126d6:	1c43      	adds	r3, r0, #1
 80126d8:	d102      	bne.n	80126e0 <_kill_r+0x1c>
 80126da:	682b      	ldr	r3, [r5, #0]
 80126dc:	b103      	cbz	r3, 80126e0 <_kill_r+0x1c>
 80126de:	6023      	str	r3, [r4, #0]
 80126e0:	bd38      	pop	{r3, r4, r5, pc}
 80126e2:	bf00      	nop
 80126e4:	2400105c 	.word	0x2400105c

080126e8 <_getpid_r>:
 80126e8:	f7f1 bf42 	b.w	8004570 <_getpid>

080126ec <__sread>:
 80126ec:	b510      	push	{r4, lr}
 80126ee:	460c      	mov	r4, r1
 80126f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126f4:	f000 f894 	bl	8012820 <_read_r>
 80126f8:	2800      	cmp	r0, #0
 80126fa:	bfab      	itete	ge
 80126fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80126fe:	89a3      	ldrhlt	r3, [r4, #12]
 8012700:	181b      	addge	r3, r3, r0
 8012702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012706:	bfac      	ite	ge
 8012708:	6563      	strge	r3, [r4, #84]	; 0x54
 801270a:	81a3      	strhlt	r3, [r4, #12]
 801270c:	bd10      	pop	{r4, pc}

0801270e <__swrite>:
 801270e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012712:	461f      	mov	r7, r3
 8012714:	898b      	ldrh	r3, [r1, #12]
 8012716:	05db      	lsls	r3, r3, #23
 8012718:	4605      	mov	r5, r0
 801271a:	460c      	mov	r4, r1
 801271c:	4616      	mov	r6, r2
 801271e:	d505      	bpl.n	801272c <__swrite+0x1e>
 8012720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012724:	2302      	movs	r3, #2
 8012726:	2200      	movs	r2, #0
 8012728:	f000 f868 	bl	80127fc <_lseek_r>
 801272c:	89a3      	ldrh	r3, [r4, #12]
 801272e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012736:	81a3      	strh	r3, [r4, #12]
 8012738:	4632      	mov	r2, r6
 801273a:	463b      	mov	r3, r7
 801273c:	4628      	mov	r0, r5
 801273e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012742:	f000 b817 	b.w	8012774 <_write_r>

08012746 <__sseek>:
 8012746:	b510      	push	{r4, lr}
 8012748:	460c      	mov	r4, r1
 801274a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801274e:	f000 f855 	bl	80127fc <_lseek_r>
 8012752:	1c43      	adds	r3, r0, #1
 8012754:	89a3      	ldrh	r3, [r4, #12]
 8012756:	bf15      	itete	ne
 8012758:	6560      	strne	r0, [r4, #84]	; 0x54
 801275a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801275e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012762:	81a3      	strheq	r3, [r4, #12]
 8012764:	bf18      	it	ne
 8012766:	81a3      	strhne	r3, [r4, #12]
 8012768:	bd10      	pop	{r4, pc}

0801276a <__sclose>:
 801276a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801276e:	f000 b813 	b.w	8012798 <_close_r>
	...

08012774 <_write_r>:
 8012774:	b538      	push	{r3, r4, r5, lr}
 8012776:	4d07      	ldr	r5, [pc, #28]	; (8012794 <_write_r+0x20>)
 8012778:	4604      	mov	r4, r0
 801277a:	4608      	mov	r0, r1
 801277c:	4611      	mov	r1, r2
 801277e:	2200      	movs	r2, #0
 8012780:	602a      	str	r2, [r5, #0]
 8012782:	461a      	mov	r2, r3
 8012784:	f7f1 ff33 	bl	80045ee <_write>
 8012788:	1c43      	adds	r3, r0, #1
 801278a:	d102      	bne.n	8012792 <_write_r+0x1e>
 801278c:	682b      	ldr	r3, [r5, #0]
 801278e:	b103      	cbz	r3, 8012792 <_write_r+0x1e>
 8012790:	6023      	str	r3, [r4, #0]
 8012792:	bd38      	pop	{r3, r4, r5, pc}
 8012794:	2400105c 	.word	0x2400105c

08012798 <_close_r>:
 8012798:	b538      	push	{r3, r4, r5, lr}
 801279a:	4d06      	ldr	r5, [pc, #24]	; (80127b4 <_close_r+0x1c>)
 801279c:	2300      	movs	r3, #0
 801279e:	4604      	mov	r4, r0
 80127a0:	4608      	mov	r0, r1
 80127a2:	602b      	str	r3, [r5, #0]
 80127a4:	f7f1 ff3f 	bl	8004626 <_close>
 80127a8:	1c43      	adds	r3, r0, #1
 80127aa:	d102      	bne.n	80127b2 <_close_r+0x1a>
 80127ac:	682b      	ldr	r3, [r5, #0]
 80127ae:	b103      	cbz	r3, 80127b2 <_close_r+0x1a>
 80127b0:	6023      	str	r3, [r4, #0]
 80127b2:	bd38      	pop	{r3, r4, r5, pc}
 80127b4:	2400105c 	.word	0x2400105c

080127b8 <_fstat_r>:
 80127b8:	b538      	push	{r3, r4, r5, lr}
 80127ba:	4d07      	ldr	r5, [pc, #28]	; (80127d8 <_fstat_r+0x20>)
 80127bc:	2300      	movs	r3, #0
 80127be:	4604      	mov	r4, r0
 80127c0:	4608      	mov	r0, r1
 80127c2:	4611      	mov	r1, r2
 80127c4:	602b      	str	r3, [r5, #0]
 80127c6:	f7f1 ff3a 	bl	800463e <_fstat>
 80127ca:	1c43      	adds	r3, r0, #1
 80127cc:	d102      	bne.n	80127d4 <_fstat_r+0x1c>
 80127ce:	682b      	ldr	r3, [r5, #0]
 80127d0:	b103      	cbz	r3, 80127d4 <_fstat_r+0x1c>
 80127d2:	6023      	str	r3, [r4, #0]
 80127d4:	bd38      	pop	{r3, r4, r5, pc}
 80127d6:	bf00      	nop
 80127d8:	2400105c 	.word	0x2400105c

080127dc <_isatty_r>:
 80127dc:	b538      	push	{r3, r4, r5, lr}
 80127de:	4d06      	ldr	r5, [pc, #24]	; (80127f8 <_isatty_r+0x1c>)
 80127e0:	2300      	movs	r3, #0
 80127e2:	4604      	mov	r4, r0
 80127e4:	4608      	mov	r0, r1
 80127e6:	602b      	str	r3, [r5, #0]
 80127e8:	f7f1 ff39 	bl	800465e <_isatty>
 80127ec:	1c43      	adds	r3, r0, #1
 80127ee:	d102      	bne.n	80127f6 <_isatty_r+0x1a>
 80127f0:	682b      	ldr	r3, [r5, #0]
 80127f2:	b103      	cbz	r3, 80127f6 <_isatty_r+0x1a>
 80127f4:	6023      	str	r3, [r4, #0]
 80127f6:	bd38      	pop	{r3, r4, r5, pc}
 80127f8:	2400105c 	.word	0x2400105c

080127fc <_lseek_r>:
 80127fc:	b538      	push	{r3, r4, r5, lr}
 80127fe:	4d07      	ldr	r5, [pc, #28]	; (801281c <_lseek_r+0x20>)
 8012800:	4604      	mov	r4, r0
 8012802:	4608      	mov	r0, r1
 8012804:	4611      	mov	r1, r2
 8012806:	2200      	movs	r2, #0
 8012808:	602a      	str	r2, [r5, #0]
 801280a:	461a      	mov	r2, r3
 801280c:	f7f1 ff32 	bl	8004674 <_lseek>
 8012810:	1c43      	adds	r3, r0, #1
 8012812:	d102      	bne.n	801281a <_lseek_r+0x1e>
 8012814:	682b      	ldr	r3, [r5, #0]
 8012816:	b103      	cbz	r3, 801281a <_lseek_r+0x1e>
 8012818:	6023      	str	r3, [r4, #0]
 801281a:	bd38      	pop	{r3, r4, r5, pc}
 801281c:	2400105c 	.word	0x2400105c

08012820 <_read_r>:
 8012820:	b538      	push	{r3, r4, r5, lr}
 8012822:	4d07      	ldr	r5, [pc, #28]	; (8012840 <_read_r+0x20>)
 8012824:	4604      	mov	r4, r0
 8012826:	4608      	mov	r0, r1
 8012828:	4611      	mov	r1, r2
 801282a:	2200      	movs	r2, #0
 801282c:	602a      	str	r2, [r5, #0]
 801282e:	461a      	mov	r2, r3
 8012830:	f7f1 fec0 	bl	80045b4 <_read>
 8012834:	1c43      	adds	r3, r0, #1
 8012836:	d102      	bne.n	801283e <_read_r+0x1e>
 8012838:	682b      	ldr	r3, [r5, #0]
 801283a:	b103      	cbz	r3, 801283e <_read_r+0x1e>
 801283c:	6023      	str	r3, [r4, #0]
 801283e:	bd38      	pop	{r3, r4, r5, pc}
 8012840:	2400105c 	.word	0x2400105c

08012844 <_init>:
 8012844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012846:	bf00      	nop
 8012848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801284a:	bc08      	pop	{r3}
 801284c:	469e      	mov	lr, r3
 801284e:	4770      	bx	lr

08012850 <_fini>:
 8012850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012852:	bf00      	nop
 8012854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012856:	bc08      	pop	{r3}
 8012858:	469e      	mov	lr, r3
 801285a:	4770      	bx	lr
