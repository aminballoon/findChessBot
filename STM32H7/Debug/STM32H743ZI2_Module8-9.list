
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb30  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800bdd0  0800bdd0  0001bdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800beac  0800beac  0001beac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800beb4  0800beb4  0001beb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800beb8  0800beb8  0001beb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800bebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000864  20000074  0800bf30  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200008d8  0800bf30  000208d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023952  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003980  00000000  00000000  000439f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001430  00000000  00000000  00047378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001318  00000000  00000000  000487a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000439b  00000000  00000000  00049ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019acc  00000000  00000000  0004de5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167ade  00000000  00000000  00067927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001cf405  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d58  00000000  00000000  001cf458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bdb8 	.word	0x0800bdb8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	0800bdb8 	.word	0x0800bdb8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <RS485Encoder>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile int16_t RS485Encoder(uint8_t _address)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b089      	sub	sp, #36	; 0x24
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	uint8_t _buff[2];
	volatile uint8_t checkbit_odd[7], checkbit_even[7];
	volatile char checkbit_odd_result = 0, checkbit_even_result = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	72fb      	strb	r3, [r7, #11]
 8000686:	2300      	movs	r3, #0
 8000688:	72bb      	strb	r3, [r7, #10]
	static int16_t POSCNT[4];
	HAL_UART_Transmit(&huart4, &_address, 1, 1);
 800068a:	1df9      	adds	r1, r7, #7
 800068c:	2301      	movs	r3, #1
 800068e:	2201      	movs	r2, #1
 8000690:	487b      	ldr	r0, [pc, #492]	; (8000880 <RS485Encoder+0x208>)
 8000692:	f008 fb33 	bl	8008cfc <HAL_UART_Transmit>
	if(HAL_UART_Receive(&huart4, _buff, 2, 1) == HAL_OK) // Check received data is completed.
 8000696:	f107 011c 	add.w	r1, r7, #28
 800069a:	2301      	movs	r3, #1
 800069c:	2202      	movs	r2, #2
 800069e:	4878      	ldr	r0, [pc, #480]	; (8000880 <RS485Encoder+0x208>)
 80006a0:	f008 fbc2 	bl	8008e28 <HAL_UART_Receive>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f040 80c4 	bne.w	8000834 <RS485Encoder+0x1bc>
	{
		/*** Checksum ***/
		for (register int i = 0; i < 7; i++)
 80006ac:	2400      	movs	r4, #0
 80006ae:	e045      	b.n	800073c <RS485Encoder+0xc4>
		{
			if(i < 3){
 80006b0:	2c02      	cmp	r4, #2
 80006b2:	dc21      	bgt.n	80006f8 <RS485Encoder+0x80>
			  checkbit_odd[i] = (_buff[1] >> (7-(2*(i+1)))) & 0x01;
 80006b4:	7f7b      	ldrb	r3, [r7, #29]
 80006b6:	461a      	mov	r2, r3
 80006b8:	1c63      	adds	r3, r4, #1
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	f1c3 0307 	rsb	r3, r3, #7
 80006c0:	fa42 f303 	asr.w	r3, r2, r3
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4423      	add	r3, r4
 80006d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
			  checkbit_even[i] = (_buff[1] >> (6-(2*(i+1)))) & 0x01;
 80006d6:	7f7b      	ldrb	r3, [r7, #29]
 80006d8:	461a      	mov	r2, r3
 80006da:	f1c4 0302 	rsb	r3, r4, #2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	fa42 f303 	asr.w	r3, r2, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4423      	add	r3, r4
 80006f2:	f803 2c14 	strb.w	r2, [r3, #-20]
 80006f6:	e020      	b.n	800073a <RS485Encoder+0xc2>
			}
			else{
			  checkbit_odd[i] = (_buff[0] >> (7-(2*(i-3)))) & 0x01;
 80006f8:	7f3b      	ldrb	r3, [r7, #28]
 80006fa:	461a      	mov	r2, r3
 80006fc:	1ee3      	subs	r3, r4, #3
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	f1c3 0307 	rsb	r3, r3, #7
 8000704:	fa42 f303 	asr.w	r3, r2, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	b2da      	uxtb	r2, r3
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4423      	add	r3, r4
 8000716:	f803 2c0c 	strb.w	r2, [r3, #-12]
			  checkbit_even[i] = (_buff[0] >> (6-(2*(i-3)))) & 0x01;
 800071a:	7f3b      	ldrb	r3, [r7, #28]
 800071c:	461a      	mov	r2, r3
 800071e:	f1c4 0306 	rsb	r3, r4, #6
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	fa42 f303 	asr.w	r3, r2, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4423      	add	r3, r4
 8000736:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (register int i = 0; i < 7; i++)
 800073a:	3401      	adds	r4, #1
 800073c:	2c06      	cmp	r4, #6
 800073e:	ddb7      	ble.n	80006b0 <RS485Encoder+0x38>
			}
		}
		for (register int i = 0; i < 7; i++)
 8000740:	2400      	movs	r4, #0
 8000742:	e016      	b.n	8000772 <RS485Encoder+0xfa>
		{
			checkbit_odd_result ^= checkbit_odd[i];
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4423      	add	r3, r4
 800074a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	7afb      	ldrb	r3, [r7, #11]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4053      	eors	r3, r2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	72fb      	strb	r3, [r7, #11]
			checkbit_even_result ^= checkbit_even[i];
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4423      	add	r3, r4
 8000760:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	7abb      	ldrb	r3, [r7, #10]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	4053      	eors	r3, r2
 800076c:	b2db      	uxtb	r3, r3
 800076e:	72bb      	strb	r3, [r7, #10]
		for (register int i = 0; i < 7; i++)
 8000770:	3401      	adds	r4, #1
 8000772:	2c06      	cmp	r4, #6
 8000774:	dde6      	ble.n	8000744 <RS485Encoder+0xcc>
		}
		checkbit_odd_result = !checkbit_odd_result;
 8000776:	7afb      	ldrb	r3, [r7, #11]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	bf0c      	ite	eq
 800077e:	2301      	moveq	r3, #1
 8000780:	2300      	movne	r3, #0
 8000782:	b2db      	uxtb	r3, r3
 8000784:	72fb      	strb	r3, [r7, #11]
		checkbit_even_result = !checkbit_even_result;
 8000786:	7abb      	ldrb	r3, [r7, #10]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf0c      	ite	eq
 800078e:	2301      	moveq	r3, #1
 8000790:	2300      	movne	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	72bb      	strb	r3, [r7, #10]
		if(!(checkbit_odd_result) && (checkbit_even_result)) //  If checksum is correct.
 8000796:	7afb      	ldrb	r3, [r7, #11]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d14a      	bne.n	8000834 <RS485Encoder+0x1bc>
 800079e:	7abb      	ldrb	r3, [r7, #10]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d046      	beq.n	8000834 <RS485Encoder+0x1bc>
		{
			switch (_address){
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	3b2c      	subs	r3, #44	; 0x2c
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d843      	bhi.n	8000836 <RS485Encoder+0x1be>
 80007ae:	a201      	add	r2, pc, #4	; (adr r2, 80007b4 <RS485Encoder+0x13c>)
 80007b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b4:	080007c5 	.word	0x080007c5
 80007b8:	080007e1 	.word	0x080007e1
 80007bc:	080007fd 	.word	0x080007fd
 80007c0:	08000819 	.word	0x08000819
				case ENC_JOINT1_Address:
					POSCNT[0] = _buff[0] + ((_buff[1] & 0x3F) << 8);
 80007c4:	7f3b      	ldrb	r3, [r7, #28]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	7f7b      	ldrb	r3, [r7, #29]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	4413      	add	r3, r2
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	b21a      	sxth	r2, r3
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <RS485Encoder+0x20c>)
 80007dc:	801a      	strh	r2, [r3, #0]
					break;
 80007de:	e02a      	b.n	8000836 <RS485Encoder+0x1be>
				case ENC_JOINT2_Address:
					POSCNT[1] = _buff[0] + ((_buff[1] & 0x3F) << 8);
 80007e0:	7f3b      	ldrb	r3, [r7, #28]
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	7f7b      	ldrb	r3, [r7, #29]
 80007e6:	021b      	lsls	r3, r3, #8
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	4413      	add	r3, r2
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <RS485Encoder+0x20c>)
 80007f8:	805a      	strh	r2, [r3, #2]
					break;
 80007fa:	e01c      	b.n	8000836 <RS485Encoder+0x1be>
				case ENC_JOINT3_Address:
					POSCNT[2] = _buff[0] + ((_buff[1] & 0x3F) << 8);
 80007fc:	7f3b      	ldrb	r3, [r7, #28]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	7f7b      	ldrb	r3, [r7, #29]
 8000802:	021b      	lsls	r3, r3, #8
 8000804:	b29b      	uxth	r3, r3
 8000806:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800080a:	b29b      	uxth	r3, r3
 800080c:	4413      	add	r3, r2
 800080e:	b29b      	uxth	r3, r3
 8000810:	b21a      	sxth	r2, r3
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <RS485Encoder+0x20c>)
 8000814:	809a      	strh	r2, [r3, #4]
					break;
 8000816:	e00e      	b.n	8000836 <RS485Encoder+0x1be>
				case ENC_JOINT4_Address:
					POSCNT[3] = _buff[0] + ((_buff[1] & 0x3F) << 8);
 8000818:	7f3b      	ldrb	r3, [r7, #28]
 800081a:	b29a      	uxth	r2, r3
 800081c:	7f7b      	ldrb	r3, [r7, #29]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b29b      	uxth	r3, r3
 8000822:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8000826:	b29b      	uxth	r3, r3
 8000828:	4413      	add	r3, r2
 800082a:	b29b      	uxth	r3, r3
 800082c:	b21a      	sxth	r2, r3
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <RS485Encoder+0x20c>)
 8000830:	80da      	strh	r2, [r3, #6]
					break;
 8000832:	e000      	b.n	8000836 <RS485Encoder+0x1be>
			}
		}
 8000834:	bf00      	nop
	}
	switch (_address){
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	3b2c      	subs	r3, #44	; 0x2c
 800083a:	2b03      	cmp	r3, #3
 800083c:	d81a      	bhi.n	8000874 <RS485Encoder+0x1fc>
 800083e:	a201      	add	r2, pc, #4	; (adr r2, 8000844 <RS485Encoder+0x1cc>)
 8000840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000844:	08000855 	.word	0x08000855
 8000848:	0800085d 	.word	0x0800085d
 800084c:	08000865 	.word	0x08000865
 8000850:	0800086d 	.word	0x0800086d
		case ENC_JOINT1_Address:
			return POSCNT[0];
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <RS485Encoder+0x20c>)
 8000856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800085a:	e00d      	b.n	8000878 <RS485Encoder+0x200>
			break;
		case ENC_JOINT2_Address:
			return POSCNT[1];
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <RS485Encoder+0x20c>)
 800085e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000862:	e009      	b.n	8000878 <RS485Encoder+0x200>
			break;
		case ENC_JOINT3_Address:
			return POSCNT[2];
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <RS485Encoder+0x20c>)
 8000866:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800086a:	e005      	b.n	8000878 <RS485Encoder+0x200>
			break;
		case ENC_JOINT4_Address:
			return POSCNT[3];
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <RS485Encoder+0x20c>)
 800086e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000872:	e001      	b.n	8000878 <RS485Encoder+0x200>
			break;
	}
	return -1;
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000878:	4618      	mov	r0, r3
 800087a:	3724      	adds	r7, #36	; 0x24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	200006a8 	.word	0x200006a8
 8000884:	20000090 	.word	0x20000090

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f001 fdc4 	bl	8002418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f852 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f000 fe72 	bl	800157c <MX_GPIO_Init>
  MX_DMA_Init();
 8000898:	f000 fd20 	bl	80012dc <MX_DMA_Init>
  MX_USART3_UART_Init();
 800089c:	f000 fcd2 	bl	8001244 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80008a0:	f000 f9ec 	bl	8000c7c <MX_TIM2_Init>
  MX_UART4_Init();
 80008a4:	f000 fc7e 	bl	80011a4 <MX_UART4_Init>
  MX_TIM4_Init();
 80008a8:	f000 fad8 	bl	8000e5c <MX_TIM4_Init>
  MX_SPI3_Init();
 80008ac:	f000 f8e2 	bl	8000a74 <MX_SPI3_Init>
  MX_TIM1_Init();
 80008b0:	f000 f936 	bl	8000b20 <MX_TIM1_Init>
  MX_TIM3_Init();
 80008b4:	f000 fa5a 	bl	8000d6c <MX_TIM3_Init>
  MX_TIM5_Init();
 80008b8:	f000 fb48 	bl	8000f4c <MX_TIM5_Init>
  MX_TIM15_Init();
 80008bc:	f000 fbce 	bl	800105c <MX_TIM15_Init>
  MX_TIM12_Init();
 80008c0:	f000 fb92 	bl	8000fe8 <MX_TIM12_Init>
  MX_CRC_Init();
 80008c4:	f000 f8b4 	bl	8000a30 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2101      	movs	r1, #1
 80008cc:	4815      	ldr	r0, [pc, #84]	; (8000924 <main+0x9c>)
 80008ce:	f004 fc0f 	bl	80050f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2102      	movs	r1, #2
 80008d6:	4814      	ldr	r0, [pc, #80]	; (8000928 <main+0xa0>)
 80008d8:	f004 fc0a 	bl	80050f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <main+0x9c>)
 80008e4:	f004 fc04 	bl	80050f0 <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <main+0xa4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <main+0xa4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f042 0220 	orr.w	r2, r2, #32
 80008f6:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <main+0xa4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <main+0xa4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000906:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 8000908:	2204      	movs	r2, #4
 800090a:	4909      	ldr	r1, [pc, #36]	; (8000930 <main+0xa8>)
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <main+0xa4>)
 800090e:	f008 fb5f 	bl	8008fd0 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      printf("%d\n", RS485Encoder(0x2C));
 8000912:	202c      	movs	r0, #44	; 0x2c
 8000914:	f7ff feb0 	bl	8000678 <RS485Encoder>
 8000918:	4603      	mov	r3, r0
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <main+0xac>)
 800091e:	f00a faf5 	bl	800af0c <iprintf>
 8000922:	e7f6      	b.n	8000912 <main+0x8a>
 8000924:	58020400 	.word	0x58020400
 8000928:	58021000 	.word	0x58021000
 800092c:	200002d0 	.word	0x200002d0
 8000930:	200008c0 	.word	0x200008c0
 8000934:	0800bdd0 	.word	0x0800bdd0

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09c      	sub	sp, #112	; 0x70
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	224c      	movs	r2, #76	; 0x4c
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f00a fad8 	bl	800aefc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2220      	movs	r2, #32
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f00a fad2 	bl	800aefc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000958:	2002      	movs	r0, #2
 800095a:	f004 fbfd 	bl	8005158 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b31      	ldr	r3, [pc, #196]	; (8000a28 <SystemClock_Config+0xf0>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	4a30      	ldr	r2, [pc, #192]	; (8000a28 <SystemClock_Config+0xf0>)
 8000968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800096c:	6193      	str	r3, [r2, #24]
 800096e:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <SystemClock_Config+0xf0>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <SystemClock_Config+0xf4>)
 800097a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097c:	4a2b      	ldr	r2, [pc, #172]	; (8000a2c <SystemClock_Config+0xf4>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <SystemClock_Config+0xf4>)
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000990:	bf00      	nop
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <SystemClock_Config+0xf0>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800099a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800099e:	d1f8      	bne.n	8000992 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	2340      	movs	r3, #64	; 0x40
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2302      	movs	r3, #2
 80009ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b0:	2300      	movs	r3, #0
 80009b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009b4:	2304      	movs	r3, #4
 80009b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009b8:	233c      	movs	r3, #60	; 0x3c
 80009ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009bc:	2302      	movs	r3, #2
 80009be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80009c0:	2306      	movs	r3, #6
 80009c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009c8:	230c      	movs	r3, #12
 80009ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d8:	4618      	mov	r0, r3
 80009da:	f004 fbf7 	bl	80051cc <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009e4:	f000 ff41 	bl	800186a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e8:	233f      	movs	r3, #63	; 0x3f
 80009ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ec:	2303      	movs	r3, #3
 80009ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009f4:	2308      	movs	r3, #8
 80009f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009f8:	2340      	movs	r3, #64	; 0x40
 80009fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a06:	2340      	movs	r3, #64	; 0x40
 8000a08:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f004 ffec 	bl	80059ec <HAL_RCC_ClockConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a1a:	f000 ff26 	bl	800186a <Error_Handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	3770      	adds	r7, #112	; 0x70
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	58024800 	.word	0x58024800
 8000a2c:	58000400 	.word	0x58000400

08000a30 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <MX_CRC_Init+0x3c>)
 8000a36:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <MX_CRC_Init+0x40>)
 8000a38:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_CRC_Init+0x3c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MX_CRC_Init+0x3c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_CRC_Init+0x3c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <MX_CRC_Init+0x3c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_CRC_Init+0x3c>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_CRC_Init+0x3c>)
 8000a5a:	f001 fe8b 	bl	8002774 <HAL_CRC_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a64:	f000 ff01 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000428 	.word	0x20000428
 8000a70:	58024c00 	.word	0x58024c00

08000a74 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a78:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000a7a:	4a28      	ldr	r2, [pc, #160]	; (8000b1c <MX_SPI3_Init+0xa8>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000a80:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a86:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000a8e:	2203      	movs	r2, #3
 8000a90:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000aa0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000aa4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_SPI3_Init+0xa4>)
 8000b04:	f006 fe60 	bl	80077c8 <HAL_SPI_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000b0e:	f000 feac 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000055c 	.word	0x2000055c
 8000b1c:	40003c00 	.word	0x40003c00

08000b20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09a      	sub	sp, #104	; 0x68
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	222c      	movs	r2, #44	; 0x2c
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f00a f9ce 	bl	800aefc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b60:	4b44      	ldr	r3, [pc, #272]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000b62:	4a45      	ldr	r2, [pc, #276]	; (8000c78 <MX_TIM1_Init+0x158>)
 8000b64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8000b66:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000b68:	22ef      	movs	r2, #239	; 0xef
 8000b6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 8000b72:	4b40      	ldr	r3, [pc, #256]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000b74:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000b78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b80:	4b3c      	ldr	r3, [pc, #240]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b8c:	4839      	ldr	r0, [pc, #228]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000b8e:	f006 ff38 	bl	8007a02 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b98:	f000 fe67 	bl	800186a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ba2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4832      	ldr	r0, [pc, #200]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000baa:	f007 fa11 	bl	8007fd0 <HAL_TIM_ConfigClockSource>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000bb4:	f000 fe59 	bl	800186a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bb8:	482e      	ldr	r0, [pc, #184]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000bba:	f006 ff79 	bl	8007ab0 <HAL_TIM_PWM_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000bc4:	f000 fe51 	bl	800186a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4826      	ldr	r0, [pc, #152]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000bdc:	f007 ff1a 	bl	8008a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000be6:	f000 fe40 	bl	800186a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bea:	2360      	movs	r3, #96	; 0x60
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000bee:	f240 1339 	movw	r3, #313	; 0x139
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4818      	ldr	r0, [pc, #96]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000c12:	f007 f8cd 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000c1c:	f000 fe25 	bl	800186a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	4619      	mov	r1, r3
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000c56:	f007 ff65 	bl	8008b24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000c60:	f000 fe03 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <MX_TIM1_Init+0x154>)
 8000c66:	f000 ff67 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 8000c6a:	bf00      	nop
 8000c6c:	3768      	adds	r7, #104	; 0x68
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000065c 	.word	0x2000065c
 8000c78:	40010000 	.word	0x40010000

08000c7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	; 0x38
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <MX_TIM2_Init+0xec>)
 8000cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000cb6:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <MX_TIM2_Init+0xec>)
 8000cb8:	22ef      	movs	r2, #239	; 0xef
 8000cba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <MX_TIM2_Init+0xec>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8000cc2:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <MX_TIM2_Init+0xec>)
 8000cc4:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000cc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <MX_TIM2_Init+0xec>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <MX_TIM2_Init+0xec>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cd6:	4824      	ldr	r0, [pc, #144]	; (8000d68 <MX_TIM2_Init+0xec>)
 8000cd8:	f006 fe93 	bl	8007a02 <HAL_TIM_Base_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ce2:	f000 fdc2 	bl	800186a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481d      	ldr	r0, [pc, #116]	; (8000d68 <MX_TIM2_Init+0xec>)
 8000cf4:	f007 f96c 	bl	8007fd0 <HAL_TIM_ConfigClockSource>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000cfe:	f000 fdb4 	bl	800186a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d02:	4819      	ldr	r0, [pc, #100]	; (8000d68 <MX_TIM2_Init+0xec>)
 8000d04:	f006 fed4 	bl	8007ab0 <HAL_TIM_PWM_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d0e:	f000 fdac 	bl	800186a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4811      	ldr	r0, [pc, #68]	; (8000d68 <MX_TIM2_Init+0xec>)
 8000d22:	f007 fe77 	bl	8008a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d2c:	f000 fd9d 	bl	800186a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d30:	2360      	movs	r3, #96	; 0x60
 8000d32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000d34:	f240 1339 	movw	r3, #313	; 0x139
 8000d38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d42:	463b      	mov	r3, r7
 8000d44:	2208      	movs	r2, #8
 8000d46:	4619      	mov	r1, r3
 8000d48:	4807      	ldr	r0, [pc, #28]	; (8000d68 <MX_TIM2_Init+0xec>)
 8000d4a:	f007 f831 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000d54:	f000 fd89 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d58:	4803      	ldr	r0, [pc, #12]	; (8000d68 <MX_TIM2_Init+0xec>)
 8000d5a:	f000 feed 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 8000d5e:	bf00      	nop
 8000d60:	3738      	adds	r7, #56	; 0x38
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200007b0 	.word	0x200007b0

08000d6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	; 0x38
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
 8000d9a:	615a      	str	r2, [r3, #20]
 8000d9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <MX_TIM3_Init+0xe8>)
 8000da0:	4a2d      	ldr	r2, [pc, #180]	; (8000e58 <MX_TIM3_Init+0xec>)
 8000da2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000da4:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <MX_TIM3_Init+0xe8>)
 8000da6:	22ef      	movs	r2, #239	; 0xef
 8000da8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <MX_TIM3_Init+0xe8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <MX_TIM3_Init+0xe8>)
 8000db2:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000db6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db8:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <MX_TIM3_Init+0xe8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <MX_TIM3_Init+0xe8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dc4:	4823      	ldr	r0, [pc, #140]	; (8000e54 <MX_TIM3_Init+0xe8>)
 8000dc6:	f006 fe1c 	bl	8007a02 <HAL_TIM_Base_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000dd0:	f000 fd4b 	bl	800186a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dde:	4619      	mov	r1, r3
 8000de0:	481c      	ldr	r0, [pc, #112]	; (8000e54 <MX_TIM3_Init+0xe8>)
 8000de2:	f007 f8f5 	bl	8007fd0 <HAL_TIM_ConfigClockSource>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000dec:	f000 fd3d 	bl	800186a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000df0:	4818      	ldr	r0, [pc, #96]	; (8000e54 <MX_TIM3_Init+0xe8>)
 8000df2:	f006 fe5d 	bl	8007ab0 <HAL_TIM_PWM_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000dfc:	f000 fd35 	bl	800186a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4811      	ldr	r0, [pc, #68]	; (8000e54 <MX_TIM3_Init+0xe8>)
 8000e10:	f007 fe00 	bl	8008a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e1a:	f000 fd26 	bl	800186a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1e:	2360      	movs	r3, #96	; 0x60
 8000e20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000e22:	f240 1339 	movw	r3, #313	; 0x139
 8000e26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	4619      	mov	r1, r3
 8000e36:	4807      	ldr	r0, [pc, #28]	; (8000e54 <MX_TIM3_Init+0xe8>)
 8000e38:	f006 ffba 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000e42:	f000 fd12 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e46:	4803      	ldr	r0, [pc, #12]	; (8000e54 <MX_TIM3_Init+0xe8>)
 8000e48:	f000 fe76 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 8000e4c:	bf00      	nop
 8000e4e:	3738      	adds	r7, #56	; 0x38
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000510 	.word	0x20000510
 8000e58:	40000400 	.word	0x40000400

08000e5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	; 0x38
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	615a      	str	r2, [r3, #20]
 8000e8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <MX_TIM4_Init+0xe8>)
 8000e90:	4a2d      	ldr	r2, [pc, #180]	; (8000f48 <MX_TIM4_Init+0xec>)
 8000e92:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8000e94:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <MX_TIM4_Init+0xe8>)
 8000e96:	22ef      	movs	r2, #239	; 0xef
 8000e98:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <MX_TIM4_Init+0xe8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8000ea0:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <MX_TIM4_Init+0xe8>)
 8000ea2:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000ea6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <MX_TIM4_Init+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <MX_TIM4_Init+0xe8>)
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eb4:	4823      	ldr	r0, [pc, #140]	; (8000f44 <MX_TIM4_Init+0xe8>)
 8000eb6:	f006 fda4 	bl	8007a02 <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ec0:	f000 fcd3 	bl	800186a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481c      	ldr	r0, [pc, #112]	; (8000f44 <MX_TIM4_Init+0xe8>)
 8000ed2:	f007 f87d 	bl	8007fd0 <HAL_TIM_ConfigClockSource>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000edc:	f000 fcc5 	bl	800186a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ee0:	4818      	ldr	r0, [pc, #96]	; (8000f44 <MX_TIM4_Init+0xe8>)
 8000ee2:	f006 fde5 	bl	8007ab0 <HAL_TIM_PWM_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000eec:	f000 fcbd 	bl	800186a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4811      	ldr	r0, [pc, #68]	; (8000f44 <MX_TIM4_Init+0xe8>)
 8000f00:	f007 fd88 	bl	8008a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f0a:	f000 fcae 	bl	800186a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0e:	2360      	movs	r3, #96	; 0x60
 8000f10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000f12:	f240 1339 	movw	r3, #313	; 0x139
 8000f16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	2208      	movs	r2, #8
 8000f24:	4619      	mov	r1, r3
 8000f26:	4807      	ldr	r0, [pc, #28]	; (8000f44 <MX_TIM4_Init+0xe8>)
 8000f28:	f006 ff42 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000f32:	f000 fc9a 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f36:	4803      	ldr	r0, [pc, #12]	; (8000f44 <MX_TIM4_Init+0xe8>)
 8000f38:	f000 fdfe 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 8000f3c:	bf00      	nop
 8000f3e:	3738      	adds	r7, #56	; 0x38
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000020c 	.word	0x2000020c
 8000f48:	40000800 	.word	0x40000800

08000f4c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <MX_TIM5_Init+0x94>)
 8000f6c:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <MX_TIM5_Init+0x98>)
 8000f6e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_TIM5_Init+0x94>)
 8000f72:	22ef      	movs	r2, #239	; 0xef
 8000f74:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_TIM5_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_TIM5_Init+0x94>)
 8000f7e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000f82:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_TIM5_Init+0x94>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_TIM5_Init+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f90:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <MX_TIM5_Init+0x94>)
 8000f92:	f006 fd36 	bl	8007a02 <HAL_TIM_Base_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000f9c:	f000 fc65 	bl	800186a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	4619      	mov	r1, r3
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <MX_TIM5_Init+0x94>)
 8000fae:	f007 f80f 	bl	8007fd0 <HAL_TIM_ConfigClockSource>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000fb8:	f000 fc57 	bl	800186a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_TIM5_Init+0x94>)
 8000fca:	f007 fd23 	bl	8008a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000fd4:	f000 fc49 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	3720      	adds	r7, #32
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200004c4 	.word	0x200004c4
 8000fe4:	40000c00 	.word	0x40000c00

08000fe8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_TIM12_Init+0x6c>)
 8000ffc:	4a16      	ldr	r2, [pc, #88]	; (8001058 <MX_TIM12_Init+0x70>)
 8000ffe:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 240-1;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_TIM12_Init+0x6c>)
 8001002:	22ef      	movs	r2, #239	; 0xef
 8001004:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_TIM12_Init+0x6c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 500-1;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_TIM12_Init+0x6c>)
 800100e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001012:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_TIM12_Init+0x6c>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_TIM12_Init+0x6c>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <MX_TIM12_Init+0x6c>)
 8001022:	f006 fcee 	bl	8007a02 <HAL_TIM_Base_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 800102c:	f000 fc1d 	bl	800186a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001034:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <MX_TIM12_Init+0x6c>)
 800103c:	f006 ffc8 	bl	8007fd0 <HAL_TIM_ConfigClockSource>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8001046:	f000 fc10 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200007fc 	.word	0x200007fc
 8001058:	40001800 	.word	0x40001800

0800105c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09a      	sub	sp, #104	; 0x68
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	222c      	movs	r2, #44	; 0x2c
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f009 ff30 	bl	800aefc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800109c:	4b3f      	ldr	r3, [pc, #252]	; (800119c <MX_TIM15_Init+0x140>)
 800109e:	4a40      	ldr	r2, [pc, #256]	; (80011a0 <MX_TIM15_Init+0x144>)
 80010a0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80010a2:	4b3e      	ldr	r3, [pc, #248]	; (800119c <MX_TIM15_Init+0x140>)
 80010a4:	22ef      	movs	r2, #239	; 0xef
 80010a6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b3c      	ldr	r3, [pc, #240]	; (800119c <MX_TIM15_Init+0x140>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 80010ae:	4b3b      	ldr	r3, [pc, #236]	; (800119c <MX_TIM15_Init+0x140>)
 80010b0:	f44f 721c 	mov.w	r2, #624	; 0x270
 80010b4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b39      	ldr	r3, [pc, #228]	; (800119c <MX_TIM15_Init+0x140>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010bc:	4b37      	ldr	r3, [pc, #220]	; (800119c <MX_TIM15_Init+0x140>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	4b36      	ldr	r3, [pc, #216]	; (800119c <MX_TIM15_Init+0x140>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80010c8:	4834      	ldr	r0, [pc, #208]	; (800119c <MX_TIM15_Init+0x140>)
 80010ca:	f006 fc9a 	bl	8007a02 <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80010d4:	f000 fbc9 	bl	800186a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80010de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010e2:	4619      	mov	r1, r3
 80010e4:	482d      	ldr	r0, [pc, #180]	; (800119c <MX_TIM15_Init+0x140>)
 80010e6:	f006 ff73 	bl	8007fd0 <HAL_TIM_ConfigClockSource>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80010f0:	f000 fbbb 	bl	800186a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80010f4:	4829      	ldr	r0, [pc, #164]	; (800119c <MX_TIM15_Init+0x140>)
 80010f6:	f006 fcdb 	bl	8007ab0 <HAL_TIM_PWM_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001100:	f000 fbb3 	bl	800186a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800110c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001110:	4619      	mov	r1, r3
 8001112:	4822      	ldr	r0, [pc, #136]	; (800119c <MX_TIM15_Init+0x140>)
 8001114:	f007 fc7e 	bl	8008a14 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800111e:	f000 fba4 	bl	800186a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001122:	2360      	movs	r3, #96	; 0x60
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001126:	f240 1339 	movw	r3, #313	; 0x139
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112c:	2300      	movs	r3, #0
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001130:	2300      	movs	r3, #0
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001144:	2204      	movs	r2, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4814      	ldr	r0, [pc, #80]	; (800119c <MX_TIM15_Init+0x140>)
 800114a:	f006 fe31 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8001154:	f000 fb89 	bl	800186a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800116c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001170:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4619      	mov	r1, r3
 800117e:	4807      	ldr	r0, [pc, #28]	; (800119c <MX_TIM15_Init+0x140>)
 8001180:	f007 fcd0 	bl	8008b24 <HAL_TIMEx_ConfigBreakDeadTime>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 800118a:	f000 fb6e 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800118e:	4803      	ldr	r0, [pc, #12]	; (800119c <MX_TIM15_Init+0x140>)
 8001190:	f000 fcd2 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 8001194:	bf00      	nop
 8001196:	3768      	adds	r7, #104	; 0x68
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200003dc 	.word	0x200003dc
 80011a0:	40014000 	.word	0x40014000

080011a4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <MX_UART4_Init+0x94>)
 80011aa:	4a24      	ldr	r2, [pc, #144]	; (800123c <MX_UART4_Init+0x98>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80011ae:	4b22      	ldr	r3, [pc, #136]	; (8001238 <MX_UART4_Init+0x94>)
 80011b0:	4a23      	ldr	r2, [pc, #140]	; (8001240 <MX_UART4_Init+0x9c>)
 80011b2:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <MX_UART4_Init+0x94>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_UART4_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <MX_UART4_Init+0x94>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_UART4_Init+0x94>)
 80011c8:	220c      	movs	r2, #12
 80011ca:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_UART4_Init+0x94>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <MX_UART4_Init+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <MX_UART4_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <MX_UART4_Init+0x94>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_UART4_Init+0x94>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80011ea:	2300      	movs	r3, #0
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	4811      	ldr	r0, [pc, #68]	; (8001238 <MX_UART4_Init+0x94>)
 80011f2:	f009 fccd 	bl	800ab90 <HAL_RS485Ex_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 80011fc:	f000 fb35 	bl	800186a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001200:	2100      	movs	r1, #0
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <MX_UART4_Init+0x94>)
 8001204:	f009 fd85 	bl	800ad12 <HAL_UARTEx_SetTxFifoThreshold>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 800120e:	f000 fb2c 	bl	800186a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001212:	2100      	movs	r1, #0
 8001214:	4808      	ldr	r0, [pc, #32]	; (8001238 <MX_UART4_Init+0x94>)
 8001216:	f009 fdba 	bl	800ad8e <HAL_UARTEx_SetRxFifoThreshold>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_UART4_Init+0x80>
  {
    Error_Handler();
 8001220:	f000 fb23 	bl	800186a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_UART4_Init+0x94>)
 8001226:	f009 fd3b 	bl	800aca0 <HAL_UARTEx_DisableFifoMode>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_UART4_Init+0x90>
  {
    Error_Handler();
 8001230:	f000 fb1b 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200006a8 	.word	0x200006a8
 800123c:	40004c00 	.word	0x40004c00
 8001240:	001e8480 	.word	0x001e8480

08001244 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 800124a:	4a23      	ldr	r2, [pc, #140]	; (80012d8 <MX_USART3_UART_Init+0x94>)
 800124c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001288:	2200      	movs	r2, #0
 800128a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800128c:	4811      	ldr	r0, [pc, #68]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 800128e:	f007 fce5 	bl	8008c5c <HAL_UART_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001298:	f000 fae7 	bl	800186a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800129c:	2100      	movs	r1, #0
 800129e:	480d      	ldr	r0, [pc, #52]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 80012a0:	f009 fd37 	bl	800ad12 <HAL_UARTEx_SetTxFifoThreshold>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012aa:	f000 fade 	bl	800186a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ae:	2100      	movs	r1, #0
 80012b0:	4808      	ldr	r0, [pc, #32]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 80012b2:	f009 fd6c 	bl	800ad8e <HAL_UARTEx_SetRxFifoThreshold>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012bc:	f000 fad5 	bl	800186a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 80012c2:	f009 fced 	bl	800aca0 <HAL_UARTEx_DisableFifoMode>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012cc:	f000 facd 	bl	800186a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200002d0 	.word	0x200002d0
 80012d8:	40004800 	.word	0x40004800

080012dc <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream3
  *   hdma_memtomem_dma2_stream4
  *   hdma_memtomem_dma2_stream5
  */
static void MX_DMA_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012e2:	4b9b      	ldr	r3, [pc, #620]	; (8001550 <MX_DMA_Init+0x274>)
 80012e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012e8:	4a99      	ldr	r2, [pc, #612]	; (8001550 <MX_DMA_Init+0x274>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012f2:	4b97      	ldr	r3, [pc, #604]	; (8001550 <MX_DMA_Init+0x274>)
 80012f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001300:	4b93      	ldr	r3, [pc, #588]	; (8001550 <MX_DMA_Init+0x274>)
 8001302:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001306:	4a92      	ldr	r2, [pc, #584]	; (8001550 <MX_DMA_Init+0x274>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001310:	4b8f      	ldr	r3, [pc, #572]	; (8001550 <MX_DMA_Init+0x274>)
 8001312:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_stream3 on DMA1_Stream3 */
  hdma_memtomem_dma1_stream3.Instance = DMA1_Stream3;
 800131e:	4b8d      	ldr	r3, [pc, #564]	; (8001554 <MX_DMA_Init+0x278>)
 8001320:	4a8d      	ldr	r2, [pc, #564]	; (8001558 <MX_DMA_Init+0x27c>)
 8001322:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 8001324:	4b8b      	ldr	r3, [pc, #556]	; (8001554 <MX_DMA_Init+0x278>)
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800132a:	4b8a      	ldr	r3, [pc, #552]	; (8001554 <MX_DMA_Init+0x278>)
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001330:	4b88      	ldr	r3, [pc, #544]	; (8001554 <MX_DMA_Init+0x278>)
 8001332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001336:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream3.Init.MemInc = DMA_MINC_ENABLE;
 8001338:	4b86      	ldr	r3, [pc, #536]	; (8001554 <MX_DMA_Init+0x278>)
 800133a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800133e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001340:	4b84      	ldr	r3, [pc, #528]	; (8001554 <MX_DMA_Init+0x278>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001346:	4b83      	ldr	r3, [pc, #524]	; (8001554 <MX_DMA_Init+0x278>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream3.Init.Mode = DMA_NORMAL;
 800134c:	4b81      	ldr	r3, [pc, #516]	; (8001554 <MX_DMA_Init+0x278>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream3.Init.Priority = DMA_PRIORITY_LOW;
 8001352:	4b80      	ldr	r3, [pc, #512]	; (8001554 <MX_DMA_Init+0x278>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001358:	4b7e      	ldr	r3, [pc, #504]	; (8001554 <MX_DMA_Init+0x278>)
 800135a:	2204      	movs	r2, #4
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800135e:	4b7d      	ldr	r3, [pc, #500]	; (8001554 <MX_DMA_Init+0x278>)
 8001360:	2203      	movs	r2, #3
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001364:	4b7b      	ldr	r3, [pc, #492]	; (8001554 <MX_DMA_Init+0x278>)
 8001366:	2200      	movs	r2, #0
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800136a:	4b7a      	ldr	r3, [pc, #488]	; (8001554 <MX_DMA_Init+0x278>)
 800136c:	2200      	movs	r2, #0
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream3) != HAL_OK)
 8001370:	4878      	ldr	r0, [pc, #480]	; (8001554 <MX_DMA_Init+0x278>)
 8001372:	f001 fae9 	bl	8002948 <HAL_DMA_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 800137c:	f000 fa75 	bl	800186a <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 8001380:	4b76      	ldr	r3, [pc, #472]	; (800155c <MX_DMA_Init+0x280>)
 8001382:	4a77      	ldr	r2, [pc, #476]	; (8001560 <MX_DMA_Init+0x284>)
 8001384:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Request = DMA_REQUEST_MEM2MEM;
 8001386:	4b75      	ldr	r3, [pc, #468]	; (800155c <MX_DMA_Init+0x280>)
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800138c:	4b73      	ldr	r3, [pc, #460]	; (800155c <MX_DMA_Init+0x280>)
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 8001392:	4b72      	ldr	r3, [pc, #456]	; (800155c <MX_DMA_Init+0x280>)
 8001394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001398:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 800139a:	4b70      	ldr	r3, [pc, #448]	; (800155c <MX_DMA_Init+0x280>)
 800139c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a0:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013a2:	4b6e      	ldr	r3, [pc, #440]	; (800155c <MX_DMA_Init+0x280>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a8:	4b6c      	ldr	r3, [pc, #432]	; (800155c <MX_DMA_Init+0x280>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 80013ae:	4b6b      	ldr	r3, [pc, #428]	; (800155c <MX_DMA_Init+0x280>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_LOW;
 80013b4:	4b69      	ldr	r3, [pc, #420]	; (800155c <MX_DMA_Init+0x280>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013ba:	4b68      	ldr	r3, [pc, #416]	; (800155c <MX_DMA_Init+0x280>)
 80013bc:	2204      	movs	r2, #4
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013c0:	4b66      	ldr	r3, [pc, #408]	; (800155c <MX_DMA_Init+0x280>)
 80013c2:	2203      	movs	r2, #3
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 80013c6:	4b65      	ldr	r3, [pc, #404]	; (800155c <MX_DMA_Init+0x280>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80013cc:	4b63      	ldr	r3, [pc, #396]	; (800155c <MX_DMA_Init+0x280>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 80013d2:	4862      	ldr	r0, [pc, #392]	; (800155c <MX_DMA_Init+0x280>)
 80013d4:	f001 fab8 	bl	8002948 <HAL_DMA_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_DMA_Init+0x106>
  {
    Error_Handler( );
 80013de:	f000 fa44 	bl	800186a <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 80013e2:	4b60      	ldr	r3, [pc, #384]	; (8001564 <MX_DMA_Init+0x288>)
 80013e4:	4a60      	ldr	r2, [pc, #384]	; (8001568 <MX_DMA_Init+0x28c>)
 80013e6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 80013e8:	4b5e      	ldr	r3, [pc, #376]	; (8001564 <MX_DMA_Init+0x288>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80013ee:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <MX_DMA_Init+0x288>)
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 80013f4:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <MX_DMA_Init+0x288>)
 80013f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fa:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_ENABLE;
 80013fc:	4b59      	ldr	r3, [pc, #356]	; (8001564 <MX_DMA_Init+0x288>)
 80013fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001402:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001404:	4b57      	ldr	r3, [pc, #348]	; (8001564 <MX_DMA_Init+0x288>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800140a:	4b56      	ldr	r3, [pc, #344]	; (8001564 <MX_DMA_Init+0x288>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 8001410:	4b54      	ldr	r3, [pc, #336]	; (8001564 <MX_DMA_Init+0x288>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_LOW;
 8001416:	4b53      	ldr	r3, [pc, #332]	; (8001564 <MX_DMA_Init+0x288>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800141c:	4b51      	ldr	r3, [pc, #324]	; (8001564 <MX_DMA_Init+0x288>)
 800141e:	2204      	movs	r2, #4
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001422:	4b50      	ldr	r3, [pc, #320]	; (8001564 <MX_DMA_Init+0x288>)
 8001424:	2203      	movs	r2, #3
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001428:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <MX_DMA_Init+0x288>)
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800142e:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <MX_DMA_Init+0x288>)
 8001430:	2200      	movs	r2, #0
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 8001434:	484b      	ldr	r0, [pc, #300]	; (8001564 <MX_DMA_Init+0x288>)
 8001436:	f001 fa87 	bl	8002948 <HAL_DMA_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_DMA_Init+0x168>
  {
    Error_Handler( );
 8001440:	f000 fa13 	bl	800186a <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream4 on DMA2_Stream4 */
  hdma_memtomem_dma2_stream4.Instance = DMA2_Stream4;
 8001444:	4b49      	ldr	r3, [pc, #292]	; (800156c <MX_DMA_Init+0x290>)
 8001446:	4a4a      	ldr	r2, [pc, #296]	; (8001570 <MX_DMA_Init+0x294>)
 8001448:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream4.Init.Request = DMA_REQUEST_MEM2MEM;
 800144a:	4b48      	ldr	r3, [pc, #288]	; (800156c <MX_DMA_Init+0x290>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <MX_DMA_Init+0x290>)
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream4.Init.PeriphInc = DMA_PINC_ENABLE;
 8001456:	4b45      	ldr	r3, [pc, #276]	; (800156c <MX_DMA_Init+0x290>)
 8001458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145c:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream4.Init.MemInc = DMA_MINC_ENABLE;
 800145e:	4b43      	ldr	r3, [pc, #268]	; (800156c <MX_DMA_Init+0x290>)
 8001460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001464:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <MX_DMA_Init+0x290>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800146c:	4b3f      	ldr	r3, [pc, #252]	; (800156c <MX_DMA_Init+0x290>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream4.Init.Mode = DMA_NORMAL;
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <MX_DMA_Init+0x290>)
 8001474:	2200      	movs	r2, #0
 8001476:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream4.Init.Priority = DMA_PRIORITY_LOW;
 8001478:	4b3c      	ldr	r3, [pc, #240]	; (800156c <MX_DMA_Init+0x290>)
 800147a:	2200      	movs	r2, #0
 800147c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <MX_DMA_Init+0x290>)
 8001480:	2204      	movs	r2, #4
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <MX_DMA_Init+0x290>)
 8001486:	2203      	movs	r2, #3
 8001488:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream4.Init.MemBurst = DMA_MBURST_SINGLE;
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <MX_DMA_Init+0x290>)
 800148c:	2200      	movs	r2, #0
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <MX_DMA_Init+0x290>)
 8001492:	2200      	movs	r2, #0
 8001494:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream4) != HAL_OK)
 8001496:	4835      	ldr	r0, [pc, #212]	; (800156c <MX_DMA_Init+0x290>)
 8001498:	f001 fa56 	bl	8002948 <HAL_DMA_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_DMA_Init+0x1ca>
  {
    Error_Handler( );
 80014a2:	f000 f9e2 	bl	800186a <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream5 on DMA2_Stream5 */
  hdma_memtomem_dma2_stream5.Instance = DMA2_Stream5;
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <MX_DMA_Init+0x298>)
 80014a8:	4a33      	ldr	r2, [pc, #204]	; (8001578 <MX_DMA_Init+0x29c>)
 80014aa:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream5.Init.Request = DMA_REQUEST_MEM2MEM;
 80014ac:	4b31      	ldr	r3, [pc, #196]	; (8001574 <MX_DMA_Init+0x298>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream5.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80014b2:	4b30      	ldr	r3, [pc, #192]	; (8001574 <MX_DMA_Init+0x298>)
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream5.Init.PeriphInc = DMA_PINC_ENABLE;
 80014b8:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <MX_DMA_Init+0x298>)
 80014ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014be:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream5.Init.MemInc = DMA_MINC_ENABLE;
 80014c0:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <MX_DMA_Init+0x298>)
 80014c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c6:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream5.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <MX_DMA_Init+0x298>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream5.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ce:	4b29      	ldr	r3, [pc, #164]	; (8001574 <MX_DMA_Init+0x298>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream5.Init.Mode = DMA_NORMAL;
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <MX_DMA_Init+0x298>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream5.Init.Priority = DMA_PRIORITY_LOW;
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <MX_DMA_Init+0x298>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream5.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <MX_DMA_Init+0x298>)
 80014e2:	2204      	movs	r2, #4
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream5.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <MX_DMA_Init+0x298>)
 80014e8:	2203      	movs	r2, #3
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream5.Init.MemBurst = DMA_MBURST_SINGLE;
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <MX_DMA_Init+0x298>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream5.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MX_DMA_Init+0x298>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream5) != HAL_OK)
 80014f8:	481e      	ldr	r0, [pc, #120]	; (8001574 <MX_DMA_Init+0x298>)
 80014fa:	f001 fa25 	bl	8002948 <HAL_DMA_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_DMA_Init+0x22c>
  {
    Error_Handler( );
 8001504:	f000 f9b1 	bl	800186a <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	200c      	movs	r0, #12
 800150e:	f001 f8fc 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001512:	200c      	movs	r0, #12
 8001514:	f001 f913 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	200d      	movs	r0, #13
 800151e:	f001 f8f4 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001522:	200d      	movs	r0, #13
 8001524:	f001 f90b 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	2038      	movs	r0, #56	; 0x38
 800152e:	f001 f8ec 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001532:	2038      	movs	r0, #56	; 0x38
 8001534:	f001 f903 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	2039      	movs	r0, #57	; 0x39
 800153e:	f001 f8e4 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001542:	2039      	movs	r0, #57	; 0x39
 8001544:	f001 f8fb 	bl	800273e <HAL_NVIC_EnableIRQ>

}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	58024400 	.word	0x58024400
 8001554:	20000360 	.word	0x20000360
 8001558:	40020058 	.word	0x40020058
 800155c:	20000738 	.word	0x20000738
 8001560:	40020440 	.word	0x40020440
 8001564:	200005e4 	.word	0x200005e4
 8001568:	40020458 	.word	0x40020458
 800156c:	200000a4 	.word	0x200000a4
 8001570:	40020470 	.word	0x40020470
 8001574:	2000011c 	.word	0x2000011c
 8001578:	40020488 	.word	0x40020488

0800157c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	; 0x30
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001592:	4b7b      	ldr	r3, [pc, #492]	; (8001780 <MX_GPIO_Init+0x204>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	4a79      	ldr	r2, [pc, #484]	; (8001780 <MX_GPIO_Init+0x204>)
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a2:	4b77      	ldr	r3, [pc, #476]	; (8001780 <MX_GPIO_Init+0x204>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b0:	4b73      	ldr	r3, [pc, #460]	; (8001780 <MX_GPIO_Init+0x204>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b6:	4a72      	ldr	r2, [pc, #456]	; (8001780 <MX_GPIO_Init+0x204>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c0:	4b6f      	ldr	r3, [pc, #444]	; (8001780 <MX_GPIO_Init+0x204>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ce:	4b6c      	ldr	r3, [pc, #432]	; (8001780 <MX_GPIO_Init+0x204>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d4:	4a6a      	ldr	r2, [pc, #424]	; (8001780 <MX_GPIO_Init+0x204>)
 80015d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015de:	4b68      	ldr	r3, [pc, #416]	; (8001780 <MX_GPIO_Init+0x204>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b64      	ldr	r3, [pc, #400]	; (8001780 <MX_GPIO_Init+0x204>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f2:	4a63      	ldr	r2, [pc, #396]	; (8001780 <MX_GPIO_Init+0x204>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fc:	4b60      	ldr	r3, [pc, #384]	; (8001780 <MX_GPIO_Init+0x204>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	4b5d      	ldr	r3, [pc, #372]	; (8001780 <MX_GPIO_Init+0x204>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001610:	4a5b      	ldr	r2, [pc, #364]	; (8001780 <MX_GPIO_Init+0x204>)
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800161a:	4b59      	ldr	r3, [pc, #356]	; (8001780 <MX_GPIO_Init+0x204>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001628:	4b55      	ldr	r3, [pc, #340]	; (8001780 <MX_GPIO_Init+0x204>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162e:	4a54      	ldr	r2, [pc, #336]	; (8001780 <MX_GPIO_Init+0x204>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001638:	4b51      	ldr	r3, [pc, #324]	; (8001780 <MX_GPIO_Init+0x204>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001646:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <MX_GPIO_Init+0x204>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164c:	4a4c      	ldr	r2, [pc, #304]	; (8001780 <MX_GPIO_Init+0x204>)
 800164e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <MX_GPIO_Init+0x204>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001664:	2200      	movs	r2, #0
 8001666:	f644 2121 	movw	r1, #18977	; 0x4a21
 800166a:	4846      	ldr	r0, [pc, #280]	; (8001784 <MX_GPIO_Init+0x208>)
 800166c:	f003 fd40 	bl	80050f0 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001676:	4844      	ldr	r0, [pc, #272]	; (8001788 <MX_GPIO_Init+0x20c>)
 8001678:	f003 fd3a 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001682:	4842      	ldr	r0, [pc, #264]	; (800178c <MX_GPIO_Init+0x210>)
 8001684:	f003 fd34 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800168e:	4840      	ldr	r0, [pc, #256]	; (8001790 <MX_GPIO_Init+0x214>)
 8001690:	f003 fd2e 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001694:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001698:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4835      	ldr	r0, [pc, #212]	; (8001784 <MX_GPIO_Init+0x208>)
 80016ae:	f003 fb6f 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin LM6_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM6_Pin;
 80016b2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b8:	4b36      	ldr	r3, [pc, #216]	; (8001794 <MX_GPIO_Init+0x218>)
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	4830      	ldr	r0, [pc, #192]	; (8001788 <MX_GPIO_Init+0x20c>)
 80016c8:	f003 fb62 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80016cc:	f24c 0302 	movw	r3, #49154	; 0xc002
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4828      	ldr	r0, [pc, #160]	; (8001788 <MX_GPIO_Init+0x20c>)
 80016e6:	f003 fb53 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80016ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	4822      	ldr	r0, [pc, #136]	; (800178c <MX_GPIO_Init+0x210>)
 8001704:	f003 fb44 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	481b      	ldr	r0, [pc, #108]	; (8001790 <MX_GPIO_Init+0x214>)
 8001722:	f003 fb35 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001726:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <MX_GPIO_Init+0x218>)
 800172e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	4817      	ldr	r0, [pc, #92]	; (8001798 <MX_GPIO_Init+0x21c>)
 800173c:	f003 fb28 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001740:	23c0      	movs	r3, #192	; 0xc0
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <MX_GPIO_Init+0x218>)
 8001746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	4619      	mov	r1, r3
 8001752:	480c      	ldr	r0, [pc, #48]	; (8001784 <MX_GPIO_Init+0x208>)
 8001754:	f003 fb1c 	bl	8004d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2103      	movs	r1, #3
 800175c:	2017      	movs	r0, #23
 800175e:	f000 ffd4 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001762:	2017      	movs	r0, #23
 8001764:	f000 ffeb 	bl	800273e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2103      	movs	r1, #3
 800176c:	2028      	movs	r0, #40	; 0x28
 800176e:	f000 ffcc 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001772:	2028      	movs	r0, #40	; 0x28
 8001774:	f000 ffe3 	bl	800273e <HAL_NVIC_EnableIRQ>

}
 8001778:	bf00      	nop
 800177a:	3730      	adds	r7, #48	; 0x30
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	58024400 	.word	0x58024400
 8001784:	58020400 	.word	0x58020400
 8001788:	58021000 	.word	0x58021000
 800178c:	58020c00 	.word	0x58020c00
 8001790:	58020800 	.word	0x58020800
 8001794:	11110000 	.word	0x11110000
 8001798:	58021800 	.word	0x58021800

0800179c <__io_putchar>:
//{
//
//}
/** Usable for printf function **/
int __io_putchar(int ch)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart3, &*c, 1, 10);
 80017aa:	f107 010c 	add.w	r1, r7, #12
 80017ae:	230a      	movs	r3, #10
 80017b0:	2201      	movs	r2, #1
 80017b2:	4804      	ldr	r0, [pc, #16]	; (80017c4 <__io_putchar+0x28>)
 80017b4:	f007 faa2 	bl	8008cfc <HAL_UART_Transmit>
 return ch;
 80017b8:	687b      	ldr	r3, [r7, #4]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200002d0 	.word	0x200002d0

080017c8 <_write>:

int _write(int file,char *ptr, int len)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	e009      	b.n	80017ee <_write+0x26>
 {
 __io_putchar(*ptr++);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	60ba      	str	r2, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ffda 	bl	800179c <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	dbf1      	blt.n	80017da <_write+0x12>
 }
return len;
 80017f6:	687b      	ldr	r3, [r7, #4]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a06      	ldr	r2, [pc, #24]	; (8001824 <HAL_UART_RxCpltCallback+0x24>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d104      	bne.n	800181a <HAL_UART_RxCpltCallback+0x1a>
	{
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 8001810:	2204      	movs	r2, #4
 8001812:	4905      	ldr	r1, [pc, #20]	; (8001828 <HAL_UART_RxCpltCallback+0x28>)
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <HAL_UART_RxCpltCallback+0x24>)
 8001816:	f007 fbdb 	bl	8008fd0 <HAL_UART_Receive_IT>
	}
	if(huart == &huart4)
	{

	}
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200002d0 	.word	0x200002d0
 8001828:	200008c0 	.word	0x200008c0

0800182c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	if(huart == &huart4)
	{

	}
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]


}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  /* Timer12 Interrupt */
  if (htim == &htim12)
  {

  }
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186e:	b672      	cpsid	i
}
 8001870:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001872:	e7fe      	b.n	8001872 <Error_Handler+0x8>

08001874 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_MspInit+0x30>)
 800187c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001880:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_MspInit+0x30>)
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_MspInit+0x30>)
 800188c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	58024400 	.word	0x58024400

080018a8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <HAL_CRC_MspInit+0x3c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10e      	bne.n	80018d8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_CRC_MspInit+0x40>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c0:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <HAL_CRC_MspInit+0x40>)
 80018c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_CRC_MspInit+0x40>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	58024c00 	.word	0x58024c00
 80018e8:	58024400 	.word	0x58024400

080018ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0b8      	sub	sp, #224	; 0xe0
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	22bc      	movs	r2, #188	; 0xbc
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f009 faf5 	bl	800aefc <memset>
  if(hspi->Instance==SPI3)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a25      	ldr	r2, [pc, #148]	; (80019ac <HAL_SPI_MspInit+0xc0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d142      	bne.n	80019a2 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800191c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001920:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001922:	2300      	movs	r3, #0
 8001924:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4618      	mov	r0, r3
 800192c:	f004 fbea 	bl	8006104 <HAL_RCCEx_PeriphCLKConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001936:	f7ff ff98 	bl	800186a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 800193c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 8001942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001946:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 800194c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195e:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 800196a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001976:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800197a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001990:	2306      	movs	r3, #6
 8001992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001996:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_SPI_MspInit+0xc8>)
 800199e:	f003 f9f7 	bl	8004d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019a2:	bf00      	nop
 80019a4:	37e0      	adds	r7, #224	; 0xe0
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40003c00 	.word	0x40003c00
 80019b0:	58024400 	.word	0x58024400
 80019b4:	58020800 	.word	0x58020800

080019b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a55      	ldr	r2, [pc, #340]	; (8001b1c <HAL_TIM_Base_MspInit+0x164>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d10f      	bne.n	80019ea <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ca:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 80019cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019d0:	4a53      	ldr	r2, [pc, #332]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019da:	4b51      	ldr	r3, [pc, #324]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 80019dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80019e8:	e094      	b.n	8001b14 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f2:	d10f      	bne.n	8001a14 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f4:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 80019f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019fa:	4a49      	ldr	r2, [pc, #292]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a04:	4b46      	ldr	r3, [pc, #280]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	623b      	str	r3, [r7, #32]
 8001a10:	6a3b      	ldr	r3, [r7, #32]
}
 8001a12:	e07f      	b.n	8001b14 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM3)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a42      	ldr	r2, [pc, #264]	; (8001b24 <HAL_TIM_Base_MspInit+0x16c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10f      	bne.n	8001a3e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a1e:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a24:	4a3e      	ldr	r2, [pc, #248]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a2e:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
}
 8001a3c:	e06a      	b.n	8001b14 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM4)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a39      	ldr	r2, [pc, #228]	; (8001b28 <HAL_TIM_Base_MspInit+0x170>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d10f      	bne.n	8001a68 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a48:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a4e:	4a34      	ldr	r2, [pc, #208]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a58:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001a5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	61bb      	str	r3, [r7, #24]
 8001a64:	69bb      	ldr	r3, [r7, #24]
}
 8001a66:	e055      	b.n	8001b14 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM5)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a2f      	ldr	r2, [pc, #188]	; (8001b2c <HAL_TIM_Base_MspInit+0x174>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d117      	bne.n	8001aa2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a72:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a78:	4a29      	ldr	r2, [pc, #164]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001a7a:	f043 0308 	orr.w	r3, r3, #8
 8001a7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	2032      	movs	r0, #50	; 0x32
 8001a96:	f000 fe38 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a9a:	2032      	movs	r0, #50	; 0x32
 8001a9c:	f000 fe4f 	bl	800273e <HAL_NVIC_EnableIRQ>
}
 8001aa0:	e038      	b.n	8001b14 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM12)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a22      	ldr	r2, [pc, #136]	; (8001b30 <HAL_TIM_Base_MspInit+0x178>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d117      	bne.n	8001adc <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ab2:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001abe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	202b      	movs	r0, #43	; 0x2b
 8001ad0:	f000 fe1b 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001ad4:	202b      	movs	r0, #43	; 0x2b
 8001ad6:	f000 fe32 	bl	800273e <HAL_NVIC_EnableIRQ>
}
 8001ada:	e01b      	b.n	8001b14 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM15)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <HAL_TIM_Base_MspInit+0x17c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d116      	bne.n	8001b14 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aec:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_TIM_Base_MspInit+0x168>)
 8001af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2074      	movs	r0, #116	; 0x74
 8001b0a:	f000 fdfe 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001b0e:	2074      	movs	r0, #116	; 0x74
 8001b10:	f000 fe15 	bl	800273e <HAL_NVIC_EnableIRQ>
}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	58024400 	.word	0x58024400
 8001b24:	40000400 	.word	0x40000400
 8001b28:	40000800 	.word	0x40000800
 8001b2c:	40000c00 	.word	0x40000c00
 8001b30:	40001800 	.word	0x40001800
 8001b34:	40014000 	.word	0x40014000

08001b38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	; 0x30
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 031c 	add.w	r3, r7, #28
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a5e      	ldr	r2, [pc, #376]	; (8001cd0 <HAL_TIM_MspPostInit+0x198>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d120      	bne.n	8001b9c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b5a:	4b5e      	ldr	r3, [pc, #376]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b60:	4a5c      	ldr	r2, [pc, #368]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001b62:	f043 0310 	orr.w	r3, r3, #16
 8001b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b6a:	4b5a      	ldr	r3, [pc, #360]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8001b78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	4850      	ldr	r0, [pc, #320]	; (8001cd8 <HAL_TIM_MspPostInit+0x1a0>)
 8001b96:	f003 f8fb 	bl	8004d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001b9a:	e094      	b.n	8001cc6 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba4:	d120      	bne.n	8001be8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bac:	4a49      	ldr	r2, [pc, #292]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001bae:	f043 0302 	orr.w	r3, r3, #2
 8001bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8001bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4619      	mov	r1, r3
 8001be0:	483e      	ldr	r0, [pc, #248]	; (8001cdc <HAL_TIM_MspPostInit+0x1a4>)
 8001be2:	f003 f8d5 	bl	8004d90 <HAL_GPIO_Init>
}
 8001be6:	e06e      	b.n	8001cc6 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a3c      	ldr	r2, [pc, #240]	; (8001ce0 <HAL_TIM_MspPostInit+0x1a8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d11f      	bne.n	8001c32 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf8:	4a36      	ldr	r2, [pc, #216]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c02:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8001c10:	2340      	movs	r3, #64	; 0x40
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c20:	2302      	movs	r3, #2
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	482e      	ldr	r0, [pc, #184]	; (8001ce4 <HAL_TIM_MspPostInit+0x1ac>)
 8001c2c:	f003 f8b0 	bl	8004d90 <HAL_GPIO_Init>
}
 8001c30:	e049      	b.n	8001cc6 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2c      	ldr	r2, [pc, #176]	; (8001ce8 <HAL_TIM_MspPostInit+0x1b0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d120      	bne.n	8001c7e <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c42:	4a24      	ldr	r2, [pc, #144]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8001c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	4819      	ldr	r0, [pc, #100]	; (8001cdc <HAL_TIM_MspPostInit+0x1a4>)
 8001c78:	f003 f88a 	bl	8004d90 <HAL_GPIO_Init>
}
 8001c7c:	e023      	b.n	8001cc6 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <HAL_TIM_MspPostInit+0x1b4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d11e      	bne.n	8001cc6 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8e:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_TIM_MspPostInit+0x19c>)
 8001c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8001ca6:	2340      	movs	r3, #64	; 0x40
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <HAL_TIM_MspPostInit+0x1a0>)
 8001cc2:	f003 f865 	bl	8004d90 <HAL_GPIO_Init>
}
 8001cc6:	bf00      	nop
 8001cc8:	3730      	adds	r7, #48	; 0x30
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	58024400 	.word	0x58024400
 8001cd8:	58021000 	.word	0x58021000
 8001cdc:	58020400 	.word	0x58020400
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	58020000 	.word	0x58020000
 8001ce8:	40000800 	.word	0x40000800
 8001cec:	40014000 	.word	0x40014000

08001cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b0bc      	sub	sp, #240	; 0xf0
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d08:	f107 0320 	add.w	r3, r7, #32
 8001d0c:	22bc      	movs	r2, #188	; 0xbc
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f009 f8f3 	bl	800aefc <memset>
  if(huart->Instance==UART4)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a67      	ldr	r2, [pc, #412]	; (8001eb8 <HAL_UART_MspInit+0x1c8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	f040 80db 	bne.w	8001ed8 <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001d22:	2302      	movs	r3, #2
 8001d24:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2c:	f107 0320 	add.w	r3, r7, #32
 8001d30:	4618      	mov	r0, r3
 8001d32:	f004 f9e7 	bl	8006104 <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001d3c:	f7ff fd95 	bl	800186a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d40:	4b5e      	ldr	r3, [pc, #376]	; (8001ebc <HAL_UART_MspInit+0x1cc>)
 8001d42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d46:	4a5d      	ldr	r2, [pc, #372]	; (8001ebc <HAL_UART_MspInit+0x1cc>)
 8001d48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d50:	4b5a      	ldr	r3, [pc, #360]	; (8001ebc <HAL_UART_MspInit+0x1cc>)
 8001d52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <HAL_UART_MspInit+0x1cc>)
 8001d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d64:	4a55      	ldr	r2, [pc, #340]	; (8001ebc <HAL_UART_MspInit+0x1cc>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d6e:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_UART_MspInit+0x1cc>)
 8001d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7c:	4b4f      	ldr	r3, [pc, #316]	; (8001ebc <HAL_UART_MspInit+0x1cc>)
 8001d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d82:	4a4e      	ldr	r2, [pc, #312]	; (8001ebc <HAL_UART_MspInit+0x1cc>)
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d8c:	4b4b      	ldr	r3, [pc, #300]	; (8001ebc <HAL_UART_MspInit+0x1cc>)
 8001d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001db4:	2308      	movs	r3, #8
 8001db6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	483f      	ldr	r0, [pc, #252]	; (8001ec0 <HAL_UART_MspInit+0x1d0>)
 8001dc2:	f002 ffe5 	bl	8004d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001dde:	2308      	movs	r3, #8
 8001de0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001de8:	4619      	mov	r1, r3
 8001dea:	4836      	ldr	r0, [pc, #216]	; (8001ec4 <HAL_UART_MspInit+0x1d4>)
 8001dec:	f002 ffd0 	bl	8004d90 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001df0:	4b35      	ldr	r3, [pc, #212]	; (8001ec8 <HAL_UART_MspInit+0x1d8>)
 8001df2:	4a36      	ldr	r2, [pc, #216]	; (8001ecc <HAL_UART_MspInit+0x1dc>)
 8001df4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001df6:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <HAL_UART_MspInit+0x1d8>)
 8001df8:	223f      	movs	r2, #63	; 0x3f
 8001dfa:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dfc:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <HAL_UART_MspInit+0x1d8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e02:	4b31      	ldr	r3, [pc, #196]	; (8001ec8 <HAL_UART_MspInit+0x1d8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e08:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <HAL_UART_MspInit+0x1d8>)
 8001e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e0e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e10:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_UART_MspInit+0x1d8>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e16:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <HAL_UART_MspInit+0x1d8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <HAL_UART_MspInit+0x1d8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e22:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_UART_MspInit+0x1d8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <HAL_UART_MspInit+0x1d8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001e2e:	4826      	ldr	r0, [pc, #152]	; (8001ec8 <HAL_UART_MspInit+0x1d8>)
 8001e30:	f000 fd8a 	bl	8002948 <HAL_DMA_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8001e3a:	f7ff fd16 	bl	800186a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <HAL_UART_MspInit+0x1d8>)
 8001e42:	67da      	str	r2, [r3, #124]	; 0x7c
 8001e44:	4a20      	ldr	r2, [pc, #128]	; (8001ec8 <HAL_UART_MspInit+0x1d8>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_UART_MspInit+0x1e0>)
 8001e4c:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <HAL_UART_MspInit+0x1e4>)
 8001e4e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <HAL_UART_MspInit+0x1e0>)
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_UART_MspInit+0x1e0>)
 8001e58:	2240      	movs	r2, #64	; 0x40
 8001e5a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <HAL_UART_MspInit+0x1e0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e62:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_UART_MspInit+0x1e0>)
 8001e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e68:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_UART_MspInit+0x1e0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_UART_MspInit+0x1e0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_UART_MspInit+0x1e0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_UART_MspInit+0x1e0>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_UART_MspInit+0x1e0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001e88:	4811      	ldr	r0, [pc, #68]	; (8001ed0 <HAL_UART_MspInit+0x1e0>)
 8001e8a:	f000 fd5d 	bl	8002948 <HAL_DMA_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001e94:	f7ff fce9 	bl	800186a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <HAL_UART_MspInit+0x1e0>)
 8001e9c:	679a      	str	r2, [r3, #120]	; 0x78
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <HAL_UART_MspInit+0x1e0>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2034      	movs	r0, #52	; 0x34
 8001eaa:	f000 fc2e 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001eae:	2034      	movs	r0, #52	; 0x34
 8001eb0:	f000 fc45 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eb4:	e0bd      	b.n	8002032 <HAL_UART_MspInit+0x342>
 8001eb6:	bf00      	nop
 8001eb8:	40004c00 	.word	0x40004c00
 8001ebc:	58024400 	.word	0x58024400
 8001ec0:	58020000 	.word	0x58020000
 8001ec4:	58020c00 	.word	0x58020c00
 8001ec8:	20000194 	.word	0x20000194
 8001ecc:	40020410 	.word	0x40020410
 8001ed0:	20000848 	.word	0x20000848
 8001ed4:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a57      	ldr	r2, [pc, #348]	; (800203c <HAL_UART_MspInit+0x34c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	f040 80a7 	bne.w	8002032 <HAL_UART_MspInit+0x342>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eee:	f107 0320 	add.w	r3, r7, #32
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f004 f906 	bl	8006104 <HAL_RCCEx_PeriphCLKConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_UART_MspInit+0x212>
      Error_Handler();
 8001efe:	f7ff fcb4 	bl	800186a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f02:	4b4f      	ldr	r3, [pc, #316]	; (8002040 <HAL_UART_MspInit+0x350>)
 8001f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f08:	4a4d      	ldr	r2, [pc, #308]	; (8002040 <HAL_UART_MspInit+0x350>)
 8001f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f12:	4b4b      	ldr	r3, [pc, #300]	; (8002040 <HAL_UART_MspInit+0x350>)
 8001f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f20:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_UART_MspInit+0x350>)
 8001f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f26:	4a46      	ldr	r2, [pc, #280]	; (8002040 <HAL_UART_MspInit+0x350>)
 8001f28:	f043 0308 	orr.w	r3, r3, #8
 8001f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f30:	4b43      	ldr	r3, [pc, #268]	; (8002040 <HAL_UART_MspInit+0x350>)
 8001f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f62:	4619      	mov	r1, r3
 8001f64:	4837      	ldr	r0, [pc, #220]	; (8002044 <HAL_UART_MspInit+0x354>)
 8001f66:	f002 ff13 	bl	8004d90 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001f6a:	4b37      	ldr	r3, [pc, #220]	; (8002048 <HAL_UART_MspInit+0x358>)
 8001f6c:	4a37      	ldr	r2, [pc, #220]	; (800204c <HAL_UART_MspInit+0x35c>)
 8001f6e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001f70:	4b35      	ldr	r3, [pc, #212]	; (8002048 <HAL_UART_MspInit+0x358>)
 8001f72:	222d      	movs	r2, #45	; 0x2d
 8001f74:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f76:	4b34      	ldr	r3, [pc, #208]	; (8002048 <HAL_UART_MspInit+0x358>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f7c:	4b32      	ldr	r3, [pc, #200]	; (8002048 <HAL_UART_MspInit+0x358>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f82:	4b31      	ldr	r3, [pc, #196]	; (8002048 <HAL_UART_MspInit+0x358>)
 8001f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f88:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_UART_MspInit+0x358>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f90:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_UART_MspInit+0x358>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001f96:	4b2c      	ldr	r3, [pc, #176]	; (8002048 <HAL_UART_MspInit+0x358>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <HAL_UART_MspInit+0x358>)
 8001f9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fa2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa4:	4b28      	ldr	r3, [pc, #160]	; (8002048 <HAL_UART_MspInit+0x358>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001faa:	4827      	ldr	r0, [pc, #156]	; (8002048 <HAL_UART_MspInit+0x358>)
 8001fac:	f000 fccc 	bl	8002948 <HAL_DMA_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 8001fb6:	f7ff fc58 	bl	800186a <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a22      	ldr	r2, [pc, #136]	; (8002048 <HAL_UART_MspInit+0x358>)
 8001fbe:	67da      	str	r2, [r3, #124]	; 0x7c
 8001fc0:	4a21      	ldr	r2, [pc, #132]	; (8002048 <HAL_UART_MspInit+0x358>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001fc6:	4b22      	ldr	r3, [pc, #136]	; (8002050 <HAL_UART_MspInit+0x360>)
 8001fc8:	4a22      	ldr	r2, [pc, #136]	; (8002054 <HAL_UART_MspInit+0x364>)
 8001fca:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001fcc:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_UART_MspInit+0x360>)
 8001fce:	222e      	movs	r2, #46	; 0x2e
 8001fd0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <HAL_UART_MspInit+0x360>)
 8001fd4:	2240      	movs	r2, #64	; 0x40
 8001fd6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_UART_MspInit+0x360>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <HAL_UART_MspInit+0x360>)
 8001fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_UART_MspInit+0x360>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <HAL_UART_MspInit+0x360>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_UART_MspInit+0x360>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <HAL_UART_MspInit+0x360>)
 8001ffa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ffe:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_UART_MspInit+0x360>)
 8002002:	2200      	movs	r2, #0
 8002004:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002006:	4812      	ldr	r0, [pc, #72]	; (8002050 <HAL_UART_MspInit+0x360>)
 8002008:	f000 fc9e 	bl	8002948 <HAL_DMA_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_UART_MspInit+0x326>
      Error_Handler();
 8002012:	f7ff fc2a 	bl	800186a <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a0d      	ldr	r2, [pc, #52]	; (8002050 <HAL_UART_MspInit+0x360>)
 800201a:	679a      	str	r2, [r3, #120]	; 0x78
 800201c:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <HAL_UART_MspInit+0x360>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2100      	movs	r1, #0
 8002026:	2027      	movs	r0, #39	; 0x27
 8002028:	f000 fb6f 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800202c:	2027      	movs	r0, #39	; 0x27
 800202e:	f000 fb86 	bl	800273e <HAL_NVIC_EnableIRQ>
}
 8002032:	bf00      	nop
 8002034:	37f0      	adds	r7, #240	; 0xf0
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40004800 	.word	0x40004800
 8002040:	58024400 	.word	0x58024400
 8002044:	58020c00 	.word	0x58020c00
 8002048:	20000258 	.word	0x20000258
 800204c:	40020028 	.word	0x40020028
 8002050:	2000044c 	.word	0x2000044c
 8002054:	40020040 	.word	0x40020040

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800205c:	e7fe      	b.n	800205c <NMI_Handler+0x4>

0800205e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <HardFault_Handler+0x4>

08002064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <MemManage_Handler+0x4>

0800206a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <BusFault_Handler+0x4>

08002070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <UsageFault_Handler+0x4>

08002076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a4:	f000 fa2a 	bl	80024fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}

080020ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <DMA1_Stream1_IRQHandler+0x10>)
 80020b2:	f001 fd07 	bl	8003ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000258 	.word	0x20000258

080020c0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <DMA1_Stream2_IRQHandler+0x10>)
 80020c6:	f001 fcfd 	bl	8003ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000044c 	.word	0x2000044c

080020d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80020d8:	2040      	movs	r0, #64	; 0x40
 80020da:	f003 f822 	bl	8005122 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80020de:	2080      	movs	r0, #128	; 0x80
 80020e0:	f003 f81f 	bl	8005122 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <USART3_IRQHandler+0x10>)
 80020ee:	f006 ffb5 	bl	800905c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200002d0 	.word	0x200002d0

080020fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002100:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002104:	f003 f80d 	bl	8005122 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002108:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800210c:	f003 f809 	bl	8005122 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002110:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002114:	f003 f805 	bl	8005122 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002118:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800211c:	f003 f801 	bl	8005122 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}

08002124 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800212a:	f005 fd22 	bl	8007b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200007fc 	.word	0x200007fc

08002138 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <TIM5_IRQHandler+0x10>)
 800213e:	f005 fd18 	bl	8007b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200004c4 	.word	0x200004c4

0800214c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <UART4_IRQHandler+0x10>)
 8002152:	f006 ff83 	bl	800905c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200006a8 	.word	0x200006a8

08002160 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <DMA2_Stream0_IRQHandler+0x10>)
 8002166:	f001 fcad 	bl	8003ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000194 	.word	0x20000194

08002174 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <DMA2_Stream1_IRQHandler+0x10>)
 800217a:	f001 fca3 	bl	8003ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000848 	.word	0x20000848

08002188 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <TIM15_IRQHandler+0x10>)
 800218e:	f005 fcf0 	bl	8007b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200003dc 	.word	0x200003dc

0800219c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	e00a      	b.n	80021c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021ae:	f3af 8000 	nop.w
 80021b2:	4601      	mov	r1, r0
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	60ba      	str	r2, [r7, #8]
 80021ba:	b2ca      	uxtb	r2, r1
 80021bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3301      	adds	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dbf0      	blt.n	80021ae <_read+0x12>
	}

return len;
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
	return -1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <_isatty>:

int _isatty(int file)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
	return 1;
 8002216:	2301      	movs	r3, #1
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	return 0;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002248:	4a14      	ldr	r2, [pc, #80]	; (800229c <_sbrk+0x5c>)
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <_sbrk+0x60>)
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <_sbrk+0x64>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <_sbrk+0x64>)
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <_sbrk+0x68>)
 8002260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <_sbrk+0x64>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	429a      	cmp	r2, r3
 800226e:	d207      	bcs.n	8002280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002270:	f008 fe1a 	bl	800aea8 <__errno>
 8002274:	4603      	mov	r3, r0
 8002276:	220c      	movs	r2, #12
 8002278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
 800227e:	e009      	b.n	8002294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <_sbrk+0x64>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <_sbrk+0x64>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <_sbrk+0x64>)
 8002290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20020000 	.word	0x20020000
 80022a0:	00000400 	.word	0x00000400
 80022a4:	20000098 	.word	0x20000098
 80022a8:	200008d8 	.word	0x200008d8

080022ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022b0:	4b39      	ldr	r3, [pc, #228]	; (8002398 <SystemInit+0xec>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	4a38      	ldr	r2, [pc, #224]	; (8002398 <SystemInit+0xec>)
 80022b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <SystemInit+0xf0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	2b06      	cmp	r3, #6
 80022ca:	d807      	bhi.n	80022dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022cc:	4b33      	ldr	r3, [pc, #204]	; (800239c <SystemInit+0xf0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 030f 	bic.w	r3, r3, #15
 80022d4:	4a31      	ldr	r2, [pc, #196]	; (800239c <SystemInit+0xf0>)
 80022d6:	f043 0307 	orr.w	r3, r3, #7
 80022da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80022dc:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <SystemInit+0xf4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a2f      	ldr	r2, [pc, #188]	; (80023a0 <SystemInit+0xf4>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <SystemInit+0xf4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80022ee:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <SystemInit+0xf4>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	492b      	ldr	r1, [pc, #172]	; (80023a0 <SystemInit+0xf4>)
 80022f4:	4b2b      	ldr	r3, [pc, #172]	; (80023a4 <SystemInit+0xf8>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022fa:	4b28      	ldr	r3, [pc, #160]	; (800239c <SystemInit+0xf0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002306:	4b25      	ldr	r3, [pc, #148]	; (800239c <SystemInit+0xf0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 030f 	bic.w	r3, r3, #15
 800230e:	4a23      	ldr	r2, [pc, #140]	; (800239c <SystemInit+0xf0>)
 8002310:	f043 0307 	orr.w	r3, r3, #7
 8002314:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <SystemInit+0xf4>)
 8002318:	2200      	movs	r2, #0
 800231a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800231c:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <SystemInit+0xf4>)
 800231e:	2200      	movs	r2, #0
 8002320:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002322:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <SystemInit+0xf4>)
 8002324:	2200      	movs	r2, #0
 8002326:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <SystemInit+0xf4>)
 800232a:	4a1f      	ldr	r2, [pc, #124]	; (80023a8 <SystemInit+0xfc>)
 800232c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <SystemInit+0xf4>)
 8002330:	4a1e      	ldr	r2, [pc, #120]	; (80023ac <SystemInit+0x100>)
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <SystemInit+0xf4>)
 8002336:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <SystemInit+0x104>)
 8002338:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <SystemInit+0xf4>)
 800233c:	2200      	movs	r2, #0
 800233e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <SystemInit+0xf4>)
 8002342:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <SystemInit+0x104>)
 8002344:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <SystemInit+0xf4>)
 8002348:	2200      	movs	r2, #0
 800234a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <SystemInit+0xf4>)
 800234e:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <SystemInit+0x104>)
 8002350:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <SystemInit+0xf4>)
 8002354:	2200      	movs	r2, #0
 8002356:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <SystemInit+0xf4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <SystemInit+0xf4>)
 800235e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002362:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <SystemInit+0xf4>)
 8002366:	2200      	movs	r2, #0
 8002368:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <SystemInit+0x108>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <SystemInit+0x10c>)
 8002370:	4013      	ands	r3, r2
 8002372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002376:	d202      	bcs.n	800237e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <SystemInit+0x110>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <SystemInit+0x114>)
 8002380:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002384:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <SystemInit+0xec>)
 8002388:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800238c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00
 800239c:	52002000 	.word	0x52002000
 80023a0:	58024400 	.word	0x58024400
 80023a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80023a8:	02020200 	.word	0x02020200
 80023ac:	01ff0000 	.word	0x01ff0000
 80023b0:	01010280 	.word	0x01010280
 80023b4:	5c001000 	.word	0x5c001000
 80023b8:	ffff0000 	.word	0xffff0000
 80023bc:	51008108 	.word	0x51008108
 80023c0:	52004000 	.word	0x52004000

080023c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023c8:	f7ff ff70 	bl	80022ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023cc:	480c      	ldr	r0, [pc, #48]	; (8002400 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023ce:	490d      	ldr	r1, [pc, #52]	; (8002404 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d4:	e002      	b.n	80023dc <LoopCopyDataInit>

080023d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023da:	3304      	adds	r3, #4

080023dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e0:	d3f9      	bcc.n	80023d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023e4:	4c0a      	ldr	r4, [pc, #40]	; (8002410 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e8:	e001      	b.n	80023ee <LoopFillZerobss>

080023ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ec:	3204      	adds	r2, #4

080023ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f0:	d3fb      	bcc.n	80023ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023f2:	f008 fd5f 	bl	800aeb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f6:	f7fe fa47 	bl	8000888 <main>
  bx  lr
 80023fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002404:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002408:	0800bebc 	.word	0x0800bebc
  ldr r2, =_sbss
 800240c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002410:	200008d8 	.word	0x200008d8

08002414 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002414:	e7fe      	b.n	8002414 <ADC3_IRQHandler>
	...

08002418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241e:	2003      	movs	r0, #3
 8002420:	f000 f968 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002424:	f003 fc98 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_Init+0x68>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	4913      	ldr	r1, [pc, #76]	; (8002484 <HAL_Init+0x6c>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
 8002440:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <HAL_Init+0x68>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_Init+0x6c>)
 800244c:	5cd3      	ldrb	r3, [r2, r3]
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <HAL_Init+0x70>)
 800245a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800245c:	4a0b      	ldr	r2, [pc, #44]	; (800248c <HAL_Init+0x74>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002462:	2000      	movs	r0, #0
 8002464:	f000 f814 	bl	8002490 <HAL_InitTick>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e002      	b.n	8002478 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002472:	f7ff f9ff 	bl	8001874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	58024400 	.word	0x58024400
 8002484:	0800bdd4 	.word	0x0800bdd4
 8002488:	20000004 	.word	0x20000004
 800248c:	20000000 	.word	0x20000000

08002490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_InitTick+0x60>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e021      	b.n	80024e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_InitTick+0x64>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <HAL_InitTick+0x60>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	4619      	mov	r1, r3
 80024ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f94d 	bl	800275a <HAL_SYSTICK_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00e      	b.n	80024e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b0f      	cmp	r3, #15
 80024ce:	d80a      	bhi.n	80024e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d0:	2200      	movs	r2, #0
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f000 f917 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024dc:	4a06      	ldr	r2, [pc, #24]	; (80024f8 <HAL_InitTick+0x68>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e000      	b.n	80024e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	2000000c 	.word	0x2000000c
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000008 	.word	0x20000008

080024fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x20>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_IncTick+0x24>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4413      	add	r3, r2
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_IncTick+0x24>)
 800250e:	6013      	str	r3, [r2, #0]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	2000000c 	.word	0x2000000c
 8002520:	200008c4 	.word	0x200008c4

08002524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return uwTick;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_GetTick+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	200008c4 	.word	0x200008c4

0800253c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_GetREVID+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0c1b      	lsrs	r3, r3, #16
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	5c001000 	.word	0x5c001000

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 800257e:	4313      	orrs	r3, r2
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00
 8002598:	05fa0000 	.word	0x05fa0000

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	; (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff8e 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff29 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff40 	bl	800259c <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff90 	bl	8002648 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5f 	bl	80025f4 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff33 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa4 	bl	80026b0 <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e054      	b.n	8002830 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7f5b      	ldrb	r3, [r3, #29]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff f886 	bl	80018a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	791b      	ldrb	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a22      	ldr	r2, [pc, #136]	; (8002838 <HAL_CRC_Init+0xc4>)
 80027b0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0218 	bic.w	r2, r2, #24
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	e00c      	b.n	80027de <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6899      	ldr	r1, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	461a      	mov	r2, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f834 	bl	800283c <HAL_CRCEx_Polynomial_Set>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e028      	b.n	8002830 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	795b      	ldrb	r3, [r3, #5]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d105      	bne.n	80027f2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f04f 32ff 	mov.w	r2, #4294967295
 80027ee:	611a      	str	r2, [r3, #16]
 80027f0:	e004      	b.n	80027fc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6912      	ldr	r2, [r2, #16]
 80027fa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	04c11db7 	.word	0x04c11db7

0800283c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800284c:	231f      	movs	r3, #31
 800284e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002850:	bf00      	nop
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1e5a      	subs	r2, r3, #1
 8002856:	613a      	str	r2, [r7, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d009      	beq.n	8002870 <HAL_CRCEx_Polynomial_Set+0x34>
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_CRCEx_Polynomial_Set+0x16>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b18      	cmp	r3, #24
 8002874:	d846      	bhi.n	8002904 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002876:	a201      	add	r2, pc, #4	; (adr r2, 800287c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	0800290b 	.word	0x0800290b
 8002880:	08002905 	.word	0x08002905
 8002884:	08002905 	.word	0x08002905
 8002888:	08002905 	.word	0x08002905
 800288c:	08002905 	.word	0x08002905
 8002890:	08002905 	.word	0x08002905
 8002894:	08002905 	.word	0x08002905
 8002898:	08002905 	.word	0x08002905
 800289c:	080028f9 	.word	0x080028f9
 80028a0:	08002905 	.word	0x08002905
 80028a4:	08002905 	.word	0x08002905
 80028a8:	08002905 	.word	0x08002905
 80028ac:	08002905 	.word	0x08002905
 80028b0:	08002905 	.word	0x08002905
 80028b4:	08002905 	.word	0x08002905
 80028b8:	08002905 	.word	0x08002905
 80028bc:	080028ed 	.word	0x080028ed
 80028c0:	08002905 	.word	0x08002905
 80028c4:	08002905 	.word	0x08002905
 80028c8:	08002905 	.word	0x08002905
 80028cc:	08002905 	.word	0x08002905
 80028d0:	08002905 	.word	0x08002905
 80028d4:	08002905 	.word	0x08002905
 80028d8:	08002905 	.word	0x08002905
 80028dc:	080028e1 	.word	0x080028e1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d913      	bls.n	800290e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80028ea:	e010      	b.n	800290e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b07      	cmp	r3, #7
 80028f0:	d90f      	bls.n	8002912 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80028f6:	e00c      	b.n	8002912 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	2b0f      	cmp	r3, #15
 80028fc:	d90b      	bls.n	8002916 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002902:	e008      	b.n	8002916 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	75fb      	strb	r3, [r7, #23]
      break;
 8002908:	e006      	b.n	8002918 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800290a:	bf00      	nop
 800290c:	e004      	b.n	8002918 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800290e:	bf00      	nop
 8002910:	e002      	b.n	8002918 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002912:	bf00      	nop
 8002914:	e000      	b.n	8002918 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002916:	bf00      	nop
  }
  if (status == HAL_OK)
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 0118 	bic.w	r1, r3, #24
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800293a:	7dfb      	ldrb	r3, [r7, #23]
}
 800293c:	4618      	mov	r0, r3
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002950:	f7ff fde8 	bl	8002524 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e316      	b.n	8002f8e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a66      	ldr	r2, [pc, #408]	; (8002b00 <HAL_DMA_Init+0x1b8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d04a      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a65      	ldr	r2, [pc, #404]	; (8002b04 <HAL_DMA_Init+0x1bc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d045      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a63      	ldr	r2, [pc, #396]	; (8002b08 <HAL_DMA_Init+0x1c0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d040      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a62      	ldr	r2, [pc, #392]	; (8002b0c <HAL_DMA_Init+0x1c4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d03b      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a60      	ldr	r2, [pc, #384]	; (8002b10 <HAL_DMA_Init+0x1c8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d036      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5f      	ldr	r2, [pc, #380]	; (8002b14 <HAL_DMA_Init+0x1cc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d031      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5d      	ldr	r2, [pc, #372]	; (8002b18 <HAL_DMA_Init+0x1d0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d02c      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5c      	ldr	r2, [pc, #368]	; (8002b1c <HAL_DMA_Init+0x1d4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d027      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a5a      	ldr	r2, [pc, #360]	; (8002b20 <HAL_DMA_Init+0x1d8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d022      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a59      	ldr	r2, [pc, #356]	; (8002b24 <HAL_DMA_Init+0x1dc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d01d      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a57      	ldr	r2, [pc, #348]	; (8002b28 <HAL_DMA_Init+0x1e0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d018      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a56      	ldr	r2, [pc, #344]	; (8002b2c <HAL_DMA_Init+0x1e4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d013      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a54      	ldr	r2, [pc, #336]	; (8002b30 <HAL_DMA_Init+0x1e8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00e      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a53      	ldr	r2, [pc, #332]	; (8002b34 <HAL_DMA_Init+0x1ec>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d009      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a51      	ldr	r2, [pc, #324]	; (8002b38 <HAL_DMA_Init+0x1f0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a50      	ldr	r2, [pc, #320]	; (8002b3c <HAL_DMA_Init+0x1f4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d101      	bne.n	8002a04 <HAL_DMA_Init+0xbc>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_DMA_Init+0xbe>
 8002a04:	2300      	movs	r3, #0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 813b 	beq.w	8002c82 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a37      	ldr	r2, [pc, #220]	; (8002b00 <HAL_DMA_Init+0x1b8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d04a      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a36      	ldr	r2, [pc, #216]	; (8002b04 <HAL_DMA_Init+0x1bc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d045      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a34      	ldr	r2, [pc, #208]	; (8002b08 <HAL_DMA_Init+0x1c0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d040      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a33      	ldr	r2, [pc, #204]	; (8002b0c <HAL_DMA_Init+0x1c4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d03b      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a31      	ldr	r2, [pc, #196]	; (8002b10 <HAL_DMA_Init+0x1c8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d036      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a30      	ldr	r2, [pc, #192]	; (8002b14 <HAL_DMA_Init+0x1cc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d031      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2e      	ldr	r2, [pc, #184]	; (8002b18 <HAL_DMA_Init+0x1d0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d02c      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2d      	ldr	r2, [pc, #180]	; (8002b1c <HAL_DMA_Init+0x1d4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d027      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2b      	ldr	r2, [pc, #172]	; (8002b20 <HAL_DMA_Init+0x1d8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d022      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2a      	ldr	r2, [pc, #168]	; (8002b24 <HAL_DMA_Init+0x1dc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d01d      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a28      	ldr	r2, [pc, #160]	; (8002b28 <HAL_DMA_Init+0x1e0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d018      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <HAL_DMA_Init+0x1e4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d013      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a25      	ldr	r2, [pc, #148]	; (8002b30 <HAL_DMA_Init+0x1e8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00e      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a24      	ldr	r2, [pc, #144]	; (8002b34 <HAL_DMA_Init+0x1ec>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <HAL_DMA_Init+0x1f0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <HAL_DMA_Init+0x1f4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d108      	bne.n	8002ace <HAL_DMA_Init+0x186>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0201 	bic.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e007      	b.n	8002ade <HAL_DMA_Init+0x196>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ade:	e02f      	b.n	8002b40 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ae0:	f7ff fd20 	bl	8002524 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d928      	bls.n	8002b40 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2220      	movs	r2, #32
 8002af2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2203      	movs	r2, #3
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e246      	b.n	8002f8e <HAL_DMA_Init+0x646>
 8002b00:	40020010 	.word	0x40020010
 8002b04:	40020028 	.word	0x40020028
 8002b08:	40020040 	.word	0x40020040
 8002b0c:	40020058 	.word	0x40020058
 8002b10:	40020070 	.word	0x40020070
 8002b14:	40020088 	.word	0x40020088
 8002b18:	400200a0 	.word	0x400200a0
 8002b1c:	400200b8 	.word	0x400200b8
 8002b20:	40020410 	.word	0x40020410
 8002b24:	40020428 	.word	0x40020428
 8002b28:	40020440 	.word	0x40020440
 8002b2c:	40020458 	.word	0x40020458
 8002b30:	40020470 	.word	0x40020470
 8002b34:	40020488 	.word	0x40020488
 8002b38:	400204a0 	.word	0x400204a0
 8002b3c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1c8      	bne.n	8002ae0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4b83      	ldr	r3, [pc, #524]	; (8002d68 <HAL_DMA_Init+0x420>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002b66:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b72:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d107      	bne.n	8002ba4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ba4:	4b71      	ldr	r3, [pc, #452]	; (8002d6c <HAL_DMA_Init+0x424>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b71      	ldr	r3, [pc, #452]	; (8002d70 <HAL_DMA_Init+0x428>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb0:	d328      	bcc.n	8002c04 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b28      	cmp	r3, #40	; 0x28
 8002bb8:	d903      	bls.n	8002bc2 <HAL_DMA_Init+0x27a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b2e      	cmp	r3, #46	; 0x2e
 8002bc0:	d917      	bls.n	8002bf2 <HAL_DMA_Init+0x2aa>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b3e      	cmp	r3, #62	; 0x3e
 8002bc8:	d903      	bls.n	8002bd2 <HAL_DMA_Init+0x28a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b42      	cmp	r3, #66	; 0x42
 8002bd0:	d90f      	bls.n	8002bf2 <HAL_DMA_Init+0x2aa>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b46      	cmp	r3, #70	; 0x46
 8002bd8:	d903      	bls.n	8002be2 <HAL_DMA_Init+0x29a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b48      	cmp	r3, #72	; 0x48
 8002be0:	d907      	bls.n	8002bf2 <HAL_DMA_Init+0x2aa>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b4e      	cmp	r3, #78	; 0x4e
 8002be8:	d905      	bls.n	8002bf6 <HAL_DMA_Init+0x2ae>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b52      	cmp	r3, #82	; 0x52
 8002bf0:	d801      	bhi.n	8002bf6 <HAL_DMA_Init+0x2ae>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_DMA_Init+0x2b0>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c02:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f023 0307 	bic.w	r3, r3, #7
 8002c1a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d117      	bne.n	8002c5e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00e      	beq.n	8002c5e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f001 ff1b 	bl	8004a7c <DMA_CheckFifoParam>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e197      	b.n	8002f8e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f001 fe56 	bl	8004918 <DMA_CalcBaseAndBitshift>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	223f      	movs	r2, #63	; 0x3f
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	e0cd      	b.n	8002e1e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a3b      	ldr	r2, [pc, #236]	; (8002d74 <HAL_DMA_Init+0x42c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d022      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a39      	ldr	r2, [pc, #228]	; (8002d78 <HAL_DMA_Init+0x430>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01d      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a38      	ldr	r2, [pc, #224]	; (8002d7c <HAL_DMA_Init+0x434>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d018      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a36      	ldr	r2, [pc, #216]	; (8002d80 <HAL_DMA_Init+0x438>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a35      	ldr	r2, [pc, #212]	; (8002d84 <HAL_DMA_Init+0x43c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00e      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a33      	ldr	r2, [pc, #204]	; (8002d88 <HAL_DMA_Init+0x440>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d009      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a32      	ldr	r2, [pc, #200]	; (8002d8c <HAL_DMA_Init+0x444>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <HAL_DMA_Init+0x448>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_DMA_Init+0x38e>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_DMA_Init+0x390>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8097 	beq.w	8002e0c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <HAL_DMA_Init+0x42c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d021      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <HAL_DMA_Init+0x430>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01c      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a21      	ldr	r2, [pc, #132]	; (8002d7c <HAL_DMA_Init+0x434>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d017      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1f      	ldr	r2, [pc, #124]	; (8002d80 <HAL_DMA_Init+0x438>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d012      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <HAL_DMA_Init+0x43c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00d      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <HAL_DMA_Init+0x440>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d008      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <HAL_DMA_Init+0x444>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a19      	ldr	r2, [pc, #100]	; (8002d90 <HAL_DMA_Init+0x448>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_DMA_Init+0x44c>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d020      	beq.n	8002d98 <HAL_DMA_Init+0x450>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b80      	cmp	r3, #128	; 0x80
 8002d5c:	d102      	bne.n	8002d64 <HAL_DMA_Init+0x41c>
 8002d5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d62:	e01a      	b.n	8002d9a <HAL_DMA_Init+0x452>
 8002d64:	2300      	movs	r3, #0
 8002d66:	e018      	b.n	8002d9a <HAL_DMA_Init+0x452>
 8002d68:	fe10803f 	.word	0xfe10803f
 8002d6c:	5c001000 	.word	0x5c001000
 8002d70:	ffff0000 	.word	0xffff0000
 8002d74:	58025408 	.word	0x58025408
 8002d78:	5802541c 	.word	0x5802541c
 8002d7c:	58025430 	.word	0x58025430
 8002d80:	58025444 	.word	0x58025444
 8002d84:	58025458 	.word	0x58025458
 8002d88:	5802546c 	.word	0x5802546c
 8002d8c:	58025480 	.word	0x58025480
 8002d90:	58025494 	.word	0x58025494
 8002d94:	fffe000f 	.word	0xfffe000f
 8002d98:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68d2      	ldr	r2, [r2, #12]
 8002d9e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002da0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002da8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002db0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002db8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002dc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dc8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b6e      	ldr	r3, [pc, #440]	; (8002f98 <HAL_DMA_Init+0x650>)
 8002de0:	4413      	add	r3, r2
 8002de2:	4a6e      	ldr	r2, [pc, #440]	; (8002f9c <HAL_DMA_Init+0x654>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	009a      	lsls	r2, r3, #2
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f001 fd91 	bl	8004918 <DMA_CalcBaseAndBitshift>
 8002df6:	4603      	mov	r3, r0
 8002df8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	2201      	movs	r2, #1
 8002e04:	409a      	lsls	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	e008      	b.n	8002e1e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2240      	movs	r2, #64	; 0x40
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2203      	movs	r2, #3
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0b7      	b.n	8002f8e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5f      	ldr	r2, [pc, #380]	; (8002fa0 <HAL_DMA_Init+0x658>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d072      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5d      	ldr	r2, [pc, #372]	; (8002fa4 <HAL_DMA_Init+0x65c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d06d      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a5c      	ldr	r2, [pc, #368]	; (8002fa8 <HAL_DMA_Init+0x660>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d068      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a5a      	ldr	r2, [pc, #360]	; (8002fac <HAL_DMA_Init+0x664>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d063      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a59      	ldr	r2, [pc, #356]	; (8002fb0 <HAL_DMA_Init+0x668>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d05e      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a57      	ldr	r2, [pc, #348]	; (8002fb4 <HAL_DMA_Init+0x66c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d059      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a56      	ldr	r2, [pc, #344]	; (8002fb8 <HAL_DMA_Init+0x670>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d054      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a54      	ldr	r2, [pc, #336]	; (8002fbc <HAL_DMA_Init+0x674>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d04f      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a53      	ldr	r2, [pc, #332]	; (8002fc0 <HAL_DMA_Init+0x678>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d04a      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a51      	ldr	r2, [pc, #324]	; (8002fc4 <HAL_DMA_Init+0x67c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d045      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a50      	ldr	r2, [pc, #320]	; (8002fc8 <HAL_DMA_Init+0x680>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d040      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a4e      	ldr	r2, [pc, #312]	; (8002fcc <HAL_DMA_Init+0x684>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d03b      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a4d      	ldr	r2, [pc, #308]	; (8002fd0 <HAL_DMA_Init+0x688>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d036      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a4b      	ldr	r2, [pc, #300]	; (8002fd4 <HAL_DMA_Init+0x68c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d031      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a4a      	ldr	r2, [pc, #296]	; (8002fd8 <HAL_DMA_Init+0x690>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d02c      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a48      	ldr	r2, [pc, #288]	; (8002fdc <HAL_DMA_Init+0x694>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d027      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a47      	ldr	r2, [pc, #284]	; (8002fe0 <HAL_DMA_Init+0x698>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d022      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a45      	ldr	r2, [pc, #276]	; (8002fe4 <HAL_DMA_Init+0x69c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01d      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a44      	ldr	r2, [pc, #272]	; (8002fe8 <HAL_DMA_Init+0x6a0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d018      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a42      	ldr	r2, [pc, #264]	; (8002fec <HAL_DMA_Init+0x6a4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d013      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a41      	ldr	r2, [pc, #260]	; (8002ff0 <HAL_DMA_Init+0x6a8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00e      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a3f      	ldr	r2, [pc, #252]	; (8002ff4 <HAL_DMA_Init+0x6ac>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a3e      	ldr	r2, [pc, #248]	; (8002ff8 <HAL_DMA_Init+0x6b0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d004      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a3c      	ldr	r2, [pc, #240]	; (8002ffc <HAL_DMA_Init+0x6b4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_DMA_Init+0x5ca>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_DMA_Init+0x5cc>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d032      	beq.n	8002f7e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f001 fe2b 	bl	8004b74 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b80      	cmp	r3, #128	; 0x80
 8002f24:	d102      	bne.n	8002f2c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f40:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d010      	beq.n	8002f6c <HAL_DMA_Init+0x624>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d80c      	bhi.n	8002f6c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f001 fea8 	bl	8004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	e008      	b.n	8002f7e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	a7fdabf8 	.word	0xa7fdabf8
 8002f9c:	cccccccd 	.word	0xcccccccd
 8002fa0:	40020010 	.word	0x40020010
 8002fa4:	40020028 	.word	0x40020028
 8002fa8:	40020040 	.word	0x40020040
 8002fac:	40020058 	.word	0x40020058
 8002fb0:	40020070 	.word	0x40020070
 8002fb4:	40020088 	.word	0x40020088
 8002fb8:	400200a0 	.word	0x400200a0
 8002fbc:	400200b8 	.word	0x400200b8
 8002fc0:	40020410 	.word	0x40020410
 8002fc4:	40020428 	.word	0x40020428
 8002fc8:	40020440 	.word	0x40020440
 8002fcc:	40020458 	.word	0x40020458
 8002fd0:	40020470 	.word	0x40020470
 8002fd4:	40020488 	.word	0x40020488
 8002fd8:	400204a0 	.word	0x400204a0
 8002fdc:	400204b8 	.word	0x400204b8
 8002fe0:	58025408 	.word	0x58025408
 8002fe4:	5802541c 	.word	0x5802541c
 8002fe8:	58025430 	.word	0x58025430
 8002fec:	58025444 	.word	0x58025444
 8002ff0:	58025458 	.word	0x58025458
 8002ff4:	5802546c 	.word	0x5802546c
 8002ff8:	58025480 	.word	0x58025480
 8002ffc:	58025494 	.word	0x58025494

08003000 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003008:	f7ff fa8c 	bl	8002524 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e2dc      	b.n	80035d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d008      	beq.n	8003036 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2280      	movs	r2, #128	; 0x80
 8003028:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e2cd      	b.n	80035d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a76      	ldr	r2, [pc, #472]	; (8003214 <HAL_DMA_Abort+0x214>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d04a      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a74      	ldr	r2, [pc, #464]	; (8003218 <HAL_DMA_Abort+0x218>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d045      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a73      	ldr	r2, [pc, #460]	; (800321c <HAL_DMA_Abort+0x21c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d040      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a71      	ldr	r2, [pc, #452]	; (8003220 <HAL_DMA_Abort+0x220>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d03b      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a70      	ldr	r2, [pc, #448]	; (8003224 <HAL_DMA_Abort+0x224>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d036      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6e      	ldr	r2, [pc, #440]	; (8003228 <HAL_DMA_Abort+0x228>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d031      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6d      	ldr	r2, [pc, #436]	; (800322c <HAL_DMA_Abort+0x22c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d02c      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a6b      	ldr	r2, [pc, #428]	; (8003230 <HAL_DMA_Abort+0x230>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d027      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6a      	ldr	r2, [pc, #424]	; (8003234 <HAL_DMA_Abort+0x234>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a68      	ldr	r2, [pc, #416]	; (8003238 <HAL_DMA_Abort+0x238>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01d      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a67      	ldr	r2, [pc, #412]	; (800323c <HAL_DMA_Abort+0x23c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d018      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a65      	ldr	r2, [pc, #404]	; (8003240 <HAL_DMA_Abort+0x240>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a64      	ldr	r2, [pc, #400]	; (8003244 <HAL_DMA_Abort+0x244>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a62      	ldr	r2, [pc, #392]	; (8003248 <HAL_DMA_Abort+0x248>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a61      	ldr	r2, [pc, #388]	; (800324c <HAL_DMA_Abort+0x24c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a5f      	ldr	r2, [pc, #380]	; (8003250 <HAL_DMA_Abort+0x250>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_DMA_Abort+0xda>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_DMA_Abort+0xdc>
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 021e 	bic.w	r2, r2, #30
 80030ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e00a      	b.n	800311e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 020e 	bic.w	r2, r2, #14
 8003116:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a3c      	ldr	r2, [pc, #240]	; (8003214 <HAL_DMA_Abort+0x214>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d072      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a3a      	ldr	r2, [pc, #232]	; (8003218 <HAL_DMA_Abort+0x218>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d06d      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a39      	ldr	r2, [pc, #228]	; (800321c <HAL_DMA_Abort+0x21c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d068      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a37      	ldr	r2, [pc, #220]	; (8003220 <HAL_DMA_Abort+0x220>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d063      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a36      	ldr	r2, [pc, #216]	; (8003224 <HAL_DMA_Abort+0x224>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d05e      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a34      	ldr	r2, [pc, #208]	; (8003228 <HAL_DMA_Abort+0x228>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d059      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a33      	ldr	r2, [pc, #204]	; (800322c <HAL_DMA_Abort+0x22c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d054      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a31      	ldr	r2, [pc, #196]	; (8003230 <HAL_DMA_Abort+0x230>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d04f      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a30      	ldr	r2, [pc, #192]	; (8003234 <HAL_DMA_Abort+0x234>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d04a      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a2e      	ldr	r2, [pc, #184]	; (8003238 <HAL_DMA_Abort+0x238>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d045      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a2d      	ldr	r2, [pc, #180]	; (800323c <HAL_DMA_Abort+0x23c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d040      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2b      	ldr	r2, [pc, #172]	; (8003240 <HAL_DMA_Abort+0x240>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d03b      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <HAL_DMA_Abort+0x244>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d036      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a28      	ldr	r2, [pc, #160]	; (8003248 <HAL_DMA_Abort+0x248>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d031      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a27      	ldr	r2, [pc, #156]	; (800324c <HAL_DMA_Abort+0x24c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d02c      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a25      	ldr	r2, [pc, #148]	; (8003250 <HAL_DMA_Abort+0x250>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d027      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a24      	ldr	r2, [pc, #144]	; (8003254 <HAL_DMA_Abort+0x254>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d022      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a22      	ldr	r2, [pc, #136]	; (8003258 <HAL_DMA_Abort+0x258>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01d      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a21      	ldr	r2, [pc, #132]	; (800325c <HAL_DMA_Abort+0x25c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d018      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <HAL_DMA_Abort+0x260>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_DMA_Abort+0x264>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00e      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1c      	ldr	r2, [pc, #112]	; (8003268 <HAL_DMA_Abort+0x268>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1b      	ldr	r2, [pc, #108]	; (800326c <HAL_DMA_Abort+0x26c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a19      	ldr	r2, [pc, #100]	; (8003270 <HAL_DMA_Abort+0x270>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d132      	bne.n	8003274 <HAL_DMA_Abort+0x274>
 800320e:	2301      	movs	r3, #1
 8003210:	e031      	b.n	8003276 <HAL_DMA_Abort+0x276>
 8003212:	bf00      	nop
 8003214:	40020010 	.word	0x40020010
 8003218:	40020028 	.word	0x40020028
 800321c:	40020040 	.word	0x40020040
 8003220:	40020058 	.word	0x40020058
 8003224:	40020070 	.word	0x40020070
 8003228:	40020088 	.word	0x40020088
 800322c:	400200a0 	.word	0x400200a0
 8003230:	400200b8 	.word	0x400200b8
 8003234:	40020410 	.word	0x40020410
 8003238:	40020428 	.word	0x40020428
 800323c:	40020440 	.word	0x40020440
 8003240:	40020458 	.word	0x40020458
 8003244:	40020470 	.word	0x40020470
 8003248:	40020488 	.word	0x40020488
 800324c:	400204a0 	.word	0x400204a0
 8003250:	400204b8 	.word	0x400204b8
 8003254:	58025408 	.word	0x58025408
 8003258:	5802541c 	.word	0x5802541c
 800325c:	58025430 	.word	0x58025430
 8003260:	58025444 	.word	0x58025444
 8003264:	58025458 	.word	0x58025458
 8003268:	5802546c 	.word	0x5802546c
 800326c:	58025480 	.word	0x58025480
 8003270:	58025494 	.word	0x58025494
 8003274:	2300      	movs	r3, #0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003288:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6d      	ldr	r2, [pc, #436]	; (8003444 <HAL_DMA_Abort+0x444>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d04a      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6b      	ldr	r2, [pc, #428]	; (8003448 <HAL_DMA_Abort+0x448>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d045      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6a      	ldr	r2, [pc, #424]	; (800344c <HAL_DMA_Abort+0x44c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d040      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a68      	ldr	r2, [pc, #416]	; (8003450 <HAL_DMA_Abort+0x450>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d03b      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a67      	ldr	r2, [pc, #412]	; (8003454 <HAL_DMA_Abort+0x454>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d036      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a65      	ldr	r2, [pc, #404]	; (8003458 <HAL_DMA_Abort+0x458>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d031      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a64      	ldr	r2, [pc, #400]	; (800345c <HAL_DMA_Abort+0x45c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d02c      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a62      	ldr	r2, [pc, #392]	; (8003460 <HAL_DMA_Abort+0x460>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d027      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a61      	ldr	r2, [pc, #388]	; (8003464 <HAL_DMA_Abort+0x464>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d022      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a5f      	ldr	r2, [pc, #380]	; (8003468 <HAL_DMA_Abort+0x468>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01d      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a5e      	ldr	r2, [pc, #376]	; (800346c <HAL_DMA_Abort+0x46c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d018      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a5c      	ldr	r2, [pc, #368]	; (8003470 <HAL_DMA_Abort+0x470>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d013      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a5b      	ldr	r2, [pc, #364]	; (8003474 <HAL_DMA_Abort+0x474>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00e      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a59      	ldr	r2, [pc, #356]	; (8003478 <HAL_DMA_Abort+0x478>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a58      	ldr	r2, [pc, #352]	; (800347c <HAL_DMA_Abort+0x47c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d004      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a56      	ldr	r2, [pc, #344]	; (8003480 <HAL_DMA_Abort+0x480>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d108      	bne.n	800333c <HAL_DMA_Abort+0x33c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0201 	bic.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e007      	b.n	800334c <HAL_DMA_Abort+0x34c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800334c:	e013      	b.n	8003376 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800334e:	f7ff f8e9 	bl	8002524 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b05      	cmp	r3, #5
 800335a:	d90c      	bls.n	8003376 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2203      	movs	r2, #3
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e12d      	b.n	80035d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2f      	ldr	r2, [pc, #188]	; (8003444 <HAL_DMA_Abort+0x444>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d04a      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2d      	ldr	r2, [pc, #180]	; (8003448 <HAL_DMA_Abort+0x448>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d045      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a2c      	ldr	r2, [pc, #176]	; (800344c <HAL_DMA_Abort+0x44c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d040      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <HAL_DMA_Abort+0x450>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d03b      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a29      	ldr	r2, [pc, #164]	; (8003454 <HAL_DMA_Abort+0x454>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d036      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a27      	ldr	r2, [pc, #156]	; (8003458 <HAL_DMA_Abort+0x458>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d031      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a26      	ldr	r2, [pc, #152]	; (800345c <HAL_DMA_Abort+0x45c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d02c      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a24      	ldr	r2, [pc, #144]	; (8003460 <HAL_DMA_Abort+0x460>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d027      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a23      	ldr	r2, [pc, #140]	; (8003464 <HAL_DMA_Abort+0x464>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d022      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a21      	ldr	r2, [pc, #132]	; (8003468 <HAL_DMA_Abort+0x468>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01d      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a20      	ldr	r2, [pc, #128]	; (800346c <HAL_DMA_Abort+0x46c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d018      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <HAL_DMA_Abort+0x470>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <HAL_DMA_Abort+0x474>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00e      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1b      	ldr	r2, [pc, #108]	; (8003478 <HAL_DMA_Abort+0x478>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a1a      	ldr	r2, [pc, #104]	; (800347c <HAL_DMA_Abort+0x47c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <HAL_DMA_Abort+0x480>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_DMA_Abort+0x426>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_DMA_Abort+0x428>
 8003426:	2300      	movs	r3, #0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d02b      	beq.n	8003484 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	223f      	movs	r2, #63	; 0x3f
 800343c:	409a      	lsls	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	e02a      	b.n	800349a <HAL_DMA_Abort+0x49a>
 8003444:	40020010 	.word	0x40020010
 8003448:	40020028 	.word	0x40020028
 800344c:	40020040 	.word	0x40020040
 8003450:	40020058 	.word	0x40020058
 8003454:	40020070 	.word	0x40020070
 8003458:	40020088 	.word	0x40020088
 800345c:	400200a0 	.word	0x400200a0
 8003460:	400200b8 	.word	0x400200b8
 8003464:	40020410 	.word	0x40020410
 8003468:	40020428 	.word	0x40020428
 800346c:	40020440 	.word	0x40020440
 8003470:	40020458 	.word	0x40020458
 8003474:	40020470 	.word	0x40020470
 8003478:	40020488 	.word	0x40020488
 800347c:	400204a0 	.word	0x400204a0
 8003480:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2201      	movs	r2, #1
 8003494:	409a      	lsls	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a4f      	ldr	r2, [pc, #316]	; (80035dc <HAL_DMA_Abort+0x5dc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d072      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a4d      	ldr	r2, [pc, #308]	; (80035e0 <HAL_DMA_Abort+0x5e0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d06d      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a4c      	ldr	r2, [pc, #304]	; (80035e4 <HAL_DMA_Abort+0x5e4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d068      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a4a      	ldr	r2, [pc, #296]	; (80035e8 <HAL_DMA_Abort+0x5e8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d063      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a49      	ldr	r2, [pc, #292]	; (80035ec <HAL_DMA_Abort+0x5ec>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d05e      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a47      	ldr	r2, [pc, #284]	; (80035f0 <HAL_DMA_Abort+0x5f0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d059      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a46      	ldr	r2, [pc, #280]	; (80035f4 <HAL_DMA_Abort+0x5f4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d054      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a44      	ldr	r2, [pc, #272]	; (80035f8 <HAL_DMA_Abort+0x5f8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d04f      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a43      	ldr	r2, [pc, #268]	; (80035fc <HAL_DMA_Abort+0x5fc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d04a      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a41      	ldr	r2, [pc, #260]	; (8003600 <HAL_DMA_Abort+0x600>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d045      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a40      	ldr	r2, [pc, #256]	; (8003604 <HAL_DMA_Abort+0x604>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d040      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a3e      	ldr	r2, [pc, #248]	; (8003608 <HAL_DMA_Abort+0x608>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d03b      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a3d      	ldr	r2, [pc, #244]	; (800360c <HAL_DMA_Abort+0x60c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d036      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a3b      	ldr	r2, [pc, #236]	; (8003610 <HAL_DMA_Abort+0x610>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d031      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a3a      	ldr	r2, [pc, #232]	; (8003614 <HAL_DMA_Abort+0x614>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d02c      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a38      	ldr	r2, [pc, #224]	; (8003618 <HAL_DMA_Abort+0x618>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d027      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a37      	ldr	r2, [pc, #220]	; (800361c <HAL_DMA_Abort+0x61c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d022      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a35      	ldr	r2, [pc, #212]	; (8003620 <HAL_DMA_Abort+0x620>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01d      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a34      	ldr	r2, [pc, #208]	; (8003624 <HAL_DMA_Abort+0x624>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a32      	ldr	r2, [pc, #200]	; (8003628 <HAL_DMA_Abort+0x628>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a31      	ldr	r2, [pc, #196]	; (800362c <HAL_DMA_Abort+0x62c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00e      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2f      	ldr	r2, [pc, #188]	; (8003630 <HAL_DMA_Abort+0x630>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <HAL_DMA_Abort+0x634>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a2c      	ldr	r2, [pc, #176]	; (8003638 <HAL_DMA_Abort+0x638>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <HAL_DMA_Abort+0x58e>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_DMA_Abort+0x590>
 800358e:	2300      	movs	r3, #0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d015      	beq.n	80035c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800359c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00c      	beq.n	80035c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40020010 	.word	0x40020010
 80035e0:	40020028 	.word	0x40020028
 80035e4:	40020040 	.word	0x40020040
 80035e8:	40020058 	.word	0x40020058
 80035ec:	40020070 	.word	0x40020070
 80035f0:	40020088 	.word	0x40020088
 80035f4:	400200a0 	.word	0x400200a0
 80035f8:	400200b8 	.word	0x400200b8
 80035fc:	40020410 	.word	0x40020410
 8003600:	40020428 	.word	0x40020428
 8003604:	40020440 	.word	0x40020440
 8003608:	40020458 	.word	0x40020458
 800360c:	40020470 	.word	0x40020470
 8003610:	40020488 	.word	0x40020488
 8003614:	400204a0 	.word	0x400204a0
 8003618:	400204b8 	.word	0x400204b8
 800361c:	58025408 	.word	0x58025408
 8003620:	5802541c 	.word	0x5802541c
 8003624:	58025430 	.word	0x58025430
 8003628:	58025444 	.word	0x58025444
 800362c:	58025458 	.word	0x58025458
 8003630:	5802546c 	.word	0x5802546c
 8003634:	58025480 	.word	0x58025480
 8003638:	58025494 	.word	0x58025494

0800363c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e205      	b.n	8003a5a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d004      	beq.n	8003664 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2280      	movs	r2, #128	; 0x80
 800365e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e1fa      	b.n	8003a5a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a8c      	ldr	r2, [pc, #560]	; (800389c <HAL_DMA_Abort_IT+0x260>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d04a      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a8b      	ldr	r2, [pc, #556]	; (80038a0 <HAL_DMA_Abort_IT+0x264>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d045      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a89      	ldr	r2, [pc, #548]	; (80038a4 <HAL_DMA_Abort_IT+0x268>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d040      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a88      	ldr	r2, [pc, #544]	; (80038a8 <HAL_DMA_Abort_IT+0x26c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d03b      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a86      	ldr	r2, [pc, #536]	; (80038ac <HAL_DMA_Abort_IT+0x270>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d036      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a85      	ldr	r2, [pc, #532]	; (80038b0 <HAL_DMA_Abort_IT+0x274>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d031      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a83      	ldr	r2, [pc, #524]	; (80038b4 <HAL_DMA_Abort_IT+0x278>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d02c      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a82      	ldr	r2, [pc, #520]	; (80038b8 <HAL_DMA_Abort_IT+0x27c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d027      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a80      	ldr	r2, [pc, #512]	; (80038bc <HAL_DMA_Abort_IT+0x280>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d022      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a7f      	ldr	r2, [pc, #508]	; (80038c0 <HAL_DMA_Abort_IT+0x284>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d01d      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a7d      	ldr	r2, [pc, #500]	; (80038c4 <HAL_DMA_Abort_IT+0x288>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d018      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a7c      	ldr	r2, [pc, #496]	; (80038c8 <HAL_DMA_Abort_IT+0x28c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a7a      	ldr	r2, [pc, #488]	; (80038cc <HAL_DMA_Abort_IT+0x290>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00e      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a79      	ldr	r2, [pc, #484]	; (80038d0 <HAL_DMA_Abort_IT+0x294>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d009      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a77      	ldr	r2, [pc, #476]	; (80038d4 <HAL_DMA_Abort_IT+0x298>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a76      	ldr	r2, [pc, #472]	; (80038d8 <HAL_DMA_Abort_IT+0x29c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d101      	bne.n	8003708 <HAL_DMA_Abort_IT+0xcc>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <HAL_DMA_Abort_IT+0xce>
 8003708:	2300      	movs	r3, #0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d065      	beq.n	80037da <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2204      	movs	r2, #4
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a60      	ldr	r2, [pc, #384]	; (800389c <HAL_DMA_Abort_IT+0x260>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d04a      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a5e      	ldr	r2, [pc, #376]	; (80038a0 <HAL_DMA_Abort_IT+0x264>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d045      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a5d      	ldr	r2, [pc, #372]	; (80038a4 <HAL_DMA_Abort_IT+0x268>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d040      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a5b      	ldr	r2, [pc, #364]	; (80038a8 <HAL_DMA_Abort_IT+0x26c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d03b      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a5a      	ldr	r2, [pc, #360]	; (80038ac <HAL_DMA_Abort_IT+0x270>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d036      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a58      	ldr	r2, [pc, #352]	; (80038b0 <HAL_DMA_Abort_IT+0x274>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d031      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a57      	ldr	r2, [pc, #348]	; (80038b4 <HAL_DMA_Abort_IT+0x278>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d02c      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a55      	ldr	r2, [pc, #340]	; (80038b8 <HAL_DMA_Abort_IT+0x27c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d027      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a54      	ldr	r2, [pc, #336]	; (80038bc <HAL_DMA_Abort_IT+0x280>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d022      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_DMA_Abort_IT+0x284>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01d      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a51      	ldr	r2, [pc, #324]	; (80038c4 <HAL_DMA_Abort_IT+0x288>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d018      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a4f      	ldr	r2, [pc, #316]	; (80038c8 <HAL_DMA_Abort_IT+0x28c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a4e      	ldr	r2, [pc, #312]	; (80038cc <HAL_DMA_Abort_IT+0x290>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00e      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a4c      	ldr	r2, [pc, #304]	; (80038d0 <HAL_DMA_Abort_IT+0x294>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d009      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a4b      	ldr	r2, [pc, #300]	; (80038d4 <HAL_DMA_Abort_IT+0x298>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x17a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a49      	ldr	r2, [pc, #292]	; (80038d8 <HAL_DMA_Abort_IT+0x29c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d108      	bne.n	80037c8 <HAL_DMA_Abort_IT+0x18c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e147      	b.n	8003a58 <HAL_DMA_Abort_IT+0x41c>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e13e      	b.n	8003a58 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 020e 	bic.w	r2, r2, #14
 80037e8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a2b      	ldr	r2, [pc, #172]	; (800389c <HAL_DMA_Abort_IT+0x260>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d04a      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a29      	ldr	r2, [pc, #164]	; (80038a0 <HAL_DMA_Abort_IT+0x264>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d045      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a28      	ldr	r2, [pc, #160]	; (80038a4 <HAL_DMA_Abort_IT+0x268>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d040      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a26      	ldr	r2, [pc, #152]	; (80038a8 <HAL_DMA_Abort_IT+0x26c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d03b      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a25      	ldr	r2, [pc, #148]	; (80038ac <HAL_DMA_Abort_IT+0x270>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d036      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a23      	ldr	r2, [pc, #140]	; (80038b0 <HAL_DMA_Abort_IT+0x274>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d031      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a22      	ldr	r2, [pc, #136]	; (80038b4 <HAL_DMA_Abort_IT+0x278>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d02c      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <HAL_DMA_Abort_IT+0x27c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d027      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1f      	ldr	r2, [pc, #124]	; (80038bc <HAL_DMA_Abort_IT+0x280>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <HAL_DMA_Abort_IT+0x284>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01d      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <HAL_DMA_Abort_IT+0x288>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d018      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <HAL_DMA_Abort_IT+0x28c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a19      	ldr	r2, [pc, #100]	; (80038cc <HAL_DMA_Abort_IT+0x290>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00e      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a17      	ldr	r2, [pc, #92]	; (80038d0 <HAL_DMA_Abort_IT+0x294>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d009      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <HAL_DMA_Abort_IT+0x298>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d004      	beq.n	800388a <HAL_DMA_Abort_IT+0x24e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <HAL_DMA_Abort_IT+0x29c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d128      	bne.n	80038dc <HAL_DMA_Abort_IT+0x2a0>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e027      	b.n	80038ec <HAL_DMA_Abort_IT+0x2b0>
 800389c:	40020010 	.word	0x40020010
 80038a0:	40020028 	.word	0x40020028
 80038a4:	40020040 	.word	0x40020040
 80038a8:	40020058 	.word	0x40020058
 80038ac:	40020070 	.word	0x40020070
 80038b0:	40020088 	.word	0x40020088
 80038b4:	400200a0 	.word	0x400200a0
 80038b8:	400200b8 	.word	0x400200b8
 80038bc:	40020410 	.word	0x40020410
 80038c0:	40020428 	.word	0x40020428
 80038c4:	40020440 	.word	0x40020440
 80038c8:	40020458 	.word	0x40020458
 80038cc:	40020470 	.word	0x40020470
 80038d0:	40020488 	.word	0x40020488
 80038d4:	400204a0 	.word	0x400204a0
 80038d8:	400204b8 	.word	0x400204b8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a5c      	ldr	r2, [pc, #368]	; (8003a64 <HAL_DMA_Abort_IT+0x428>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d072      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a5b      	ldr	r2, [pc, #364]	; (8003a68 <HAL_DMA_Abort_IT+0x42c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d06d      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a59      	ldr	r2, [pc, #356]	; (8003a6c <HAL_DMA_Abort_IT+0x430>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d068      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a58      	ldr	r2, [pc, #352]	; (8003a70 <HAL_DMA_Abort_IT+0x434>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d063      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a56      	ldr	r2, [pc, #344]	; (8003a74 <HAL_DMA_Abort_IT+0x438>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d05e      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a55      	ldr	r2, [pc, #340]	; (8003a78 <HAL_DMA_Abort_IT+0x43c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d059      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a53      	ldr	r2, [pc, #332]	; (8003a7c <HAL_DMA_Abort_IT+0x440>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d054      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a52      	ldr	r2, [pc, #328]	; (8003a80 <HAL_DMA_Abort_IT+0x444>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d04f      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a50      	ldr	r2, [pc, #320]	; (8003a84 <HAL_DMA_Abort_IT+0x448>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d04a      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a4f      	ldr	r2, [pc, #316]	; (8003a88 <HAL_DMA_Abort_IT+0x44c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d045      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a4d      	ldr	r2, [pc, #308]	; (8003a8c <HAL_DMA_Abort_IT+0x450>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d040      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a4c      	ldr	r2, [pc, #304]	; (8003a90 <HAL_DMA_Abort_IT+0x454>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d03b      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a4a      	ldr	r2, [pc, #296]	; (8003a94 <HAL_DMA_Abort_IT+0x458>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d036      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a49      	ldr	r2, [pc, #292]	; (8003a98 <HAL_DMA_Abort_IT+0x45c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d031      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a47      	ldr	r2, [pc, #284]	; (8003a9c <HAL_DMA_Abort_IT+0x460>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d02c      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a46      	ldr	r2, [pc, #280]	; (8003aa0 <HAL_DMA_Abort_IT+0x464>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d027      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a44      	ldr	r2, [pc, #272]	; (8003aa4 <HAL_DMA_Abort_IT+0x468>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d022      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a43      	ldr	r2, [pc, #268]	; (8003aa8 <HAL_DMA_Abort_IT+0x46c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d01d      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a41      	ldr	r2, [pc, #260]	; (8003aac <HAL_DMA_Abort_IT+0x470>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d018      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a40      	ldr	r2, [pc, #256]	; (8003ab0 <HAL_DMA_Abort_IT+0x474>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a3e      	ldr	r2, [pc, #248]	; (8003ab4 <HAL_DMA_Abort_IT+0x478>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00e      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a3d      	ldr	r2, [pc, #244]	; (8003ab8 <HAL_DMA_Abort_IT+0x47c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d009      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a3b      	ldr	r2, [pc, #236]	; (8003abc <HAL_DMA_Abort_IT+0x480>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_DMA_Abort_IT+0x3a0>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a3a      	ldr	r2, [pc, #232]	; (8003ac0 <HAL_DMA_Abort_IT+0x484>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d101      	bne.n	80039e0 <HAL_DMA_Abort_IT+0x3a4>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <HAL_DMA_Abort_IT+0x3a6>
 80039e0:	2300      	movs	r3, #0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d028      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	2201      	movs	r2, #1
 8003a06:	409a      	lsls	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a14:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00c      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a2c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a36:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40020010 	.word	0x40020010
 8003a68:	40020028 	.word	0x40020028
 8003a6c:	40020040 	.word	0x40020040
 8003a70:	40020058 	.word	0x40020058
 8003a74:	40020070 	.word	0x40020070
 8003a78:	40020088 	.word	0x40020088
 8003a7c:	400200a0 	.word	0x400200a0
 8003a80:	400200b8 	.word	0x400200b8
 8003a84:	40020410 	.word	0x40020410
 8003a88:	40020428 	.word	0x40020428
 8003a8c:	40020440 	.word	0x40020440
 8003a90:	40020458 	.word	0x40020458
 8003a94:	40020470 	.word	0x40020470
 8003a98:	40020488 	.word	0x40020488
 8003a9c:	400204a0 	.word	0x400204a0
 8003aa0:	400204b8 	.word	0x400204b8
 8003aa4:	58025408 	.word	0x58025408
 8003aa8:	5802541c 	.word	0x5802541c
 8003aac:	58025430 	.word	0x58025430
 8003ab0:	58025444 	.word	0x58025444
 8003ab4:	58025458 	.word	0x58025458
 8003ab8:	5802546c 	.word	0x5802546c
 8003abc:	58025480 	.word	0x58025480
 8003ac0:	58025494 	.word	0x58025494

08003ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	; 0x28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ad0:	4b67      	ldr	r3, [pc, #412]	; (8003c70 <HAL_DMA_IRQHandler+0x1ac>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a67      	ldr	r2, [pc, #412]	; (8003c74 <HAL_DMA_IRQHandler+0x1b0>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	0a9b      	lsrs	r3, r3, #10
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a5f      	ldr	r2, [pc, #380]	; (8003c78 <HAL_DMA_IRQHandler+0x1b4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d04a      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a5d      	ldr	r2, [pc, #372]	; (8003c7c <HAL_DMA_IRQHandler+0x1b8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d045      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a5c      	ldr	r2, [pc, #368]	; (8003c80 <HAL_DMA_IRQHandler+0x1bc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d040      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a5a      	ldr	r2, [pc, #360]	; (8003c84 <HAL_DMA_IRQHandler+0x1c0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d03b      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a59      	ldr	r2, [pc, #356]	; (8003c88 <HAL_DMA_IRQHandler+0x1c4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d036      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a57      	ldr	r2, [pc, #348]	; (8003c8c <HAL_DMA_IRQHandler+0x1c8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d031      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a56      	ldr	r2, [pc, #344]	; (8003c90 <HAL_DMA_IRQHandler+0x1cc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d02c      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a54      	ldr	r2, [pc, #336]	; (8003c94 <HAL_DMA_IRQHandler+0x1d0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d027      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a53      	ldr	r2, [pc, #332]	; (8003c98 <HAL_DMA_IRQHandler+0x1d4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d022      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a51      	ldr	r2, [pc, #324]	; (8003c9c <HAL_DMA_IRQHandler+0x1d8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01d      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a50      	ldr	r2, [pc, #320]	; (8003ca0 <HAL_DMA_IRQHandler+0x1dc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d018      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4e      	ldr	r2, [pc, #312]	; (8003ca4 <HAL_DMA_IRQHandler+0x1e0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a4d      	ldr	r2, [pc, #308]	; (8003ca8 <HAL_DMA_IRQHandler+0x1e4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00e      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a4b      	ldr	r2, [pc, #300]	; (8003cac <HAL_DMA_IRQHandler+0x1e8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d009      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a4a      	ldr	r2, [pc, #296]	; (8003cb0 <HAL_DMA_IRQHandler+0x1ec>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xd2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a48      	ldr	r2, [pc, #288]	; (8003cb4 <HAL_DMA_IRQHandler+0x1f0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_DMA_IRQHandler+0xd6>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_DMA_IRQHandler+0xd8>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 842b 	beq.w	80043f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2208      	movs	r2, #8
 8003bac:	409a      	lsls	r2, r3
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80a2 	beq.w	8003cfc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2e      	ldr	r2, [pc, #184]	; (8003c78 <HAL_DMA_IRQHandler+0x1b4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d04a      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2d      	ldr	r2, [pc, #180]	; (8003c7c <HAL_DMA_IRQHandler+0x1b8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d045      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2b      	ldr	r2, [pc, #172]	; (8003c80 <HAL_DMA_IRQHandler+0x1bc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d040      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2a      	ldr	r2, [pc, #168]	; (8003c84 <HAL_DMA_IRQHandler+0x1c0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d03b      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a28      	ldr	r2, [pc, #160]	; (8003c88 <HAL_DMA_IRQHandler+0x1c4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d036      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a27      	ldr	r2, [pc, #156]	; (8003c8c <HAL_DMA_IRQHandler+0x1c8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d031      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a25      	ldr	r2, [pc, #148]	; (8003c90 <HAL_DMA_IRQHandler+0x1cc>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d02c      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a24      	ldr	r2, [pc, #144]	; (8003c94 <HAL_DMA_IRQHandler+0x1d0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d027      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a22      	ldr	r2, [pc, #136]	; (8003c98 <HAL_DMA_IRQHandler+0x1d4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d022      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a21      	ldr	r2, [pc, #132]	; (8003c9c <HAL_DMA_IRQHandler+0x1d8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d01d      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1f      	ldr	r2, [pc, #124]	; (8003ca0 <HAL_DMA_IRQHandler+0x1dc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d018      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ca4 <HAL_DMA_IRQHandler+0x1e0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d013      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1c      	ldr	r2, [pc, #112]	; (8003ca8 <HAL_DMA_IRQHandler+0x1e4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00e      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1b      	ldr	r2, [pc, #108]	; (8003cac <HAL_DMA_IRQHandler+0x1e8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d009      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a19      	ldr	r2, [pc, #100]	; (8003cb0 <HAL_DMA_IRQHandler+0x1ec>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x194>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <HAL_DMA_IRQHandler+0x1f0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d12f      	bne.n	8003cb8 <HAL_DMA_IRQHandler+0x1f4>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bf14      	ite	ne
 8003c66:	2301      	movne	r3, #1
 8003c68:	2300      	moveq	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	e02e      	b.n	8003ccc <HAL_DMA_IRQHandler+0x208>
 8003c6e:	bf00      	nop
 8003c70:	20000000 	.word	0x20000000
 8003c74:	1b4e81b5 	.word	0x1b4e81b5
 8003c78:	40020010 	.word	0x40020010
 8003c7c:	40020028 	.word	0x40020028
 8003c80:	40020040 	.word	0x40020040
 8003c84:	40020058 	.word	0x40020058
 8003c88:	40020070 	.word	0x40020070
 8003c8c:	40020088 	.word	0x40020088
 8003c90:	400200a0 	.word	0x400200a0
 8003c94:	400200b8 	.word	0x400200b8
 8003c98:	40020410 	.word	0x40020410
 8003c9c:	40020428 	.word	0x40020428
 8003ca0:	40020440 	.word	0x40020440
 8003ca4:	40020458 	.word	0x40020458
 8003ca8:	40020470 	.word	0x40020470
 8003cac:	40020488 	.word	0x40020488
 8003cb0:	400204a0 	.word	0x400204a0
 8003cb4:	400204b8 	.word	0x400204b8
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d015      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0204 	bic.w	r2, r2, #4
 8003cde:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	2208      	movs	r2, #8
 8003cea:	409a      	lsls	r2, r3
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	f043 0201 	orr.w	r2, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d06e      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a69      	ldr	r2, [pc, #420]	; (8003ebc <HAL_DMA_IRQHandler+0x3f8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d04a      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a67      	ldr	r2, [pc, #412]	; (8003ec0 <HAL_DMA_IRQHandler+0x3fc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d045      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a66      	ldr	r2, [pc, #408]	; (8003ec4 <HAL_DMA_IRQHandler+0x400>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d040      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a64      	ldr	r2, [pc, #400]	; (8003ec8 <HAL_DMA_IRQHandler+0x404>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d03b      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a63      	ldr	r2, [pc, #396]	; (8003ecc <HAL_DMA_IRQHandler+0x408>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d036      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a61      	ldr	r2, [pc, #388]	; (8003ed0 <HAL_DMA_IRQHandler+0x40c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d031      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a60      	ldr	r2, [pc, #384]	; (8003ed4 <HAL_DMA_IRQHandler+0x410>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d02c      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a5e      	ldr	r2, [pc, #376]	; (8003ed8 <HAL_DMA_IRQHandler+0x414>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d027      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a5d      	ldr	r2, [pc, #372]	; (8003edc <HAL_DMA_IRQHandler+0x418>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d022      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a5b      	ldr	r2, [pc, #364]	; (8003ee0 <HAL_DMA_IRQHandler+0x41c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01d      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a5a      	ldr	r2, [pc, #360]	; (8003ee4 <HAL_DMA_IRQHandler+0x420>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d018      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a58      	ldr	r2, [pc, #352]	; (8003ee8 <HAL_DMA_IRQHandler+0x424>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a57      	ldr	r2, [pc, #348]	; (8003eec <HAL_DMA_IRQHandler+0x428>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00e      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a55      	ldr	r2, [pc, #340]	; (8003ef0 <HAL_DMA_IRQHandler+0x42c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d009      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a54      	ldr	r2, [pc, #336]	; (8003ef4 <HAL_DMA_IRQHandler+0x430>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x2ee>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a52      	ldr	r2, [pc, #328]	; (8003ef8 <HAL_DMA_IRQHandler+0x434>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10a      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x304>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf14      	ite	ne
 8003dc0:	2301      	movne	r3, #1
 8003dc2:	2300      	moveq	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	e003      	b.n	8003dd0 <HAL_DMA_IRQHandler+0x30c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00d      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	2201      	movs	r2, #1
 8003dde:	409a      	lsls	r2, r3
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	f043 0202 	orr.w	r2, r3, #2
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	2204      	movs	r2, #4
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 808f 	beq.w	8003f24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <HAL_DMA_IRQHandler+0x3f8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d04a      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a2a      	ldr	r2, [pc, #168]	; (8003ec0 <HAL_DMA_IRQHandler+0x3fc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d045      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <HAL_DMA_IRQHandler+0x400>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d040      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a27      	ldr	r2, [pc, #156]	; (8003ec8 <HAL_DMA_IRQHandler+0x404>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d03b      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a26      	ldr	r2, [pc, #152]	; (8003ecc <HAL_DMA_IRQHandler+0x408>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d036      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a24      	ldr	r2, [pc, #144]	; (8003ed0 <HAL_DMA_IRQHandler+0x40c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d031      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a23      	ldr	r2, [pc, #140]	; (8003ed4 <HAL_DMA_IRQHandler+0x410>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d02c      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a21      	ldr	r2, [pc, #132]	; (8003ed8 <HAL_DMA_IRQHandler+0x414>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d027      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a20      	ldr	r2, [pc, #128]	; (8003edc <HAL_DMA_IRQHandler+0x418>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d022      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <HAL_DMA_IRQHandler+0x41c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d01d      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <HAL_DMA_IRQHandler+0x420>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d018      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <HAL_DMA_IRQHandler+0x424>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <HAL_DMA_IRQHandler+0x428>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00e      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <HAL_DMA_IRQHandler+0x42c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d009      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <HAL_DMA_IRQHandler+0x430>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d004      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x3e2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <HAL_DMA_IRQHandler+0x434>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d12a      	bne.n	8003efc <HAL_DMA_IRQHandler+0x438>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf14      	ite	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	2300      	moveq	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e023      	b.n	8003f04 <HAL_DMA_IRQHandler+0x440>
 8003ebc:	40020010 	.word	0x40020010
 8003ec0:	40020028 	.word	0x40020028
 8003ec4:	40020040 	.word	0x40020040
 8003ec8:	40020058 	.word	0x40020058
 8003ecc:	40020070 	.word	0x40020070
 8003ed0:	40020088 	.word	0x40020088
 8003ed4:	400200a0 	.word	0x400200a0
 8003ed8:	400200b8 	.word	0x400200b8
 8003edc:	40020410 	.word	0x40020410
 8003ee0:	40020428 	.word	0x40020428
 8003ee4:	40020440 	.word	0x40020440
 8003ee8:	40020458 	.word	0x40020458
 8003eec:	40020470 	.word	0x40020470
 8003ef0:	40020488 	.word	0x40020488
 8003ef4:	400204a0 	.word	0x400204a0
 8003ef8:	400204b8 	.word	0x400204b8
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2300      	movs	r3, #0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00d      	beq.n	8003f24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	2204      	movs	r2, #4
 8003f12:	409a      	lsls	r2, r3
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	f043 0204 	orr.w	r2, r3, #4
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	2210      	movs	r2, #16
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 80a6 	beq.w	8004086 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a85      	ldr	r2, [pc, #532]	; (8004154 <HAL_DMA_IRQHandler+0x690>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d04a      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a83      	ldr	r2, [pc, #524]	; (8004158 <HAL_DMA_IRQHandler+0x694>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d045      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a82      	ldr	r2, [pc, #520]	; (800415c <HAL_DMA_IRQHandler+0x698>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d040      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a80      	ldr	r2, [pc, #512]	; (8004160 <HAL_DMA_IRQHandler+0x69c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d03b      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a7f      	ldr	r2, [pc, #508]	; (8004164 <HAL_DMA_IRQHandler+0x6a0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d036      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a7d      	ldr	r2, [pc, #500]	; (8004168 <HAL_DMA_IRQHandler+0x6a4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d031      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a7c      	ldr	r2, [pc, #496]	; (800416c <HAL_DMA_IRQHandler+0x6a8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d02c      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a7a      	ldr	r2, [pc, #488]	; (8004170 <HAL_DMA_IRQHandler+0x6ac>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d027      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a79      	ldr	r2, [pc, #484]	; (8004174 <HAL_DMA_IRQHandler+0x6b0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d022      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a77      	ldr	r2, [pc, #476]	; (8004178 <HAL_DMA_IRQHandler+0x6b4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01d      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a76      	ldr	r2, [pc, #472]	; (800417c <HAL_DMA_IRQHandler+0x6b8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d018      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a74      	ldr	r2, [pc, #464]	; (8004180 <HAL_DMA_IRQHandler+0x6bc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d013      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a73      	ldr	r2, [pc, #460]	; (8004184 <HAL_DMA_IRQHandler+0x6c0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00e      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a71      	ldr	r2, [pc, #452]	; (8004188 <HAL_DMA_IRQHandler+0x6c4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d009      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a70      	ldr	r2, [pc, #448]	; (800418c <HAL_DMA_IRQHandler+0x6c8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <HAL_DMA_IRQHandler+0x516>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a6e      	ldr	r2, [pc, #440]	; (8004190 <HAL_DMA_IRQHandler+0x6cc>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d10a      	bne.n	8003ff0 <HAL_DMA_IRQHandler+0x52c>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf14      	ite	ne
 8003fe8:	2301      	movne	r3, #1
 8003fea:	2300      	moveq	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e009      	b.n	8004004 <HAL_DMA_IRQHandler+0x540>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf14      	ite	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	2300      	moveq	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d03e      	beq.n	8004086 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	2210      	movs	r2, #16
 8004012:	409a      	lsls	r2, r3
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d018      	beq.n	8004058 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d108      	bne.n	8004046 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d024      	beq.n	8004086 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
 8004044:	e01f      	b.n	8004086 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01b      	beq.n	8004086 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
 8004056:	e016      	b.n	8004086 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d107      	bne.n	8004076 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0208 	bic.w	r2, r2, #8
 8004074:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2220      	movs	r2, #32
 8004090:	409a      	lsls	r2, r3
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	4013      	ands	r3, r2
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8110 	beq.w	80042bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2c      	ldr	r2, [pc, #176]	; (8004154 <HAL_DMA_IRQHandler+0x690>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d04a      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2b      	ldr	r2, [pc, #172]	; (8004158 <HAL_DMA_IRQHandler+0x694>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d045      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a29      	ldr	r2, [pc, #164]	; (800415c <HAL_DMA_IRQHandler+0x698>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d040      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a28      	ldr	r2, [pc, #160]	; (8004160 <HAL_DMA_IRQHandler+0x69c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d03b      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a26      	ldr	r2, [pc, #152]	; (8004164 <HAL_DMA_IRQHandler+0x6a0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d036      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a25      	ldr	r2, [pc, #148]	; (8004168 <HAL_DMA_IRQHandler+0x6a4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d031      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a23      	ldr	r2, [pc, #140]	; (800416c <HAL_DMA_IRQHandler+0x6a8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d02c      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a22      	ldr	r2, [pc, #136]	; (8004170 <HAL_DMA_IRQHandler+0x6ac>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d027      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a20      	ldr	r2, [pc, #128]	; (8004174 <HAL_DMA_IRQHandler+0x6b0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d022      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1f      	ldr	r2, [pc, #124]	; (8004178 <HAL_DMA_IRQHandler+0x6b4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d01d      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1d      	ldr	r2, [pc, #116]	; (800417c <HAL_DMA_IRQHandler+0x6b8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d018      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <HAL_DMA_IRQHandler+0x6bc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d013      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <HAL_DMA_IRQHandler+0x6c0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00e      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a19      	ldr	r2, [pc, #100]	; (8004188 <HAL_DMA_IRQHandler+0x6c4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d009      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a17      	ldr	r2, [pc, #92]	; (800418c <HAL_DMA_IRQHandler+0x6c8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <HAL_DMA_IRQHandler+0x678>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a16      	ldr	r2, [pc, #88]	; (8004190 <HAL_DMA_IRQHandler+0x6cc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d12b      	bne.n	8004194 <HAL_DMA_IRQHandler+0x6d0>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf14      	ite	ne
 800414a:	2301      	movne	r3, #1
 800414c:	2300      	moveq	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	e02a      	b.n	80041a8 <HAL_DMA_IRQHandler+0x6e4>
 8004152:	bf00      	nop
 8004154:	40020010 	.word	0x40020010
 8004158:	40020028 	.word	0x40020028
 800415c:	40020040 	.word	0x40020040
 8004160:	40020058 	.word	0x40020058
 8004164:	40020070 	.word	0x40020070
 8004168:	40020088 	.word	0x40020088
 800416c:	400200a0 	.word	0x400200a0
 8004170:	400200b8 	.word	0x400200b8
 8004174:	40020410 	.word	0x40020410
 8004178:	40020428 	.word	0x40020428
 800417c:	40020440 	.word	0x40020440
 8004180:	40020458 	.word	0x40020458
 8004184:	40020470 	.word	0x40020470
 8004188:	40020488 	.word	0x40020488
 800418c:	400204a0 	.word	0x400204a0
 8004190:	400204b8 	.word	0x400204b8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf14      	ite	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	2300      	moveq	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8087 	beq.w	80042bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	2220      	movs	r2, #32
 80041b8:	409a      	lsls	r2, r3
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d139      	bne.n	800423e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0216 	bic.w	r2, r2, #22
 80041d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d103      	bne.n	80041fa <HAL_DMA_IRQHandler+0x736>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0208 	bic.w	r2, r2, #8
 8004208:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	223f      	movs	r2, #63	; 0x3f
 8004214:	409a      	lsls	r2, r3
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 834a 	beq.w	80048c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
          }
          return;
 800423c:	e344      	b.n	80048c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d018      	beq.n	800427e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d108      	bne.n	800426c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	2b00      	cmp	r3, #0
 8004260:	d02c      	beq.n	80042bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
 800426a:	e027      	b.n	80042bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d023      	beq.n	80042bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
 800427c:	e01e      	b.n	80042bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10f      	bne.n	80042ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0210 	bic.w	r2, r2, #16
 800429a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8306 	beq.w	80048d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8088 	beq.w	80043e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2204      	movs	r2, #4
 80042d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a7a      	ldr	r2, [pc, #488]	; (80044cc <HAL_DMA_IRQHandler+0xa08>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d04a      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a79      	ldr	r2, [pc, #484]	; (80044d0 <HAL_DMA_IRQHandler+0xa0c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d045      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a77      	ldr	r2, [pc, #476]	; (80044d4 <HAL_DMA_IRQHandler+0xa10>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d040      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a76      	ldr	r2, [pc, #472]	; (80044d8 <HAL_DMA_IRQHandler+0xa14>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d03b      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a74      	ldr	r2, [pc, #464]	; (80044dc <HAL_DMA_IRQHandler+0xa18>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d036      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a73      	ldr	r2, [pc, #460]	; (80044e0 <HAL_DMA_IRQHandler+0xa1c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d031      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a71      	ldr	r2, [pc, #452]	; (80044e4 <HAL_DMA_IRQHandler+0xa20>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d02c      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a70      	ldr	r2, [pc, #448]	; (80044e8 <HAL_DMA_IRQHandler+0xa24>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d027      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a6e      	ldr	r2, [pc, #440]	; (80044ec <HAL_DMA_IRQHandler+0xa28>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d022      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a6d      	ldr	r2, [pc, #436]	; (80044f0 <HAL_DMA_IRQHandler+0xa2c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d01d      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a6b      	ldr	r2, [pc, #428]	; (80044f4 <HAL_DMA_IRQHandler+0xa30>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d018      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6a      	ldr	r2, [pc, #424]	; (80044f8 <HAL_DMA_IRQHandler+0xa34>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a68      	ldr	r2, [pc, #416]	; (80044fc <HAL_DMA_IRQHandler+0xa38>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00e      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a67      	ldr	r2, [pc, #412]	; (8004500 <HAL_DMA_IRQHandler+0xa3c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a65      	ldr	r2, [pc, #404]	; (8004504 <HAL_DMA_IRQHandler+0xa40>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_DMA_IRQHandler+0x8b8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a64      	ldr	r2, [pc, #400]	; (8004508 <HAL_DMA_IRQHandler+0xa44>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d108      	bne.n	800438e <HAL_DMA_IRQHandler+0x8ca>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e007      	b.n	800439e <HAL_DMA_IRQHandler+0x8da>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0201 	bic.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3301      	adds	r3, #1
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d307      	bcc.n	80043ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f2      	bne.n	800439e <HAL_DMA_IRQHandler+0x8da>
 80043b8:	e000      	b.n	80043bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80043ba:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2203      	movs	r2, #3
 80043d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80043da:	e003      	b.n	80043e4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8272 	beq.w	80048d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	4798      	blx	r3
 80043f6:	e26c      	b.n	80048d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a43      	ldr	r2, [pc, #268]	; (800450c <HAL_DMA_IRQHandler+0xa48>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <HAL_DMA_IRQHandler+0x984>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a42      	ldr	r2, [pc, #264]	; (8004510 <HAL_DMA_IRQHandler+0xa4c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d01d      	beq.n	8004448 <HAL_DMA_IRQHandler+0x984>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a40      	ldr	r2, [pc, #256]	; (8004514 <HAL_DMA_IRQHandler+0xa50>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <HAL_DMA_IRQHandler+0x984>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a3f      	ldr	r2, [pc, #252]	; (8004518 <HAL_DMA_IRQHandler+0xa54>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <HAL_DMA_IRQHandler+0x984>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a3d      	ldr	r2, [pc, #244]	; (800451c <HAL_DMA_IRQHandler+0xa58>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <HAL_DMA_IRQHandler+0x984>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a3c      	ldr	r2, [pc, #240]	; (8004520 <HAL_DMA_IRQHandler+0xa5c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_DMA_IRQHandler+0x984>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a3a      	ldr	r2, [pc, #232]	; (8004524 <HAL_DMA_IRQHandler+0xa60>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_DMA_IRQHandler+0x984>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a39      	ldr	r2, [pc, #228]	; (8004528 <HAL_DMA_IRQHandler+0xa64>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <HAL_DMA_IRQHandler+0x988>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <HAL_DMA_IRQHandler+0x98a>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 823f 	beq.w	80048d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2204      	movs	r2, #4
 8004466:	409a      	lsls	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80cd 	beq.w	800460c <HAL_DMA_IRQHandler+0xb48>
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80c7 	beq.w	800460c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2204      	movs	r2, #4
 8004488:	409a      	lsls	r2, r3
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d049      	beq.n	800452c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 8210 	beq.w	80048cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b4:	e20a      	b.n	80048cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8206 	beq.w	80048cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c8:	e200      	b.n	80048cc <HAL_DMA_IRQHandler+0xe08>
 80044ca:	bf00      	nop
 80044cc:	40020010 	.word	0x40020010
 80044d0:	40020028 	.word	0x40020028
 80044d4:	40020040 	.word	0x40020040
 80044d8:	40020058 	.word	0x40020058
 80044dc:	40020070 	.word	0x40020070
 80044e0:	40020088 	.word	0x40020088
 80044e4:	400200a0 	.word	0x400200a0
 80044e8:	400200b8 	.word	0x400200b8
 80044ec:	40020410 	.word	0x40020410
 80044f0:	40020428 	.word	0x40020428
 80044f4:	40020440 	.word	0x40020440
 80044f8:	40020458 	.word	0x40020458
 80044fc:	40020470 	.word	0x40020470
 8004500:	40020488 	.word	0x40020488
 8004504:	400204a0 	.word	0x400204a0
 8004508:	400204b8 	.word	0x400204b8
 800450c:	58025408 	.word	0x58025408
 8004510:	5802541c 	.word	0x5802541c
 8004514:	58025430 	.word	0x58025430
 8004518:	58025444 	.word	0x58025444
 800451c:	58025458 	.word	0x58025458
 8004520:	5802546c 	.word	0x5802546c
 8004524:	58025480 	.word	0x58025480
 8004528:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d160      	bne.n	80045f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a8c      	ldr	r2, [pc, #560]	; (800476c <HAL_DMA_IRQHandler+0xca8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d04a      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a8a      	ldr	r2, [pc, #552]	; (8004770 <HAL_DMA_IRQHandler+0xcac>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d045      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a89      	ldr	r2, [pc, #548]	; (8004774 <HAL_DMA_IRQHandler+0xcb0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d040      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a87      	ldr	r2, [pc, #540]	; (8004778 <HAL_DMA_IRQHandler+0xcb4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d03b      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a86      	ldr	r2, [pc, #536]	; (800477c <HAL_DMA_IRQHandler+0xcb8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d036      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a84      	ldr	r2, [pc, #528]	; (8004780 <HAL_DMA_IRQHandler+0xcbc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d031      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a83      	ldr	r2, [pc, #524]	; (8004784 <HAL_DMA_IRQHandler+0xcc0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d02c      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a81      	ldr	r2, [pc, #516]	; (8004788 <HAL_DMA_IRQHandler+0xcc4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d027      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a80      	ldr	r2, [pc, #512]	; (800478c <HAL_DMA_IRQHandler+0xcc8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d022      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a7e      	ldr	r2, [pc, #504]	; (8004790 <HAL_DMA_IRQHandler+0xccc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01d      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a7d      	ldr	r2, [pc, #500]	; (8004794 <HAL_DMA_IRQHandler+0xcd0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d018      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a7b      	ldr	r2, [pc, #492]	; (8004798 <HAL_DMA_IRQHandler+0xcd4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7a      	ldr	r2, [pc, #488]	; (800479c <HAL_DMA_IRQHandler+0xcd8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a78      	ldr	r2, [pc, #480]	; (80047a0 <HAL_DMA_IRQHandler+0xcdc>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a77      	ldr	r2, [pc, #476]	; (80047a4 <HAL_DMA_IRQHandler+0xce0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xb12>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a75      	ldr	r2, [pc, #468]	; (80047a8 <HAL_DMA_IRQHandler+0xce4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d108      	bne.n	80045e8 <HAL_DMA_IRQHandler+0xb24>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0208 	bic.w	r2, r2, #8
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	e007      	b.n	80045f8 <HAL_DMA_IRQHandler+0xb34>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0204 	bic.w	r2, r2, #4
 80045f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8165 	beq.w	80048cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800460a:	e15f      	b.n	80048cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	2202      	movs	r2, #2
 8004616:	409a      	lsls	r2, r3
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80c5 	beq.w	80047ac <HAL_DMA_IRQHandler+0xce8>
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80bf 	beq.w	80047ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	2202      	movs	r2, #2
 8004638:	409a      	lsls	r2, r3
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d018      	beq.n	800467a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 813a 	beq.w	80048d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004664:	e134      	b.n	80048d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 8130 	beq.w	80048d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004678:	e12a      	b.n	80048d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d168      	bne.n	8004756 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a38      	ldr	r2, [pc, #224]	; (800476c <HAL_DMA_IRQHandler+0xca8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d04a      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a37      	ldr	r2, [pc, #220]	; (8004770 <HAL_DMA_IRQHandler+0xcac>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d045      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a35      	ldr	r2, [pc, #212]	; (8004774 <HAL_DMA_IRQHandler+0xcb0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d040      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a34      	ldr	r2, [pc, #208]	; (8004778 <HAL_DMA_IRQHandler+0xcb4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d03b      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a32      	ldr	r2, [pc, #200]	; (800477c <HAL_DMA_IRQHandler+0xcb8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d036      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a31      	ldr	r2, [pc, #196]	; (8004780 <HAL_DMA_IRQHandler+0xcbc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d031      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a2f      	ldr	r2, [pc, #188]	; (8004784 <HAL_DMA_IRQHandler+0xcc0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d02c      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a2e      	ldr	r2, [pc, #184]	; (8004788 <HAL_DMA_IRQHandler+0xcc4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d027      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2c      	ldr	r2, [pc, #176]	; (800478c <HAL_DMA_IRQHandler+0xcc8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d022      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2b      	ldr	r2, [pc, #172]	; (8004790 <HAL_DMA_IRQHandler+0xccc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d01d      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a29      	ldr	r2, [pc, #164]	; (8004794 <HAL_DMA_IRQHandler+0xcd0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a28      	ldr	r2, [pc, #160]	; (8004798 <HAL_DMA_IRQHandler+0xcd4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a26      	ldr	r2, [pc, #152]	; (800479c <HAL_DMA_IRQHandler+0xcd8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a25      	ldr	r2, [pc, #148]	; (80047a0 <HAL_DMA_IRQHandler+0xcdc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a23      	ldr	r2, [pc, #140]	; (80047a4 <HAL_DMA_IRQHandler+0xce0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_DMA_IRQHandler+0xc60>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a22      	ldr	r2, [pc, #136]	; (80047a8 <HAL_DMA_IRQHandler+0xce4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <HAL_DMA_IRQHandler+0xc72>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0214 	bic.w	r2, r2, #20
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e007      	b.n	8004746 <HAL_DMA_IRQHandler+0xc82>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 020a 	bic.w	r2, r2, #10
 8004744:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80b8 	beq.w	80048d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004768:	e0b2      	b.n	80048d0 <HAL_DMA_IRQHandler+0xe0c>
 800476a:	bf00      	nop
 800476c:	40020010 	.word	0x40020010
 8004770:	40020028 	.word	0x40020028
 8004774:	40020040 	.word	0x40020040
 8004778:	40020058 	.word	0x40020058
 800477c:	40020070 	.word	0x40020070
 8004780:	40020088 	.word	0x40020088
 8004784:	400200a0 	.word	0x400200a0
 8004788:	400200b8 	.word	0x400200b8
 800478c:	40020410 	.word	0x40020410
 8004790:	40020428 	.word	0x40020428
 8004794:	40020440 	.word	0x40020440
 8004798:	40020458 	.word	0x40020458
 800479c:	40020470 	.word	0x40020470
 80047a0:	40020488 	.word	0x40020488
 80047a4:	400204a0 	.word	0x400204a0
 80047a8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	2208      	movs	r2, #8
 80047b6:	409a      	lsls	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8088 	beq.w	80048d2 <HAL_DMA_IRQHandler+0xe0e>
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8082 	beq.w	80048d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a41      	ldr	r2, [pc, #260]	; (80048d8 <HAL_DMA_IRQHandler+0xe14>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d04a      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a3f      	ldr	r2, [pc, #252]	; (80048dc <HAL_DMA_IRQHandler+0xe18>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d045      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a3e      	ldr	r2, [pc, #248]	; (80048e0 <HAL_DMA_IRQHandler+0xe1c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d040      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a3c      	ldr	r2, [pc, #240]	; (80048e4 <HAL_DMA_IRQHandler+0xe20>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d03b      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a3b      	ldr	r2, [pc, #236]	; (80048e8 <HAL_DMA_IRQHandler+0xe24>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d036      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a39      	ldr	r2, [pc, #228]	; (80048ec <HAL_DMA_IRQHandler+0xe28>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d031      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a38      	ldr	r2, [pc, #224]	; (80048f0 <HAL_DMA_IRQHandler+0xe2c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d02c      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a36      	ldr	r2, [pc, #216]	; (80048f4 <HAL_DMA_IRQHandler+0xe30>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d027      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a35      	ldr	r2, [pc, #212]	; (80048f8 <HAL_DMA_IRQHandler+0xe34>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d022      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a33      	ldr	r2, [pc, #204]	; (80048fc <HAL_DMA_IRQHandler+0xe38>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01d      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a32      	ldr	r2, [pc, #200]	; (8004900 <HAL_DMA_IRQHandler+0xe3c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d018      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a30      	ldr	r2, [pc, #192]	; (8004904 <HAL_DMA_IRQHandler+0xe40>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a2f      	ldr	r2, [pc, #188]	; (8004908 <HAL_DMA_IRQHandler+0xe44>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a2d      	ldr	r2, [pc, #180]	; (800490c <HAL_DMA_IRQHandler+0xe48>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2c      	ldr	r2, [pc, #176]	; (8004910 <HAL_DMA_IRQHandler+0xe4c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_DMA_IRQHandler+0xdaa>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2a      	ldr	r2, [pc, #168]	; (8004914 <HAL_DMA_IRQHandler+0xe50>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d108      	bne.n	8004880 <HAL_DMA_IRQHandler+0xdbc>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 021c 	bic.w	r2, r2, #28
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e007      	b.n	8004890 <HAL_DMA_IRQHandler+0xdcc>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 020e 	bic.w	r2, r2, #14
 800488e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	2201      	movs	r2, #1
 800489a:	409a      	lsls	r2, r3
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
 80048c6:	e004      	b.n	80048d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80048c8:	bf00      	nop
 80048ca:	e002      	b.n	80048d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048cc:	bf00      	nop
 80048ce:	e000      	b.n	80048d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048d2:	3728      	adds	r7, #40	; 0x28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40020010 	.word	0x40020010
 80048dc:	40020028 	.word	0x40020028
 80048e0:	40020040 	.word	0x40020040
 80048e4:	40020058 	.word	0x40020058
 80048e8:	40020070 	.word	0x40020070
 80048ec:	40020088 	.word	0x40020088
 80048f0:	400200a0 	.word	0x400200a0
 80048f4:	400200b8 	.word	0x400200b8
 80048f8:	40020410 	.word	0x40020410
 80048fc:	40020428 	.word	0x40020428
 8004900:	40020440 	.word	0x40020440
 8004904:	40020458 	.word	0x40020458
 8004908:	40020470 	.word	0x40020470
 800490c:	40020488 	.word	0x40020488
 8004910:	400204a0 	.word	0x400204a0
 8004914:	400204b8 	.word	0x400204b8

08004918 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a42      	ldr	r2, [pc, #264]	; (8004a30 <DMA_CalcBaseAndBitshift+0x118>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d04a      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a41      	ldr	r2, [pc, #260]	; (8004a34 <DMA_CalcBaseAndBitshift+0x11c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d045      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a3f      	ldr	r2, [pc, #252]	; (8004a38 <DMA_CalcBaseAndBitshift+0x120>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d040      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a3e      	ldr	r2, [pc, #248]	; (8004a3c <DMA_CalcBaseAndBitshift+0x124>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d03b      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a3c      	ldr	r2, [pc, #240]	; (8004a40 <DMA_CalcBaseAndBitshift+0x128>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d036      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a3b      	ldr	r2, [pc, #236]	; (8004a44 <DMA_CalcBaseAndBitshift+0x12c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d031      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a39      	ldr	r2, [pc, #228]	; (8004a48 <DMA_CalcBaseAndBitshift+0x130>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d02c      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a38      	ldr	r2, [pc, #224]	; (8004a4c <DMA_CalcBaseAndBitshift+0x134>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d027      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a36      	ldr	r2, [pc, #216]	; (8004a50 <DMA_CalcBaseAndBitshift+0x138>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d022      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a35      	ldr	r2, [pc, #212]	; (8004a54 <DMA_CalcBaseAndBitshift+0x13c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d01d      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a33      	ldr	r2, [pc, #204]	; (8004a58 <DMA_CalcBaseAndBitshift+0x140>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d018      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a32      	ldr	r2, [pc, #200]	; (8004a5c <DMA_CalcBaseAndBitshift+0x144>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d013      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a30      	ldr	r2, [pc, #192]	; (8004a60 <DMA_CalcBaseAndBitshift+0x148>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00e      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2f      	ldr	r2, [pc, #188]	; (8004a64 <DMA_CalcBaseAndBitshift+0x14c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d009      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a2d      	ldr	r2, [pc, #180]	; (8004a68 <DMA_CalcBaseAndBitshift+0x150>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d004      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <DMA_CalcBaseAndBitshift+0x154>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d101      	bne.n	80049c4 <DMA_CalcBaseAndBitshift+0xac>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <DMA_CalcBaseAndBitshift+0xae>
 80049c4:	2300      	movs	r3, #0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d024      	beq.n	8004a14 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	3b10      	subs	r3, #16
 80049d2:	4a27      	ldr	r2, [pc, #156]	; (8004a70 <DMA_CalcBaseAndBitshift+0x158>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	4a24      	ldr	r2, [pc, #144]	; (8004a74 <DMA_CalcBaseAndBitshift+0x15c>)
 80049e4:	5cd3      	ldrb	r3, [r2, r3]
 80049e6:	461a      	mov	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d908      	bls.n	8004a04 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	4b1f      	ldr	r3, [pc, #124]	; (8004a78 <DMA_CalcBaseAndBitshift+0x160>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	1d1a      	adds	r2, r3, #4
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	659a      	str	r2, [r3, #88]	; 0x58
 8004a02:	e00d      	b.n	8004a20 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <DMA_CalcBaseAndBitshift+0x160>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6593      	str	r3, [r2, #88]	; 0x58
 8004a12:	e005      	b.n	8004a20 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	40020010 	.word	0x40020010
 8004a34:	40020028 	.word	0x40020028
 8004a38:	40020040 	.word	0x40020040
 8004a3c:	40020058 	.word	0x40020058
 8004a40:	40020070 	.word	0x40020070
 8004a44:	40020088 	.word	0x40020088
 8004a48:	400200a0 	.word	0x400200a0
 8004a4c:	400200b8 	.word	0x400200b8
 8004a50:	40020410 	.word	0x40020410
 8004a54:	40020428 	.word	0x40020428
 8004a58:	40020440 	.word	0x40020440
 8004a5c:	40020458 	.word	0x40020458
 8004a60:	40020470 	.word	0x40020470
 8004a64:	40020488 	.word	0x40020488
 8004a68:	400204a0 	.word	0x400204a0
 8004a6c:	400204b8 	.word	0x400204b8
 8004a70:	aaaaaaab 	.word	0xaaaaaaab
 8004a74:	0800bde4 	.word	0x0800bde4
 8004a78:	fffffc00 	.word	0xfffffc00

08004a7c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d120      	bne.n	8004ad2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d858      	bhi.n	8004b4a <DMA_CheckFifoParam+0xce>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <DMA_CheckFifoParam+0x24>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ab1 	.word	0x08004ab1
 8004aa4:	08004ac3 	.word	0x08004ac3
 8004aa8:	08004ab1 	.word	0x08004ab1
 8004aac:	08004b4b 	.word	0x08004b4b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d048      	beq.n	8004b4e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ac0:	e045      	b.n	8004b4e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aca:	d142      	bne.n	8004b52 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ad0:	e03f      	b.n	8004b52 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ada:	d123      	bne.n	8004b24 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d838      	bhi.n	8004b56 <DMA_CheckFifoParam+0xda>
 8004ae4:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <DMA_CheckFifoParam+0x70>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b03 	.word	0x08004b03
 8004af4:	08004afd 	.word	0x08004afd
 8004af8:	08004b15 	.word	0x08004b15
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
        break;
 8004b00:	e030      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d025      	beq.n	8004b5a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b12:	e022      	b.n	8004b5a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b1c:	d11f      	bne.n	8004b5e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b22:	e01c      	b.n	8004b5e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d902      	bls.n	8004b32 <DMA_CheckFifoParam+0xb6>
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d003      	beq.n	8004b38 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b30:	e018      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
        break;
 8004b36:	e015      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00e      	beq.n	8004b62 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
    break;
 8004b48:	e00b      	b.n	8004b62 <DMA_CheckFifoParam+0xe6>
        break;
 8004b4a:	bf00      	nop
 8004b4c:	e00a      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        break;
 8004b4e:	bf00      	nop
 8004b50:	e008      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        break;
 8004b52:	bf00      	nop
 8004b54:	e006      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        break;
 8004b56:	bf00      	nop
 8004b58:	e004      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        break;
 8004b5a:	bf00      	nop
 8004b5c:	e002      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
    break;
 8004b62:	bf00      	nop
    }
  }

  return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop

08004b74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a38      	ldr	r2, [pc, #224]	; (8004c68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d022      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a36      	ldr	r2, [pc, #216]	; (8004c6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01d      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a35      	ldr	r2, [pc, #212]	; (8004c70 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d018      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a33      	ldr	r2, [pc, #204]	; (8004c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a32      	ldr	r2, [pc, #200]	; (8004c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a30      	ldr	r2, [pc, #192]	; (8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a2f      	ldr	r2, [pc, #188]	; (8004c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a2d      	ldr	r2, [pc, #180]	; (8004c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d101      	bne.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01a      	beq.n	8004c12 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	3b08      	subs	r3, #8
 8004be4:	4a28      	ldr	r2, [pc, #160]	; (8004c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	091b      	lsrs	r3, r3, #4
 8004bec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4b26      	ldr	r3, [pc, #152]	; (8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a24      	ldr	r2, [pc, #144]	; (8004c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c00:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	2201      	movs	r2, #1
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c10:	e024      	b.n	8004c5c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	3b10      	subs	r3, #16
 8004c1a:	4a1e      	ldr	r2, [pc, #120]	; (8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c20:	091b      	lsrs	r3, r3, #4
 8004c22:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4a1c      	ldr	r2, [pc, #112]	; (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d806      	bhi.n	8004c3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d902      	bls.n	8004c3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3308      	adds	r3, #8
 8004c38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	461a      	mov	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a16      	ldr	r2, [pc, #88]	; (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c4c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 031f 	and.w	r3, r3, #31
 8004c54:	2201      	movs	r2, #1
 8004c56:	409a      	lsls	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	58025408 	.word	0x58025408
 8004c6c:	5802541c 	.word	0x5802541c
 8004c70:	58025430 	.word	0x58025430
 8004c74:	58025444 	.word	0x58025444
 8004c78:	58025458 	.word	0x58025458
 8004c7c:	5802546c 	.word	0x5802546c
 8004c80:	58025480 	.word	0x58025480
 8004c84:	58025494 	.word	0x58025494
 8004c88:	cccccccd 	.word	0xcccccccd
 8004c8c:	16009600 	.word	0x16009600
 8004c90:	58025880 	.word	0x58025880
 8004c94:	aaaaaaab 	.word	0xaaaaaaab
 8004c98:	400204b8 	.word	0x400204b8
 8004c9c:	4002040f 	.word	0x4002040f
 8004ca0:	10008200 	.word	0x10008200
 8004ca4:	40020880 	.word	0x40020880

08004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d04a      	beq.n	8004d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d847      	bhi.n	8004d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a25      	ldr	r2, [pc, #148]	; (8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d022      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d01d      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a22      	ldr	r2, [pc, #136]	; (8004d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d018      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a21      	ldr	r2, [pc, #132]	; (8004d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	; (8004d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1b      	ldr	r2, [pc, #108]	; (8004d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d101      	bne.n	8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4b17      	ldr	r3, [pc, #92]	; (8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	461a      	mov	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d30:	671a      	str	r2, [r3, #112]	; 0x70
 8004d32:	e009      	b.n	8004d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a11      	ldr	r2, [pc, #68]	; (8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d46:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	58025408 	.word	0x58025408
 8004d64:	5802541c 	.word	0x5802541c
 8004d68:	58025430 	.word	0x58025430
 8004d6c:	58025444 	.word	0x58025444
 8004d70:	58025458 	.word	0x58025458
 8004d74:	5802546c 	.word	0x5802546c
 8004d78:	58025480 	.word	0x58025480
 8004d7c:	58025494 	.word	0x58025494
 8004d80:	1600963f 	.word	0x1600963f
 8004d84:	58025940 	.word	0x58025940
 8004d88:	1000823f 	.word	0x1000823f
 8004d8c:	40020940 	.word	0x40020940

08004d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b089      	sub	sp, #36	; 0x24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d9e:	4b89      	ldr	r3, [pc, #548]	; (8004fc4 <HAL_GPIO_Init+0x234>)
 8004da0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004da2:	e194      	b.n	80050ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	2101      	movs	r1, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa01 f303 	lsl.w	r3, r1, r3
 8004db0:	4013      	ands	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8186 	beq.w	80050c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d00b      	beq.n	8004ddc <HAL_GPIO_Init+0x4c>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d007      	beq.n	8004ddc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dd0:	2b11      	cmp	r3, #17
 8004dd2:	d003      	beq.n	8004ddc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b12      	cmp	r3, #18
 8004dda:	d130      	bne.n	8004e3e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	2203      	movs	r2, #3
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e12:	2201      	movs	r2, #1
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	091b      	lsrs	r3, r3, #4
 8004e28:	f003 0201 	and.w	r2, r3, #1
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	2203      	movs	r2, #3
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4013      	ands	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d003      	beq.n	8004e7e <HAL_GPIO_Init+0xee>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b12      	cmp	r3, #18
 8004e7c:	d123      	bne.n	8004ec6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	08da      	lsrs	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3208      	adds	r2, #8
 8004e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	220f      	movs	r2, #15
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	08da      	lsrs	r2, r3, #3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3208      	adds	r2, #8
 8004ec0:	69b9      	ldr	r1, [r7, #24]
 8004ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4013      	ands	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f003 0203 	and.w	r2, r3, #3
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80e0 	beq.w	80050c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f08:	4b2f      	ldr	r3, [pc, #188]	; (8004fc8 <HAL_GPIO_Init+0x238>)
 8004f0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f0e:	4a2e      	ldr	r2, [pc, #184]	; (8004fc8 <HAL_GPIO_Init+0x238>)
 8004f10:	f043 0302 	orr.w	r3, r3, #2
 8004f14:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f18:	4b2b      	ldr	r3, [pc, #172]	; (8004fc8 <HAL_GPIO_Init+0x238>)
 8004f1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f26:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <HAL_GPIO_Init+0x23c>)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	089b      	lsrs	r3, r3, #2
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	220f      	movs	r2, #15
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a20      	ldr	r2, [pc, #128]	; (8004fd0 <HAL_GPIO_Init+0x240>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d052      	beq.n	8004ff8 <HAL_GPIO_Init+0x268>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <HAL_GPIO_Init+0x244>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d031      	beq.n	8004fbe <HAL_GPIO_Init+0x22e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <HAL_GPIO_Init+0x248>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d02b      	beq.n	8004fba <HAL_GPIO_Init+0x22a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <HAL_GPIO_Init+0x24c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d025      	beq.n	8004fb6 <HAL_GPIO_Init+0x226>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1c      	ldr	r2, [pc, #112]	; (8004fe0 <HAL_GPIO_Init+0x250>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01f      	beq.n	8004fb2 <HAL_GPIO_Init+0x222>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1b      	ldr	r2, [pc, #108]	; (8004fe4 <HAL_GPIO_Init+0x254>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d019      	beq.n	8004fae <HAL_GPIO_Init+0x21e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1a      	ldr	r2, [pc, #104]	; (8004fe8 <HAL_GPIO_Init+0x258>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d013      	beq.n	8004faa <HAL_GPIO_Init+0x21a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a19      	ldr	r2, [pc, #100]	; (8004fec <HAL_GPIO_Init+0x25c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00d      	beq.n	8004fa6 <HAL_GPIO_Init+0x216>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a18      	ldr	r2, [pc, #96]	; (8004ff0 <HAL_GPIO_Init+0x260>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <HAL_GPIO_Init+0x212>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a17      	ldr	r2, [pc, #92]	; (8004ff4 <HAL_GPIO_Init+0x264>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d101      	bne.n	8004f9e <HAL_GPIO_Init+0x20e>
 8004f9a:	2309      	movs	r3, #9
 8004f9c:	e02d      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004f9e:	230a      	movs	r3, #10
 8004fa0:	e02b      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	e029      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fa6:	2307      	movs	r3, #7
 8004fa8:	e027      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004faa:	2306      	movs	r3, #6
 8004fac:	e025      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fae:	2305      	movs	r3, #5
 8004fb0:	e023      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fb2:	2304      	movs	r3, #4
 8004fb4:	e021      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e01f      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e01d      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e01b      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fc2:	bf00      	nop
 8004fc4:	58000080 	.word	0x58000080
 8004fc8:	58024400 	.word	0x58024400
 8004fcc:	58000400 	.word	0x58000400
 8004fd0:	58020000 	.word	0x58020000
 8004fd4:	58020400 	.word	0x58020400
 8004fd8:	58020800 	.word	0x58020800
 8004fdc:	58020c00 	.word	0x58020c00
 8004fe0:	58021000 	.word	0x58021000
 8004fe4:	58021400 	.word	0x58021400
 8004fe8:	58021800 	.word	0x58021800
 8004fec:	58021c00 	.word	0x58021c00
 8004ff0:	58022000 	.word	0x58022000
 8004ff4:	58022400 	.word	0x58022400
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	f002 0203 	and.w	r2, r2, #3
 8005000:	0092      	lsls	r2, r2, #2
 8005002:	4093      	lsls	r3, r2
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4313      	orrs	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800500a:	4938      	ldr	r1, [pc, #224]	; (80050ec <HAL_GPIO_Init+0x35c>)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	089b      	lsrs	r3, r3, #2
 8005010:	3302      	adds	r3, #2
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	43db      	mvns	r3, r3
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	4013      	ands	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	43db      	mvns	r3, r3
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	4013      	ands	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800506c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800509a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4013      	ands	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80050c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	3301      	adds	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f47f ae63 	bne.w	8004da4 <HAL_GPIO_Init+0x14>
  }
}
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	3724      	adds	r7, #36	; 0x24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	58000400 	.word	0x58000400

080050f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	807b      	strh	r3, [r7, #2]
 80050fc:	4613      	mov	r3, r2
 80050fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005100:	787b      	ldrb	r3, [r7, #1]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005106:	887a      	ldrh	r2, [r7, #2]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800510c:	e003      	b.n	8005116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800510e:	887b      	ldrh	r3, [r7, #2]
 8005110:	041a      	lsls	r2, r3, #16
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	619a      	str	r2, [r3, #24]
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	4603      	mov	r3, r0
 800512a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800512c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005130:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	4013      	ands	r3, r2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800513c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005140:	88fb      	ldrh	r3, [r7, #6]
 8005142:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	4618      	mov	r0, r3
 800514a:	f7fc fb79 	bl	8001840 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005160:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <HAL_PWREx_ConfigSupply+0x70>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b04      	cmp	r3, #4
 800516a:	d00a      	beq.n	8005182 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800516c:	4b16      	ldr	r3, [pc, #88]	; (80051c8 <HAL_PWREx_ConfigSupply+0x70>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	429a      	cmp	r2, r3
 8005178:	d001      	beq.n	800517e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e01f      	b.n	80051be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e01d      	b.n	80051be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005182:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <HAL_PWREx_ConfigSupply+0x70>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f023 0207 	bic.w	r2, r3, #7
 800518a:	490f      	ldr	r1, [pc, #60]	; (80051c8 <HAL_PWREx_ConfigSupply+0x70>)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4313      	orrs	r3, r2
 8005190:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005192:	f7fd f9c7 	bl	8002524 <HAL_GetTick>
 8005196:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005198:	e009      	b.n	80051ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800519a:	f7fd f9c3 	bl	8002524 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051a8:	d901      	bls.n	80051ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e007      	b.n	80051be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051ae:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <HAL_PWREx_ConfigSupply+0x70>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ba:	d1ee      	bne.n	800519a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	58024800 	.word	0x58024800

080051cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08c      	sub	sp, #48	; 0x30
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e3ff      	b.n	80059de <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 8087 	beq.w	80052fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ec:	4b99      	ldr	r3, [pc, #612]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051f6:	4b97      	ldr	r3, [pc, #604]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	2b10      	cmp	r3, #16
 8005200:	d007      	beq.n	8005212 <HAL_RCC_OscConfig+0x46>
 8005202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005204:	2b18      	cmp	r3, #24
 8005206:	d110      	bne.n	800522a <HAL_RCC_OscConfig+0x5e>
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d10b      	bne.n	800522a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005212:	4b90      	ldr	r3, [pc, #576]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d06c      	beq.n	80052f8 <HAL_RCC_OscConfig+0x12c>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d168      	bne.n	80052f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e3d9      	b.n	80059de <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005232:	d106      	bne.n	8005242 <HAL_RCC_OscConfig+0x76>
 8005234:	4b87      	ldr	r3, [pc, #540]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a86      	ldr	r2, [pc, #536]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 800523a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	e02e      	b.n	80052a0 <HAL_RCC_OscConfig+0xd4>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10c      	bne.n	8005264 <HAL_RCC_OscConfig+0x98>
 800524a:	4b82      	ldr	r3, [pc, #520]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a81      	ldr	r2, [pc, #516]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	4b7f      	ldr	r3, [pc, #508]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a7e      	ldr	r2, [pc, #504]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 800525c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	e01d      	b.n	80052a0 <HAL_RCC_OscConfig+0xd4>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800526c:	d10c      	bne.n	8005288 <HAL_RCC_OscConfig+0xbc>
 800526e:	4b79      	ldr	r3, [pc, #484]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a78      	ldr	r2, [pc, #480]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	4b76      	ldr	r3, [pc, #472]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a75      	ldr	r2, [pc, #468]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	e00b      	b.n	80052a0 <HAL_RCC_OscConfig+0xd4>
 8005288:	4b72      	ldr	r3, [pc, #456]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a71      	ldr	r2, [pc, #452]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 800528e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	4b6f      	ldr	r3, [pc, #444]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a6e      	ldr	r2, [pc, #440]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 800529a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800529e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d013      	beq.n	80052d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a8:	f7fd f93c 	bl	8002524 <HAL_GetTick>
 80052ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052b0:	f7fd f938 	bl	8002524 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b64      	cmp	r3, #100	; 0x64
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e38d      	b.n	80059de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052c2:	4b64      	ldr	r3, [pc, #400]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <HAL_RCC_OscConfig+0xe4>
 80052ce:	e014      	b.n	80052fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d0:	f7fd f928 	bl	8002524 <HAL_GetTick>
 80052d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052d8:	f7fd f924 	bl	8002524 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	; 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e379      	b.n	80059de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052ea:	4b5a      	ldr	r3, [pc, #360]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f0      	bne.n	80052d8 <HAL_RCC_OscConfig+0x10c>
 80052f6:	e000      	b.n	80052fa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80ae 	beq.w	8005464 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005308:	4b52      	ldr	r3, [pc, #328]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005310:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005312:	4b50      	ldr	r3, [pc, #320]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d007      	beq.n	800532e <HAL_RCC_OscConfig+0x162>
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	2b18      	cmp	r3, #24
 8005322:	d13a      	bne.n	800539a <HAL_RCC_OscConfig+0x1ce>
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d135      	bne.n	800539a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800532e:	4b49      	ldr	r3, [pc, #292]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <HAL_RCC_OscConfig+0x17a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e34b      	b.n	80059de <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005346:	f7fd f8f9 	bl	800253c <HAL_GetREVID>
 800534a:	4603      	mov	r3, r0
 800534c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005350:	4293      	cmp	r3, r2
 8005352:	d817      	bhi.n	8005384 <HAL_RCC_OscConfig+0x1b8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	2b40      	cmp	r3, #64	; 0x40
 800535a:	d108      	bne.n	800536e <HAL_RCC_OscConfig+0x1a2>
 800535c:	4b3d      	ldr	r3, [pc, #244]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005364:	4a3b      	ldr	r2, [pc, #236]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800536c:	e07a      	b.n	8005464 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800536e:	4b39      	ldr	r3, [pc, #228]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	031b      	lsls	r3, r3, #12
 800537c:	4935      	ldr	r1, [pc, #212]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 800537e:	4313      	orrs	r3, r2
 8005380:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005382:	e06f      	b.n	8005464 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005384:	4b33      	ldr	r3, [pc, #204]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	061b      	lsls	r3, r3, #24
 8005392:	4930      	ldr	r1, [pc, #192]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005394:	4313      	orrs	r3, r2
 8005396:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005398:	e064      	b.n	8005464 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d045      	beq.n	800542e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053a2:	4b2c      	ldr	r3, [pc, #176]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f023 0219 	bic.w	r2, r3, #25
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	4929      	ldr	r1, [pc, #164]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fd f8b6 	bl	8002524 <HAL_GetTick>
 80053b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053bc:	f7fd f8b2 	bl	8002524 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e307      	b.n	80059de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053ce:	4b21      	ldr	r3, [pc, #132]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053da:	f7fd f8af 	bl	800253c <HAL_GetREVID>
 80053de:	4603      	mov	r3, r0
 80053e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d817      	bhi.n	8005418 <HAL_RCC_OscConfig+0x24c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d108      	bne.n	8005402 <HAL_RCC_OscConfig+0x236>
 80053f0:	4b18      	ldr	r3, [pc, #96]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80053f8:	4a16      	ldr	r2, [pc, #88]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 80053fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053fe:	6053      	str	r3, [r2, #4]
 8005400:	e030      	b.n	8005464 <HAL_RCC_OscConfig+0x298>
 8005402:	4b14      	ldr	r3, [pc, #80]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	031b      	lsls	r3, r3, #12
 8005410:	4910      	ldr	r1, [pc, #64]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005412:	4313      	orrs	r3, r2
 8005414:	604b      	str	r3, [r1, #4]
 8005416:	e025      	b.n	8005464 <HAL_RCC_OscConfig+0x298>
 8005418:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	061b      	lsls	r3, r3, #24
 8005426:	490b      	ldr	r1, [pc, #44]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005428:	4313      	orrs	r3, r2
 800542a:	604b      	str	r3, [r1, #4]
 800542c:	e01a      	b.n	8005464 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a08      	ldr	r2, [pc, #32]	; (8005454 <HAL_RCC_OscConfig+0x288>)
 8005434:	f023 0301 	bic.w	r3, r3, #1
 8005438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543a:	f7fd f873 	bl	8002524 <HAL_GetTick>
 800543e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005440:	e00a      	b.n	8005458 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005442:	f7fd f86f 	bl	8002524 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d903      	bls.n	8005458 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e2c4      	b.n	80059de <HAL_RCC_OscConfig+0x812>
 8005454:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005458:	4ba4      	ldr	r3, [pc, #656]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1ee      	bne.n	8005442 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80a9 	beq.w	80055c4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005472:	4b9e      	ldr	r3, [pc, #632]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800547a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800547c:	4b9b      	ldr	r3, [pc, #620]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d007      	beq.n	8005498 <HAL_RCC_OscConfig+0x2cc>
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b18      	cmp	r3, #24
 800548c:	d13a      	bne.n	8005504 <HAL_RCC_OscConfig+0x338>
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	2b01      	cmp	r3, #1
 8005496:	d135      	bne.n	8005504 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005498:	4b94      	ldr	r3, [pc, #592]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_OscConfig+0x2e4>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d001      	beq.n	80054b0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e296      	b.n	80059de <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054b0:	f7fd f844 	bl	800253c <HAL_GetREVID>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d817      	bhi.n	80054ee <HAL_RCC_OscConfig+0x322>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d108      	bne.n	80054d8 <HAL_RCC_OscConfig+0x30c>
 80054c6:	4b89      	ldr	r3, [pc, #548]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054ce:	4a87      	ldr	r2, [pc, #540]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 80054d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054d6:	e075      	b.n	80055c4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054d8:	4b84      	ldr	r3, [pc, #528]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	069b      	lsls	r3, r3, #26
 80054e6:	4981      	ldr	r1, [pc, #516]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054ec:	e06a      	b.n	80055c4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054ee:	4b7f      	ldr	r3, [pc, #508]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	061b      	lsls	r3, r3, #24
 80054fc:	497b      	ldr	r1, [pc, #492]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005502:	e05f      	b.n	80055c4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d042      	beq.n	8005592 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800550c:	4b77      	ldr	r3, [pc, #476]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a76      	ldr	r2, [pc, #472]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005518:	f7fd f804 	bl	8002524 <HAL_GetTick>
 800551c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005520:	f7fd f800 	bl	8002524 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e255      	b.n	80059de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005532:	4b6e      	ldr	r3, [pc, #440]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800553e:	f7fc fffd 	bl	800253c <HAL_GetREVID>
 8005542:	4603      	mov	r3, r0
 8005544:	f241 0203 	movw	r2, #4099	; 0x1003
 8005548:	4293      	cmp	r3, r2
 800554a:	d817      	bhi.n	800557c <HAL_RCC_OscConfig+0x3b0>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	2b20      	cmp	r3, #32
 8005552:	d108      	bne.n	8005566 <HAL_RCC_OscConfig+0x39a>
 8005554:	4b65      	ldr	r3, [pc, #404]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800555c:	4a63      	ldr	r2, [pc, #396]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 800555e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005562:	6053      	str	r3, [r2, #4]
 8005564:	e02e      	b.n	80055c4 <HAL_RCC_OscConfig+0x3f8>
 8005566:	4b61      	ldr	r3, [pc, #388]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	069b      	lsls	r3, r3, #26
 8005574:	495d      	ldr	r1, [pc, #372]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005576:	4313      	orrs	r3, r2
 8005578:	604b      	str	r3, [r1, #4]
 800557a:	e023      	b.n	80055c4 <HAL_RCC_OscConfig+0x3f8>
 800557c:	4b5b      	ldr	r3, [pc, #364]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	061b      	lsls	r3, r3, #24
 800558a:	4958      	ldr	r1, [pc, #352]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 800558c:	4313      	orrs	r3, r2
 800558e:	60cb      	str	r3, [r1, #12]
 8005590:	e018      	b.n	80055c4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005592:	4b56      	ldr	r3, [pc, #344]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a55      	ldr	r2, [pc, #340]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559e:	f7fc ffc1 	bl	8002524 <HAL_GetTick>
 80055a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055a6:	f7fc ffbd 	bl	8002524 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e212      	b.n	80059de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055b8:	4b4c      	ldr	r3, [pc, #304]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f0      	bne.n	80055a6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d036      	beq.n	800563e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d019      	beq.n	800560c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055d8:	4b44      	ldr	r3, [pc, #272]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 80055da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055dc:	4a43      	ldr	r2, [pc, #268]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e4:	f7fc ff9e 	bl	8002524 <HAL_GetTick>
 80055e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ec:	f7fc ff9a 	bl	8002524 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e1ef      	b.n	80059de <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055fe:	4b3b      	ldr	r3, [pc, #236]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0x420>
 800560a:	e018      	b.n	800563e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800560c:	4b37      	ldr	r3, [pc, #220]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 800560e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005610:	4a36      	ldr	r2, [pc, #216]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005612:	f023 0301 	bic.w	r3, r3, #1
 8005616:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005618:	f7fc ff84 	bl	8002524 <HAL_GetTick>
 800561c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005620:	f7fc ff80 	bl	8002524 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e1d5      	b.n	80059de <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005632:	4b2e      	ldr	r3, [pc, #184]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f0      	bne.n	8005620 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d036      	beq.n	80056b8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d019      	beq.n	8005686 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005652:	4b26      	ldr	r3, [pc, #152]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a25      	ldr	r2, [pc, #148]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800565c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800565e:	f7fc ff61 	bl	8002524 <HAL_GetTick>
 8005662:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005666:	f7fc ff5d 	bl	8002524 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e1b2      	b.n	80059de <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005678:	4b1c      	ldr	r3, [pc, #112]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <HAL_RCC_OscConfig+0x49a>
 8005684:	e018      	b.n	80056b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005686:	4b19      	ldr	r3, [pc, #100]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a18      	ldr	r2, [pc, #96]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 800568c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005690:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005692:	f7fc ff47 	bl	8002524 <HAL_GetTick>
 8005696:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005698:	e008      	b.n	80056ac <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800569a:	f7fc ff43 	bl	8002524 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e198      	b.n	80059de <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056ac:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <HAL_RCC_OscConfig+0x520>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1f0      	bne.n	800569a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 8085 	beq.w	80057d0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056c6:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <HAL_RCC_OscConfig+0x524>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <HAL_RCC_OscConfig+0x524>)
 80056cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056d2:	f7fc ff27 	bl	8002524 <HAL_GetTick>
 80056d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056d8:	e00c      	b.n	80056f4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056da:	f7fc ff23 	bl	8002524 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b64      	cmp	r3, #100	; 0x64
 80056e6:	d905      	bls.n	80056f4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e178      	b.n	80059de <HAL_RCC_OscConfig+0x812>
 80056ec:	58024400 	.word	0x58024400
 80056f0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056f4:	4b96      	ldr	r3, [pc, #600]	; (8005950 <HAL_RCC_OscConfig+0x784>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0ec      	beq.n	80056da <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d106      	bne.n	8005716 <HAL_RCC_OscConfig+0x54a>
 8005708:	4b92      	ldr	r3, [pc, #584]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	4a91      	ldr	r2, [pc, #580]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 800570e:	f043 0301 	orr.w	r3, r3, #1
 8005712:	6713      	str	r3, [r2, #112]	; 0x70
 8005714:	e02d      	b.n	8005772 <HAL_RCC_OscConfig+0x5a6>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10c      	bne.n	8005738 <HAL_RCC_OscConfig+0x56c>
 800571e:	4b8d      	ldr	r3, [pc, #564]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005722:	4a8c      	ldr	r2, [pc, #560]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005724:	f023 0301 	bic.w	r3, r3, #1
 8005728:	6713      	str	r3, [r2, #112]	; 0x70
 800572a:	4b8a      	ldr	r3, [pc, #552]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572e:	4a89      	ldr	r2, [pc, #548]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005730:	f023 0304 	bic.w	r3, r3, #4
 8005734:	6713      	str	r3, [r2, #112]	; 0x70
 8005736:	e01c      	b.n	8005772 <HAL_RCC_OscConfig+0x5a6>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b05      	cmp	r3, #5
 800573e:	d10c      	bne.n	800575a <HAL_RCC_OscConfig+0x58e>
 8005740:	4b84      	ldr	r3, [pc, #528]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005744:	4a83      	ldr	r2, [pc, #524]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005746:	f043 0304 	orr.w	r3, r3, #4
 800574a:	6713      	str	r3, [r2, #112]	; 0x70
 800574c:	4b81      	ldr	r3, [pc, #516]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 800574e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005750:	4a80      	ldr	r2, [pc, #512]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	6713      	str	r3, [r2, #112]	; 0x70
 8005758:	e00b      	b.n	8005772 <HAL_RCC_OscConfig+0x5a6>
 800575a:	4b7e      	ldr	r3, [pc, #504]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	4a7d      	ldr	r2, [pc, #500]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	6713      	str	r3, [r2, #112]	; 0x70
 8005766:	4b7b      	ldr	r3, [pc, #492]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	4a7a      	ldr	r2, [pc, #488]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 800576c:	f023 0304 	bic.w	r3, r3, #4
 8005770:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d015      	beq.n	80057a6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577a:	f7fc fed3 	bl	8002524 <HAL_GetTick>
 800577e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005780:	e00a      	b.n	8005798 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005782:	f7fc fecf 	bl	8002524 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005790:	4293      	cmp	r3, r2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e122      	b.n	80059de <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005798:	4b6e      	ldr	r3, [pc, #440]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0ee      	beq.n	8005782 <HAL_RCC_OscConfig+0x5b6>
 80057a4:	e014      	b.n	80057d0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a6:	f7fc febd 	bl	8002524 <HAL_GetTick>
 80057aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057ac:	e00a      	b.n	80057c4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ae:	f7fc feb9 	bl	8002524 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e10c      	b.n	80059de <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057c4:	4b63      	ldr	r3, [pc, #396]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1ee      	bne.n	80057ae <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8101 	beq.w	80059dc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057da:	4b5e      	ldr	r3, [pc, #376]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057e2:	2b18      	cmp	r3, #24
 80057e4:	f000 80bc 	beq.w	8005960 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	f040 8095 	bne.w	800591c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f2:	4b58      	ldr	r3, [pc, #352]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a57      	ldr	r2, [pc, #348]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80057f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fe:	f7fc fe91 	bl	8002524 <HAL_GetTick>
 8005802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005806:	f7fc fe8d 	bl	8002524 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e0e2      	b.n	80059de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005818:	4b4e      	ldr	r3, [pc, #312]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f0      	bne.n	8005806 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005824:	4b4b      	ldr	r3, [pc, #300]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005828:	4b4b      	ldr	r3, [pc, #300]	; (8005958 <HAL_RCC_OscConfig+0x78c>)
 800582a:	4013      	ands	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005834:	0112      	lsls	r2, r2, #4
 8005836:	430a      	orrs	r2, r1
 8005838:	4946      	ldr	r1, [pc, #280]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 800583a:	4313      	orrs	r3, r2
 800583c:	628b      	str	r3, [r1, #40]	; 0x28
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	3b01      	subs	r3, #1
 8005844:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584c:	3b01      	subs	r3, #1
 800584e:	025b      	lsls	r3, r3, #9
 8005850:	b29b      	uxth	r3, r3
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	3b01      	subs	r3, #1
 800585a:	041b      	lsls	r3, r3, #16
 800585c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005866:	3b01      	subs	r3, #1
 8005868:	061b      	lsls	r3, r3, #24
 800586a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800586e:	4939      	ldr	r1, [pc, #228]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005870:	4313      	orrs	r3, r2
 8005872:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005874:	4b37      	ldr	r3, [pc, #220]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	4a36      	ldr	r2, [pc, #216]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 800587a:	f023 0301 	bic.w	r3, r3, #1
 800587e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005880:	4b34      	ldr	r3, [pc, #208]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005884:	4b35      	ldr	r3, [pc, #212]	; (800595c <HAL_RCC_OscConfig+0x790>)
 8005886:	4013      	ands	r3, r2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800588c:	00d2      	lsls	r2, r2, #3
 800588e:	4931      	ldr	r1, [pc, #196]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005890:	4313      	orrs	r3, r2
 8005892:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005894:	4b2f      	ldr	r3, [pc, #188]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	f023 020c 	bic.w	r2, r3, #12
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	492c      	ldr	r1, [pc, #176]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80058a6:	4b2b      	ldr	r3, [pc, #172]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	f023 0202 	bic.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	4928      	ldr	r1, [pc, #160]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058b8:	4b26      	ldr	r3, [pc, #152]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	4a25      	ldr	r2, [pc, #148]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80058be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c4:	4b23      	ldr	r3, [pc, #140]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	4a22      	ldr	r2, [pc, #136]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80058ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058d0:	4b20      	ldr	r3, [pc, #128]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	4a1f      	ldr	r2, [pc, #124]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80058d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80058dc:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058e8:	4b1a      	ldr	r3, [pc, #104]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a19      	ldr	r2, [pc, #100]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 80058ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f4:	f7fc fe16 	bl	8002524 <HAL_GetTick>
 80058f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fc:	f7fc fe12 	bl	8002524 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e067      	b.n	80059de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800590e:	4b11      	ldr	r3, [pc, #68]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCC_OscConfig+0x730>
 800591a:	e05f      	b.n	80059dc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591c:	4b0d      	ldr	r3, [pc, #52]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a0c      	ldr	r2, [pc, #48]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fc fdfc 	bl	8002524 <HAL_GetTick>
 800592c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005930:	f7fc fdf8 	bl	8002524 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e04d      	b.n	80059de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005942:	4b04      	ldr	r3, [pc, #16]	; (8005954 <HAL_RCC_OscConfig+0x788>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f0      	bne.n	8005930 <HAL_RCC_OscConfig+0x764>
 800594e:	e045      	b.n	80059dc <HAL_RCC_OscConfig+0x810>
 8005950:	58024800 	.word	0x58024800
 8005954:	58024400 	.word	0x58024400
 8005958:	fffffc0c 	.word	0xfffffc0c
 800595c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005960:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <HAL_RCC_OscConfig+0x81c>)
 8005962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005964:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005966:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <HAL_RCC_OscConfig+0x81c>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	2b01      	cmp	r3, #1
 8005972:	d031      	beq.n	80059d8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f003 0203 	and.w	r2, r3, #3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d12a      	bne.n	80059d8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598e:	429a      	cmp	r2, r3
 8005990:	d122      	bne.n	80059d8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800599e:	429a      	cmp	r2, r3
 80059a0:	d11a      	bne.n	80059d8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	0a5b      	lsrs	r3, r3, #9
 80059a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d111      	bne.n	80059d8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	0c1b      	lsrs	r3, r3, #16
 80059b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d108      	bne.n	80059d8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	0e1b      	lsrs	r3, r3, #24
 80059ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3730      	adds	r7, #48	; 0x30
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	58024400 	.word	0x58024400

080059ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e19c      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a00:	4b8a      	ldr	r3, [pc, #552]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d910      	bls.n	8005a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0e:	4b87      	ldr	r3, [pc, #540]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f023 020f 	bic.w	r2, r3, #15
 8005a16:	4985      	ldr	r1, [pc, #532]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a1e:	4b83      	ldr	r3, [pc, #524]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d001      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e184      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d010      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	4b7b      	ldr	r3, [pc, #492]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d908      	bls.n	8005a5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a4c:	4b78      	ldr	r3, [pc, #480]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	4975      	ldr	r1, [pc, #468]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d010      	beq.n	8005a8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	4b70      	ldr	r3, [pc, #448]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d908      	bls.n	8005a8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a7a:	4b6d      	ldr	r3, [pc, #436]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	496a      	ldr	r1, [pc, #424]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d010      	beq.n	8005aba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	699a      	ldr	r2, [r3, #24]
 8005a9c:	4b64      	ldr	r3, [pc, #400]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d908      	bls.n	8005aba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005aa8:	4b61      	ldr	r3, [pc, #388]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	495e      	ldr	r1, [pc, #376]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d010      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	4b59      	ldr	r3, [pc, #356]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d908      	bls.n	8005ae8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ad6:	4b56      	ldr	r3, [pc, #344]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	4953      	ldr	r1, [pc, #332]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d010      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	4b4d      	ldr	r3, [pc, #308]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d908      	bls.n	8005b16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b04:	4b4a      	ldr	r3, [pc, #296]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f023 020f 	bic.w	r2, r3, #15
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4947      	ldr	r1, [pc, #284]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d055      	beq.n	8005bce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b22:	4b43      	ldr	r3, [pc, #268]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	4940      	ldr	r1, [pc, #256]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d107      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b3c:	4b3c      	ldr	r3, [pc, #240]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d121      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0f6      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d107      	bne.n	8005b64 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b54:	4b36      	ldr	r3, [pc, #216]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d115      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e0ea      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b6c:	4b30      	ldr	r3, [pc, #192]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d109      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0de      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b7c:	4b2c      	ldr	r3, [pc, #176]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e0d6      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b8c:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f023 0207 	bic.w	r2, r3, #7
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4925      	ldr	r1, [pc, #148]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9e:	f7fc fcc1 	bl	8002524 <HAL_GetTick>
 8005ba2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba4:	e00a      	b.n	8005bbc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba6:	f7fc fcbd 	bl	8002524 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e0be      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bbc:	4b1c      	ldr	r3, [pc, #112]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d1eb      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d010      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	4b14      	ldr	r3, [pc, #80]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d208      	bcs.n	8005bfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bea:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	f023 020f 	bic.w	r2, r3, #15
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	490e      	ldr	r1, [pc, #56]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d214      	bcs.n	8005c34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f023 020f 	bic.w	r2, r3, #15
 8005c12:	4906      	ldr	r1, [pc, #24]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1a:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d005      	beq.n	8005c34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e086      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
 8005c2c:	52002000 	.word	0x52002000
 8005c30:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d010      	beq.n	8005c62 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	4b3f      	ldr	r3, [pc, #252]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d208      	bcs.n	8005c62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c50:	4b3c      	ldr	r3, [pc, #240]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	4939      	ldr	r1, [pc, #228]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d010      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	4b34      	ldr	r3, [pc, #208]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d208      	bcs.n	8005c90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c7e:	4b31      	ldr	r3, [pc, #196]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	492e      	ldr	r1, [pc, #184]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d010      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	4b28      	ldr	r3, [pc, #160]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d208      	bcs.n	8005cbe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cac:	4b25      	ldr	r3, [pc, #148]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	4922      	ldr	r1, [pc, #136]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d010      	beq.n	8005cec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	4b1d      	ldr	r3, [pc, #116]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d208      	bcs.n	8005cec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005cda:	4b1a      	ldr	r3, [pc, #104]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	4917      	ldr	r1, [pc, #92]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cec:	f000 f834 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	0a1b      	lsrs	r3, r3, #8
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	4912      	ldr	r1, [pc, #72]	; (8005d48 <HAL_RCC_ClockConfig+0x35c>)
 8005cfe:	5ccb      	ldrb	r3, [r1, r3]
 8005d00:	f003 031f 	and.w	r3, r3, #31
 8005d04:	fa22 f303 	lsr.w	r3, r2, r3
 8005d08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d0a:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	4a0d      	ldr	r2, [pc, #52]	; (8005d48 <HAL_RCC_ClockConfig+0x35c>)
 8005d14:	5cd3      	ldrb	r3, [r2, r3]
 8005d16:	f003 031f 	and.w	r3, r3, #31
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d20:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <HAL_RCC_ClockConfig+0x360>)
 8005d22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d24:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <HAL_RCC_ClockConfig+0x364>)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <HAL_RCC_ClockConfig+0x368>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fc fbae 	bl	8002490 <HAL_InitTick>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	58024400 	.word	0x58024400
 8005d48:	0800bdd4 	.word	0x0800bdd4
 8005d4c:	20000004 	.word	0x20000004
 8005d50:	20000000 	.word	0x20000000
 8005d54:	20000008 	.word	0x20000008

08005d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b089      	sub	sp, #36	; 0x24
 8005d5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d5e:	4bb3      	ldr	r3, [pc, #716]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d66:	2b18      	cmp	r3, #24
 8005d68:	f200 8155 	bhi.w	8006016 <HAL_RCC_GetSysClockFreq+0x2be>
 8005d6c:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d72:	bf00      	nop
 8005d74:	08005dd9 	.word	0x08005dd9
 8005d78:	08006017 	.word	0x08006017
 8005d7c:	08006017 	.word	0x08006017
 8005d80:	08006017 	.word	0x08006017
 8005d84:	08006017 	.word	0x08006017
 8005d88:	08006017 	.word	0x08006017
 8005d8c:	08006017 	.word	0x08006017
 8005d90:	08006017 	.word	0x08006017
 8005d94:	08005dff 	.word	0x08005dff
 8005d98:	08006017 	.word	0x08006017
 8005d9c:	08006017 	.word	0x08006017
 8005da0:	08006017 	.word	0x08006017
 8005da4:	08006017 	.word	0x08006017
 8005da8:	08006017 	.word	0x08006017
 8005dac:	08006017 	.word	0x08006017
 8005db0:	08006017 	.word	0x08006017
 8005db4:	08005e05 	.word	0x08005e05
 8005db8:	08006017 	.word	0x08006017
 8005dbc:	08006017 	.word	0x08006017
 8005dc0:	08006017 	.word	0x08006017
 8005dc4:	08006017 	.word	0x08006017
 8005dc8:	08006017 	.word	0x08006017
 8005dcc:	08006017 	.word	0x08006017
 8005dd0:	08006017 	.word	0x08006017
 8005dd4:	08005e0b 	.word	0x08005e0b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dd8:	4b94      	ldr	r3, [pc, #592]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d009      	beq.n	8005df8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005de4:	4b91      	ldr	r3, [pc, #580]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	08db      	lsrs	r3, r3, #3
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	4a90      	ldr	r2, [pc, #576]	; (8006030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005df6:	e111      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005df8:	4b8d      	ldr	r3, [pc, #564]	; (8006030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dfa:	61bb      	str	r3, [r7, #24]
    break;
 8005dfc:	e10e      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005dfe:	4b8d      	ldr	r3, [pc, #564]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e00:	61bb      	str	r3, [r7, #24]
    break;
 8005e02:	e10b      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005e04:	4b8c      	ldr	r3, [pc, #560]	; (8006038 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e06:	61bb      	str	r3, [r7, #24]
    break;
 8005e08:	e108      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e0a:	4b88      	ldr	r3, [pc, #544]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005e14:	4b85      	ldr	r3, [pc, #532]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	091b      	lsrs	r3, r3, #4
 8005e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e1e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e20:	4b82      	ldr	r3, [pc, #520]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e2a:	4b80      	ldr	r3, [pc, #512]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2e:	08db      	lsrs	r3, r3, #3
 8005e30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e42:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 80e1 	beq.w	8006010 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	f000 8083 	beq.w	8005f5c <HAL_RCC_GetSysClockFreq+0x204>
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	f200 80a1 	bhi.w	8005fa0 <HAL_RCC_GetSysClockFreq+0x248>
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_RCC_GetSysClockFreq+0x114>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d056      	beq.n	8005f18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e6a:	e099      	b.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e6c:	4b6f      	ldr	r3, [pc, #444]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d02d      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e78:	4b6c      	ldr	r3, [pc, #432]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	08db      	lsrs	r3, r3, #3
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	4a6b      	ldr	r2, [pc, #428]	; (8006030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e84:	fa22 f303 	lsr.w	r3, r2, r3
 8005e88:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	ee07 3a90 	vmov	s15, r3
 8005e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea2:	4b62      	ldr	r3, [pc, #392]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ece:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005ed2:	e087      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006040 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee6:	4b51      	ldr	r3, [pc, #324]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005efa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f16:	e065      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006044 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2a:	4b40      	ldr	r3, [pc, #256]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f5a:	e043      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006048 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6e:	4b2f      	ldr	r3, [pc, #188]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f9e:	e021      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005faa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006044 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb2:	4b1e      	ldr	r3, [pc, #120]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fc6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fe2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005fe4:	4b11      	ldr	r3, [pc, #68]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	0a5b      	lsrs	r3, r3, #9
 8005fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fee:	3301      	adds	r3, #1
 8005ff0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	ee07 3a90 	vmov	s15, r3
 8005ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006008:	ee17 3a90 	vmov	r3, s15
 800600c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800600e:	e005      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	61bb      	str	r3, [r7, #24]
    break;
 8006014:	e002      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006016:	4b07      	ldr	r3, [pc, #28]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006018:	61bb      	str	r3, [r7, #24]
    break;
 800601a:	bf00      	nop
  }

  return sysclockfreq;
 800601c:	69bb      	ldr	r3, [r7, #24]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3724      	adds	r7, #36	; 0x24
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	58024400 	.word	0x58024400
 8006030:	03d09000 	.word	0x03d09000
 8006034:	003d0900 	.word	0x003d0900
 8006038:	02dc6c00 	.word	0x02dc6c00
 800603c:	46000000 	.word	0x46000000
 8006040:	4c742400 	.word	0x4c742400
 8006044:	4a742400 	.word	0x4a742400
 8006048:	4c371b00 	.word	0x4c371b00

0800604c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006052:	f7ff fe81 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 8006056:	4602      	mov	r2, r0
 8006058:	4b10      	ldr	r3, [pc, #64]	; (800609c <HAL_RCC_GetHCLKFreq+0x50>)
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	0a1b      	lsrs	r3, r3, #8
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	490f      	ldr	r1, [pc, #60]	; (80060a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006064:	5ccb      	ldrb	r3, [r1, r3]
 8006066:	f003 031f 	and.w	r3, r3, #31
 800606a:	fa22 f303 	lsr.w	r3, r2, r3
 800606e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <HAL_RCC_GetHCLKFreq+0x50>)
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800607a:	5cd3      	ldrb	r3, [r2, r3]
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	fa22 f303 	lsr.w	r3, r2, r3
 8006086:	4a07      	ldr	r2, [pc, #28]	; (80060a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006088:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800608a:	4a07      	ldr	r2, [pc, #28]	; (80060a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006090:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006092:	681b      	ldr	r3, [r3, #0]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	58024400 	.word	0x58024400
 80060a0:	0800bdd4 	.word	0x0800bdd4
 80060a4:	20000004 	.word	0x20000004
 80060a8:	20000000 	.word	0x20000000

080060ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80060b0:	f7ff ffcc 	bl	800604c <HAL_RCC_GetHCLKFreq>
 80060b4:	4602      	mov	r2, r0
 80060b6:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	4904      	ldr	r1, [pc, #16]	; (80060d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060c2:	5ccb      	ldrb	r3, [r1, r3]
 80060c4:	f003 031f 	and.w	r3, r3, #31
 80060c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	58024400 	.word	0x58024400
 80060d4:	0800bdd4 	.word	0x0800bdd4

080060d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80060dc:	f7ff ffb6 	bl	800604c <HAL_RCC_GetHCLKFreq>
 80060e0:	4602      	mov	r2, r0
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	4904      	ldr	r1, [pc, #16]	; (8006100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060ee:	5ccb      	ldrb	r3, [r1, r3]
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	58024400 	.word	0x58024400
 8006100:	0800bdd4 	.word	0x0800bdd4

08006104 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800610c:	2300      	movs	r3, #0
 800610e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006110:	2300      	movs	r3, #0
 8006112:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d03f      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006124:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006128:	d02a      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800612a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800612e:	d824      	bhi.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006130:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006134:	d018      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006136:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800613a:	d81e      	bhi.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800613c:	2b00      	cmp	r3, #0
 800613e:	d003      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006144:	d007      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006146:	e018      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006148:	4bab      	ldr	r3, [pc, #684]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	4aaa      	ldr	r2, [pc, #680]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800614e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006152:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006154:	e015      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3304      	adds	r3, #4
 800615a:	2102      	movs	r1, #2
 800615c:	4618      	mov	r0, r3
 800615e:	f001 f9cf 	bl	8007500 <RCCEx_PLL2_Config>
 8006162:	4603      	mov	r3, r0
 8006164:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006166:	e00c      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3324      	adds	r3, #36	; 0x24
 800616c:	2102      	movs	r1, #2
 800616e:	4618      	mov	r0, r3
 8006170:	f001 fa78 	bl	8007664 <RCCEx_PLL3_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006178:	e003      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	75fb      	strb	r3, [r7, #23]
      break;
 800617e:	e000      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006188:	4b9b      	ldr	r3, [pc, #620]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800618a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006194:	4998      	ldr	r1, [pc, #608]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006196:	4313      	orrs	r3, r2
 8006198:	650b      	str	r3, [r1, #80]	; 0x50
 800619a:	e001      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d03d      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d826      	bhi.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80061b4:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061d1 	.word	0x080061d1
 80061c0:	080061df 	.word	0x080061df
 80061c4:	080061f1 	.word	0x080061f1
 80061c8:	08006209 	.word	0x08006209
 80061cc:	08006209 	.word	0x08006209
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d0:	4b89      	ldr	r3, [pc, #548]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	4a88      	ldr	r2, [pc, #544]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061dc:	e015      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3304      	adds	r3, #4
 80061e2:	2100      	movs	r1, #0
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 f98b 	bl	8007500 <RCCEx_PLL2_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061ee:	e00c      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3324      	adds	r3, #36	; 0x24
 80061f4:	2100      	movs	r1, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f001 fa34 	bl	8007664 <RCCEx_PLL3_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006200:	e003      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	75fb      	strb	r3, [r7, #23]
      break;
 8006206:	e000      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800620a:	7dfb      	ldrb	r3, [r7, #23]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d109      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006210:	4b79      	ldr	r3, [pc, #484]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006214:	f023 0207 	bic.w	r2, r3, #7
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621c:	4976      	ldr	r1, [pc, #472]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800621e:	4313      	orrs	r3, r2
 8006220:	650b      	str	r3, [r1, #80]	; 0x50
 8006222:	e001      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006230:	2b00      	cmp	r3, #0
 8006232:	d042      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623c:	d02b      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800623e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006242:	d825      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006244:	2bc0      	cmp	r3, #192	; 0xc0
 8006246:	d028      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006248:	2bc0      	cmp	r3, #192	; 0xc0
 800624a:	d821      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800624c:	2b80      	cmp	r3, #128	; 0x80
 800624e:	d016      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006250:	2b80      	cmp	r3, #128	; 0x80
 8006252:	d81d      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006258:	2b40      	cmp	r3, #64	; 0x40
 800625a:	d007      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800625c:	e018      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625e:	4b66      	ldr	r3, [pc, #408]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006262:	4a65      	ldr	r2, [pc, #404]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006268:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800626a:	e017      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	2100      	movs	r1, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f001 f944 	bl	8007500 <RCCEx_PLL2_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800627c:	e00e      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3324      	adds	r3, #36	; 0x24
 8006282:	2100      	movs	r1, #0
 8006284:	4618      	mov	r0, r3
 8006286:	f001 f9ed 	bl	8007664 <RCCEx_PLL3_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800628e:	e005      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	75fb      	strb	r3, [r7, #23]
      break;
 8006294:	e002      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006296:	bf00      	nop
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800629a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d109      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80062a2:	4b55      	ldr	r3, [pc, #340]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ae:	4952      	ldr	r1, [pc, #328]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	650b      	str	r3, [r1, #80]	; 0x50
 80062b4:	e001      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d049      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062d0:	d030      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80062d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062d6:	d82a      	bhi.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80062d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062dc:	d02c      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80062de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062e2:	d824      	bhi.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80062e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062e8:	d018      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80062ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ee:	d81e      	bhi.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80062f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062f8:	d007      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80062fa:	e018      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062fc:	4b3e      	ldr	r3, [pc, #248]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	4a3d      	ldr	r2, [pc, #244]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006306:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006308:	e017      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3304      	adds	r3, #4
 800630e:	2100      	movs	r1, #0
 8006310:	4618      	mov	r0, r3
 8006312:	f001 f8f5 	bl	8007500 <RCCEx_PLL2_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800631a:	e00e      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3324      	adds	r3, #36	; 0x24
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f001 f99e 	bl	8007664 <RCCEx_PLL3_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800632c:	e005      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	75fb      	strb	r3, [r7, #23]
      break;
 8006332:	e002      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006334:	bf00      	nop
 8006336:	e000      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006340:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800634e:	492a      	ldr	r1, [pc, #168]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006350:	4313      	orrs	r3, r2
 8006352:	658b      	str	r3, [r1, #88]	; 0x58
 8006354:	e001      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
 8006358:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006362:	2b00      	cmp	r3, #0
 8006364:	d04c      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800636c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006370:	d030      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006376:	d82a      	bhi.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006378:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800637c:	d02c      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800637e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006382:	d824      	bhi.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006384:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006388:	d018      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800638a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800638e:	d81e      	bhi.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006398:	d007      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800639a:	e018      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800639c:	4b16      	ldr	r3, [pc, #88]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063a8:	e017      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3304      	adds	r3, #4
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 f8a5 	bl	8007500 <RCCEx_PLL2_Config>
 80063b6:	4603      	mov	r3, r0
 80063b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063ba:	e00e      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3324      	adds	r3, #36	; 0x24
 80063c0:	2100      	movs	r1, #0
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 f94e 	bl	8007664 <RCCEx_PLL3_Config>
 80063c8:	4603      	mov	r3, r0
 80063ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063cc:	e005      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	75fb      	strb	r3, [r7, #23]
      break;
 80063d2:	e002      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80063d4:	bf00      	nop
 80063d6:	e000      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80063d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063da:	7dfb      	ldrb	r3, [r7, #23]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10d      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063e0:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063ee:	4902      	ldr	r1, [pc, #8]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	658b      	str	r3, [r1, #88]	; 0x58
 80063f4:	e004      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80063f6:	bf00      	nop
 80063f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
 80063fe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d032      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006410:	2b30      	cmp	r3, #48	; 0x30
 8006412:	d01c      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006414:	2b30      	cmp	r3, #48	; 0x30
 8006416:	d817      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006418:	2b20      	cmp	r3, #32
 800641a:	d00c      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800641c:	2b20      	cmp	r3, #32
 800641e:	d813      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d016      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006424:	2b10      	cmp	r3, #16
 8006426:	d10f      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006428:	4baf      	ldr	r3, [pc, #700]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	4aae      	ldr	r2, [pc, #696]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800642e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006434:	e00e      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3304      	adds	r3, #4
 800643a:	2102      	movs	r1, #2
 800643c:	4618      	mov	r0, r3
 800643e:	f001 f85f 	bl	8007500 <RCCEx_PLL2_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006446:	e005      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]
      break;
 800644c:	e002      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800644e:	bf00      	nop
 8006450:	e000      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006454:	7dfb      	ldrb	r3, [r7, #23]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800645a:	4ba3      	ldr	r3, [pc, #652]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800645c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800645e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006466:	49a0      	ldr	r1, [pc, #640]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006468:	4313      	orrs	r3, r2
 800646a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800646c:	e001      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d047      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006486:	d030      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800648c:	d82a      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800648e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006492:	d02c      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006498:	d824      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800649a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649e:	d018      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80064a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a4:	d81e      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80064aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ae:	d007      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80064b0:	e018      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b2:	4b8d      	ldr	r3, [pc, #564]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b6:	4a8c      	ldr	r2, [pc, #560]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064be:	e017      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3304      	adds	r3, #4
 80064c4:	2100      	movs	r1, #0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 f81a 	bl	8007500 <RCCEx_PLL2_Config>
 80064cc:	4603      	mov	r3, r0
 80064ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064d0:	e00e      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3324      	adds	r3, #36	; 0x24
 80064d6:	2100      	movs	r1, #0
 80064d8:	4618      	mov	r0, r3
 80064da:	f001 f8c3 	bl	8007664 <RCCEx_PLL3_Config>
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064e2:	e005      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	75fb      	strb	r3, [r7, #23]
      break;
 80064e8:	e002      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80064ea:	bf00      	nop
 80064ec:	e000      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80064ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064f6:	4b7c      	ldr	r3, [pc, #496]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064fa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006502:	4979      	ldr	r1, [pc, #484]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006504:	4313      	orrs	r3, r2
 8006506:	650b      	str	r3, [r1, #80]	; 0x50
 8006508:	e001      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d049      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800651e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006522:	d02e      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006528:	d828      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800652a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800652e:	d02a      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006530:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006534:	d822      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006536:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800653a:	d026      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800653c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006540:	d81c      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006546:	d010      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800654c:	d816      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d01d      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006556:	d111      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3304      	adds	r3, #4
 800655c:	2101      	movs	r1, #1
 800655e:	4618      	mov	r0, r3
 8006560:	f000 ffce 	bl	8007500 <RCCEx_PLL2_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006568:	e012      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3324      	adds	r3, #36	; 0x24
 800656e:	2101      	movs	r1, #1
 8006570:	4618      	mov	r0, r3
 8006572:	f001 f877 	bl	8007664 <RCCEx_PLL3_Config>
 8006576:	4603      	mov	r3, r0
 8006578:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800657a:	e009      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	75fb      	strb	r3, [r7, #23]
      break;
 8006580:	e006      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006582:	bf00      	nop
 8006584:	e004      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006586:	bf00      	nop
 8006588:	e002      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800658a:	bf00      	nop
 800658c:	e000      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800658e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006590:	7dfb      	ldrb	r3, [r7, #23]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006596:	4b54      	ldr	r3, [pc, #336]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a2:	4951      	ldr	r1, [pc, #324]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	650b      	str	r3, [r1, #80]	; 0x50
 80065a8:	e001      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d04b      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065c4:	d02e      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80065c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065ca:	d828      	bhi.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80065cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d0:	d02a      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80065d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d6:	d822      	bhi.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80065d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065dc:	d026      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80065de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065e2:	d81c      	bhi.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80065e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e8:	d010      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80065ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ee:	d816      	bhi.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01d      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80065f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065f8:	d111      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3304      	adds	r3, #4
 80065fe:	2101      	movs	r1, #1
 8006600:	4618      	mov	r0, r3
 8006602:	f000 ff7d 	bl	8007500 <RCCEx_PLL2_Config>
 8006606:	4603      	mov	r3, r0
 8006608:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800660a:	e012      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3324      	adds	r3, #36	; 0x24
 8006610:	2101      	movs	r1, #1
 8006612:	4618      	mov	r0, r3
 8006614:	f001 f826 	bl	8007664 <RCCEx_PLL3_Config>
 8006618:	4603      	mov	r3, r0
 800661a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800661c:	e009      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	75fb      	strb	r3, [r7, #23]
      break;
 8006622:	e006      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006624:	bf00      	nop
 8006626:	e004      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006628:	bf00      	nop
 800662a:	e002      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800662c:	bf00      	nop
 800662e:	e000      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10a      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006638:	4b2b      	ldr	r3, [pc, #172]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800663a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006646:	4928      	ldr	r1, [pc, #160]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006648:	4313      	orrs	r3, r2
 800664a:	658b      	str	r3, [r1, #88]	; 0x58
 800664c:	e001      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664e:	7dfb      	ldrb	r3, [r7, #23]
 8006650:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d02f      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006666:	d00e      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800666c:	d814      	bhi.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d015      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006676:	d10f      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006678:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	4a1a      	ldr	r2, [pc, #104]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800667e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006684:	e00c      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3304      	adds	r3, #4
 800668a:	2101      	movs	r1, #1
 800668c:	4618      	mov	r0, r3
 800668e:	f000 ff37 	bl	8007500 <RCCEx_PLL2_Config>
 8006692:	4603      	mov	r3, r0
 8006694:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006696:	e003      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	75fb      	strb	r3, [r7, #23]
      break;
 800669c:	e000      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800669e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066a6:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066b2:	490d      	ldr	r1, [pc, #52]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	650b      	str	r3, [r1, #80]	; 0x50
 80066b8:	e001      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
 80066bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d033      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d81c      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	08006713 	.word	0x08006713
 80066dc:	080066ed 	.word	0x080066ed
 80066e0:	080066fb 	.word	0x080066fb
 80066e4:	08006713 	.word	0x08006713
 80066e8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ec:	4bb8      	ldr	r3, [pc, #736]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	4ab7      	ldr	r2, [pc, #732]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80066f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80066f8:	e00c      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3304      	adds	r3, #4
 80066fe:	2102      	movs	r1, #2
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fefd 	bl	8007500 <RCCEx_PLL2_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800670a:	e003      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	75fb      	strb	r3, [r7, #23]
      break;
 8006710:	e000      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d109      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800671a:	4bad      	ldr	r3, [pc, #692]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800671c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671e:	f023 0203 	bic.w	r2, r3, #3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006726:	49aa      	ldr	r1, [pc, #680]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006728:	4313      	orrs	r3, r2
 800672a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800672c:	e001      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8086 	beq.w	800684c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006740:	4ba4      	ldr	r3, [pc, #656]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4aa3      	ldr	r2, [pc, #652]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800674a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800674c:	f7fb feea 	bl	8002524 <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006752:	e009      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006754:	f7fb fee6 	bl	8002524 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b64      	cmp	r3, #100	; 0x64
 8006760:	d902      	bls.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	75fb      	strb	r3, [r7, #23]
        break;
 8006766:	e005      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006768:	4b9a      	ldr	r3, [pc, #616]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0ef      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d166      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800677a:	4b95      	ldr	r3, [pc, #596]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800677c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006784:	4053      	eors	r3, r2
 8006786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678a:	2b00      	cmp	r3, #0
 800678c:	d013      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800678e:	4b90      	ldr	r3, [pc, #576]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006796:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006798:	4b8d      	ldr	r3, [pc, #564]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679c:	4a8c      	ldr	r2, [pc, #560]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800679e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067a4:	4b8a      	ldr	r3, [pc, #552]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a8:	4a89      	ldr	r2, [pc, #548]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80067b0:	4a87      	ldr	r2, [pc, #540]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c0:	d115      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c2:	f7fb feaf 	bl	8002524 <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067c8:	e00b      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ca:	f7fb feab 	bl	8002524 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d8:	4293      	cmp	r3, r2
 80067da:	d902      	bls.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	75fb      	strb	r3, [r7, #23]
            break;
 80067e0:	e005      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067e2:	4b7b      	ldr	r3, [pc, #492]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0ed      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d126      	bne.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006802:	d10d      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006804:	4b72      	ldr	r3, [pc, #456]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006812:	0919      	lsrs	r1, r3, #4
 8006814:	4b70      	ldr	r3, [pc, #448]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006816:	400b      	ands	r3, r1
 8006818:	496d      	ldr	r1, [pc, #436]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800681a:	4313      	orrs	r3, r2
 800681c:	610b      	str	r3, [r1, #16]
 800681e:	e005      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006820:	4b6b      	ldr	r3, [pc, #428]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	4a6a      	ldr	r2, [pc, #424]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006826:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800682a:	6113      	str	r3, [r2, #16]
 800682c:	4b68      	ldr	r3, [pc, #416]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800682e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800683a:	4965      	ldr	r1, [pc, #404]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800683c:	4313      	orrs	r3, r2
 800683e:	670b      	str	r3, [r1, #112]	; 0x70
 8006840:	e004      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	75bb      	strb	r3, [r7, #22]
 8006846:	e001      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d07e      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800685c:	2b28      	cmp	r3, #40	; 0x28
 800685e:	d867      	bhi.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006860:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006866:	bf00      	nop
 8006868:	08006937 	.word	0x08006937
 800686c:	08006931 	.word	0x08006931
 8006870:	08006931 	.word	0x08006931
 8006874:	08006931 	.word	0x08006931
 8006878:	08006931 	.word	0x08006931
 800687c:	08006931 	.word	0x08006931
 8006880:	08006931 	.word	0x08006931
 8006884:	08006931 	.word	0x08006931
 8006888:	0800690d 	.word	0x0800690d
 800688c:	08006931 	.word	0x08006931
 8006890:	08006931 	.word	0x08006931
 8006894:	08006931 	.word	0x08006931
 8006898:	08006931 	.word	0x08006931
 800689c:	08006931 	.word	0x08006931
 80068a0:	08006931 	.word	0x08006931
 80068a4:	08006931 	.word	0x08006931
 80068a8:	0800691f 	.word	0x0800691f
 80068ac:	08006931 	.word	0x08006931
 80068b0:	08006931 	.word	0x08006931
 80068b4:	08006931 	.word	0x08006931
 80068b8:	08006931 	.word	0x08006931
 80068bc:	08006931 	.word	0x08006931
 80068c0:	08006931 	.word	0x08006931
 80068c4:	08006931 	.word	0x08006931
 80068c8:	08006937 	.word	0x08006937
 80068cc:	08006931 	.word	0x08006931
 80068d0:	08006931 	.word	0x08006931
 80068d4:	08006931 	.word	0x08006931
 80068d8:	08006931 	.word	0x08006931
 80068dc:	08006931 	.word	0x08006931
 80068e0:	08006931 	.word	0x08006931
 80068e4:	08006931 	.word	0x08006931
 80068e8:	08006937 	.word	0x08006937
 80068ec:	08006931 	.word	0x08006931
 80068f0:	08006931 	.word	0x08006931
 80068f4:	08006931 	.word	0x08006931
 80068f8:	08006931 	.word	0x08006931
 80068fc:	08006931 	.word	0x08006931
 8006900:	08006931 	.word	0x08006931
 8006904:	08006931 	.word	0x08006931
 8006908:	08006937 	.word	0x08006937
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3304      	adds	r3, #4
 8006910:	2101      	movs	r1, #1
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fdf4 	bl	8007500 <RCCEx_PLL2_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800691c:	e00c      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3324      	adds	r3, #36	; 0x24
 8006922:	2101      	movs	r1, #1
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fe9d 	bl	8007664 <RCCEx_PLL3_Config>
 800692a:	4603      	mov	r3, r0
 800692c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800692e:	e003      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	75fb      	strb	r3, [r7, #23]
      break;
 8006934:	e000      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800693e:	4b24      	ldr	r3, [pc, #144]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800694a:	4921      	ldr	r1, [pc, #132]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800694c:	4313      	orrs	r3, r2
 800694e:	654b      	str	r3, [r1, #84]	; 0x54
 8006950:	e001      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d03e      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006966:	2b05      	cmp	r3, #5
 8006968:	d820      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800696a:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800696c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006970:	080069b3 	.word	0x080069b3
 8006974:	08006989 	.word	0x08006989
 8006978:	0800699b 	.word	0x0800699b
 800697c:	080069b3 	.word	0x080069b3
 8006980:	080069b3 	.word	0x080069b3
 8006984:	080069b3 	.word	0x080069b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3304      	adds	r3, #4
 800698c:	2101      	movs	r1, #1
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fdb6 	bl	8007500 <RCCEx_PLL2_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006998:	e00c      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3324      	adds	r3, #36	; 0x24
 800699e:	2101      	movs	r1, #1
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fe5f 	bl	8007664 <RCCEx_PLL3_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80069aa:	e003      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	75fb      	strb	r3, [r7, #23]
      break;
 80069b0:	e000      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80069b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d110      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80069ba:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069be:	f023 0207 	bic.w	r2, r3, #7
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c6:	4902      	ldr	r1, [pc, #8]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	654b      	str	r3, [r1, #84]	; 0x54
 80069cc:	e008      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80069ce:	bf00      	nop
 80069d0:	58024400 	.word	0x58024400
 80069d4:	58024800 	.word	0x58024800
 80069d8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d039      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f2:	2b05      	cmp	r3, #5
 80069f4:	d820      	bhi.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a3f 	.word	0x08006a3f
 8006a00:	08006a15 	.word	0x08006a15
 8006a04:	08006a27 	.word	0x08006a27
 8006a08:	08006a3f 	.word	0x08006a3f
 8006a0c:	08006a3f 	.word	0x08006a3f
 8006a10:	08006a3f 	.word	0x08006a3f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3304      	adds	r3, #4
 8006a18:	2101      	movs	r1, #1
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fd70 	bl	8007500 <RCCEx_PLL2_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a24:	e00c      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3324      	adds	r3, #36	; 0x24
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fe19 	bl	8007664 <RCCEx_PLL3_Config>
 8006a32:	4603      	mov	r3, r0
 8006a34:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a36:	e003      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a3c:	e000      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a46:	4bb7      	ldr	r3, [pc, #732]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4a:	f023 0207 	bic.w	r2, r3, #7
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a54:	49b3      	ldr	r1, [pc, #716]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	658b      	str	r3, [r1, #88]	; 0x58
 8006a5a:	e001      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
 8006a5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d04b      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a76:	d02e      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a7c:	d828      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a82:	d02a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a88:	d822      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a8e:	d026      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006a90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a94:	d81c      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a9a:	d010      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa0:	d816      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01d      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aaa:	d111      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fd24 	bl	8007500 <RCCEx_PLL2_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006abc:	e012      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3324      	adds	r3, #36	; 0x24
 8006ac2:	2102      	movs	r1, #2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fdcd 	bl	8007664 <RCCEx_PLL3_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006ace:	e009      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad4:	e006      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ad6:	bf00      	nop
 8006ad8:	e004      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ada:	bf00      	nop
 8006adc:	e002      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ade:	bf00      	nop
 8006ae0:	e000      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10a      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aea:	4b8e      	ldr	r3, [pc, #568]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006af8:	498a      	ldr	r1, [pc, #552]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	654b      	str	r3, [r1, #84]	; 0x54
 8006afe:	e001      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d04b      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b1a:	d02e      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006b1c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b20:	d828      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b26:	d02a      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2c:	d822      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b32:	d026      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006b34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b38:	d81c      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b3e:	d010      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b44:	d816      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01d      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4e:	d111      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3304      	adds	r3, #4
 8006b54:	2100      	movs	r1, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fcd2 	bl	8007500 <RCCEx_PLL2_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b60:	e012      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3324      	adds	r3, #36	; 0x24
 8006b66:	2102      	movs	r1, #2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fd7b 	bl	8007664 <RCCEx_PLL3_Config>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b72:	e009      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	75fb      	strb	r3, [r7, #23]
      break;
 8006b78:	e006      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b7a:	bf00      	nop
 8006b7c:	e004      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b7e:	bf00      	nop
 8006b80:	e002      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b82:	bf00      	nop
 8006b84:	e000      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b8e:	4b65      	ldr	r3, [pc, #404]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b9c:	4961      	ldr	r1, [pc, #388]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ba2:	e001      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d04b      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bbe:	d02e      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006bc0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bc4:	d828      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bca:	d02a      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd0:	d822      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006bd2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bd6:	d026      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006bd8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bdc:	d81c      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006be2:	d010      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006be8:	d816      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01d      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf2:	d111      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fc80 	bl	8007500 <RCCEx_PLL2_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c04:	e012      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3324      	adds	r3, #36	; 0x24
 8006c0a:	2102      	movs	r1, #2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fd29 	bl	8007664 <RCCEx_PLL3_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c16:	e009      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c1c:	e006      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c1e:	bf00      	nop
 8006c20:	e004      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c22:	bf00      	nop
 8006c24:	e002      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c26:	bf00      	nop
 8006c28:	e000      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c32:	4b3c      	ldr	r3, [pc, #240]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c40:	4938      	ldr	r1, [pc, #224]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	658b      	str	r3, [r1, #88]	; 0x58
 8006c46:	e001      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0308 	and.w	r3, r3, #8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01a      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c62:	d10a      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3324      	adds	r3, #36	; 0x24
 8006c68:	2102      	movs	r1, #2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fcfa 	bl	8007664 <RCCEx_PLL3_Config>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006c7a:	4b2a      	ldr	r3, [pc, #168]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c88:	4926      	ldr	r1, [pc, #152]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0310 	and.w	r3, r3, #16
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d01a      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca4:	d10a      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	3324      	adds	r3, #36	; 0x24
 8006caa:	2102      	movs	r1, #2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fcd9 	bl	8007664 <RCCEx_PLL3_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cbc:	4b19      	ldr	r3, [pc, #100]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cca:	4916      	ldr	r1, [pc, #88]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d036      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ce6:	d01f      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cec:	d817      	bhi.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf6:	d009      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006cf8:	e011      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	2100      	movs	r1, #0
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 fbfd 	bl	8007500 <RCCEx_PLL2_Config>
 8006d06:	4603      	mov	r3, r0
 8006d08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d0a:	e00e      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3324      	adds	r3, #36	; 0x24
 8006d10:	2102      	movs	r1, #2
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fca6 	bl	8007664 <RCCEx_PLL3_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d1c:	e005      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	75fb      	strb	r3, [r7, #23]
      break;
 8006d22:	e002      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006d24:	58024400 	.word	0x58024400
      break;
 8006d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10a      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d30:	4b93      	ldr	r3, [pc, #588]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d3e:	4990      	ldr	r1, [pc, #576]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	658b      	str	r3, [r1, #88]	; 0x58
 8006d44:	e001      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d033      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d60:	d01c      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006d62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d66:	d816      	bhi.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d6c:	d003      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d72:	d007      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006d74:	e00f      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d76:	4b82      	ldr	r3, [pc, #520]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	4a81      	ldr	r2, [pc, #516]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d82:	e00c      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3324      	adds	r3, #36	; 0x24
 8006d88:	2101      	movs	r1, #1
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fc6a 	bl	8007664 <RCCEx_PLL3_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d94:	e003      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
      break;
 8006d9a:	e000      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006da4:	4b76      	ldr	r3, [pc, #472]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db2:	4973      	ldr	r1, [pc, #460]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	654b      	str	r3, [r1, #84]	; 0x54
 8006db8:	e001      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d029      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd6:	d007      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006dd8:	e00f      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dda:	4b69      	ldr	r3, [pc, #420]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	4a68      	ldr	r2, [pc, #416]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006de6:	e00b      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3304      	adds	r3, #4
 8006dec:	2102      	movs	r1, #2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fb86 	bl	8007500 <RCCEx_PLL2_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006df8:	e002      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e06:	4b5e      	ldr	r3, [pc, #376]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e12:	495b      	ldr	r1, [pc, #364]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e18:	e001      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3324      	adds	r3, #36	; 0x24
 8006e2e:	2102      	movs	r1, #2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fc17 	bl	8007664 <RCCEx_PLL3_Config>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d030      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e54:	d017      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e5a:	d811      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e60:	d013      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e66:	d80b      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d010      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e70:	d106      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e72:	4b43      	ldr	r3, [pc, #268]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e76:	4a42      	ldr	r2, [pc, #264]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006e7e:	e007      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	75fb      	strb	r3, [r7, #23]
      break;
 8006e84:	e004      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e86:	bf00      	nop
 8006e88:	e002      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e8a:	bf00      	nop
 8006e8c:	e000      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e96:	4b3a      	ldr	r3, [pc, #232]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ea2:	4937      	ldr	r1, [pc, #220]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	654b      	str	r3, [r1, #84]	; 0x54
 8006ea8:	e001      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
 8006eac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d008      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006eba:	4b31      	ldr	r3, [pc, #196]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ebe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec6:	492e      	ldr	r1, [pc, #184]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d009      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006ed8:	4b29      	ldr	r3, [pc, #164]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ee6:	4926      	ldr	r1, [pc, #152]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d008      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ef8:	4b21      	ldr	r3, [pc, #132]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006efc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f04:	491e      	ldr	r1, [pc, #120]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00d      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f16:	4b1a      	ldr	r3, [pc, #104]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	4a19      	ldr	r2, [pc, #100]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f20:	6113      	str	r3, [r2, #16]
 8006f22:	4b17      	ldr	r3, [pc, #92]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f24:	691a      	ldr	r2, [r3, #16]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006f2c:	4914      	ldr	r1, [pc, #80]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da08      	bge.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f3a:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f46:	490e      	ldr	r1, [pc, #56]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d009      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f58:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f66:	4906      	ldr	r1, [pc, #24]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006f6c:	7dbb      	ldrb	r3, [r7, #22]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	e000      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	58024400 	.word	0x58024400

08006f84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f88:	f7ff f860 	bl	800604c <HAL_RCC_GetHCLKFreq>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	091b      	lsrs	r3, r3, #4
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	4904      	ldr	r1, [pc, #16]	; (8006fac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f9a:	5ccb      	ldrb	r3, [r1, r3]
 8006f9c:	f003 031f 	and.w	r3, r3, #31
 8006fa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	58024400 	.word	0x58024400
 8006fac:	0800bdd4 	.word	0x0800bdd4

08006fb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b089      	sub	sp, #36	; 0x24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fb8:	4ba1      	ldr	r3, [pc, #644]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006fc2:	4b9f      	ldr	r3, [pc, #636]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc6:	0b1b      	lsrs	r3, r3, #12
 8006fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006fce:	4b9c      	ldr	r3, [pc, #624]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd2:	091b      	lsrs	r3, r3, #4
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006fda:	4b99      	ldr	r3, [pc, #612]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fde:	08db      	lsrs	r3, r3, #3
 8006fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	fb02 f303 	mul.w	r3, r2, r3
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 8111 	beq.w	8007220 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b02      	cmp	r3, #2
 8007002:	f000 8083 	beq.w	800710c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b02      	cmp	r3, #2
 800700a:	f200 80a1 	bhi.w	8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d056      	beq.n	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800701a:	e099      	b.n	8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800701c:	4b88      	ldr	r3, [pc, #544]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d02d      	beq.n	8007084 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007028:	4b85      	ldr	r3, [pc, #532]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	08db      	lsrs	r3, r3, #3
 800702e:	f003 0303 	and.w	r3, r3, #3
 8007032:	4a84      	ldr	r2, [pc, #528]	; (8007244 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007034:	fa22 f303 	lsr.w	r3, r2, r3
 8007038:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	ee07 3a90 	vmov	s15, r3
 8007040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007052:	4b7b      	ldr	r3, [pc, #492]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705a:	ee07 3a90 	vmov	s15, r3
 800705e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007062:	ed97 6a03 	vldr	s12, [r7, #12]
 8007066:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800706a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800707a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007082:	e087      	b.n	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800724c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007096:	4b6a      	ldr	r3, [pc, #424]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070c6:	e065      	b.n	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070da:	4b59      	ldr	r3, [pc, #356]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e2:	ee07 3a90 	vmov	s15, r3
 80070e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007106:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800710a:	e043      	b.n	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007116:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800711a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711e:	4b48      	ldr	r3, [pc, #288]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007132:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800714e:	e021      	b.n	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800715e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007162:	4b37      	ldr	r3, [pc, #220]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007172:	ed97 6a03 	vldr	s12, [r7, #12]
 8007176:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800717a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007192:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007194:	4b2a      	ldr	r3, [pc, #168]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	0a5b      	lsrs	r3, r3, #9
 800719a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80071b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ba:	ee17 2a90 	vmov	r2, s15
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80071c2:	4b1f      	ldr	r3, [pc, #124]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	0c1b      	lsrs	r3, r3, #16
 80071c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071cc:	ee07 3a90 	vmov	s15, r3
 80071d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80071e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e8:	ee17 2a90 	vmov	r2, s15
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80071f0:	4b13      	ldr	r3, [pc, #76]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	0e1b      	lsrs	r3, r3, #24
 80071f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800720a:	edd7 6a07 	vldr	s13, [r7, #28]
 800720e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007216:	ee17 2a90 	vmov	r2, s15
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800721e:	e008      	b.n	8007232 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	609a      	str	r2, [r3, #8]
}
 8007232:	bf00      	nop
 8007234:	3724      	adds	r7, #36	; 0x24
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	58024400 	.word	0x58024400
 8007244:	03d09000 	.word	0x03d09000
 8007248:	46000000 	.word	0x46000000
 800724c:	4c742400 	.word	0x4c742400
 8007250:	4a742400 	.word	0x4a742400
 8007254:	4c371b00 	.word	0x4c371b00

08007258 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007258:	b480      	push	{r7}
 800725a:	b089      	sub	sp, #36	; 0x24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007260:	4ba1      	ldr	r3, [pc, #644]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800726a:	4b9f      	ldr	r3, [pc, #636]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726e:	0d1b      	lsrs	r3, r3, #20
 8007270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007274:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007276:	4b9c      	ldr	r3, [pc, #624]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	0a1b      	lsrs	r3, r3, #8
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007282:	4b99      	ldr	r3, [pc, #612]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007286:	08db      	lsrs	r3, r3, #3
 8007288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 8111 	beq.w	80074c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	f000 8083 	beq.w	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	f200 80a1 	bhi.w	80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d056      	beq.n	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80072c2:	e099      	b.n	80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072c4:	4b88      	ldr	r3, [pc, #544]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d02d      	beq.n	800732c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072d0:	4b85      	ldr	r3, [pc, #532]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	08db      	lsrs	r3, r3, #3
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	4a84      	ldr	r2, [pc, #528]	; (80074ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80072dc:	fa22 f303 	lsr.w	r3, r2, r3
 80072e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	ee07 3a90 	vmov	s15, r3
 80072e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fa:	4b7b      	ldr	r3, [pc, #492]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730a:	ed97 6a03 	vldr	s12, [r7, #12]
 800730e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007326:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800732a:	e087      	b.n	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800733a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733e:	4b6a      	ldr	r3, [pc, #424]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007352:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800736e:	e065      	b.n	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800737e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007382:	4b59      	ldr	r3, [pc, #356]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007392:	ed97 6a03 	vldr	s12, [r7, #12]
 8007396:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800739a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073b2:	e043      	b.n	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80073c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c6:	4b48      	ldr	r3, [pc, #288]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073f6:	e021      	b.n	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740a:	4b37      	ldr	r3, [pc, #220]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741a:	ed97 6a03 	vldr	s12, [r7, #12]
 800741e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800743a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800743c:	4b2a      	ldr	r3, [pc, #168]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	0a5b      	lsrs	r3, r3, #9
 8007442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007456:	edd7 6a07 	vldr	s13, [r7, #28]
 800745a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800745e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007462:	ee17 2a90 	vmov	r2, s15
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800746a:	4b1f      	ldr	r3, [pc, #124]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	0c1b      	lsrs	r3, r3, #16
 8007470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007474:	ee07 3a90 	vmov	s15, r3
 8007478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007480:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007484:	edd7 6a07 	vldr	s13, [r7, #28]
 8007488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800748c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007490:	ee17 2a90 	vmov	r2, s15
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007498:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800749a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749c:	0e1b      	lsrs	r3, r3, #24
 800749e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074be:	ee17 2a90 	vmov	r2, s15
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80074c6:	e008      	b.n	80074da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	609a      	str	r2, [r3, #8]
}
 80074da:	bf00      	nop
 80074dc:	3724      	adds	r7, #36	; 0x24
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	58024400 	.word	0x58024400
 80074ec:	03d09000 	.word	0x03d09000
 80074f0:	46000000 	.word	0x46000000
 80074f4:	4c742400 	.word	0x4c742400
 80074f8:	4a742400 	.word	0x4a742400
 80074fc:	4c371b00 	.word	0x4c371b00

08007500 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800750e:	4b53      	ldr	r3, [pc, #332]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007512:	f003 0303 	and.w	r3, r3, #3
 8007516:	2b03      	cmp	r3, #3
 8007518:	d101      	bne.n	800751e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e099      	b.n	8007652 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800751e:	4b4f      	ldr	r3, [pc, #316]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a4e      	ldr	r2, [pc, #312]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007524:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800752a:	f7fa fffb 	bl	8002524 <HAL_GetTick>
 800752e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007530:	e008      	b.n	8007544 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007532:	f7fa fff7 	bl	8002524 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	2b02      	cmp	r3, #2
 800753e:	d901      	bls.n	8007544 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e086      	b.n	8007652 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007544:	4b45      	ldr	r3, [pc, #276]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1f0      	bne.n	8007532 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007550:	4b42      	ldr	r3, [pc, #264]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	031b      	lsls	r3, r3, #12
 800755e:	493f      	ldr	r1, [pc, #252]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007560:	4313      	orrs	r3, r2
 8007562:	628b      	str	r3, [r1, #40]	; 0x28
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	3b01      	subs	r3, #1
 800756a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	3b01      	subs	r3, #1
 8007574:	025b      	lsls	r3, r3, #9
 8007576:	b29b      	uxth	r3, r3
 8007578:	431a      	orrs	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	3b01      	subs	r3, #1
 8007580:	041b      	lsls	r3, r3, #16
 8007582:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007586:	431a      	orrs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	3b01      	subs	r3, #1
 800758e:	061b      	lsls	r3, r3, #24
 8007590:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007594:	4931      	ldr	r1, [pc, #196]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007596:	4313      	orrs	r3, r2
 8007598:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800759a:	4b30      	ldr	r3, [pc, #192]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	492d      	ldr	r1, [pc, #180]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80075ac:	4b2b      	ldr	r3, [pc, #172]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	f023 0220 	bic.w	r2, r3, #32
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	4928      	ldr	r1, [pc, #160]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80075be:	4b27      	ldr	r3, [pc, #156]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	4a26      	ldr	r2, [pc, #152]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075c4:	f023 0310 	bic.w	r3, r3, #16
 80075c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80075ca:	4b24      	ldr	r3, [pc, #144]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ce:	4b24      	ldr	r3, [pc, #144]	; (8007660 <RCCEx_PLL2_Config+0x160>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	69d2      	ldr	r2, [r2, #28]
 80075d6:	00d2      	lsls	r2, r2, #3
 80075d8:	4920      	ldr	r1, [pc, #128]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80075de:	4b1f      	ldr	r3, [pc, #124]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	4a1e      	ldr	r2, [pc, #120]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075e4:	f043 0310 	orr.w	r3, r3, #16
 80075e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80075f0:	4b1a      	ldr	r3, [pc, #104]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	4a19      	ldr	r2, [pc, #100]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075fc:	e00f      	b.n	800761e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d106      	bne.n	8007612 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007604:	4b15      	ldr	r3, [pc, #84]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	4a14      	ldr	r2, [pc, #80]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 800760a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800760e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007610:	e005      	b.n	800761e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007612:	4b12      	ldr	r3, [pc, #72]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	4a11      	ldr	r2, [pc, #68]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800761c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800761e:	4b0f      	ldr	r3, [pc, #60]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a0e      	ldr	r2, [pc, #56]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007624:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800762a:	f7fa ff7b 	bl	8002524 <HAL_GetTick>
 800762e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007630:	e008      	b.n	8007644 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007632:	f7fa ff77 	bl	8002524 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	2b02      	cmp	r3, #2
 800763e:	d901      	bls.n	8007644 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e006      	b.n	8007652 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007644:	4b05      	ldr	r3, [pc, #20]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0f0      	beq.n	8007632 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	58024400 	.word	0x58024400
 8007660:	ffff0007 	.word	0xffff0007

08007664 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007672:	4b53      	ldr	r3, [pc, #332]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	2b03      	cmp	r3, #3
 800767c:	d101      	bne.n	8007682 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e099      	b.n	80077b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007682:	4b4f      	ldr	r3, [pc, #316]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a4e      	ldr	r2, [pc, #312]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800768c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800768e:	f7fa ff49 	bl	8002524 <HAL_GetTick>
 8007692:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007694:	e008      	b.n	80076a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007696:	f7fa ff45 	bl	8002524 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d901      	bls.n	80076a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e086      	b.n	80077b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076a8:	4b45      	ldr	r3, [pc, #276]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1f0      	bne.n	8007696 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80076b4:	4b42      	ldr	r3, [pc, #264]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	051b      	lsls	r3, r3, #20
 80076c2:	493f      	ldr	r1, [pc, #252]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	628b      	str	r3, [r1, #40]	; 0x28
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	025b      	lsls	r3, r3, #9
 80076da:	b29b      	uxth	r3, r3
 80076dc:	431a      	orrs	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	041b      	lsls	r3, r3, #16
 80076e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076ea:	431a      	orrs	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	061b      	lsls	r3, r3, #24
 80076f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076f8:	4931      	ldr	r1, [pc, #196]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80076fe:	4b30      	ldr	r3, [pc, #192]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	492d      	ldr	r1, [pc, #180]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800770c:	4313      	orrs	r3, r2
 800770e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007710:	4b2b      	ldr	r3, [pc, #172]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	4928      	ldr	r1, [pc, #160]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800771e:	4313      	orrs	r3, r2
 8007720:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007722:	4b27      	ldr	r3, [pc, #156]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	4a26      	ldr	r2, [pc, #152]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800772c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800772e:	4b24      	ldr	r3, [pc, #144]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007732:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <RCCEx_PLL3_Config+0x160>)
 8007734:	4013      	ands	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	69d2      	ldr	r2, [r2, #28]
 800773a:	00d2      	lsls	r2, r2, #3
 800773c:	4920      	ldr	r1, [pc, #128]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800773e:	4313      	orrs	r3, r2
 8007740:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007742:	4b1f      	ldr	r3, [pc, #124]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	4a1e      	ldr	r2, [pc, #120]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800774c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007754:	4b1a      	ldr	r3, [pc, #104]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	4a19      	ldr	r2, [pc, #100]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800775a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800775e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007760:	e00f      	b.n	8007782 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d106      	bne.n	8007776 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007768:	4b15      	ldr	r3, [pc, #84]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	4a14      	ldr	r2, [pc, #80]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800776e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007772:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007774:	e005      	b.n	8007782 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007776:	4b12      	ldr	r3, [pc, #72]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777a:	4a11      	ldr	r2, [pc, #68]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800777c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007780:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007782:	4b0f      	ldr	r3, [pc, #60]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a0e      	ldr	r2, [pc, #56]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800778c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800778e:	f7fa fec9 	bl	8002524 <HAL_GetTick>
 8007792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007794:	e008      	b.n	80077a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007796:	f7fa fec5 	bl	8002524 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d901      	bls.n	80077a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e006      	b.n	80077b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077a8:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0f0      	beq.n	8007796 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	58024400 	.word	0x58024400
 80077c4:	ffff0007 	.word	0xffff0007

080077c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e0eb      	b.n	80079b6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a75      	ldr	r2, [pc, #468]	; (80079c0 <HAL_SPI_Init+0x1f8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00f      	beq.n	800780e <HAL_SPI_Init+0x46>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a74      	ldr	r2, [pc, #464]	; (80079c4 <HAL_SPI_Init+0x1fc>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00a      	beq.n	800780e <HAL_SPI_Init+0x46>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a72      	ldr	r2, [pc, #456]	; (80079c8 <HAL_SPI_Init+0x200>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d005      	beq.n	800780e <HAL_SPI_Init+0x46>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	2b0f      	cmp	r3, #15
 8007808:	d901      	bls.n	800780e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e0d3      	b.n	80079b6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f8dc 	bl	80079cc <SPI_GetPacketSize>
 8007814:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a69      	ldr	r2, [pc, #420]	; (80079c0 <HAL_SPI_Init+0x1f8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00c      	beq.n	800783a <HAL_SPI_Init+0x72>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a67      	ldr	r2, [pc, #412]	; (80079c4 <HAL_SPI_Init+0x1fc>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d007      	beq.n	800783a <HAL_SPI_Init+0x72>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a66      	ldr	r2, [pc, #408]	; (80079c8 <HAL_SPI_Init+0x200>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d002      	beq.n	800783a <HAL_SPI_Init+0x72>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b08      	cmp	r3, #8
 8007838:	d811      	bhi.n	800785e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800783e:	4a60      	ldr	r2, [pc, #384]	; (80079c0 <HAL_SPI_Init+0x1f8>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d009      	beq.n	8007858 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a5e      	ldr	r2, [pc, #376]	; (80079c4 <HAL_SPI_Init+0x1fc>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d004      	beq.n	8007858 <HAL_SPI_Init+0x90>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a5d      	ldr	r2, [pc, #372]	; (80079c8 <HAL_SPI_Init+0x200>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d104      	bne.n	8007862 <HAL_SPI_Init+0x9a>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b10      	cmp	r3, #16
 800785c:	d901      	bls.n	8007862 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e0a9      	b.n	80079b6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d106      	bne.n	800787c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7fa f838 	bl	80018ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0201 	bic.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800789c:	d119      	bne.n	80078d2 <HAL_SPI_Init+0x10a>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078a6:	d103      	bne.n	80078b0 <HAL_SPI_Init+0xe8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d008      	beq.n	80078c2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10c      	bne.n	80078d2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078c0:	d107      	bne.n	80078d2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	69da      	ldr	r2, [r3, #28]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078da:	431a      	orrs	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	431a      	orrs	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e4:	ea42 0103 	orr.w	r1, r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	431a      	orrs	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007902:	431a      	orrs	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	431a      	orrs	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	431a      	orrs	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	431a      	orrs	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007926:	431a      	orrs	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	431a      	orrs	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007932:	ea42 0103 	orr.w	r1, r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d113      	bne.n	8007972 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800795c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007970:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0201 	bic.w	r2, r2, #1
 8007980:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	40013000 	.word	0x40013000
 80079c4:	40003800 	.word	0x40003800
 80079c8:	40003c00 	.word	0x40003c00

080079cc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d8:	095b      	lsrs	r3, r3, #5
 80079da:	3301      	adds	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	3301      	adds	r3, #1
 80079e4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	3307      	adds	r3, #7
 80079ea:	08db      	lsrs	r3, r3, #3
 80079ec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	fb02 f303 	mul.w	r3, r2, r3
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e049      	b.n	8007aa8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d106      	bne.n	8007a2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7f9 ffc5 	bl	80019b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2202      	movs	r2, #2
 8007a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f000 fbe1 	bl	8008208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e049      	b.n	8007b56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d106      	bne.n	8007adc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f841 	bl	8007b5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3304      	adds	r3, #4
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f000 fb8a 	bl	8008208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d122      	bne.n	8007bce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d11b      	bne.n	8007bce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f06f 0202 	mvn.w	r2, #2
 8007b9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fb09 	bl	80081cc <HAL_TIM_IC_CaptureCallback>
 8007bba:	e005      	b.n	8007bc8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fafb 	bl	80081b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fb0c 	bl	80081e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b04      	cmp	r3, #4
 8007bda:	d122      	bne.n	8007c22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	f003 0304 	and.w	r3, r3, #4
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d11b      	bne.n	8007c22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f06f 0204 	mvn.w	r2, #4
 8007bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fadf 	bl	80081cc <HAL_TIM_IC_CaptureCallback>
 8007c0e:	e005      	b.n	8007c1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fad1 	bl	80081b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fae2 	bl	80081e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d122      	bne.n	8007c76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f003 0308 	and.w	r3, r3, #8
 8007c3a:	2b08      	cmp	r3, #8
 8007c3c:	d11b      	bne.n	8007c76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f06f 0208 	mvn.w	r2, #8
 8007c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2204      	movs	r2, #4
 8007c4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	f003 0303 	and.w	r3, r3, #3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fab5 	bl	80081cc <HAL_TIM_IC_CaptureCallback>
 8007c62:	e005      	b.n	8007c70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 faa7 	bl	80081b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fab8 	bl	80081e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f003 0310 	and.w	r3, r3, #16
 8007c80:	2b10      	cmp	r3, #16
 8007c82:	d122      	bne.n	8007cca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f003 0310 	and.w	r3, r3, #16
 8007c8e:	2b10      	cmp	r3, #16
 8007c90:	d11b      	bne.n	8007cca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f06f 0210 	mvn.w	r2, #16
 8007c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2208      	movs	r2, #8
 8007ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fa8b 	bl	80081cc <HAL_TIM_IC_CaptureCallback>
 8007cb6:	e005      	b.n	8007cc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fa7d 	bl	80081b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa8e 	bl	80081e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d10e      	bne.n	8007cf6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d107      	bne.n	8007cf6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f06f 0201 	mvn.w	r2, #1
 8007cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7f9 fdb0 	bl	8001856 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d00:	2b80      	cmp	r3, #128	; 0x80
 8007d02:	d10e      	bne.n	8007d22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0e:	2b80      	cmp	r3, #128	; 0x80
 8007d10:	d107      	bne.n	8007d22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 ff89 	bl	8008c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d30:	d10e      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3c:	2b80      	cmp	r3, #128	; 0x80
 8007d3e:	d107      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 ff7c 	bl	8008c48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d10e      	bne.n	8007d7c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d68:	2b40      	cmp	r3, #64	; 0x40
 8007d6a:	d107      	bne.n	8007d7c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa3c 	bl	80081f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	f003 0320 	and.w	r3, r3, #32
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	d10e      	bne.n	8007da8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d107      	bne.n	8007da8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f06f 0220 	mvn.w	r2, #32
 8007da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 ff3c 	bl	8008c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d101      	bne.n	8007dca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	e0fd      	b.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b14      	cmp	r3, #20
 8007dd6:	f200 80f0 	bhi.w	8007fba <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007dda:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de0:	08007e35 	.word	0x08007e35
 8007de4:	08007fbb 	.word	0x08007fbb
 8007de8:	08007fbb 	.word	0x08007fbb
 8007dec:	08007fbb 	.word	0x08007fbb
 8007df0:	08007e75 	.word	0x08007e75
 8007df4:	08007fbb 	.word	0x08007fbb
 8007df8:	08007fbb 	.word	0x08007fbb
 8007dfc:	08007fbb 	.word	0x08007fbb
 8007e00:	08007eb7 	.word	0x08007eb7
 8007e04:	08007fbb 	.word	0x08007fbb
 8007e08:	08007fbb 	.word	0x08007fbb
 8007e0c:	08007fbb 	.word	0x08007fbb
 8007e10:	08007ef7 	.word	0x08007ef7
 8007e14:	08007fbb 	.word	0x08007fbb
 8007e18:	08007fbb 	.word	0x08007fbb
 8007e1c:	08007fbb 	.word	0x08007fbb
 8007e20:	08007f39 	.word	0x08007f39
 8007e24:	08007fbb 	.word	0x08007fbb
 8007e28:	08007fbb 	.word	0x08007fbb
 8007e2c:	08007fbb 	.word	0x08007fbb
 8007e30:	08007f79 	.word	0x08007f79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fa7e 	bl	800833c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f042 0208 	orr.w	r2, r2, #8
 8007e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f022 0204 	bic.w	r2, r2, #4
 8007e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6999      	ldr	r1, [r3, #24]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	691a      	ldr	r2, [r3, #16]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	619a      	str	r2, [r3, #24]
      break;
 8007e72:	e0a3      	b.n	8007fbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68b9      	ldr	r1, [r7, #8]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 faee 	bl	800845c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6999      	ldr	r1, [r3, #24]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	021a      	lsls	r2, r3, #8
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	619a      	str	r2, [r3, #24]
      break;
 8007eb4:	e082      	b.n	8007fbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 fb57 	bl	8008570 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69da      	ldr	r2, [r3, #28]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0208 	orr.w	r2, r2, #8
 8007ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0204 	bic.w	r2, r2, #4
 8007ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69d9      	ldr	r1, [r3, #28]
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	691a      	ldr	r2, [r3, #16]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	61da      	str	r2, [r3, #28]
      break;
 8007ef4:	e062      	b.n	8007fbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fbbd 	bl	800867c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69da      	ldr	r2, [r3, #28]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69d9      	ldr	r1, [r3, #28]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	021a      	lsls	r2, r3, #8
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	61da      	str	r2, [r3, #28]
      break;
 8007f36:	e041      	b.n	8007fbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68b9      	ldr	r1, [r7, #8]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 fc04 	bl	800874c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0208 	orr.w	r2, r2, #8
 8007f52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0204 	bic.w	r2, r2, #4
 8007f62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	691a      	ldr	r2, [r3, #16]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f76:	e021      	b.n	8007fbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68b9      	ldr	r1, [r7, #8]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fc46 	bl	8008810 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	021a      	lsls	r2, r3, #8
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fb8:	e000      	b.n	8007fbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007fba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop

08007fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d101      	bne.n	8007fe8 <HAL_TIM_ConfigClockSource+0x18>
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e0db      	b.n	80081a0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	4b69      	ldr	r3, [pc, #420]	; (80081a8 <HAL_TIM_ConfigClockSource+0x1d8>)
 8008004:	4013      	ands	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800800e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a63      	ldr	r2, [pc, #396]	; (80081ac <HAL_TIM_ConfigClockSource+0x1dc>)
 800801e:	4293      	cmp	r3, r2
 8008020:	f000 80a9 	beq.w	8008176 <HAL_TIM_ConfigClockSource+0x1a6>
 8008024:	4a61      	ldr	r2, [pc, #388]	; (80081ac <HAL_TIM_ConfigClockSource+0x1dc>)
 8008026:	4293      	cmp	r3, r2
 8008028:	f200 80ae 	bhi.w	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
 800802c:	4a60      	ldr	r2, [pc, #384]	; (80081b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800802e:	4293      	cmp	r3, r2
 8008030:	f000 80a1 	beq.w	8008176 <HAL_TIM_ConfigClockSource+0x1a6>
 8008034:	4a5e      	ldr	r2, [pc, #376]	; (80081b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	f200 80a6 	bhi.w	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
 800803c:	4a5d      	ldr	r2, [pc, #372]	; (80081b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	f000 8099 	beq.w	8008176 <HAL_TIM_ConfigClockSource+0x1a6>
 8008044:	4a5b      	ldr	r2, [pc, #364]	; (80081b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008046:	4293      	cmp	r3, r2
 8008048:	f200 809e 	bhi.w	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
 800804c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008050:	f000 8091 	beq.w	8008176 <HAL_TIM_ConfigClockSource+0x1a6>
 8008054:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008058:	f200 8096 	bhi.w	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
 800805c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008060:	f000 8089 	beq.w	8008176 <HAL_TIM_ConfigClockSource+0x1a6>
 8008064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008068:	f200 808e 	bhi.w	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
 800806c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008070:	d03e      	beq.n	80080f0 <HAL_TIM_ConfigClockSource+0x120>
 8008072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008076:	f200 8087 	bhi.w	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
 800807a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800807e:	f000 8085 	beq.w	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 8008082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008086:	d87f      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
 8008088:	2b70      	cmp	r3, #112	; 0x70
 800808a:	d01a      	beq.n	80080c2 <HAL_TIM_ConfigClockSource+0xf2>
 800808c:	2b70      	cmp	r3, #112	; 0x70
 800808e:	d87b      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
 8008090:	2b60      	cmp	r3, #96	; 0x60
 8008092:	d050      	beq.n	8008136 <HAL_TIM_ConfigClockSource+0x166>
 8008094:	2b60      	cmp	r3, #96	; 0x60
 8008096:	d877      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
 8008098:	2b50      	cmp	r3, #80	; 0x50
 800809a:	d03c      	beq.n	8008116 <HAL_TIM_ConfigClockSource+0x146>
 800809c:	2b50      	cmp	r3, #80	; 0x50
 800809e:	d873      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
 80080a0:	2b40      	cmp	r3, #64	; 0x40
 80080a2:	d058      	beq.n	8008156 <HAL_TIM_ConfigClockSource+0x186>
 80080a4:	2b40      	cmp	r3, #64	; 0x40
 80080a6:	d86f      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
 80080a8:	2b30      	cmp	r3, #48	; 0x30
 80080aa:	d064      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0x1a6>
 80080ac:	2b30      	cmp	r3, #48	; 0x30
 80080ae:	d86b      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d060      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0x1a6>
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d867      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d05c      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0x1a6>
 80080bc:	2b10      	cmp	r3, #16
 80080be:	d05a      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80080c0:	e062      	b.n	8008188 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6818      	ldr	r0, [r3, #0]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6899      	ldr	r1, [r3, #8]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f000 fc7f 	bl	80089d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	609a      	str	r2, [r3, #8]
      break;
 80080ee:	e04e      	b.n	800818e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6818      	ldr	r0, [r3, #0]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	6899      	ldr	r1, [r3, #8]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f000 fc68 	bl	80089d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008112:	609a      	str	r2, [r3, #8]
      break;
 8008114:	e03b      	b.n	800818e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6859      	ldr	r1, [r3, #4]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	461a      	mov	r2, r3
 8008124:	f000 fbd8 	bl	80088d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2150      	movs	r1, #80	; 0x50
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fc32 	bl	8008998 <TIM_ITRx_SetConfig>
      break;
 8008134:	e02b      	b.n	800818e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	6859      	ldr	r1, [r3, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	461a      	mov	r2, r3
 8008144:	f000 fbf7 	bl	8008936 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2160      	movs	r1, #96	; 0x60
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fc22 	bl	8008998 <TIM_ITRx_SetConfig>
      break;
 8008154:	e01b      	b.n	800818e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	6859      	ldr	r1, [r3, #4]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	461a      	mov	r2, r3
 8008164:	f000 fbb8 	bl	80088d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2140      	movs	r1, #64	; 0x40
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fc12 	bl	8008998 <TIM_ITRx_SetConfig>
      break;
 8008174:	e00b      	b.n	800818e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4619      	mov	r1, r3
 8008180:	4610      	mov	r0, r2
 8008182:	f000 fc09 	bl	8008998 <TIM_ITRx_SetConfig>
        break;
 8008186:	e002      	b.n	800818e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008188:	bf00      	nop
 800818a:	e000      	b.n	800818e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800818c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	ffceff88 	.word	0xffceff88
 80081ac:	00100040 	.word	0x00100040
 80081b0:	00100030 	.word	0x00100030
 80081b4:	00100020 	.word	0x00100020

080081b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a40      	ldr	r2, [pc, #256]	; (800831c <TIM_Base_SetConfig+0x114>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d013      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008226:	d00f      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a3d      	ldr	r2, [pc, #244]	; (8008320 <TIM_Base_SetConfig+0x118>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00b      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a3c      	ldr	r2, [pc, #240]	; (8008324 <TIM_Base_SetConfig+0x11c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d007      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a3b      	ldr	r2, [pc, #236]	; (8008328 <TIM_Base_SetConfig+0x120>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d003      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a3a      	ldr	r2, [pc, #232]	; (800832c <TIM_Base_SetConfig+0x124>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d108      	bne.n	800825a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a2f      	ldr	r2, [pc, #188]	; (800831c <TIM_Base_SetConfig+0x114>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d01f      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008268:	d01b      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a2c      	ldr	r2, [pc, #176]	; (8008320 <TIM_Base_SetConfig+0x118>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d017      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a2b      	ldr	r2, [pc, #172]	; (8008324 <TIM_Base_SetConfig+0x11c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d013      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a2a      	ldr	r2, [pc, #168]	; (8008328 <TIM_Base_SetConfig+0x120>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d00f      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a29      	ldr	r2, [pc, #164]	; (800832c <TIM_Base_SetConfig+0x124>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00b      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a28      	ldr	r2, [pc, #160]	; (8008330 <TIM_Base_SetConfig+0x128>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d007      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a27      	ldr	r2, [pc, #156]	; (8008334 <TIM_Base_SetConfig+0x12c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d003      	beq.n	80082a2 <TIM_Base_SetConfig+0x9a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a26      	ldr	r2, [pc, #152]	; (8008338 <TIM_Base_SetConfig+0x130>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d108      	bne.n	80082b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a10      	ldr	r2, [pc, #64]	; (800831c <TIM_Base_SetConfig+0x114>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00f      	beq.n	8008300 <TIM_Base_SetConfig+0xf8>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a12      	ldr	r2, [pc, #72]	; (800832c <TIM_Base_SetConfig+0x124>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00b      	beq.n	8008300 <TIM_Base_SetConfig+0xf8>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a11      	ldr	r2, [pc, #68]	; (8008330 <TIM_Base_SetConfig+0x128>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d007      	beq.n	8008300 <TIM_Base_SetConfig+0xf8>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a10      	ldr	r2, [pc, #64]	; (8008334 <TIM_Base_SetConfig+0x12c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_Base_SetConfig+0xf8>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a0f      	ldr	r2, [pc, #60]	; (8008338 <TIM_Base_SetConfig+0x130>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d103      	bne.n	8008308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	691a      	ldr	r2, [r3, #16]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	615a      	str	r2, [r3, #20]
}
 800830e:	bf00      	nop
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	40010000 	.word	0x40010000
 8008320:	40000400 	.word	0x40000400
 8008324:	40000800 	.word	0x40000800
 8008328:	40000c00 	.word	0x40000c00
 800832c:	40010400 	.word	0x40010400
 8008330:	40014000 	.word	0x40014000
 8008334:	40014400 	.word	0x40014400
 8008338:	40014800 	.word	0x40014800

0800833c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	f023 0201 	bic.w	r2, r3, #1
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4b37      	ldr	r3, [pc, #220]	; (8008444 <TIM_OC1_SetConfig+0x108>)
 8008368:	4013      	ands	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f023 0303 	bic.w	r3, r3, #3
 8008372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4313      	orrs	r3, r2
 800837c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f023 0302 	bic.w	r3, r3, #2
 8008384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a2d      	ldr	r2, [pc, #180]	; (8008448 <TIM_OC1_SetConfig+0x10c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00f      	beq.n	80083b8 <TIM_OC1_SetConfig+0x7c>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a2c      	ldr	r2, [pc, #176]	; (800844c <TIM_OC1_SetConfig+0x110>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00b      	beq.n	80083b8 <TIM_OC1_SetConfig+0x7c>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a2b      	ldr	r2, [pc, #172]	; (8008450 <TIM_OC1_SetConfig+0x114>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d007      	beq.n	80083b8 <TIM_OC1_SetConfig+0x7c>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a2a      	ldr	r2, [pc, #168]	; (8008454 <TIM_OC1_SetConfig+0x118>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d003      	beq.n	80083b8 <TIM_OC1_SetConfig+0x7c>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a29      	ldr	r2, [pc, #164]	; (8008458 <TIM_OC1_SetConfig+0x11c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d10c      	bne.n	80083d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f023 0308 	bic.w	r3, r3, #8
 80083be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f023 0304 	bic.w	r3, r3, #4
 80083d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a1c      	ldr	r2, [pc, #112]	; (8008448 <TIM_OC1_SetConfig+0x10c>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d00f      	beq.n	80083fa <TIM_OC1_SetConfig+0xbe>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a1b      	ldr	r2, [pc, #108]	; (800844c <TIM_OC1_SetConfig+0x110>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d00b      	beq.n	80083fa <TIM_OC1_SetConfig+0xbe>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a1a      	ldr	r2, [pc, #104]	; (8008450 <TIM_OC1_SetConfig+0x114>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d007      	beq.n	80083fa <TIM_OC1_SetConfig+0xbe>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a19      	ldr	r2, [pc, #100]	; (8008454 <TIM_OC1_SetConfig+0x118>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d003      	beq.n	80083fa <TIM_OC1_SetConfig+0xbe>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a18      	ldr	r2, [pc, #96]	; (8008458 <TIM_OC1_SetConfig+0x11c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d111      	bne.n	800841e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	4313      	orrs	r3, r2
 8008412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	4313      	orrs	r3, r2
 800841c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	621a      	str	r2, [r3, #32]
}
 8008438:	bf00      	nop
 800843a:	371c      	adds	r7, #28
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	fffeff8f 	.word	0xfffeff8f
 8008448:	40010000 	.word	0x40010000
 800844c:	40010400 	.word	0x40010400
 8008450:	40014000 	.word	0x40014000
 8008454:	40014400 	.word	0x40014400
 8008458:	40014800 	.word	0x40014800

0800845c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800845c:	b480      	push	{r7}
 800845e:	b087      	sub	sp, #28
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	f023 0210 	bic.w	r2, r3, #16
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	4b34      	ldr	r3, [pc, #208]	; (8008558 <TIM_OC2_SetConfig+0xfc>)
 8008488:	4013      	ands	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	4313      	orrs	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f023 0320 	bic.w	r3, r3, #32
 80084a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	011b      	lsls	r3, r3, #4
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a29      	ldr	r2, [pc, #164]	; (800855c <TIM_OC2_SetConfig+0x100>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d003      	beq.n	80084c4 <TIM_OC2_SetConfig+0x68>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a28      	ldr	r2, [pc, #160]	; (8008560 <TIM_OC2_SetConfig+0x104>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d10d      	bne.n	80084e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a1e      	ldr	r2, [pc, #120]	; (800855c <TIM_OC2_SetConfig+0x100>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00f      	beq.n	8008508 <TIM_OC2_SetConfig+0xac>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a1d      	ldr	r2, [pc, #116]	; (8008560 <TIM_OC2_SetConfig+0x104>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d00b      	beq.n	8008508 <TIM_OC2_SetConfig+0xac>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a1c      	ldr	r2, [pc, #112]	; (8008564 <TIM_OC2_SetConfig+0x108>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d007      	beq.n	8008508 <TIM_OC2_SetConfig+0xac>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a1b      	ldr	r2, [pc, #108]	; (8008568 <TIM_OC2_SetConfig+0x10c>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d003      	beq.n	8008508 <TIM_OC2_SetConfig+0xac>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a1a      	ldr	r2, [pc, #104]	; (800856c <TIM_OC2_SetConfig+0x110>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d113      	bne.n	8008530 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800850e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4313      	orrs	r3, r2
 8008522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	4313      	orrs	r3, r2
 800852e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	621a      	str	r2, [r3, #32]
}
 800854a:	bf00      	nop
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	feff8fff 	.word	0xfeff8fff
 800855c:	40010000 	.word	0x40010000
 8008560:	40010400 	.word	0x40010400
 8008564:	40014000 	.word	0x40014000
 8008568:	40014400 	.word	0x40014400
 800856c:	40014800 	.word	0x40014800

08008570 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800859e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0303 	bic.w	r3, r3, #3
 80085a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	021b      	lsls	r3, r3, #8
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a27      	ldr	r2, [pc, #156]	; (8008668 <TIM_OC3_SetConfig+0xf8>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d003      	beq.n	80085d6 <TIM_OC3_SetConfig+0x66>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a26      	ldr	r2, [pc, #152]	; (800866c <TIM_OC3_SetConfig+0xfc>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d10d      	bne.n	80085f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	021b      	lsls	r3, r3, #8
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a1c      	ldr	r2, [pc, #112]	; (8008668 <TIM_OC3_SetConfig+0xf8>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00f      	beq.n	800861a <TIM_OC3_SetConfig+0xaa>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a1b      	ldr	r2, [pc, #108]	; (800866c <TIM_OC3_SetConfig+0xfc>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00b      	beq.n	800861a <TIM_OC3_SetConfig+0xaa>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a1a      	ldr	r2, [pc, #104]	; (8008670 <TIM_OC3_SetConfig+0x100>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d007      	beq.n	800861a <TIM_OC3_SetConfig+0xaa>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a19      	ldr	r2, [pc, #100]	; (8008674 <TIM_OC3_SetConfig+0x104>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d003      	beq.n	800861a <TIM_OC3_SetConfig+0xaa>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a18      	ldr	r2, [pc, #96]	; (8008678 <TIM_OC3_SetConfig+0x108>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d113      	bne.n	8008642 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	011b      	lsls	r3, r3, #4
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	4313      	orrs	r3, r2
 8008634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	011b      	lsls	r3, r3, #4
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	4313      	orrs	r3, r2
 8008640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	621a      	str	r2, [r3, #32]
}
 800865c:	bf00      	nop
 800865e:	371c      	adds	r7, #28
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	40010000 	.word	0x40010000
 800866c:	40010400 	.word	0x40010400
 8008670:	40014000 	.word	0x40014000
 8008674:	40014400 	.word	0x40014400
 8008678:	40014800 	.word	0x40014800

0800867c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	021b      	lsls	r3, r3, #8
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	4313      	orrs	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	031b      	lsls	r3, r3, #12
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a18      	ldr	r2, [pc, #96]	; (8008738 <TIM_OC4_SetConfig+0xbc>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d00f      	beq.n	80086fc <TIM_OC4_SetConfig+0x80>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a17      	ldr	r2, [pc, #92]	; (800873c <TIM_OC4_SetConfig+0xc0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00b      	beq.n	80086fc <TIM_OC4_SetConfig+0x80>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a16      	ldr	r2, [pc, #88]	; (8008740 <TIM_OC4_SetConfig+0xc4>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d007      	beq.n	80086fc <TIM_OC4_SetConfig+0x80>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a15      	ldr	r2, [pc, #84]	; (8008744 <TIM_OC4_SetConfig+0xc8>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d003      	beq.n	80086fc <TIM_OC4_SetConfig+0x80>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a14      	ldr	r2, [pc, #80]	; (8008748 <TIM_OC4_SetConfig+0xcc>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d109      	bne.n	8008710 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	019b      	lsls	r3, r3, #6
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	4313      	orrs	r3, r2
 800870e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	621a      	str	r2, [r3, #32]
}
 800872a:	bf00      	nop
 800872c:	371c      	adds	r7, #28
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	40010000 	.word	0x40010000
 800873c:	40010400 	.word	0x40010400
 8008740:	40014000 	.word	0x40014000
 8008744:	40014400 	.word	0x40014400
 8008748:	40014800 	.word	0x40014800

0800874c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800874c:	b480      	push	{r7}
 800874e:	b087      	sub	sp, #28
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800877a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800878c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	041b      	lsls	r3, r3, #16
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	4313      	orrs	r3, r2
 8008798:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a17      	ldr	r2, [pc, #92]	; (80087fc <TIM_OC5_SetConfig+0xb0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d00f      	beq.n	80087c2 <TIM_OC5_SetConfig+0x76>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a16      	ldr	r2, [pc, #88]	; (8008800 <TIM_OC5_SetConfig+0xb4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d00b      	beq.n	80087c2 <TIM_OC5_SetConfig+0x76>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a15      	ldr	r2, [pc, #84]	; (8008804 <TIM_OC5_SetConfig+0xb8>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d007      	beq.n	80087c2 <TIM_OC5_SetConfig+0x76>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a14      	ldr	r2, [pc, #80]	; (8008808 <TIM_OC5_SetConfig+0xbc>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d003      	beq.n	80087c2 <TIM_OC5_SetConfig+0x76>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a13      	ldr	r2, [pc, #76]	; (800880c <TIM_OC5_SetConfig+0xc0>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d109      	bne.n	80087d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	021b      	lsls	r3, r3, #8
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	621a      	str	r2, [r3, #32]
}
 80087f0:	bf00      	nop
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	40010000 	.word	0x40010000
 8008800:	40010400 	.word	0x40010400
 8008804:	40014000 	.word	0x40014000
 8008808:	40014400 	.word	0x40014400
 800880c:	40014800 	.word	0x40014800

08008810 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800883e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	021b      	lsls	r3, r3, #8
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	051b      	lsls	r3, r3, #20
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	4313      	orrs	r3, r2
 800885e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a18      	ldr	r2, [pc, #96]	; (80088c4 <TIM_OC6_SetConfig+0xb4>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00f      	beq.n	8008888 <TIM_OC6_SetConfig+0x78>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <TIM_OC6_SetConfig+0xb8>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d00b      	beq.n	8008888 <TIM_OC6_SetConfig+0x78>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a16      	ldr	r2, [pc, #88]	; (80088cc <TIM_OC6_SetConfig+0xbc>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d007      	beq.n	8008888 <TIM_OC6_SetConfig+0x78>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a15      	ldr	r2, [pc, #84]	; (80088d0 <TIM_OC6_SetConfig+0xc0>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d003      	beq.n	8008888 <TIM_OC6_SetConfig+0x78>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a14      	ldr	r2, [pc, #80]	; (80088d4 <TIM_OC6_SetConfig+0xc4>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d109      	bne.n	800889c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800888e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	029b      	lsls	r3, r3, #10
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	4313      	orrs	r3, r2
 800889a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	621a      	str	r2, [r3, #32]
}
 80088b6:	bf00      	nop
 80088b8:	371c      	adds	r7, #28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	40010000 	.word	0x40010000
 80088c8:	40010400 	.word	0x40010400
 80088cc:	40014000 	.word	0x40014000
 80088d0:	40014400 	.word	0x40014400
 80088d4:	40014800 	.word	0x40014800

080088d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6a1b      	ldr	r3, [r3, #32]
 80088e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	f023 0201 	bic.w	r2, r3, #1
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	4313      	orrs	r3, r2
 800890c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f023 030a 	bic.w	r3, r3, #10
 8008914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	4313      	orrs	r3, r2
 800891c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	621a      	str	r2, [r3, #32]
}
 800892a:	bf00      	nop
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008936:	b480      	push	{r7}
 8008938:	b087      	sub	sp, #28
 800893a:	af00      	add	r7, sp, #0
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	f023 0210 	bic.w	r2, r3, #16
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008960:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	031b      	lsls	r3, r3, #12
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	4313      	orrs	r3, r2
 800896a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008972:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	621a      	str	r2, [r3, #32]
}
 800898a:	bf00      	nop
 800898c:	371c      	adds	r7, #28
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
	...

08008998 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4b09      	ldr	r3, [pc, #36]	; (80089d0 <TIM_ITRx_SetConfig+0x38>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	f043 0307 	orr.w	r3, r3, #7
 80089ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	609a      	str	r2, [r3, #8]
}
 80089c2:	bf00      	nop
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	ffcfff8f 	.word	0xffcfff8f

080089d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	021a      	lsls	r2, r3, #8
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	431a      	orrs	r2, r3
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	609a      	str	r2, [r3, #8]
}
 8008a08:	bf00      	nop
 8008a0a:	371c      	adds	r7, #28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d101      	bne.n	8008a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a28:	2302      	movs	r3, #2
 8008a2a:	e068      	b.n	8008afe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a2e      	ldr	r2, [pc, #184]	; (8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d004      	beq.n	8008a60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a2d      	ldr	r2, [pc, #180]	; (8008b10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d108      	bne.n	8008a72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a1e      	ldr	r2, [pc, #120]	; (8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d01d      	beq.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a9e:	d018      	beq.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a1b      	ldr	r2, [pc, #108]	; (8008b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d013      	beq.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a1a      	ldr	r2, [pc, #104]	; (8008b18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d00e      	beq.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a18      	ldr	r2, [pc, #96]	; (8008b1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d009      	beq.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a13      	ldr	r2, [pc, #76]	; (8008b10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d004      	beq.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a14      	ldr	r2, [pc, #80]	; (8008b20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d10c      	bne.n	8008aec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	40010000 	.word	0x40010000
 8008b10:	40010400 	.word	0x40010400
 8008b14:	40000400 	.word	0x40000400
 8008b18:	40000800 	.word	0x40000800
 8008b1c:	40000c00 	.word	0x40000c00
 8008b20:	40001800 	.word	0x40001800

08008b24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d101      	bne.n	8008b40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e065      	b.n	8008c0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	041b      	lsls	r3, r3, #16
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a16      	ldr	r2, [pc, #88]	; (8008c18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d004      	beq.n	8008bce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a14      	ldr	r2, [pc, #80]	; (8008c1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d115      	bne.n	8008bfa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	051b      	lsls	r3, r3, #20
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	40010000 	.word	0x40010000
 8008c1c:	40010400 	.word	0x40010400

08008c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e042      	b.n	8008cf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d106      	bne.n	8008c86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7f9 f835 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2224      	movs	r2, #36	; 0x24
 8008c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 0201 	bic.w	r2, r2, #1
 8008c9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fcac 	bl	80095fc <UART_SetConfig>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d101      	bne.n	8008cae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e022      	b.n	8008cf4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f001 fa00 	bl	800a0bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689a      	ldr	r2, [r3, #8]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0201 	orr.w	r2, r2, #1
 8008cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 fa87 	bl	800a200 <UART_CheckIdleState>
 8008cf2:	4603      	mov	r3, r0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08a      	sub	sp, #40	; 0x28
 8008d00:	af02      	add	r7, sp, #8
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d12:	2b20      	cmp	r3, #32
 8008d14:	f040 8083 	bne.w	8008e1e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <HAL_UART_Transmit+0x28>
 8008d1e:	88fb      	ldrh	r3, [r7, #6]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e07b      	b.n	8008e20 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <HAL_UART_Transmit+0x3a>
 8008d32:	2302      	movs	r3, #2
 8008d34:	e074      	b.n	8008e20 <HAL_UART_Transmit+0x124>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2221      	movs	r2, #33	; 0x21
 8008d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d4e:	f7f9 fbe9 	bl	8002524 <HAL_GetTick>
 8008d52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	88fa      	ldrh	r2, [r7, #6]
 8008d58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	88fa      	ldrh	r2, [r7, #6]
 8008d60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d6c:	d108      	bne.n	8008d80 <HAL_UART_Transmit+0x84>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d104      	bne.n	8008d80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	61bb      	str	r3, [r7, #24]
 8008d7e:	e003      	b.n	8008d88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d84:	2300      	movs	r3, #0
 8008d86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008d90:	e02c      	b.n	8008dec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	2180      	movs	r1, #128	; 0x80
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f001 fa7a 	bl	800a296 <UART_WaitOnFlagUntilTimeout>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e039      	b.n	8008e20 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10b      	bne.n	8008dca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008dc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	3302      	adds	r3, #2
 8008dc6:	61bb      	str	r3, [r7, #24]
 8008dc8:	e007      	b.n	8008dda <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	781a      	ldrb	r2, [r3, #0]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	3b01      	subs	r3, #1
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1cc      	bne.n	8008d92 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	2140      	movs	r1, #64	; 0x40
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f001 fa47 	bl	800a296 <UART_WaitOnFlagUntilTimeout>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e006      	b.n	8008e20 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e000      	b.n	8008e20 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008e1e:	2302      	movs	r3, #2
  }
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3720      	adds	r7, #32
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08a      	sub	sp, #40	; 0x28
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	4613      	mov	r3, r2
 8008e36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e3e:	2b20      	cmp	r3, #32
 8008e40:	f040 80c0 	bne.w	8008fc4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d002      	beq.n	8008e50 <HAL_UART_Receive+0x28>
 8008e4a:	88fb      	ldrh	r3, [r7, #6]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e0b8      	b.n	8008fc6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d101      	bne.n	8008e62 <HAL_UART_Receive+0x3a>
 8008e5e:	2302      	movs	r3, #2
 8008e60:	e0b1      	b.n	8008fc6 <HAL_UART_Receive+0x19e>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2222      	movs	r2, #34	; 0x22
 8008e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e80:	f7f9 fb50 	bl	8002524 <HAL_GetTick>
 8008e84:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	88fa      	ldrh	r2, [r7, #6]
 8008e8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	88fa      	ldrh	r2, [r7, #6]
 8008e92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e9e:	d10e      	bne.n	8008ebe <HAL_UART_Receive+0x96>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d105      	bne.n	8008eb4 <HAL_UART_Receive+0x8c>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008eae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008eb2:	e02d      	b.n	8008f10 <HAL_UART_Receive+0xe8>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	22ff      	movs	r2, #255	; 0xff
 8008eb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ebc:	e028      	b.n	8008f10 <HAL_UART_Receive+0xe8>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10d      	bne.n	8008ee2 <HAL_UART_Receive+0xba>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d104      	bne.n	8008ed8 <HAL_UART_Receive+0xb0>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	22ff      	movs	r2, #255	; 0xff
 8008ed2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ed6:	e01b      	b.n	8008f10 <HAL_UART_Receive+0xe8>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	227f      	movs	r2, #127	; 0x7f
 8008edc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ee0:	e016      	b.n	8008f10 <HAL_UART_Receive+0xe8>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eea:	d10d      	bne.n	8008f08 <HAL_UART_Receive+0xe0>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d104      	bne.n	8008efe <HAL_UART_Receive+0xd6>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	227f      	movs	r2, #127	; 0x7f
 8008ef8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008efc:	e008      	b.n	8008f10 <HAL_UART_Receive+0xe8>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	223f      	movs	r2, #63	; 0x3f
 8008f02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f06:	e003      	b.n	8008f10 <HAL_UART_Receive+0xe8>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f16:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f20:	d108      	bne.n	8008f34 <HAL_UART_Receive+0x10c>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d104      	bne.n	8008f34 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	61bb      	str	r3, [r7, #24]
 8008f32:	e003      	b.n	8008f3c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008f44:	e032      	b.n	8008fac <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	2120      	movs	r1, #32
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f001 f9a0 	bl	800a296 <UART_WaitOnFlagUntilTimeout>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e032      	b.n	8008fc6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10c      	bne.n	8008f80 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	8a7b      	ldrh	r3, [r7, #18]
 8008f70:	4013      	ands	r3, r2
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	3302      	adds	r3, #2
 8008f7c:	61bb      	str	r3, [r7, #24]
 8008f7e:	e00c      	b.n	8008f9a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	8a7b      	ldrh	r3, [r7, #18]
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	3301      	adds	r3, #1
 8008f98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1c6      	bne.n	8008f46 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	e000      	b.n	8008fc6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8008fc4:	2302      	movs	r3, #2
  }
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3720      	adds	r7, #32
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe4:	2b20      	cmp	r3, #32
 8008fe6:	d131      	bne.n	800904c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <HAL_UART_Receive_IT+0x24>
 8008fee:	88fb      	ldrh	r3, [r7, #6]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e02a      	b.n	800904e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d101      	bne.n	8009006 <HAL_UART_Receive_IT+0x36>
 8009002:	2302      	movs	r3, #2
 8009004:	e023      	b.n	800904e <HAL_UART_Receive_IT+0x7e>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a0f      	ldr	r2, [pc, #60]	; (8009058 <HAL_UART_Receive_IT+0x88>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d00e      	beq.n	800903c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800903a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800903c:	88fb      	ldrh	r3, [r7, #6]
 800903e:	461a      	mov	r2, r3
 8009040:	68b9      	ldr	r1, [r7, #8]
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f001 f9a8 	bl	800a398 <UART_Start_Receive_IT>
 8009048:	4603      	mov	r3, r0
 800904a:	e000      	b.n	800904e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800904c:	2302      	movs	r3, #2
  }
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	58000c00 	.word	0x58000c00

0800905c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b088      	sub	sp, #32
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800907c:	69fa      	ldr	r2, [r7, #28]
 800907e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009082:	4013      	ands	r3, r2
 8009084:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d118      	bne.n	80090be <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b00      	cmp	r3, #0
 8009094:	d013      	beq.n	80090be <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	f003 0320 	and.w	r3, r3, #32
 800909c:	2b00      	cmp	r3, #0
 800909e:	d104      	bne.n	80090aa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d009      	beq.n	80090be <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 8282 	beq.w	80095b8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	4798      	blx	r3
      }
      return;
 80090bc:	e27c      	b.n	80095b8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 80ef 	beq.w	80092a4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	4b73      	ldr	r3, [pc, #460]	; (8009298 <HAL_UART_IRQHandler+0x23c>)
 80090ca:	4013      	ands	r3, r2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d105      	bne.n	80090dc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	4b72      	ldr	r3, [pc, #456]	; (800929c <HAL_UART_IRQHandler+0x240>)
 80090d4:	4013      	ands	r3, r2
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 80e4 	beq.w	80092a4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d010      	beq.n	8009108 <HAL_UART_IRQHandler+0xac>
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00b      	beq.n	8009108 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2201      	movs	r2, #1
 80090f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090fe:	f043 0201 	orr.w	r2, r3, #1
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	f003 0302 	and.w	r3, r3, #2
 800910e:	2b00      	cmp	r3, #0
 8009110:	d010      	beq.n	8009134 <HAL_UART_IRQHandler+0xd8>
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2202      	movs	r2, #2
 8009122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800912a:	f043 0204 	orr.w	r2, r3, #4
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	f003 0304 	and.w	r3, r3, #4
 800913a:	2b00      	cmp	r3, #0
 800913c:	d010      	beq.n	8009160 <HAL_UART_IRQHandler+0x104>
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2204      	movs	r2, #4
 800914e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009156:	f043 0202 	orr.w	r2, r3, #2
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	f003 0308 	and.w	r3, r3, #8
 8009166:	2b00      	cmp	r3, #0
 8009168:	d015      	beq.n	8009196 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	f003 0320 	and.w	r3, r3, #32
 8009170:	2b00      	cmp	r3, #0
 8009172:	d104      	bne.n	800917e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	4b48      	ldr	r3, [pc, #288]	; (8009298 <HAL_UART_IRQHandler+0x23c>)
 8009178:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00b      	beq.n	8009196 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2208      	movs	r2, #8
 8009184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800918c:	f043 0208 	orr.w	r2, r3, #8
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800919c:	2b00      	cmp	r3, #0
 800919e:	d011      	beq.n	80091c4 <HAL_UART_IRQHandler+0x168>
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00c      	beq.n	80091c4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091ba:	f043 0220 	orr.w	r2, r3, #32
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 81f6 	beq.w	80095bc <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	f003 0320 	and.w	r3, r3, #32
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d011      	beq.n	80091fe <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	f003 0320 	and.w	r3, r3, #32
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d104      	bne.n	80091ee <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009204:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009210:	2b40      	cmp	r3, #64	; 0x40
 8009212:	d004      	beq.n	800921e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800921a:	2b00      	cmp	r3, #0
 800921c:	d031      	beq.n	8009282 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 f978 	bl	800a514 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922e:	2b40      	cmp	r3, #64	; 0x40
 8009230:	d123      	bne.n	800927a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	689a      	ldr	r2, [r3, #8]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009240:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d013      	beq.n	8009272 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800924e:	4a14      	ldr	r2, [pc, #80]	; (80092a0 <HAL_UART_IRQHandler+0x244>)
 8009250:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009256:	4618      	mov	r0, r3
 8009258:	f7fa f9f0 	bl	800363c <HAL_DMA_Abort_IT>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d017      	beq.n	8009292 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800926c:	4610      	mov	r0, r2
 800926e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009270:	e00f      	b.n	8009292 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f9ac 	bl	80095d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009278:	e00b      	b.n	8009292 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f9a8 	bl	80095d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009280:	e007      	b.n	8009292 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f9a4 	bl	80095d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009290:	e194      	b.n	80095bc <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009292:	bf00      	nop
    return;
 8009294:	e192      	b.n	80095bc <HAL_UART_IRQHandler+0x560>
 8009296:	bf00      	nop
 8009298:	10000001 	.word	0x10000001
 800929c:	04000120 	.word	0x04000120
 80092a0:	0800a579 	.word	0x0800a579

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	f040 810f 	bne.w	80094cc <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	f003 0310 	and.w	r3, r3, #16
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 8109 	beq.w	80094cc <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	f003 0310 	and.w	r3, r3, #16
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 8103 	beq.w	80094cc <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2210      	movs	r2, #16
 80092cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d8:	2b40      	cmp	r3, #64	; 0x40
 80092da:	f040 80bb 	bne.w	8009454 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a96      	ldr	r2, [pc, #600]	; (8009540 <HAL_UART_IRQHandler+0x4e4>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d059      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a94      	ldr	r2, [pc, #592]	; (8009544 <HAL_UART_IRQHandler+0x4e8>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d053      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a92      	ldr	r2, [pc, #584]	; (8009548 <HAL_UART_IRQHandler+0x4ec>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d04d      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a90      	ldr	r2, [pc, #576]	; (800954c <HAL_UART_IRQHandler+0x4f0>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d047      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a8e      	ldr	r2, [pc, #568]	; (8009550 <HAL_UART_IRQHandler+0x4f4>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d041      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a8c      	ldr	r2, [pc, #560]	; (8009554 <HAL_UART_IRQHandler+0x4f8>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d03b      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a8a      	ldr	r2, [pc, #552]	; (8009558 <HAL_UART_IRQHandler+0x4fc>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d035      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a88      	ldr	r2, [pc, #544]	; (800955c <HAL_UART_IRQHandler+0x500>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d02f      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a86      	ldr	r2, [pc, #536]	; (8009560 <HAL_UART_IRQHandler+0x504>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d029      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a84      	ldr	r2, [pc, #528]	; (8009564 <HAL_UART_IRQHandler+0x508>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d023      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a82      	ldr	r2, [pc, #520]	; (8009568 <HAL_UART_IRQHandler+0x50c>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d01d      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a80      	ldr	r2, [pc, #512]	; (800956c <HAL_UART_IRQHandler+0x510>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d017      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a7e      	ldr	r2, [pc, #504]	; (8009570 <HAL_UART_IRQHandler+0x514>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d011      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a7c      	ldr	r2, [pc, #496]	; (8009574 <HAL_UART_IRQHandler+0x518>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d00b      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a7a      	ldr	r2, [pc, #488]	; (8009578 <HAL_UART_IRQHandler+0x51c>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d005      	beq.n	800939e <HAL_UART_IRQHandler+0x342>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a78      	ldr	r2, [pc, #480]	; (800957c <HAL_UART_IRQHandler+0x520>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d105      	bne.n	80093aa <HAL_UART_IRQHandler+0x34e>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	e004      	b.n	80093b4 <HAL_UART_IRQHandler+0x358>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80093b6:	893b      	ldrh	r3, [r7, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 8101 	beq.w	80095c0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093c4:	893a      	ldrh	r2, [r7, #8]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	f080 80fa 	bcs.w	80095c0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	893a      	ldrh	r2, [r7, #8]
 80093d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093de:	d02b      	beq.n	8009438 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689a      	ldr	r2, [r3, #8]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f022 0201 	bic.w	r2, r2, #1
 80093fe:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	689a      	ldr	r2, [r3, #8]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800940e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2220      	movs	r2, #32
 8009414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0210 	bic.w	r2, r2, #16
 800942c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009432:	4618      	mov	r0, r3
 8009434:	f7f9 fde4 	bl	8003000 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009444:	b29b      	uxth	r3, r3
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	b29b      	uxth	r3, r3
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f8c9 	bl	80095e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009452:	e0b5      	b.n	80095c0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009460:	b29b      	uxth	r3, r3
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800946c:	b29b      	uxth	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	f000 80a8 	beq.w	80095c4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009474:	897b      	ldrh	r3, [r7, #10]
 8009476:	2b00      	cmp	r3, #0
 8009478:	f000 80a4 	beq.w	80095c4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800948a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6899      	ldr	r1, [r3, #8]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	4b3a      	ldr	r3, [pc, #232]	; (8009580 <HAL_UART_IRQHandler+0x524>)
 8009498:	400b      	ands	r3, r1
 800949a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2220      	movs	r2, #32
 80094a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f022 0210 	bic.w	r2, r2, #16
 80094be:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094c0:	897b      	ldrh	r3, [r7, #10]
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f88d 	bl	80095e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094ca:	e07b      	b.n	80095c4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00d      	beq.n	80094f2 <HAL_UART_IRQHandler+0x496>
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d008      	beq.n	80094f2 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80094e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f001 fbba 	bl	800ac64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094f0:	e06b      	b.n	80095ca <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d012      	beq.n	8009522 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009502:	2b00      	cmp	r3, #0
 8009504:	d104      	bne.n	8009510 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d008      	beq.n	8009522 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009514:	2b00      	cmp	r3, #0
 8009516:	d057      	beq.n	80095c8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	4798      	blx	r3
    }
    return;
 8009520:	e052      	b.n	80095c8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d02b      	beq.n	8009584 <HAL_UART_IRQHandler+0x528>
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009532:	2b00      	cmp	r3, #0
 8009534:	d026      	beq.n	8009584 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 f834 	bl	800a5a4 <UART_EndTransmit_IT>
    return;
 800953c:	e045      	b.n	80095ca <HAL_UART_IRQHandler+0x56e>
 800953e:	bf00      	nop
 8009540:	40020010 	.word	0x40020010
 8009544:	40020028 	.word	0x40020028
 8009548:	40020040 	.word	0x40020040
 800954c:	40020058 	.word	0x40020058
 8009550:	40020070 	.word	0x40020070
 8009554:	40020088 	.word	0x40020088
 8009558:	400200a0 	.word	0x400200a0
 800955c:	400200b8 	.word	0x400200b8
 8009560:	40020410 	.word	0x40020410
 8009564:	40020428 	.word	0x40020428
 8009568:	40020440 	.word	0x40020440
 800956c:	40020458 	.word	0x40020458
 8009570:	40020470 	.word	0x40020470
 8009574:	40020488 	.word	0x40020488
 8009578:	400204a0 	.word	0x400204a0
 800957c:	400204b8 	.word	0x400204b8
 8009580:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d008      	beq.n	80095a0 <HAL_UART_IRQHandler+0x544>
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d003      	beq.n	80095a0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f001 fb77 	bl	800ac8c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800959e:	e014      	b.n	80095ca <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00f      	beq.n	80095ca <HAL_UART_IRQHandler+0x56e>
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	da0c      	bge.n	80095ca <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f001 fb61 	bl	800ac78 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095b6:	e008      	b.n	80095ca <HAL_UART_IRQHandler+0x56e>
      return;
 80095b8:	bf00      	nop
 80095ba:	e006      	b.n	80095ca <HAL_UART_IRQHandler+0x56e>
    return;
 80095bc:	bf00      	nop
 80095be:	e004      	b.n	80095ca <HAL_UART_IRQHandler+0x56e>
      return;
 80095c0:	bf00      	nop
 80095c2:	e002      	b.n	80095ca <HAL_UART_IRQHandler+0x56e>
      return;
 80095c4:	bf00      	nop
 80095c6:	e000      	b.n	80095ca <HAL_UART_IRQHandler+0x56e>
    return;
 80095c8:	bf00      	nop
  }
}
 80095ca:	3720      	adds	r7, #32
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095fc:	b5b0      	push	{r4, r5, r7, lr}
 80095fe:	b08e      	sub	sp, #56	; 0x38
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	689a      	ldr	r2, [r3, #8]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	431a      	orrs	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	431a      	orrs	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	4313      	orrs	r3, r2
 8009620:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	4bbf      	ldr	r3, [pc, #764]	; (8009928 <UART_SetConfig+0x32c>)
 800962a:	4013      	ands	r3, r2
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	6812      	ldr	r2, [r2, #0]
 8009630:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009632:	430b      	orrs	r3, r1
 8009634:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68da      	ldr	r2, [r3, #12]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	430a      	orrs	r2, r1
 800964a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4ab5      	ldr	r2, [pc, #724]	; (800992c <UART_SetConfig+0x330>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d004      	beq.n	8009666 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a1b      	ldr	r3, [r3, #32]
 8009660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009662:	4313      	orrs	r3, r2
 8009664:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	689a      	ldr	r2, [r3, #8]
 800966c:	4bb0      	ldr	r3, [pc, #704]	; (8009930 <UART_SetConfig+0x334>)
 800966e:	4013      	ands	r3, r2
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	6812      	ldr	r2, [r2, #0]
 8009674:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009676:	430b      	orrs	r3, r1
 8009678:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009680:	f023 010f 	bic.w	r1, r3, #15
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	430a      	orrs	r2, r1
 800968e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4aa7      	ldr	r2, [pc, #668]	; (8009934 <UART_SetConfig+0x338>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d176      	bne.n	8009788 <UART_SetConfig+0x18c>
 800969a:	4ba7      	ldr	r3, [pc, #668]	; (8009938 <UART_SetConfig+0x33c>)
 800969c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096a2:	2b28      	cmp	r3, #40	; 0x28
 80096a4:	d86c      	bhi.n	8009780 <UART_SetConfig+0x184>
 80096a6:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <UART_SetConfig+0xb0>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	08009751 	.word	0x08009751
 80096b0:	08009781 	.word	0x08009781
 80096b4:	08009781 	.word	0x08009781
 80096b8:	08009781 	.word	0x08009781
 80096bc:	08009781 	.word	0x08009781
 80096c0:	08009781 	.word	0x08009781
 80096c4:	08009781 	.word	0x08009781
 80096c8:	08009781 	.word	0x08009781
 80096cc:	08009759 	.word	0x08009759
 80096d0:	08009781 	.word	0x08009781
 80096d4:	08009781 	.word	0x08009781
 80096d8:	08009781 	.word	0x08009781
 80096dc:	08009781 	.word	0x08009781
 80096e0:	08009781 	.word	0x08009781
 80096e4:	08009781 	.word	0x08009781
 80096e8:	08009781 	.word	0x08009781
 80096ec:	08009761 	.word	0x08009761
 80096f0:	08009781 	.word	0x08009781
 80096f4:	08009781 	.word	0x08009781
 80096f8:	08009781 	.word	0x08009781
 80096fc:	08009781 	.word	0x08009781
 8009700:	08009781 	.word	0x08009781
 8009704:	08009781 	.word	0x08009781
 8009708:	08009781 	.word	0x08009781
 800970c:	08009769 	.word	0x08009769
 8009710:	08009781 	.word	0x08009781
 8009714:	08009781 	.word	0x08009781
 8009718:	08009781 	.word	0x08009781
 800971c:	08009781 	.word	0x08009781
 8009720:	08009781 	.word	0x08009781
 8009724:	08009781 	.word	0x08009781
 8009728:	08009781 	.word	0x08009781
 800972c:	08009771 	.word	0x08009771
 8009730:	08009781 	.word	0x08009781
 8009734:	08009781 	.word	0x08009781
 8009738:	08009781 	.word	0x08009781
 800973c:	08009781 	.word	0x08009781
 8009740:	08009781 	.word	0x08009781
 8009744:	08009781 	.word	0x08009781
 8009748:	08009781 	.word	0x08009781
 800974c:	08009779 	.word	0x08009779
 8009750:	2301      	movs	r3, #1
 8009752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009756:	e222      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009758:	2304      	movs	r3, #4
 800975a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800975e:	e21e      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009760:	2308      	movs	r3, #8
 8009762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009766:	e21a      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009768:	2310      	movs	r3, #16
 800976a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800976e:	e216      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009770:	2320      	movs	r3, #32
 8009772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009776:	e212      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009778:	2340      	movs	r3, #64	; 0x40
 800977a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800977e:	e20e      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009780:	2380      	movs	r3, #128	; 0x80
 8009782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009786:	e20a      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a6b      	ldr	r2, [pc, #428]	; (800993c <UART_SetConfig+0x340>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d130      	bne.n	80097f4 <UART_SetConfig+0x1f8>
 8009792:	4b69      	ldr	r3, [pc, #420]	; (8009938 <UART_SetConfig+0x33c>)
 8009794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009796:	f003 0307 	and.w	r3, r3, #7
 800979a:	2b05      	cmp	r3, #5
 800979c:	d826      	bhi.n	80097ec <UART_SetConfig+0x1f0>
 800979e:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <UART_SetConfig+0x1a8>)
 80097a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a4:	080097bd 	.word	0x080097bd
 80097a8:	080097c5 	.word	0x080097c5
 80097ac:	080097cd 	.word	0x080097cd
 80097b0:	080097d5 	.word	0x080097d5
 80097b4:	080097dd 	.word	0x080097dd
 80097b8:	080097e5 	.word	0x080097e5
 80097bc:	2300      	movs	r3, #0
 80097be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097c2:	e1ec      	b.n	8009b9e <UART_SetConfig+0x5a2>
 80097c4:	2304      	movs	r3, #4
 80097c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ca:	e1e8      	b.n	8009b9e <UART_SetConfig+0x5a2>
 80097cc:	2308      	movs	r3, #8
 80097ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097d2:	e1e4      	b.n	8009b9e <UART_SetConfig+0x5a2>
 80097d4:	2310      	movs	r3, #16
 80097d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097da:	e1e0      	b.n	8009b9e <UART_SetConfig+0x5a2>
 80097dc:	2320      	movs	r3, #32
 80097de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097e2:	e1dc      	b.n	8009b9e <UART_SetConfig+0x5a2>
 80097e4:	2340      	movs	r3, #64	; 0x40
 80097e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ea:	e1d8      	b.n	8009b9e <UART_SetConfig+0x5a2>
 80097ec:	2380      	movs	r3, #128	; 0x80
 80097ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097f2:	e1d4      	b.n	8009b9e <UART_SetConfig+0x5a2>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a51      	ldr	r2, [pc, #324]	; (8009940 <UART_SetConfig+0x344>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d130      	bne.n	8009860 <UART_SetConfig+0x264>
 80097fe:	4b4e      	ldr	r3, [pc, #312]	; (8009938 <UART_SetConfig+0x33c>)
 8009800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009802:	f003 0307 	and.w	r3, r3, #7
 8009806:	2b05      	cmp	r3, #5
 8009808:	d826      	bhi.n	8009858 <UART_SetConfig+0x25c>
 800980a:	a201      	add	r2, pc, #4	; (adr r2, 8009810 <UART_SetConfig+0x214>)
 800980c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009810:	08009829 	.word	0x08009829
 8009814:	08009831 	.word	0x08009831
 8009818:	08009839 	.word	0x08009839
 800981c:	08009841 	.word	0x08009841
 8009820:	08009849 	.word	0x08009849
 8009824:	08009851 	.word	0x08009851
 8009828:	2300      	movs	r3, #0
 800982a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982e:	e1b6      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009830:	2304      	movs	r3, #4
 8009832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009836:	e1b2      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009838:	2308      	movs	r3, #8
 800983a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983e:	e1ae      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009840:	2310      	movs	r3, #16
 8009842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009846:	e1aa      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009848:	2320      	movs	r3, #32
 800984a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800984e:	e1a6      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009850:	2340      	movs	r3, #64	; 0x40
 8009852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009856:	e1a2      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009858:	2380      	movs	r3, #128	; 0x80
 800985a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800985e:	e19e      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a37      	ldr	r2, [pc, #220]	; (8009944 <UART_SetConfig+0x348>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d130      	bne.n	80098cc <UART_SetConfig+0x2d0>
 800986a:	4b33      	ldr	r3, [pc, #204]	; (8009938 <UART_SetConfig+0x33c>)
 800986c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	2b05      	cmp	r3, #5
 8009874:	d826      	bhi.n	80098c4 <UART_SetConfig+0x2c8>
 8009876:	a201      	add	r2, pc, #4	; (adr r2, 800987c <UART_SetConfig+0x280>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	08009895 	.word	0x08009895
 8009880:	0800989d 	.word	0x0800989d
 8009884:	080098a5 	.word	0x080098a5
 8009888:	080098ad 	.word	0x080098ad
 800988c:	080098b5 	.word	0x080098b5
 8009890:	080098bd 	.word	0x080098bd
 8009894:	2300      	movs	r3, #0
 8009896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989a:	e180      	b.n	8009b9e <UART_SetConfig+0x5a2>
 800989c:	2304      	movs	r3, #4
 800989e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a2:	e17c      	b.n	8009b9e <UART_SetConfig+0x5a2>
 80098a4:	2308      	movs	r3, #8
 80098a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098aa:	e178      	b.n	8009b9e <UART_SetConfig+0x5a2>
 80098ac:	2310      	movs	r3, #16
 80098ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b2:	e174      	b.n	8009b9e <UART_SetConfig+0x5a2>
 80098b4:	2320      	movs	r3, #32
 80098b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ba:	e170      	b.n	8009b9e <UART_SetConfig+0x5a2>
 80098bc:	2340      	movs	r3, #64	; 0x40
 80098be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c2:	e16c      	b.n	8009b9e <UART_SetConfig+0x5a2>
 80098c4:	2380      	movs	r3, #128	; 0x80
 80098c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ca:	e168      	b.n	8009b9e <UART_SetConfig+0x5a2>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a1d      	ldr	r2, [pc, #116]	; (8009948 <UART_SetConfig+0x34c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d142      	bne.n	800995c <UART_SetConfig+0x360>
 80098d6:	4b18      	ldr	r3, [pc, #96]	; (8009938 <UART_SetConfig+0x33c>)
 80098d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098da:	f003 0307 	and.w	r3, r3, #7
 80098de:	2b05      	cmp	r3, #5
 80098e0:	d838      	bhi.n	8009954 <UART_SetConfig+0x358>
 80098e2:	a201      	add	r2, pc, #4	; (adr r2, 80098e8 <UART_SetConfig+0x2ec>)
 80098e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e8:	08009901 	.word	0x08009901
 80098ec:	08009909 	.word	0x08009909
 80098f0:	08009911 	.word	0x08009911
 80098f4:	08009919 	.word	0x08009919
 80098f8:	08009921 	.word	0x08009921
 80098fc:	0800994d 	.word	0x0800994d
 8009900:	2300      	movs	r3, #0
 8009902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009906:	e14a      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009908:	2304      	movs	r3, #4
 800990a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800990e:	e146      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009910:	2308      	movs	r3, #8
 8009912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009916:	e142      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009918:	2310      	movs	r3, #16
 800991a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800991e:	e13e      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009920:	2320      	movs	r3, #32
 8009922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009926:	e13a      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009928:	cfff69f3 	.word	0xcfff69f3
 800992c:	58000c00 	.word	0x58000c00
 8009930:	11fff4ff 	.word	0x11fff4ff
 8009934:	40011000 	.word	0x40011000
 8009938:	58024400 	.word	0x58024400
 800993c:	40004400 	.word	0x40004400
 8009940:	40004800 	.word	0x40004800
 8009944:	40004c00 	.word	0x40004c00
 8009948:	40005000 	.word	0x40005000
 800994c:	2340      	movs	r3, #64	; 0x40
 800994e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009952:	e124      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009954:	2380      	movs	r3, #128	; 0x80
 8009956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995a:	e120      	b.n	8009b9e <UART_SetConfig+0x5a2>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4acc      	ldr	r2, [pc, #816]	; (8009c94 <UART_SetConfig+0x698>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d176      	bne.n	8009a54 <UART_SetConfig+0x458>
 8009966:	4bcc      	ldr	r3, [pc, #816]	; (8009c98 <UART_SetConfig+0x69c>)
 8009968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800996a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800996e:	2b28      	cmp	r3, #40	; 0x28
 8009970:	d86c      	bhi.n	8009a4c <UART_SetConfig+0x450>
 8009972:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <UART_SetConfig+0x37c>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	08009a1d 	.word	0x08009a1d
 800997c:	08009a4d 	.word	0x08009a4d
 8009980:	08009a4d 	.word	0x08009a4d
 8009984:	08009a4d 	.word	0x08009a4d
 8009988:	08009a4d 	.word	0x08009a4d
 800998c:	08009a4d 	.word	0x08009a4d
 8009990:	08009a4d 	.word	0x08009a4d
 8009994:	08009a4d 	.word	0x08009a4d
 8009998:	08009a25 	.word	0x08009a25
 800999c:	08009a4d 	.word	0x08009a4d
 80099a0:	08009a4d 	.word	0x08009a4d
 80099a4:	08009a4d 	.word	0x08009a4d
 80099a8:	08009a4d 	.word	0x08009a4d
 80099ac:	08009a4d 	.word	0x08009a4d
 80099b0:	08009a4d 	.word	0x08009a4d
 80099b4:	08009a4d 	.word	0x08009a4d
 80099b8:	08009a2d 	.word	0x08009a2d
 80099bc:	08009a4d 	.word	0x08009a4d
 80099c0:	08009a4d 	.word	0x08009a4d
 80099c4:	08009a4d 	.word	0x08009a4d
 80099c8:	08009a4d 	.word	0x08009a4d
 80099cc:	08009a4d 	.word	0x08009a4d
 80099d0:	08009a4d 	.word	0x08009a4d
 80099d4:	08009a4d 	.word	0x08009a4d
 80099d8:	08009a35 	.word	0x08009a35
 80099dc:	08009a4d 	.word	0x08009a4d
 80099e0:	08009a4d 	.word	0x08009a4d
 80099e4:	08009a4d 	.word	0x08009a4d
 80099e8:	08009a4d 	.word	0x08009a4d
 80099ec:	08009a4d 	.word	0x08009a4d
 80099f0:	08009a4d 	.word	0x08009a4d
 80099f4:	08009a4d 	.word	0x08009a4d
 80099f8:	08009a3d 	.word	0x08009a3d
 80099fc:	08009a4d 	.word	0x08009a4d
 8009a00:	08009a4d 	.word	0x08009a4d
 8009a04:	08009a4d 	.word	0x08009a4d
 8009a08:	08009a4d 	.word	0x08009a4d
 8009a0c:	08009a4d 	.word	0x08009a4d
 8009a10:	08009a4d 	.word	0x08009a4d
 8009a14:	08009a4d 	.word	0x08009a4d
 8009a18:	08009a45 	.word	0x08009a45
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a22:	e0bc      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009a24:	2304      	movs	r3, #4
 8009a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2a:	e0b8      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009a2c:	2308      	movs	r3, #8
 8009a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a32:	e0b4      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009a34:	2310      	movs	r3, #16
 8009a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a3a:	e0b0      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009a3c:	2320      	movs	r3, #32
 8009a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a42:	e0ac      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009a44:	2340      	movs	r3, #64	; 0x40
 8009a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a4a:	e0a8      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009a4c:	2380      	movs	r3, #128	; 0x80
 8009a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a52:	e0a4      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a90      	ldr	r2, [pc, #576]	; (8009c9c <UART_SetConfig+0x6a0>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d130      	bne.n	8009ac0 <UART_SetConfig+0x4c4>
 8009a5e:	4b8e      	ldr	r3, [pc, #568]	; (8009c98 <UART_SetConfig+0x69c>)
 8009a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a62:	f003 0307 	and.w	r3, r3, #7
 8009a66:	2b05      	cmp	r3, #5
 8009a68:	d826      	bhi.n	8009ab8 <UART_SetConfig+0x4bc>
 8009a6a:	a201      	add	r2, pc, #4	; (adr r2, 8009a70 <UART_SetConfig+0x474>)
 8009a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a70:	08009a89 	.word	0x08009a89
 8009a74:	08009a91 	.word	0x08009a91
 8009a78:	08009a99 	.word	0x08009a99
 8009a7c:	08009aa1 	.word	0x08009aa1
 8009a80:	08009aa9 	.word	0x08009aa9
 8009a84:	08009ab1 	.word	0x08009ab1
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a8e:	e086      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009a90:	2304      	movs	r3, #4
 8009a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a96:	e082      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009a98:	2308      	movs	r3, #8
 8009a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9e:	e07e      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009aa0:	2310      	movs	r3, #16
 8009aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa6:	e07a      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009aa8:	2320      	movs	r3, #32
 8009aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aae:	e076      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009ab0:	2340      	movs	r3, #64	; 0x40
 8009ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ab6:	e072      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009ab8:	2380      	movs	r3, #128	; 0x80
 8009aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009abe:	e06e      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a76      	ldr	r2, [pc, #472]	; (8009ca0 <UART_SetConfig+0x6a4>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d130      	bne.n	8009b2c <UART_SetConfig+0x530>
 8009aca:	4b73      	ldr	r3, [pc, #460]	; (8009c98 <UART_SetConfig+0x69c>)
 8009acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ace:	f003 0307 	and.w	r3, r3, #7
 8009ad2:	2b05      	cmp	r3, #5
 8009ad4:	d826      	bhi.n	8009b24 <UART_SetConfig+0x528>
 8009ad6:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <UART_SetConfig+0x4e0>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009af5 	.word	0x08009af5
 8009ae0:	08009afd 	.word	0x08009afd
 8009ae4:	08009b05 	.word	0x08009b05
 8009ae8:	08009b0d 	.word	0x08009b0d
 8009aec:	08009b15 	.word	0x08009b15
 8009af0:	08009b1d 	.word	0x08009b1d
 8009af4:	2300      	movs	r3, #0
 8009af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afa:	e050      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009afc:	2304      	movs	r3, #4
 8009afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b02:	e04c      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009b04:	2308      	movs	r3, #8
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0a:	e048      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009b0c:	2310      	movs	r3, #16
 8009b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b12:	e044      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009b14:	2320      	movs	r3, #32
 8009b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b1a:	e040      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009b1c:	2340      	movs	r3, #64	; 0x40
 8009b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b22:	e03c      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009b24:	2380      	movs	r3, #128	; 0x80
 8009b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b2a:	e038      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a5c      	ldr	r2, [pc, #368]	; (8009ca4 <UART_SetConfig+0x6a8>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d130      	bne.n	8009b98 <UART_SetConfig+0x59c>
 8009b36:	4b58      	ldr	r3, [pc, #352]	; (8009c98 <UART_SetConfig+0x69c>)
 8009b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	2b05      	cmp	r3, #5
 8009b40:	d826      	bhi.n	8009b90 <UART_SetConfig+0x594>
 8009b42:	a201      	add	r2, pc, #4	; (adr r2, 8009b48 <UART_SetConfig+0x54c>)
 8009b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b48:	08009b61 	.word	0x08009b61
 8009b4c:	08009b69 	.word	0x08009b69
 8009b50:	08009b71 	.word	0x08009b71
 8009b54:	08009b79 	.word	0x08009b79
 8009b58:	08009b81 	.word	0x08009b81
 8009b5c:	08009b89 	.word	0x08009b89
 8009b60:	2302      	movs	r3, #2
 8009b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b66:	e01a      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009b68:	2304      	movs	r3, #4
 8009b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6e:	e016      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009b70:	2308      	movs	r3, #8
 8009b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b76:	e012      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009b78:	2310      	movs	r3, #16
 8009b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7e:	e00e      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009b80:	2320      	movs	r3, #32
 8009b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b86:	e00a      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009b88:	2340      	movs	r3, #64	; 0x40
 8009b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8e:	e006      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009b90:	2380      	movs	r3, #128	; 0x80
 8009b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b96:	e002      	b.n	8009b9e <UART_SetConfig+0x5a2>
 8009b98:	2380      	movs	r3, #128	; 0x80
 8009b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a40      	ldr	r2, [pc, #256]	; (8009ca4 <UART_SetConfig+0x6a8>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	f040 80ef 	bne.w	8009d88 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009baa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bae:	2b20      	cmp	r3, #32
 8009bb0:	dc46      	bgt.n	8009c40 <UART_SetConfig+0x644>
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	f2c0 8081 	blt.w	8009cba <UART_SetConfig+0x6be>
 8009bb8:	3b02      	subs	r3, #2
 8009bba:	2b1e      	cmp	r3, #30
 8009bbc:	d87d      	bhi.n	8009cba <UART_SetConfig+0x6be>
 8009bbe:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <UART_SetConfig+0x5c8>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009c47 	.word	0x08009c47
 8009bc8:	08009cbb 	.word	0x08009cbb
 8009bcc:	08009c4f 	.word	0x08009c4f
 8009bd0:	08009cbb 	.word	0x08009cbb
 8009bd4:	08009cbb 	.word	0x08009cbb
 8009bd8:	08009cbb 	.word	0x08009cbb
 8009bdc:	08009c5f 	.word	0x08009c5f
 8009be0:	08009cbb 	.word	0x08009cbb
 8009be4:	08009cbb 	.word	0x08009cbb
 8009be8:	08009cbb 	.word	0x08009cbb
 8009bec:	08009cbb 	.word	0x08009cbb
 8009bf0:	08009cbb 	.word	0x08009cbb
 8009bf4:	08009cbb 	.word	0x08009cbb
 8009bf8:	08009cbb 	.word	0x08009cbb
 8009bfc:	08009c6f 	.word	0x08009c6f
 8009c00:	08009cbb 	.word	0x08009cbb
 8009c04:	08009cbb 	.word	0x08009cbb
 8009c08:	08009cbb 	.word	0x08009cbb
 8009c0c:	08009cbb 	.word	0x08009cbb
 8009c10:	08009cbb 	.word	0x08009cbb
 8009c14:	08009cbb 	.word	0x08009cbb
 8009c18:	08009cbb 	.word	0x08009cbb
 8009c1c:	08009cbb 	.word	0x08009cbb
 8009c20:	08009cbb 	.word	0x08009cbb
 8009c24:	08009cbb 	.word	0x08009cbb
 8009c28:	08009cbb 	.word	0x08009cbb
 8009c2c:	08009cbb 	.word	0x08009cbb
 8009c30:	08009cbb 	.word	0x08009cbb
 8009c34:	08009cbb 	.word	0x08009cbb
 8009c38:	08009cbb 	.word	0x08009cbb
 8009c3c:	08009cad 	.word	0x08009cad
 8009c40:	2b40      	cmp	r3, #64	; 0x40
 8009c42:	d036      	beq.n	8009cb2 <UART_SetConfig+0x6b6>
 8009c44:	e039      	b.n	8009cba <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009c46:	f7fd f99d 	bl	8006f84 <HAL_RCCEx_GetD3PCLK1Freq>
 8009c4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c4c:	e03b      	b.n	8009cc6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c4e:	f107 0314 	add.w	r3, r7, #20
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fd f9ac 	bl	8006fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c5c:	e033      	b.n	8009cc6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c5e:	f107 0308 	add.w	r3, r7, #8
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fd faf8 	bl	8007258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c6c:	e02b      	b.n	8009cc6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c6e:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <UART_SetConfig+0x69c>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0320 	and.w	r3, r3, #32
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c7a:	4b07      	ldr	r3, [pc, #28]	; (8009c98 <UART_SetConfig+0x69c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	08db      	lsrs	r3, r3, #3
 8009c80:	f003 0303 	and.w	r3, r3, #3
 8009c84:	4a08      	ldr	r2, [pc, #32]	; (8009ca8 <UART_SetConfig+0x6ac>)
 8009c86:	fa22 f303 	lsr.w	r3, r2, r3
 8009c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c8c:	e01b      	b.n	8009cc6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009c8e:	4b06      	ldr	r3, [pc, #24]	; (8009ca8 <UART_SetConfig+0x6ac>)
 8009c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c92:	e018      	b.n	8009cc6 <UART_SetConfig+0x6ca>
 8009c94:	40011400 	.word	0x40011400
 8009c98:	58024400 	.word	0x58024400
 8009c9c:	40007800 	.word	0x40007800
 8009ca0:	40007c00 	.word	0x40007c00
 8009ca4:	58000c00 	.word	0x58000c00
 8009ca8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cac:	4bc4      	ldr	r3, [pc, #784]	; (8009fc0 <UART_SetConfig+0x9c4>)
 8009cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cb0:	e009      	b.n	8009cc6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cb8:	e005      	b.n	8009cc6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009cc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 81da 	beq.w	800a082 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	4abc      	ldr	r2, [pc, #752]	; (8009fc4 <UART_SetConfig+0x9c8>)
 8009cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ce0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	4413      	add	r3, r2
 8009cec:	6a3a      	ldr	r2, [r7, #32]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d305      	bcc.n	8009cfe <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cf8:	6a3a      	ldr	r2, [r7, #32]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d903      	bls.n	8009d06 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009d04:	e1bd      	b.n	800a082 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f04f 0100 	mov.w	r1, #0
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d12:	4aac      	ldr	r2, [pc, #688]	; (8009fc4 <UART_SetConfig+0x9c8>)
 8009d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	f04f 0300 	mov.w	r3, #0
 8009d1e:	f7f6 fb2f 	bl	8000380 <__aeabi_uldivmod>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	4610      	mov	r0, r2
 8009d28:	4619      	mov	r1, r3
 8009d2a:	f04f 0200 	mov.w	r2, #0
 8009d2e:	f04f 0300 	mov.w	r3, #0
 8009d32:	020b      	lsls	r3, r1, #8
 8009d34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d38:	0202      	lsls	r2, r0, #8
 8009d3a:	6879      	ldr	r1, [r7, #4]
 8009d3c:	6849      	ldr	r1, [r1, #4]
 8009d3e:	0849      	lsrs	r1, r1, #1
 8009d40:	4608      	mov	r0, r1
 8009d42:	f04f 0100 	mov.w	r1, #0
 8009d46:	1814      	adds	r4, r2, r0
 8009d48:	eb43 0501 	adc.w	r5, r3, r1
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	461a      	mov	r2, r3
 8009d52:	f04f 0300 	mov.w	r3, #0
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fb11 	bl	8000380 <__aeabi_uldivmod>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	4613      	mov	r3, r2
 8009d64:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d6c:	d308      	bcc.n	8009d80 <UART_SetConfig+0x784>
 8009d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d74:	d204      	bcs.n	8009d80 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d7c:	60da      	str	r2, [r3, #12]
 8009d7e:	e180      	b.n	800a082 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009d86:	e17c      	b.n	800a082 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d90:	f040 80bf 	bne.w	8009f12 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009d94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d98:	2b20      	cmp	r3, #32
 8009d9a:	dc49      	bgt.n	8009e30 <UART_SetConfig+0x834>
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	db7c      	blt.n	8009e9a <UART_SetConfig+0x89e>
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	d87a      	bhi.n	8009e9a <UART_SetConfig+0x89e>
 8009da4:	a201      	add	r2, pc, #4	; (adr r2, 8009dac <UART_SetConfig+0x7b0>)
 8009da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009daa:	bf00      	nop
 8009dac:	08009e37 	.word	0x08009e37
 8009db0:	08009e3f 	.word	0x08009e3f
 8009db4:	08009e9b 	.word	0x08009e9b
 8009db8:	08009e9b 	.word	0x08009e9b
 8009dbc:	08009e47 	.word	0x08009e47
 8009dc0:	08009e9b 	.word	0x08009e9b
 8009dc4:	08009e9b 	.word	0x08009e9b
 8009dc8:	08009e9b 	.word	0x08009e9b
 8009dcc:	08009e57 	.word	0x08009e57
 8009dd0:	08009e9b 	.word	0x08009e9b
 8009dd4:	08009e9b 	.word	0x08009e9b
 8009dd8:	08009e9b 	.word	0x08009e9b
 8009ddc:	08009e9b 	.word	0x08009e9b
 8009de0:	08009e9b 	.word	0x08009e9b
 8009de4:	08009e9b 	.word	0x08009e9b
 8009de8:	08009e9b 	.word	0x08009e9b
 8009dec:	08009e67 	.word	0x08009e67
 8009df0:	08009e9b 	.word	0x08009e9b
 8009df4:	08009e9b 	.word	0x08009e9b
 8009df8:	08009e9b 	.word	0x08009e9b
 8009dfc:	08009e9b 	.word	0x08009e9b
 8009e00:	08009e9b 	.word	0x08009e9b
 8009e04:	08009e9b 	.word	0x08009e9b
 8009e08:	08009e9b 	.word	0x08009e9b
 8009e0c:	08009e9b 	.word	0x08009e9b
 8009e10:	08009e9b 	.word	0x08009e9b
 8009e14:	08009e9b 	.word	0x08009e9b
 8009e18:	08009e9b 	.word	0x08009e9b
 8009e1c:	08009e9b 	.word	0x08009e9b
 8009e20:	08009e9b 	.word	0x08009e9b
 8009e24:	08009e9b 	.word	0x08009e9b
 8009e28:	08009e9b 	.word	0x08009e9b
 8009e2c:	08009e8d 	.word	0x08009e8d
 8009e30:	2b40      	cmp	r3, #64	; 0x40
 8009e32:	d02e      	beq.n	8009e92 <UART_SetConfig+0x896>
 8009e34:	e031      	b.n	8009e9a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e36:	f7fc f939 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 8009e3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e3c:	e033      	b.n	8009ea6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e3e:	f7fc f94b 	bl	80060d8 <HAL_RCC_GetPCLK2Freq>
 8009e42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e44:	e02f      	b.n	8009ea6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e46:	f107 0314 	add.w	r3, r7, #20
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fd f8b0 	bl	8006fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e54:	e027      	b.n	8009ea6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e56:	f107 0308 	add.w	r3, r7, #8
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fd f9fc 	bl	8007258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e64:	e01f      	b.n	8009ea6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e66:	4b58      	ldr	r3, [pc, #352]	; (8009fc8 <UART_SetConfig+0x9cc>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0320 	and.w	r3, r3, #32
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d009      	beq.n	8009e86 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e72:	4b55      	ldr	r3, [pc, #340]	; (8009fc8 <UART_SetConfig+0x9cc>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	08db      	lsrs	r3, r3, #3
 8009e78:	f003 0303 	and.w	r3, r3, #3
 8009e7c:	4a53      	ldr	r2, [pc, #332]	; (8009fcc <UART_SetConfig+0x9d0>)
 8009e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e84:	e00f      	b.n	8009ea6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009e86:	4b51      	ldr	r3, [pc, #324]	; (8009fcc <UART_SetConfig+0x9d0>)
 8009e88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e8a:	e00c      	b.n	8009ea6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e8c:	4b4c      	ldr	r3, [pc, #304]	; (8009fc0 <UART_SetConfig+0x9c4>)
 8009e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e90:	e009      	b.n	8009ea6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e98:	e005      	b.n	8009ea6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009ea4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 80ea 	beq.w	800a082 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb2:	4a44      	ldr	r2, [pc, #272]	; (8009fc4 <UART_SetConfig+0x9c8>)
 8009eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ec0:	005a      	lsls	r2, r3, #1
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	085b      	lsrs	r3, r3, #1
 8009ec8:	441a      	add	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed8:	2b0f      	cmp	r3, #15
 8009eda:	d916      	bls.n	8009f0a <UART_SetConfig+0x90e>
 8009edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ee2:	d212      	bcs.n	8009f0a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	f023 030f 	bic.w	r3, r3, #15
 8009eec:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef0:	085b      	lsrs	r3, r3, #1
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	f003 0307 	and.w	r3, r3, #7
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009efc:	4313      	orrs	r3, r2
 8009efe:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009f06:	60da      	str	r2, [r3, #12]
 8009f08:	e0bb      	b.n	800a082 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009f10:	e0b7      	b.n	800a082 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f16:	2b20      	cmp	r3, #32
 8009f18:	dc4a      	bgt.n	8009fb0 <UART_SetConfig+0x9b4>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f2c0 8086 	blt.w	800a02c <UART_SetConfig+0xa30>
 8009f20:	2b20      	cmp	r3, #32
 8009f22:	f200 8083 	bhi.w	800a02c <UART_SetConfig+0xa30>
 8009f26:	a201      	add	r2, pc, #4	; (adr r2, 8009f2c <UART_SetConfig+0x930>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009fb7 	.word	0x08009fb7
 8009f30:	08009fd1 	.word	0x08009fd1
 8009f34:	0800a02d 	.word	0x0800a02d
 8009f38:	0800a02d 	.word	0x0800a02d
 8009f3c:	08009fd9 	.word	0x08009fd9
 8009f40:	0800a02d 	.word	0x0800a02d
 8009f44:	0800a02d 	.word	0x0800a02d
 8009f48:	0800a02d 	.word	0x0800a02d
 8009f4c:	08009fe9 	.word	0x08009fe9
 8009f50:	0800a02d 	.word	0x0800a02d
 8009f54:	0800a02d 	.word	0x0800a02d
 8009f58:	0800a02d 	.word	0x0800a02d
 8009f5c:	0800a02d 	.word	0x0800a02d
 8009f60:	0800a02d 	.word	0x0800a02d
 8009f64:	0800a02d 	.word	0x0800a02d
 8009f68:	0800a02d 	.word	0x0800a02d
 8009f6c:	08009ff9 	.word	0x08009ff9
 8009f70:	0800a02d 	.word	0x0800a02d
 8009f74:	0800a02d 	.word	0x0800a02d
 8009f78:	0800a02d 	.word	0x0800a02d
 8009f7c:	0800a02d 	.word	0x0800a02d
 8009f80:	0800a02d 	.word	0x0800a02d
 8009f84:	0800a02d 	.word	0x0800a02d
 8009f88:	0800a02d 	.word	0x0800a02d
 8009f8c:	0800a02d 	.word	0x0800a02d
 8009f90:	0800a02d 	.word	0x0800a02d
 8009f94:	0800a02d 	.word	0x0800a02d
 8009f98:	0800a02d 	.word	0x0800a02d
 8009f9c:	0800a02d 	.word	0x0800a02d
 8009fa0:	0800a02d 	.word	0x0800a02d
 8009fa4:	0800a02d 	.word	0x0800a02d
 8009fa8:	0800a02d 	.word	0x0800a02d
 8009fac:	0800a01f 	.word	0x0800a01f
 8009fb0:	2b40      	cmp	r3, #64	; 0x40
 8009fb2:	d037      	beq.n	800a024 <UART_SetConfig+0xa28>
 8009fb4:	e03a      	b.n	800a02c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fb6:	f7fc f879 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 8009fba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009fbc:	e03c      	b.n	800a038 <UART_SetConfig+0xa3c>
 8009fbe:	bf00      	nop
 8009fc0:	003d0900 	.word	0x003d0900
 8009fc4:	0800bdec 	.word	0x0800bdec
 8009fc8:	58024400 	.word	0x58024400
 8009fcc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fd0:	f7fc f882 	bl	80060d8 <HAL_RCC_GetPCLK2Freq>
 8009fd4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009fd6:	e02f      	b.n	800a038 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fd8:	f107 0314 	add.w	r3, r7, #20
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7fc ffe7 	bl	8006fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fe6:	e027      	b.n	800a038 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fe8:	f107 0308 	add.w	r3, r7, #8
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7fd f933 	bl	8007258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ff6:	e01f      	b.n	800a038 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ff8:	4b2c      	ldr	r3, [pc, #176]	; (800a0ac <UART_SetConfig+0xab0>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 0320 	and.w	r3, r3, #32
 800a000:	2b00      	cmp	r3, #0
 800a002:	d009      	beq.n	800a018 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a004:	4b29      	ldr	r3, [pc, #164]	; (800a0ac <UART_SetConfig+0xab0>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	08db      	lsrs	r3, r3, #3
 800a00a:	f003 0303 	and.w	r3, r3, #3
 800a00e:	4a28      	ldr	r2, [pc, #160]	; (800a0b0 <UART_SetConfig+0xab4>)
 800a010:	fa22 f303 	lsr.w	r3, r2, r3
 800a014:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a016:	e00f      	b.n	800a038 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a018:	4b25      	ldr	r3, [pc, #148]	; (800a0b0 <UART_SetConfig+0xab4>)
 800a01a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a01c:	e00c      	b.n	800a038 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a01e:	4b25      	ldr	r3, [pc, #148]	; (800a0b4 <UART_SetConfig+0xab8>)
 800a020:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a022:	e009      	b.n	800a038 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a028:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a02a:	e005      	b.n	800a038 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a02c:	2300      	movs	r3, #0
 800a02e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a036:	bf00      	nop
    }

    if (pclk != 0U)
 800a038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d021      	beq.n	800a082 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a042:	4a1d      	ldr	r2, [pc, #116]	; (800a0b8 <UART_SetConfig+0xabc>)
 800a044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a048:	461a      	mov	r2, r3
 800a04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	085b      	lsrs	r3, r3, #1
 800a056:	441a      	add	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a060:	b29b      	uxth	r3, r3
 800a062:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	2b0f      	cmp	r3, #15
 800a068:	d908      	bls.n	800a07c <UART_SetConfig+0xa80>
 800a06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a070:	d204      	bcs.n	800a07c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a078:	60da      	str	r2, [r3, #12]
 800a07a:	e002      	b.n	800a082 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a09e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3738      	adds	r7, #56	; 0x38
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	58024400 	.word	0x58024400
 800a0b0:	03d09000 	.word	0x03d09000
 800a0b4:	003d0900 	.word	0x003d0900
 800a0b8:	0800bdec 	.word	0x0800bdec

0800a0bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c8:	f003 0301 	and.w	r3, r3, #1
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00a      	beq.n	800a0e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	430a      	orrs	r2, r1
 800a0e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00a      	beq.n	800a108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00a      	beq.n	800a12a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	430a      	orrs	r2, r1
 800a128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12e:	f003 0308 	and.w	r3, r3, #8
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00a      	beq.n	800a14c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	430a      	orrs	r2, r1
 800a14a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a150:	f003 0310 	and.w	r3, r3, #16
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00a      	beq.n	800a16e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a172:	f003 0320 	and.w	r3, r3, #32
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00a      	beq.n	800a190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	430a      	orrs	r2, r1
 800a18e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d01a      	beq.n	800a1d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1ba:	d10a      	bne.n	800a1d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00a      	beq.n	800a1f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	605a      	str	r2, [r3, #4]
  }
}
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af02      	add	r7, sp, #8
 800a206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a210:	f7f8 f988 	bl	8002524 <HAL_GetTick>
 800a214:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 0308 	and.w	r3, r3, #8
 800a220:	2b08      	cmp	r3, #8
 800a222:	d10e      	bne.n	800a242 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a228:	9300      	str	r3, [sp, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f82f 	bl	800a296 <UART_WaitOnFlagUntilTimeout>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a23e:	2303      	movs	r3, #3
 800a240:	e025      	b.n	800a28e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 0304 	and.w	r3, r3, #4
 800a24c:	2b04      	cmp	r3, #4
 800a24e:	d10e      	bne.n	800a26e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f819 	bl	800a296 <UART_WaitOnFlagUntilTimeout>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e00f      	b.n	800a28e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2220      	movs	r2, #32
 800a272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2220      	movs	r2, #32
 800a27a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b084      	sub	sp, #16
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	60f8      	str	r0, [r7, #12]
 800a29e:	60b9      	str	r1, [r7, #8]
 800a2a0:	603b      	str	r3, [r7, #0]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2a6:	e062      	b.n	800a36e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ae:	d05e      	beq.n	800a36e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2b0:	f7f8 f938 	bl	8002524 <HAL_GetTick>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	69ba      	ldr	r2, [r7, #24]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d302      	bcc.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d11d      	bne.n	800a302 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a2d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	689a      	ldr	r2, [r3, #8]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f022 0201 	bic.w	r2, r2, #1
 800a2e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2220      	movs	r2, #32
 800a2f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e045      	b.n	800a38e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d02e      	beq.n	800a36e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a31a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a31e:	d126      	bne.n	800a36e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a328:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a338:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	689a      	ldr	r2, [r3, #8]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 0201 	bic.w	r2, r2, #1
 800a348:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2220      	movs	r2, #32
 800a34e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2220      	movs	r2, #32
 800a356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2220      	movs	r2, #32
 800a35e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e00f      	b.n	800a38e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	69da      	ldr	r2, [r3, #28]
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	4013      	ands	r3, r2
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	bf0c      	ite	eq
 800a37e:	2301      	moveq	r3, #1
 800a380:	2300      	movne	r3, #0
 800a382:	b2db      	uxtb	r3, r3
 800a384:	461a      	mov	r2, r3
 800a386:	79fb      	ldrb	r3, [r7, #7]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d08d      	beq.n	800a2a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	88fa      	ldrh	r2, [r7, #6]
 800a3b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	88fa      	ldrh	r2, [r7, #6]
 800a3b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3ca:	d10e      	bne.n	800a3ea <UART_Start_Receive_IT+0x52>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d105      	bne.n	800a3e0 <UART_Start_Receive_IT+0x48>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a3da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3de:	e02d      	b.n	800a43c <UART_Start_Receive_IT+0xa4>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	22ff      	movs	r2, #255	; 0xff
 800a3e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3e8:	e028      	b.n	800a43c <UART_Start_Receive_IT+0xa4>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10d      	bne.n	800a40e <UART_Start_Receive_IT+0x76>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d104      	bne.n	800a404 <UART_Start_Receive_IT+0x6c>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	22ff      	movs	r2, #255	; 0xff
 800a3fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a402:	e01b      	b.n	800a43c <UART_Start_Receive_IT+0xa4>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	227f      	movs	r2, #127	; 0x7f
 800a408:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a40c:	e016      	b.n	800a43c <UART_Start_Receive_IT+0xa4>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a416:	d10d      	bne.n	800a434 <UART_Start_Receive_IT+0x9c>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d104      	bne.n	800a42a <UART_Start_Receive_IT+0x92>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	227f      	movs	r2, #127	; 0x7f
 800a424:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a428:	e008      	b.n	800a43c <UART_Start_Receive_IT+0xa4>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	223f      	movs	r2, #63	; 0x3f
 800a42e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a432:	e003      	b.n	800a43c <UART_Start_Receive_IT+0xa4>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2222      	movs	r2, #34	; 0x22
 800a448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	689a      	ldr	r2, [r3, #8]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f042 0201 	orr.w	r2, r2, #1
 800a45a:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a464:	d12a      	bne.n	800a4bc <UART_Start_Receive_IT+0x124>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a46c:	88fa      	ldrh	r2, [r7, #6]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d324      	bcc.n	800a4bc <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a47a:	d107      	bne.n	800a48c <UART_Start_Receive_IT+0xf4>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d103      	bne.n	800a48c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	4a1f      	ldr	r2, [pc, #124]	; (800a504 <UART_Start_Receive_IT+0x16c>)
 800a488:	671a      	str	r2, [r3, #112]	; 0x70
 800a48a:	e002      	b.n	800a492 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4a1e      	ldr	r2, [pc, #120]	; (800a508 <UART_Start_Receive_IT+0x170>)
 800a490:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4a8:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	689a      	ldr	r2, [r3, #8]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a4b8:	609a      	str	r2, [r3, #8]
 800a4ba:	e01b      	b.n	800a4f4 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c4:	d107      	bne.n	800a4d6 <UART_Start_Receive_IT+0x13e>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d103      	bne.n	800a4d6 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	4a0e      	ldr	r2, [pc, #56]	; (800a50c <UART_Start_Receive_IT+0x174>)
 800a4d2:	671a      	str	r2, [r3, #112]	; 0x70
 800a4d4:	e002      	b.n	800a4dc <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	4a0d      	ldr	r2, [pc, #52]	; (800a510 <UART_Start_Receive_IT+0x178>)
 800a4da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a4f2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	0800a98d 	.word	0x0800a98d
 800a508:	0800a789 	.word	0x0800a789
 800a50c:	0800a6b1 	.word	0x0800a6b1
 800a510:	0800a5d9 	.word	0x0800a5d9

0800a514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a52a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6899      	ldr	r1, [r3, #8]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	4b0f      	ldr	r3, [pc, #60]	; (800a574 <UART_EndRxTransfer+0x60>)
 800a538:	400b      	ands	r3, r1
 800a53a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a540:	2b01      	cmp	r3, #1
 800a542:	d107      	bne.n	800a554 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f022 0210 	bic.w	r2, r2, #16
 800a552:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2220      	movs	r2, #32
 800a558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	effffffe 	.word	0xeffffffe

0800a578 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a584:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f7ff f81a 	bl	80095d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a59c:	bf00      	nop
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5ba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2220      	movs	r2, #32
 800a5c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7f7 f92e 	bl	800182c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a5e6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ee:	2b22      	cmp	r3, #34	; 0x22
 800a5f0:	d152      	bne.n	800a698 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a5fa:	89bb      	ldrh	r3, [r7, #12]
 800a5fc:	b2d9      	uxtb	r1, r3
 800a5fe:	89fb      	ldrh	r3, [r7, #14]
 800a600:	b2da      	uxtb	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a606:	400a      	ands	r2, r1
 800a608:	b2d2      	uxtb	r2, r2
 800a60a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	3b01      	subs	r3, #1
 800a620:	b29a      	uxth	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a62e:	b29b      	uxth	r3, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	d139      	bne.n	800a6a8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a642:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689a      	ldr	r2, [r3, #8]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f022 0201 	bic.w	r2, r2, #1
 800a652:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2220      	movs	r2, #32
 800a658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a666:	2b01      	cmp	r3, #1
 800a668:	d10f      	bne.n	800a68a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f022 0210 	bic.w	r2, r2, #16
 800a678:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7fe ffae 	bl	80095e4 <HAL_UARTEx_RxEventCallback>
 800a688:	e002      	b.n	800a690 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7f7 f8b8 	bl	8001800 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a696:	e007      	b.n	800a6a8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	699a      	ldr	r2, [r3, #24]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f042 0208 	orr.w	r2, r2, #8
 800a6a6:	619a      	str	r2, [r3, #24]
}
 800a6a8:	bf00      	nop
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a6be:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c6:	2b22      	cmp	r3, #34	; 0x22
 800a6c8:	d152      	bne.n	800a770 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a6d8:	89ba      	ldrh	r2, [r7, #12]
 800a6da:	89fb      	ldrh	r3, [r7, #14]
 800a6dc:	4013      	ands	r3, r2
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e8:	1c9a      	adds	r2, r3, #2
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a706:	b29b      	uxth	r3, r3
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d139      	bne.n	800a780 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a71a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689a      	ldr	r2, [r3, #8]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 0201 	bic.w	r2, r2, #1
 800a72a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2220      	movs	r2, #32
 800a730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d10f      	bne.n	800a762 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0210 	bic.w	r2, r2, #16
 800a750:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7fe ff42 	bl	80095e4 <HAL_UARTEx_RxEventCallback>
 800a760:	e002      	b.n	800a768 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7f7 f84c 	bl	8001800 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a76e:	e007      	b.n	800a780 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	699a      	ldr	r2, [r3, #24]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f042 0208 	orr.w	r2, r2, #8
 800a77e:	619a      	str	r2, [r3, #24]
}
 800a780:	bf00      	nop
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a796:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b6:	2b22      	cmp	r3, #34	; 0x22
 800a7b8:	f040 80d8 	bne.w	800a96c <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a7c2:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7c4:	e0a8      	b.n	800a918 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7cc:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a7ce:	89bb      	ldrh	r3, [r7, #12]
 800a7d0:	b2d9      	uxtb	r1, r3
 800a7d2:	8b7b      	ldrh	r3, [r7, #26]
 800a7d4:	b2da      	uxtb	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7da:	400a      	ands	r2, r1
 800a7dc:	b2d2      	uxtb	r2, r2
 800a7de:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	69db      	ldr	r3, [r3, #28]
 800a802:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	f003 0307 	and.w	r3, r3, #7
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d04d      	beq.n	800a8aa <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	2b00      	cmp	r3, #0
 800a816:	d010      	beq.n	800a83a <UART_RxISR_8BIT_FIFOEN+0xb2>
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00b      	beq.n	800a83a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2201      	movs	r2, #1
 800a828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a830:	f043 0201 	orr.w	r2, r3, #1
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	f003 0302 	and.w	r3, r3, #2
 800a840:	2b00      	cmp	r3, #0
 800a842:	d010      	beq.n	800a866 <UART_RxISR_8BIT_FIFOEN+0xde>
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00b      	beq.n	800a866 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2202      	movs	r2, #2
 800a854:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a85c:	f043 0204 	orr.w	r2, r3, #4
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	f003 0304 	and.w	r3, r3, #4
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d010      	beq.n	800a892 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00b      	beq.n	800a892 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2204      	movs	r2, #4
 800a880:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a888:	f043 0202 	orr.w	r2, r3, #2
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d006      	beq.n	800a8aa <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7fe fe97 	bl	80095d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d130      	bne.n	800a918 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8c4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	6899      	ldr	r1, [r3, #8]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	4b2c      	ldr	r3, [pc, #176]	; (800a984 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800a8d2:	400b      	ands	r3, r1
 800a8d4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2220      	movs	r2, #32
 800a8da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d10f      	bne.n	800a90c <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f022 0210 	bic.w	r2, r2, #16
 800a8fa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7fe fe6d 	bl	80095e4 <HAL_UARTEx_RxEventCallback>
 800a90a:	e002      	b.n	800a912 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7f6 ff77 	bl	8001800 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a918:	89fb      	ldrh	r3, [r7, #14]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d005      	beq.n	800a92a <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	f003 0320 	and.w	r3, r3, #32
 800a924:	2b00      	cmp	r3, #0
 800a926:	f47f af4e 	bne.w	800a7c6 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a930:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a932:	897b      	ldrh	r3, [r7, #10]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d021      	beq.n	800a97c <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a93e:	897a      	ldrh	r2, [r7, #10]
 800a940:	429a      	cmp	r2, r3
 800a942:	d21b      	bcs.n	800a97c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	689a      	ldr	r2, [r3, #8]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a952:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a0c      	ldr	r2, [pc, #48]	; (800a988 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800a958:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f042 0220 	orr.w	r2, r2, #32
 800a968:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a96a:	e007      	b.n	800a97c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	699a      	ldr	r2, [r3, #24]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f042 0208 	orr.w	r2, r2, #8
 800a97a:	619a      	str	r2, [r3, #24]
}
 800a97c:	bf00      	nop
 800a97e:	3720      	adds	r7, #32
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	effffffe 	.word	0xeffffffe
 800a988:	0800a5d9 	.word	0x0800a5d9

0800a98c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08a      	sub	sp, #40	; 0x28
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a99a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ba:	2b22      	cmp	r3, #34	; 0x22
 800a9bc:	f040 80d8 	bne.w	800ab70 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a9c6:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a9c8:	e0a8      	b.n	800ab1c <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a9d8:	8aba      	ldrh	r2, [r7, #20]
 800a9da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9dc:	4013      	ands	r3, r2
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9e8:	1c9a      	adds	r2, r3, #2
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0a:	f003 0307 	and.w	r3, r3, #7
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d04d      	beq.n	800aaae <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	f003 0301 	and.w	r3, r3, #1
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d010      	beq.n	800aa3e <UART_RxISR_16BIT_FIFOEN+0xb2>
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00b      	beq.n	800aa3e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa34:	f043 0201 	orr.w	r2, r3, #1
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa40:	f003 0302 	and.w	r3, r3, #2
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d010      	beq.n	800aa6a <UART_RxISR_16BIT_FIFOEN+0xde>
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	f003 0301 	and.w	r3, r3, #1
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00b      	beq.n	800aa6a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2202      	movs	r2, #2
 800aa58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa60:	f043 0204 	orr.w	r2, r3, #4
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	f003 0304 	and.w	r3, r3, #4
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d010      	beq.n	800aa96 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00b      	beq.n	800aa96 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2204      	movs	r2, #4
 800aa84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa8c:	f043 0202 	orr.w	r2, r3, #2
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d006      	beq.n	800aaae <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7fe fd95 	bl	80095d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d130      	bne.n	800ab1c <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aac8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	6899      	ldr	r1, [r3, #8]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	4b2c      	ldr	r3, [pc, #176]	; (800ab88 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800aad6:	400b      	ands	r3, r1
 800aad8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2220      	movs	r2, #32
 800aade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d10f      	bne.n	800ab10 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f022 0210 	bic.w	r2, r2, #16
 800aafe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab06:	4619      	mov	r1, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7fe fd6b 	bl	80095e4 <HAL_UARTEx_RxEventCallback>
 800ab0e:	e002      	b.n	800ab16 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7f6 fe75 	bl	8001800 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab1c:	8afb      	ldrh	r3, [r7, #22]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d005      	beq.n	800ab2e <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab24:	f003 0320 	and.w	r3, r3, #32
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f47f af4e 	bne.w	800a9ca <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab34:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ab36:	89fb      	ldrh	r3, [r7, #14]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d021      	beq.n	800ab80 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ab42:	89fa      	ldrh	r2, [r7, #14]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d21b      	bcs.n	800ab80 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	689a      	ldr	r2, [r3, #8]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ab56:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a0c      	ldr	r2, [pc, #48]	; (800ab8c <UART_RxISR_16BIT_FIFOEN+0x200>)
 800ab5c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f042 0220 	orr.w	r2, r2, #32
 800ab6c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab6e:	e007      	b.n	800ab80 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	699a      	ldr	r2, [r3, #24]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f042 0208 	orr.w	r2, r2, #8
 800ab7e:	619a      	str	r2, [r3, #24]
}
 800ab80:	bf00      	nop
 800ab82:	3728      	adds	r7, #40	; 0x28
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	effffffe 	.word	0xeffffffe
 800ab8c:	0800a6b1 	.word	0x0800a6b1

0800ab90 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e056      	b.n	800ac56 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d106      	bne.n	800abc0 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7f7 f898 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2224      	movs	r2, #36	; 0x24
 800abc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f022 0201 	bic.w	r2, r2, #1
 800abd6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f7fe fd0f 	bl	80095fc <UART_SetConfig>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d101      	bne.n	800abe8 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	e036      	b.n	800ac56 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abec:	2b00      	cmp	r3, #0
 800abee:	d002      	beq.n	800abf6 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f7ff fa63 	bl	800a0bc <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	689a      	ldr	r2, [r3, #8]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac04:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	430a      	orrs	r2, r1
 800ac18:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	055b      	lsls	r3, r3, #21
 800ac1e:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	041b      	lsls	r3, r3, #16
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	4b0b      	ldr	r3, [pc, #44]	; (800ac60 <HAL_RS485Ex_Init+0xd0>)
 800ac32:	4013      	ands	r3, r2
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	6812      	ldr	r2, [r2, #0]
 800ac38:	6979      	ldr	r1, [r7, #20]
 800ac3a:	430b      	orrs	r3, r1
 800ac3c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f042 0201 	orr.w	r2, r2, #1
 800ac4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f7ff fad6 	bl	800a200 <UART_CheckIdleState>
 800ac54:	4603      	mov	r3, r0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3718      	adds	r7, #24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	fc00ffff 	.word	0xfc00ffff

0800ac64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d101      	bne.n	800acb6 <HAL_UARTEx_DisableFifoMode+0x16>
 800acb2:	2302      	movs	r3, #2
 800acb4:	e027      	b.n	800ad06 <HAL_UARTEx_DisableFifoMode+0x66>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2224      	movs	r2, #36	; 0x24
 800acc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f022 0201 	bic.w	r2, r2, #1
 800acdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ace4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2220      	movs	r2, #32
 800acf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d101      	bne.n	800ad2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad26:	2302      	movs	r3, #2
 800ad28:	e02d      	b.n	800ad86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2224      	movs	r2, #36	; 0x24
 800ad36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 0201 	bic.w	r2, r2, #1
 800ad50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	683a      	ldr	r2, [r7, #0]
 800ad62:	430a      	orrs	r2, r1
 800ad64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 f850 	bl	800ae0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2220      	movs	r2, #32
 800ad78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b084      	sub	sp, #16
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d101      	bne.n	800ada6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ada2:	2302      	movs	r3, #2
 800ada4:	e02d      	b.n	800ae02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2224      	movs	r2, #36	; 0x24
 800adb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f022 0201 	bic.w	r2, r2, #1
 800adcc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	683a      	ldr	r2, [r7, #0]
 800adde:	430a      	orrs	r2, r1
 800ade0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f812 	bl	800ae0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2220      	movs	r2, #32
 800adf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
	...

0800ae0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d108      	bne.n	800ae2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae2c:	e031      	b.n	800ae92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae2e:	2310      	movs	r3, #16
 800ae30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae32:	2310      	movs	r3, #16
 800ae34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	0e5b      	lsrs	r3, r3, #25
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	f003 0307 	and.w	r3, r3, #7
 800ae44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	0f5b      	lsrs	r3, r3, #29
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	f003 0307 	and.w	r3, r3, #7
 800ae54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	7b3a      	ldrb	r2, [r7, #12]
 800ae5a:	4911      	ldr	r1, [pc, #68]	; (800aea0 <UARTEx_SetNbDataToProcess+0x94>)
 800ae5c:	5c8a      	ldrb	r2, [r1, r2]
 800ae5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae62:	7b3a      	ldrb	r2, [r7, #12]
 800ae64:	490f      	ldr	r1, [pc, #60]	; (800aea4 <UARTEx_SetNbDataToProcess+0x98>)
 800ae66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae68:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	7b7a      	ldrb	r2, [r7, #13]
 800ae78:	4909      	ldr	r1, [pc, #36]	; (800aea0 <UARTEx_SetNbDataToProcess+0x94>)
 800ae7a:	5c8a      	ldrb	r2, [r1, r2]
 800ae7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae80:	7b7a      	ldrb	r2, [r7, #13]
 800ae82:	4908      	ldr	r1, [pc, #32]	; (800aea4 <UARTEx_SetNbDataToProcess+0x98>)
 800ae84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae86:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ae92:	bf00      	nop
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	0800be04 	.word	0x0800be04
 800aea4:	0800be0c 	.word	0x0800be0c

0800aea8 <__errno>:
 800aea8:	4b01      	ldr	r3, [pc, #4]	; (800aeb0 <__errno+0x8>)
 800aeaa:	6818      	ldr	r0, [r3, #0]
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	20000010 	.word	0x20000010

0800aeb4 <__libc_init_array>:
 800aeb4:	b570      	push	{r4, r5, r6, lr}
 800aeb6:	4d0d      	ldr	r5, [pc, #52]	; (800aeec <__libc_init_array+0x38>)
 800aeb8:	4c0d      	ldr	r4, [pc, #52]	; (800aef0 <__libc_init_array+0x3c>)
 800aeba:	1b64      	subs	r4, r4, r5
 800aebc:	10a4      	asrs	r4, r4, #2
 800aebe:	2600      	movs	r6, #0
 800aec0:	42a6      	cmp	r6, r4
 800aec2:	d109      	bne.n	800aed8 <__libc_init_array+0x24>
 800aec4:	4d0b      	ldr	r5, [pc, #44]	; (800aef4 <__libc_init_array+0x40>)
 800aec6:	4c0c      	ldr	r4, [pc, #48]	; (800aef8 <__libc_init_array+0x44>)
 800aec8:	f000 ff76 	bl	800bdb8 <_init>
 800aecc:	1b64      	subs	r4, r4, r5
 800aece:	10a4      	asrs	r4, r4, #2
 800aed0:	2600      	movs	r6, #0
 800aed2:	42a6      	cmp	r6, r4
 800aed4:	d105      	bne.n	800aee2 <__libc_init_array+0x2e>
 800aed6:	bd70      	pop	{r4, r5, r6, pc}
 800aed8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aedc:	4798      	blx	r3
 800aede:	3601      	adds	r6, #1
 800aee0:	e7ee      	b.n	800aec0 <__libc_init_array+0xc>
 800aee2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aee6:	4798      	blx	r3
 800aee8:	3601      	adds	r6, #1
 800aeea:	e7f2      	b.n	800aed2 <__libc_init_array+0x1e>
 800aeec:	0800beb4 	.word	0x0800beb4
 800aef0:	0800beb4 	.word	0x0800beb4
 800aef4:	0800beb4 	.word	0x0800beb4
 800aef8:	0800beb8 	.word	0x0800beb8

0800aefc <memset>:
 800aefc:	4402      	add	r2, r0
 800aefe:	4603      	mov	r3, r0
 800af00:	4293      	cmp	r3, r2
 800af02:	d100      	bne.n	800af06 <memset+0xa>
 800af04:	4770      	bx	lr
 800af06:	f803 1b01 	strb.w	r1, [r3], #1
 800af0a:	e7f9      	b.n	800af00 <memset+0x4>

0800af0c <iprintf>:
 800af0c:	b40f      	push	{r0, r1, r2, r3}
 800af0e:	4b0a      	ldr	r3, [pc, #40]	; (800af38 <iprintf+0x2c>)
 800af10:	b513      	push	{r0, r1, r4, lr}
 800af12:	681c      	ldr	r4, [r3, #0]
 800af14:	b124      	cbz	r4, 800af20 <iprintf+0x14>
 800af16:	69a3      	ldr	r3, [r4, #24]
 800af18:	b913      	cbnz	r3, 800af20 <iprintf+0x14>
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 f866 	bl	800afec <__sinit>
 800af20:	ab05      	add	r3, sp, #20
 800af22:	9a04      	ldr	r2, [sp, #16]
 800af24:	68a1      	ldr	r1, [r4, #8]
 800af26:	9301      	str	r3, [sp, #4]
 800af28:	4620      	mov	r0, r4
 800af2a:	f000 f983 	bl	800b234 <_vfiprintf_r>
 800af2e:	b002      	add	sp, #8
 800af30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af34:	b004      	add	sp, #16
 800af36:	4770      	bx	lr
 800af38:	20000010 	.word	0x20000010

0800af3c <std>:
 800af3c:	2300      	movs	r3, #0
 800af3e:	b510      	push	{r4, lr}
 800af40:	4604      	mov	r4, r0
 800af42:	e9c0 3300 	strd	r3, r3, [r0]
 800af46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af4a:	6083      	str	r3, [r0, #8]
 800af4c:	8181      	strh	r1, [r0, #12]
 800af4e:	6643      	str	r3, [r0, #100]	; 0x64
 800af50:	81c2      	strh	r2, [r0, #14]
 800af52:	6183      	str	r3, [r0, #24]
 800af54:	4619      	mov	r1, r3
 800af56:	2208      	movs	r2, #8
 800af58:	305c      	adds	r0, #92	; 0x5c
 800af5a:	f7ff ffcf 	bl	800aefc <memset>
 800af5e:	4b05      	ldr	r3, [pc, #20]	; (800af74 <std+0x38>)
 800af60:	6263      	str	r3, [r4, #36]	; 0x24
 800af62:	4b05      	ldr	r3, [pc, #20]	; (800af78 <std+0x3c>)
 800af64:	62a3      	str	r3, [r4, #40]	; 0x28
 800af66:	4b05      	ldr	r3, [pc, #20]	; (800af7c <std+0x40>)
 800af68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af6a:	4b05      	ldr	r3, [pc, #20]	; (800af80 <std+0x44>)
 800af6c:	6224      	str	r4, [r4, #32]
 800af6e:	6323      	str	r3, [r4, #48]	; 0x30
 800af70:	bd10      	pop	{r4, pc}
 800af72:	bf00      	nop
 800af74:	0800b7dd 	.word	0x0800b7dd
 800af78:	0800b7ff 	.word	0x0800b7ff
 800af7c:	0800b837 	.word	0x0800b837
 800af80:	0800b85b 	.word	0x0800b85b

0800af84 <_cleanup_r>:
 800af84:	4901      	ldr	r1, [pc, #4]	; (800af8c <_cleanup_r+0x8>)
 800af86:	f000 b8af 	b.w	800b0e8 <_fwalk_reent>
 800af8a:	bf00      	nop
 800af8c:	0800bb35 	.word	0x0800bb35

0800af90 <__sfmoreglue>:
 800af90:	b570      	push	{r4, r5, r6, lr}
 800af92:	1e4a      	subs	r2, r1, #1
 800af94:	2568      	movs	r5, #104	; 0x68
 800af96:	4355      	muls	r5, r2
 800af98:	460e      	mov	r6, r1
 800af9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af9e:	f000 f8c5 	bl	800b12c <_malloc_r>
 800afa2:	4604      	mov	r4, r0
 800afa4:	b140      	cbz	r0, 800afb8 <__sfmoreglue+0x28>
 800afa6:	2100      	movs	r1, #0
 800afa8:	e9c0 1600 	strd	r1, r6, [r0]
 800afac:	300c      	adds	r0, #12
 800afae:	60a0      	str	r0, [r4, #8]
 800afb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800afb4:	f7ff ffa2 	bl	800aefc <memset>
 800afb8:	4620      	mov	r0, r4
 800afba:	bd70      	pop	{r4, r5, r6, pc}

0800afbc <__sfp_lock_acquire>:
 800afbc:	4801      	ldr	r0, [pc, #4]	; (800afc4 <__sfp_lock_acquire+0x8>)
 800afbe:	f000 b8b3 	b.w	800b128 <__retarget_lock_acquire_recursive>
 800afc2:	bf00      	nop
 800afc4:	200008d0 	.word	0x200008d0

0800afc8 <__sfp_lock_release>:
 800afc8:	4801      	ldr	r0, [pc, #4]	; (800afd0 <__sfp_lock_release+0x8>)
 800afca:	f000 b8ae 	b.w	800b12a <__retarget_lock_release_recursive>
 800afce:	bf00      	nop
 800afd0:	200008d0 	.word	0x200008d0

0800afd4 <__sinit_lock_acquire>:
 800afd4:	4801      	ldr	r0, [pc, #4]	; (800afdc <__sinit_lock_acquire+0x8>)
 800afd6:	f000 b8a7 	b.w	800b128 <__retarget_lock_acquire_recursive>
 800afda:	bf00      	nop
 800afdc:	200008cb 	.word	0x200008cb

0800afe0 <__sinit_lock_release>:
 800afe0:	4801      	ldr	r0, [pc, #4]	; (800afe8 <__sinit_lock_release+0x8>)
 800afe2:	f000 b8a2 	b.w	800b12a <__retarget_lock_release_recursive>
 800afe6:	bf00      	nop
 800afe8:	200008cb 	.word	0x200008cb

0800afec <__sinit>:
 800afec:	b510      	push	{r4, lr}
 800afee:	4604      	mov	r4, r0
 800aff0:	f7ff fff0 	bl	800afd4 <__sinit_lock_acquire>
 800aff4:	69a3      	ldr	r3, [r4, #24]
 800aff6:	b11b      	cbz	r3, 800b000 <__sinit+0x14>
 800aff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800affc:	f7ff bff0 	b.w	800afe0 <__sinit_lock_release>
 800b000:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b004:	6523      	str	r3, [r4, #80]	; 0x50
 800b006:	4b13      	ldr	r3, [pc, #76]	; (800b054 <__sinit+0x68>)
 800b008:	4a13      	ldr	r2, [pc, #76]	; (800b058 <__sinit+0x6c>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b00e:	42a3      	cmp	r3, r4
 800b010:	bf04      	itt	eq
 800b012:	2301      	moveq	r3, #1
 800b014:	61a3      	streq	r3, [r4, #24]
 800b016:	4620      	mov	r0, r4
 800b018:	f000 f820 	bl	800b05c <__sfp>
 800b01c:	6060      	str	r0, [r4, #4]
 800b01e:	4620      	mov	r0, r4
 800b020:	f000 f81c 	bl	800b05c <__sfp>
 800b024:	60a0      	str	r0, [r4, #8]
 800b026:	4620      	mov	r0, r4
 800b028:	f000 f818 	bl	800b05c <__sfp>
 800b02c:	2200      	movs	r2, #0
 800b02e:	60e0      	str	r0, [r4, #12]
 800b030:	2104      	movs	r1, #4
 800b032:	6860      	ldr	r0, [r4, #4]
 800b034:	f7ff ff82 	bl	800af3c <std>
 800b038:	68a0      	ldr	r0, [r4, #8]
 800b03a:	2201      	movs	r2, #1
 800b03c:	2109      	movs	r1, #9
 800b03e:	f7ff ff7d 	bl	800af3c <std>
 800b042:	68e0      	ldr	r0, [r4, #12]
 800b044:	2202      	movs	r2, #2
 800b046:	2112      	movs	r1, #18
 800b048:	f7ff ff78 	bl	800af3c <std>
 800b04c:	2301      	movs	r3, #1
 800b04e:	61a3      	str	r3, [r4, #24]
 800b050:	e7d2      	b.n	800aff8 <__sinit+0xc>
 800b052:	bf00      	nop
 800b054:	0800be14 	.word	0x0800be14
 800b058:	0800af85 	.word	0x0800af85

0800b05c <__sfp>:
 800b05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05e:	4607      	mov	r7, r0
 800b060:	f7ff ffac 	bl	800afbc <__sfp_lock_acquire>
 800b064:	4b1e      	ldr	r3, [pc, #120]	; (800b0e0 <__sfp+0x84>)
 800b066:	681e      	ldr	r6, [r3, #0]
 800b068:	69b3      	ldr	r3, [r6, #24]
 800b06a:	b913      	cbnz	r3, 800b072 <__sfp+0x16>
 800b06c:	4630      	mov	r0, r6
 800b06e:	f7ff ffbd 	bl	800afec <__sinit>
 800b072:	3648      	adds	r6, #72	; 0x48
 800b074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b078:	3b01      	subs	r3, #1
 800b07a:	d503      	bpl.n	800b084 <__sfp+0x28>
 800b07c:	6833      	ldr	r3, [r6, #0]
 800b07e:	b30b      	cbz	r3, 800b0c4 <__sfp+0x68>
 800b080:	6836      	ldr	r6, [r6, #0]
 800b082:	e7f7      	b.n	800b074 <__sfp+0x18>
 800b084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b088:	b9d5      	cbnz	r5, 800b0c0 <__sfp+0x64>
 800b08a:	4b16      	ldr	r3, [pc, #88]	; (800b0e4 <__sfp+0x88>)
 800b08c:	60e3      	str	r3, [r4, #12]
 800b08e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b092:	6665      	str	r5, [r4, #100]	; 0x64
 800b094:	f000 f847 	bl	800b126 <__retarget_lock_init_recursive>
 800b098:	f7ff ff96 	bl	800afc8 <__sfp_lock_release>
 800b09c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0a4:	6025      	str	r5, [r4, #0]
 800b0a6:	61a5      	str	r5, [r4, #24]
 800b0a8:	2208      	movs	r2, #8
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0b0:	f7ff ff24 	bl	800aefc <memset>
 800b0b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0bc:	4620      	mov	r0, r4
 800b0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0c0:	3468      	adds	r4, #104	; 0x68
 800b0c2:	e7d9      	b.n	800b078 <__sfp+0x1c>
 800b0c4:	2104      	movs	r1, #4
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	f7ff ff62 	bl	800af90 <__sfmoreglue>
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	6030      	str	r0, [r6, #0]
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d1d5      	bne.n	800b080 <__sfp+0x24>
 800b0d4:	f7ff ff78 	bl	800afc8 <__sfp_lock_release>
 800b0d8:	230c      	movs	r3, #12
 800b0da:	603b      	str	r3, [r7, #0]
 800b0dc:	e7ee      	b.n	800b0bc <__sfp+0x60>
 800b0de:	bf00      	nop
 800b0e0:	0800be14 	.word	0x0800be14
 800b0e4:	ffff0001 	.word	0xffff0001

0800b0e8 <_fwalk_reent>:
 800b0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0ec:	4606      	mov	r6, r0
 800b0ee:	4688      	mov	r8, r1
 800b0f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0f4:	2700      	movs	r7, #0
 800b0f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0fa:	f1b9 0901 	subs.w	r9, r9, #1
 800b0fe:	d505      	bpl.n	800b10c <_fwalk_reent+0x24>
 800b100:	6824      	ldr	r4, [r4, #0]
 800b102:	2c00      	cmp	r4, #0
 800b104:	d1f7      	bne.n	800b0f6 <_fwalk_reent+0xe>
 800b106:	4638      	mov	r0, r7
 800b108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b10c:	89ab      	ldrh	r3, [r5, #12]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d907      	bls.n	800b122 <_fwalk_reent+0x3a>
 800b112:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b116:	3301      	adds	r3, #1
 800b118:	d003      	beq.n	800b122 <_fwalk_reent+0x3a>
 800b11a:	4629      	mov	r1, r5
 800b11c:	4630      	mov	r0, r6
 800b11e:	47c0      	blx	r8
 800b120:	4307      	orrs	r7, r0
 800b122:	3568      	adds	r5, #104	; 0x68
 800b124:	e7e9      	b.n	800b0fa <_fwalk_reent+0x12>

0800b126 <__retarget_lock_init_recursive>:
 800b126:	4770      	bx	lr

0800b128 <__retarget_lock_acquire_recursive>:
 800b128:	4770      	bx	lr

0800b12a <__retarget_lock_release_recursive>:
 800b12a:	4770      	bx	lr

0800b12c <_malloc_r>:
 800b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12e:	1ccd      	adds	r5, r1, #3
 800b130:	f025 0503 	bic.w	r5, r5, #3
 800b134:	3508      	adds	r5, #8
 800b136:	2d0c      	cmp	r5, #12
 800b138:	bf38      	it	cc
 800b13a:	250c      	movcc	r5, #12
 800b13c:	2d00      	cmp	r5, #0
 800b13e:	4606      	mov	r6, r0
 800b140:	db01      	blt.n	800b146 <_malloc_r+0x1a>
 800b142:	42a9      	cmp	r1, r5
 800b144:	d903      	bls.n	800b14e <_malloc_r+0x22>
 800b146:	230c      	movs	r3, #12
 800b148:	6033      	str	r3, [r6, #0]
 800b14a:	2000      	movs	r0, #0
 800b14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b14e:	f000 fda3 	bl	800bc98 <__malloc_lock>
 800b152:	4921      	ldr	r1, [pc, #132]	; (800b1d8 <_malloc_r+0xac>)
 800b154:	680a      	ldr	r2, [r1, #0]
 800b156:	4614      	mov	r4, r2
 800b158:	b99c      	cbnz	r4, 800b182 <_malloc_r+0x56>
 800b15a:	4f20      	ldr	r7, [pc, #128]	; (800b1dc <_malloc_r+0xb0>)
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	b923      	cbnz	r3, 800b16a <_malloc_r+0x3e>
 800b160:	4621      	mov	r1, r4
 800b162:	4630      	mov	r0, r6
 800b164:	f000 fb2a 	bl	800b7bc <_sbrk_r>
 800b168:	6038      	str	r0, [r7, #0]
 800b16a:	4629      	mov	r1, r5
 800b16c:	4630      	mov	r0, r6
 800b16e:	f000 fb25 	bl	800b7bc <_sbrk_r>
 800b172:	1c43      	adds	r3, r0, #1
 800b174:	d123      	bne.n	800b1be <_malloc_r+0x92>
 800b176:	230c      	movs	r3, #12
 800b178:	6033      	str	r3, [r6, #0]
 800b17a:	4630      	mov	r0, r6
 800b17c:	f000 fd92 	bl	800bca4 <__malloc_unlock>
 800b180:	e7e3      	b.n	800b14a <_malloc_r+0x1e>
 800b182:	6823      	ldr	r3, [r4, #0]
 800b184:	1b5b      	subs	r3, r3, r5
 800b186:	d417      	bmi.n	800b1b8 <_malloc_r+0x8c>
 800b188:	2b0b      	cmp	r3, #11
 800b18a:	d903      	bls.n	800b194 <_malloc_r+0x68>
 800b18c:	6023      	str	r3, [r4, #0]
 800b18e:	441c      	add	r4, r3
 800b190:	6025      	str	r5, [r4, #0]
 800b192:	e004      	b.n	800b19e <_malloc_r+0x72>
 800b194:	6863      	ldr	r3, [r4, #4]
 800b196:	42a2      	cmp	r2, r4
 800b198:	bf0c      	ite	eq
 800b19a:	600b      	streq	r3, [r1, #0]
 800b19c:	6053      	strne	r3, [r2, #4]
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f000 fd80 	bl	800bca4 <__malloc_unlock>
 800b1a4:	f104 000b 	add.w	r0, r4, #11
 800b1a8:	1d23      	adds	r3, r4, #4
 800b1aa:	f020 0007 	bic.w	r0, r0, #7
 800b1ae:	1ac2      	subs	r2, r0, r3
 800b1b0:	d0cc      	beq.n	800b14c <_malloc_r+0x20>
 800b1b2:	1a1b      	subs	r3, r3, r0
 800b1b4:	50a3      	str	r3, [r4, r2]
 800b1b6:	e7c9      	b.n	800b14c <_malloc_r+0x20>
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	6864      	ldr	r4, [r4, #4]
 800b1bc:	e7cc      	b.n	800b158 <_malloc_r+0x2c>
 800b1be:	1cc4      	adds	r4, r0, #3
 800b1c0:	f024 0403 	bic.w	r4, r4, #3
 800b1c4:	42a0      	cmp	r0, r4
 800b1c6:	d0e3      	beq.n	800b190 <_malloc_r+0x64>
 800b1c8:	1a21      	subs	r1, r4, r0
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	f000 faf6 	bl	800b7bc <_sbrk_r>
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d1dd      	bne.n	800b190 <_malloc_r+0x64>
 800b1d4:	e7cf      	b.n	800b176 <_malloc_r+0x4a>
 800b1d6:	bf00      	nop
 800b1d8:	2000009c 	.word	0x2000009c
 800b1dc:	200000a0 	.word	0x200000a0

0800b1e0 <__sfputc_r>:
 800b1e0:	6893      	ldr	r3, [r2, #8]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	b410      	push	{r4}
 800b1e8:	6093      	str	r3, [r2, #8]
 800b1ea:	da08      	bge.n	800b1fe <__sfputc_r+0x1e>
 800b1ec:	6994      	ldr	r4, [r2, #24]
 800b1ee:	42a3      	cmp	r3, r4
 800b1f0:	db01      	blt.n	800b1f6 <__sfputc_r+0x16>
 800b1f2:	290a      	cmp	r1, #10
 800b1f4:	d103      	bne.n	800b1fe <__sfputc_r+0x1e>
 800b1f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1fa:	f000 bb33 	b.w	800b864 <__swbuf_r>
 800b1fe:	6813      	ldr	r3, [r2, #0]
 800b200:	1c58      	adds	r0, r3, #1
 800b202:	6010      	str	r0, [r2, #0]
 800b204:	7019      	strb	r1, [r3, #0]
 800b206:	4608      	mov	r0, r1
 800b208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <__sfputs_r>:
 800b20e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b210:	4606      	mov	r6, r0
 800b212:	460f      	mov	r7, r1
 800b214:	4614      	mov	r4, r2
 800b216:	18d5      	adds	r5, r2, r3
 800b218:	42ac      	cmp	r4, r5
 800b21a:	d101      	bne.n	800b220 <__sfputs_r+0x12>
 800b21c:	2000      	movs	r0, #0
 800b21e:	e007      	b.n	800b230 <__sfputs_r+0x22>
 800b220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b224:	463a      	mov	r2, r7
 800b226:	4630      	mov	r0, r6
 800b228:	f7ff ffda 	bl	800b1e0 <__sfputc_r>
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	d1f3      	bne.n	800b218 <__sfputs_r+0xa>
 800b230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b234 <_vfiprintf_r>:
 800b234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b238:	460d      	mov	r5, r1
 800b23a:	b09d      	sub	sp, #116	; 0x74
 800b23c:	4614      	mov	r4, r2
 800b23e:	4698      	mov	r8, r3
 800b240:	4606      	mov	r6, r0
 800b242:	b118      	cbz	r0, 800b24c <_vfiprintf_r+0x18>
 800b244:	6983      	ldr	r3, [r0, #24]
 800b246:	b90b      	cbnz	r3, 800b24c <_vfiprintf_r+0x18>
 800b248:	f7ff fed0 	bl	800afec <__sinit>
 800b24c:	4b89      	ldr	r3, [pc, #548]	; (800b474 <_vfiprintf_r+0x240>)
 800b24e:	429d      	cmp	r5, r3
 800b250:	d11b      	bne.n	800b28a <_vfiprintf_r+0x56>
 800b252:	6875      	ldr	r5, [r6, #4]
 800b254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b256:	07d9      	lsls	r1, r3, #31
 800b258:	d405      	bmi.n	800b266 <_vfiprintf_r+0x32>
 800b25a:	89ab      	ldrh	r3, [r5, #12]
 800b25c:	059a      	lsls	r2, r3, #22
 800b25e:	d402      	bmi.n	800b266 <_vfiprintf_r+0x32>
 800b260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b262:	f7ff ff61 	bl	800b128 <__retarget_lock_acquire_recursive>
 800b266:	89ab      	ldrh	r3, [r5, #12]
 800b268:	071b      	lsls	r3, r3, #28
 800b26a:	d501      	bpl.n	800b270 <_vfiprintf_r+0x3c>
 800b26c:	692b      	ldr	r3, [r5, #16]
 800b26e:	b9eb      	cbnz	r3, 800b2ac <_vfiprintf_r+0x78>
 800b270:	4629      	mov	r1, r5
 800b272:	4630      	mov	r0, r6
 800b274:	f000 fb5a 	bl	800b92c <__swsetup_r>
 800b278:	b1c0      	cbz	r0, 800b2ac <_vfiprintf_r+0x78>
 800b27a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b27c:	07dc      	lsls	r4, r3, #31
 800b27e:	d50e      	bpl.n	800b29e <_vfiprintf_r+0x6a>
 800b280:	f04f 30ff 	mov.w	r0, #4294967295
 800b284:	b01d      	add	sp, #116	; 0x74
 800b286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28a:	4b7b      	ldr	r3, [pc, #492]	; (800b478 <_vfiprintf_r+0x244>)
 800b28c:	429d      	cmp	r5, r3
 800b28e:	d101      	bne.n	800b294 <_vfiprintf_r+0x60>
 800b290:	68b5      	ldr	r5, [r6, #8]
 800b292:	e7df      	b.n	800b254 <_vfiprintf_r+0x20>
 800b294:	4b79      	ldr	r3, [pc, #484]	; (800b47c <_vfiprintf_r+0x248>)
 800b296:	429d      	cmp	r5, r3
 800b298:	bf08      	it	eq
 800b29a:	68f5      	ldreq	r5, [r6, #12]
 800b29c:	e7da      	b.n	800b254 <_vfiprintf_r+0x20>
 800b29e:	89ab      	ldrh	r3, [r5, #12]
 800b2a0:	0598      	lsls	r0, r3, #22
 800b2a2:	d4ed      	bmi.n	800b280 <_vfiprintf_r+0x4c>
 800b2a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2a6:	f7ff ff40 	bl	800b12a <__retarget_lock_release_recursive>
 800b2aa:	e7e9      	b.n	800b280 <_vfiprintf_r+0x4c>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b0:	2320      	movs	r3, #32
 800b2b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2ba:	2330      	movs	r3, #48	; 0x30
 800b2bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b480 <_vfiprintf_r+0x24c>
 800b2c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2c4:	f04f 0901 	mov.w	r9, #1
 800b2c8:	4623      	mov	r3, r4
 800b2ca:	469a      	mov	sl, r3
 800b2cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2d0:	b10a      	cbz	r2, 800b2d6 <_vfiprintf_r+0xa2>
 800b2d2:	2a25      	cmp	r2, #37	; 0x25
 800b2d4:	d1f9      	bne.n	800b2ca <_vfiprintf_r+0x96>
 800b2d6:	ebba 0b04 	subs.w	fp, sl, r4
 800b2da:	d00b      	beq.n	800b2f4 <_vfiprintf_r+0xc0>
 800b2dc:	465b      	mov	r3, fp
 800b2de:	4622      	mov	r2, r4
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f7ff ff93 	bl	800b20e <__sfputs_r>
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	f000 80aa 	beq.w	800b442 <_vfiprintf_r+0x20e>
 800b2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f0:	445a      	add	r2, fp
 800b2f2:	9209      	str	r2, [sp, #36]	; 0x24
 800b2f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 80a2 	beq.w	800b442 <_vfiprintf_r+0x20e>
 800b2fe:	2300      	movs	r3, #0
 800b300:	f04f 32ff 	mov.w	r2, #4294967295
 800b304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b308:	f10a 0a01 	add.w	sl, sl, #1
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	9307      	str	r3, [sp, #28]
 800b310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b314:	931a      	str	r3, [sp, #104]	; 0x68
 800b316:	4654      	mov	r4, sl
 800b318:	2205      	movs	r2, #5
 800b31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b31e:	4858      	ldr	r0, [pc, #352]	; (800b480 <_vfiprintf_r+0x24c>)
 800b320:	f7f4 ffde 	bl	80002e0 <memchr>
 800b324:	9a04      	ldr	r2, [sp, #16]
 800b326:	b9d8      	cbnz	r0, 800b360 <_vfiprintf_r+0x12c>
 800b328:	06d1      	lsls	r1, r2, #27
 800b32a:	bf44      	itt	mi
 800b32c:	2320      	movmi	r3, #32
 800b32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b332:	0713      	lsls	r3, r2, #28
 800b334:	bf44      	itt	mi
 800b336:	232b      	movmi	r3, #43	; 0x2b
 800b338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b33c:	f89a 3000 	ldrb.w	r3, [sl]
 800b340:	2b2a      	cmp	r3, #42	; 0x2a
 800b342:	d015      	beq.n	800b370 <_vfiprintf_r+0x13c>
 800b344:	9a07      	ldr	r2, [sp, #28]
 800b346:	4654      	mov	r4, sl
 800b348:	2000      	movs	r0, #0
 800b34a:	f04f 0c0a 	mov.w	ip, #10
 800b34e:	4621      	mov	r1, r4
 800b350:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b354:	3b30      	subs	r3, #48	; 0x30
 800b356:	2b09      	cmp	r3, #9
 800b358:	d94e      	bls.n	800b3f8 <_vfiprintf_r+0x1c4>
 800b35a:	b1b0      	cbz	r0, 800b38a <_vfiprintf_r+0x156>
 800b35c:	9207      	str	r2, [sp, #28]
 800b35e:	e014      	b.n	800b38a <_vfiprintf_r+0x156>
 800b360:	eba0 0308 	sub.w	r3, r0, r8
 800b364:	fa09 f303 	lsl.w	r3, r9, r3
 800b368:	4313      	orrs	r3, r2
 800b36a:	9304      	str	r3, [sp, #16]
 800b36c:	46a2      	mov	sl, r4
 800b36e:	e7d2      	b.n	800b316 <_vfiprintf_r+0xe2>
 800b370:	9b03      	ldr	r3, [sp, #12]
 800b372:	1d19      	adds	r1, r3, #4
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	9103      	str	r1, [sp, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	bfbb      	ittet	lt
 800b37c:	425b      	neglt	r3, r3
 800b37e:	f042 0202 	orrlt.w	r2, r2, #2
 800b382:	9307      	strge	r3, [sp, #28]
 800b384:	9307      	strlt	r3, [sp, #28]
 800b386:	bfb8      	it	lt
 800b388:	9204      	strlt	r2, [sp, #16]
 800b38a:	7823      	ldrb	r3, [r4, #0]
 800b38c:	2b2e      	cmp	r3, #46	; 0x2e
 800b38e:	d10c      	bne.n	800b3aa <_vfiprintf_r+0x176>
 800b390:	7863      	ldrb	r3, [r4, #1]
 800b392:	2b2a      	cmp	r3, #42	; 0x2a
 800b394:	d135      	bne.n	800b402 <_vfiprintf_r+0x1ce>
 800b396:	9b03      	ldr	r3, [sp, #12]
 800b398:	1d1a      	adds	r2, r3, #4
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	9203      	str	r2, [sp, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	bfb8      	it	lt
 800b3a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3a6:	3402      	adds	r4, #2
 800b3a8:	9305      	str	r3, [sp, #20]
 800b3aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b490 <_vfiprintf_r+0x25c>
 800b3ae:	7821      	ldrb	r1, [r4, #0]
 800b3b0:	2203      	movs	r2, #3
 800b3b2:	4650      	mov	r0, sl
 800b3b4:	f7f4 ff94 	bl	80002e0 <memchr>
 800b3b8:	b140      	cbz	r0, 800b3cc <_vfiprintf_r+0x198>
 800b3ba:	2340      	movs	r3, #64	; 0x40
 800b3bc:	eba0 000a 	sub.w	r0, r0, sl
 800b3c0:	fa03 f000 	lsl.w	r0, r3, r0
 800b3c4:	9b04      	ldr	r3, [sp, #16]
 800b3c6:	4303      	orrs	r3, r0
 800b3c8:	3401      	adds	r4, #1
 800b3ca:	9304      	str	r3, [sp, #16]
 800b3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d0:	482c      	ldr	r0, [pc, #176]	; (800b484 <_vfiprintf_r+0x250>)
 800b3d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3d6:	2206      	movs	r2, #6
 800b3d8:	f7f4 ff82 	bl	80002e0 <memchr>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d03f      	beq.n	800b460 <_vfiprintf_r+0x22c>
 800b3e0:	4b29      	ldr	r3, [pc, #164]	; (800b488 <_vfiprintf_r+0x254>)
 800b3e2:	bb1b      	cbnz	r3, 800b42c <_vfiprintf_r+0x1f8>
 800b3e4:	9b03      	ldr	r3, [sp, #12]
 800b3e6:	3307      	adds	r3, #7
 800b3e8:	f023 0307 	bic.w	r3, r3, #7
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	9303      	str	r3, [sp, #12]
 800b3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f2:	443b      	add	r3, r7
 800b3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f6:	e767      	b.n	800b2c8 <_vfiprintf_r+0x94>
 800b3f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	2001      	movs	r0, #1
 800b400:	e7a5      	b.n	800b34e <_vfiprintf_r+0x11a>
 800b402:	2300      	movs	r3, #0
 800b404:	3401      	adds	r4, #1
 800b406:	9305      	str	r3, [sp, #20]
 800b408:	4619      	mov	r1, r3
 800b40a:	f04f 0c0a 	mov.w	ip, #10
 800b40e:	4620      	mov	r0, r4
 800b410:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b414:	3a30      	subs	r2, #48	; 0x30
 800b416:	2a09      	cmp	r2, #9
 800b418:	d903      	bls.n	800b422 <_vfiprintf_r+0x1ee>
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d0c5      	beq.n	800b3aa <_vfiprintf_r+0x176>
 800b41e:	9105      	str	r1, [sp, #20]
 800b420:	e7c3      	b.n	800b3aa <_vfiprintf_r+0x176>
 800b422:	fb0c 2101 	mla	r1, ip, r1, r2
 800b426:	4604      	mov	r4, r0
 800b428:	2301      	movs	r3, #1
 800b42a:	e7f0      	b.n	800b40e <_vfiprintf_r+0x1da>
 800b42c:	ab03      	add	r3, sp, #12
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	462a      	mov	r2, r5
 800b432:	4b16      	ldr	r3, [pc, #88]	; (800b48c <_vfiprintf_r+0x258>)
 800b434:	a904      	add	r1, sp, #16
 800b436:	4630      	mov	r0, r6
 800b438:	f3af 8000 	nop.w
 800b43c:	4607      	mov	r7, r0
 800b43e:	1c78      	adds	r0, r7, #1
 800b440:	d1d6      	bne.n	800b3f0 <_vfiprintf_r+0x1bc>
 800b442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b444:	07d9      	lsls	r1, r3, #31
 800b446:	d405      	bmi.n	800b454 <_vfiprintf_r+0x220>
 800b448:	89ab      	ldrh	r3, [r5, #12]
 800b44a:	059a      	lsls	r2, r3, #22
 800b44c:	d402      	bmi.n	800b454 <_vfiprintf_r+0x220>
 800b44e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b450:	f7ff fe6b 	bl	800b12a <__retarget_lock_release_recursive>
 800b454:	89ab      	ldrh	r3, [r5, #12]
 800b456:	065b      	lsls	r3, r3, #25
 800b458:	f53f af12 	bmi.w	800b280 <_vfiprintf_r+0x4c>
 800b45c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b45e:	e711      	b.n	800b284 <_vfiprintf_r+0x50>
 800b460:	ab03      	add	r3, sp, #12
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	462a      	mov	r2, r5
 800b466:	4b09      	ldr	r3, [pc, #36]	; (800b48c <_vfiprintf_r+0x258>)
 800b468:	a904      	add	r1, sp, #16
 800b46a:	4630      	mov	r0, r6
 800b46c:	f000 f880 	bl	800b570 <_printf_i>
 800b470:	e7e4      	b.n	800b43c <_vfiprintf_r+0x208>
 800b472:	bf00      	nop
 800b474:	0800be38 	.word	0x0800be38
 800b478:	0800be58 	.word	0x0800be58
 800b47c:	0800be18 	.word	0x0800be18
 800b480:	0800be78 	.word	0x0800be78
 800b484:	0800be82 	.word	0x0800be82
 800b488:	00000000 	.word	0x00000000
 800b48c:	0800b20f 	.word	0x0800b20f
 800b490:	0800be7e 	.word	0x0800be7e

0800b494 <_printf_common>:
 800b494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b498:	4616      	mov	r6, r2
 800b49a:	4699      	mov	r9, r3
 800b49c:	688a      	ldr	r2, [r1, #8]
 800b49e:	690b      	ldr	r3, [r1, #16]
 800b4a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	bfb8      	it	lt
 800b4a8:	4613      	movlt	r3, r2
 800b4aa:	6033      	str	r3, [r6, #0]
 800b4ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4b0:	4607      	mov	r7, r0
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	b10a      	cbz	r2, 800b4ba <_printf_common+0x26>
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	6033      	str	r3, [r6, #0]
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	0699      	lsls	r1, r3, #26
 800b4be:	bf42      	ittt	mi
 800b4c0:	6833      	ldrmi	r3, [r6, #0]
 800b4c2:	3302      	addmi	r3, #2
 800b4c4:	6033      	strmi	r3, [r6, #0]
 800b4c6:	6825      	ldr	r5, [r4, #0]
 800b4c8:	f015 0506 	ands.w	r5, r5, #6
 800b4cc:	d106      	bne.n	800b4dc <_printf_common+0x48>
 800b4ce:	f104 0a19 	add.w	sl, r4, #25
 800b4d2:	68e3      	ldr	r3, [r4, #12]
 800b4d4:	6832      	ldr	r2, [r6, #0]
 800b4d6:	1a9b      	subs	r3, r3, r2
 800b4d8:	42ab      	cmp	r3, r5
 800b4da:	dc26      	bgt.n	800b52a <_printf_common+0x96>
 800b4dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4e0:	1e13      	subs	r3, r2, #0
 800b4e2:	6822      	ldr	r2, [r4, #0]
 800b4e4:	bf18      	it	ne
 800b4e6:	2301      	movne	r3, #1
 800b4e8:	0692      	lsls	r2, r2, #26
 800b4ea:	d42b      	bmi.n	800b544 <_printf_common+0xb0>
 800b4ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4f0:	4649      	mov	r1, r9
 800b4f2:	4638      	mov	r0, r7
 800b4f4:	47c0      	blx	r8
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	d01e      	beq.n	800b538 <_printf_common+0xa4>
 800b4fa:	6823      	ldr	r3, [r4, #0]
 800b4fc:	68e5      	ldr	r5, [r4, #12]
 800b4fe:	6832      	ldr	r2, [r6, #0]
 800b500:	f003 0306 	and.w	r3, r3, #6
 800b504:	2b04      	cmp	r3, #4
 800b506:	bf08      	it	eq
 800b508:	1aad      	subeq	r5, r5, r2
 800b50a:	68a3      	ldr	r3, [r4, #8]
 800b50c:	6922      	ldr	r2, [r4, #16]
 800b50e:	bf0c      	ite	eq
 800b510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b514:	2500      	movne	r5, #0
 800b516:	4293      	cmp	r3, r2
 800b518:	bfc4      	itt	gt
 800b51a:	1a9b      	subgt	r3, r3, r2
 800b51c:	18ed      	addgt	r5, r5, r3
 800b51e:	2600      	movs	r6, #0
 800b520:	341a      	adds	r4, #26
 800b522:	42b5      	cmp	r5, r6
 800b524:	d11a      	bne.n	800b55c <_printf_common+0xc8>
 800b526:	2000      	movs	r0, #0
 800b528:	e008      	b.n	800b53c <_printf_common+0xa8>
 800b52a:	2301      	movs	r3, #1
 800b52c:	4652      	mov	r2, sl
 800b52e:	4649      	mov	r1, r9
 800b530:	4638      	mov	r0, r7
 800b532:	47c0      	blx	r8
 800b534:	3001      	adds	r0, #1
 800b536:	d103      	bne.n	800b540 <_printf_common+0xac>
 800b538:	f04f 30ff 	mov.w	r0, #4294967295
 800b53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b540:	3501      	adds	r5, #1
 800b542:	e7c6      	b.n	800b4d2 <_printf_common+0x3e>
 800b544:	18e1      	adds	r1, r4, r3
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	2030      	movs	r0, #48	; 0x30
 800b54a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b54e:	4422      	add	r2, r4
 800b550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b558:	3302      	adds	r3, #2
 800b55a:	e7c7      	b.n	800b4ec <_printf_common+0x58>
 800b55c:	2301      	movs	r3, #1
 800b55e:	4622      	mov	r2, r4
 800b560:	4649      	mov	r1, r9
 800b562:	4638      	mov	r0, r7
 800b564:	47c0      	blx	r8
 800b566:	3001      	adds	r0, #1
 800b568:	d0e6      	beq.n	800b538 <_printf_common+0xa4>
 800b56a:	3601      	adds	r6, #1
 800b56c:	e7d9      	b.n	800b522 <_printf_common+0x8e>
	...

0800b570 <_printf_i>:
 800b570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b574:	460c      	mov	r4, r1
 800b576:	4691      	mov	r9, r2
 800b578:	7e27      	ldrb	r7, [r4, #24]
 800b57a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b57c:	2f78      	cmp	r7, #120	; 0x78
 800b57e:	4680      	mov	r8, r0
 800b580:	469a      	mov	sl, r3
 800b582:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b586:	d807      	bhi.n	800b598 <_printf_i+0x28>
 800b588:	2f62      	cmp	r7, #98	; 0x62
 800b58a:	d80a      	bhi.n	800b5a2 <_printf_i+0x32>
 800b58c:	2f00      	cmp	r7, #0
 800b58e:	f000 80d8 	beq.w	800b742 <_printf_i+0x1d2>
 800b592:	2f58      	cmp	r7, #88	; 0x58
 800b594:	f000 80a3 	beq.w	800b6de <_printf_i+0x16e>
 800b598:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b59c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5a0:	e03a      	b.n	800b618 <_printf_i+0xa8>
 800b5a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5a6:	2b15      	cmp	r3, #21
 800b5a8:	d8f6      	bhi.n	800b598 <_printf_i+0x28>
 800b5aa:	a001      	add	r0, pc, #4	; (adr r0, 800b5b0 <_printf_i+0x40>)
 800b5ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b5b0:	0800b609 	.word	0x0800b609
 800b5b4:	0800b61d 	.word	0x0800b61d
 800b5b8:	0800b599 	.word	0x0800b599
 800b5bc:	0800b599 	.word	0x0800b599
 800b5c0:	0800b599 	.word	0x0800b599
 800b5c4:	0800b599 	.word	0x0800b599
 800b5c8:	0800b61d 	.word	0x0800b61d
 800b5cc:	0800b599 	.word	0x0800b599
 800b5d0:	0800b599 	.word	0x0800b599
 800b5d4:	0800b599 	.word	0x0800b599
 800b5d8:	0800b599 	.word	0x0800b599
 800b5dc:	0800b729 	.word	0x0800b729
 800b5e0:	0800b64d 	.word	0x0800b64d
 800b5e4:	0800b70b 	.word	0x0800b70b
 800b5e8:	0800b599 	.word	0x0800b599
 800b5ec:	0800b599 	.word	0x0800b599
 800b5f0:	0800b74b 	.word	0x0800b74b
 800b5f4:	0800b599 	.word	0x0800b599
 800b5f8:	0800b64d 	.word	0x0800b64d
 800b5fc:	0800b599 	.word	0x0800b599
 800b600:	0800b599 	.word	0x0800b599
 800b604:	0800b713 	.word	0x0800b713
 800b608:	680b      	ldr	r3, [r1, #0]
 800b60a:	1d1a      	adds	r2, r3, #4
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	600a      	str	r2, [r1, #0]
 800b610:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b618:	2301      	movs	r3, #1
 800b61a:	e0a3      	b.n	800b764 <_printf_i+0x1f4>
 800b61c:	6825      	ldr	r5, [r4, #0]
 800b61e:	6808      	ldr	r0, [r1, #0]
 800b620:	062e      	lsls	r6, r5, #24
 800b622:	f100 0304 	add.w	r3, r0, #4
 800b626:	d50a      	bpl.n	800b63e <_printf_i+0xce>
 800b628:	6805      	ldr	r5, [r0, #0]
 800b62a:	600b      	str	r3, [r1, #0]
 800b62c:	2d00      	cmp	r5, #0
 800b62e:	da03      	bge.n	800b638 <_printf_i+0xc8>
 800b630:	232d      	movs	r3, #45	; 0x2d
 800b632:	426d      	negs	r5, r5
 800b634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b638:	485e      	ldr	r0, [pc, #376]	; (800b7b4 <_printf_i+0x244>)
 800b63a:	230a      	movs	r3, #10
 800b63c:	e019      	b.n	800b672 <_printf_i+0x102>
 800b63e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b642:	6805      	ldr	r5, [r0, #0]
 800b644:	600b      	str	r3, [r1, #0]
 800b646:	bf18      	it	ne
 800b648:	b22d      	sxthne	r5, r5
 800b64a:	e7ef      	b.n	800b62c <_printf_i+0xbc>
 800b64c:	680b      	ldr	r3, [r1, #0]
 800b64e:	6825      	ldr	r5, [r4, #0]
 800b650:	1d18      	adds	r0, r3, #4
 800b652:	6008      	str	r0, [r1, #0]
 800b654:	0628      	lsls	r0, r5, #24
 800b656:	d501      	bpl.n	800b65c <_printf_i+0xec>
 800b658:	681d      	ldr	r5, [r3, #0]
 800b65a:	e002      	b.n	800b662 <_printf_i+0xf2>
 800b65c:	0669      	lsls	r1, r5, #25
 800b65e:	d5fb      	bpl.n	800b658 <_printf_i+0xe8>
 800b660:	881d      	ldrh	r5, [r3, #0]
 800b662:	4854      	ldr	r0, [pc, #336]	; (800b7b4 <_printf_i+0x244>)
 800b664:	2f6f      	cmp	r7, #111	; 0x6f
 800b666:	bf0c      	ite	eq
 800b668:	2308      	moveq	r3, #8
 800b66a:	230a      	movne	r3, #10
 800b66c:	2100      	movs	r1, #0
 800b66e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b672:	6866      	ldr	r6, [r4, #4]
 800b674:	60a6      	str	r6, [r4, #8]
 800b676:	2e00      	cmp	r6, #0
 800b678:	bfa2      	ittt	ge
 800b67a:	6821      	ldrge	r1, [r4, #0]
 800b67c:	f021 0104 	bicge.w	r1, r1, #4
 800b680:	6021      	strge	r1, [r4, #0]
 800b682:	b90d      	cbnz	r5, 800b688 <_printf_i+0x118>
 800b684:	2e00      	cmp	r6, #0
 800b686:	d04d      	beq.n	800b724 <_printf_i+0x1b4>
 800b688:	4616      	mov	r6, r2
 800b68a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b68e:	fb03 5711 	mls	r7, r3, r1, r5
 800b692:	5dc7      	ldrb	r7, [r0, r7]
 800b694:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b698:	462f      	mov	r7, r5
 800b69a:	42bb      	cmp	r3, r7
 800b69c:	460d      	mov	r5, r1
 800b69e:	d9f4      	bls.n	800b68a <_printf_i+0x11a>
 800b6a0:	2b08      	cmp	r3, #8
 800b6a2:	d10b      	bne.n	800b6bc <_printf_i+0x14c>
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	07df      	lsls	r7, r3, #31
 800b6a8:	d508      	bpl.n	800b6bc <_printf_i+0x14c>
 800b6aa:	6923      	ldr	r3, [r4, #16]
 800b6ac:	6861      	ldr	r1, [r4, #4]
 800b6ae:	4299      	cmp	r1, r3
 800b6b0:	bfde      	ittt	le
 800b6b2:	2330      	movle	r3, #48	; 0x30
 800b6b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b6b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b6bc:	1b92      	subs	r2, r2, r6
 800b6be:	6122      	str	r2, [r4, #16]
 800b6c0:	f8cd a000 	str.w	sl, [sp]
 800b6c4:	464b      	mov	r3, r9
 800b6c6:	aa03      	add	r2, sp, #12
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	4640      	mov	r0, r8
 800b6cc:	f7ff fee2 	bl	800b494 <_printf_common>
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	d14c      	bne.n	800b76e <_printf_i+0x1fe>
 800b6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d8:	b004      	add	sp, #16
 800b6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6de:	4835      	ldr	r0, [pc, #212]	; (800b7b4 <_printf_i+0x244>)
 800b6e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b6e4:	6823      	ldr	r3, [r4, #0]
 800b6e6:	680e      	ldr	r6, [r1, #0]
 800b6e8:	061f      	lsls	r7, r3, #24
 800b6ea:	f856 5b04 	ldr.w	r5, [r6], #4
 800b6ee:	600e      	str	r6, [r1, #0]
 800b6f0:	d514      	bpl.n	800b71c <_printf_i+0x1ac>
 800b6f2:	07d9      	lsls	r1, r3, #31
 800b6f4:	bf44      	itt	mi
 800b6f6:	f043 0320 	orrmi.w	r3, r3, #32
 800b6fa:	6023      	strmi	r3, [r4, #0]
 800b6fc:	b91d      	cbnz	r5, 800b706 <_printf_i+0x196>
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	f023 0320 	bic.w	r3, r3, #32
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	2310      	movs	r3, #16
 800b708:	e7b0      	b.n	800b66c <_printf_i+0xfc>
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	f043 0320 	orr.w	r3, r3, #32
 800b710:	6023      	str	r3, [r4, #0]
 800b712:	2378      	movs	r3, #120	; 0x78
 800b714:	4828      	ldr	r0, [pc, #160]	; (800b7b8 <_printf_i+0x248>)
 800b716:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b71a:	e7e3      	b.n	800b6e4 <_printf_i+0x174>
 800b71c:	065e      	lsls	r6, r3, #25
 800b71e:	bf48      	it	mi
 800b720:	b2ad      	uxthmi	r5, r5
 800b722:	e7e6      	b.n	800b6f2 <_printf_i+0x182>
 800b724:	4616      	mov	r6, r2
 800b726:	e7bb      	b.n	800b6a0 <_printf_i+0x130>
 800b728:	680b      	ldr	r3, [r1, #0]
 800b72a:	6826      	ldr	r6, [r4, #0]
 800b72c:	6960      	ldr	r0, [r4, #20]
 800b72e:	1d1d      	adds	r5, r3, #4
 800b730:	600d      	str	r5, [r1, #0]
 800b732:	0635      	lsls	r5, r6, #24
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	d501      	bpl.n	800b73c <_printf_i+0x1cc>
 800b738:	6018      	str	r0, [r3, #0]
 800b73a:	e002      	b.n	800b742 <_printf_i+0x1d2>
 800b73c:	0671      	lsls	r1, r6, #25
 800b73e:	d5fb      	bpl.n	800b738 <_printf_i+0x1c8>
 800b740:	8018      	strh	r0, [r3, #0]
 800b742:	2300      	movs	r3, #0
 800b744:	6123      	str	r3, [r4, #16]
 800b746:	4616      	mov	r6, r2
 800b748:	e7ba      	b.n	800b6c0 <_printf_i+0x150>
 800b74a:	680b      	ldr	r3, [r1, #0]
 800b74c:	1d1a      	adds	r2, r3, #4
 800b74e:	600a      	str	r2, [r1, #0]
 800b750:	681e      	ldr	r6, [r3, #0]
 800b752:	6862      	ldr	r2, [r4, #4]
 800b754:	2100      	movs	r1, #0
 800b756:	4630      	mov	r0, r6
 800b758:	f7f4 fdc2 	bl	80002e0 <memchr>
 800b75c:	b108      	cbz	r0, 800b762 <_printf_i+0x1f2>
 800b75e:	1b80      	subs	r0, r0, r6
 800b760:	6060      	str	r0, [r4, #4]
 800b762:	6863      	ldr	r3, [r4, #4]
 800b764:	6123      	str	r3, [r4, #16]
 800b766:	2300      	movs	r3, #0
 800b768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b76c:	e7a8      	b.n	800b6c0 <_printf_i+0x150>
 800b76e:	6923      	ldr	r3, [r4, #16]
 800b770:	4632      	mov	r2, r6
 800b772:	4649      	mov	r1, r9
 800b774:	4640      	mov	r0, r8
 800b776:	47d0      	blx	sl
 800b778:	3001      	adds	r0, #1
 800b77a:	d0ab      	beq.n	800b6d4 <_printf_i+0x164>
 800b77c:	6823      	ldr	r3, [r4, #0]
 800b77e:	079b      	lsls	r3, r3, #30
 800b780:	d413      	bmi.n	800b7aa <_printf_i+0x23a>
 800b782:	68e0      	ldr	r0, [r4, #12]
 800b784:	9b03      	ldr	r3, [sp, #12]
 800b786:	4298      	cmp	r0, r3
 800b788:	bfb8      	it	lt
 800b78a:	4618      	movlt	r0, r3
 800b78c:	e7a4      	b.n	800b6d8 <_printf_i+0x168>
 800b78e:	2301      	movs	r3, #1
 800b790:	4632      	mov	r2, r6
 800b792:	4649      	mov	r1, r9
 800b794:	4640      	mov	r0, r8
 800b796:	47d0      	blx	sl
 800b798:	3001      	adds	r0, #1
 800b79a:	d09b      	beq.n	800b6d4 <_printf_i+0x164>
 800b79c:	3501      	adds	r5, #1
 800b79e:	68e3      	ldr	r3, [r4, #12]
 800b7a0:	9903      	ldr	r1, [sp, #12]
 800b7a2:	1a5b      	subs	r3, r3, r1
 800b7a4:	42ab      	cmp	r3, r5
 800b7a6:	dcf2      	bgt.n	800b78e <_printf_i+0x21e>
 800b7a8:	e7eb      	b.n	800b782 <_printf_i+0x212>
 800b7aa:	2500      	movs	r5, #0
 800b7ac:	f104 0619 	add.w	r6, r4, #25
 800b7b0:	e7f5      	b.n	800b79e <_printf_i+0x22e>
 800b7b2:	bf00      	nop
 800b7b4:	0800be89 	.word	0x0800be89
 800b7b8:	0800be9a 	.word	0x0800be9a

0800b7bc <_sbrk_r>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	4d06      	ldr	r5, [pc, #24]	; (800b7d8 <_sbrk_r+0x1c>)
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	4608      	mov	r0, r1
 800b7c6:	602b      	str	r3, [r5, #0]
 800b7c8:	f7f6 fd3a 	bl	8002240 <_sbrk>
 800b7cc:	1c43      	adds	r3, r0, #1
 800b7ce:	d102      	bne.n	800b7d6 <_sbrk_r+0x1a>
 800b7d0:	682b      	ldr	r3, [r5, #0]
 800b7d2:	b103      	cbz	r3, 800b7d6 <_sbrk_r+0x1a>
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	bd38      	pop	{r3, r4, r5, pc}
 800b7d8:	200008d4 	.word	0x200008d4

0800b7dc <__sread>:
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	460c      	mov	r4, r1
 800b7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e4:	f000 fab4 	bl	800bd50 <_read_r>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	bfab      	itete	ge
 800b7ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7ee:	89a3      	ldrhlt	r3, [r4, #12]
 800b7f0:	181b      	addge	r3, r3, r0
 800b7f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7f6:	bfac      	ite	ge
 800b7f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7fa:	81a3      	strhlt	r3, [r4, #12]
 800b7fc:	bd10      	pop	{r4, pc}

0800b7fe <__swrite>:
 800b7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b802:	461f      	mov	r7, r3
 800b804:	898b      	ldrh	r3, [r1, #12]
 800b806:	05db      	lsls	r3, r3, #23
 800b808:	4605      	mov	r5, r0
 800b80a:	460c      	mov	r4, r1
 800b80c:	4616      	mov	r6, r2
 800b80e:	d505      	bpl.n	800b81c <__swrite+0x1e>
 800b810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b814:	2302      	movs	r3, #2
 800b816:	2200      	movs	r2, #0
 800b818:	f000 f9c8 	bl	800bbac <_lseek_r>
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b826:	81a3      	strh	r3, [r4, #12]
 800b828:	4632      	mov	r2, r6
 800b82a:	463b      	mov	r3, r7
 800b82c:	4628      	mov	r0, r5
 800b82e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b832:	f000 b869 	b.w	800b908 <_write_r>

0800b836 <__sseek>:
 800b836:	b510      	push	{r4, lr}
 800b838:	460c      	mov	r4, r1
 800b83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b83e:	f000 f9b5 	bl	800bbac <_lseek_r>
 800b842:	1c43      	adds	r3, r0, #1
 800b844:	89a3      	ldrh	r3, [r4, #12]
 800b846:	bf15      	itete	ne
 800b848:	6560      	strne	r0, [r4, #84]	; 0x54
 800b84a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b84e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b852:	81a3      	strheq	r3, [r4, #12]
 800b854:	bf18      	it	ne
 800b856:	81a3      	strhne	r3, [r4, #12]
 800b858:	bd10      	pop	{r4, pc}

0800b85a <__sclose>:
 800b85a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b85e:	f000 b8d3 	b.w	800ba08 <_close_r>
	...

0800b864 <__swbuf_r>:
 800b864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b866:	460e      	mov	r6, r1
 800b868:	4614      	mov	r4, r2
 800b86a:	4605      	mov	r5, r0
 800b86c:	b118      	cbz	r0, 800b876 <__swbuf_r+0x12>
 800b86e:	6983      	ldr	r3, [r0, #24]
 800b870:	b90b      	cbnz	r3, 800b876 <__swbuf_r+0x12>
 800b872:	f7ff fbbb 	bl	800afec <__sinit>
 800b876:	4b21      	ldr	r3, [pc, #132]	; (800b8fc <__swbuf_r+0x98>)
 800b878:	429c      	cmp	r4, r3
 800b87a:	d12b      	bne.n	800b8d4 <__swbuf_r+0x70>
 800b87c:	686c      	ldr	r4, [r5, #4]
 800b87e:	69a3      	ldr	r3, [r4, #24]
 800b880:	60a3      	str	r3, [r4, #8]
 800b882:	89a3      	ldrh	r3, [r4, #12]
 800b884:	071a      	lsls	r2, r3, #28
 800b886:	d52f      	bpl.n	800b8e8 <__swbuf_r+0x84>
 800b888:	6923      	ldr	r3, [r4, #16]
 800b88a:	b36b      	cbz	r3, 800b8e8 <__swbuf_r+0x84>
 800b88c:	6923      	ldr	r3, [r4, #16]
 800b88e:	6820      	ldr	r0, [r4, #0]
 800b890:	1ac0      	subs	r0, r0, r3
 800b892:	6963      	ldr	r3, [r4, #20]
 800b894:	b2f6      	uxtb	r6, r6
 800b896:	4283      	cmp	r3, r0
 800b898:	4637      	mov	r7, r6
 800b89a:	dc04      	bgt.n	800b8a6 <__swbuf_r+0x42>
 800b89c:	4621      	mov	r1, r4
 800b89e:	4628      	mov	r0, r5
 800b8a0:	f000 f948 	bl	800bb34 <_fflush_r>
 800b8a4:	bb30      	cbnz	r0, 800b8f4 <__swbuf_r+0x90>
 800b8a6:	68a3      	ldr	r3, [r4, #8]
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	60a3      	str	r3, [r4, #8]
 800b8ac:	6823      	ldr	r3, [r4, #0]
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	6022      	str	r2, [r4, #0]
 800b8b2:	701e      	strb	r6, [r3, #0]
 800b8b4:	6963      	ldr	r3, [r4, #20]
 800b8b6:	3001      	adds	r0, #1
 800b8b8:	4283      	cmp	r3, r0
 800b8ba:	d004      	beq.n	800b8c6 <__swbuf_r+0x62>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	07db      	lsls	r3, r3, #31
 800b8c0:	d506      	bpl.n	800b8d0 <__swbuf_r+0x6c>
 800b8c2:	2e0a      	cmp	r6, #10
 800b8c4:	d104      	bne.n	800b8d0 <__swbuf_r+0x6c>
 800b8c6:	4621      	mov	r1, r4
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	f000 f933 	bl	800bb34 <_fflush_r>
 800b8ce:	b988      	cbnz	r0, 800b8f4 <__swbuf_r+0x90>
 800b8d0:	4638      	mov	r0, r7
 800b8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d4:	4b0a      	ldr	r3, [pc, #40]	; (800b900 <__swbuf_r+0x9c>)
 800b8d6:	429c      	cmp	r4, r3
 800b8d8:	d101      	bne.n	800b8de <__swbuf_r+0x7a>
 800b8da:	68ac      	ldr	r4, [r5, #8]
 800b8dc:	e7cf      	b.n	800b87e <__swbuf_r+0x1a>
 800b8de:	4b09      	ldr	r3, [pc, #36]	; (800b904 <__swbuf_r+0xa0>)
 800b8e0:	429c      	cmp	r4, r3
 800b8e2:	bf08      	it	eq
 800b8e4:	68ec      	ldreq	r4, [r5, #12]
 800b8e6:	e7ca      	b.n	800b87e <__swbuf_r+0x1a>
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	f000 f81e 	bl	800b92c <__swsetup_r>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d0cb      	beq.n	800b88c <__swbuf_r+0x28>
 800b8f4:	f04f 37ff 	mov.w	r7, #4294967295
 800b8f8:	e7ea      	b.n	800b8d0 <__swbuf_r+0x6c>
 800b8fa:	bf00      	nop
 800b8fc:	0800be38 	.word	0x0800be38
 800b900:	0800be58 	.word	0x0800be58
 800b904:	0800be18 	.word	0x0800be18

0800b908 <_write_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4d07      	ldr	r5, [pc, #28]	; (800b928 <_write_r+0x20>)
 800b90c:	4604      	mov	r4, r0
 800b90e:	4608      	mov	r0, r1
 800b910:	4611      	mov	r1, r2
 800b912:	2200      	movs	r2, #0
 800b914:	602a      	str	r2, [r5, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	f7f5 ff56 	bl	80017c8 <_write>
 800b91c:	1c43      	adds	r3, r0, #1
 800b91e:	d102      	bne.n	800b926 <_write_r+0x1e>
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	b103      	cbz	r3, 800b926 <_write_r+0x1e>
 800b924:	6023      	str	r3, [r4, #0]
 800b926:	bd38      	pop	{r3, r4, r5, pc}
 800b928:	200008d4 	.word	0x200008d4

0800b92c <__swsetup_r>:
 800b92c:	4b32      	ldr	r3, [pc, #200]	; (800b9f8 <__swsetup_r+0xcc>)
 800b92e:	b570      	push	{r4, r5, r6, lr}
 800b930:	681d      	ldr	r5, [r3, #0]
 800b932:	4606      	mov	r6, r0
 800b934:	460c      	mov	r4, r1
 800b936:	b125      	cbz	r5, 800b942 <__swsetup_r+0x16>
 800b938:	69ab      	ldr	r3, [r5, #24]
 800b93a:	b913      	cbnz	r3, 800b942 <__swsetup_r+0x16>
 800b93c:	4628      	mov	r0, r5
 800b93e:	f7ff fb55 	bl	800afec <__sinit>
 800b942:	4b2e      	ldr	r3, [pc, #184]	; (800b9fc <__swsetup_r+0xd0>)
 800b944:	429c      	cmp	r4, r3
 800b946:	d10f      	bne.n	800b968 <__swsetup_r+0x3c>
 800b948:	686c      	ldr	r4, [r5, #4]
 800b94a:	89a3      	ldrh	r3, [r4, #12]
 800b94c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b950:	0719      	lsls	r1, r3, #28
 800b952:	d42c      	bmi.n	800b9ae <__swsetup_r+0x82>
 800b954:	06dd      	lsls	r5, r3, #27
 800b956:	d411      	bmi.n	800b97c <__swsetup_r+0x50>
 800b958:	2309      	movs	r3, #9
 800b95a:	6033      	str	r3, [r6, #0]
 800b95c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b960:	81a3      	strh	r3, [r4, #12]
 800b962:	f04f 30ff 	mov.w	r0, #4294967295
 800b966:	e03e      	b.n	800b9e6 <__swsetup_r+0xba>
 800b968:	4b25      	ldr	r3, [pc, #148]	; (800ba00 <__swsetup_r+0xd4>)
 800b96a:	429c      	cmp	r4, r3
 800b96c:	d101      	bne.n	800b972 <__swsetup_r+0x46>
 800b96e:	68ac      	ldr	r4, [r5, #8]
 800b970:	e7eb      	b.n	800b94a <__swsetup_r+0x1e>
 800b972:	4b24      	ldr	r3, [pc, #144]	; (800ba04 <__swsetup_r+0xd8>)
 800b974:	429c      	cmp	r4, r3
 800b976:	bf08      	it	eq
 800b978:	68ec      	ldreq	r4, [r5, #12]
 800b97a:	e7e6      	b.n	800b94a <__swsetup_r+0x1e>
 800b97c:	0758      	lsls	r0, r3, #29
 800b97e:	d512      	bpl.n	800b9a6 <__swsetup_r+0x7a>
 800b980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b982:	b141      	cbz	r1, 800b996 <__swsetup_r+0x6a>
 800b984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b988:	4299      	cmp	r1, r3
 800b98a:	d002      	beq.n	800b992 <__swsetup_r+0x66>
 800b98c:	4630      	mov	r0, r6
 800b98e:	f000 f98f 	bl	800bcb0 <_free_r>
 800b992:	2300      	movs	r3, #0
 800b994:	6363      	str	r3, [r4, #52]	; 0x34
 800b996:	89a3      	ldrh	r3, [r4, #12]
 800b998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b99c:	81a3      	strh	r3, [r4, #12]
 800b99e:	2300      	movs	r3, #0
 800b9a0:	6063      	str	r3, [r4, #4]
 800b9a2:	6923      	ldr	r3, [r4, #16]
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	89a3      	ldrh	r3, [r4, #12]
 800b9a8:	f043 0308 	orr.w	r3, r3, #8
 800b9ac:	81a3      	strh	r3, [r4, #12]
 800b9ae:	6923      	ldr	r3, [r4, #16]
 800b9b0:	b94b      	cbnz	r3, 800b9c6 <__swsetup_r+0x9a>
 800b9b2:	89a3      	ldrh	r3, [r4, #12]
 800b9b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9bc:	d003      	beq.n	800b9c6 <__swsetup_r+0x9a>
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f000 f929 	bl	800bc18 <__smakebuf_r>
 800b9c6:	89a0      	ldrh	r0, [r4, #12]
 800b9c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9cc:	f010 0301 	ands.w	r3, r0, #1
 800b9d0:	d00a      	beq.n	800b9e8 <__swsetup_r+0xbc>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	60a3      	str	r3, [r4, #8]
 800b9d6:	6963      	ldr	r3, [r4, #20]
 800b9d8:	425b      	negs	r3, r3
 800b9da:	61a3      	str	r3, [r4, #24]
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	b943      	cbnz	r3, 800b9f2 <__swsetup_r+0xc6>
 800b9e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b9e4:	d1ba      	bne.n	800b95c <__swsetup_r+0x30>
 800b9e6:	bd70      	pop	{r4, r5, r6, pc}
 800b9e8:	0781      	lsls	r1, r0, #30
 800b9ea:	bf58      	it	pl
 800b9ec:	6963      	ldrpl	r3, [r4, #20]
 800b9ee:	60a3      	str	r3, [r4, #8]
 800b9f0:	e7f4      	b.n	800b9dc <__swsetup_r+0xb0>
 800b9f2:	2000      	movs	r0, #0
 800b9f4:	e7f7      	b.n	800b9e6 <__swsetup_r+0xba>
 800b9f6:	bf00      	nop
 800b9f8:	20000010 	.word	0x20000010
 800b9fc:	0800be38 	.word	0x0800be38
 800ba00:	0800be58 	.word	0x0800be58
 800ba04:	0800be18 	.word	0x0800be18

0800ba08 <_close_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4d06      	ldr	r5, [pc, #24]	; (800ba24 <_close_r+0x1c>)
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	4604      	mov	r4, r0
 800ba10:	4608      	mov	r0, r1
 800ba12:	602b      	str	r3, [r5, #0]
 800ba14:	f7f6 fbdf 	bl	80021d6 <_close>
 800ba18:	1c43      	adds	r3, r0, #1
 800ba1a:	d102      	bne.n	800ba22 <_close_r+0x1a>
 800ba1c:	682b      	ldr	r3, [r5, #0]
 800ba1e:	b103      	cbz	r3, 800ba22 <_close_r+0x1a>
 800ba20:	6023      	str	r3, [r4, #0]
 800ba22:	bd38      	pop	{r3, r4, r5, pc}
 800ba24:	200008d4 	.word	0x200008d4

0800ba28 <__sflush_r>:
 800ba28:	898a      	ldrh	r2, [r1, #12]
 800ba2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba2e:	4605      	mov	r5, r0
 800ba30:	0710      	lsls	r0, r2, #28
 800ba32:	460c      	mov	r4, r1
 800ba34:	d458      	bmi.n	800bae8 <__sflush_r+0xc0>
 800ba36:	684b      	ldr	r3, [r1, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	dc05      	bgt.n	800ba48 <__sflush_r+0x20>
 800ba3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	dc02      	bgt.n	800ba48 <__sflush_r+0x20>
 800ba42:	2000      	movs	r0, #0
 800ba44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba4a:	2e00      	cmp	r6, #0
 800ba4c:	d0f9      	beq.n	800ba42 <__sflush_r+0x1a>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba54:	682f      	ldr	r7, [r5, #0]
 800ba56:	602b      	str	r3, [r5, #0]
 800ba58:	d032      	beq.n	800bac0 <__sflush_r+0x98>
 800ba5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	075a      	lsls	r2, r3, #29
 800ba60:	d505      	bpl.n	800ba6e <__sflush_r+0x46>
 800ba62:	6863      	ldr	r3, [r4, #4]
 800ba64:	1ac0      	subs	r0, r0, r3
 800ba66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba68:	b10b      	cbz	r3, 800ba6e <__sflush_r+0x46>
 800ba6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba6c:	1ac0      	subs	r0, r0, r3
 800ba6e:	2300      	movs	r3, #0
 800ba70:	4602      	mov	r2, r0
 800ba72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba74:	6a21      	ldr	r1, [r4, #32]
 800ba76:	4628      	mov	r0, r5
 800ba78:	47b0      	blx	r6
 800ba7a:	1c43      	adds	r3, r0, #1
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	d106      	bne.n	800ba8e <__sflush_r+0x66>
 800ba80:	6829      	ldr	r1, [r5, #0]
 800ba82:	291d      	cmp	r1, #29
 800ba84:	d82c      	bhi.n	800bae0 <__sflush_r+0xb8>
 800ba86:	4a2a      	ldr	r2, [pc, #168]	; (800bb30 <__sflush_r+0x108>)
 800ba88:	40ca      	lsrs	r2, r1
 800ba8a:	07d6      	lsls	r6, r2, #31
 800ba8c:	d528      	bpl.n	800bae0 <__sflush_r+0xb8>
 800ba8e:	2200      	movs	r2, #0
 800ba90:	6062      	str	r2, [r4, #4]
 800ba92:	04d9      	lsls	r1, r3, #19
 800ba94:	6922      	ldr	r2, [r4, #16]
 800ba96:	6022      	str	r2, [r4, #0]
 800ba98:	d504      	bpl.n	800baa4 <__sflush_r+0x7c>
 800ba9a:	1c42      	adds	r2, r0, #1
 800ba9c:	d101      	bne.n	800baa2 <__sflush_r+0x7a>
 800ba9e:	682b      	ldr	r3, [r5, #0]
 800baa0:	b903      	cbnz	r3, 800baa4 <__sflush_r+0x7c>
 800baa2:	6560      	str	r0, [r4, #84]	; 0x54
 800baa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baa6:	602f      	str	r7, [r5, #0]
 800baa8:	2900      	cmp	r1, #0
 800baaa:	d0ca      	beq.n	800ba42 <__sflush_r+0x1a>
 800baac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bab0:	4299      	cmp	r1, r3
 800bab2:	d002      	beq.n	800baba <__sflush_r+0x92>
 800bab4:	4628      	mov	r0, r5
 800bab6:	f000 f8fb 	bl	800bcb0 <_free_r>
 800baba:	2000      	movs	r0, #0
 800babc:	6360      	str	r0, [r4, #52]	; 0x34
 800babe:	e7c1      	b.n	800ba44 <__sflush_r+0x1c>
 800bac0:	6a21      	ldr	r1, [r4, #32]
 800bac2:	2301      	movs	r3, #1
 800bac4:	4628      	mov	r0, r5
 800bac6:	47b0      	blx	r6
 800bac8:	1c41      	adds	r1, r0, #1
 800baca:	d1c7      	bne.n	800ba5c <__sflush_r+0x34>
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d0c4      	beq.n	800ba5c <__sflush_r+0x34>
 800bad2:	2b1d      	cmp	r3, #29
 800bad4:	d001      	beq.n	800bada <__sflush_r+0xb2>
 800bad6:	2b16      	cmp	r3, #22
 800bad8:	d101      	bne.n	800bade <__sflush_r+0xb6>
 800bada:	602f      	str	r7, [r5, #0]
 800badc:	e7b1      	b.n	800ba42 <__sflush_r+0x1a>
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bae4:	81a3      	strh	r3, [r4, #12]
 800bae6:	e7ad      	b.n	800ba44 <__sflush_r+0x1c>
 800bae8:	690f      	ldr	r7, [r1, #16]
 800baea:	2f00      	cmp	r7, #0
 800baec:	d0a9      	beq.n	800ba42 <__sflush_r+0x1a>
 800baee:	0793      	lsls	r3, r2, #30
 800baf0:	680e      	ldr	r6, [r1, #0]
 800baf2:	bf08      	it	eq
 800baf4:	694b      	ldreq	r3, [r1, #20]
 800baf6:	600f      	str	r7, [r1, #0]
 800baf8:	bf18      	it	ne
 800bafa:	2300      	movne	r3, #0
 800bafc:	eba6 0807 	sub.w	r8, r6, r7
 800bb00:	608b      	str	r3, [r1, #8]
 800bb02:	f1b8 0f00 	cmp.w	r8, #0
 800bb06:	dd9c      	ble.n	800ba42 <__sflush_r+0x1a>
 800bb08:	6a21      	ldr	r1, [r4, #32]
 800bb0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb0c:	4643      	mov	r3, r8
 800bb0e:	463a      	mov	r2, r7
 800bb10:	4628      	mov	r0, r5
 800bb12:	47b0      	blx	r6
 800bb14:	2800      	cmp	r0, #0
 800bb16:	dc06      	bgt.n	800bb26 <__sflush_r+0xfe>
 800bb18:	89a3      	ldrh	r3, [r4, #12]
 800bb1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb1e:	81a3      	strh	r3, [r4, #12]
 800bb20:	f04f 30ff 	mov.w	r0, #4294967295
 800bb24:	e78e      	b.n	800ba44 <__sflush_r+0x1c>
 800bb26:	4407      	add	r7, r0
 800bb28:	eba8 0800 	sub.w	r8, r8, r0
 800bb2c:	e7e9      	b.n	800bb02 <__sflush_r+0xda>
 800bb2e:	bf00      	nop
 800bb30:	20400001 	.word	0x20400001

0800bb34 <_fflush_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	690b      	ldr	r3, [r1, #16]
 800bb38:	4605      	mov	r5, r0
 800bb3a:	460c      	mov	r4, r1
 800bb3c:	b913      	cbnz	r3, 800bb44 <_fflush_r+0x10>
 800bb3e:	2500      	movs	r5, #0
 800bb40:	4628      	mov	r0, r5
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	b118      	cbz	r0, 800bb4e <_fflush_r+0x1a>
 800bb46:	6983      	ldr	r3, [r0, #24]
 800bb48:	b90b      	cbnz	r3, 800bb4e <_fflush_r+0x1a>
 800bb4a:	f7ff fa4f 	bl	800afec <__sinit>
 800bb4e:	4b14      	ldr	r3, [pc, #80]	; (800bba0 <_fflush_r+0x6c>)
 800bb50:	429c      	cmp	r4, r3
 800bb52:	d11b      	bne.n	800bb8c <_fflush_r+0x58>
 800bb54:	686c      	ldr	r4, [r5, #4]
 800bb56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d0ef      	beq.n	800bb3e <_fflush_r+0xa>
 800bb5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb60:	07d0      	lsls	r0, r2, #31
 800bb62:	d404      	bmi.n	800bb6e <_fflush_r+0x3a>
 800bb64:	0599      	lsls	r1, r3, #22
 800bb66:	d402      	bmi.n	800bb6e <_fflush_r+0x3a>
 800bb68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb6a:	f7ff fadd 	bl	800b128 <__retarget_lock_acquire_recursive>
 800bb6e:	4628      	mov	r0, r5
 800bb70:	4621      	mov	r1, r4
 800bb72:	f7ff ff59 	bl	800ba28 <__sflush_r>
 800bb76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb78:	07da      	lsls	r2, r3, #31
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	d4e0      	bmi.n	800bb40 <_fflush_r+0xc>
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	059b      	lsls	r3, r3, #22
 800bb82:	d4dd      	bmi.n	800bb40 <_fflush_r+0xc>
 800bb84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb86:	f7ff fad0 	bl	800b12a <__retarget_lock_release_recursive>
 800bb8a:	e7d9      	b.n	800bb40 <_fflush_r+0xc>
 800bb8c:	4b05      	ldr	r3, [pc, #20]	; (800bba4 <_fflush_r+0x70>)
 800bb8e:	429c      	cmp	r4, r3
 800bb90:	d101      	bne.n	800bb96 <_fflush_r+0x62>
 800bb92:	68ac      	ldr	r4, [r5, #8]
 800bb94:	e7df      	b.n	800bb56 <_fflush_r+0x22>
 800bb96:	4b04      	ldr	r3, [pc, #16]	; (800bba8 <_fflush_r+0x74>)
 800bb98:	429c      	cmp	r4, r3
 800bb9a:	bf08      	it	eq
 800bb9c:	68ec      	ldreq	r4, [r5, #12]
 800bb9e:	e7da      	b.n	800bb56 <_fflush_r+0x22>
 800bba0:	0800be38 	.word	0x0800be38
 800bba4:	0800be58 	.word	0x0800be58
 800bba8:	0800be18 	.word	0x0800be18

0800bbac <_lseek_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4d07      	ldr	r5, [pc, #28]	; (800bbcc <_lseek_r+0x20>)
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	4608      	mov	r0, r1
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	602a      	str	r2, [r5, #0]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	f7f6 fb32 	bl	8002224 <_lseek>
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	d102      	bne.n	800bbca <_lseek_r+0x1e>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	b103      	cbz	r3, 800bbca <_lseek_r+0x1e>
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	200008d4 	.word	0x200008d4

0800bbd0 <__swhatbuf_r>:
 800bbd0:	b570      	push	{r4, r5, r6, lr}
 800bbd2:	460e      	mov	r6, r1
 800bbd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbd8:	2900      	cmp	r1, #0
 800bbda:	b096      	sub	sp, #88	; 0x58
 800bbdc:	4614      	mov	r4, r2
 800bbde:	461d      	mov	r5, r3
 800bbe0:	da07      	bge.n	800bbf2 <__swhatbuf_r+0x22>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	602b      	str	r3, [r5, #0]
 800bbe6:	89b3      	ldrh	r3, [r6, #12]
 800bbe8:	061a      	lsls	r2, r3, #24
 800bbea:	d410      	bmi.n	800bc0e <__swhatbuf_r+0x3e>
 800bbec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbf0:	e00e      	b.n	800bc10 <__swhatbuf_r+0x40>
 800bbf2:	466a      	mov	r2, sp
 800bbf4:	f000 f8be 	bl	800bd74 <_fstat_r>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	dbf2      	blt.n	800bbe2 <__swhatbuf_r+0x12>
 800bbfc:	9a01      	ldr	r2, [sp, #4]
 800bbfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc06:	425a      	negs	r2, r3
 800bc08:	415a      	adcs	r2, r3
 800bc0a:	602a      	str	r2, [r5, #0]
 800bc0c:	e7ee      	b.n	800bbec <__swhatbuf_r+0x1c>
 800bc0e:	2340      	movs	r3, #64	; 0x40
 800bc10:	2000      	movs	r0, #0
 800bc12:	6023      	str	r3, [r4, #0]
 800bc14:	b016      	add	sp, #88	; 0x58
 800bc16:	bd70      	pop	{r4, r5, r6, pc}

0800bc18 <__smakebuf_r>:
 800bc18:	898b      	ldrh	r3, [r1, #12]
 800bc1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc1c:	079d      	lsls	r5, r3, #30
 800bc1e:	4606      	mov	r6, r0
 800bc20:	460c      	mov	r4, r1
 800bc22:	d507      	bpl.n	800bc34 <__smakebuf_r+0x1c>
 800bc24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc28:	6023      	str	r3, [r4, #0]
 800bc2a:	6123      	str	r3, [r4, #16]
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	6163      	str	r3, [r4, #20]
 800bc30:	b002      	add	sp, #8
 800bc32:	bd70      	pop	{r4, r5, r6, pc}
 800bc34:	ab01      	add	r3, sp, #4
 800bc36:	466a      	mov	r2, sp
 800bc38:	f7ff ffca 	bl	800bbd0 <__swhatbuf_r>
 800bc3c:	9900      	ldr	r1, [sp, #0]
 800bc3e:	4605      	mov	r5, r0
 800bc40:	4630      	mov	r0, r6
 800bc42:	f7ff fa73 	bl	800b12c <_malloc_r>
 800bc46:	b948      	cbnz	r0, 800bc5c <__smakebuf_r+0x44>
 800bc48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc4c:	059a      	lsls	r2, r3, #22
 800bc4e:	d4ef      	bmi.n	800bc30 <__smakebuf_r+0x18>
 800bc50:	f023 0303 	bic.w	r3, r3, #3
 800bc54:	f043 0302 	orr.w	r3, r3, #2
 800bc58:	81a3      	strh	r3, [r4, #12]
 800bc5a:	e7e3      	b.n	800bc24 <__smakebuf_r+0xc>
 800bc5c:	4b0d      	ldr	r3, [pc, #52]	; (800bc94 <__smakebuf_r+0x7c>)
 800bc5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc60:	89a3      	ldrh	r3, [r4, #12]
 800bc62:	6020      	str	r0, [r4, #0]
 800bc64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc68:	81a3      	strh	r3, [r4, #12]
 800bc6a:	9b00      	ldr	r3, [sp, #0]
 800bc6c:	6163      	str	r3, [r4, #20]
 800bc6e:	9b01      	ldr	r3, [sp, #4]
 800bc70:	6120      	str	r0, [r4, #16]
 800bc72:	b15b      	cbz	r3, 800bc8c <__smakebuf_r+0x74>
 800bc74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f000 f88d 	bl	800bd98 <_isatty_r>
 800bc7e:	b128      	cbz	r0, 800bc8c <__smakebuf_r+0x74>
 800bc80:	89a3      	ldrh	r3, [r4, #12]
 800bc82:	f023 0303 	bic.w	r3, r3, #3
 800bc86:	f043 0301 	orr.w	r3, r3, #1
 800bc8a:	81a3      	strh	r3, [r4, #12]
 800bc8c:	89a0      	ldrh	r0, [r4, #12]
 800bc8e:	4305      	orrs	r5, r0
 800bc90:	81a5      	strh	r5, [r4, #12]
 800bc92:	e7cd      	b.n	800bc30 <__smakebuf_r+0x18>
 800bc94:	0800af85 	.word	0x0800af85

0800bc98 <__malloc_lock>:
 800bc98:	4801      	ldr	r0, [pc, #4]	; (800bca0 <__malloc_lock+0x8>)
 800bc9a:	f7ff ba45 	b.w	800b128 <__retarget_lock_acquire_recursive>
 800bc9e:	bf00      	nop
 800bca0:	200008cc 	.word	0x200008cc

0800bca4 <__malloc_unlock>:
 800bca4:	4801      	ldr	r0, [pc, #4]	; (800bcac <__malloc_unlock+0x8>)
 800bca6:	f7ff ba40 	b.w	800b12a <__retarget_lock_release_recursive>
 800bcaa:	bf00      	nop
 800bcac:	200008cc 	.word	0x200008cc

0800bcb0 <_free_r>:
 800bcb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcb2:	2900      	cmp	r1, #0
 800bcb4:	d048      	beq.n	800bd48 <_free_r+0x98>
 800bcb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcba:	9001      	str	r0, [sp, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f1a1 0404 	sub.w	r4, r1, #4
 800bcc2:	bfb8      	it	lt
 800bcc4:	18e4      	addlt	r4, r4, r3
 800bcc6:	f7ff ffe7 	bl	800bc98 <__malloc_lock>
 800bcca:	4a20      	ldr	r2, [pc, #128]	; (800bd4c <_free_r+0x9c>)
 800bccc:	9801      	ldr	r0, [sp, #4]
 800bcce:	6813      	ldr	r3, [r2, #0]
 800bcd0:	4615      	mov	r5, r2
 800bcd2:	b933      	cbnz	r3, 800bce2 <_free_r+0x32>
 800bcd4:	6063      	str	r3, [r4, #4]
 800bcd6:	6014      	str	r4, [r2, #0]
 800bcd8:	b003      	add	sp, #12
 800bcda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcde:	f7ff bfe1 	b.w	800bca4 <__malloc_unlock>
 800bce2:	42a3      	cmp	r3, r4
 800bce4:	d90b      	bls.n	800bcfe <_free_r+0x4e>
 800bce6:	6821      	ldr	r1, [r4, #0]
 800bce8:	1862      	adds	r2, r4, r1
 800bcea:	4293      	cmp	r3, r2
 800bcec:	bf04      	itt	eq
 800bcee:	681a      	ldreq	r2, [r3, #0]
 800bcf0:	685b      	ldreq	r3, [r3, #4]
 800bcf2:	6063      	str	r3, [r4, #4]
 800bcf4:	bf04      	itt	eq
 800bcf6:	1852      	addeq	r2, r2, r1
 800bcf8:	6022      	streq	r2, [r4, #0]
 800bcfa:	602c      	str	r4, [r5, #0]
 800bcfc:	e7ec      	b.n	800bcd8 <_free_r+0x28>
 800bcfe:	461a      	mov	r2, r3
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	b10b      	cbz	r3, 800bd08 <_free_r+0x58>
 800bd04:	42a3      	cmp	r3, r4
 800bd06:	d9fa      	bls.n	800bcfe <_free_r+0x4e>
 800bd08:	6811      	ldr	r1, [r2, #0]
 800bd0a:	1855      	adds	r5, r2, r1
 800bd0c:	42a5      	cmp	r5, r4
 800bd0e:	d10b      	bne.n	800bd28 <_free_r+0x78>
 800bd10:	6824      	ldr	r4, [r4, #0]
 800bd12:	4421      	add	r1, r4
 800bd14:	1854      	adds	r4, r2, r1
 800bd16:	42a3      	cmp	r3, r4
 800bd18:	6011      	str	r1, [r2, #0]
 800bd1a:	d1dd      	bne.n	800bcd8 <_free_r+0x28>
 800bd1c:	681c      	ldr	r4, [r3, #0]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	6053      	str	r3, [r2, #4]
 800bd22:	4421      	add	r1, r4
 800bd24:	6011      	str	r1, [r2, #0]
 800bd26:	e7d7      	b.n	800bcd8 <_free_r+0x28>
 800bd28:	d902      	bls.n	800bd30 <_free_r+0x80>
 800bd2a:	230c      	movs	r3, #12
 800bd2c:	6003      	str	r3, [r0, #0]
 800bd2e:	e7d3      	b.n	800bcd8 <_free_r+0x28>
 800bd30:	6825      	ldr	r5, [r4, #0]
 800bd32:	1961      	adds	r1, r4, r5
 800bd34:	428b      	cmp	r3, r1
 800bd36:	bf04      	itt	eq
 800bd38:	6819      	ldreq	r1, [r3, #0]
 800bd3a:	685b      	ldreq	r3, [r3, #4]
 800bd3c:	6063      	str	r3, [r4, #4]
 800bd3e:	bf04      	itt	eq
 800bd40:	1949      	addeq	r1, r1, r5
 800bd42:	6021      	streq	r1, [r4, #0]
 800bd44:	6054      	str	r4, [r2, #4]
 800bd46:	e7c7      	b.n	800bcd8 <_free_r+0x28>
 800bd48:	b003      	add	sp, #12
 800bd4a:	bd30      	pop	{r4, r5, pc}
 800bd4c:	2000009c 	.word	0x2000009c

0800bd50 <_read_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4d07      	ldr	r5, [pc, #28]	; (800bd70 <_read_r+0x20>)
 800bd54:	4604      	mov	r4, r0
 800bd56:	4608      	mov	r0, r1
 800bd58:	4611      	mov	r1, r2
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	602a      	str	r2, [r5, #0]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f7f6 fa1c 	bl	800219c <_read>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_read_r+0x1e>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_read_r+0x1e>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	200008d4 	.word	0x200008d4

0800bd74 <_fstat_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	4d07      	ldr	r5, [pc, #28]	; (800bd94 <_fstat_r+0x20>)
 800bd78:	2300      	movs	r3, #0
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	4608      	mov	r0, r1
 800bd7e:	4611      	mov	r1, r2
 800bd80:	602b      	str	r3, [r5, #0]
 800bd82:	f7f6 fa34 	bl	80021ee <_fstat>
 800bd86:	1c43      	adds	r3, r0, #1
 800bd88:	d102      	bne.n	800bd90 <_fstat_r+0x1c>
 800bd8a:	682b      	ldr	r3, [r5, #0]
 800bd8c:	b103      	cbz	r3, 800bd90 <_fstat_r+0x1c>
 800bd8e:	6023      	str	r3, [r4, #0]
 800bd90:	bd38      	pop	{r3, r4, r5, pc}
 800bd92:	bf00      	nop
 800bd94:	200008d4 	.word	0x200008d4

0800bd98 <_isatty_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4d06      	ldr	r5, [pc, #24]	; (800bdb4 <_isatty_r+0x1c>)
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	4604      	mov	r4, r0
 800bda0:	4608      	mov	r0, r1
 800bda2:	602b      	str	r3, [r5, #0]
 800bda4:	f7f6 fa33 	bl	800220e <_isatty>
 800bda8:	1c43      	adds	r3, r0, #1
 800bdaa:	d102      	bne.n	800bdb2 <_isatty_r+0x1a>
 800bdac:	682b      	ldr	r3, [r5, #0]
 800bdae:	b103      	cbz	r3, 800bdb2 <_isatty_r+0x1a>
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	bd38      	pop	{r3, r4, r5, pc}
 800bdb4:	200008d4 	.word	0x200008d4

0800bdb8 <_init>:
 800bdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdba:	bf00      	nop
 800bdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdbe:	bc08      	pop	{r3}
 800bdc0:	469e      	mov	lr, r3
 800bdc2:	4770      	bx	lr

0800bdc4 <_fini>:
 800bdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc6:	bf00      	nop
 800bdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdca:	bc08      	pop	{r3}
 800bdcc:	469e      	mov	lr, r3
 800bdce:	4770      	bx	lr
